{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.removeDecorators = void 0;\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nvar ts = require(\"typescript\");\n\nvar ast_helpers_1 = require(\"./ast_helpers\");\n\nvar interfaces_1 = require(\"./interfaces\");\n\nvar make_transform_1 = require(\"./make_transform\");\n\nfunction removeDecorators(shouldTransform, getTypeChecker) {\n  var standardTransform = function standardTransform(sourceFile) {\n    var ops = [];\n\n    if (!shouldTransform(sourceFile.fileName)) {\n      return ops;\n    }\n\n    ast_helpers_1.collectDeepNodes(sourceFile, ts.SyntaxKind.Decorator).filter(function (decorator) {\n      return shouldRemove(decorator, getTypeChecker());\n    }).forEach(function (decorator) {\n      // Remove the decorator node.\n      ops.push(new interfaces_1.RemoveNodeOperation(sourceFile, decorator));\n    });\n    return ops;\n  };\n\n  return make_transform_1.makeTransform(standardTransform, getTypeChecker);\n}\n\nexports.removeDecorators = removeDecorators;\n\nfunction shouldRemove(decorator, typeChecker) {\n  var origin = getDecoratorOrigin(decorator, typeChecker);\n  return origin ? origin.module === '@angular/core' : false;\n}\n\nfunction getDecoratorOrigin(decorator, typeChecker) {\n  if (!ts.isCallExpression(decorator.expression)) {\n    return null;\n  }\n\n  var identifier;\n  var name = undefined;\n\n  if (ts.isPropertyAccessExpression(decorator.expression.expression)) {\n    identifier = decorator.expression.expression.expression;\n    name = decorator.expression.expression.name.text;\n  } else if (ts.isIdentifier(decorator.expression.expression)) {\n    identifier = decorator.expression.expression;\n  } else {\n    return null;\n  } // NOTE: resolver.getReferencedImportDeclaration would work as well but is internal\n\n\n  var symbol = typeChecker.getSymbolAtLocation(identifier);\n\n  if (symbol && symbol.declarations && symbol.declarations.length > 0) {\n    var declaration = symbol.declarations[0];\n    var module;\n\n    if (ts.isImportSpecifier(declaration)) {\n      name = (declaration.propertyName || declaration.name).text;\n      module = declaration.parent && declaration.parent.parent && declaration.parent.parent.parent && declaration.parent.parent.parent.moduleSpecifier.text || '';\n    } else if (ts.isNamespaceImport(declaration)) {\n      // Use the name from the decorator namespace property access\n      module = declaration.parent && declaration.parent.parent && declaration.parent.parent.moduleSpecifier.text;\n    } else if (ts.isImportClause(declaration)) {\n      name = declaration.name && declaration.name.text;\n      module = declaration.parent && declaration.parent.moduleSpecifier.text;\n    } else {\n      return null;\n    }\n\n    return {\n      name: name || '',\n      module: module || ''\n    };\n  }\n\n  return null;\n}","map":{"version":3,"sources":["/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@ngtools/webpack/src/transformers/remove_decorators.js"],"names":["Object","defineProperty","exports","value","removeDecorators","ts","require","ast_helpers_1","interfaces_1","make_transform_1","shouldTransform","getTypeChecker","standardTransform","sourceFile","ops","fileName","collectDeepNodes","SyntaxKind","Decorator","filter","decorator","shouldRemove","forEach","push","RemoveNodeOperation","makeTransform","typeChecker","origin","getDecoratorOrigin","module","isCallExpression","expression","identifier","name","undefined","isPropertyAccessExpression","text","isIdentifier","symbol","getSymbolAtLocation","declarations","length","declaration","isImportSpecifier","propertyName","parent","moduleSpecifier","isNamespaceImport","isImportClause"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.removeDecorators = void 0;\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst ts = require(\"typescript\");\nconst ast_helpers_1 = require(\"./ast_helpers\");\nconst interfaces_1 = require(\"./interfaces\");\nconst make_transform_1 = require(\"./make_transform\");\nfunction removeDecorators(shouldTransform, getTypeChecker) {\n    const standardTransform = function (sourceFile) {\n        const ops = [];\n        if (!shouldTransform(sourceFile.fileName)) {\n            return ops;\n        }\n        ast_helpers_1.collectDeepNodes(sourceFile, ts.SyntaxKind.Decorator)\n            .filter((decorator) => shouldRemove(decorator, getTypeChecker()))\n            .forEach((decorator) => {\n            // Remove the decorator node.\n            ops.push(new interfaces_1.RemoveNodeOperation(sourceFile, decorator));\n        });\n        return ops;\n    };\n    return make_transform_1.makeTransform(standardTransform, getTypeChecker);\n}\nexports.removeDecorators = removeDecorators;\nfunction shouldRemove(decorator, typeChecker) {\n    const origin = getDecoratorOrigin(decorator, typeChecker);\n    return origin ? origin.module === '@angular/core' : false;\n}\nfunction getDecoratorOrigin(decorator, typeChecker) {\n    if (!ts.isCallExpression(decorator.expression)) {\n        return null;\n    }\n    let identifier;\n    let name = undefined;\n    if (ts.isPropertyAccessExpression(decorator.expression.expression)) {\n        identifier = decorator.expression.expression.expression;\n        name = decorator.expression.expression.name.text;\n    }\n    else if (ts.isIdentifier(decorator.expression.expression)) {\n        identifier = decorator.expression.expression;\n    }\n    else {\n        return null;\n    }\n    // NOTE: resolver.getReferencedImportDeclaration would work as well but is internal\n    const symbol = typeChecker.getSymbolAtLocation(identifier);\n    if (symbol && symbol.declarations && symbol.declarations.length > 0) {\n        const declaration = symbol.declarations[0];\n        let module;\n        if (ts.isImportSpecifier(declaration)) {\n            name = (declaration.propertyName || declaration.name).text;\n            module = declaration.parent\n                && declaration.parent.parent\n                && declaration.parent.parent.parent\n                && declaration.parent.parent.parent.moduleSpecifier.text\n                || '';\n        }\n        else if (ts.isNamespaceImport(declaration)) {\n            // Use the name from the decorator namespace property access\n            module = declaration.parent\n                && declaration.parent.parent\n                && declaration.parent.parent.moduleSpecifier.text;\n        }\n        else if (ts.isImportClause(declaration)) {\n            name = declaration.name && declaration.name.text;\n            module = declaration.parent && declaration.parent.moduleSpecifier.text;\n        }\n        else {\n            return null;\n        }\n        return { name: name || '', module: module || '' };\n    }\n    return null;\n}\n"]},"metadata":{},"sourceType":"script"}