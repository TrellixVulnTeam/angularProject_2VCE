{"ast":null,"code":"var debug = require(\"debug\")(\"streamroller:fileNameFormatter\");\n\nvar path = require(\"path\");\n\nvar FILENAME_SEP = \".\";\nvar ZIP_EXT = \".gz\";\n\nmodule.exports = function (_ref) {\n  var file = _ref.file,\n      keepFileExt = _ref.keepFileExt,\n      needsIndex = _ref.needsIndex,\n      alwaysIncludeDate = _ref.alwaysIncludeDate,\n      compress = _ref.compress;\n  var dirAndName = path.join(file.dir, file.name);\n\n  var ext = function ext(f) {\n    return f + file.ext;\n  };\n\n  var index = function index(f, i, d) {\n    return (needsIndex || !d) && i ? f + FILENAME_SEP + i : f;\n  };\n\n  var date = function date(f, i, d) {\n    return (i > 0 || alwaysIncludeDate) && d ? f + FILENAME_SEP + d : f;\n  };\n\n  var gzip = function gzip(f, i) {\n    return i && compress ? f + ZIP_EXT : f;\n  };\n\n  var parts = keepFileExt ? [date, index, ext, gzip] : [ext, date, index, gzip];\n  return function (_ref2) {\n    var date = _ref2.date,\n        index = _ref2.index;\n    debug(\"_formatFileName: date=\".concat(date, \", index=\").concat(index));\n    return parts.reduce(function (filename, part) {\n      return part(filename, index, date);\n    }, dirAndName);\n  };\n};","map":{"version":3,"sources":["/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/streamroller/lib/fileNameFormatter.js"],"names":["debug","require","path","FILENAME_SEP","ZIP_EXT","module","exports","file","keepFileExt","needsIndex","alwaysIncludeDate","compress","dirAndName","join","dir","name","ext","f","index","i","d","date","gzip","parts","reduce","filename","part"],"mappings":"AAAA,IAAMA,KAAK,GAAGC,OAAO,CAAC,OAAD,CAAP,CAAiB,gCAAjB,CAAd;;AACA,IAAMC,IAAI,GAAGD,OAAO,CAAC,MAAD,CAApB;;AACA,IAAME,YAAY,GAAG,GAArB;AACA,IAAMC,OAAO,GAAG,KAAhB;;AAEAC,MAAM,CAACC,OAAP,GAAiB,gBAMX;AAAA,MALJC,IAKI,QALJA,IAKI;AAAA,MAJJC,WAII,QAJJA,WAII;AAAA,MAHJC,UAGI,QAHJA,UAGI;AAAA,MAFJC,iBAEI,QAFJA,iBAEI;AAAA,MADJC,QACI,QADJA,QACI;AACJ,MAAMC,UAAU,GAAGV,IAAI,CAACW,IAAL,CAAUN,IAAI,CAACO,GAAf,EAAoBP,IAAI,CAACQ,IAAzB,CAAnB;;AAEA,MAAMC,GAAG,GAAG,SAANA,GAAM,CAAAC,CAAC;AAAA,WAAIA,CAAC,GAAGV,IAAI,CAACS,GAAb;AAAA,GAAb;;AAEA,MAAME,KAAK,GAAG,SAARA,KAAQ,CAACD,CAAD,EAAIE,CAAJ,EAAOC,CAAP;AAAA,WACZ,CAACX,UAAU,IAAI,CAACW,CAAhB,KAAsBD,CAAtB,GAA0BF,CAAC,GAAGd,YAAJ,GAAmBgB,CAA7C,GAAiDF,CADrC;AAAA,GAAd;;AAGA,MAAMI,IAAI,GAAG,SAAPA,IAAO,CAACJ,CAAD,EAAIE,CAAJ,EAAOC,CAAP,EAAa;AACxB,WAAO,CAACD,CAAC,GAAG,CAAJ,IAAST,iBAAV,KAAgCU,CAAhC,GAAoCH,CAAC,GAAGd,YAAJ,GAAmBiB,CAAvD,GAA2DH,CAAlE;AACD,GAFD;;AAIA,MAAMK,IAAI,GAAG,SAAPA,IAAO,CAACL,CAAD,EAAIE,CAAJ;AAAA,WAAWA,CAAC,IAAIR,QAAL,GAAgBM,CAAC,GAAGb,OAApB,GAA8Ba,CAAzC;AAAA,GAAb;;AAEA,MAAMM,KAAK,GAAGf,WAAW,GACrB,CAACa,IAAD,EAAOH,KAAP,EAAcF,GAAd,EAAmBM,IAAnB,CADqB,GAErB,CAACN,GAAD,EAAMK,IAAN,EAAYH,KAAZ,EAAmBI,IAAnB,CAFJ;AAIA,SAAO,iBAAqB;AAAA,QAAlBD,IAAkB,SAAlBA,IAAkB;AAAA,QAAZH,KAAY,SAAZA,KAAY;AAC1BlB,IAAAA,KAAK,iCAA0BqB,IAA1B,qBAAyCH,KAAzC,EAAL;AACA,WAAOK,KAAK,CAACC,MAAN,CACL,UAACC,QAAD,EAAWC,IAAX;AAAA,aAAoBA,IAAI,CAACD,QAAD,EAAWP,KAAX,EAAkBG,IAAlB,CAAxB;AAAA,KADK,EAELT,UAFK,CAAP;AAID,GAND;AAOD,CA/BD","sourcesContent":["const debug = require(\"debug\")(\"streamroller:fileNameFormatter\");\nconst path = require(\"path\");\nconst FILENAME_SEP = \".\";\nconst ZIP_EXT = \".gz\";\n\nmodule.exports = ({\n  file,\n  keepFileExt,\n  needsIndex,\n  alwaysIncludeDate,\n  compress\n}) => {\n  const dirAndName = path.join(file.dir, file.name);\n\n  const ext = f => f + file.ext;\n\n  const index = (f, i, d) =>\n    (needsIndex || !d) && i ? f + FILENAME_SEP + i : f;\n\n  const date = (f, i, d) => {\n    return (i > 0 || alwaysIncludeDate) && d ? f + FILENAME_SEP + d : f;\n  };\n\n  const gzip = (f, i) => (i && compress ? f + ZIP_EXT : f);\n\n  const parts = keepFileExt\n    ? [date, index, ext, gzip]\n    : [ext, date, index, gzip];\n\n  return ({ date, index }) => {\n    debug(`_formatFileName: date=${date}, index=${index}`);\n    return parts.reduce(\n      (filename, part) => part(filename, index, date),\n      dirAndName\n    );\n  };\n};\n"]},"metadata":{},"sourceType":"script"}