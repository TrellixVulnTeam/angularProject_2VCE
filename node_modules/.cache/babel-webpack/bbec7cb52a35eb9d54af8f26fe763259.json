{"ast":null,"code":"/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n(function (factory) {\n  if (typeof module === \"object\" && typeof module.exports === \"object\") {\n    var v = factory(require, exports);\n    if (v !== undefined) module.exports = v;\n  } else if (typeof define === \"function\" && define.amd) {\n    define(\"@angular/compiler/src/ng_module_resolver\", [\"require\", \"exports\", \"@angular/compiler/src/core\", \"@angular/compiler/src/directive_resolver\", \"@angular/compiler/src/util\"], factory);\n  }\n})(function (require, exports) {\n  \"use strict\";\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.NgModuleResolver = void 0;\n\n  var core_1 = require(\"@angular/compiler/src/core\");\n\n  var directive_resolver_1 = require(\"@angular/compiler/src/directive_resolver\");\n\n  var util_1 = require(\"@angular/compiler/src/util\");\n  /**\n   * Resolves types to {@link NgModule}.\n   */\n\n\n  var NgModuleResolver =\n  /** @class */\n  function () {\n    function NgModuleResolver(_reflector) {\n      this._reflector = _reflector;\n    }\n\n    NgModuleResolver.prototype.isNgModule = function (type) {\n      return this._reflector.annotations(type).some(core_1.createNgModule.isTypeOf);\n    };\n\n    NgModuleResolver.prototype.resolve = function (type, throwIfNotFound) {\n      if (throwIfNotFound === void 0) {\n        throwIfNotFound = true;\n      }\n\n      var ngModuleMeta = directive_resolver_1.findLast(this._reflector.annotations(type), core_1.createNgModule.isTypeOf);\n\n      if (ngModuleMeta) {\n        return ngModuleMeta;\n      } else {\n        if (throwIfNotFound) {\n          throw new Error(\"No NgModule metadata found for '\" + util_1.stringify(type) + \"'.\");\n        }\n\n        return null;\n      }\n    };\n\n    return NgModuleResolver;\n  }();\n\n  exports.NgModuleResolver = NgModuleResolver;\n});","map":{"version":3,"sources":["../../../../../../packages/compiler/src/ng_module_resolver.ts"],"names":[],"mappings":"AAAA;;;;;;AAMG;;;;;;;;;;;;;;;;AAGH,MAAA,MAAA,GAAA,OAAA,CAAA,4BAAA,CAAA;;AACA,MAAA,oBAAA,GAAA,OAAA,CAAA,0CAAA,CAAA;;AACA,MAAA,MAAA,GAAA,OAAA,CAAA,4BAAA,CAAA;AAGA;;AAEG;;;AACH,MAAA,gBAAA;AAAA;AAAA,cAAA;AACE,aAAA,gBAAA,CAAoB,UAApB,EAAgD;AAA5B,WAAA,UAAA,GAAA,UAAA;AAAgC;;AAEpD,IAAA,gBAAA,CAAA,SAAA,CAAA,UAAA,GAAA,UAAW,IAAX,EAAoB;AAClB,aAAO,KAAK,UAAL,CAAgB,WAAhB,CAA4B,IAA5B,EAAkC,IAAlC,CAAuC,MAAA,CAAA,cAAA,CAAe,QAAtD,CAAP;AACD,KAFD;;AAIA,IAAA,gBAAA,CAAA,SAAA,CAAA,OAAA,GAAA,UAAQ,IAAR,EAAoB,eAApB,EAA0C;AAAtB,UAAA,eAAA,KAAA,KAAA,CAAA,EAAA;AAAA,QAAA,eAAA,GAAA,IAAA;AAAsB;;AACxC,UAAM,YAAY,GACd,oBAAA,CAAA,QAAA,CAAS,KAAK,UAAL,CAAgB,WAAhB,CAA4B,IAA5B,CAAT,EAA4C,MAAA,CAAA,cAAA,CAAe,QAA3D,CADJ;;AAGA,UAAI,YAAJ,EAAkB;AAChB,eAAO,YAAP;AACD,OAFD,MAEO;AACL,YAAI,eAAJ,EAAqB;AACnB,gBAAM,IAAI,KAAJ,CAAU,qCAAmC,MAAA,CAAA,SAAA,CAAU,IAAV,CAAnC,GAAkD,IAA5D,CAAN;AACD;;AACD,eAAO,IAAP;AACD;AACF,KAZD;;AAaF,WAAA,gBAAA;AAAC,GApBD,EAAA;;AAAa,EAAA,OAAA,CAAA,gBAAA,GAAA,gBAAA","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CompileReflector} from './compile_reflector';\nimport {createNgModule, NgModule, Type} from './core';\nimport {findLast} from './directive_resolver';\nimport {stringify} from './util';\n\n\n/**\n * Resolves types to {@link NgModule}.\n */\nexport class NgModuleResolver {\n  constructor(private _reflector: CompileReflector) {}\n\n  isNgModule(type: any) {\n    return this._reflector.annotations(type).some(createNgModule.isTypeOf);\n  }\n\n  resolve(type: Type, throwIfNotFound = true): NgModule|null {\n    const ngModuleMeta: NgModule =\n        findLast(this._reflector.annotations(type), createNgModule.isTypeOf);\n\n    if (ngModuleMeta) {\n      return ngModuleMeta;\n    } else {\n      if (throwIfNotFound) {\n        throw new Error(`No NgModule metadata found for '${stringify(type)}'.`);\n      }\n      return null;\n    }\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}