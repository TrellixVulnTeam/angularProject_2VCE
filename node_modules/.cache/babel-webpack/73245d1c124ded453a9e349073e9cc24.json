{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.readFile = exports.stat = void 0;\n\nvar stat = function stat(inputFileSystem, path) {\n  return new Promise(function (resolve, reject) {\n    inputFileSystem.stat(path, function (err, stats) {\n      if (err) {\n        reject(err);\n      }\n\n      resolve(stats);\n    });\n  });\n};\n\nexports.stat = stat;\n\nvar readFile = function readFile(inputFileSystem, path) {\n  return new Promise(function (resolve, reject) {\n    inputFileSystem.readFile(path, function (err, stats) {\n      if (err) {\n        reject(err);\n      }\n\n      resolve(stats);\n    });\n  });\n};\n\nexports.readFile = readFile;","map":{"version":3,"sources":["/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/copy-webpack-plugin/dist/utils/promisify.js"],"names":["Object","defineProperty","exports","value","readFile","stat","inputFileSystem","path","Promise","resolve","reject","err","stats"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,QAAR,GAAmBF,OAAO,CAACG,IAAR,GAAe,KAAK,CAAvC;;AAEA,IAAMA,IAAI,GAAG,SAAPA,IAAO,CAACC,eAAD,EAAkBC,IAAlB;AAAA,SAA2B,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACvEJ,IAAAA,eAAe,CAACD,IAAhB,CAAqBE,IAArB,EAA2B,UAACI,GAAD,EAAMC,KAAN,EAAgB;AACzC,UAAID,GAAJ,EAAS;AACPD,QAAAA,MAAM,CAACC,GAAD,CAAN;AACD;;AAEDF,MAAAA,OAAO,CAACG,KAAD,CAAP;AACD,KAND;AAOD,GARuC,CAA3B;AAAA,CAAb;;AAUAV,OAAO,CAACG,IAAR,GAAeA,IAAf;;AAEA,IAAMD,QAAQ,GAAG,SAAXA,QAAW,CAACE,eAAD,EAAkBC,IAAlB;AAAA,SAA2B,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AAC3EJ,IAAAA,eAAe,CAACF,QAAhB,CAAyBG,IAAzB,EAA+B,UAACI,GAAD,EAAMC,KAAN,EAAgB;AAC7C,UAAID,GAAJ,EAAS;AACPD,QAAAA,MAAM,CAACC,GAAD,CAAN;AACD;;AAEDF,MAAAA,OAAO,CAACG,KAAD,CAAP;AACD,KAND;AAOD,GAR2C,CAA3B;AAAA,CAAjB;;AAUAV,OAAO,CAACE,QAAR,GAAmBA,QAAnB","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.readFile = exports.stat = void 0;\n\nconst stat = (inputFileSystem, path) => new Promise((resolve, reject) => {\n  inputFileSystem.stat(path, (err, stats) => {\n    if (err) {\n      reject(err);\n    }\n\n    resolve(stats);\n  });\n});\n\nexports.stat = stat;\n\nconst readFile = (inputFileSystem, path) => new Promise((resolve, reject) => {\n  inputFileSystem.readFile(path, (err, stats) => {\n    if (err) {\n      reject(err);\n    }\n\n    resolve(stats);\n  });\n});\n\nexports.readFile = readFile;"]},"metadata":{},"sourceType":"script"}