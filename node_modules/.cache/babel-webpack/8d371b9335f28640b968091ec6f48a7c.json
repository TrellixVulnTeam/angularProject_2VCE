{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nvar _classCallCheck = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar _createForOfIteratorHelper = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar t = require(\"@webassemblyjs/ast\");\n\nvar _require = require(\"@webassemblyjs/wasm-parser\"),\n    decode = _require.decode;\n\nvar _require2 = require(\"@webassemblyjs/helper-module-context\"),\n    moduleContextFromModuleAST = _require2.moduleContextFromModuleAST;\n\nvar _require3 = require(\"tapable\"),\n    Tapable = _require3.Tapable;\n\nvar WebAssemblyImportDependency = require(\"../dependencies/WebAssemblyImportDependency\");\n\nvar WebAssemblyExportImportedDependency = require(\"../dependencies/WebAssemblyExportImportedDependency\");\n/** @typedef {import(\"../Module\")} Module */\n\n\nvar JS_COMPAT_TYPES = new Set([\"i32\", \"f32\", \"f64\"]);\n/**\n * @param {t.Signature} signature the func signature\n * @returns {null | string} the type incompatible with js types\n */\n\nvar getJsIncompatibleType = function getJsIncompatibleType(signature) {\n  var _iterator = _createForOfIteratorHelper(signature.params),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var param = _step.value;\n\n      if (!JS_COMPAT_TYPES.has(param.valtype)) {\n        return \"\".concat(param.valtype, \" as parameter\");\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  var _iterator2 = _createForOfIteratorHelper(signature.results),\n      _step2;\n\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var type = _step2.value;\n      if (!JS_COMPAT_TYPES.has(type)) return \"\".concat(type, \" as result\");\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n\n  return null;\n};\n/**\n * TODO why are there two different Signature types?\n * @param {t.FuncSignature} signature the func signature\n * @returns {null | string} the type incompatible with js types\n */\n\n\nvar getJsIncompatibleTypeOfFuncSignature = function getJsIncompatibleTypeOfFuncSignature(signature) {\n  var _iterator3 = _createForOfIteratorHelper(signature.args),\n      _step3;\n\n  try {\n    for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n      var param = _step3.value;\n\n      if (!JS_COMPAT_TYPES.has(param)) {\n        return \"\".concat(param, \" as parameter\");\n      }\n    }\n  } catch (err) {\n    _iterator3.e(err);\n  } finally {\n    _iterator3.f();\n  }\n\n  var _iterator4 = _createForOfIteratorHelper(signature.result),\n      _step4;\n\n  try {\n    for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n      var type = _step4.value;\n      if (!JS_COMPAT_TYPES.has(type)) return \"\".concat(type, \" as result\");\n    }\n  } catch (err) {\n    _iterator4.e(err);\n  } finally {\n    _iterator4.f();\n  }\n\n  return null;\n};\n\nvar decoderOpts = {\n  ignoreCodeSection: true,\n  ignoreDataSection: true,\n  // this will avoid having to lookup with identifiers in the ModuleContext\n  ignoreCustomNameSection: true\n};\n\nvar WebAssemblyParser = /*#__PURE__*/function (_Tapable) {\n  _inherits(WebAssemblyParser, _Tapable);\n\n  var _super = _createSuper(WebAssemblyParser);\n\n  function WebAssemblyParser(options) {\n    var _this;\n\n    _classCallCheck(this, WebAssemblyParser);\n\n    _this = _super.call(this);\n    _this.hooks = {};\n    _this.options = options;\n    return _this;\n  }\n\n  _createClass(WebAssemblyParser, [{\n    key: \"parse\",\n    value: function parse(binary, state) {\n      // flag it as ESM\n      state.module.buildMeta.exportsType = \"namespace\"; // parse it\n\n      var program = decode(binary, decoderOpts);\n      var module = program.body[0];\n      var moduleContext = moduleContextFromModuleAST(module); // extract imports and exports\n\n      var exports = state.module.buildMeta.providedExports = [];\n      var jsIncompatibleExports = state.module.buildMeta.jsIncompatibleExports = [];\n      var importedGlobals = [];\n      t.traverse(module, {\n        ModuleExport: function ModuleExport(_ref) {\n          var node = _ref.node;\n          var descriptor = node.descr;\n\n          if (descriptor.exportType === \"Func\") {\n            var funcidx = descriptor.id.value;\n            /** @type {t.FuncSignature} */\n\n            var funcSignature = moduleContext.getFunction(funcidx);\n            var incompatibleType = getJsIncompatibleTypeOfFuncSignature(funcSignature);\n\n            if (incompatibleType) {\n              jsIncompatibleExports[node.name] = incompatibleType;\n            }\n          }\n\n          exports.push(node.name);\n\n          if (node.descr && node.descr.exportType === \"Global\") {\n            var refNode = importedGlobals[node.descr.id.value];\n\n            if (refNode) {\n              var dep = new WebAssemblyExportImportedDependency(node.name, refNode.module, refNode.name, refNode.descr.valtype);\n              state.module.addDependency(dep);\n            }\n          }\n        },\n        Global: function Global(_ref2) {\n          var node = _ref2.node;\n          var init = node.init[0];\n          var importNode = null;\n\n          if (init.id === \"get_global\") {\n            var globalIdx = init.args[0].value;\n\n            if (globalIdx < importedGlobals.length) {\n              importNode = importedGlobals[globalIdx];\n            }\n          }\n\n          importedGlobals.push(importNode);\n        },\n        ModuleImport: function ModuleImport(_ref3) {\n          var node = _ref3.node;\n\n          /** @type {false | string} */\n          var onlyDirectImport = false;\n\n          if (t.isMemory(node.descr) === true) {\n            onlyDirectImport = \"Memory\";\n          } else if (t.isTable(node.descr) === true) {\n            onlyDirectImport = \"Table\";\n          } else if (t.isFuncImportDescr(node.descr) === true) {\n            var incompatibleType = getJsIncompatibleType(node.descr.signature);\n\n            if (incompatibleType) {\n              onlyDirectImport = \"Non-JS-compatible Func Sigurature (\".concat(incompatibleType, \")\");\n            }\n          } else if (t.isGlobalType(node.descr) === true) {\n            var type = node.descr.valtype;\n\n            if (!JS_COMPAT_TYPES.has(type)) {\n              onlyDirectImport = \"Non-JS-compatible Global Type (\".concat(type, \")\");\n            }\n          }\n\n          var dep = new WebAssemblyImportDependency(node.module, node.name, node.descr, onlyDirectImport);\n          state.module.addDependency(dep);\n\n          if (t.isGlobalType(node.descr)) {\n            importedGlobals.push(node);\n          }\n        }\n      });\n      return state;\n    }\n  }]);\n\n  return WebAssemblyParser;\n}(Tapable);\n\nmodule.exports = WebAssemblyParser;","map":{"version":3,"sources":["/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/webpack/lib/wasm/WebAssemblyParser.js"],"names":["t","require","decode","moduleContextFromModuleAST","Tapable","WebAssemblyImportDependency","WebAssemblyExportImportedDependency","JS_COMPAT_TYPES","Set","getJsIncompatibleType","signature","params","param","has","valtype","results","type","getJsIncompatibleTypeOfFuncSignature","args","result","decoderOpts","ignoreCodeSection","ignoreDataSection","ignoreCustomNameSection","WebAssemblyParser","options","hooks","binary","state","module","buildMeta","exportsType","program","body","moduleContext","exports","providedExports","jsIncompatibleExports","importedGlobals","traverse","ModuleExport","node","descriptor","descr","exportType","funcidx","id","value","funcSignature","getFunction","incompatibleType","name","push","refNode","dep","addDependency","Global","init","importNode","globalIdx","length","ModuleImport","onlyDirectImport","isMemory","isTable","isFuncImportDescr","isGlobalType"],"mappings":"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","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst t = require(\"@webassemblyjs/ast\");\nconst { decode } = require(\"@webassemblyjs/wasm-parser\");\nconst {\n\tmoduleContextFromModuleAST\n} = require(\"@webassemblyjs/helper-module-context\");\n\nconst { Tapable } = require(\"tapable\");\nconst WebAssemblyImportDependency = require(\"../dependencies/WebAssemblyImportDependency\");\nconst WebAssemblyExportImportedDependency = require(\"../dependencies/WebAssemblyExportImportedDependency\");\n\n/** @typedef {import(\"../Module\")} Module */\n\nconst JS_COMPAT_TYPES = new Set([\"i32\", \"f32\", \"f64\"]);\n\n/**\n * @param {t.Signature} signature the func signature\n * @returns {null | string} the type incompatible with js types\n */\nconst getJsIncompatibleType = signature => {\n\tfor (const param of signature.params) {\n\t\tif (!JS_COMPAT_TYPES.has(param.valtype)) {\n\t\t\treturn `${param.valtype} as parameter`;\n\t\t}\n\t}\n\tfor (const type of signature.results) {\n\t\tif (!JS_COMPAT_TYPES.has(type)) return `${type} as result`;\n\t}\n\treturn null;\n};\n\n/**\n * TODO why are there two different Signature types?\n * @param {t.FuncSignature} signature the func signature\n * @returns {null | string} the type incompatible with js types\n */\nconst getJsIncompatibleTypeOfFuncSignature = signature => {\n\tfor (const param of signature.args) {\n\t\tif (!JS_COMPAT_TYPES.has(param)) {\n\t\t\treturn `${param} as parameter`;\n\t\t}\n\t}\n\tfor (const type of signature.result) {\n\t\tif (!JS_COMPAT_TYPES.has(type)) return `${type} as result`;\n\t}\n\treturn null;\n};\n\nconst decoderOpts = {\n\tignoreCodeSection: true,\n\tignoreDataSection: true,\n\n\t// this will avoid having to lookup with identifiers in the ModuleContext\n\tignoreCustomNameSection: true\n};\n\nclass WebAssemblyParser extends Tapable {\n\tconstructor(options) {\n\t\tsuper();\n\t\tthis.hooks = {};\n\t\tthis.options = options;\n\t}\n\n\tparse(binary, state) {\n\t\t// flag it as ESM\n\t\tstate.module.buildMeta.exportsType = \"namespace\";\n\n\t\t// parse it\n\t\tconst program = decode(binary, decoderOpts);\n\t\tconst module = program.body[0];\n\n\t\tconst moduleContext = moduleContextFromModuleAST(module);\n\n\t\t// extract imports and exports\n\t\tconst exports = (state.module.buildMeta.providedExports = []);\n\t\tconst jsIncompatibleExports = (state.module.buildMeta.jsIncompatibleExports = []);\n\n\t\tconst importedGlobals = [];\n\t\tt.traverse(module, {\n\t\t\tModuleExport({ node }) {\n\t\t\t\tconst descriptor = node.descr;\n\n\t\t\t\tif (descriptor.exportType === \"Func\") {\n\t\t\t\t\tconst funcidx = descriptor.id.value;\n\n\t\t\t\t\t/** @type {t.FuncSignature} */\n\t\t\t\t\tconst funcSignature = moduleContext.getFunction(funcidx);\n\n\t\t\t\t\tconst incompatibleType = getJsIncompatibleTypeOfFuncSignature(\n\t\t\t\t\t\tfuncSignature\n\t\t\t\t\t);\n\n\t\t\t\t\tif (incompatibleType) {\n\t\t\t\t\t\tjsIncompatibleExports[node.name] = incompatibleType;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\texports.push(node.name);\n\n\t\t\t\tif (node.descr && node.descr.exportType === \"Global\") {\n\t\t\t\t\tconst refNode = importedGlobals[node.descr.id.value];\n\t\t\t\t\tif (refNode) {\n\t\t\t\t\t\tconst dep = new WebAssemblyExportImportedDependency(\n\t\t\t\t\t\t\tnode.name,\n\t\t\t\t\t\t\trefNode.module,\n\t\t\t\t\t\t\trefNode.name,\n\t\t\t\t\t\t\trefNode.descr.valtype\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tstate.module.addDependency(dep);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tGlobal({ node }) {\n\t\t\t\tconst init = node.init[0];\n\n\t\t\t\tlet importNode = null;\n\n\t\t\t\tif (init.id === \"get_global\") {\n\t\t\t\t\tconst globalIdx = init.args[0].value;\n\n\t\t\t\t\tif (globalIdx < importedGlobals.length) {\n\t\t\t\t\t\timportNode = importedGlobals[globalIdx];\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\timportedGlobals.push(importNode);\n\t\t\t},\n\n\t\t\tModuleImport({ node }) {\n\t\t\t\t/** @type {false | string} */\n\t\t\t\tlet onlyDirectImport = false;\n\n\t\t\t\tif (t.isMemory(node.descr) === true) {\n\t\t\t\t\tonlyDirectImport = \"Memory\";\n\t\t\t\t} else if (t.isTable(node.descr) === true) {\n\t\t\t\t\tonlyDirectImport = \"Table\";\n\t\t\t\t} else if (t.isFuncImportDescr(node.descr) === true) {\n\t\t\t\t\tconst incompatibleType = getJsIncompatibleType(node.descr.signature);\n\t\t\t\t\tif (incompatibleType) {\n\t\t\t\t\t\tonlyDirectImport = `Non-JS-compatible Func Sigurature (${incompatibleType})`;\n\t\t\t\t\t}\n\t\t\t\t} else if (t.isGlobalType(node.descr) === true) {\n\t\t\t\t\tconst type = node.descr.valtype;\n\t\t\t\t\tif (!JS_COMPAT_TYPES.has(type)) {\n\t\t\t\t\t\tonlyDirectImport = `Non-JS-compatible Global Type (${type})`;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tconst dep = new WebAssemblyImportDependency(\n\t\t\t\t\tnode.module,\n\t\t\t\t\tnode.name,\n\t\t\t\t\tnode.descr,\n\t\t\t\t\tonlyDirectImport\n\t\t\t\t);\n\n\t\t\t\tstate.module.addDependency(dep);\n\n\t\t\t\tif (t.isGlobalType(node.descr)) {\n\t\t\t\t\timportedGlobals.push(node);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\treturn state;\n\t}\n}\n\nmodule.exports = WebAssemblyParser;\n"]},"metadata":{},"sourceType":"script"}