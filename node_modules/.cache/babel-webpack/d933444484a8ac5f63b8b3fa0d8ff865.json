{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nvar _classCallCheck = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/createClass\");\n\nvar ConstDependency = require(\"./ConstDependency\");\n\nvar CommonJsRequireDependency = require(\"./CommonJsRequireDependency\");\n\nvar CommonJsRequireContextDependency = require(\"./CommonJsRequireContextDependency\");\n\nvar RequireResolveDependency = require(\"./RequireResolveDependency\");\n\nvar RequireResolveContextDependency = require(\"./RequireResolveContextDependency\");\n\nvar RequireResolveHeaderDependency = require(\"./RequireResolveHeaderDependency\");\n\nvar RequireHeaderDependency = require(\"./RequireHeaderDependency\");\n\nvar NullFactory = require(\"../NullFactory\");\n\nvar RequireResolveDependencyParserPlugin = require(\"./RequireResolveDependencyParserPlugin\");\n\nvar CommonJsRequireDependencyParserPlugin = require(\"./CommonJsRequireDependencyParserPlugin\");\n\nvar ParserHelpers = require(\"../ParserHelpers\");\n\nvar CommonJsPlugin = /*#__PURE__*/function () {\n  function CommonJsPlugin(options) {\n    _classCallCheck(this, CommonJsPlugin);\n\n    this.options = options;\n  }\n\n  _createClass(CommonJsPlugin, [{\n    key: \"apply\",\n    value: function apply(compiler) {\n      var options = this.options;\n      compiler.hooks.compilation.tap(\"CommonJsPlugin\", function (compilation, _ref) {\n        var contextModuleFactory = _ref.contextModuleFactory,\n            normalModuleFactory = _ref.normalModuleFactory;\n        compilation.dependencyFactories.set(CommonJsRequireDependency, normalModuleFactory);\n        compilation.dependencyTemplates.set(CommonJsRequireDependency, new CommonJsRequireDependency.Template());\n        compilation.dependencyFactories.set(CommonJsRequireContextDependency, contextModuleFactory);\n        compilation.dependencyTemplates.set(CommonJsRequireContextDependency, new CommonJsRequireContextDependency.Template());\n        compilation.dependencyFactories.set(RequireResolveDependency, normalModuleFactory);\n        compilation.dependencyTemplates.set(RequireResolveDependency, new RequireResolveDependency.Template());\n        compilation.dependencyFactories.set(RequireResolveContextDependency, contextModuleFactory);\n        compilation.dependencyTemplates.set(RequireResolveContextDependency, new RequireResolveContextDependency.Template());\n        compilation.dependencyFactories.set(RequireResolveHeaderDependency, new NullFactory());\n        compilation.dependencyTemplates.set(RequireResolveHeaderDependency, new RequireResolveHeaderDependency.Template());\n        compilation.dependencyFactories.set(RequireHeaderDependency, new NullFactory());\n        compilation.dependencyTemplates.set(RequireHeaderDependency, new RequireHeaderDependency.Template());\n\n        var handler = function handler(parser, parserOptions) {\n          if (parserOptions.commonjs !== undefined && !parserOptions.commonjs) return;\n          var requireExpressions = [\"require\", \"require.resolve\", \"require.resolveWeak\"];\n\n          for (var _i = 0, _requireExpressions = requireExpressions; _i < _requireExpressions.length; _i++) {\n            var expression = _requireExpressions[_i];\n            parser.hooks.typeof.for(expression).tap(\"CommonJsPlugin\", ParserHelpers.toConstantDependency(parser, JSON.stringify(\"function\")));\n            parser.hooks.evaluateTypeof.for(expression).tap(\"CommonJsPlugin\", ParserHelpers.evaluateToString(\"function\"));\n            parser.hooks.evaluateIdentifier.for(expression).tap(\"CommonJsPlugin\", ParserHelpers.evaluateToIdentifier(expression, true));\n          }\n\n          parser.hooks.evaluateTypeof.for(\"module\").tap(\"CommonJsPlugin\", ParserHelpers.evaluateToString(\"object\"));\n          parser.hooks.assign.for(\"require\").tap(\"CommonJsPlugin\", function (expr) {\n            // to not leak to global \"require\", we need to define a local require here.\n            var dep = new ConstDependency(\"var require;\", 0);\n            dep.loc = expr.loc;\n            parser.state.current.addDependency(dep);\n            parser.scope.definitions.add(\"require\");\n            return true;\n          });\n          parser.hooks.canRename.for(\"require\").tap(\"CommonJsPlugin\", function () {\n            return true;\n          });\n          parser.hooks.rename.for(\"require\").tap(\"CommonJsPlugin\", function (expr) {\n            // define the require variable. It's still undefined, but not \"not defined\".\n            var dep = new ConstDependency(\"var require;\", 0);\n            dep.loc = expr.loc;\n            parser.state.current.addDependency(dep);\n            return false;\n          });\n          parser.hooks.typeof.for(\"module\").tap(\"CommonJsPlugin\", function () {\n            return true;\n          });\n          parser.hooks.evaluateTypeof.for(\"exports\").tap(\"CommonJsPlugin\", ParserHelpers.evaluateToString(\"object\"));\n          new CommonJsRequireDependencyParserPlugin(options).apply(parser);\n          new RequireResolveDependencyParserPlugin(options).apply(parser);\n        };\n\n        normalModuleFactory.hooks.parser.for(\"javascript/auto\").tap(\"CommonJsPlugin\", handler);\n        normalModuleFactory.hooks.parser.for(\"javascript/dynamic\").tap(\"CommonJsPlugin\", handler);\n      });\n    }\n  }]);\n\n  return CommonJsPlugin;\n}();\n\nmodule.exports = CommonJsPlugin;","map":{"version":3,"sources":["/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/webpack/lib/dependencies/CommonJsPlugin.js"],"names":["ConstDependency","require","CommonJsRequireDependency","CommonJsRequireContextDependency","RequireResolveDependency","RequireResolveContextDependency","RequireResolveHeaderDependency","RequireHeaderDependency","NullFactory","RequireResolveDependencyParserPlugin","CommonJsRequireDependencyParserPlugin","ParserHelpers","CommonJsPlugin","options","compiler","hooks","compilation","tap","contextModuleFactory","normalModuleFactory","dependencyFactories","set","dependencyTemplates","Template","handler","parser","parserOptions","commonjs","undefined","requireExpressions","expression","typeof","for","toConstantDependency","JSON","stringify","evaluateTypeof","evaluateToString","evaluateIdentifier","evaluateToIdentifier","assign","expr","dep","loc","state","current","addDependency","scope","definitions","add","canRename","rename","apply","module","exports"],"mappings":"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","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\nconst ConstDependency = require(\"./ConstDependency\");\nconst CommonJsRequireDependency = require(\"./CommonJsRequireDependency\");\nconst CommonJsRequireContextDependency = require(\"./CommonJsRequireContextDependency\");\nconst RequireResolveDependency = require(\"./RequireResolveDependency\");\nconst RequireResolveContextDependency = require(\"./RequireResolveContextDependency\");\nconst RequireResolveHeaderDependency = require(\"./RequireResolveHeaderDependency\");\nconst RequireHeaderDependency = require(\"./RequireHeaderDependency\");\n\nconst NullFactory = require(\"../NullFactory\");\n\nconst RequireResolveDependencyParserPlugin = require(\"./RequireResolveDependencyParserPlugin\");\nconst CommonJsRequireDependencyParserPlugin = require(\"./CommonJsRequireDependencyParserPlugin\");\n\nconst ParserHelpers = require(\"../ParserHelpers\");\n\nclass CommonJsPlugin {\n\tconstructor(options) {\n\t\tthis.options = options;\n\t}\n\n\tapply(compiler) {\n\t\tconst options = this.options;\n\t\tcompiler.hooks.compilation.tap(\n\t\t\t\"CommonJsPlugin\",\n\t\t\t(compilation, { contextModuleFactory, normalModuleFactory }) => {\n\t\t\t\tcompilation.dependencyFactories.set(\n\t\t\t\t\tCommonJsRequireDependency,\n\t\t\t\t\tnormalModuleFactory\n\t\t\t\t);\n\t\t\t\tcompilation.dependencyTemplates.set(\n\t\t\t\t\tCommonJsRequireDependency,\n\t\t\t\t\tnew CommonJsRequireDependency.Template()\n\t\t\t\t);\n\n\t\t\t\tcompilation.dependencyFactories.set(\n\t\t\t\t\tCommonJsRequireContextDependency,\n\t\t\t\t\tcontextModuleFactory\n\t\t\t\t);\n\t\t\t\tcompilation.dependencyTemplates.set(\n\t\t\t\t\tCommonJsRequireContextDependency,\n\t\t\t\t\tnew CommonJsRequireContextDependency.Template()\n\t\t\t\t);\n\n\t\t\t\tcompilation.dependencyFactories.set(\n\t\t\t\t\tRequireResolveDependency,\n\t\t\t\t\tnormalModuleFactory\n\t\t\t\t);\n\t\t\t\tcompilation.dependencyTemplates.set(\n\t\t\t\t\tRequireResolveDependency,\n\t\t\t\t\tnew RequireResolveDependency.Template()\n\t\t\t\t);\n\n\t\t\t\tcompilation.dependencyFactories.set(\n\t\t\t\t\tRequireResolveContextDependency,\n\t\t\t\t\tcontextModuleFactory\n\t\t\t\t);\n\t\t\t\tcompilation.dependencyTemplates.set(\n\t\t\t\t\tRequireResolveContextDependency,\n\t\t\t\t\tnew RequireResolveContextDependency.Template()\n\t\t\t\t);\n\n\t\t\t\tcompilation.dependencyFactories.set(\n\t\t\t\t\tRequireResolveHeaderDependency,\n\t\t\t\t\tnew NullFactory()\n\t\t\t\t);\n\t\t\t\tcompilation.dependencyTemplates.set(\n\t\t\t\t\tRequireResolveHeaderDependency,\n\t\t\t\t\tnew RequireResolveHeaderDependency.Template()\n\t\t\t\t);\n\n\t\t\t\tcompilation.dependencyFactories.set(\n\t\t\t\t\tRequireHeaderDependency,\n\t\t\t\t\tnew NullFactory()\n\t\t\t\t);\n\t\t\t\tcompilation.dependencyTemplates.set(\n\t\t\t\t\tRequireHeaderDependency,\n\t\t\t\t\tnew RequireHeaderDependency.Template()\n\t\t\t\t);\n\n\t\t\t\tconst handler = (parser, parserOptions) => {\n\t\t\t\t\tif (parserOptions.commonjs !== undefined && !parserOptions.commonjs)\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\tconst requireExpressions = [\n\t\t\t\t\t\t\"require\",\n\t\t\t\t\t\t\"require.resolve\",\n\t\t\t\t\t\t\"require.resolveWeak\"\n\t\t\t\t\t];\n\t\t\t\t\tfor (let expression of requireExpressions) {\n\t\t\t\t\t\tparser.hooks.typeof\n\t\t\t\t\t\t\t.for(expression)\n\t\t\t\t\t\t\t.tap(\n\t\t\t\t\t\t\t\t\"CommonJsPlugin\",\n\t\t\t\t\t\t\t\tParserHelpers.toConstantDependency(\n\t\t\t\t\t\t\t\t\tparser,\n\t\t\t\t\t\t\t\t\tJSON.stringify(\"function\")\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\tparser.hooks.evaluateTypeof\n\t\t\t\t\t\t\t.for(expression)\n\t\t\t\t\t\t\t.tap(\n\t\t\t\t\t\t\t\t\"CommonJsPlugin\",\n\t\t\t\t\t\t\t\tParserHelpers.evaluateToString(\"function\")\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\tparser.hooks.evaluateIdentifier\n\t\t\t\t\t\t\t.for(expression)\n\t\t\t\t\t\t\t.tap(\n\t\t\t\t\t\t\t\t\"CommonJsPlugin\",\n\t\t\t\t\t\t\t\tParserHelpers.evaluateToIdentifier(expression, true)\n\t\t\t\t\t\t\t);\n\t\t\t\t\t}\n\n\t\t\t\t\tparser.hooks.evaluateTypeof\n\t\t\t\t\t\t.for(\"module\")\n\t\t\t\t\t\t.tap(\"CommonJsPlugin\", ParserHelpers.evaluateToString(\"object\"));\n\t\t\t\t\tparser.hooks.assign.for(\"require\").tap(\"CommonJsPlugin\", expr => {\n\t\t\t\t\t\t// to not leak to global \"require\", we need to define a local require here.\n\t\t\t\t\t\tconst dep = new ConstDependency(\"var require;\", 0);\n\t\t\t\t\t\tdep.loc = expr.loc;\n\t\t\t\t\t\tparser.state.current.addDependency(dep);\n\t\t\t\t\t\tparser.scope.definitions.add(\"require\");\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t});\n\t\t\t\t\tparser.hooks.canRename\n\t\t\t\t\t\t.for(\"require\")\n\t\t\t\t\t\t.tap(\"CommonJsPlugin\", () => true);\n\t\t\t\t\tparser.hooks.rename.for(\"require\").tap(\"CommonJsPlugin\", expr => {\n\t\t\t\t\t\t// define the require variable. It's still undefined, but not \"not defined\".\n\t\t\t\t\t\tconst dep = new ConstDependency(\"var require;\", 0);\n\t\t\t\t\t\tdep.loc = expr.loc;\n\t\t\t\t\t\tparser.state.current.addDependency(dep);\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t});\n\t\t\t\t\tparser.hooks.typeof.for(\"module\").tap(\"CommonJsPlugin\", () => true);\n\t\t\t\t\tparser.hooks.evaluateTypeof\n\t\t\t\t\t\t.for(\"exports\")\n\t\t\t\t\t\t.tap(\"CommonJsPlugin\", ParserHelpers.evaluateToString(\"object\"));\n\n\t\t\t\t\tnew CommonJsRequireDependencyParserPlugin(options).apply(parser);\n\t\t\t\t\tnew RequireResolveDependencyParserPlugin(options).apply(parser);\n\t\t\t\t};\n\n\t\t\t\tnormalModuleFactory.hooks.parser\n\t\t\t\t\t.for(\"javascript/auto\")\n\t\t\t\t\t.tap(\"CommonJsPlugin\", handler);\n\t\t\t\tnormalModuleFactory.hooks.parser\n\t\t\t\t\t.for(\"javascript/dynamic\")\n\t\t\t\t\t.tap(\"CommonJsPlugin\", handler);\n\t\t\t}\n\t\t);\n\t}\n}\nmodule.exports = CommonJsPlugin;\n"]},"metadata":{},"sourceType":"script"}