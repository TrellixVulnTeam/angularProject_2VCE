{"ast":null,"code":"/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n(function (factory) {\n  if (typeof module === \"object\" && typeof module.exports === \"object\") {\n    var v = factory(require, exports);\n    if (v !== undefined) module.exports = v;\n  } else if (typeof define === \"function\" && define.amd) {\n    define(\"@angular/compiler/src/i18n/serializers/placeholder\", [\"require\", \"exports\"], factory);\n  }\n})(function (require, exports) {\n  \"use strict\";\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.PlaceholderRegistry = void 0;\n  var TAG_TO_PLACEHOLDER_NAMES = {\n    'A': 'LINK',\n    'B': 'BOLD_TEXT',\n    'BR': 'LINE_BREAK',\n    'EM': 'EMPHASISED_TEXT',\n    'H1': 'HEADING_LEVEL1',\n    'H2': 'HEADING_LEVEL2',\n    'H3': 'HEADING_LEVEL3',\n    'H4': 'HEADING_LEVEL4',\n    'H5': 'HEADING_LEVEL5',\n    'H6': 'HEADING_LEVEL6',\n    'HR': 'HORIZONTAL_RULE',\n    'I': 'ITALIC_TEXT',\n    'LI': 'LIST_ITEM',\n    'LINK': 'MEDIA_LINK',\n    'OL': 'ORDERED_LIST',\n    'P': 'PARAGRAPH',\n    'Q': 'QUOTATION',\n    'S': 'STRIKETHROUGH_TEXT',\n    'SMALL': 'SMALL_TEXT',\n    'SUB': 'SUBSTRIPT',\n    'SUP': 'SUPERSCRIPT',\n    'TBODY': 'TABLE_BODY',\n    'TD': 'TABLE_CELL',\n    'TFOOT': 'TABLE_FOOTER',\n    'TH': 'TABLE_HEADER_CELL',\n    'THEAD': 'TABLE_HEADER',\n    'TR': 'TABLE_ROW',\n    'TT': 'MONOSPACED_TEXT',\n    'U': 'UNDERLINED_TEXT',\n    'UL': 'UNORDERED_LIST'\n  };\n  /**\n   * Creates unique names for placeholder with different content.\n   *\n   * Returns the same placeholder name when the content is identical.\n   */\n\n  var PlaceholderRegistry =\n  /** @class */\n  function () {\n    function PlaceholderRegistry() {\n      // Count the occurrence of the base name top generate a unique name\n      this._placeHolderNameCounts = {}; // Maps signature to placeholder names\n\n      this._signatureToName = {};\n    }\n\n    PlaceholderRegistry.prototype.getStartTagPlaceholderName = function (tag, attrs, isVoid) {\n      var signature = this._hashTag(tag, attrs, isVoid);\n\n      if (this._signatureToName[signature]) {\n        return this._signatureToName[signature];\n      }\n\n      var upperTag = tag.toUpperCase();\n      var baseName = TAG_TO_PLACEHOLDER_NAMES[upperTag] || \"TAG_\" + upperTag;\n\n      var name = this._generateUniqueName(isVoid ? baseName : \"START_\" + baseName);\n\n      this._signatureToName[signature] = name;\n      return name;\n    };\n\n    PlaceholderRegistry.prototype.getCloseTagPlaceholderName = function (tag) {\n      var signature = this._hashClosingTag(tag);\n\n      if (this._signatureToName[signature]) {\n        return this._signatureToName[signature];\n      }\n\n      var upperTag = tag.toUpperCase();\n      var baseName = TAG_TO_PLACEHOLDER_NAMES[upperTag] || \"TAG_\" + upperTag;\n\n      var name = this._generateUniqueName(\"CLOSE_\" + baseName);\n\n      this._signatureToName[signature] = name;\n      return name;\n    };\n\n    PlaceholderRegistry.prototype.getPlaceholderName = function (name, content) {\n      var upperName = name.toUpperCase();\n      var signature = \"PH: \" + upperName + \"=\" + content;\n\n      if (this._signatureToName[signature]) {\n        return this._signatureToName[signature];\n      }\n\n      var uniqueName = this._generateUniqueName(upperName);\n\n      this._signatureToName[signature] = uniqueName;\n      return uniqueName;\n    };\n\n    PlaceholderRegistry.prototype.getUniquePlaceholder = function (name) {\n      return this._generateUniqueName(name.toUpperCase());\n    }; // Generate a hash for a tag - does not take attribute order into account\n\n\n    PlaceholderRegistry.prototype._hashTag = function (tag, attrs, isVoid) {\n      var start = \"<\" + tag;\n      var strAttrs = Object.keys(attrs).sort().map(function (name) {\n        return \" \" + name + \"=\" + attrs[name];\n      }).join('');\n      var end = isVoid ? '/>' : \"></\" + tag + \">\";\n      return start + strAttrs + end;\n    };\n\n    PlaceholderRegistry.prototype._hashClosingTag = function (tag) {\n      return this._hashTag(\"/\" + tag, {}, false);\n    };\n\n    PlaceholderRegistry.prototype._generateUniqueName = function (base) {\n      var seen = this._placeHolderNameCounts.hasOwnProperty(base);\n\n      if (!seen) {\n        this._placeHolderNameCounts[base] = 1;\n        return base;\n      }\n\n      var id = this._placeHolderNameCounts[base];\n      this._placeHolderNameCounts[base] = id + 1;\n      return base + \"_\" + id;\n    };\n\n    return PlaceholderRegistry;\n  }();\n\n  exports.PlaceholderRegistry = PlaceholderRegistry;\n});","map":{"version":3,"sources":["../../../../../../../../packages/compiler/src/i18n/serializers/placeholder.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nconst TAG_TO_PLACEHOLDER_NAMES: {[k: string]: string} = {\n  'A': 'LINK',\n  'B': 'BOLD_TEXT',\n  'BR': 'LINE_BREAK',\n  'EM': 'EMPHASISED_TEXT',\n  'H1': 'HEADING_LEVEL1',\n  'H2': 'HEADING_LEVEL2',\n  'H3': 'HEADING_LEVEL3',\n  'H4': 'HEADING_LEVEL4',\n  'H5': 'HEADING_LEVEL5',\n  'H6': 'HEADING_LEVEL6',\n  'HR': 'HORIZONTAL_RULE',\n  'I': 'ITALIC_TEXT',\n  'LI': 'LIST_ITEM',\n  'LINK': 'MEDIA_LINK',\n  'OL': 'ORDERED_LIST',\n  'P': 'PARAGRAPH',\n  'Q': 'QUOTATION',\n  'S': 'STRIKETHROUGH_TEXT',\n  'SMALL': 'SMALL_TEXT',\n  'SUB': 'SUBSTRIPT',\n  'SUP': 'SUPERSCRIPT',\n  'TBODY': 'TABLE_BODY',\n  'TD': 'TABLE_CELL',\n  'TFOOT': 'TABLE_FOOTER',\n  'TH': 'TABLE_HEADER_CELL',\n  'THEAD': 'TABLE_HEADER',\n  'TR': 'TABLE_ROW',\n  'TT': 'MONOSPACED_TEXT',\n  'U': 'UNDERLINED_TEXT',\n  'UL': 'UNORDERED_LIST',\n};\n\n/**\n * Creates unique names for placeholder with different content.\n *\n * Returns the same placeholder name when the content is identical.\n */\nexport class PlaceholderRegistry {\n  // Count the occurrence of the base name top generate a unique name\n  private _placeHolderNameCounts: {[k: string]: number} = {};\n  // Maps signature to placeholder names\n  private _signatureToName: {[k: string]: string} = {};\n\n  getStartTagPlaceholderName(tag: string, attrs: {[k: string]: string}, isVoid: boolean): string {\n    const signature = this._hashTag(tag, attrs, isVoid);\n    if (this._signatureToName[signature]) {\n      return this._signatureToName[signature];\n    }\n\n    const upperTag = tag.toUpperCase();\n    const baseName = TAG_TO_PLACEHOLDER_NAMES[upperTag] || `TAG_${upperTag}`;\n    const name = this._generateUniqueName(isVoid ? baseName : `START_${baseName}`);\n\n    this._signatureToName[signature] = name;\n\n    return name;\n  }\n\n  getCloseTagPlaceholderName(tag: string): string {\n    const signature = this._hashClosingTag(tag);\n    if (this._signatureToName[signature]) {\n      return this._signatureToName[signature];\n    }\n\n    const upperTag = tag.toUpperCase();\n    const baseName = TAG_TO_PLACEHOLDER_NAMES[upperTag] || `TAG_${upperTag}`;\n    const name = this._generateUniqueName(`CLOSE_${baseName}`);\n\n    this._signatureToName[signature] = name;\n\n    return name;\n  }\n\n  getPlaceholderName(name: string, content: string): string {\n    const upperName = name.toUpperCase();\n    const signature = `PH: ${upperName}=${content}`;\n    if (this._signatureToName[signature]) {\n      return this._signatureToName[signature];\n    }\n\n    const uniqueName = this._generateUniqueName(upperName);\n    this._signatureToName[signature] = uniqueName;\n\n    return uniqueName;\n  }\n\n  getUniquePlaceholder(name: string): string {\n    return this._generateUniqueName(name.toUpperCase());\n  }\n\n  // Generate a hash for a tag - does not take attribute order into account\n  private _hashTag(tag: string, attrs: {[k: string]: string}, isVoid: boolean): string {\n    const start = `<${tag}`;\n    const strAttrs = Object.keys(attrs).sort().map((name) => ` ${name}=${attrs[name]}`).join('');\n    const end = isVoid ? '/>' : `></${tag}>`;\n\n    return start + strAttrs + end;\n  }\n\n  private _hashClosingTag(tag: string): string {\n    return this._hashTag(`/${tag}`, {}, false);\n  }\n\n  private _generateUniqueName(base: string): string {\n    const seen = this._placeHolderNameCounts.hasOwnProperty(base);\n    if (!seen) {\n      this._placeHolderNameCounts[base] = 1;\n      return base;\n    }\n\n    const id = this._placeHolderNameCounts[base];\n    this._placeHolderNameCounts[base] = id + 1;\n    return `${base}_${id}`;\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}