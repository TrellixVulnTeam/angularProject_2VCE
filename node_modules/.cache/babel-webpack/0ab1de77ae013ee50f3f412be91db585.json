{"ast":null,"code":"(function (factory) {\n  if (typeof module === \"object\" && typeof module.exports === \"object\") {\n    var v = factory(require, exports);\n    if (v !== undefined) module.exports = v;\n  } else if (typeof define === \"function\" && define.amd) {\n    define(\"@angular/compiler/src/render3/partial/util\", [\"require\", \"exports\", \"@angular/compiler/src/output/output_ast\"], factory);\n  }\n})(function (require, exports) {\n  \"use strict\";\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.toOptionalLiteralMap = exports.toOptionalLiteralArray = void 0;\n  /**\n   * @license\n   * Copyright Google LLC All Rights Reserved.\n   *\n   * Use of this source code is governed by an MIT-style license that can be\n   * found in the LICENSE file at https://angular.io/license\n   */\n\n  var o = require(\"@angular/compiler/src/output/output_ast\");\n  /**\n   * Creates an array literal expression from the given array, mapping all values to an expression\n   * using the provided mapping function. If the array is empty or null, then null is returned.\n   *\n   * @param values The array to transfer into literal array expression.\n   * @param mapper The logic to use for creating an expression for the array's values.\n   * @returns An array literal expression representing `values`, or null if `values` is empty or\n   * is itself null.\n   */\n\n\n  function toOptionalLiteralArray(values, mapper) {\n    if (values === null || values.length === 0) {\n      return null;\n    }\n\n    return o.literalArr(values.map(function (value) {\n      return mapper(value);\n    }));\n  }\n\n  exports.toOptionalLiteralArray = toOptionalLiteralArray;\n  /**\n   * Creates an object literal expression from the given object, mapping all values to an expression\n   * using the provided mapping function. If the object has no keys, then null is returned.\n   *\n   * @param object The object to transfer into an object literal expression.\n   * @param mapper The logic to use for creating an expression for the object's values.\n   * @returns An object literal expression representing `object`, or null if `object` does not have\n   * any keys.\n   */\n\n  function toOptionalLiteralMap(object, mapper) {\n    var entries = Object.keys(object).map(function (key) {\n      var value = object[key];\n      return {\n        key: key,\n        value: mapper(value),\n        quoted: true\n      };\n    });\n\n    if (entries.length > 0) {\n      return o.literalMap(entries);\n    } else {\n      return null;\n    }\n  }\n\n  exports.toOptionalLiteralMap = toOptionalLiteralMap;\n});","map":{"version":3,"sources":["../../../../../../../../packages/compiler/src/render3/partial/util.ts"],"names":[],"mappings":";;;;;;;;;;;;;;AAAA;;;;;;AAMG;;AACH,MAAA,CAAA,GAAA,OAAA,CAAA,yCAAA,CAAA;AAEA;;;;;;;;AAQG;;;AACH,WAAgB,sBAAhB,CACI,MADJ,EACsB,MADtB,EACwD;AACtD,QAAI,MAAM,KAAK,IAAX,IAAmB,MAAM,CAAC,MAAP,KAAkB,CAAzC,EAA4C;AAC1C,aAAO,IAAP;AACD;;AACD,WAAO,CAAC,CAAC,UAAF,CAAa,MAAM,CAAC,GAAP,CAAW,UAAA,KAAA,EAAK;AAAI,aAAA,MAAM,CAAN,KAAM,CAAN;AAAa,KAAjC,CAAb,CAAP;AACD;;AAND,EAAA,OAAA,CAAA,sBAAA,GAAA,sBAAA;AAQA;;;;;;;;AAQG;;AACH,WAAgB,oBAAhB,CACI,MADJ,EACgC,MADhC,EACkE;AAChE,QAAM,OAAO,GAAG,MAAM,CAAC,IAAP,CAAY,MAAZ,EAAoB,GAApB,CAAwB,UAAA,GAAA,EAAG;AACzC,UAAM,KAAK,GAAG,MAAM,CAAC,GAAD,CAApB;AACA,aAAO;AAAC,QAAA,GAAG,EAAA,GAAJ;AAAM,QAAA,KAAK,EAAE,MAAM,CAAC,KAAD,CAAnB;AAA4B,QAAA,MAAM,EAAE;AAApC,OAAP;AACD,KAHe,CAAhB;;AAKA,QAAI,OAAO,CAAC,MAAR,GAAiB,CAArB,EAAwB;AACtB,aAAO,CAAC,CAAC,UAAF,CAAa,OAAb,CAAP;AACD,KAFD,MAEO;AACL,aAAO,IAAP;AACD;AACF;;AAZD,EAAA,OAAA,CAAA,oBAAA,GAAA,oBAAA","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as o from '../../output/output_ast';\n\n/**\n * Creates an array literal expression from the given array, mapping all values to an expression\n * using the provided mapping function. If the array is empty or null, then null is returned.\n *\n * @param values The array to transfer into literal array expression.\n * @param mapper The logic to use for creating an expression for the array's values.\n * @returns An array literal expression representing `values`, or null if `values` is empty or\n * is itself null.\n */\nexport function toOptionalLiteralArray<T>(\n    values: T[]|null, mapper: (value: T) => o.Expression): o.LiteralArrayExpr|null {\n  if (values === null || values.length === 0) {\n    return null;\n  }\n  return o.literalArr(values.map(value => mapper(value)));\n}\n\n/**\n * Creates an object literal expression from the given object, mapping all values to an expression\n * using the provided mapping function. If the object has no keys, then null is returned.\n *\n * @param object The object to transfer into an object literal expression.\n * @param mapper The logic to use for creating an expression for the object's values.\n * @returns An object literal expression representing `object`, or null if `object` does not have\n * any keys.\n */\nexport function toOptionalLiteralMap<T>(\n    object: {[key: string]: T}, mapper: (value: T) => o.Expression): o.LiteralMapExpr|null {\n  const entries = Object.keys(object).map(key => {\n    const value = object[key];\n    return {key, value: mapper(value), quoted: true};\n  });\n\n  if (entries.length > 0) {\n    return o.literalMap(entries);\n  } else {\n    return null;\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}