{"ast":null,"code":"\"use strict\"; // external tooling\n\nvar resolve = require(\"resolve\");\n\nvar moduleDirectories = [\"web_modules\", \"node_modules\"];\n\nfunction resolveModule(id, opts) {\n  return new Promise(function (res, rej) {\n    resolve(id, opts, function (err, path) {\n      return err ? rej(err) : res(path);\n    });\n  });\n}\n\nmodule.exports = function (id, base, options) {\n  var paths = options.path;\n  var resolveOpts = {\n    basedir: base,\n    moduleDirectory: moduleDirectories.concat(options.addModulesDirectories),\n    paths: paths,\n    extensions: [\".css\"],\n    packageFilter: function processPackage(pkg) {\n      if (pkg.style) pkg.main = pkg.style;else if (!pkg.main || !/\\.css$/.test(pkg.main)) pkg.main = \"index.css\";\n      return pkg;\n    },\n    preserveSymlinks: false\n  };\n  return resolveModule(\"./\".concat(id), resolveOpts).catch(function () {\n    return resolveModule(id, resolveOpts);\n  }).catch(function () {\n    if (paths.indexOf(base) === -1) paths.unshift(base);\n    throw new Error(\"Failed to find '\".concat(id, \"'\\n  in [\\n    \").concat(paths.join(\",\\n        \"), \"\\n  ]\"));\n  });\n};","map":{"version":3,"sources":["/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/postcss-import/lib/resolve-id.js"],"names":["resolve","require","moduleDirectories","resolveModule","id","opts","Promise","res","rej","err","path","module","exports","base","options","paths","resolveOpts","basedir","moduleDirectory","concat","addModulesDirectories","extensions","packageFilter","processPackage","pkg","style","main","test","preserveSymlinks","catch","indexOf","unshift","Error","join"],"mappings":"AAAA,a,CAEA;;AACA,IAAMA,OAAO,GAAGC,OAAO,CAAC,SAAD,CAAvB;;AAEA,IAAMC,iBAAiB,GAAG,CAAC,aAAD,EAAgB,cAAhB,CAA1B;;AAEA,SAASC,aAAT,CAAuBC,EAAvB,EAA2BC,IAA3B,EAAiC;AAC/B,SAAO,IAAIC,OAAJ,CAAY,UAACC,GAAD,EAAMC,GAAN,EAAc;AAC/BR,IAAAA,OAAO,CAACI,EAAD,EAAKC,IAAL,EAAW,UAACI,GAAD,EAAMC,IAAN;AAAA,aAAgBD,GAAG,GAAGD,GAAG,CAACC,GAAD,CAAN,GAAcF,GAAG,CAACG,IAAD,CAApC;AAAA,KAAX,CAAP;AACD,GAFM,CAAP;AAGD;;AAEDC,MAAM,CAACC,OAAP,GAAiB,UAASR,EAAT,EAAaS,IAAb,EAAmBC,OAAnB,EAA4B;AAC3C,MAAMC,KAAK,GAAGD,OAAO,CAACJ,IAAtB;AAEA,MAAMM,WAAW,GAAG;AAClBC,IAAAA,OAAO,EAAEJ,IADS;AAElBK,IAAAA,eAAe,EAAEhB,iBAAiB,CAACiB,MAAlB,CAAyBL,OAAO,CAACM,qBAAjC,CAFC;AAGlBL,IAAAA,KAAK,EAAEA,KAHW;AAIlBM,IAAAA,UAAU,EAAE,CAAC,MAAD,CAJM;AAKlBC,IAAAA,aAAa,EAAE,SAASC,cAAT,CAAwBC,GAAxB,EAA6B;AAC1C,UAAIA,GAAG,CAACC,KAAR,EAAeD,GAAG,CAACE,IAAJ,GAAWF,GAAG,CAACC,KAAf,CAAf,KACK,IAAI,CAACD,GAAG,CAACE,IAAL,IAAa,CAAC,SAASC,IAAT,CAAcH,GAAG,CAACE,IAAlB,CAAlB,EAA2CF,GAAG,CAACE,IAAJ,GAAW,WAAX;AAChD,aAAOF,GAAP;AACD,KATiB;AAUlBI,IAAAA,gBAAgB,EAAE;AAVA,GAApB;AAaA,SAAOzB,aAAa,aAAMC,EAAN,GAAYY,WAAZ,CAAb,CACJa,KADI,CACE;AAAA,WAAM1B,aAAa,CAACC,EAAD,EAAKY,WAAL,CAAnB;AAAA,GADF,EAEJa,KAFI,CAEE,YAAM;AACX,QAAId,KAAK,CAACe,OAAN,CAAcjB,IAAd,MAAwB,CAAC,CAA7B,EAAgCE,KAAK,CAACgB,OAAN,CAAclB,IAAd;AAEhC,UAAM,IAAImB,KAAJ,2BACe5B,EADf,4BAGNW,KAAK,CAACkB,IAAN,CAAW,aAAX,CAHM,WAAN;AAMD,GAXI,CAAP;AAYD,CA5BD","sourcesContent":["\"use strict\"\n\n// external tooling\nconst resolve = require(\"resolve\")\n\nconst moduleDirectories = [\"web_modules\", \"node_modules\"]\n\nfunction resolveModule(id, opts) {\n  return new Promise((res, rej) => {\n    resolve(id, opts, (err, path) => (err ? rej(err) : res(path)))\n  })\n}\n\nmodule.exports = function(id, base, options) {\n  const paths = options.path\n\n  const resolveOpts = {\n    basedir: base,\n    moduleDirectory: moduleDirectories.concat(options.addModulesDirectories),\n    paths: paths,\n    extensions: [\".css\"],\n    packageFilter: function processPackage(pkg) {\n      if (pkg.style) pkg.main = pkg.style\n      else if (!pkg.main || !/\\.css$/.test(pkg.main)) pkg.main = \"index.css\"\n      return pkg\n    },\n    preserveSymlinks: false,\n  }\n\n  return resolveModule(`./${id}`, resolveOpts)\n    .catch(() => resolveModule(id, resolveOpts))\n    .catch(() => {\n      if (paths.indexOf(base) === -1) paths.unshift(base)\n\n      throw new Error(\n        `Failed to find '${id}'\n  in [\n    ${paths.join(\",\\n        \")}\n  ]`\n      )\n    })\n}\n"]},"metadata":{},"sourceType":"script"}