{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _postcss = require('postcss');\n\nvar _postcss2 = _interopRequireDefault(_postcss);\n\nvar _postcssValueParser = require('postcss-value-parser');\n\nvar _postcssValueParser2 = _interopRequireDefault(_postcssValueParser);\n\nvar _svgo = require('svgo');\n\nvar _svgo2 = _interopRequireDefault(_svgo);\n\nvar _url = require('./lib/url');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar PLUGIN = 'postcss-svgo';\nvar dataURI = /data:image\\/svg\\+xml(;((charset=)?utf-8|base64))?,/i;\nvar dataURIBase64 = /data:image\\/svg\\+xml;base64,/i;\n\nfunction minifyPromise(decl, getSvgo, opts, postcssResult) {\n  var promises = [];\n  var parsed = (0, _postcssValueParser2.default)(decl.value);\n  decl.value = parsed.walk(function (node) {\n    if (node.type !== 'function' || node.value.toLowerCase() !== 'url' || !node.nodes.length) {\n      return;\n    }\n\n    var _node$nodes$ = node.nodes[0],\n        value = _node$nodes$.value,\n        quote = _node$nodes$.quote;\n    var isBase64, isUriEncoded;\n    var svg = value.replace(dataURI, '');\n\n    if (dataURIBase64.test(value)) {\n      svg = Buffer.from(svg, 'base64').toString('utf8');\n      isBase64 = true;\n    } else {\n      var decodedUri;\n\n      try {\n        decodedUri = (0, _url.decode)(svg);\n        isUriEncoded = decodedUri !== svg;\n      } catch (e) {\n        // Swallow exception if we cannot decode the value\n        isUriEncoded = false;\n      }\n\n      if (isUriEncoded) {\n        svg = decodedUri;\n      }\n\n      if (opts.encode !== undefined) {\n        isUriEncoded = opts.encode;\n      }\n    }\n\n    promises.push(getSvgo().optimize(svg).then(function (result) {\n      if (result.error) {\n        decl.warn(postcssResult, \"\".concat(result.error));\n        return;\n      }\n\n      var data, optimizedValue;\n\n      if (isBase64) {\n        data = Buffer.from(result.data).toString('base64');\n        optimizedValue = 'data:image/svg+xml;base64,' + data;\n      } else {\n        data = isUriEncoded ? (0, _url.encode)(result.data) : result.data; // Should always encode # otherwise we yield a broken SVG\n        // in Firefox (works in Chrome however). See this issue:\n        // https://github.com/cssnano/cssnano/issues/245\n\n        data = data.replace(/#/g, '%23');\n        optimizedValue = 'data:image/svg+xml;charset=utf-8,' + data;\n        quote = isUriEncoded ? '\"' : '\\'';\n      }\n\n      node.nodes[0] = Object.assign({}, node.nodes[0], {\n        value: optimizedValue,\n        quote: quote,\n        type: 'string',\n        before: '',\n        after: ''\n      });\n    }).catch(function (error) {\n      decl.warn(postcssResult, \"\".concat(error));\n    }));\n    return false;\n  });\n  return Promise.all(promises).then(function () {\n    return decl.value = decl.value.toString();\n  });\n}\n\nexports.default = _postcss2.default.plugin(PLUGIN, function () {\n  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var svgo = null;\n\n  var getSvgo = function getSvgo() {\n    if (!svgo) {\n      svgo = new _svgo2.default(opts);\n    }\n\n    return svgo;\n  };\n\n  return function (css, result) {\n    return new Promise(function (resolve, reject) {\n      var svgoQueue = [];\n      css.walkDecls(function (decl) {\n        if (!dataURI.test(decl.value)) {\n          return;\n        }\n\n        svgoQueue.push(minifyPromise(decl, getSvgo, opts, result));\n      });\n      return Promise.all(svgoQueue).then(resolve, reject);\n    });\n  };\n});\nmodule.exports = exports['default'];","map":{"version":3,"sources":["/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/postcss-svgo/dist/index.js"],"names":["Object","defineProperty","exports","value","_postcss","require","_postcss2","_interopRequireDefault","_postcssValueParser","_postcssValueParser2","_svgo","_svgo2","_url","obj","__esModule","default","PLUGIN","dataURI","dataURIBase64","minifyPromise","decl","getSvgo","opts","postcssResult","promises","parsed","walk","node","type","toLowerCase","nodes","length","quote","isBase64","isUriEncoded","svg","replace","test","Buffer","from","toString","decodedUri","decode","e","encode","undefined","push","optimize","then","result","error","warn","data","optimizedValue","assign","before","after","catch","Promise","all","plugin","svgo","css","resolve","reject","svgoQueue","walkDecls","module"],"mappings":"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","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _postcss = require('postcss');\n\nvar _postcss2 = _interopRequireDefault(_postcss);\n\nvar _postcssValueParser = require('postcss-value-parser');\n\nvar _postcssValueParser2 = _interopRequireDefault(_postcssValueParser);\n\nvar _svgo = require('svgo');\n\nvar _svgo2 = _interopRequireDefault(_svgo);\n\nvar _url = require('./lib/url');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nconst PLUGIN = 'postcss-svgo';\nconst dataURI = /data:image\\/svg\\+xml(;((charset=)?utf-8|base64))?,/i;\nconst dataURIBase64 = /data:image\\/svg\\+xml;base64,/i;\n\nfunction minifyPromise(decl, getSvgo, opts, postcssResult) {\n    const promises = [];\n    const parsed = (0, _postcssValueParser2.default)(decl.value);\n\n    decl.value = parsed.walk(node => {\n        if (node.type !== 'function' || node.value.toLowerCase() !== 'url' || !node.nodes.length) {\n            return;\n        }\n\n        let { value, quote } = node.nodes[0];\n        let isBase64, isUriEncoded;\n        let svg = value.replace(dataURI, '');\n\n        if (dataURIBase64.test(value)) {\n            svg = Buffer.from(svg, 'base64').toString('utf8');\n            isBase64 = true;\n        } else {\n            let decodedUri;\n\n            try {\n                decodedUri = (0, _url.decode)(svg);\n                isUriEncoded = decodedUri !== svg;\n            } catch (e) {\n                // Swallow exception if we cannot decode the value\n                isUriEncoded = false;\n            }\n\n            if (isUriEncoded) {\n                svg = decodedUri;\n            }\n\n            if (opts.encode !== undefined) {\n                isUriEncoded = opts.encode;\n            }\n        }\n\n        promises.push(getSvgo().optimize(svg).then(result => {\n            if (result.error) {\n                decl.warn(postcssResult, `${result.error}`);\n                return;\n            }\n            let data, optimizedValue;\n\n            if (isBase64) {\n                data = Buffer.from(result.data).toString('base64');\n                optimizedValue = 'data:image/svg+xml;base64,' + data;\n            } else {\n                data = isUriEncoded ? (0, _url.encode)(result.data) : result.data;\n                // Should always encode # otherwise we yield a broken SVG\n                // in Firefox (works in Chrome however). See this issue:\n                // https://github.com/cssnano/cssnano/issues/245\n                data = data.replace(/#/g, '%23');\n                optimizedValue = 'data:image/svg+xml;charset=utf-8,' + data;\n                quote = isUriEncoded ? '\"' : '\\'';\n            }\n\n            node.nodes[0] = Object.assign({}, node.nodes[0], {\n                value: optimizedValue,\n                quote: quote,\n                type: 'string',\n                before: '',\n                after: ''\n            });\n        }).catch(error => {\n            decl.warn(postcssResult, `${error}`);\n        }));\n\n        return false;\n    });\n\n    return Promise.all(promises).then(() => decl.value = decl.value.toString());\n}\n\nexports.default = _postcss2.default.plugin(PLUGIN, (opts = {}) => {\n    let svgo = null;\n\n    const getSvgo = () => {\n        if (!svgo) {\n            svgo = new _svgo2.default(opts);\n        }\n\n        return svgo;\n    };\n\n    return (css, result) => {\n        return new Promise((resolve, reject) => {\n            const svgoQueue = [];\n\n            css.walkDecls(decl => {\n                if (!dataURI.test(decl.value)) {\n                    return;\n                }\n\n                svgoQueue.push(minifyPromise(decl, getSvgo, opts, result));\n            });\n\n            return Promise.all(svgoQueue).then(resolve, reject);\n        });\n    };\n});\nmodule.exports = exports['default'];"]},"metadata":{},"sourceType":"script"}