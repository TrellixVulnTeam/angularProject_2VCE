{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/regenerator\");\n\nvar _createForOfIteratorHelper = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _toConsumableArray = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/toConsumableArray\");\n\nvar _asyncToGenerator = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = loader;\n\nvar _loaderUtils = require(\"loader-utils\");\n\nvar _postcss = _interopRequireDefault(require(\"postcss\"));\n\nvar _package = _interopRequireDefault(require(\"postcss/package.json\"));\n\nvar _schemaUtils = _interopRequireDefault(require(\"schema-utils\"));\n\nvar _semver = require(\"semver\");\n\nvar _CssSyntaxError = _interopRequireDefault(require(\"./CssSyntaxError\"));\n\nvar _Warning = _interopRequireDefault(require(\"./Warning\"));\n\nvar _options = _interopRequireDefault(require(\"./options.json\"));\n\nvar _plugins = require(\"./plugins\");\n\nvar _utils = require(\"./utils\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/*\n  MIT License http://www.opensource.org/licenses/mit-license.php\n  Author Tobias Koppers @sokra\n*/\n\n\nfunction loader(_x, _x2, _x3) {\n  return _loader.apply(this, arguments);\n}\n\nfunction _loader() {\n  _loader = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(content, map, meta) {\n    var _this = this;\n\n    var rawOptions, plugins, callback, options, replacements, exports, importPluginImports, importPluginApi, resolver, urlPluginImports, urlResolver, icssPluginImports, icssPluginApi, icssResolver, ast, resourcePath, result, _iterator, _step, warning, imports, api, importCode, moduleCode, exportCode;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            rawOptions = (0, _loaderUtils.getOptions)(this);\n            (0, _schemaUtils.default)(_options.default, rawOptions, {\n              name: 'CSS Loader',\n              baseDataPath: 'options'\n            });\n            plugins = [];\n            callback = this.async();\n            _context.prev = 4;\n            options = (0, _utils.normalizeOptions)(rawOptions, this);\n            _context.next = 12;\n            break;\n\n          case 8:\n            _context.prev = 8;\n            _context.t0 = _context[\"catch\"](4);\n            callback(_context.t0);\n            return _context.abrupt(\"return\");\n\n          case 12:\n            replacements = [];\n            exports = [];\n\n            if ((0, _utils.shouldUseModulesPlugins)(options)) {\n              plugins.push.apply(plugins, _toConsumableArray((0, _utils.getModulesPlugins)(options, this)));\n            }\n\n            importPluginImports = [];\n            importPluginApi = [];\n\n            if ((0, _utils.shouldUseImportPlugin)(options)) {\n              resolver = this.getResolve({\n                conditionNames: ['style'],\n                extensions: ['.css'],\n                mainFields: ['css', 'style', 'main', '...'],\n                mainFiles: ['index', '...'],\n                restrictions: [/\\.css$/i]\n              });\n              plugins.push((0, _plugins.importParser)({\n                imports: importPluginImports,\n                api: importPluginApi,\n                context: this.context,\n                rootContext: this.rootContext,\n                filter: (0, _utils.getFilter)(options.import, this.resourcePath),\n                resolver: resolver,\n                urlHandler: function urlHandler(url) {\n                  return (0, _loaderUtils.stringifyRequest)(_this, (0, _utils.getPreRequester)(_this)(options.importLoaders) + url);\n                }\n              }));\n            }\n\n            urlPluginImports = [];\n\n            if ((0, _utils.shouldUseURLPlugin)(options)) {\n              urlResolver = this.getResolve({\n                conditionNames: ['asset'],\n                mainFields: ['asset'],\n                mainFiles: [],\n                extensions: []\n              });\n              plugins.push((0, _plugins.urlParser)({\n                imports: urlPluginImports,\n                replacements: replacements,\n                context: this.context,\n                rootContext: this.rootContext,\n                filter: (0, _utils.getFilter)(options.url, this.resourcePath),\n                resolver: urlResolver,\n                urlHandler: function urlHandler(url) {\n                  return (0, _loaderUtils.stringifyRequest)(_this, url);\n                }\n              }));\n            }\n\n            icssPluginImports = [];\n            icssPluginApi = [];\n\n            if ((0, _utils.shouldUseIcssPlugin)(options)) {\n              icssResolver = this.getResolve({\n                conditionNames: ['style'],\n                extensions: [],\n                mainFields: ['css', 'style', 'main', '...'],\n                mainFiles: ['index', '...']\n              });\n              plugins.push((0, _plugins.icssParser)({\n                imports: icssPluginImports,\n                api: icssPluginApi,\n                replacements: replacements,\n                exports: exports,\n                context: this.context,\n                rootContext: this.rootContext,\n                resolver: icssResolver,\n                urlHandler: function urlHandler(url) {\n                  return (0, _loaderUtils.stringifyRequest)(_this, (0, _utils.getPreRequester)(_this)(options.importLoaders) + url);\n                }\n              }));\n            } // Reuse CSS AST (PostCSS AST e.g 'postcss-loader') to avoid reparsing\n\n\n            if (meta) {\n              ast = meta.ast;\n\n              if (ast && ast.type === 'postcss' && (0, _semver.satisfies)(ast.version, \"^\".concat(_package.default.version))) {\n                // eslint-disable-next-line no-param-reassign\n                content = ast.root;\n              }\n            }\n\n            resourcePath = this.resourcePath;\n            _context.prev = 25;\n            _context.next = 28;\n            return (0, _postcss.default)(plugins).process(content, {\n              from: resourcePath,\n              to: resourcePath,\n              map: options.sourceMap ? {\n                prev: map ? (0, _utils.normalizeSourceMap)(map, resourcePath) : null,\n                inline: false,\n                annotation: false\n              } : false\n            });\n\n          case 28:\n            result = _context.sent;\n            _context.next = 36;\n            break;\n\n          case 31:\n            _context.prev = 31;\n            _context.t1 = _context[\"catch\"](25);\n\n            if (_context.t1.file) {\n              this.addDependency(_context.t1.file);\n            }\n\n            callback(_context.t1.name === 'CssSyntaxError' ? new _CssSyntaxError.default(_context.t1) : _context.t1);\n            return _context.abrupt(\"return\");\n\n          case 36:\n            _iterator = _createForOfIteratorHelper(result.warnings());\n\n            try {\n              for (_iterator.s(); !(_step = _iterator.n()).done;) {\n                warning = _step.value;\n                this.emitWarning(new _Warning.default(warning));\n              }\n            } catch (err) {\n              _iterator.e(err);\n            } finally {\n              _iterator.f();\n            }\n\n            imports = [].concat(icssPluginImports.sort(_utils.sort)).concat(importPluginImports.sort(_utils.sort)).concat(urlPluginImports.sort(_utils.sort));\n            api = [].concat(importPluginApi.sort(_utils.sort)).concat(icssPluginApi.sort(_utils.sort));\n\n            if (options.modules.exportOnlyLocals !== true) {\n              imports.unshift({\n                importName: '___CSS_LOADER_API_IMPORT___',\n                url: (0, _loaderUtils.stringifyRequest)(this, require.resolve('./runtime/api'))\n              });\n            }\n\n            importCode = (0, _utils.getImportCode)(imports, options);\n            moduleCode = (0, _utils.getModuleCode)(result, api, replacements, options, this);\n            exportCode = (0, _utils.getExportCode)(exports, replacements, options);\n            callback(null, \"\".concat(importCode).concat(moduleCode).concat(exportCode));\n\n          case 45:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, this, [[4, 8], [25, 31]]);\n  }));\n  return _loader.apply(this, arguments);\n}","map":{"version":3,"sources":["/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/css-loader/dist/index.js"],"names":["Object","defineProperty","exports","value","default","loader","_loaderUtils","require","_postcss","_interopRequireDefault","_package","_schemaUtils","_semver","_CssSyntaxError","_Warning","_options","_plugins","_utils","obj","__esModule","content","map","meta","rawOptions","getOptions","name","baseDataPath","plugins","callback","async","options","normalizeOptions","replacements","shouldUseModulesPlugins","push","getModulesPlugins","importPluginImports","importPluginApi","shouldUseImportPlugin","resolver","getResolve","conditionNames","extensions","mainFields","mainFiles","restrictions","importParser","imports","api","context","rootContext","filter","getFilter","import","resourcePath","urlHandler","url","stringifyRequest","getPreRequester","importLoaders","urlPluginImports","shouldUseURLPlugin","urlResolver","urlParser","icssPluginImports","icssPluginApi","shouldUseIcssPlugin","icssResolver","icssParser","ast","type","satisfies","version","root","process","from","to","sourceMap","prev","normalizeSourceMap","inline","annotation","result","file","addDependency","warnings","warning","emitWarning","concat","sort","modules","exportOnlyLocals","unshift","importName","resolve","importCode","getImportCode","moduleCode","getModuleCode","exportCode","getExportCode"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = loader;\n\nvar _loaderUtils = require(\"loader-utils\");\n\nvar _postcss = _interopRequireDefault(require(\"postcss\"));\n\nvar _package = _interopRequireDefault(require(\"postcss/package.json\"));\n\nvar _schemaUtils = _interopRequireDefault(require(\"schema-utils\"));\n\nvar _semver = require(\"semver\");\n\nvar _CssSyntaxError = _interopRequireDefault(require(\"./CssSyntaxError\"));\n\nvar _Warning = _interopRequireDefault(require(\"./Warning\"));\n\nvar _options = _interopRequireDefault(require(\"./options.json\"));\n\nvar _plugins = require(\"./plugins\");\n\nvar _utils = require(\"./utils\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/*\n  MIT License http://www.opensource.org/licenses/mit-license.php\n  Author Tobias Koppers @sokra\n*/\nasync function loader(content, map, meta) {\n  const rawOptions = (0, _loaderUtils.getOptions)(this);\n  (0, _schemaUtils.default)(_options.default, rawOptions, {\n    name: 'CSS Loader',\n    baseDataPath: 'options'\n  });\n  const plugins = [];\n  const callback = this.async();\n  let options;\n\n  try {\n    options = (0, _utils.normalizeOptions)(rawOptions, this);\n  } catch (error) {\n    callback(error);\n    return;\n  }\n\n  const replacements = [];\n  const exports = [];\n\n  if ((0, _utils.shouldUseModulesPlugins)(options)) {\n    plugins.push(...(0, _utils.getModulesPlugins)(options, this));\n  }\n\n  const importPluginImports = [];\n  const importPluginApi = [];\n\n  if ((0, _utils.shouldUseImportPlugin)(options)) {\n    const resolver = this.getResolve({\n      conditionNames: ['style'],\n      extensions: ['.css'],\n      mainFields: ['css', 'style', 'main', '...'],\n      mainFiles: ['index', '...'],\n      restrictions: [/\\.css$/i]\n    });\n    plugins.push((0, _plugins.importParser)({\n      imports: importPluginImports,\n      api: importPluginApi,\n      context: this.context,\n      rootContext: this.rootContext,\n      filter: (0, _utils.getFilter)(options.import, this.resourcePath),\n      resolver,\n      urlHandler: url => (0, _loaderUtils.stringifyRequest)(this, (0, _utils.getPreRequester)(this)(options.importLoaders) + url)\n    }));\n  }\n\n  const urlPluginImports = [];\n\n  if ((0, _utils.shouldUseURLPlugin)(options)) {\n    const urlResolver = this.getResolve({\n      conditionNames: ['asset'],\n      mainFields: ['asset'],\n      mainFiles: [],\n      extensions: []\n    });\n    plugins.push((0, _plugins.urlParser)({\n      imports: urlPluginImports,\n      replacements,\n      context: this.context,\n      rootContext: this.rootContext,\n      filter: (0, _utils.getFilter)(options.url, this.resourcePath),\n      resolver: urlResolver,\n      urlHandler: url => (0, _loaderUtils.stringifyRequest)(this, url)\n    }));\n  }\n\n  const icssPluginImports = [];\n  const icssPluginApi = [];\n\n  if ((0, _utils.shouldUseIcssPlugin)(options)) {\n    const icssResolver = this.getResolve({\n      conditionNames: ['style'],\n      extensions: [],\n      mainFields: ['css', 'style', 'main', '...'],\n      mainFiles: ['index', '...']\n    });\n    plugins.push((0, _plugins.icssParser)({\n      imports: icssPluginImports,\n      api: icssPluginApi,\n      replacements,\n      exports,\n      context: this.context,\n      rootContext: this.rootContext,\n      resolver: icssResolver,\n      urlHandler: url => (0, _loaderUtils.stringifyRequest)(this, (0, _utils.getPreRequester)(this)(options.importLoaders) + url)\n    }));\n  } // Reuse CSS AST (PostCSS AST e.g 'postcss-loader') to avoid reparsing\n\n\n  if (meta) {\n    const {\n      ast\n    } = meta;\n\n    if (ast && ast.type === 'postcss' && (0, _semver.satisfies)(ast.version, `^${_package.default.version}`)) {\n      // eslint-disable-next-line no-param-reassign\n      content = ast.root;\n    }\n  }\n\n  const {\n    resourcePath\n  } = this;\n  let result;\n\n  try {\n    result = await (0, _postcss.default)(plugins).process(content, {\n      from: resourcePath,\n      to: resourcePath,\n      map: options.sourceMap ? {\n        prev: map ? (0, _utils.normalizeSourceMap)(map, resourcePath) : null,\n        inline: false,\n        annotation: false\n      } : false\n    });\n  } catch (error) {\n    if (error.file) {\n      this.addDependency(error.file);\n    }\n\n    callback(error.name === 'CssSyntaxError' ? new _CssSyntaxError.default(error) : error);\n    return;\n  }\n\n  for (const warning of result.warnings()) {\n    this.emitWarning(new _Warning.default(warning));\n  }\n\n  const imports = [].concat(icssPluginImports.sort(_utils.sort)).concat(importPluginImports.sort(_utils.sort)).concat(urlPluginImports.sort(_utils.sort));\n  const api = [].concat(importPluginApi.sort(_utils.sort)).concat(icssPluginApi.sort(_utils.sort));\n\n  if (options.modules.exportOnlyLocals !== true) {\n    imports.unshift({\n      importName: '___CSS_LOADER_API_IMPORT___',\n      url: (0, _loaderUtils.stringifyRequest)(this, require.resolve('./runtime/api'))\n    });\n  }\n\n  const importCode = (0, _utils.getImportCode)(imports, options);\n  const moduleCode = (0, _utils.getModuleCode)(result, api, replacements, options, this);\n  const exportCode = (0, _utils.getExportCode)(exports, replacements, options);\n  callback(null, `${importCode}${moduleCode}${exportCode}`);\n}"]},"metadata":{},"sourceType":"script"}