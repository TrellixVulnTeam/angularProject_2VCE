{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createConsoleLogger = void 0;\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nvar operators_1 = require(\"rxjs/operators\");\n\nvar src_1 = require(\"../src\");\n/**\n * A Logger that sends information to STDOUT and STDERR.\n */\n\n\nfunction createConsoleLogger() {\n  var verbose = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n  var stdout = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : process.stdout;\n  var stderr = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : process.stderr;\n  var colors = arguments.length > 3 ? arguments[3] : undefined;\n  var logger = new src_1.logging.IndentLogger('cling');\n  logger.pipe(operators_1.filter(function (entry) {\n    return entry.level !== 'debug' || verbose;\n  })).subscribe(function (entry) {\n    var color = colors && colors[entry.level];\n    var output = stdout;\n\n    switch (entry.level) {\n      case 'warn':\n      case 'fatal':\n      case 'error':\n        output = stderr;\n        break;\n    } // If we do console.log(message) or process.stdout.write(message + '\\n'), the process might\n    // stop before the whole message is written and the stream is flushed. This happens when\n    // streams are asynchronous.\n    //\n    // NodeJS IO streams are different depending on platform and usage. In POSIX environment,\n    // for example, they're asynchronous when writing to a pipe, but synchronous when writing\n    // to a TTY. In windows, it's the other way around. You can verify which is which with\n    // stream.isTTY and platform, but this is not good enough.\n    // In the async case, one should wait for the callback before sending more data or\n    // continuing the process. In our case it would be rather hard to do (but not impossible).\n    //\n    // Instead we take the easy way out and simply chunk the message and call the write\n    // function while the buffer drain itself asynchronously. With a smaller chunk size than\n    // the buffer, we are mostly certain that it works. In this case, the chunk has been picked\n    // as half a page size (4096/2 = 2048), minus some bytes for the color formatting.\n    // On POSIX it seems the buffer is 2 pages (8192), but just to be sure (could be different\n    // by platform).\n    //\n    // For more details, see https://nodejs.org/api/process.html#process_a_note_on_process_i_o\n\n\n    var chunkSize = 2000; // Small chunk.\n\n    var message = entry.message;\n\n    while (message) {\n      var chunk = message.slice(0, chunkSize);\n      message = message.slice(chunkSize);\n      output.write(color ? color(chunk) : chunk);\n    }\n\n    output.write('\\n');\n  });\n  return logger;\n}\n\nexports.createConsoleLogger = createConsoleLogger;","map":{"version":3,"sources":["/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@angular-devkit/build-angular/node_modules/@angular-devkit/core/node/cli-logger.js"],"names":["Object","defineProperty","exports","value","createConsoleLogger","operators_1","require","src_1","verbose","stdout","process","stderr","colors","logger","logging","IndentLogger","pipe","filter","entry","level","subscribe","color","output","chunkSize","message","chunk","slice","write"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,mBAAR,GAA8B,KAAK,CAAnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAMC,WAAW,GAAGC,OAAO,CAAC,gBAAD,CAA3B;;AACA,IAAMC,KAAK,GAAGD,OAAO,CAAC,QAAD,CAArB;AACA;AACA;AACA;;;AACA,SAASF,mBAAT,GAAwG;AAAA,MAA3EI,OAA2E,uEAAjE,KAAiE;AAAA,MAA1DC,MAA0D,uEAAjDC,OAAO,CAACD,MAAyC;AAAA,MAAjCE,MAAiC,uEAAxBD,OAAO,CAACC,MAAgB;AAAA,MAARC,MAAQ;AACpG,MAAMC,MAAM,GAAG,IAAIN,KAAK,CAACO,OAAN,CAAcC,YAAlB,CAA+B,OAA/B,CAAf;AACAF,EAAAA,MAAM,CACDG,IADL,CACUX,WAAW,CAACY,MAAZ,CAAmB,UAAAC,KAAK;AAAA,WAAIA,KAAK,CAACC,KAAN,KAAgB,OAAhB,IAA2BX,OAA/B;AAAA,GAAxB,CADV,EAEKY,SAFL,CAEe,UAAAF,KAAK,EAAI;AACpB,QAAMG,KAAK,GAAGT,MAAM,IAAIA,MAAM,CAACM,KAAK,CAACC,KAAP,CAA9B;AACA,QAAIG,MAAM,GAAGb,MAAb;;AACA,YAAQS,KAAK,CAACC,KAAd;AACI,WAAK,MAAL;AACA,WAAK,OAAL;AACA,WAAK,OAAL;AACIG,QAAAA,MAAM,GAAGX,MAAT;AACA;AALR,KAHoB,CAUpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,QAAMY,SAAS,GAAG,IAAlB,CA7BoB,CA6BI;;AACxB,QAAIC,OAAO,GAAGN,KAAK,CAACM,OAApB;;AACA,WAAOA,OAAP,EAAgB;AACZ,UAAMC,KAAK,GAAGD,OAAO,CAACE,KAAR,CAAc,CAAd,EAAiBH,SAAjB,CAAd;AACAC,MAAAA,OAAO,GAAGA,OAAO,CAACE,KAAR,CAAcH,SAAd,CAAV;AACAD,MAAAA,MAAM,CAACK,KAAP,CAAaN,KAAK,GAAGA,KAAK,CAACI,KAAD,CAAR,GAAkBA,KAApC;AACH;;AACDH,IAAAA,MAAM,CAACK,KAAP,CAAa,IAAb;AACH,GAvCD;AAwCA,SAAOd,MAAP;AACH;;AACDX,OAAO,CAACE,mBAAR,GAA8BA,mBAA9B","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.createConsoleLogger = void 0;\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst operators_1 = require(\"rxjs/operators\");\nconst src_1 = require(\"../src\");\n/**\n * A Logger that sends information to STDOUT and STDERR.\n */\nfunction createConsoleLogger(verbose = false, stdout = process.stdout, stderr = process.stderr, colors) {\n    const logger = new src_1.logging.IndentLogger('cling');\n    logger\n        .pipe(operators_1.filter(entry => entry.level !== 'debug' || verbose))\n        .subscribe(entry => {\n        const color = colors && colors[entry.level];\n        let output = stdout;\n        switch (entry.level) {\n            case 'warn':\n            case 'fatal':\n            case 'error':\n                output = stderr;\n                break;\n        }\n        // If we do console.log(message) or process.stdout.write(message + '\\n'), the process might\n        // stop before the whole message is written and the stream is flushed. This happens when\n        // streams are asynchronous.\n        //\n        // NodeJS IO streams are different depending on platform and usage. In POSIX environment,\n        // for example, they're asynchronous when writing to a pipe, but synchronous when writing\n        // to a TTY. In windows, it's the other way around. You can verify which is which with\n        // stream.isTTY and platform, but this is not good enough.\n        // In the async case, one should wait for the callback before sending more data or\n        // continuing the process. In our case it would be rather hard to do (but not impossible).\n        //\n        // Instead we take the easy way out and simply chunk the message and call the write\n        // function while the buffer drain itself asynchronously. With a smaller chunk size than\n        // the buffer, we are mostly certain that it works. In this case, the chunk has been picked\n        // as half a page size (4096/2 = 2048), minus some bytes for the color formatting.\n        // On POSIX it seems the buffer is 2 pages (8192), but just to be sure (could be different\n        // by platform).\n        //\n        // For more details, see https://nodejs.org/api/process.html#process_a_note_on_process_i_o\n        const chunkSize = 2000; // Small chunk.\n        let message = entry.message;\n        while (message) {\n            const chunk = message.slice(0, chunkSize);\n            message = message.slice(chunkSize);\n            output.write(color ? color(chunk) : chunk);\n        }\n        output.write('\\n');\n    });\n    return logger;\n}\nexports.createConsoleLogger = createConsoleLogger;\n"]},"metadata":{},"sourceType":"script"}