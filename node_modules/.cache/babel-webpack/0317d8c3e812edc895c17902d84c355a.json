{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _ = {\n  last: require('lodash/last'),\n  flatten: require('lodash/flatten')\n};\n\nvar util = require('./readline');\n\nvar cliWidth = require('cli-width');\n\nvar stripAnsi = require('strip-ansi');\n\nvar stringWidth = require('string-width');\n\nfunction height(content) {\n  return content.split('\\n').length;\n}\n\nfunction lastLine(content) {\n  return _.last(content.split('\\n'));\n}\n\nvar ScreenManager = /*#__PURE__*/function () {\n  function ScreenManager(rl) {\n    _classCallCheck(this, ScreenManager);\n\n    // These variables are keeping information to allow correct prompt re-rendering\n    this.height = 0;\n    this.extraLinesUnderPrompt = 0;\n    this.rl = rl;\n  }\n\n  _createClass(ScreenManager, [{\n    key: \"render\",\n    value: function render(content, bottomContent) {\n      this.rl.output.unmute();\n      this.clean(this.extraLinesUnderPrompt);\n      /**\n       * Write message to screen and setPrompt to control backspace\n       */\n\n      var promptLine = lastLine(content);\n      var rawPromptLine = stripAnsi(promptLine); // Remove the rl.line from our prompt. We can't rely on the content of\n      // rl.line (mainly because of the password prompt), so just rely on it's\n      // length.\n\n      var prompt = rawPromptLine;\n\n      if (this.rl.line.length) {\n        prompt = prompt.slice(0, -this.rl.line.length);\n      }\n\n      this.rl.setPrompt(prompt); // SetPrompt will change cursor position, now we can get correct value\n\n      var cursorPos = this.rl._getCursorPos();\n\n      var width = this.normalizedCliWidth();\n      content = this.forceLineReturn(content, width);\n\n      if (bottomContent) {\n        bottomContent = this.forceLineReturn(bottomContent, width);\n      } // Manually insert an extra line if we're at the end of the line.\n      // This prevent the cursor from appearing at the beginning of the\n      // current line.\n\n\n      if (rawPromptLine.length % width === 0) {\n        content += '\\n';\n      }\n\n      var fullContent = content + (bottomContent ? '\\n' + bottomContent : '');\n      this.rl.output.write(fullContent);\n      /**\n       * Re-adjust the cursor at the correct position.\n       */\n      // We need to consider parts of the prompt under the cursor as part of the bottom\n      // content in order to correctly cleanup and re-render.\n\n      var promptLineUpDiff = Math.floor(rawPromptLine.length / width) - cursorPos.rows;\n      var bottomContentHeight = promptLineUpDiff + (bottomContent ? height(bottomContent) : 0);\n\n      if (bottomContentHeight > 0) {\n        util.up(this.rl, bottomContentHeight);\n      } // Reset cursor at the beginning of the line\n\n\n      util.left(this.rl, stringWidth(lastLine(fullContent))); // Adjust cursor on the right\n\n      if (cursorPos.cols > 0) {\n        util.right(this.rl, cursorPos.cols);\n      }\n      /**\n       * Set up state for next re-rendering\n       */\n\n\n      this.extraLinesUnderPrompt = bottomContentHeight;\n      this.height = height(fullContent);\n      this.rl.output.mute();\n    }\n  }, {\n    key: \"clean\",\n    value: function clean(extraLines) {\n      if (extraLines > 0) {\n        util.down(this.rl, extraLines);\n      }\n\n      util.clearLine(this.rl, this.height);\n    }\n  }, {\n    key: \"done\",\n    value: function done() {\n      this.rl.setPrompt('');\n      this.rl.output.unmute();\n      this.rl.output.write('\\n');\n    }\n  }, {\n    key: \"releaseCursor\",\n    value: function releaseCursor() {\n      if (this.extraLinesUnderPrompt > 0) {\n        util.down(this.rl, this.extraLinesUnderPrompt);\n      }\n    }\n  }, {\n    key: \"normalizedCliWidth\",\n    value: function normalizedCliWidth() {\n      var width = cliWidth({\n        defaultWidth: 80,\n        output: this.rl.output\n      });\n      return width;\n    }\n  }, {\n    key: \"breakLines\",\n    value: function breakLines(lines, width) {\n      // Break lines who're longer than the cli width so we can normalize the natural line\n      // returns behavior across terminals.\n      width = width || this.normalizedCliWidth();\n      var regex = new RegExp('(?:(?:\\\\033[[0-9;]*m)*.?){1,' + width + '}', 'g');\n      return lines.map(function (line) {\n        var chunk = line.match(regex); // Last match is always empty\n\n        chunk.pop();\n        return chunk || '';\n      });\n    }\n  }, {\n    key: \"forceLineReturn\",\n    value: function forceLineReturn(content, width) {\n      width = width || this.normalizedCliWidth();\n      return _.flatten(this.breakLines(content.split('\\n'), width)).join('\\n');\n    }\n  }]);\n\n  return ScreenManager;\n}();\n\nmodule.exports = ScreenManager;","map":{"version":3,"sources":["/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/inquirer/lib/utils/screen-manager.js"],"names":["_","last","require","flatten","util","cliWidth","stripAnsi","stringWidth","height","content","split","length","lastLine","ScreenManager","rl","extraLinesUnderPrompt","bottomContent","output","unmute","clean","promptLine","rawPromptLine","prompt","line","slice","setPrompt","cursorPos","_getCursorPos","width","normalizedCliWidth","forceLineReturn","fullContent","write","promptLineUpDiff","Math","floor","rows","bottomContentHeight","up","left","cols","right","mute","extraLines","down","clearLine","defaultWidth","lines","regex","RegExp","map","chunk","match","pop","breakLines","join","module","exports"],"mappings":"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","sourcesContent":["'use strict';\nvar _ = {\n  last: require('lodash/last'),\n  flatten: require('lodash/flatten'),\n};\nvar util = require('./readline');\nvar cliWidth = require('cli-width');\nvar stripAnsi = require('strip-ansi');\nvar stringWidth = require('string-width');\n\nfunction height(content) {\n  return content.split('\\n').length;\n}\n\nfunction lastLine(content) {\n  return _.last(content.split('\\n'));\n}\n\nclass ScreenManager {\n  constructor(rl) {\n    // These variables are keeping information to allow correct prompt re-rendering\n    this.height = 0;\n    this.extraLinesUnderPrompt = 0;\n\n    this.rl = rl;\n  }\n\n  render(content, bottomContent) {\n    this.rl.output.unmute();\n    this.clean(this.extraLinesUnderPrompt);\n\n    /**\n     * Write message to screen and setPrompt to control backspace\n     */\n\n    var promptLine = lastLine(content);\n    var rawPromptLine = stripAnsi(promptLine);\n\n    // Remove the rl.line from our prompt. We can't rely on the content of\n    // rl.line (mainly because of the password prompt), so just rely on it's\n    // length.\n    var prompt = rawPromptLine;\n    if (this.rl.line.length) {\n      prompt = prompt.slice(0, -this.rl.line.length);\n    }\n\n    this.rl.setPrompt(prompt);\n\n    // SetPrompt will change cursor position, now we can get correct value\n    var cursorPos = this.rl._getCursorPos();\n    var width = this.normalizedCliWidth();\n\n    content = this.forceLineReturn(content, width);\n    if (bottomContent) {\n      bottomContent = this.forceLineReturn(bottomContent, width);\n    }\n\n    // Manually insert an extra line if we're at the end of the line.\n    // This prevent the cursor from appearing at the beginning of the\n    // current line.\n    if (rawPromptLine.length % width === 0) {\n      content += '\\n';\n    }\n\n    var fullContent = content + (bottomContent ? '\\n' + bottomContent : '');\n    this.rl.output.write(fullContent);\n\n    /**\n     * Re-adjust the cursor at the correct position.\n     */\n\n    // We need to consider parts of the prompt under the cursor as part of the bottom\n    // content in order to correctly cleanup and re-render.\n    var promptLineUpDiff = Math.floor(rawPromptLine.length / width) - cursorPos.rows;\n    var bottomContentHeight =\n      promptLineUpDiff + (bottomContent ? height(bottomContent) : 0);\n    if (bottomContentHeight > 0) {\n      util.up(this.rl, bottomContentHeight);\n    }\n\n    // Reset cursor at the beginning of the line\n    util.left(this.rl, stringWidth(lastLine(fullContent)));\n\n    // Adjust cursor on the right\n    if (cursorPos.cols > 0) {\n      util.right(this.rl, cursorPos.cols);\n    }\n\n    /**\n     * Set up state for next re-rendering\n     */\n    this.extraLinesUnderPrompt = bottomContentHeight;\n    this.height = height(fullContent);\n\n    this.rl.output.mute();\n  }\n\n  clean(extraLines) {\n    if (extraLines > 0) {\n      util.down(this.rl, extraLines);\n    }\n\n    util.clearLine(this.rl, this.height);\n  }\n\n  done() {\n    this.rl.setPrompt('');\n    this.rl.output.unmute();\n    this.rl.output.write('\\n');\n  }\n\n  releaseCursor() {\n    if (this.extraLinesUnderPrompt > 0) {\n      util.down(this.rl, this.extraLinesUnderPrompt);\n    }\n  }\n\n  normalizedCliWidth() {\n    var width = cliWidth({\n      defaultWidth: 80,\n      output: this.rl.output,\n    });\n    return width;\n  }\n\n  breakLines(lines, width) {\n    // Break lines who're longer than the cli width so we can normalize the natural line\n    // returns behavior across terminals.\n    width = width || this.normalizedCliWidth();\n    var regex = new RegExp('(?:(?:\\\\033[[0-9;]*m)*.?){1,' + width + '}', 'g');\n    return lines.map((line) => {\n      var chunk = line.match(regex);\n      // Last match is always empty\n      chunk.pop();\n      return chunk || '';\n    });\n  }\n\n  forceLineReturn(content, width) {\n    width = width || this.normalizedCliWidth();\n    return _.flatten(this.breakLines(content.split('\\n'), width)).join('\\n');\n  }\n}\n\nmodule.exports = ScreenManager;\n"]},"metadata":{},"sourceType":"script"}