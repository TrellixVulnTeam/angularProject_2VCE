{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nvar _createForOfIteratorHelper = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _classCallCheck = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/createClass\");\n\nvar TypeUnknown = 0;\nvar TypeNull = 1;\nvar TypeString = 2;\nvar TypeNumber = 3;\nvar TypeBoolean = 4;\nvar TypeRegExp = 5;\nvar TypeConditional = 6;\nvar TypeArray = 7;\nvar TypeConstArray = 8;\nvar TypeIdentifier = 9;\nvar TypeWrapped = 10;\nvar TypeTemplateString = 11;\n\nvar BasicEvaluatedExpression = /*#__PURE__*/function () {\n  function BasicEvaluatedExpression() {\n    _classCallCheck(this, BasicEvaluatedExpression);\n\n    this.type = TypeUnknown;\n    this.range = null;\n    this.falsy = false;\n    this.truthy = false;\n    this.bool = null;\n    this.number = null;\n    this.regExp = null;\n    this.string = null;\n    this.quasis = null;\n    this.parts = null;\n    this.array = null;\n    this.items = null;\n    this.options = null;\n    this.prefix = null;\n    this.postfix = null;\n    this.wrappedInnerExpressions = null;\n    this.expression = null;\n  }\n\n  _createClass(BasicEvaluatedExpression, [{\n    key: \"isNull\",\n    value: function isNull() {\n      return this.type === TypeNull;\n    }\n  }, {\n    key: \"isString\",\n    value: function isString() {\n      return this.type === TypeString;\n    }\n  }, {\n    key: \"isNumber\",\n    value: function isNumber() {\n      return this.type === TypeNumber;\n    }\n  }, {\n    key: \"isBoolean\",\n    value: function isBoolean() {\n      return this.type === TypeBoolean;\n    }\n  }, {\n    key: \"isRegExp\",\n    value: function isRegExp() {\n      return this.type === TypeRegExp;\n    }\n  }, {\n    key: \"isConditional\",\n    value: function isConditional() {\n      return this.type === TypeConditional;\n    }\n  }, {\n    key: \"isArray\",\n    value: function isArray() {\n      return this.type === TypeArray;\n    }\n  }, {\n    key: \"isConstArray\",\n    value: function isConstArray() {\n      return this.type === TypeConstArray;\n    }\n  }, {\n    key: \"isIdentifier\",\n    value: function isIdentifier() {\n      return this.type === TypeIdentifier;\n    }\n  }, {\n    key: \"isWrapped\",\n    value: function isWrapped() {\n      return this.type === TypeWrapped;\n    }\n  }, {\n    key: \"isTemplateString\",\n    value: function isTemplateString() {\n      return this.type === TypeTemplateString;\n    }\n  }, {\n    key: \"isTruthy\",\n    value: function isTruthy() {\n      return this.truthy;\n    }\n  }, {\n    key: \"isFalsy\",\n    value: function isFalsy() {\n      return this.falsy;\n    }\n  }, {\n    key: \"asBool\",\n    value: function asBool() {\n      if (this.truthy) return true;\n      if (this.falsy) return false;\n      if (this.isBoolean()) return this.bool;\n      if (this.isNull()) return false;\n      if (this.isString()) return this.string !== \"\";\n      if (this.isNumber()) return this.number !== 0;\n      if (this.isRegExp()) return true;\n      if (this.isArray()) return true;\n      if (this.isConstArray()) return true;\n\n      if (this.isWrapped()) {\n        return this.prefix && this.prefix.asBool() || this.postfix && this.postfix.asBool() ? true : undefined;\n      }\n\n      if (this.isTemplateString()) {\n        var str = this.asString();\n        if (typeof str === \"string\") return str !== \"\";\n      }\n\n      return undefined;\n    }\n  }, {\n    key: \"asString\",\n    value: function asString() {\n      if (this.isBoolean()) return \"\".concat(this.bool);\n      if (this.isNull()) return \"null\";\n      if (this.isString()) return this.string;\n      if (this.isNumber()) return \"\".concat(this.number);\n      if (this.isRegExp()) return \"\".concat(this.regExp);\n\n      if (this.isArray()) {\n        var array = [];\n\n        var _iterator = _createForOfIteratorHelper(this.items),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var item = _step.value;\n            var itemStr = item.asString();\n            if (itemStr === undefined) return undefined;\n            array.push(itemStr);\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n\n        return \"\".concat(array);\n      }\n\n      if (this.isConstArray()) return \"\".concat(this.array);\n\n      if (this.isTemplateString()) {\n        var str = \"\";\n\n        var _iterator2 = _createForOfIteratorHelper(this.parts),\n            _step2;\n\n        try {\n          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n            var part = _step2.value;\n            var partStr = part.asString();\n            if (partStr === undefined) return undefined;\n            str += partStr;\n          }\n        } catch (err) {\n          _iterator2.e(err);\n        } finally {\n          _iterator2.f();\n        }\n\n        return str;\n      }\n\n      return undefined;\n    }\n  }, {\n    key: \"setString\",\n    value: function setString(string) {\n      this.type = TypeString;\n      this.string = string;\n      return this;\n    }\n  }, {\n    key: \"setNull\",\n    value: function setNull() {\n      this.type = TypeNull;\n      return this;\n    }\n  }, {\n    key: \"setNumber\",\n    value: function setNumber(number) {\n      this.type = TypeNumber;\n      this.number = number;\n      return this;\n    }\n  }, {\n    key: \"setBoolean\",\n    value: function setBoolean(bool) {\n      this.type = TypeBoolean;\n      this.bool = bool;\n      return this;\n    }\n  }, {\n    key: \"setRegExp\",\n    value: function setRegExp(regExp) {\n      this.type = TypeRegExp;\n      this.regExp = regExp;\n      return this;\n    }\n  }, {\n    key: \"setIdentifier\",\n    value: function setIdentifier(identifier) {\n      this.type = TypeIdentifier;\n      this.identifier = identifier;\n      return this;\n    }\n  }, {\n    key: \"setWrapped\",\n    value: function setWrapped(prefix, postfix, innerExpressions) {\n      this.type = TypeWrapped;\n      this.prefix = prefix;\n      this.postfix = postfix;\n      this.wrappedInnerExpressions = innerExpressions;\n      return this;\n    }\n  }, {\n    key: \"setOptions\",\n    value: function setOptions(options) {\n      this.type = TypeConditional;\n      this.options = options;\n      return this;\n    }\n  }, {\n    key: \"addOptions\",\n    value: function addOptions(options) {\n      if (!this.options) {\n        this.type = TypeConditional;\n        this.options = [];\n      }\n\n      var _iterator3 = _createForOfIteratorHelper(options),\n          _step3;\n\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var item = _step3.value;\n          this.options.push(item);\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n\n      return this;\n    }\n  }, {\n    key: \"setItems\",\n    value: function setItems(items) {\n      this.type = TypeArray;\n      this.items = items;\n      return this;\n    }\n  }, {\n    key: \"setArray\",\n    value: function setArray(array) {\n      this.type = TypeConstArray;\n      this.array = array;\n      return this;\n    }\n  }, {\n    key: \"setTemplateString\",\n    value: function setTemplateString(quasis, parts, kind) {\n      this.type = TypeTemplateString;\n      this.quasis = quasis;\n      this.parts = parts;\n      this.templateStringKind = kind;\n      return this;\n    }\n  }, {\n    key: \"setTruthy\",\n    value: function setTruthy() {\n      this.falsy = false;\n      this.truthy = true;\n      return this;\n    }\n  }, {\n    key: \"setFalsy\",\n    value: function setFalsy() {\n      this.falsy = true;\n      this.truthy = false;\n      return this;\n    }\n  }, {\n    key: \"setRange\",\n    value: function setRange(range) {\n      this.range = range;\n      return this;\n    }\n  }, {\n    key: \"setExpression\",\n    value: function setExpression(expression) {\n      this.expression = expression;\n      return this;\n    }\n  }]);\n\n  return BasicEvaluatedExpression;\n}();\n\nmodule.exports = BasicEvaluatedExpression;","map":{"version":3,"sources":["/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/webpack/lib/BasicEvaluatedExpression.js"],"names":["TypeUnknown","TypeNull","TypeString","TypeNumber","TypeBoolean","TypeRegExp","TypeConditional","TypeArray","TypeConstArray","TypeIdentifier","TypeWrapped","TypeTemplateString","BasicEvaluatedExpression","type","range","falsy","truthy","bool","number","regExp","string","quasis","parts","array","items","options","prefix","postfix","wrappedInnerExpressions","expression","isBoolean","isNull","isString","isNumber","isRegExp","isArray","isConstArray","isWrapped","asBool","undefined","isTemplateString","str","asString","item","itemStr","push","part","partStr","identifier","innerExpressions","kind","templateStringKind","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AAEA;;;;;;;;AAEA,IAAMA,WAAW,GAAG,CAApB;AACA,IAAMC,QAAQ,GAAG,CAAjB;AACA,IAAMC,UAAU,GAAG,CAAnB;AACA,IAAMC,UAAU,GAAG,CAAnB;AACA,IAAMC,WAAW,GAAG,CAApB;AACA,IAAMC,UAAU,GAAG,CAAnB;AACA,IAAMC,eAAe,GAAG,CAAxB;AACA,IAAMC,SAAS,GAAG,CAAlB;AACA,IAAMC,cAAc,GAAG,CAAvB;AACA,IAAMC,cAAc,GAAG,CAAvB;AACA,IAAMC,WAAW,GAAG,EAApB;AACA,IAAMC,kBAAkB,GAAG,EAA3B;;IAEMC,wB;AACL,sCAAc;AAAA;;AACb,SAAKC,IAAL,GAAYb,WAAZ;AACA,SAAKc,KAAL,GAAa,IAAb;AACA,SAAKC,KAAL,GAAa,KAAb;AACA,SAAKC,MAAL,GAAc,KAAd;AACA,SAAKC,IAAL,GAAY,IAAZ;AACA,SAAKC,MAAL,GAAc,IAAd;AACA,SAAKC,MAAL,GAAc,IAAd;AACA,SAAKC,MAAL,GAAc,IAAd;AACA,SAAKC,MAAL,GAAc,IAAd;AACA,SAAKC,KAAL,GAAa,IAAb;AACA,SAAKC,KAAL,GAAa,IAAb;AACA,SAAKC,KAAL,GAAa,IAAb;AACA,SAAKC,OAAL,GAAe,IAAf;AACA,SAAKC,MAAL,GAAc,IAAd;AACA,SAAKC,OAAL,GAAe,IAAf;AACA,SAAKC,uBAAL,GAA+B,IAA/B;AACA,SAAKC,UAAL,GAAkB,IAAlB;AACA;;;;WAED,kBAAS;AACR,aAAO,KAAKhB,IAAL,KAAcZ,QAArB;AACA;;;WAED,oBAAW;AACV,aAAO,KAAKY,IAAL,KAAcX,UAArB;AACA;;;WAED,oBAAW;AACV,aAAO,KAAKW,IAAL,KAAcV,UAArB;AACA;;;WAED,qBAAY;AACX,aAAO,KAAKU,IAAL,KAAcT,WAArB;AACA;;;WAED,oBAAW;AACV,aAAO,KAAKS,IAAL,KAAcR,UAArB;AACA;;;WAED,yBAAgB;AACf,aAAO,KAAKQ,IAAL,KAAcP,eAArB;AACA;;;WAED,mBAAU;AACT,aAAO,KAAKO,IAAL,KAAcN,SAArB;AACA;;;WAED,wBAAe;AACd,aAAO,KAAKM,IAAL,KAAcL,cAArB;AACA;;;WAED,wBAAe;AACd,aAAO,KAAKK,IAAL,KAAcJ,cAArB;AACA;;;WAED,qBAAY;AACX,aAAO,KAAKI,IAAL,KAAcH,WAArB;AACA;;;WAED,4BAAmB;AAClB,aAAO,KAAKG,IAAL,KAAcF,kBAArB;AACA;;;WAED,oBAAW;AACV,aAAO,KAAKK,MAAZ;AACA;;;WAED,mBAAU;AACT,aAAO,KAAKD,KAAZ;AACA;;;WAED,kBAAS;AACR,UAAI,KAAKC,MAAT,EAAiB,OAAO,IAAP;AACjB,UAAI,KAAKD,KAAT,EAAgB,OAAO,KAAP;AAChB,UAAI,KAAKe,SAAL,EAAJ,EAAsB,OAAO,KAAKb,IAAZ;AACtB,UAAI,KAAKc,MAAL,EAAJ,EAAmB,OAAO,KAAP;AACnB,UAAI,KAAKC,QAAL,EAAJ,EAAqB,OAAO,KAAKZ,MAAL,KAAgB,EAAvB;AACrB,UAAI,KAAKa,QAAL,EAAJ,EAAqB,OAAO,KAAKf,MAAL,KAAgB,CAAvB;AACrB,UAAI,KAAKgB,QAAL,EAAJ,EAAqB,OAAO,IAAP;AACrB,UAAI,KAAKC,OAAL,EAAJ,EAAoB,OAAO,IAAP;AACpB,UAAI,KAAKC,YAAL,EAAJ,EAAyB,OAAO,IAAP;;AACzB,UAAI,KAAKC,SAAL,EAAJ,EAAsB;AACrB,eAAQ,KAAKX,MAAL,IAAe,KAAKA,MAAL,CAAYY,MAAZ,EAAhB,IACL,KAAKX,OAAL,IAAgB,KAAKA,OAAL,CAAaW,MAAb,EADX,GAEJ,IAFI,GAGJC,SAHH;AAIA;;AACD,UAAI,KAAKC,gBAAL,EAAJ,EAA6B;AAC5B,YAAMC,GAAG,GAAG,KAAKC,QAAL,EAAZ;AACA,YAAI,OAAOD,GAAP,KAAe,QAAnB,EAA6B,OAAOA,GAAG,KAAK,EAAf;AAC7B;;AACD,aAAOF,SAAP;AACA;;;WAED,oBAAW;AACV,UAAI,KAAKT,SAAL,EAAJ,EAAsB,iBAAU,KAAKb,IAAf;AACtB,UAAI,KAAKc,MAAL,EAAJ,EAAmB,OAAO,MAAP;AACnB,UAAI,KAAKC,QAAL,EAAJ,EAAqB,OAAO,KAAKZ,MAAZ;AACrB,UAAI,KAAKa,QAAL,EAAJ,EAAqB,iBAAU,KAAKf,MAAf;AACrB,UAAI,KAAKgB,QAAL,EAAJ,EAAqB,iBAAU,KAAKf,MAAf;;AACrB,UAAI,KAAKgB,OAAL,EAAJ,EAAoB;AACnB,YAAIZ,KAAK,GAAG,EAAZ;;AADmB,mDAEA,KAAKC,KAFL;AAAA;;AAAA;AAEnB,8DAA+B;AAAA,gBAApBmB,IAAoB;AAC9B,gBAAMC,OAAO,GAAGD,IAAI,CAACD,QAAL,EAAhB;AACA,gBAAIE,OAAO,KAAKL,SAAhB,EAA2B,OAAOA,SAAP;AAC3BhB,YAAAA,KAAK,CAACsB,IAAN,CAAWD,OAAX;AACA;AANkB;AAAA;AAAA;AAAA;AAAA;;AAOnB,yBAAUrB,KAAV;AACA;;AACD,UAAI,KAAKa,YAAL,EAAJ,EAAyB,iBAAU,KAAKb,KAAf;;AACzB,UAAI,KAAKiB,gBAAL,EAAJ,EAA6B;AAC5B,YAAIC,GAAG,GAAG,EAAV;;AAD4B,oDAET,KAAKnB,KAFI;AAAA;;AAAA;AAE5B,iEAA+B;AAAA,gBAApBwB,IAAoB;AAC9B,gBAAMC,OAAO,GAAGD,IAAI,CAACJ,QAAL,EAAhB;AACA,gBAAIK,OAAO,KAAKR,SAAhB,EAA2B,OAAOA,SAAP;AAC3BE,YAAAA,GAAG,IAAIM,OAAP;AACA;AAN2B;AAAA;AAAA;AAAA;AAAA;;AAO5B,eAAON,GAAP;AACA;;AACD,aAAOF,SAAP;AACA;;;WAED,mBAAUnB,MAAV,EAAkB;AACjB,WAAKP,IAAL,GAAYX,UAAZ;AACA,WAAKkB,MAAL,GAAcA,MAAd;AACA,aAAO,IAAP;AACA;;;WAED,mBAAU;AACT,WAAKP,IAAL,GAAYZ,QAAZ;AACA,aAAO,IAAP;AACA;;;WAED,mBAAUiB,MAAV,EAAkB;AACjB,WAAKL,IAAL,GAAYV,UAAZ;AACA,WAAKe,MAAL,GAAcA,MAAd;AACA,aAAO,IAAP;AACA;;;WAED,oBAAWD,IAAX,EAAiB;AAChB,WAAKJ,IAAL,GAAYT,WAAZ;AACA,WAAKa,IAAL,GAAYA,IAAZ;AACA,aAAO,IAAP;AACA;;;WAED,mBAAUE,MAAV,EAAkB;AACjB,WAAKN,IAAL,GAAYR,UAAZ;AACA,WAAKc,MAAL,GAAcA,MAAd;AACA,aAAO,IAAP;AACA;;;WAED,uBAAc6B,UAAd,EAA0B;AACzB,WAAKnC,IAAL,GAAYJ,cAAZ;AACA,WAAKuC,UAAL,GAAkBA,UAAlB;AACA,aAAO,IAAP;AACA;;;WAED,oBAAWtB,MAAX,EAAmBC,OAAnB,EAA4BsB,gBAA5B,EAA8C;AAC7C,WAAKpC,IAAL,GAAYH,WAAZ;AACA,WAAKgB,MAAL,GAAcA,MAAd;AACA,WAAKC,OAAL,GAAeA,OAAf;AACA,WAAKC,uBAAL,GAA+BqB,gBAA/B;AACA,aAAO,IAAP;AACA;;;WAED,oBAAWxB,OAAX,EAAoB;AACnB,WAAKZ,IAAL,GAAYP,eAAZ;AACA,WAAKmB,OAAL,GAAeA,OAAf;AACA,aAAO,IAAP;AACA;;;WAED,oBAAWA,OAAX,EAAoB;AACnB,UAAI,CAAC,KAAKA,OAAV,EAAmB;AAClB,aAAKZ,IAAL,GAAYP,eAAZ;AACA,aAAKmB,OAAL,GAAe,EAAf;AACA;;AAJkB,kDAKAA,OALA;AAAA;;AAAA;AAKnB,+DAA4B;AAAA,cAAjBkB,IAAiB;AAC3B,eAAKlB,OAAL,CAAaoB,IAAb,CAAkBF,IAAlB;AACA;AAPkB;AAAA;AAAA;AAAA;AAAA;;AAQnB,aAAO,IAAP;AACA;;;WAED,kBAASnB,KAAT,EAAgB;AACf,WAAKX,IAAL,GAAYN,SAAZ;AACA,WAAKiB,KAAL,GAAaA,KAAb;AACA,aAAO,IAAP;AACA;;;WAED,kBAASD,KAAT,EAAgB;AACf,WAAKV,IAAL,GAAYL,cAAZ;AACA,WAAKe,KAAL,GAAaA,KAAb;AACA,aAAO,IAAP;AACA;;;WAED,2BAAkBF,MAAlB,EAA0BC,KAA1B,EAAiC4B,IAAjC,EAAuC;AACtC,WAAKrC,IAAL,GAAYF,kBAAZ;AACA,WAAKU,MAAL,GAAcA,MAAd;AACA,WAAKC,KAAL,GAAaA,KAAb;AACA,WAAK6B,kBAAL,GAA0BD,IAA1B;AACA,aAAO,IAAP;AACA;;;WAED,qBAAY;AACX,WAAKnC,KAAL,GAAa,KAAb;AACA,WAAKC,MAAL,GAAc,IAAd;AACA,aAAO,IAAP;AACA;;;WAED,oBAAW;AACV,WAAKD,KAAL,GAAa,IAAb;AACA,WAAKC,MAAL,GAAc,KAAd;AACA,aAAO,IAAP;AACA;;;WAED,kBAASF,KAAT,EAAgB;AACf,WAAKA,KAAL,GAAaA,KAAb;AACA,aAAO,IAAP;AACA;;;WAED,uBAAce,UAAd,EAA0B;AACzB,WAAKA,UAAL,GAAkBA,UAAlB;AACA,aAAO,IAAP;AACA;;;;;;AAGFuB,MAAM,CAACC,OAAP,GAAiBzC,wBAAjB","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst TypeUnknown = 0;\nconst TypeNull = 1;\nconst TypeString = 2;\nconst TypeNumber = 3;\nconst TypeBoolean = 4;\nconst TypeRegExp = 5;\nconst TypeConditional = 6;\nconst TypeArray = 7;\nconst TypeConstArray = 8;\nconst TypeIdentifier = 9;\nconst TypeWrapped = 10;\nconst TypeTemplateString = 11;\n\nclass BasicEvaluatedExpression {\n\tconstructor() {\n\t\tthis.type = TypeUnknown;\n\t\tthis.range = null;\n\t\tthis.falsy = false;\n\t\tthis.truthy = false;\n\t\tthis.bool = null;\n\t\tthis.number = null;\n\t\tthis.regExp = null;\n\t\tthis.string = null;\n\t\tthis.quasis = null;\n\t\tthis.parts = null;\n\t\tthis.array = null;\n\t\tthis.items = null;\n\t\tthis.options = null;\n\t\tthis.prefix = null;\n\t\tthis.postfix = null;\n\t\tthis.wrappedInnerExpressions = null;\n\t\tthis.expression = null;\n\t}\n\n\tisNull() {\n\t\treturn this.type === TypeNull;\n\t}\n\n\tisString() {\n\t\treturn this.type === TypeString;\n\t}\n\n\tisNumber() {\n\t\treturn this.type === TypeNumber;\n\t}\n\n\tisBoolean() {\n\t\treturn this.type === TypeBoolean;\n\t}\n\n\tisRegExp() {\n\t\treturn this.type === TypeRegExp;\n\t}\n\n\tisConditional() {\n\t\treturn this.type === TypeConditional;\n\t}\n\n\tisArray() {\n\t\treturn this.type === TypeArray;\n\t}\n\n\tisConstArray() {\n\t\treturn this.type === TypeConstArray;\n\t}\n\n\tisIdentifier() {\n\t\treturn this.type === TypeIdentifier;\n\t}\n\n\tisWrapped() {\n\t\treturn this.type === TypeWrapped;\n\t}\n\n\tisTemplateString() {\n\t\treturn this.type === TypeTemplateString;\n\t}\n\n\tisTruthy() {\n\t\treturn this.truthy;\n\t}\n\n\tisFalsy() {\n\t\treturn this.falsy;\n\t}\n\n\tasBool() {\n\t\tif (this.truthy) return true;\n\t\tif (this.falsy) return false;\n\t\tif (this.isBoolean()) return this.bool;\n\t\tif (this.isNull()) return false;\n\t\tif (this.isString()) return this.string !== \"\";\n\t\tif (this.isNumber()) return this.number !== 0;\n\t\tif (this.isRegExp()) return true;\n\t\tif (this.isArray()) return true;\n\t\tif (this.isConstArray()) return true;\n\t\tif (this.isWrapped()) {\n\t\t\treturn (this.prefix && this.prefix.asBool()) ||\n\t\t\t\t(this.postfix && this.postfix.asBool())\n\t\t\t\t? true\n\t\t\t\t: undefined;\n\t\t}\n\t\tif (this.isTemplateString()) {\n\t\t\tconst str = this.asString();\n\t\t\tif (typeof str === \"string\") return str !== \"\";\n\t\t}\n\t\treturn undefined;\n\t}\n\n\tasString() {\n\t\tif (this.isBoolean()) return `${this.bool}`;\n\t\tif (this.isNull()) return \"null\";\n\t\tif (this.isString()) return this.string;\n\t\tif (this.isNumber()) return `${this.number}`;\n\t\tif (this.isRegExp()) return `${this.regExp}`;\n\t\tif (this.isArray()) {\n\t\t\tlet array = [];\n\t\t\tfor (const item of this.items) {\n\t\t\t\tconst itemStr = item.asString();\n\t\t\t\tif (itemStr === undefined) return undefined;\n\t\t\t\tarray.push(itemStr);\n\t\t\t}\n\t\t\treturn `${array}`;\n\t\t}\n\t\tif (this.isConstArray()) return `${this.array}`;\n\t\tif (this.isTemplateString()) {\n\t\t\tlet str = \"\";\n\t\t\tfor (const part of this.parts) {\n\t\t\t\tconst partStr = part.asString();\n\t\t\t\tif (partStr === undefined) return undefined;\n\t\t\t\tstr += partStr;\n\t\t\t}\n\t\t\treturn str;\n\t\t}\n\t\treturn undefined;\n\t}\n\n\tsetString(string) {\n\t\tthis.type = TypeString;\n\t\tthis.string = string;\n\t\treturn this;\n\t}\n\n\tsetNull() {\n\t\tthis.type = TypeNull;\n\t\treturn this;\n\t}\n\n\tsetNumber(number) {\n\t\tthis.type = TypeNumber;\n\t\tthis.number = number;\n\t\treturn this;\n\t}\n\n\tsetBoolean(bool) {\n\t\tthis.type = TypeBoolean;\n\t\tthis.bool = bool;\n\t\treturn this;\n\t}\n\n\tsetRegExp(regExp) {\n\t\tthis.type = TypeRegExp;\n\t\tthis.regExp = regExp;\n\t\treturn this;\n\t}\n\n\tsetIdentifier(identifier) {\n\t\tthis.type = TypeIdentifier;\n\t\tthis.identifier = identifier;\n\t\treturn this;\n\t}\n\n\tsetWrapped(prefix, postfix, innerExpressions) {\n\t\tthis.type = TypeWrapped;\n\t\tthis.prefix = prefix;\n\t\tthis.postfix = postfix;\n\t\tthis.wrappedInnerExpressions = innerExpressions;\n\t\treturn this;\n\t}\n\n\tsetOptions(options) {\n\t\tthis.type = TypeConditional;\n\t\tthis.options = options;\n\t\treturn this;\n\t}\n\n\taddOptions(options) {\n\t\tif (!this.options) {\n\t\t\tthis.type = TypeConditional;\n\t\t\tthis.options = [];\n\t\t}\n\t\tfor (const item of options) {\n\t\t\tthis.options.push(item);\n\t\t}\n\t\treturn this;\n\t}\n\n\tsetItems(items) {\n\t\tthis.type = TypeArray;\n\t\tthis.items = items;\n\t\treturn this;\n\t}\n\n\tsetArray(array) {\n\t\tthis.type = TypeConstArray;\n\t\tthis.array = array;\n\t\treturn this;\n\t}\n\n\tsetTemplateString(quasis, parts, kind) {\n\t\tthis.type = TypeTemplateString;\n\t\tthis.quasis = quasis;\n\t\tthis.parts = parts;\n\t\tthis.templateStringKind = kind;\n\t\treturn this;\n\t}\n\n\tsetTruthy() {\n\t\tthis.falsy = false;\n\t\tthis.truthy = true;\n\t\treturn this;\n\t}\n\n\tsetFalsy() {\n\t\tthis.falsy = true;\n\t\tthis.truthy = false;\n\t\treturn this;\n\t}\n\n\tsetRange(range) {\n\t\tthis.range = range;\n\t\treturn this;\n\t}\n\n\tsetExpression(expression) {\n\t\tthis.expression = expression;\n\t\treturn this;\n\t}\n}\n\nmodule.exports = BasicEvaluatedExpression;\n"]},"metadata":{},"sourceType":"script"}