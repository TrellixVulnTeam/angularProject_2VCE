{"ast":null,"code":"/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n(function (factory) {\n  if (typeof module === \"object\" && typeof module.exports === \"object\") {\n    var v = factory(require, exports);\n    if (v !== undefined) module.exports = v;\n  } else if (typeof define === \"function\" && define.amd) {\n    define(\"@angular/compiler-cli/src/ngtsc/translator/src/typescript_translator\", [\"require\", \"exports\", \"@angular/compiler-cli/src/ngtsc/translator/src/context\", \"@angular/compiler-cli/src/ngtsc/translator/src/translator\", \"@angular/compiler-cli/src/ngtsc/translator/src/typescript_ast_factory\"], factory);\n  }\n})(function (require, exports) {\n  \"use strict\";\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.translateStatement = exports.translateExpression = void 0;\n\n  var context_1 = require(\"@angular/compiler-cli/src/ngtsc/translator/src/context\");\n\n  var translator_1 = require(\"@angular/compiler-cli/src/ngtsc/translator/src/translator\");\n\n  var typescript_ast_factory_1 = require(\"@angular/compiler-cli/src/ngtsc/translator/src/typescript_ast_factory\");\n\n  function translateExpression(expression, imports, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    return expression.visitExpression(new translator_1.ExpressionTranslatorVisitor(new typescript_ast_factory_1.TypeScriptAstFactory(), imports, options), new context_1.Context(false));\n  }\n\n  exports.translateExpression = translateExpression;\n\n  function translateStatement(statement, imports, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    return statement.visitStatement(new translator_1.ExpressionTranslatorVisitor(new typescript_ast_factory_1.TypeScriptAstFactory(), imports, options), new context_1.Context(true));\n  }\n\n  exports.translateStatement = translateStatement;\n});","map":{"version":3,"sources":["../../../../../../../../../packages/compiler-cli/src/ngtsc/translator/src/typescript_translator.ts"],"names":[],"mappings":"AAAA;;;;;;AAMG;;;;;;;;;;;;;;;;AAMH,MAAA,SAAA,GAAA,OAAA,CAAA,wDAAA,CAAA;;AACA,MAAA,YAAA,GAAA,OAAA,CAAA,2DAAA,CAAA;;AACA,MAAA,wBAAA,GAAA,OAAA,CAAA,uEAAA,CAAA;;AAEA,WAAgB,mBAAhB,CACI,UADJ,EAC8B,OAD9B,EAEI,OAFJ,EAEkD;AAA9C,QAAA,OAAA,KAAA,KAAA,CAAA,EAAA;AAAA,MAAA,OAAA,GAAA,EAAA;AAA8C;;AAChD,WAAO,UAAU,CAAC,eAAX,CACH,IAAI,YAAA,CAAA,2BAAJ,CACI,IAAI,wBAAA,CAAA,oBAAJ,EADJ,EACgC,OADhC,EACyC,OADzC,CADG,EAGH,IAAI,SAAA,CAAA,OAAJ,CAAY,KAAZ,CAHG,CAAP;AAID;;AAPD,EAAA,OAAA,CAAA,mBAAA,GAAA,mBAAA;;AASA,WAAgB,kBAAhB,CACI,SADJ,EAC4B,OAD5B,EAEI,OAFJ,EAEkD;AAA9C,QAAA,OAAA,KAAA,KAAA,CAAA,EAAA;AAAA,MAAA,OAAA,GAAA,EAAA;AAA8C;;AAChD,WAAO,SAAS,CAAC,cAAV,CACH,IAAI,YAAA,CAAA,2BAAJ,CACI,IAAI,wBAAA,CAAA,oBAAJ,EADJ,EACgC,OADhC,EACyC,OADzC,CADG,EAGH,IAAI,SAAA,CAAA,OAAJ,CAAY,IAAZ,CAHG,CAAP;AAID;;AAPD,EAAA,OAAA,CAAA,kBAAA,GAAA,kBAAA","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport * as o from '@angular/compiler';\nimport * as ts from 'typescript';\n\nimport {ImportGenerator} from './api/import_generator';\nimport {Context} from './context';\nimport {ExpressionTranslatorVisitor, TranslatorOptions} from './translator';\nimport {TypeScriptAstFactory} from './typescript_ast_factory';\n\nexport function translateExpression(\n    expression: o.Expression, imports: ImportGenerator<ts.Expression>,\n    options: TranslatorOptions<ts.Expression> = {}): ts.Expression {\n  return expression.visitExpression(\n      new ExpressionTranslatorVisitor<ts.Statement, ts.Expression>(\n          new TypeScriptAstFactory(), imports, options),\n      new Context(false));\n}\n\nexport function translateStatement(\n    statement: o.Statement, imports: ImportGenerator<ts.Expression>,\n    options: TranslatorOptions<ts.Expression> = {}): ts.Statement {\n  return statement.visitStatement(\n      new ExpressionTranslatorVisitor<ts.Statement, ts.Expression>(\n          new TypeScriptAstFactory(), imports, options),\n      new Context(true));\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}