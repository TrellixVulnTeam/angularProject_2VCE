{"ast":null,"code":"/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n(function (factory) {\n  if (typeof module === \"object\" && typeof module.exports === \"object\") {\n    var v = factory(require, exports);\n    if (v !== undefined) module.exports = v;\n  } else if (typeof define === \"function\" && define.amd) {\n    define(\"@angular/compiler/src/ml_parser/icu_ast_expander\", [\"require\", \"exports\", \"tslib\", \"@angular/compiler/src/parse_util\", \"@angular/compiler/src/ml_parser/ast\"], factory);\n  }\n})(function (require, exports) {\n  \"use strict\";\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.ExpansionError = exports.ExpansionResult = exports.expandNodes = void 0;\n\n  var tslib_1 = require(\"tslib\");\n\n  var parse_util_1 = require(\"@angular/compiler/src/parse_util\");\n\n  var html = require(\"@angular/compiler/src/ml_parser/ast\"); // http://cldr.unicode.org/index/cldr-spec/plural-rules\n\n\n  var PLURAL_CASES = ['zero', 'one', 'two', 'few', 'many', 'other'];\n  /**\n   * Expands special forms into elements.\n   *\n   * For example,\n   *\n   * ```\n   * { messages.length, plural,\n   *   =0 {zero}\n   *   =1 {one}\n   *   other {more than one}\n   * }\n   * ```\n   *\n   * will be expanded into\n   *\n   * ```\n   * <ng-container [ngPlural]=\"messages.length\">\n   *   <ng-template ngPluralCase=\"=0\">zero</ng-template>\n   *   <ng-template ngPluralCase=\"=1\">one</ng-template>\n   *   <ng-template ngPluralCase=\"other\">more than one</ng-template>\n   * </ng-container>\n   * ```\n   */\n\n  function expandNodes(nodes) {\n    var expander = new _Expander();\n    return new ExpansionResult(html.visitAll(expander, nodes), expander.isExpanded, expander.errors);\n  }\n\n  exports.expandNodes = expandNodes;\n\n  var ExpansionResult =\n  /** @class */\n  function () {\n    function ExpansionResult(nodes, expanded, errors) {\n      this.nodes = nodes;\n      this.expanded = expanded;\n      this.errors = errors;\n    }\n\n    return ExpansionResult;\n  }();\n\n  exports.ExpansionResult = ExpansionResult;\n\n  var ExpansionError =\n  /** @class */\n  function (_super) {\n    tslib_1.__extends(ExpansionError, _super);\n\n    function ExpansionError(span, errorMsg) {\n      return _super.call(this, span, errorMsg) || this;\n    }\n\n    return ExpansionError;\n  }(parse_util_1.ParseError);\n\n  exports.ExpansionError = ExpansionError;\n  /**\n   * Expand expansion forms (plural, select) to directives\n   *\n   * @internal\n   */\n\n  var _Expander =\n  /** @class */\n  function () {\n    function _Expander() {\n      this.isExpanded = false;\n      this.errors = [];\n    }\n\n    _Expander.prototype.visitElement = function (element, context) {\n      return new html.Element(element.name, element.attrs, html.visitAll(this, element.children), element.sourceSpan, element.startSourceSpan, element.endSourceSpan);\n    };\n\n    _Expander.prototype.visitAttribute = function (attribute, context) {\n      return attribute;\n    };\n\n    _Expander.prototype.visitText = function (text, context) {\n      return text;\n    };\n\n    _Expander.prototype.visitComment = function (comment, context) {\n      return comment;\n    };\n\n    _Expander.prototype.visitExpansion = function (icu, context) {\n      this.isExpanded = true;\n      return icu.type == 'plural' ? _expandPluralForm(icu, this.errors) : _expandDefaultForm(icu, this.errors);\n    };\n\n    _Expander.prototype.visitExpansionCase = function (icuCase, context) {\n      throw new Error('Should not be reached');\n    };\n\n    return _Expander;\n  }(); // Plural forms are expanded to `NgPlural` and `NgPluralCase`s\n\n\n  function _expandPluralForm(ast, errors) {\n    var children = ast.cases.map(function (c) {\n      if (PLURAL_CASES.indexOf(c.value) == -1 && !c.value.match(/^=\\d+$/)) {\n        errors.push(new ExpansionError(c.valueSourceSpan, \"Plural cases should be \\\"=<number>\\\" or one of \" + PLURAL_CASES.join(', ')));\n      }\n\n      var expansionResult = expandNodes(c.expression);\n      errors.push.apply(errors, tslib_1.__spread(expansionResult.errors));\n      return new html.Element(\"ng-template\", [new html.Attribute('ngPluralCase', \"\" + c.value, c.valueSourceSpan, undefined\n      /* keySpan */\n      , undefined\n      /* valueSpan */\n      , undefined\n      /* i18n */\n      )], expansionResult.nodes, c.sourceSpan, c.sourceSpan, c.sourceSpan);\n    });\n    var switchAttr = new html.Attribute('[ngPlural]', ast.switchValue, ast.switchValueSourceSpan, undefined\n    /* keySpan */\n    , undefined\n    /* valueSpan */\n    , undefined\n    /* i18n */\n    );\n    return new html.Element('ng-container', [switchAttr], children, ast.sourceSpan, ast.sourceSpan, ast.sourceSpan);\n  } // ICU messages (excluding plural form) are expanded to `NgSwitch`  and `NgSwitchCase`s\n\n\n  function _expandDefaultForm(ast, errors) {\n    var children = ast.cases.map(function (c) {\n      var expansionResult = expandNodes(c.expression);\n      errors.push.apply(errors, tslib_1.__spread(expansionResult.errors));\n\n      if (c.value === 'other') {\n        // other is the default case when no values match\n        return new html.Element(\"ng-template\", [new html.Attribute('ngSwitchDefault', '', c.valueSourceSpan, undefined\n        /* keySpan */\n        , undefined\n        /* valueSpan */\n        , undefined\n        /* i18n */\n        )], expansionResult.nodes, c.sourceSpan, c.sourceSpan, c.sourceSpan);\n      }\n\n      return new html.Element(\"ng-template\", [new html.Attribute('ngSwitchCase', \"\" + c.value, c.valueSourceSpan, undefined\n      /* keySpan */\n      , undefined\n      /* valueSpan */\n      , undefined\n      /* i18n */\n      )], expansionResult.nodes, c.sourceSpan, c.sourceSpan, c.sourceSpan);\n    });\n    var switchAttr = new html.Attribute('[ngSwitch]', ast.switchValue, ast.switchValueSourceSpan, undefined\n    /* keySpan */\n    , undefined\n    /* valueSpan */\n    , undefined\n    /* i18n */\n    );\n    return new html.Element('ng-container', [switchAttr], children, ast.sourceSpan, ast.sourceSpan, ast.sourceSpan);\n  }\n});","map":{"version":3,"sources":["../../../../../../../packages/compiler/src/ml_parser/icu_ast_expander.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ParseError, ParseSourceSpan} from '../parse_util';\n\nimport * as html from './ast';\n\n// http://cldr.unicode.org/index/cldr-spec/plural-rules\nconst PLURAL_CASES: string[] = ['zero', 'one', 'two', 'few', 'many', 'other'];\n\n/**\n * Expands special forms into elements.\n *\n * For example,\n *\n * ```\n * { messages.length, plural,\n *   =0 {zero}\n *   =1 {one}\n *   other {more than one}\n * }\n * ```\n *\n * will be expanded into\n *\n * ```\n * <ng-container [ngPlural]=\"messages.length\">\n *   <ng-template ngPluralCase=\"=0\">zero</ng-template>\n *   <ng-template ngPluralCase=\"=1\">one</ng-template>\n *   <ng-template ngPluralCase=\"other\">more than one</ng-template>\n * </ng-container>\n * ```\n */\nexport function expandNodes(nodes: html.Node[]): ExpansionResult {\n  const expander = new _Expander();\n  return new ExpansionResult(html.visitAll(expander, nodes), expander.isExpanded, expander.errors);\n}\n\nexport class ExpansionResult {\n  constructor(public nodes: html.Node[], public expanded: boolean, public errors: ParseError[]) {}\n}\n\nexport class ExpansionError extends ParseError {\n  constructor(span: ParseSourceSpan, errorMsg: string) {\n    super(span, errorMsg);\n  }\n}\n\n/**\n * Expand expansion forms (plural, select) to directives\n *\n * @internal\n */\nclass _Expander implements html.Visitor {\n  isExpanded: boolean = false;\n  errors: ParseError[] = [];\n\n  visitElement(element: html.Element, context: any): any {\n    return new html.Element(\n        element.name, element.attrs, html.visitAll(this, element.children), element.sourceSpan,\n        element.startSourceSpan, element.endSourceSpan);\n  }\n\n  visitAttribute(attribute: html.Attribute, context: any): any {\n    return attribute;\n  }\n\n  visitText(text: html.Text, context: any): any {\n    return text;\n  }\n\n  visitComment(comment: html.Comment, context: any): any {\n    return comment;\n  }\n\n  visitExpansion(icu: html.Expansion, context: any): any {\n    this.isExpanded = true;\n    return icu.type == 'plural' ? _expandPluralForm(icu, this.errors) :\n                                  _expandDefaultForm(icu, this.errors);\n  }\n\n  visitExpansionCase(icuCase: html.ExpansionCase, context: any): any {\n    throw new Error('Should not be reached');\n  }\n}\n\n// Plural forms are expanded to `NgPlural` and `NgPluralCase`s\nfunction _expandPluralForm(ast: html.Expansion, errors: ParseError[]): html.Element {\n  const children = ast.cases.map(c => {\n    if (PLURAL_CASES.indexOf(c.value) == -1 && !c.value.match(/^=\\d+$/)) {\n      errors.push(new ExpansionError(\n          c.valueSourceSpan,\n          `Plural cases should be \"=<number>\" or one of ${PLURAL_CASES.join(', ')}`));\n    }\n\n    const expansionResult = expandNodes(c.expression);\n    errors.push(...expansionResult.errors);\n\n    return new html.Element(\n        `ng-template`, [new html.Attribute(\n                           'ngPluralCase', `${c.value}`, c.valueSourceSpan, undefined /* keySpan */,\n                           undefined /* valueSpan */, undefined /* i18n */)],\n        expansionResult.nodes, c.sourceSpan, c.sourceSpan, c.sourceSpan);\n  });\n  const switchAttr = new html.Attribute(\n      '[ngPlural]', ast.switchValue, ast.switchValueSourceSpan, undefined /* keySpan */,\n      undefined /* valueSpan */, undefined /* i18n */);\n  return new html.Element(\n      'ng-container', [switchAttr], children, ast.sourceSpan, ast.sourceSpan, ast.sourceSpan);\n}\n\n// ICU messages (excluding plural form) are expanded to `NgSwitch`  and `NgSwitchCase`s\nfunction _expandDefaultForm(ast: html.Expansion, errors: ParseError[]): html.Element {\n  const children = ast.cases.map(c => {\n    const expansionResult = expandNodes(c.expression);\n    errors.push(...expansionResult.errors);\n\n    if (c.value === 'other') {\n      // other is the default case when no values match\n      return new html.Element(\n          `ng-template`, [new html.Attribute(\n                             'ngSwitchDefault', '', c.valueSourceSpan, undefined /* keySpan */,\n                             undefined /* valueSpan */, undefined /* i18n */)],\n          expansionResult.nodes, c.sourceSpan, c.sourceSpan, c.sourceSpan);\n    }\n\n    return new html.Element(\n        `ng-template`, [new html.Attribute(\n                           'ngSwitchCase', `${c.value}`, c.valueSourceSpan, undefined /* keySpan */,\n                           undefined /* valueSpan */, undefined /* i18n */)],\n        expansionResult.nodes, c.sourceSpan, c.sourceSpan, c.sourceSpan);\n  });\n  const switchAttr = new html.Attribute(\n      '[ngSwitch]', ast.switchValue, ast.switchValueSourceSpan, undefined /* keySpan */,\n      undefined /* valueSpan */, undefined /* i18n */);\n  return new html.Element(\n      'ng-container', [switchAttr], children, ast.sourceSpan, ast.sourceSpan, ast.sourceSpan);\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}