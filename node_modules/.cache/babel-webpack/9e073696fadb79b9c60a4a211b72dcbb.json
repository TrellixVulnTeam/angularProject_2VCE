{"ast":null,"code":"\"use strict\";\n\nvar _createForOfIteratorHelper = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _classCallCheck = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/createSuper\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ExplorerSync = void 0;\n\nvar _path = _interopRequireDefault(require(\"path\"));\n\nvar _ExplorerBase = require(\"./ExplorerBase\");\n\nvar _readFile = require(\"./readFile\");\n\nvar _cacheWrapper = require(\"./cacheWrapper\");\n\nvar _getDirectory = require(\"./getDirectory\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar ExplorerSync = /*#__PURE__*/function (_ExplorerBase$Explore) {\n  _inherits(ExplorerSync, _ExplorerBase$Explore);\n\n  var _super = _createSuper(ExplorerSync);\n\n  function ExplorerSync(options) {\n    _classCallCheck(this, ExplorerSync);\n\n    return _super.call(this, options);\n  }\n\n  _createClass(ExplorerSync, [{\n    key: \"searchSync\",\n    value: function searchSync() {\n      var searchFrom = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : process.cwd();\n      var startDirectory = (0, _getDirectory.getDirectorySync)(searchFrom);\n      var result = this.searchFromDirectorySync(startDirectory);\n      return result;\n    }\n  }, {\n    key: \"searchFromDirectorySync\",\n    value: function searchFromDirectorySync(dir) {\n      var _this = this;\n\n      var absoluteDir = _path.default.resolve(process.cwd(), dir);\n\n      var run = function run() {\n        var result = _this.searchDirectorySync(absoluteDir);\n\n        var nextDir = _this.nextDirectoryToSearch(absoluteDir, result);\n\n        if (nextDir) {\n          return _this.searchFromDirectorySync(nextDir);\n        }\n\n        var transformResult = _this.config.transform(result);\n\n        return transformResult;\n      };\n\n      if (this.searchCache) {\n        return (0, _cacheWrapper.cacheWrapperSync)(this.searchCache, absoluteDir, run);\n      }\n\n      return run();\n    }\n  }, {\n    key: \"searchDirectorySync\",\n    value: function searchDirectorySync(dir) {\n      var _iterator = _createForOfIteratorHelper(this.config.searchPlaces),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var place = _step.value;\n          var placeResult = this.loadSearchPlaceSync(dir, place);\n\n          if (this.shouldSearchStopWithResult(placeResult) === true) {\n            return placeResult;\n          }\n        } // config not found\n\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      return null;\n    }\n  }, {\n    key: \"loadSearchPlaceSync\",\n    value: function loadSearchPlaceSync(dir, place) {\n      var filepath = _path.default.join(dir, place);\n\n      var content = (0, _readFile.readFileSync)(filepath);\n      var result = this.createCosmiconfigResultSync(filepath, content);\n      return result;\n    }\n  }, {\n    key: \"loadFileContentSync\",\n    value: function loadFileContentSync(filepath, content) {\n      if (content === null) {\n        return null;\n      }\n\n      if (content.trim() === '') {\n        return undefined;\n      }\n\n      var loader = this.getLoaderEntryForFile(filepath);\n      var loaderResult = loader(filepath, content);\n      return loaderResult;\n    }\n  }, {\n    key: \"createCosmiconfigResultSync\",\n    value: function createCosmiconfigResultSync(filepath, content) {\n      var fileContent = this.loadFileContentSync(filepath, content);\n      var result = this.loadedContentToCosmiconfigResult(filepath, fileContent);\n      return result;\n    }\n  }, {\n    key: \"loadSync\",\n    value: function loadSync(filepath) {\n      var _this2 = this;\n\n      this.validateFilePath(filepath);\n\n      var absoluteFilePath = _path.default.resolve(process.cwd(), filepath);\n\n      var runLoadSync = function runLoadSync() {\n        var content = (0, _readFile.readFileSync)(absoluteFilePath, {\n          throwNotFound: true\n        });\n\n        var cosmiconfigResult = _this2.createCosmiconfigResultSync(absoluteFilePath, content);\n\n        var transformResult = _this2.config.transform(cosmiconfigResult);\n\n        return transformResult;\n      };\n\n      if (this.loadCache) {\n        return (0, _cacheWrapper.cacheWrapperSync)(this.loadCache, absoluteFilePath, runLoadSync);\n      }\n\n      return runLoadSync();\n    }\n  }]);\n\n  return ExplorerSync;\n}(_ExplorerBase.ExplorerBase);\n\nexports.ExplorerSync = ExplorerSync;","map":{"version":3,"sources":["../src/ExplorerSync.ts"],"names":["ExplorerBase","searchFrom","process","startDirectory","result","absoluteDir","path","run","nextDir","transformResult","placeResult","filepath","content","loader","loaderResult","fileContent","absoluteFilePath","runLoadSync","throwNotFound","cosmiconfigResult"],"mappings":"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","sourcesContent":["import path from 'path';\nimport { ExplorerBase } from './ExplorerBase';\nimport { readFileSync } from './readFile';\nimport { cacheWrapperSync } from './cacheWrapper';\nimport { getDirectorySync } from './getDirectory';\nimport {\n  CosmiconfigResult,\n  ExplorerOptionsSync,\n  LoadedFileContent,\n} from './types';\n\nclass ExplorerSync extends ExplorerBase<ExplorerOptionsSync> {\n  public constructor(options: ExplorerOptionsSync) {\n    super(options);\n  }\n\n  public searchSync(searchFrom: string = process.cwd()): CosmiconfigResult {\n    const startDirectory = getDirectorySync(searchFrom);\n    const result = this.searchFromDirectorySync(startDirectory);\n\n    return result;\n  }\n\n  private searchFromDirectorySync(dir: string): CosmiconfigResult {\n    const absoluteDir = path.resolve(process.cwd(), dir);\n\n    const run = (): CosmiconfigResult => {\n      const result = this.searchDirectorySync(absoluteDir);\n      const nextDir = this.nextDirectoryToSearch(absoluteDir, result);\n\n      if (nextDir) {\n        return this.searchFromDirectorySync(nextDir);\n      }\n\n      const transformResult = this.config.transform(result);\n\n      return transformResult;\n    };\n\n    if (this.searchCache) {\n      return cacheWrapperSync(this.searchCache, absoluteDir, run);\n    }\n\n    return run();\n  }\n\n  private searchDirectorySync(dir: string): CosmiconfigResult {\n    for (const place of this.config.searchPlaces) {\n      const placeResult = this.loadSearchPlaceSync(dir, place);\n\n      if (this.shouldSearchStopWithResult(placeResult) === true) {\n        return placeResult;\n      }\n    }\n\n    // config not found\n    return null;\n  }\n\n  private loadSearchPlaceSync(dir: string, place: string): CosmiconfigResult {\n    const filepath = path.join(dir, place);\n    const content = readFileSync(filepath);\n\n    const result = this.createCosmiconfigResultSync(filepath, content);\n\n    return result;\n  }\n\n  private loadFileContentSync(\n    filepath: string,\n    content: string | null,\n  ): LoadedFileContent {\n    if (content === null) {\n      return null;\n    }\n    if (content.trim() === '') {\n      return undefined;\n    }\n    const loader = this.getLoaderEntryForFile(filepath);\n    const loaderResult = loader(filepath, content);\n\n    return loaderResult;\n  }\n\n  private createCosmiconfigResultSync(\n    filepath: string,\n    content: string | null,\n  ): CosmiconfigResult {\n    const fileContent = this.loadFileContentSync(filepath, content);\n    const result = this.loadedContentToCosmiconfigResult(filepath, fileContent);\n\n    return result;\n  }\n\n  public loadSync(filepath: string): CosmiconfigResult {\n    this.validateFilePath(filepath);\n    const absoluteFilePath = path.resolve(process.cwd(), filepath);\n\n    const runLoadSync = (): CosmiconfigResult => {\n      const content = readFileSync(absoluteFilePath, { throwNotFound: true });\n      const cosmiconfigResult = this.createCosmiconfigResultSync(\n        absoluteFilePath,\n        content,\n      );\n\n      const transformResult = this.config.transform(cosmiconfigResult);\n\n      return transformResult;\n    };\n\n    if (this.loadCache) {\n      return cacheWrapperSync(this.loadCache, absoluteFilePath, runLoadSync);\n    }\n\n    return runLoadSync();\n  }\n}\n\nexport { ExplorerSync };\n"]},"metadata":{},"sourceType":"script"}