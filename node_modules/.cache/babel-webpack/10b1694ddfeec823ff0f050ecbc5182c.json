{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/regenerator\");\n\nvar _objectSpread = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/objectSpread2\");\n\nvar _slicedToArray = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nvar _asyncToGenerator = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.execute = void 0;\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nvar architect_1 = require(\"@angular-devkit/architect\");\n\nvar core_1 = require(\"@angular-devkit/core\");\n\nvar path_1 = require(\"path\");\n\nvar rxjs_1 = require(\"rxjs\");\n\nvar operators_1 = require(\"rxjs/operators\");\n\nvar version_1 = require(\"../utils/version\");\n\nvar webpack_browser_config_1 = require(\"../utils/webpack-browser-config\");\n\nvar configs_1 = require(\"../webpack/configs\");\n\nvar single_test_transform_1 = require(\"../webpack/plugins/single-test-transform\");\n\nvar find_tests_1 = require(\"./find-tests\");\n\nfunction initialize(_x, _x2, _x3) {\n  return _initialize.apply(this, arguments);\n}\n\nfunction _initialize() {\n  _initialize = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(options, context, webpackConfigurationTransformer) {\n    var _yield$webpack_browse, config, karma;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return webpack_browser_config_1.generateBrowserWebpackConfigFromContext( // only two properties are missing:\n            // * `outputPath` which is fixed for tests\n            // * `budgets` which might be incorrect due to extra dev libs\n            _objectSpread(_objectSpread({}, options), {}, {\n              outputPath: '',\n              budgets: undefined\n            }), context, function (wco) {\n              return [configs_1.getCommonConfig(wco), configs_1.getStylesConfig(wco), configs_1.getNonAotConfig(wco), configs_1.getTestConfig(wco), configs_1.getWorkerConfig(wco)];\n            });\n\n          case 2:\n            _yield$webpack_browse = _context.sent;\n            config = _yield$webpack_browse.config;\n            _context.next = 6;\n            return Promise.resolve().then(function () {\n              return require('karma');\n            });\n\n          case 6:\n            karma = _context.sent;\n            _context.t0 = karma;\n\n            if (!webpackConfigurationTransformer) {\n              _context.next = 14;\n              break;\n            }\n\n            _context.next = 11;\n            return webpackConfigurationTransformer(config);\n\n          case 11:\n            _context.t1 = _context.sent;\n            _context.next = 15;\n            break;\n\n          case 14:\n            _context.t1 = config;\n\n          case 15:\n            _context.t2 = _context.t1;\n            return _context.abrupt(\"return\", [_context.t0, _context.t2]);\n\n          case 17:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _initialize.apply(this, arguments);\n}\n\nfunction execute(options, context) {\n  var transforms = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  // Check Angular version.\n  version_1.assertCompatibleAngularVersion(context.workspaceRoot, context.logger);\n  return rxjs_1.from(initialize(options, context, transforms.webpackConfiguration)).pipe(operators_1.switchMap(function (_ref) {\n    var _ref2 = _slicedToArray(_ref, 2),\n        karma = _ref2[0],\n        webpackConfig = _ref2[1];\n\n    return new rxjs_1.Observable(function (subscriber) {\n      var _a;\n\n      var karmaOptions = {};\n\n      if (options.watch !== undefined) {\n        karmaOptions.singleRun = !options.watch;\n      } // Convert browsers from a string to an array\n\n\n      if (options.browsers) {\n        karmaOptions.browsers = options.browsers.split(',');\n      }\n\n      if (options.reporters) {\n        // Split along commas to make it more natural, and remove empty strings.\n        var reporters = options.reporters.reduce(function (acc, curr) {\n          return acc.concat(curr.split(','));\n        }, []).filter(function (x) {\n          return !!x;\n        });\n\n        if (reporters.length > 0) {\n          karmaOptions.reporters = reporters;\n        }\n      } // prepend special webpack loader that will transform test.ts\n\n\n      if (options.include && options.include.length > 0) {\n        var mainFilePath = core_1.getSystemPath(core_1.join(core_1.normalize(context.workspaceRoot), options.main));\n        var files = find_tests_1.findTests(options.include, path_1.dirname(mainFilePath), context.workspaceRoot); // early exit, no reason to start karma\n\n        if (!files.length) {\n          subscriber.error(\"Specified patterns: \\\"\".concat(options.include.join(', '), \"\\\" did not match any spec files\"));\n          return;\n        } // Get the rules and ensure the Webpack configuration is setup properly\n\n\n        var rules = ((_a = webpackConfig.module) === null || _a === void 0 ? void 0 : _a.rules) || [];\n\n        if (!webpackConfig.module) {\n          webpackConfig.module = {\n            rules: rules\n          };\n        } else if (!webpackConfig.module.rules) {\n          webpackConfig.module.rules = rules;\n        }\n\n        rules.unshift({\n          test: mainFilePath,\n          use: {\n            // cannot be a simple path as it differs between environments\n            loader: single_test_transform_1.SingleTestTransformLoader,\n            options: {\n              files: files,\n              logger: context.logger\n            }\n          }\n        });\n      } // Assign additional karmaConfig options to the local ngapp config\n\n\n      karmaOptions.configFile = path_1.resolve(context.workspaceRoot, options.karmaConfig);\n      karmaOptions.buildWebpack = {\n        options: options,\n        webpackConfig: webpackConfig,\n        // Pass onto Karma to emit BuildEvents.\n        successCb: function successCb() {\n          return subscriber.next({\n            success: true\n          });\n        },\n        failureCb: function failureCb() {\n          return subscriber.next({\n            success: false\n          });\n        },\n        // Workaround for https://github.com/karma-runner/karma/issues/3154\n        // When this workaround is removed, user projects need to be updated to use a Karma\n        // version that has a fix for this issue.\n        toJSON: function toJSON() {},\n        logger: context.logger\n      }; // Complete the observable once the Karma server returns.\n\n      var karmaServer = new karma.Server(transforms.karmaOptions ? transforms.karmaOptions(karmaOptions) : karmaOptions, function (exitCode) {\n        subscriber.next({\n          success: exitCode === 0\n        });\n        subscriber.complete();\n      }); // karma typings incorrectly define start's return value as void\n      // tslint:disable-next-line:no-use-of-empty-return-value\n\n      var karmaStart = karmaServer.start(); // Cleanup, signal Karma to exit.\n\n      return function () {\n        // Karma only has the `stop` method start with 3.1.1, so we must defensively check.\n        var karmaServerWithStop = karmaServer;\n\n        if (typeof karmaServerWithStop.stop === 'function') {\n          return karmaStart.then(function () {\n            return karmaServerWithStop.stop();\n          });\n        }\n      };\n    });\n  }), operators_1.defaultIfEmpty({\n    success: false\n  }));\n}\n\nexports.execute = execute;\nexports.default = architect_1.createBuilder(execute);","map":{"version":3,"sources":["/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@angular-devkit/build-angular/src/karma/index.js"],"names":["Object","defineProperty","exports","value","execute","architect_1","require","core_1","path_1","rxjs_1","operators_1","version_1","webpack_browser_config_1","configs_1","single_test_transform_1","find_tests_1","initialize","options","context","webpackConfigurationTransformer","generateBrowserWebpackConfigFromContext","outputPath","budgets","undefined","wco","getCommonConfig","getStylesConfig","getNonAotConfig","getTestConfig","getWorkerConfig","config","Promise","resolve","then","karma","transforms","assertCompatibleAngularVersion","workspaceRoot","logger","from","webpackConfiguration","pipe","switchMap","webpackConfig","Observable","subscriber","_a","karmaOptions","watch","singleRun","browsers","split","reporters","reduce","acc","curr","concat","filter","x","length","include","mainFilePath","getSystemPath","join","normalize","main","files","findTests","dirname","error","rules","module","unshift","test","use","loader","SingleTestTransformLoader","configFile","karmaConfig","buildWebpack","successCb","next","success","failureCb","toJSON","karmaServer","Server","exitCode","complete","karmaStart","start","karmaServerWithStop","stop","defaultIfEmpty","default","createBuilder"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.execute = void 0;\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst architect_1 = require(\"@angular-devkit/architect\");\nconst core_1 = require(\"@angular-devkit/core\");\nconst path_1 = require(\"path\");\nconst rxjs_1 = require(\"rxjs\");\nconst operators_1 = require(\"rxjs/operators\");\nconst version_1 = require(\"../utils/version\");\nconst webpack_browser_config_1 = require(\"../utils/webpack-browser-config\");\nconst configs_1 = require(\"../webpack/configs\");\nconst single_test_transform_1 = require(\"../webpack/plugins/single-test-transform\");\nconst find_tests_1 = require(\"./find-tests\");\nasync function initialize(options, context, webpackConfigurationTransformer) {\n    const { config } = await webpack_browser_config_1.generateBrowserWebpackConfigFromContext(\n    // only two properties are missing:\n    // * `outputPath` which is fixed for tests\n    // * `budgets` which might be incorrect due to extra dev libs\n    { ...options, outputPath: '', budgets: undefined }, context, wco => [\n        configs_1.getCommonConfig(wco),\n        configs_1.getStylesConfig(wco),\n        configs_1.getNonAotConfig(wco),\n        configs_1.getTestConfig(wco),\n        configs_1.getWorkerConfig(wco),\n    ]);\n    const karma = await Promise.resolve().then(() => require('karma'));\n    return [\n        karma,\n        webpackConfigurationTransformer ? await webpackConfigurationTransformer(config) : config,\n    ];\n}\nfunction execute(options, context, transforms = {}) {\n    // Check Angular version.\n    version_1.assertCompatibleAngularVersion(context.workspaceRoot, context.logger);\n    return rxjs_1.from(initialize(options, context, transforms.webpackConfiguration)).pipe(operators_1.switchMap(([karma, webpackConfig]) => new rxjs_1.Observable(subscriber => {\n        var _a;\n        const karmaOptions = {};\n        if (options.watch !== undefined) {\n            karmaOptions.singleRun = !options.watch;\n        }\n        // Convert browsers from a string to an array\n        if (options.browsers) {\n            karmaOptions.browsers = options.browsers.split(',');\n        }\n        if (options.reporters) {\n            // Split along commas to make it more natural, and remove empty strings.\n            const reporters = options.reporters\n                .reduce((acc, curr) => acc.concat(curr.split(',')), [])\n                .filter(x => !!x);\n            if (reporters.length > 0) {\n                karmaOptions.reporters = reporters;\n            }\n        }\n        // prepend special webpack loader that will transform test.ts\n        if (options.include && options.include.length > 0) {\n            const mainFilePath = core_1.getSystemPath(core_1.join(core_1.normalize(context.workspaceRoot), options.main));\n            const files = find_tests_1.findTests(options.include, path_1.dirname(mainFilePath), context.workspaceRoot);\n            // early exit, no reason to start karma\n            if (!files.length) {\n                subscriber.error(`Specified patterns: \"${options.include.join(', ')}\" did not match any spec files`);\n                return;\n            }\n            // Get the rules and ensure the Webpack configuration is setup properly\n            const rules = ((_a = webpackConfig.module) === null || _a === void 0 ? void 0 : _a.rules) || [];\n            if (!webpackConfig.module) {\n                webpackConfig.module = { rules };\n            }\n            else if (!webpackConfig.module.rules) {\n                webpackConfig.module.rules = rules;\n            }\n            rules.unshift({\n                test: mainFilePath,\n                use: {\n                    // cannot be a simple path as it differs between environments\n                    loader: single_test_transform_1.SingleTestTransformLoader,\n                    options: {\n                        files,\n                        logger: context.logger,\n                    },\n                },\n            });\n        }\n        // Assign additional karmaConfig options to the local ngapp config\n        karmaOptions.configFile = path_1.resolve(context.workspaceRoot, options.karmaConfig);\n        karmaOptions.buildWebpack = {\n            options,\n            webpackConfig,\n            // Pass onto Karma to emit BuildEvents.\n            successCb: () => subscriber.next({ success: true }),\n            failureCb: () => subscriber.next({ success: false }),\n            // Workaround for https://github.com/karma-runner/karma/issues/3154\n            // When this workaround is removed, user projects need to be updated to use a Karma\n            // version that has a fix for this issue.\n            toJSON: () => { },\n            logger: context.logger,\n        };\n        // Complete the observable once the Karma server returns.\n        const karmaServer = new karma.Server(transforms.karmaOptions ? transforms.karmaOptions(karmaOptions) : karmaOptions, (exitCode) => {\n            subscriber.next({ success: exitCode === 0 });\n            subscriber.complete();\n        });\n        // karma typings incorrectly define start's return value as void\n        // tslint:disable-next-line:no-use-of-empty-return-value\n        const karmaStart = karmaServer.start();\n        // Cleanup, signal Karma to exit.\n        return () => {\n            // Karma only has the `stop` method start with 3.1.1, so we must defensively check.\n            const karmaServerWithStop = karmaServer;\n            if (typeof karmaServerWithStop.stop === 'function') {\n                return karmaStart.then(() => karmaServerWithStop.stop());\n            }\n        };\n    })), operators_1.defaultIfEmpty({ success: false }));\n}\nexports.execute = execute;\nexports.default = architect_1.createBuilder(execute);\n"]},"metadata":{},"sourceType":"script"}