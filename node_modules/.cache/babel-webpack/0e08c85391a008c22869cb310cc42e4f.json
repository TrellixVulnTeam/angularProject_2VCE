{"ast":null,"code":"/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n(function (factory) {\n  if (typeof module === \"object\" && typeof module.exports === \"object\") {\n    var v = factory(require, exports);\n    if (v !== undefined) module.exports = v;\n  } else if (typeof define === \"function\" && define.amd) {\n    define(\"@angular/compiler-cli/src/perform_compile\", [\"require\", \"exports\", \"tslib\", \"@angular/compiler\", \"typescript\", \"@angular/compiler-cli/src/ngtsc/file_system\", \"@angular/compiler-cli/src/ngtsc/diagnostics\", \"@angular/compiler-cli/src/transformers/api\", \"@angular/compiler-cli/src/transformers/entry_points\", \"@angular/compiler-cli/src/transformers/util\"], factory);\n  }\n})(function (require, exports) {\n  \"use strict\";\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.defaultGatherDiagnostics = exports.performCompilation = exports.exitCodeFromResult = exports.readConfiguration = exports.calcProjectFileAndBasePath = exports.formatDiagnostics = exports.formatDiagnostic = exports.flattenDiagnosticMessageChain = exports.formatDiagnosticPosition = exports.filterErrorsAndWarnings = void 0;\n\n  var tslib_1 = require(\"tslib\");\n\n  var compiler_1 = require(\"@angular/compiler\");\n\n  var ts = require(\"typescript\");\n\n  var file_system_1 = require(\"@angular/compiler-cli/src/ngtsc/file_system\");\n\n  var diagnostics_1 = require(\"@angular/compiler-cli/src/ngtsc/diagnostics\");\n\n  var api = require(\"@angular/compiler-cli/src/transformers/api\");\n\n  var ng = require(\"@angular/compiler-cli/src/transformers/entry_points\");\n\n  var util_1 = require(\"@angular/compiler-cli/src/transformers/util\");\n\n  function filterErrorsAndWarnings(diagnostics) {\n    return diagnostics.filter(function (d) {\n      return d.category !== ts.DiagnosticCategory.Message;\n    });\n  }\n\n  exports.filterErrorsAndWarnings = filterErrorsAndWarnings;\n  var defaultFormatHost = {\n    getCurrentDirectory: function getCurrentDirectory() {\n      return ts.sys.getCurrentDirectory();\n    },\n    getCanonicalFileName: function getCanonicalFileName(fileName) {\n      return fileName;\n    },\n    getNewLine: function getNewLine() {\n      return ts.sys.newLine;\n    }\n  };\n\n  function displayFileName(fileName, host) {\n    return file_system_1.relative(file_system_1.resolve(host.getCurrentDirectory()), file_system_1.resolve(host.getCanonicalFileName(fileName)));\n  }\n\n  function formatDiagnosticPosition(position, host) {\n    if (host === void 0) {\n      host = defaultFormatHost;\n    }\n\n    return displayFileName(position.fileName, host) + \"(\" + (position.line + 1) + \",\" + (position.column + 1) + \")\";\n  }\n\n  exports.formatDiagnosticPosition = formatDiagnosticPosition;\n\n  function flattenDiagnosticMessageChain(chain, host, indent) {\n    var e_1, _a;\n\n    if (host === void 0) {\n      host = defaultFormatHost;\n    }\n\n    if (indent === void 0) {\n      indent = 0;\n    }\n\n    var newLine = host.getNewLine();\n    var result = '';\n\n    if (indent) {\n      result += newLine;\n\n      for (var i = 0; i < indent; i++) {\n        result += '  ';\n      }\n    }\n\n    result += chain.messageText;\n    var position = chain.position; // add position if available, and we are not at the depest frame\n\n    if (position && indent !== 0) {\n      result += \" at \" + formatDiagnosticPosition(position, host);\n    }\n\n    indent++;\n\n    if (chain.next) {\n      try {\n        for (var _b = tslib_1.__values(chain.next), _c = _b.next(); !_c.done; _c = _b.next()) {\n          var kid = _c.value;\n          result += flattenDiagnosticMessageChain(kid, host, indent);\n        }\n      } catch (e_1_1) {\n        e_1 = {\n          error: e_1_1\n        };\n      } finally {\n        try {\n          if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n        } finally {\n          if (e_1) throw e_1.error;\n        }\n      }\n    }\n\n    return result;\n  }\n\n  exports.flattenDiagnosticMessageChain = flattenDiagnosticMessageChain;\n\n  function formatDiagnostic(diagnostic, host) {\n    if (host === void 0) {\n      host = defaultFormatHost;\n    }\n\n    var result = '';\n    var newLine = host.getNewLine();\n    var span = diagnostic.span;\n\n    if (span) {\n      result += formatDiagnosticPosition({\n        fileName: span.start.file.url,\n        line: span.start.line,\n        column: span.start.col\n      }, host) + \": \";\n    } else if (diagnostic.position) {\n      result += formatDiagnosticPosition(diagnostic.position, host) + \": \";\n    }\n\n    if (diagnostic.span && diagnostic.span.details) {\n      result += diagnostic.span.details + \", \" + diagnostic.messageText + newLine;\n    } else if (diagnostic.chain) {\n      result += flattenDiagnosticMessageChain(diagnostic.chain, host) + \".\" + newLine;\n    } else {\n      result += \"\" + diagnostic.messageText + newLine;\n    }\n\n    return result;\n  }\n\n  exports.formatDiagnostic = formatDiagnostic;\n\n  function formatDiagnostics(diags, host) {\n    if (host === void 0) {\n      host = defaultFormatHost;\n    }\n\n    if (diags && diags.length) {\n      return diags.map(function (diagnostic) {\n        if (api.isTsDiagnostic(diagnostic)) {\n          return diagnostics_1.replaceTsWithNgInErrors(ts.formatDiagnosticsWithColorAndContext([diagnostic], host));\n        } else {\n          return formatDiagnostic(diagnostic, host);\n        }\n      }).join('');\n    } else {\n      return '';\n    }\n  }\n\n  exports.formatDiagnostics = formatDiagnostics;\n\n  function calcProjectFileAndBasePath(project, host) {\n    if (host === void 0) {\n      host = file_system_1.getFileSystem();\n    }\n\n    var absProject = host.resolve(project);\n    var projectIsDir = host.lstat(absProject).isDirectory();\n    var projectFile = projectIsDir ? host.join(absProject, 'tsconfig.json') : absProject;\n    var projectDir = projectIsDir ? absProject : host.dirname(absProject);\n    var basePath = host.resolve(projectDir);\n    return {\n      projectFile: projectFile,\n      basePath: basePath\n    };\n  }\n\n  exports.calcProjectFileAndBasePath = calcProjectFileAndBasePath;\n\n  function readConfiguration(project, existingOptions, host) {\n    var _a;\n\n    if (host === void 0) {\n      host = file_system_1.getFileSystem();\n    }\n\n    try {\n      var fs_1 = file_system_1.getFileSystem();\n\n      var readConfigFile_1 = function readConfigFile_1(configFile) {\n        return ts.readConfigFile(configFile, function (file) {\n          return host.readFile(host.resolve(file));\n        });\n      };\n\n      var readAngularCompilerOptions_1 = function readAngularCompilerOptions_1(configFile, parentOptions) {\n        if (parentOptions === void 0) {\n          parentOptions = {};\n        }\n\n        var _a = readConfigFile_1(configFile),\n            config = _a.config,\n            error = _a.error;\n\n        if (error) {\n          // Errors are handled later on by 'parseJsonConfigFileContent'\n          return parentOptions;\n        } // we are only interested into merging 'angularCompilerOptions' as\n        // other options like 'compilerOptions' are merged by TS\n\n\n        var existingNgCompilerOptions = tslib_1.__assign(tslib_1.__assign({}, config.angularCompilerOptions), parentOptions);\n\n        if (config.extends && typeof config.extends === 'string') {\n          var extendedConfigPath = getExtendedConfigPath(configFile, config.extends, host, fs_1);\n\n          if (extendedConfigPath !== null) {\n            // Call readAngularCompilerOptions recursively to merge NG Compiler options\n            return readAngularCompilerOptions_1(extendedConfigPath, existingNgCompilerOptions);\n          }\n        }\n\n        return existingNgCompilerOptions;\n      };\n\n      var _b = calcProjectFileAndBasePath(project, host),\n          projectFile = _b.projectFile,\n          basePath = _b.basePath;\n\n      var configFileName = host.resolve(host.pwd(), projectFile);\n\n      var _c = readConfigFile_1(projectFile),\n          config = _c.config,\n          error = _c.error;\n\n      if (error) {\n        return {\n          project: project,\n          errors: [error],\n          rootNames: [],\n          options: {},\n          emitFlags: api.EmitFlags.Default\n        };\n      }\n\n      var existingCompilerOptions = tslib_1.__assign(tslib_1.__assign({\n        genDir: basePath,\n        basePath: basePath\n      }, readAngularCompilerOptions_1(configFileName)), existingOptions);\n\n      var parseConfigHost = createParseConfigHost(host, fs_1);\n\n      var _d = ts.parseJsonConfigFileContent(config, parseConfigHost, basePath, existingCompilerOptions, configFileName),\n          options = _d.options,\n          errors = _d.errors,\n          rootNames = _d.fileNames,\n          projectReferences = _d.projectReferences; // Coerce to boolean as `enableIvy` can be `ngtsc|true|false|undefined` here.\n\n\n      options.enableIvy = !!((_a = options.enableIvy) !== null && _a !== void 0 ? _a : true);\n      var emitFlags = api.EmitFlags.Default;\n\n      if (!(options.skipMetadataEmit || options.flatModuleOutFile)) {\n        emitFlags |= api.EmitFlags.Metadata;\n      }\n\n      if (options.skipTemplateCodegen) {\n        emitFlags = emitFlags & ~api.EmitFlags.Codegen;\n      }\n\n      return {\n        project: projectFile,\n        rootNames: rootNames,\n        projectReferences: projectReferences,\n        options: options,\n        errors: errors,\n        emitFlags: emitFlags\n      };\n    } catch (e) {\n      var errors = [{\n        category: ts.DiagnosticCategory.Error,\n        messageText: e.stack,\n        file: undefined,\n        start: undefined,\n        length: undefined,\n        source: 'angular',\n        code: api.UNKNOWN_ERROR_CODE\n      }];\n      return {\n        project: '',\n        errors: errors,\n        rootNames: [],\n        options: {},\n        emitFlags: api.EmitFlags.Default\n      };\n    }\n  }\n\n  exports.readConfiguration = readConfiguration;\n\n  function createParseConfigHost(host, fs) {\n    if (fs === void 0) {\n      fs = file_system_1.getFileSystem();\n    }\n\n    return {\n      fileExists: host.exists.bind(host),\n      readDirectory: ts.sys.readDirectory,\n      readFile: host.readFile.bind(host),\n      useCaseSensitiveFileNames: fs.isCaseSensitive()\n    };\n  }\n\n  function getExtendedConfigPath(configFile, extendsValue, host, fs) {\n    var result = getExtendedConfigPathWorker(configFile, extendsValue, host, fs);\n\n    if (result !== null) {\n      return result;\n    } // Try to resolve the paths with a json extension append a json extension to the file in case if\n    // it is missing and the resolution failed. This is to replicate TypeScript behaviour, see:\n    // https://github.com/microsoft/TypeScript/blob/294a5a7d784a5a95a8048ee990400979a6bc3a1c/src/compiler/commandLineParser.ts#L2806\n\n\n    return getExtendedConfigPathWorker(configFile, extendsValue + \".json\", host, fs);\n  }\n\n  function getExtendedConfigPathWorker(configFile, extendsValue, host, fs) {\n    if (extendsValue.startsWith('.') || fs.isRooted(extendsValue)) {\n      var extendedConfigPath = host.resolve(host.dirname(configFile), extendsValue);\n\n      if (host.exists(extendedConfigPath)) {\n        return extendedConfigPath;\n      }\n    } else {\n      var parseConfigHost = createParseConfigHost(host, fs); // Path isn't a rooted or relative path, resolve like a module.\n\n      var resolvedModule = ts.nodeModuleNameResolver(extendsValue, configFile, {\n        moduleResolution: ts.ModuleResolutionKind.NodeJs,\n        resolveJsonModule: true\n      }, parseConfigHost).resolvedModule;\n\n      if (resolvedModule) {\n        return file_system_1.absoluteFrom(resolvedModule.resolvedFileName);\n      }\n    }\n\n    return null;\n  }\n\n  function exitCodeFromResult(diags) {\n    if (!diags || filterErrorsAndWarnings(diags).length === 0) {\n      // If we have a result and didn't get any errors, we succeeded.\n      return 0;\n    } // Return 2 if any of the errors were unknown.\n\n\n    return diags.some(function (d) {\n      return d.source === 'angular' && d.code === api.UNKNOWN_ERROR_CODE;\n    }) ? 2 : 1;\n  }\n\n  exports.exitCodeFromResult = exitCodeFromResult;\n\n  function performCompilation(_a) {\n    var rootNames = _a.rootNames,\n        options = _a.options,\n        host = _a.host,\n        oldProgram = _a.oldProgram,\n        emitCallback = _a.emitCallback,\n        mergeEmitResultsCallback = _a.mergeEmitResultsCallback,\n        _b = _a.gatherDiagnostics,\n        gatherDiagnostics = _b === void 0 ? defaultGatherDiagnostics : _b,\n        customTransformers = _a.customTransformers,\n        _c = _a.emitFlags,\n        emitFlags = _c === void 0 ? api.EmitFlags.Default : _c,\n        _d = _a.modifiedResourceFiles,\n        modifiedResourceFiles = _d === void 0 ? null : _d;\n    var program;\n    var emitResult;\n    var allDiagnostics = [];\n\n    try {\n      if (!host) {\n        host = ng.createCompilerHost({\n          options: options\n        });\n      }\n\n      if (modifiedResourceFiles) {\n        host.getModifiedResourceFiles = function () {\n          return modifiedResourceFiles;\n        };\n      }\n\n      program = ng.createProgram({\n        rootNames: rootNames,\n        host: host,\n        options: options,\n        oldProgram: oldProgram\n      });\n      var beforeDiags = Date.now();\n      allDiagnostics.push.apply(allDiagnostics, tslib_1.__spread(gatherDiagnostics(program)));\n\n      if (options.diagnostics) {\n        var afterDiags = Date.now();\n        allDiagnostics.push(util_1.createMessageDiagnostic(\"Time for diagnostics: \" + (afterDiags - beforeDiags) + \"ms.\"));\n      }\n\n      if (!hasErrors(allDiagnostics)) {\n        emitResult = program.emit({\n          emitCallback: emitCallback,\n          mergeEmitResultsCallback: mergeEmitResultsCallback,\n          customTransformers: customTransformers,\n          emitFlags: emitFlags\n        });\n        allDiagnostics.push.apply(allDiagnostics, tslib_1.__spread(emitResult.diagnostics));\n        return {\n          diagnostics: allDiagnostics,\n          program: program,\n          emitResult: emitResult\n        };\n      }\n\n      return {\n        diagnostics: allDiagnostics,\n        program: program\n      };\n    } catch (e) {\n      var errMsg = void 0;\n      var code = void 0;\n\n      if (compiler_1.isSyntaxError(e)) {\n        // don't report the stack for syntax errors as they are well known errors.\n        errMsg = e.message;\n        code = api.DEFAULT_ERROR_CODE;\n      } else {\n        errMsg = e.stack; // It is not a syntax error we might have a program with unknown state, discard it.\n\n        program = undefined;\n        code = api.UNKNOWN_ERROR_CODE;\n      }\n\n      allDiagnostics.push({\n        category: ts.DiagnosticCategory.Error,\n        messageText: errMsg,\n        code: code,\n        source: api.SOURCE\n      });\n      return {\n        diagnostics: allDiagnostics,\n        program: program\n      };\n    }\n  }\n\n  exports.performCompilation = performCompilation;\n\n  function defaultGatherDiagnostics(program) {\n    var allDiagnostics = [];\n\n    function checkDiagnostics(diags) {\n      if (diags) {\n        allDiagnostics.push.apply(allDiagnostics, tslib_1.__spread(diags));\n        return !hasErrors(diags);\n      }\n\n      return true;\n    }\n\n    var checkOtherDiagnostics = true; // Check parameter diagnostics\n\n    checkOtherDiagnostics = checkOtherDiagnostics && checkDiagnostics(tslib_1.__spread(program.getTsOptionDiagnostics(), program.getNgOptionDiagnostics())); // Check syntactic diagnostics\n\n    checkOtherDiagnostics = checkOtherDiagnostics && checkDiagnostics(program.getTsSyntacticDiagnostics()); // Check TypeScript semantic and Angular structure diagnostics\n\n    checkOtherDiagnostics = checkOtherDiagnostics && checkDiagnostics(tslib_1.__spread(program.getTsSemanticDiagnostics(), program.getNgStructuralDiagnostics())); // Check Angular semantic diagnostics\n\n    checkOtherDiagnostics = checkOtherDiagnostics && checkDiagnostics(program.getNgSemanticDiagnostics());\n    return allDiagnostics;\n  }\n\n  exports.defaultGatherDiagnostics = defaultGatherDiagnostics;\n\n  function hasErrors(diags) {\n    return diags.some(function (d) {\n      return d.category === ts.DiagnosticCategory.Error;\n    });\n  }\n});","map":{"version":3,"sources":["../../../../../../packages/compiler-cli/src/perform_compile.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {isSyntaxError, Position} from '@angular/compiler';\nimport * as ts from 'typescript';\n\nimport {absoluteFrom, AbsoluteFsPath, FileSystem, getFileSystem, ReadonlyFileSystem, relative, resolve} from '../src/ngtsc/file_system';\nimport {NgCompilerOptions} from './ngtsc/core/api';\n\nimport {replaceTsWithNgInErrors} from './ngtsc/diagnostics';\nimport * as api from './transformers/api';\nimport * as ng from './transformers/entry_points';\nimport {createMessageDiagnostic} from './transformers/util';\n\nexport type Diagnostics = ReadonlyArray<ts.Diagnostic|api.Diagnostic>;\n\nexport function filterErrorsAndWarnings(diagnostics: Diagnostics): Diagnostics {\n  return diagnostics.filter(d => d.category !== ts.DiagnosticCategory.Message);\n}\n\nconst defaultFormatHost: ts.FormatDiagnosticsHost = {\n  getCurrentDirectory: () => ts.sys.getCurrentDirectory(),\n  getCanonicalFileName: fileName => fileName,\n  getNewLine: () => ts.sys.newLine\n};\n\nfunction displayFileName(fileName: string, host: ts.FormatDiagnosticsHost): string {\n  return relative(\n      resolve(host.getCurrentDirectory()), resolve(host.getCanonicalFileName(fileName)));\n}\n\nexport function formatDiagnosticPosition(\n    position: Position, host: ts.FormatDiagnosticsHost = defaultFormatHost): string {\n  return `${displayFileName(position.fileName, host)}(${position.line + 1},${position.column + 1})`;\n}\n\nexport function flattenDiagnosticMessageChain(\n    chain: api.DiagnosticMessageChain, host: ts.FormatDiagnosticsHost = defaultFormatHost,\n    indent = 0): string {\n  const newLine = host.getNewLine();\n  let result = '';\n  if (indent) {\n    result += newLine;\n\n    for (let i = 0; i < indent; i++) {\n      result += '  ';\n    }\n  }\n  result += chain.messageText;\n\n  const position = chain.position;\n  // add position if available, and we are not at the depest frame\n  if (position && indent !== 0) {\n    result += ` at ${formatDiagnosticPosition(position, host)}`;\n  }\n\n  indent++;\n  if (chain.next) {\n    for (const kid of chain.next) {\n      result += flattenDiagnosticMessageChain(kid, host, indent);\n    }\n  }\n  return result;\n}\n\nexport function formatDiagnostic(\n    diagnostic: api.Diagnostic, host: ts.FormatDiagnosticsHost = defaultFormatHost) {\n  let result = '';\n  const newLine = host.getNewLine();\n  const span = diagnostic.span;\n  if (span) {\n    result += `${\n        formatDiagnosticPosition(\n            {fileName: span.start.file.url, line: span.start.line, column: span.start.col},\n            host)}: `;\n  } else if (diagnostic.position) {\n    result += `${formatDiagnosticPosition(diagnostic.position, host)}: `;\n  }\n  if (diagnostic.span && diagnostic.span.details) {\n    result += `${diagnostic.span.details}, ${diagnostic.messageText}${newLine}`;\n  } else if (diagnostic.chain) {\n    result += `${flattenDiagnosticMessageChain(diagnostic.chain, host)}.${newLine}`;\n  } else {\n    result += `${diagnostic.messageText}${newLine}`;\n  }\n  return result;\n}\n\nexport function formatDiagnostics(\n    diags: Diagnostics, host: ts.FormatDiagnosticsHost = defaultFormatHost): string {\n  if (diags && diags.length) {\n    return diags\n        .map(diagnostic => {\n          if (api.isTsDiagnostic(diagnostic)) {\n            return replaceTsWithNgInErrors(\n                ts.formatDiagnosticsWithColorAndContext([diagnostic], host));\n          } else {\n            return formatDiagnostic(diagnostic, host);\n          }\n        })\n        .join('');\n  } else {\n    return '';\n  }\n}\n\n/** Used to read configuration files. */\nexport type ConfigurationHost = Pick<\n    ReadonlyFileSystem, 'readFile'|'exists'|'lstat'|'resolve'|'join'|'dirname'|'extname'|'pwd'>;\n\nexport interface ParsedConfiguration {\n  project: string;\n  options: api.CompilerOptions;\n  rootNames: string[];\n  projectReferences?: readonly ts.ProjectReference[]|undefined;\n  emitFlags: api.EmitFlags;\n  errors: ts.Diagnostic[];\n}\n\nexport function calcProjectFileAndBasePath(\n    project: string, host: ConfigurationHost = getFileSystem()):\n    {projectFile: AbsoluteFsPath, basePath: AbsoluteFsPath} {\n  const absProject = host.resolve(project);\n  const projectIsDir = host.lstat(absProject).isDirectory();\n  const projectFile = projectIsDir ? host.join(absProject, 'tsconfig.json') : absProject;\n  const projectDir = projectIsDir ? absProject : host.dirname(absProject);\n  const basePath = host.resolve(projectDir);\n  return {projectFile, basePath};\n}\n\nexport function readConfiguration(\n    project: string, existingOptions?: api.CompilerOptions,\n    host: ConfigurationHost = getFileSystem()): ParsedConfiguration {\n  try {\n    const fs = getFileSystem();\n\n    const readConfigFile = (configFile: string) =>\n        ts.readConfigFile(configFile, file => host.readFile(host.resolve(file)));\n    const readAngularCompilerOptions =\n        (configFile: string, parentOptions: NgCompilerOptions = {}): NgCompilerOptions => {\n          const {config, error} = readConfigFile(configFile);\n\n          if (error) {\n            // Errors are handled later on by 'parseJsonConfigFileContent'\n            return parentOptions;\n          }\n\n          // we are only interested into merging 'angularCompilerOptions' as\n          // other options like 'compilerOptions' are merged by TS\n          const existingNgCompilerOptions = {...config.angularCompilerOptions, ...parentOptions};\n\n          if (config.extends && typeof config.extends === 'string') {\n            const extendedConfigPath = getExtendedConfigPath(\n                configFile, config.extends, host, fs,\n            );\n\n            if (extendedConfigPath !== null) {\n              // Call readAngularCompilerOptions recursively to merge NG Compiler options\n              return readAngularCompilerOptions(extendedConfigPath, existingNgCompilerOptions);\n            }\n          }\n\n          return existingNgCompilerOptions;\n        };\n\n    const {projectFile, basePath} = calcProjectFileAndBasePath(project, host);\n    const configFileName = host.resolve(host.pwd(), projectFile);\n    const {config, error} = readConfigFile(projectFile);\n    if (error) {\n      return {\n        project,\n        errors: [error],\n        rootNames: [],\n        options: {},\n        emitFlags: api.EmitFlags.Default\n      };\n    }\n    const existingCompilerOptions: api.CompilerOptions = {\n      genDir: basePath,\n      basePath,\n      ...readAngularCompilerOptions(configFileName),\n      ...existingOptions,\n    };\n\n    const parseConfigHost = createParseConfigHost(host, fs);\n    const {options, errors, fileNames: rootNames, projectReferences} =\n        ts.parseJsonConfigFileContent(\n            config, parseConfigHost, basePath, existingCompilerOptions, configFileName);\n\n    // Coerce to boolean as `enableIvy` can be `ngtsc|true|false|undefined` here.\n    options.enableIvy = !!(options.enableIvy ?? true);\n\n    let emitFlags = api.EmitFlags.Default;\n    if (!(options.skipMetadataEmit || options.flatModuleOutFile)) {\n      emitFlags |= api.EmitFlags.Metadata;\n    }\n    if (options.skipTemplateCodegen) {\n      emitFlags = emitFlags & ~api.EmitFlags.Codegen;\n    }\n    return {project: projectFile, rootNames, projectReferences, options, errors, emitFlags};\n  } catch (e) {\n    const errors: ts.Diagnostic[] = [{\n      category: ts.DiagnosticCategory.Error,\n      messageText: e.stack,\n      file: undefined,\n      start: undefined,\n      length: undefined,\n      source: 'angular',\n      code: api.UNKNOWN_ERROR_CODE,\n    }];\n    return {project: '', errors, rootNames: [], options: {}, emitFlags: api.EmitFlags.Default};\n  }\n}\n\nfunction createParseConfigHost(host: ConfigurationHost, fs = getFileSystem()): ts.ParseConfigHost {\n  return {\n    fileExists: host.exists.bind(host),\n    readDirectory: ts.sys.readDirectory,\n    readFile: host.readFile.bind(host),\n    useCaseSensitiveFileNames: fs.isCaseSensitive(),\n  };\n}\n\nfunction getExtendedConfigPath(\n    configFile: string, extendsValue: string, host: ConfigurationHost,\n    fs: FileSystem): AbsoluteFsPath|null {\n  const result = getExtendedConfigPathWorker(configFile, extendsValue, host, fs);\n  if (result !== null) {\n    return result;\n  }\n\n  // Try to resolve the paths with a json extension append a json extension to the file in case if\n  // it is missing and the resolution failed. This is to replicate TypeScript behaviour, see:\n  // https://github.com/microsoft/TypeScript/blob/294a5a7d784a5a95a8048ee990400979a6bc3a1c/src/compiler/commandLineParser.ts#L2806\n  return getExtendedConfigPathWorker(configFile, `${extendsValue}.json`, host, fs);\n}\n\nfunction getExtendedConfigPathWorker(\n    configFile: string, extendsValue: string, host: ConfigurationHost,\n    fs: FileSystem): AbsoluteFsPath|null {\n  if (extendsValue.startsWith('.') || fs.isRooted(extendsValue)) {\n    const extendedConfigPath = host.resolve(host.dirname(configFile), extendsValue);\n    if (host.exists(extendedConfigPath)) {\n      return extendedConfigPath;\n    }\n  } else {\n    const parseConfigHost = createParseConfigHost(host, fs);\n\n    // Path isn't a rooted or relative path, resolve like a module.\n    const {\n      resolvedModule,\n    } =\n        ts.nodeModuleNameResolver(\n            extendsValue, configFile,\n            {moduleResolution: ts.ModuleResolutionKind.NodeJs, resolveJsonModule: true},\n            parseConfigHost);\n    if (resolvedModule) {\n      return absoluteFrom(resolvedModule.resolvedFileName);\n    }\n  }\n\n  return null;\n}\n\nexport interface PerformCompilationResult {\n  diagnostics: Diagnostics;\n  program?: api.Program;\n  emitResult?: ts.EmitResult;\n}\n\nexport function exitCodeFromResult(diags: Diagnostics|undefined): number {\n  if (!diags || filterErrorsAndWarnings(diags).length === 0) {\n    // If we have a result and didn't get any errors, we succeeded.\n    return 0;\n  }\n\n  // Return 2 if any of the errors were unknown.\n  return diags.some(d => d.source === 'angular' && d.code === api.UNKNOWN_ERROR_CODE) ? 2 : 1;\n}\n\nexport function performCompilation({\n  rootNames,\n  options,\n  host,\n  oldProgram,\n  emitCallback,\n  mergeEmitResultsCallback,\n  gatherDiagnostics = defaultGatherDiagnostics,\n  customTransformers,\n  emitFlags = api.EmitFlags.Default,\n  modifiedResourceFiles = null\n}: {\n  rootNames: string[],\n  options: api.CompilerOptions,\n  host?: api.CompilerHost,\n  oldProgram?: api.Program,\n  emitCallback?: api.TsEmitCallback,\n  mergeEmitResultsCallback?: api.TsMergeEmitResultsCallback,\n  gatherDiagnostics?: (program: api.Program) => Diagnostics,\n  customTransformers?: api.CustomTransformers,\n  emitFlags?: api.EmitFlags,\n  modifiedResourceFiles?: Set<string>| null,\n}): PerformCompilationResult {\n  let program: api.Program|undefined;\n  let emitResult: ts.EmitResult|undefined;\n  let allDiagnostics: Array<ts.Diagnostic|api.Diagnostic> = [];\n  try {\n    if (!host) {\n      host = ng.createCompilerHost({options});\n    }\n    if (modifiedResourceFiles) {\n      host.getModifiedResourceFiles = () => modifiedResourceFiles;\n    }\n\n    program = ng.createProgram({rootNames, host, options, oldProgram});\n\n    const beforeDiags = Date.now();\n    allDiagnostics.push(...gatherDiagnostics(program!));\n    if (options.diagnostics) {\n      const afterDiags = Date.now();\n      allDiagnostics.push(\n          createMessageDiagnostic(`Time for diagnostics: ${afterDiags - beforeDiags}ms.`));\n    }\n\n    if (!hasErrors(allDiagnostics)) {\n      emitResult =\n          program!.emit({emitCallback, mergeEmitResultsCallback, customTransformers, emitFlags});\n      allDiagnostics.push(...emitResult.diagnostics);\n      return {diagnostics: allDiagnostics, program, emitResult};\n    }\n    return {diagnostics: allDiagnostics, program};\n  } catch (e) {\n    let errMsg: string;\n    let code: number;\n    if (isSyntaxError(e)) {\n      // don't report the stack for syntax errors as they are well known errors.\n      errMsg = e.message;\n      code = api.DEFAULT_ERROR_CODE;\n    } else {\n      errMsg = e.stack;\n      // It is not a syntax error we might have a program with unknown state, discard it.\n      program = undefined;\n      code = api.UNKNOWN_ERROR_CODE;\n    }\n    allDiagnostics.push(\n        {category: ts.DiagnosticCategory.Error, messageText: errMsg, code, source: api.SOURCE});\n    return {diagnostics: allDiagnostics, program};\n  }\n}\nexport function defaultGatherDiagnostics(program: api.Program): Diagnostics {\n  const allDiagnostics: Array<ts.Diagnostic|api.Diagnostic> = [];\n\n  function checkDiagnostics(diags: Diagnostics|undefined) {\n    if (diags) {\n      allDiagnostics.push(...diags);\n      return !hasErrors(diags);\n    }\n    return true;\n  }\n\n  let checkOtherDiagnostics = true;\n  // Check parameter diagnostics\n  checkOtherDiagnostics = checkOtherDiagnostics &&\n      checkDiagnostics([...program.getTsOptionDiagnostics(), ...program.getNgOptionDiagnostics()]);\n\n  // Check syntactic diagnostics\n  checkOtherDiagnostics =\n      checkOtherDiagnostics && checkDiagnostics(program.getTsSyntacticDiagnostics() as Diagnostics);\n\n  // Check TypeScript semantic and Angular structure diagnostics\n  checkOtherDiagnostics =\n      checkOtherDiagnostics &&\n      checkDiagnostics(\n          [...program.getTsSemanticDiagnostics(), ...program.getNgStructuralDiagnostics()]);\n\n  // Check Angular semantic diagnostics\n  checkOtherDiagnostics =\n      checkOtherDiagnostics && checkDiagnostics(program.getNgSemanticDiagnostics() as Diagnostics);\n\n  return allDiagnostics;\n}\n\nfunction hasErrors(diags: Diagnostics) {\n  return diags.some(d => d.category === ts.DiagnosticCategory.Error);\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}