{"ast":null,"code":"/*\n MIT License http://www.opensource.org/licenses/mit-license.php\n Author Tobias Koppers @sokra\n */\n\"use strict\";\n\nvar _createForOfIteratorHelper = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _classCallCheck = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _require = require(\"webpack-sources\"),\n    ConcatSource = _require.ConcatSource;\n\nvar ModuleFilenameHelpers = require(\"./ModuleFilenameHelpers\");\n\nvar Template = require(\"./Template\");\n\nvar validateOptions = require(\"schema-utils\");\n\nvar schema = require(\"../schemas/plugins/BannerPlugin.json\");\n/** @typedef {import(\"../declarations/plugins/BannerPlugin\").BannerPluginArgument} BannerPluginArgument */\n\n/** @typedef {import(\"../declarations/plugins/BannerPlugin\").BannerPluginOptions} BannerPluginOptions */\n\n\nvar wrapComment = function wrapComment(str) {\n  if (!str.includes(\"\\n\")) {\n    return Template.toComment(str);\n  }\n\n  return \"/*!\\n * \".concat(str.replace(/\\*\\//g, \"* /\").split(\"\\n\").join(\"\\n * \"), \"\\n */\");\n};\n\nvar BannerPlugin = /*#__PURE__*/function () {\n  /**\n   * @param {BannerPluginArgument} options options object\n   */\n  function BannerPlugin(options) {\n    _classCallCheck(this, BannerPlugin);\n\n    if (arguments.length > 1) {\n      throw new Error(\"BannerPlugin only takes one argument (pass an options object)\");\n    }\n\n    validateOptions(schema, options, \"Banner Plugin\");\n\n    if (typeof options === \"string\" || typeof options === \"function\") {\n      options = {\n        banner: options\n      };\n    }\n    /** @type {BannerPluginOptions} */\n\n\n    this.options = options;\n    var bannerOption = options.banner;\n\n    if (typeof bannerOption === \"function\") {\n      var getBanner = bannerOption;\n      this.banner = this.options.raw ? getBanner : function (data) {\n        return wrapComment(getBanner(data));\n      };\n    } else {\n      var banner = this.options.raw ? bannerOption : wrapComment(bannerOption);\n\n      this.banner = function () {\n        return banner;\n      };\n    }\n  }\n\n  _createClass(BannerPlugin, [{\n    key: \"apply\",\n    value: function apply(compiler) {\n      var options = this.options;\n      var banner = this.banner;\n      var matchObject = ModuleFilenameHelpers.matchObject.bind(undefined, options);\n      compiler.hooks.compilation.tap(\"BannerPlugin\", function (compilation) {\n        compilation.hooks.optimizeChunkAssets.tap(\"BannerPlugin\", function (chunks) {\n          var _iterator = _createForOfIteratorHelper(chunks),\n              _step;\n\n          try {\n            for (_iterator.s(); !(_step = _iterator.n()).done;) {\n              var chunk = _step.value;\n\n              if (options.entryOnly && !chunk.canBeInitial()) {\n                continue;\n              }\n\n              var _iterator2 = _createForOfIteratorHelper(chunk.files),\n                  _step2;\n\n              try {\n                var _loop = function _loop() {\n                  var file = _step2.value;\n\n                  if (!matchObject(file)) {\n                    return \"continue\";\n                  }\n\n                  var query = \"\";\n                  var filename = file;\n                  var hash = compilation.hash;\n                  var querySplit = filename.indexOf(\"?\");\n\n                  if (querySplit >= 0) {\n                    query = filename.substr(querySplit);\n                    filename = filename.substr(0, querySplit);\n                  }\n\n                  var lastSlashIndex = filename.lastIndexOf(\"/\");\n                  var basename = lastSlashIndex === -1 ? filename : filename.substr(lastSlashIndex + 1);\n                  var data = {\n                    hash: hash,\n                    chunk: chunk,\n                    filename: filename,\n                    basename: basename,\n                    query: query\n                  };\n                  var comment = compilation.getPath(banner(data), data);\n                  compilation.updateAsset(file, function (old) {\n                    return new ConcatSource(comment, \"\\n\", old);\n                  });\n                };\n\n                for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n                  var _ret = _loop();\n\n                  if (_ret === \"continue\") continue;\n                }\n              } catch (err) {\n                _iterator2.e(err);\n              } finally {\n                _iterator2.f();\n              }\n            }\n          } catch (err) {\n            _iterator.e(err);\n          } finally {\n            _iterator.f();\n          }\n        });\n      });\n    }\n  }]);\n\n  return BannerPlugin;\n}();\n\nmodule.exports = BannerPlugin;","map":{"version":3,"sources":["/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/webpack/lib/BannerPlugin.js"],"names":["require","ConcatSource","ModuleFilenameHelpers","Template","validateOptions","schema","wrapComment","str","includes","toComment","replace","split","join","BannerPlugin","options","arguments","length","Error","banner","bannerOption","getBanner","raw","data","compiler","matchObject","bind","undefined","hooks","compilation","tap","optimizeChunkAssets","chunks","chunk","entryOnly","canBeInitial","files","file","query","filename","hash","querySplit","indexOf","substr","lastSlashIndex","lastIndexOf","basename","comment","getPath","updateAsset","old","module","exports"],"mappings":"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","sourcesContent":["/*\n MIT License http://www.opensource.org/licenses/mit-license.php\n Author Tobias Koppers @sokra\n */\n\n\"use strict\";\n\nconst { ConcatSource } = require(\"webpack-sources\");\nconst ModuleFilenameHelpers = require(\"./ModuleFilenameHelpers\");\nconst Template = require(\"./Template\");\n\nconst validateOptions = require(\"schema-utils\");\nconst schema = require(\"../schemas/plugins/BannerPlugin.json\");\n\n/** @typedef {import(\"../declarations/plugins/BannerPlugin\").BannerPluginArgument} BannerPluginArgument */\n/** @typedef {import(\"../declarations/plugins/BannerPlugin\").BannerPluginOptions} BannerPluginOptions */\n\nconst wrapComment = str => {\n\tif (!str.includes(\"\\n\")) {\n\t\treturn Template.toComment(str);\n\t}\n\treturn `/*!\\n * ${str\n\t\t.replace(/\\*\\//g, \"* /\")\n\t\t.split(\"\\n\")\n\t\t.join(\"\\n * \")}\\n */`;\n};\n\nclass BannerPlugin {\n\t/**\n\t * @param {BannerPluginArgument} options options object\n\t */\n\tconstructor(options) {\n\t\tif (arguments.length > 1) {\n\t\t\tthrow new Error(\n\t\t\t\t\"BannerPlugin only takes one argument (pass an options object)\"\n\t\t\t);\n\t\t}\n\n\t\tvalidateOptions(schema, options, \"Banner Plugin\");\n\n\t\tif (typeof options === \"string\" || typeof options === \"function\") {\n\t\t\toptions = {\n\t\t\t\tbanner: options\n\t\t\t};\n\t\t}\n\n\t\t/** @type {BannerPluginOptions} */\n\t\tthis.options = options;\n\n\t\tconst bannerOption = options.banner;\n\t\tif (typeof bannerOption === \"function\") {\n\t\t\tconst getBanner = bannerOption;\n\t\t\tthis.banner = this.options.raw\n\t\t\t\t? getBanner\n\t\t\t\t: data => wrapComment(getBanner(data));\n\t\t} else {\n\t\t\tconst banner = this.options.raw\n\t\t\t\t? bannerOption\n\t\t\t\t: wrapComment(bannerOption);\n\t\t\tthis.banner = () => banner;\n\t\t}\n\t}\n\n\tapply(compiler) {\n\t\tconst options = this.options;\n\t\tconst banner = this.banner;\n\t\tconst matchObject = ModuleFilenameHelpers.matchObject.bind(\n\t\t\tundefined,\n\t\t\toptions\n\t\t);\n\n\t\tcompiler.hooks.compilation.tap(\"BannerPlugin\", compilation => {\n\t\t\tcompilation.hooks.optimizeChunkAssets.tap(\"BannerPlugin\", chunks => {\n\t\t\t\tfor (const chunk of chunks) {\n\t\t\t\t\tif (options.entryOnly && !chunk.canBeInitial()) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tfor (const file of chunk.files) {\n\t\t\t\t\t\tif (!matchObject(file)) {\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tlet query = \"\";\n\t\t\t\t\t\tlet filename = file;\n\t\t\t\t\t\tconst hash = compilation.hash;\n\t\t\t\t\t\tconst querySplit = filename.indexOf(\"?\");\n\n\t\t\t\t\t\tif (querySplit >= 0) {\n\t\t\t\t\t\t\tquery = filename.substr(querySplit);\n\t\t\t\t\t\t\tfilename = filename.substr(0, querySplit);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst lastSlashIndex = filename.lastIndexOf(\"/\");\n\n\t\t\t\t\t\tconst basename =\n\t\t\t\t\t\t\tlastSlashIndex === -1\n\t\t\t\t\t\t\t\t? filename\n\t\t\t\t\t\t\t\t: filename.substr(lastSlashIndex + 1);\n\n\t\t\t\t\t\tconst data = {\n\t\t\t\t\t\t\thash,\n\t\t\t\t\t\t\tchunk,\n\t\t\t\t\t\t\tfilename,\n\t\t\t\t\t\t\tbasename,\n\t\t\t\t\t\t\tquery\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tconst comment = compilation.getPath(banner(data), data);\n\n\t\t\t\t\t\tcompilation.updateAsset(\n\t\t\t\t\t\t\tfile,\n\t\t\t\t\t\t\told => new ConcatSource(comment, \"\\n\", old)\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}\n}\n\nmodule.exports = BannerPlugin;\n"]},"metadata":{},"sourceType":"script"}