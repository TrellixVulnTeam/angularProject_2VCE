{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nvar _classCallCheck = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/createClass\");\n\nvar HookMap = /*#__PURE__*/function () {\n  function HookMap(factory) {\n    _classCallCheck(this, HookMap);\n\n    this._map = new Map();\n    this._factory = factory;\n    this._interceptors = [];\n  }\n\n  _createClass(HookMap, [{\n    key: \"get\",\n    value: function get(key) {\n      return this._map.get(key);\n    }\n  }, {\n    key: \"for\",\n    value: function _for(key) {\n      var hook = this.get(key);\n\n      if (hook !== undefined) {\n        return hook;\n      }\n\n      var newHook = this._factory(key);\n\n      var interceptors = this._interceptors;\n\n      for (var i = 0; i < interceptors.length; i++) {\n        newHook = interceptors[i].factory(key, newHook);\n      }\n\n      this._map.set(key, newHook);\n\n      return newHook;\n    }\n  }, {\n    key: \"intercept\",\n    value: function intercept(interceptor) {\n      this._interceptors.push(Object.assign({\n        factory: function factory(key, hook) {\n          return hook;\n        }\n      }, interceptor));\n    }\n  }, {\n    key: \"tap\",\n    value: function tap(key, options, fn) {\n      return this.for(key).tap(options, fn);\n    }\n  }, {\n    key: \"tapAsync\",\n    value: function tapAsync(key, options, fn) {\n      return this.for(key).tapAsync(options, fn);\n    }\n  }, {\n    key: \"tapPromise\",\n    value: function tapPromise(key, options, fn) {\n      return this.for(key).tapPromise(options, fn);\n    }\n  }]);\n\n  return HookMap;\n}();\n\nmodule.exports = HookMap;","map":{"version":3,"sources":["/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/tapable/lib/HookMap.js"],"names":["HookMap","factory","_map","Map","_factory","_interceptors","key","get","hook","undefined","newHook","interceptors","i","length","set","interceptor","push","Object","assign","options","fn","for","tap","tapAsync","tapPromise","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;;;;;IAEMA,O;AACL,mBAAYC,OAAZ,EAAqB;AAAA;;AACpB,SAAKC,IAAL,GAAY,IAAIC,GAAJ,EAAZ;AACA,SAAKC,QAAL,GAAgBH,OAAhB;AACA,SAAKI,aAAL,GAAqB,EAArB;AACA;;;;WAED,aAAIC,GAAJ,EAAS;AACR,aAAO,KAAKJ,IAAL,CAAUK,GAAV,CAAcD,GAAd,CAAP;AACA;;;WAED,cAAIA,GAAJ,EAAS;AACR,UAAME,IAAI,GAAG,KAAKD,GAAL,CAASD,GAAT,CAAb;;AACA,UAAIE,IAAI,KAAKC,SAAb,EAAwB;AACvB,eAAOD,IAAP;AACA;;AACD,UAAIE,OAAO,GAAG,KAAKN,QAAL,CAAcE,GAAd,CAAd;;AACA,UAAMK,YAAY,GAAG,KAAKN,aAA1B;;AACA,WAAK,IAAIO,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,YAAY,CAACE,MAAjC,EAAyCD,CAAC,EAA1C,EAA8C;AAC7CF,QAAAA,OAAO,GAAGC,YAAY,CAACC,CAAD,CAAZ,CAAgBX,OAAhB,CAAwBK,GAAxB,EAA6BI,OAA7B,CAAV;AACA;;AACD,WAAKR,IAAL,CAAUY,GAAV,CAAcR,GAAd,EAAmBI,OAAnB;;AACA,aAAOA,OAAP;AACA;;;WAED,mBAAUK,WAAV,EAAuB;AACtB,WAAKV,aAAL,CAAmBW,IAAnB,CACCC,MAAM,CAACC,MAAP,CACC;AACCjB,QAAAA,OAAO,EAAE,iBAACK,GAAD,EAAME,IAAN;AAAA,iBAAeA,IAAf;AAAA;AADV,OADD,EAICO,WAJD,CADD;AAQA;;;WAED,aAAIT,GAAJ,EAASa,OAAT,EAAkBC,EAAlB,EAAsB;AACrB,aAAO,KAAKC,GAAL,CAASf,GAAT,EAAcgB,GAAd,CAAkBH,OAAlB,EAA2BC,EAA3B,CAAP;AACA;;;WAED,kBAASd,GAAT,EAAca,OAAd,EAAuBC,EAAvB,EAA2B;AAC1B,aAAO,KAAKC,GAAL,CAASf,GAAT,EAAciB,QAAd,CAAuBJ,OAAvB,EAAgCC,EAAhC,CAAP;AACA;;;WAED,oBAAWd,GAAX,EAAgBa,OAAhB,EAAyBC,EAAzB,EAA6B;AAC5B,aAAO,KAAKC,GAAL,CAASf,GAAT,EAAckB,UAAd,CAAyBL,OAAzB,EAAkCC,EAAlC,CAAP;AACA;;;;;;AAGFK,MAAM,CAACC,OAAP,GAAiB1B,OAAjB","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nclass HookMap {\n\tconstructor(factory) {\n\t\tthis._map = new Map();\n\t\tthis._factory = factory;\n\t\tthis._interceptors = [];\n\t}\n\n\tget(key) {\n\t\treturn this._map.get(key);\n\t}\n\n\tfor(key) {\n\t\tconst hook = this.get(key);\n\t\tif (hook !== undefined) {\n\t\t\treturn hook;\n\t\t}\n\t\tlet newHook = this._factory(key);\n\t\tconst interceptors = this._interceptors;\n\t\tfor (let i = 0; i < interceptors.length; i++) {\n\t\t\tnewHook = interceptors[i].factory(key, newHook);\n\t\t}\n\t\tthis._map.set(key, newHook);\n\t\treturn newHook;\n\t}\n\n\tintercept(interceptor) {\n\t\tthis._interceptors.push(\n\t\t\tObject.assign(\n\t\t\t\t{\n\t\t\t\t\tfactory: (key, hook) => hook\n\t\t\t\t},\n\t\t\t\tinterceptor\n\t\t\t)\n\t\t);\n\t}\n\n\ttap(key, options, fn) {\n\t\treturn this.for(key).tap(options, fn);\n\t}\n\n\ttapAsync(key, options, fn) {\n\t\treturn this.for(key).tapAsync(options, fn);\n\t}\n\n\ttapPromise(key, options, fn) {\n\t\treturn this.for(key).tapPromise(options, fn);\n\t}\n}\n\nmodule.exports = HookMap;\n"]},"metadata":{},"sourceType":"script"}