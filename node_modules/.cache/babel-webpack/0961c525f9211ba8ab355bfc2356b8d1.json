{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nvar _classCallCheck = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _get = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/get\");\n\nvar _getPrototypeOf = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar DependenciesBlock = require(\"./DependenciesBlock\");\n/** @typedef {import(\"./ChunkGroup\")} ChunkGroup */\n\n/** @typedef {import(\"./Module\")} Module */\n\n/** @typedef {import(\"./Dependency\").DependencyLocation} DependencyLocation */\n\n/** @typedef {import(\"./util/createHash\").Hash} Hash */\n\n/** @typedef {TODO} GroupOptions */\n\n\nmodule.exports = /*#__PURE__*/function (_DependenciesBlock) {\n  _inherits(AsyncDependenciesBlock, _DependenciesBlock);\n\n  var _super = _createSuper(AsyncDependenciesBlock);\n\n  /**\n   * @param {GroupOptions} groupOptions options for the group\n   * @param {Module} module the Module object\n   * @param {DependencyLocation=} loc the line of code\n   * @param {TODO=} request the request\n   */\n  function AsyncDependenciesBlock(groupOptions, module, loc, request) {\n    var _this;\n\n    _classCallCheck(this, AsyncDependenciesBlock);\n\n    _this = _super.call(this);\n\n    if (typeof groupOptions === \"string\") {\n      groupOptions = {\n        name: groupOptions\n      };\n    } else if (!groupOptions) {\n      groupOptions = {\n        name: undefined\n      };\n    }\n\n    _this.groupOptions = groupOptions;\n    /** @type {ChunkGroup=} */\n\n    _this.chunkGroup = undefined;\n    _this.module = module;\n    _this.loc = loc;\n    _this.request = request;\n    /** @type {DependenciesBlock} */\n\n    _this.parent = undefined;\n    return _this;\n  }\n  /**\n   * @returns {string} The name of the chunk\n   */\n\n\n  _createClass(AsyncDependenciesBlock, [{\n    key: \"chunkName\",\n    get: function get() {\n      return this.groupOptions.name;\n    }\n    /**\n     * @param {string} value The new chunk name\n     * @returns {void}\n     */\n    ,\n    set: function set(value) {\n      this.groupOptions.name = value;\n    }\n    /**\n     * @returns {never} this throws and should never be called\n     */\n\n  }, {\n    key: \"chunks\",\n    get: function get() {\n      throw new Error(\"Moved to AsyncDependenciesBlock.chunkGroup\");\n    }\n    /**\n     * @param {never} value setter value\n     * @returns {never} this is going to throw therefore we should throw type\n     * assertions by returning never\n     */\n    ,\n    set: function set(value) {\n      throw new Error(\"Moved to AsyncDependenciesBlock.chunkGroup\");\n    }\n    /**\n     * @param {Hash} hash the hash used to track block changes, from \"crypto\" module\n     * @returns {void}\n     */\n\n  }, {\n    key: \"updateHash\",\n    value: function updateHash(hash) {\n      hash.update(JSON.stringify(this.groupOptions));\n      hash.update(this.chunkGroup && this.chunkGroup.chunks.map(function (chunk) {\n        return chunk.id !== null ? chunk.id : \"\";\n      }).join(\",\") || \"\");\n\n      _get(_getPrototypeOf(AsyncDependenciesBlock.prototype), \"updateHash\", this).call(this, hash);\n    }\n    /**\n     * @returns {void}\n     */\n\n  }, {\n    key: \"disconnect\",\n    value: function disconnect() {\n      this.chunkGroup = undefined;\n\n      _get(_getPrototypeOf(AsyncDependenciesBlock.prototype), \"disconnect\", this).call(this);\n    }\n    /**\n     * @returns {void}\n     */\n\n  }, {\n    key: \"unseal\",\n    value: function unseal() {\n      this.chunkGroup = undefined;\n\n      _get(_getPrototypeOf(AsyncDependenciesBlock.prototype), \"unseal\", this).call(this);\n    }\n    /**\n     * @returns {void}\n     */\n\n  }, {\n    key: \"sortItems\",\n    value: function sortItems() {\n      _get(_getPrototypeOf(AsyncDependenciesBlock.prototype), \"sortItems\", this).call(this);\n    }\n  }]);\n\n  return AsyncDependenciesBlock;\n}(DependenciesBlock);","map":{"version":3,"sources":["/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/webpack/lib/AsyncDependenciesBlock.js"],"names":["DependenciesBlock","require","module","exports","groupOptions","loc","request","name","undefined","chunkGroup","parent","value","Error","hash","update","JSON","stringify","chunks","map","chunk","id","join"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;AAEA,IAAMA,iBAAiB,GAAGC,OAAO,CAAC,qBAAD,CAAjC;AAEA;;AACA;;AACA;;AACA;;AACA;;;AAEAC,MAAM,CAACC,OAAP;AAAA;;AAAA;;AACC;AACD;AACA;AACA;AACA;AACA;AACC,kCAAYC,YAAZ,EAA0BF,MAA1B,EAAkCG,GAAlC,EAAuCC,OAAvC,EAAgD;AAAA;;AAAA;;AAC/C;;AACA,QAAI,OAAOF,YAAP,KAAwB,QAA5B,EAAsC;AACrCA,MAAAA,YAAY,GAAG;AAAEG,QAAAA,IAAI,EAAEH;AAAR,OAAf;AACA,KAFD,MAEO,IAAI,CAACA,YAAL,EAAmB;AACzBA,MAAAA,YAAY,GAAG;AAAEG,QAAAA,IAAI,EAAEC;AAAR,OAAf;AACA;;AACD,UAAKJ,YAAL,GAAoBA,YAApB;AACA;;AACA,UAAKK,UAAL,GAAkBD,SAAlB;AACA,UAAKN,MAAL,GAAcA,MAAd;AACA,UAAKG,GAAL,GAAWA,GAAX;AACA,UAAKC,OAAL,GAAeA,OAAf;AACA;;AACA,UAAKI,MAAL,GAAcF,SAAd;AAd+C;AAe/C;AAED;AACD;AACA;;;AA1BA;AAAA;AAAA,SA2BC,eAAgB;AACf,aAAO,KAAKJ,YAAL,CAAkBG,IAAzB;AACA;AAED;AACD;AACA;AACA;AAlCA;AAAA,SAmCC,aAAcI,KAAd,EAAqB;AACpB,WAAKP,YAAL,CAAkBG,IAAlB,GAAyBI,KAAzB;AACA;AAED;AACD;AACA;;AAzCA;AAAA;AAAA,SA0CC,eAAa;AACZ,YAAM,IAAIC,KAAJ,CAAU,4CAAV,CAAN;AACA;AAED;AACD;AACA;AACA;AACA;AAlDA;AAAA,SAmDC,aAAWD,KAAX,EAAkB;AACjB,YAAM,IAAIC,KAAJ,CAAU,4CAAV,CAAN;AACA;AAED;AACD;AACA;AACA;;AA1DA;AAAA;AAAA,WA2DC,oBAAWC,IAAX,EAAiB;AAChBA,MAAAA,IAAI,CAACC,MAAL,CAAYC,IAAI,CAACC,SAAL,CAAe,KAAKZ,YAApB,CAAZ;AACAS,MAAAA,IAAI,CAACC,MAAL,CACE,KAAKL,UAAL,IACA,KAAKA,UAAL,CAAgBQ,MAAhB,CACEC,GADF,CACM,UAAAC,KAAK,EAAI;AACb,eAAOA,KAAK,CAACC,EAAN,KAAa,IAAb,GAAoBD,KAAK,CAACC,EAA1B,GAA+B,EAAtC;AACA,OAHF,EAIEC,IAJF,CAIO,GAJP,CADD,IAMC,EAPF;;AASA,6FAAiBR,IAAjB;AACA;AAED;AACD;AACA;;AA3EA;AAAA;AAAA,WA4EC,sBAAa;AACZ,WAAKJ,UAAL,GAAkBD,SAAlB;;AACA;AACA;AAED;AACD;AACA;;AAnFA;AAAA;AAAA,WAoFC,kBAAS;AACR,WAAKC,UAAL,GAAkBD,SAAlB;;AACA;AACA;AAED;AACD;AACA;;AA3FA;AAAA;AAAA,WA4FC,qBAAY;AACX;AACA;AA9FF;;AAAA;AAAA,EAAsDR,iBAAtD","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst DependenciesBlock = require(\"./DependenciesBlock\");\n\n/** @typedef {import(\"./ChunkGroup\")} ChunkGroup */\n/** @typedef {import(\"./Module\")} Module */\n/** @typedef {import(\"./Dependency\").DependencyLocation} DependencyLocation */\n/** @typedef {import(\"./util/createHash\").Hash} Hash */\n/** @typedef {TODO} GroupOptions */\n\nmodule.exports = class AsyncDependenciesBlock extends DependenciesBlock {\n\t/**\n\t * @param {GroupOptions} groupOptions options for the group\n\t * @param {Module} module the Module object\n\t * @param {DependencyLocation=} loc the line of code\n\t * @param {TODO=} request the request\n\t */\n\tconstructor(groupOptions, module, loc, request) {\n\t\tsuper();\n\t\tif (typeof groupOptions === \"string\") {\n\t\t\tgroupOptions = { name: groupOptions };\n\t\t} else if (!groupOptions) {\n\t\t\tgroupOptions = { name: undefined };\n\t\t}\n\t\tthis.groupOptions = groupOptions;\n\t\t/** @type {ChunkGroup=} */\n\t\tthis.chunkGroup = undefined;\n\t\tthis.module = module;\n\t\tthis.loc = loc;\n\t\tthis.request = request;\n\t\t/** @type {DependenciesBlock} */\n\t\tthis.parent = undefined;\n\t}\n\n\t/**\n\t * @returns {string} The name of the chunk\n\t */\n\tget chunkName() {\n\t\treturn this.groupOptions.name;\n\t}\n\n\t/**\n\t * @param {string} value The new chunk name\n\t * @returns {void}\n\t */\n\tset chunkName(value) {\n\t\tthis.groupOptions.name = value;\n\t}\n\n\t/**\n\t * @returns {never} this throws and should never be called\n\t */\n\tget chunks() {\n\t\tthrow new Error(\"Moved to AsyncDependenciesBlock.chunkGroup\");\n\t}\n\n\t/**\n\t * @param {never} value setter value\n\t * @returns {never} this is going to throw therefore we should throw type\n\t * assertions by returning never\n\t */\n\tset chunks(value) {\n\t\tthrow new Error(\"Moved to AsyncDependenciesBlock.chunkGroup\");\n\t}\n\n\t/**\n\t * @param {Hash} hash the hash used to track block changes, from \"crypto\" module\n\t * @returns {void}\n\t */\n\tupdateHash(hash) {\n\t\thash.update(JSON.stringify(this.groupOptions));\n\t\thash.update(\n\t\t\t(this.chunkGroup &&\n\t\t\t\tthis.chunkGroup.chunks\n\t\t\t\t\t.map(chunk => {\n\t\t\t\t\t\treturn chunk.id !== null ? chunk.id : \"\";\n\t\t\t\t\t})\n\t\t\t\t\t.join(\",\")) ||\n\t\t\t\t\"\"\n\t\t);\n\t\tsuper.updateHash(hash);\n\t}\n\n\t/**\n\t * @returns {void}\n\t */\n\tdisconnect() {\n\t\tthis.chunkGroup = undefined;\n\t\tsuper.disconnect();\n\t}\n\n\t/**\n\t * @returns {void}\n\t */\n\tunseal() {\n\t\tthis.chunkGroup = undefined;\n\t\tsuper.unseal();\n\t}\n\n\t/**\n\t * @returns {void}\n\t */\n\tsortItems() {\n\t\tsuper.sortItems();\n\t}\n};\n"]},"metadata":{},"sourceType":"script"}