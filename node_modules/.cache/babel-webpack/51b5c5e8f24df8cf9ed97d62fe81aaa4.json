{"ast":null,"code":"'use strict';\n/**\n * `input` type prompt\n */\n\nvar _classCallCheck = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar chalk = require('chalk');\n\nvar _require = require('rxjs/operators'),\n    map = _require.map,\n    takeUntil = _require.takeUntil;\n\nvar Base = require('./base');\n\nvar observe = require('../utils/events');\n\nvar InputPrompt = /*#__PURE__*/function (_Base) {\n  _inherits(InputPrompt, _Base);\n\n  var _super = _createSuper(InputPrompt);\n\n  function InputPrompt() {\n    _classCallCheck(this, InputPrompt);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(InputPrompt, [{\n    key: \"_run\",\n    value:\n    /**\n     * Start the Inquiry session\n     * @param  {Function} cb      Callback when prompt is done\n     * @return {this}\n     */\n    function _run(cb) {\n      this.done = cb; // Once user confirm (enter key)\n\n      var events = observe(this.rl);\n      var submit = events.line.pipe(map(this.filterInput.bind(this)));\n      var validation = this.handleSubmitEvents(submit);\n      validation.success.forEach(this.onEnd.bind(this));\n      validation.error.forEach(this.onError.bind(this));\n      events.keypress.pipe(takeUntil(validation.success)).forEach(this.onKeypress.bind(this)); // Init\n\n      this.render();\n      return this;\n    }\n    /**\n     * Render the prompt to screen\n     * @return {InputPrompt} self\n     */\n\n  }, {\n    key: \"render\",\n    value: function render(error) {\n      var bottomContent = '';\n      var appendContent = '';\n      var message = this.getQuestion();\n      var transformer = this.opt.transformer;\n      var isFinal = this.status === 'answered';\n\n      if (isFinal) {\n        appendContent = this.answer;\n      } else {\n        appendContent = this.rl.line;\n      }\n\n      if (transformer) {\n        message += transformer(appendContent, this.answers, {\n          isFinal: isFinal\n        });\n      } else {\n        message += isFinal ? chalk.cyan(appendContent) : appendContent;\n      }\n\n      if (error) {\n        bottomContent = chalk.red('>> ') + error;\n      }\n\n      this.screen.render(message, bottomContent);\n    }\n    /**\n     * When user press `enter` key\n     */\n\n  }, {\n    key: \"filterInput\",\n    value: function filterInput(input) {\n      if (!input) {\n        return this.opt.default == null ? '' : this.opt.default;\n      }\n\n      return input;\n    }\n  }, {\n    key: \"onEnd\",\n    value: function onEnd(state) {\n      this.answer = state.value;\n      this.status = 'answered'; // Re-render prompt\n\n      this.render();\n      this.screen.done();\n      this.done(state.value);\n    }\n  }, {\n    key: \"onError\",\n    value: function onError(_ref) {\n      var _ref$value = _ref.value,\n          value = _ref$value === void 0 ? '' : _ref$value,\n          isValid = _ref.isValid;\n      this.rl.line += value;\n      this.rl.cursor += value.length;\n      this.render(isValid);\n    }\n    /**\n     * When user press a key\n     */\n\n  }, {\n    key: \"onKeypress\",\n    value: function onKeypress() {\n      // If user press a key, just clear the default value\n      if (this.opt.default) {\n        this.opt.default = undefined;\n      }\n\n      this.render();\n    }\n  }]);\n\n  return InputPrompt;\n}(Base);\n\nmodule.exports = InputPrompt;","map":{"version":3,"sources":["/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/inquirer/lib/prompts/input.js"],"names":["chalk","require","map","takeUntil","Base","observe","InputPrompt","cb","done","events","rl","submit","line","pipe","filterInput","bind","validation","handleSubmitEvents","success","forEach","onEnd","error","onError","keypress","onKeypress","render","bottomContent","appendContent","message","getQuestion","transformer","opt","isFinal","status","answer","answers","cyan","red","screen","input","default","state","value","isValid","cursor","length","undefined","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n/**\n * `input` type prompt\n */\n\nvar chalk = require('chalk');\nvar { map, takeUntil } = require('rxjs/operators');\nvar Base = require('./base');\nvar observe = require('../utils/events');\n\nclass InputPrompt extends Base {\n  /**\n   * Start the Inquiry session\n   * @param  {Function} cb      Callback when prompt is done\n   * @return {this}\n   */\n\n  _run(cb) {\n    this.done = cb;\n\n    // Once user confirm (enter key)\n    var events = observe(this.rl);\n    var submit = events.line.pipe(map(this.filterInput.bind(this)));\n\n    var validation = this.handleSubmitEvents(submit);\n    validation.success.forEach(this.onEnd.bind(this));\n    validation.error.forEach(this.onError.bind(this));\n\n    events.keypress\n      .pipe(takeUntil(validation.success))\n      .forEach(this.onKeypress.bind(this));\n\n    // Init\n    this.render();\n\n    return this;\n  }\n\n  /**\n   * Render the prompt to screen\n   * @return {InputPrompt} self\n   */\n\n  render(error) {\n    var bottomContent = '';\n    var appendContent = '';\n    var message = this.getQuestion();\n    var transformer = this.opt.transformer;\n    var isFinal = this.status === 'answered';\n\n    if (isFinal) {\n      appendContent = this.answer;\n    } else {\n      appendContent = this.rl.line;\n    }\n\n    if (transformer) {\n      message += transformer(appendContent, this.answers, { isFinal });\n    } else {\n      message += isFinal ? chalk.cyan(appendContent) : appendContent;\n    }\n\n    if (error) {\n      bottomContent = chalk.red('>> ') + error;\n    }\n\n    this.screen.render(message, bottomContent);\n  }\n\n  /**\n   * When user press `enter` key\n   */\n\n  filterInput(input) {\n    if (!input) {\n      return this.opt.default == null ? '' : this.opt.default;\n    }\n\n    return input;\n  }\n\n  onEnd(state) {\n    this.answer = state.value;\n    this.status = 'answered';\n\n    // Re-render prompt\n    this.render();\n\n    this.screen.done();\n    this.done(state.value);\n  }\n\n  onError({ value = '', isValid }) {\n    this.rl.line += value;\n    this.rl.cursor += value.length;\n    this.render(isValid);\n  }\n\n  /**\n   * When user press a key\n   */\n\n  onKeypress() {\n    // If user press a key, just clear the default value\n    if (this.opt.default) {\n      this.opt.default = undefined;\n    }\n\n    this.render();\n  }\n}\n\nmodule.exports = InputPrompt;\n"]},"metadata":{},"sourceType":"script"}