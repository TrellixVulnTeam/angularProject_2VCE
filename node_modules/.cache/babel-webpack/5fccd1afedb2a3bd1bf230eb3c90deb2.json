{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/regenerator\");\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isBinaryFileSync = exports.isBinaryFile = void 0;\n\nvar fs = require(\"fs\");\n\nvar util_1 = require(\"util\");\n\nvar statAsync = util_1.promisify(fs.stat);\nvar openAsync = util_1.promisify(fs.open);\nvar closeAsync = util_1.promisify(fs.close);\nvar MAX_BYTES = 512;\n\nfunction isBinaryFile(file, size) {\n  return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var stat, fileDescriptor, allocBuffer;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!isString(file)) {\n              _context.next = 12;\n              break;\n            }\n\n            _context.next = 3;\n            return statAsync(file);\n\n          case 3:\n            stat = _context.sent;\n            isStatFile(stat);\n            _context.next = 7;\n            return openAsync(file, 'r');\n\n          case 7:\n            fileDescriptor = _context.sent;\n            allocBuffer = Buffer.alloc(MAX_BYTES); // Read the file with no encoding for raw buffer access.\n            // NB: something is severely wrong with promisify, had to construct my own Promise\n\n            return _context.abrupt(\"return\", new Promise(function (fulfill, reject) {\n              fs.read(fileDescriptor, allocBuffer, 0, MAX_BYTES, 0, function (err, bytesRead, _) {\n                closeAsync(fileDescriptor);\n\n                if (err) {\n                  reject(err);\n                } else {\n                  fulfill(isBinaryCheck(allocBuffer, bytesRead));\n                }\n              });\n            }));\n\n          case 12:\n            if (size === undefined) {\n              size = file.length;\n            }\n\n            return _context.abrupt(\"return\", isBinaryCheck(file, size));\n\n          case 14:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n}\n\nexports.isBinaryFile = isBinaryFile;\n\nfunction isBinaryFileSync(file, size) {\n  if (isString(file)) {\n    var stat = fs.statSync(file);\n    isStatFile(stat);\n    var fileDescriptor = fs.openSync(file, 'r');\n    var allocBuffer = Buffer.alloc(MAX_BYTES);\n    var bytesRead = fs.readSync(fileDescriptor, allocBuffer, 0, MAX_BYTES, 0);\n    fs.closeSync(fileDescriptor);\n    return isBinaryCheck(allocBuffer, bytesRead);\n  } else {\n    if (size === undefined) {\n      size = file.length;\n    }\n\n    return isBinaryCheck(file, size);\n  }\n}\n\nexports.isBinaryFileSync = isBinaryFileSync;\n\nfunction isBinaryCheck(fileBuffer, bytesRead) {\n  // empty file. no clue what it is.\n  if (bytesRead === 0) {\n    return false;\n  }\n\n  var suspiciousBytes = 0;\n  var totalBytes = Math.min(bytesRead, MAX_BYTES); // UTF-8 BOM\n\n  if (bytesRead >= 3 && fileBuffer[0] === 0xef && fileBuffer[1] === 0xbb && fileBuffer[2] === 0xbf) {\n    return false;\n  } // UTF-32 BOM\n\n\n  if (bytesRead >= 4 && fileBuffer[0] === 0x00 && fileBuffer[1] === 0x00 && fileBuffer[2] === 0xfe && fileBuffer[3] === 0xff) {\n    return false;\n  } // UTF-32 LE BOM\n\n\n  if (bytesRead >= 4 && fileBuffer[0] === 0xff && fileBuffer[1] === 0xfe && fileBuffer[2] === 0x00 && fileBuffer[3] === 0x00) {\n    return false;\n  } // GB BOM\n\n\n  if (bytesRead >= 4 && fileBuffer[0] === 0x84 && fileBuffer[1] === 0x31 && fileBuffer[2] === 0x95 && fileBuffer[3] === 0x33) {\n    return false;\n  }\n\n  if (totalBytes >= 5 && fileBuffer.slice(0, 5).toString() === '%PDF-') {\n    /* PDF. This is binary. */\n    return true;\n  } // UTF-16 BE BOM\n\n\n  if (bytesRead >= 2 && fileBuffer[0] === 0xfe && fileBuffer[1] === 0xff) {\n    return false;\n  } // UTF-16 LE BOM\n\n\n  if (bytesRead >= 2 && fileBuffer[0] === 0xff && fileBuffer[1] === 0xfe) {\n    return false;\n  }\n\n  for (var i = 0; i < totalBytes; i++) {\n    if (fileBuffer[i] === 0) {\n      // NULL byte--it's binary!\n      return true;\n    } else if ((fileBuffer[i] < 7 || fileBuffer[i] > 14) && (fileBuffer[i] < 32 || fileBuffer[i] > 127)) {\n      // UTF-8 detection\n      if (fileBuffer[i] > 193 && fileBuffer[i] < 224 && i + 1 < totalBytes) {\n        i++;\n\n        if (fileBuffer[i] > 127 && fileBuffer[i] < 192) {\n          continue;\n        }\n      } else if (fileBuffer[i] > 223 && fileBuffer[i] < 240 && i + 2 < totalBytes) {\n        i++;\n\n        if (fileBuffer[i] > 127 && fileBuffer[i] < 192 && fileBuffer[i + 1] > 127 && fileBuffer[i + 1] < 192) {\n          i++;\n          continue;\n        }\n      }\n\n      suspiciousBytes++; // Read at least 32 fileBuffer before making a decision\n\n      if (i > 32 && suspiciousBytes * 100 / totalBytes > 10) {\n        return true;\n      }\n    }\n  }\n\n  if (suspiciousBytes * 100 / totalBytes > 10) {\n    return true;\n  }\n\n  return false;\n}\n\nfunction isString(x) {\n  return typeof x === 'string';\n}\n\nfunction isStatFile(stat) {\n  if (!stat.isFile()) {\n    throw new Error(\"Path provided was not a file!\");\n  }\n}","map":{"version":3,"sources":["/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/isbinaryfile/lib/index.js"],"names":["__awaiter","thisArg","_arguments","P","generator","adopt","value","resolve","Promise","reject","fulfilled","step","next","e","rejected","result","done","then","apply","Object","defineProperty","exports","isBinaryFileSync","isBinaryFile","fs","require","util_1","statAsync","promisify","stat","openAsync","open","closeAsync","close","MAX_BYTES","file","size","isString","isStatFile","fileDescriptor","allocBuffer","Buffer","alloc","fulfill","read","err","bytesRead","_","isBinaryCheck","undefined","length","statSync","openSync","readSync","closeSync","fileBuffer","suspiciousBytes","totalBytes","Math","min","slice","toString","i","x","isFile","Error"],"mappings":"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","sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.isBinaryFileSync = exports.isBinaryFile = void 0;\nconst fs = require(\"fs\");\nconst util_1 = require(\"util\");\nconst statAsync = util_1.promisify(fs.stat);\nconst openAsync = util_1.promisify(fs.open);\nconst closeAsync = util_1.promisify(fs.close);\nconst MAX_BYTES = 512;\nfunction isBinaryFile(file, size) {\n    return __awaiter(this, void 0, void 0, function* () {\n        if (isString(file)) {\n            const stat = yield statAsync(file);\n            isStatFile(stat);\n            const fileDescriptor = yield openAsync(file, 'r');\n            const allocBuffer = Buffer.alloc(MAX_BYTES);\n            // Read the file with no encoding for raw buffer access.\n            // NB: something is severely wrong with promisify, had to construct my own Promise\n            return new Promise((fulfill, reject) => {\n                fs.read(fileDescriptor, allocBuffer, 0, MAX_BYTES, 0, (err, bytesRead, _) => {\n                    closeAsync(fileDescriptor);\n                    if (err) {\n                        reject(err);\n                    }\n                    else {\n                        fulfill(isBinaryCheck(allocBuffer, bytesRead));\n                    }\n                });\n            });\n        }\n        else {\n            if (size === undefined) {\n                size = file.length;\n            }\n            return isBinaryCheck(file, size);\n        }\n    });\n}\nexports.isBinaryFile = isBinaryFile;\nfunction isBinaryFileSync(file, size) {\n    if (isString(file)) {\n        const stat = fs.statSync(file);\n        isStatFile(stat);\n        const fileDescriptor = fs.openSync(file, 'r');\n        const allocBuffer = Buffer.alloc(MAX_BYTES);\n        const bytesRead = fs.readSync(fileDescriptor, allocBuffer, 0, MAX_BYTES, 0);\n        fs.closeSync(fileDescriptor);\n        return isBinaryCheck(allocBuffer, bytesRead);\n    }\n    else {\n        if (size === undefined) {\n            size = file.length;\n        }\n        return isBinaryCheck(file, size);\n    }\n}\nexports.isBinaryFileSync = isBinaryFileSync;\nfunction isBinaryCheck(fileBuffer, bytesRead) {\n    // empty file. no clue what it is.\n    if (bytesRead === 0) {\n        return false;\n    }\n    let suspiciousBytes = 0;\n    const totalBytes = Math.min(bytesRead, MAX_BYTES);\n    // UTF-8 BOM\n    if (bytesRead >= 3 && fileBuffer[0] === 0xef && fileBuffer[1] === 0xbb && fileBuffer[2] === 0xbf) {\n        return false;\n    }\n    // UTF-32 BOM\n    if (bytesRead >= 4 &&\n        fileBuffer[0] === 0x00 &&\n        fileBuffer[1] === 0x00 &&\n        fileBuffer[2] === 0xfe &&\n        fileBuffer[3] === 0xff) {\n        return false;\n    }\n    // UTF-32 LE BOM\n    if (bytesRead >= 4 &&\n        fileBuffer[0] === 0xff &&\n        fileBuffer[1] === 0xfe &&\n        fileBuffer[2] === 0x00 &&\n        fileBuffer[3] === 0x00) {\n        return false;\n    }\n    // GB BOM\n    if (bytesRead >= 4 &&\n        fileBuffer[0] === 0x84 &&\n        fileBuffer[1] === 0x31 &&\n        fileBuffer[2] === 0x95 &&\n        fileBuffer[3] === 0x33) {\n        return false;\n    }\n    if (totalBytes >= 5 && fileBuffer.slice(0, 5).toString() === '%PDF-') {\n        /* PDF. This is binary. */\n        return true;\n    }\n    // UTF-16 BE BOM\n    if (bytesRead >= 2 && fileBuffer[0] === 0xfe && fileBuffer[1] === 0xff) {\n        return false;\n    }\n    // UTF-16 LE BOM\n    if (bytesRead >= 2 && fileBuffer[0] === 0xff && fileBuffer[1] === 0xfe) {\n        return false;\n    }\n    for (let i = 0; i < totalBytes; i++) {\n        if (fileBuffer[i] === 0) {\n            // NULL byte--it's binary!\n            return true;\n        }\n        else if ((fileBuffer[i] < 7 || fileBuffer[i] > 14) && (fileBuffer[i] < 32 || fileBuffer[i] > 127)) {\n            // UTF-8 detection\n            if (fileBuffer[i] > 193 && fileBuffer[i] < 224 && i + 1 < totalBytes) {\n                i++;\n                if (fileBuffer[i] > 127 && fileBuffer[i] < 192) {\n                    continue;\n                }\n            }\n            else if (fileBuffer[i] > 223 && fileBuffer[i] < 240 && i + 2 < totalBytes) {\n                i++;\n                if (fileBuffer[i] > 127 && fileBuffer[i] < 192 && fileBuffer[i + 1] > 127 && fileBuffer[i + 1] < 192) {\n                    i++;\n                    continue;\n                }\n            }\n            suspiciousBytes++;\n            // Read at least 32 fileBuffer before making a decision\n            if (i > 32 && (suspiciousBytes * 100) / totalBytes > 10) {\n                return true;\n            }\n        }\n    }\n    if ((suspiciousBytes * 100) / totalBytes > 10) {\n        return true;\n    }\n    return false;\n}\nfunction isString(x) {\n    return typeof x === 'string';\n}\nfunction isStatFile(stat) {\n    if (!stat.isFile()) {\n        throw new Error(`Path provided was not a file!`);\n    }\n}\n"]},"metadata":{},"sourceType":"script"}