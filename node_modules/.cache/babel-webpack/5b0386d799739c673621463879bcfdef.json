{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.exportLazyModuleMap = void 0;\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nvar path = require(\"path\");\n\nvar ts = require(\"typescript\");\n\nvar utils_1 = require(\"../utils\");\n\nvar ast_helpers_1 = require(\"./ast_helpers\");\n\nvar interfaces_1 = require(\"./interfaces\");\n\nvar make_transform_1 = require(\"./make_transform\");\n\nfunction exportLazyModuleMap(shouldTransform, lazyRoutesCb) {\n  var standardTransform = function standardTransform(sourceFile) {\n    var ops = [];\n    var lazyRoutes = lazyRoutesCb();\n\n    if (!shouldTransform(sourceFile.fileName)) {\n      return ops;\n    }\n\n    var dirName = path.normalize(path.dirname(sourceFile.fileName));\n    var modules = Object.keys(lazyRoutes).map(function (loadChildrenString) {\n      var _loadChildrenString$s = loadChildrenString.split('#'),\n          _loadChildrenString$s2 = _slicedToArray(_loadChildrenString$s, 2),\n          moduleName = _loadChildrenString$s2[1];\n\n      var modulePath = lazyRoutes[loadChildrenString];\n      return {\n        modulePath: modulePath,\n        moduleName: moduleName,\n        loadChildrenString: loadChildrenString\n      };\n    });\n    modules.forEach(function (module, index) {\n      var modulePath = module.modulePath;\n\n      if (!modulePath) {\n        return;\n      }\n\n      var relativePath = utils_1.forwardSlashPath(path.relative(dirName, modulePath));\n\n      if (!(relativePath.startsWith('./') || relativePath.startsWith('../'))) {\n        // 'a/b/c' is a relative path for Node but an absolute path for TS, so we must convert it.\n        relativePath = \"./\".concat(relativePath);\n      } // Create the new namespace import node.\n\n\n      var namespaceImport = ts.createNamespaceImport(ts.createIdentifier(\"__lazy_\".concat(index, \"__\")));\n      var importClause = ts.createImportClause(undefined, namespaceImport);\n      var newImport = ts.createImportDeclaration(undefined, undefined, importClause, ts.createLiteral(relativePath));\n      var firstNode = ast_helpers_1.getFirstNode(sourceFile);\n\n      if (firstNode) {\n        ops.push(new interfaces_1.AddNodeOperation(sourceFile, firstNode, newImport));\n      }\n    });\n    var lazyModuleObjectLiteral = ts.createObjectLiteral(modules.map(function (mod, idx) {\n      var _mod$loadChildrenStri = mod.loadChildrenString.split('#'),\n          _mod$loadChildrenStri2 = _slicedToArray(_mod$loadChildrenStri, 2),\n          modulePath = _mod$loadChildrenStri2[0],\n          moduleName = _mod$loadChildrenStri2[1];\n\n      if (modulePath.match(/\\.ngfactory/)) {\n        modulePath = modulePath.replace('.ngfactory', '');\n        moduleName = moduleName.replace('NgFactory', '');\n      }\n\n      return ts.createPropertyAssignment(ts.createLiteral(\"\".concat(modulePath, \"#\").concat(moduleName)), ts.createPropertyAccess(ts.createIdentifier(\"__lazy_\".concat(idx, \"__\")), mod.moduleName));\n    }));\n    var lazyModuleVariableStmt = ts.createVariableStatement([ts.createToken(ts.SyntaxKind.ExportKeyword)], [ts.createVariableDeclaration('LAZY_MODULE_MAP', undefined, lazyModuleObjectLiteral)]);\n    var lastNode = ast_helpers_1.getLastNode(sourceFile);\n\n    if (lastNode) {\n      ops.push(new interfaces_1.AddNodeOperation(sourceFile, lastNode, undefined, lazyModuleVariableStmt));\n    }\n\n    return ops;\n  };\n\n  return make_transform_1.makeTransform(standardTransform);\n}\n\nexports.exportLazyModuleMap = exportLazyModuleMap;","map":{"version":3,"sources":["/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@ngtools/webpack/src/transformers/export_lazy_module_map.js"],"names":["Object","defineProperty","exports","value","exportLazyModuleMap","path","require","ts","utils_1","ast_helpers_1","interfaces_1","make_transform_1","shouldTransform","lazyRoutesCb","standardTransform","sourceFile","ops","lazyRoutes","fileName","dirName","normalize","dirname","modules","keys","map","loadChildrenString","split","moduleName","modulePath","forEach","module","index","relativePath","forwardSlashPath","relative","startsWith","namespaceImport","createNamespaceImport","createIdentifier","importClause","createImportClause","undefined","newImport","createImportDeclaration","createLiteral","firstNode","getFirstNode","push","AddNodeOperation","lazyModuleObjectLiteral","createObjectLiteral","mod","idx","match","replace","createPropertyAssignment","createPropertyAccess","lazyModuleVariableStmt","createVariableStatement","createToken","SyntaxKind","ExportKeyword","createVariableDeclaration","lastNode","getLastNode","makeTransform"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.exportLazyModuleMap = void 0;\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst path = require(\"path\");\nconst ts = require(\"typescript\");\nconst utils_1 = require(\"../utils\");\nconst ast_helpers_1 = require(\"./ast_helpers\");\nconst interfaces_1 = require(\"./interfaces\");\nconst make_transform_1 = require(\"./make_transform\");\nfunction exportLazyModuleMap(shouldTransform, lazyRoutesCb) {\n    const standardTransform = function (sourceFile) {\n        const ops = [];\n        const lazyRoutes = lazyRoutesCb();\n        if (!shouldTransform(sourceFile.fileName)) {\n            return ops;\n        }\n        const dirName = path.normalize(path.dirname(sourceFile.fileName));\n        const modules = Object.keys(lazyRoutes)\n            .map((loadChildrenString) => {\n            const [, moduleName] = loadChildrenString.split('#');\n            const modulePath = lazyRoutes[loadChildrenString];\n            return {\n                modulePath,\n                moduleName,\n                loadChildrenString,\n            };\n        });\n        modules.forEach((module, index) => {\n            const modulePath = module.modulePath;\n            if (!modulePath) {\n                return;\n            }\n            let relativePath = utils_1.forwardSlashPath(path.relative(dirName, modulePath));\n            if (!(relativePath.startsWith('./') || relativePath.startsWith('../'))) {\n                // 'a/b/c' is a relative path for Node but an absolute path for TS, so we must convert it.\n                relativePath = `./${relativePath}`;\n            }\n            // Create the new namespace import node.\n            const namespaceImport = ts.createNamespaceImport(ts.createIdentifier(`__lazy_${index}__`));\n            const importClause = ts.createImportClause(undefined, namespaceImport);\n            const newImport = ts.createImportDeclaration(undefined, undefined, importClause, ts.createLiteral(relativePath));\n            const firstNode = ast_helpers_1.getFirstNode(sourceFile);\n            if (firstNode) {\n                ops.push(new interfaces_1.AddNodeOperation(sourceFile, firstNode, newImport));\n            }\n        });\n        const lazyModuleObjectLiteral = ts.createObjectLiteral(modules.map((mod, idx) => {\n            let [modulePath, moduleName] = mod.loadChildrenString.split('#');\n            if (modulePath.match(/\\.ngfactory/)) {\n                modulePath = modulePath.replace('.ngfactory', '');\n                moduleName = moduleName.replace('NgFactory', '');\n            }\n            return ts.createPropertyAssignment(ts.createLiteral(`${modulePath}#${moduleName}`), ts.createPropertyAccess(ts.createIdentifier(`__lazy_${idx}__`), mod.moduleName));\n        }));\n        const lazyModuleVariableStmt = ts.createVariableStatement([ts.createToken(ts.SyntaxKind.ExportKeyword)], [ts.createVariableDeclaration('LAZY_MODULE_MAP', undefined, lazyModuleObjectLiteral)]);\n        const lastNode = ast_helpers_1.getLastNode(sourceFile);\n        if (lastNode) {\n            ops.push(new interfaces_1.AddNodeOperation(sourceFile, lastNode, undefined, lazyModuleVariableStmt));\n        }\n        return ops;\n    };\n    return make_transform_1.makeTransform(standardTransform);\n}\nexports.exportLazyModuleMap = exportLazyModuleMap;\n"]},"metadata":{},"sourceType":"script"}