{"ast":null,"code":"\"use strict\";\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nvar _taggedTemplateLiteral = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/taggedTemplateLiteral\");\n\nvar _objectSpread = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/objectSpread2\");\n\nvar _templateObject;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.buildServePath = exports.getDevServerConfig = void 0;\n\nvar core_1 = require(\"@angular-devkit/core\");\n\nvar fs_1 = require(\"fs\");\n\nvar path_1 = require(\"path\");\n\nvar url = require(\"url\");\n\nvar utils_1 = require(\"../../utils\");\n\nvar webpack_browser_config_1 = require(\"../../utils/webpack-browser-config\");\n\nvar hmr_loader_1 = require(\"../plugins/hmr/hmr-loader\");\n\nvar helpers_1 = require(\"../utils/helpers\");\n\nfunction getDevServerConfig(wco) {\n  var _wco$buildOptions = wco.buildOptions,\n      optimization = _wco$buildOptions.optimization,\n      host = _wco$buildOptions.host,\n      port = _wco$buildOptions.port,\n      index = _wco$buildOptions.index,\n      headers = _wco$buildOptions.headers,\n      poll = _wco$buildOptions.poll,\n      ssl = _wco$buildOptions.ssl,\n      hmr = _wco$buildOptions.hmr,\n      main = _wco$buildOptions.main,\n      disableHostCheck = _wco$buildOptions.disableHostCheck,\n      liveReload = _wco$buildOptions.liveReload,\n      allowedHosts = _wco$buildOptions.allowedHosts,\n      watch = _wco$buildOptions.watch,\n      proxyConfig = _wco$buildOptions.proxyConfig,\n      logger = wco.logger,\n      root = wco.root;\n  var servePath = buildServePath(wco.buildOptions, logger);\n\n  var _utils_1$normalizeOpt = utils_1.normalizeOptimization(optimization),\n      stylesOptimization = _utils_1$normalizeOpt.styles,\n      scriptsOptimization = _utils_1$normalizeOpt.scripts;\n\n  var extraPlugins = []; // Resolve public host and client address.\n\n  var publicHost = wco.buildOptions.publicHost;\n\n  if (publicHost) {\n    if (!/^\\w+:\\/\\//.test(publicHost)) {\n      publicHost = \"\".concat(ssl ? 'https' : 'http', \"://\").concat(publicHost);\n    }\n\n    var parsedHost = url.parse(publicHost);\n    publicHost = parsedHost.host;\n  } else {\n    publicHost = '0.0.0.0:0';\n  }\n\n  if (!watch) {\n    // There's no option to turn off file watching in webpack-dev-server, but\n    // we can override the file watcher instead.\n    extraPlugins.push({\n      // tslint:disable-next-line:no-any\n      apply: function apply(compiler) {\n        compiler.hooks.afterEnvironment.tap('angular-cli', function () {\n          compiler.watchFileSystem = {\n            watch: function watch() {}\n          };\n        });\n      }\n    });\n  }\n\n  var extraRules = [];\n\n  if (hmr) {\n    extraRules.push({\n      loader: hmr_loader_1.HmrLoader,\n      include: [main].map(function (p) {\n        return path_1.resolve(wco.root, p);\n      })\n    });\n  }\n\n  return {\n    plugins: extraPlugins,\n    module: {\n      rules: extraRules\n    },\n    devServer: {\n      host: host,\n      port: port,\n      headers: _objectSpread({\n        'Access-Control-Allow-Origin': '*'\n      }, headers),\n      historyApiFallback: !!index && {\n        index: \"\".concat(servePath, \"/\").concat(webpack_browser_config_1.getIndexOutputFile(index)),\n        disableDotRule: true,\n        htmlAcceptHeaders: ['text/html', 'application/xhtml+xml'],\n        rewrites: [{\n          from: new RegExp(\"^(?!\".concat(servePath, \")/.*\")),\n          to: function to(context) {\n            return url.format(context.parsedUrl);\n          }\n        }]\n      },\n      sockPath: path_1.posix.join(servePath, 'sockjs-node'),\n      stats: false,\n      compress: stylesOptimization || scriptsOptimization,\n      watchOptions: helpers_1.getWatchOptions(poll),\n      https: getSslConfig(root, wco.buildOptions),\n      overlay: {\n        errors: !(stylesOptimization || scriptsOptimization),\n        warnings: false\n      },\n      public: publicHost,\n      allowedHosts: allowedHosts,\n      disableHostCheck: disableHostCheck,\n      // This should always be true, but at the moment this breaks 'SuppressExtractedTextChunksWebpackPlugin'\n      // because it will include addition JS in the styles.js.\n      inline: hmr,\n      publicPath: servePath,\n      liveReload: liveReload,\n      hotOnly: hmr && !liveReload,\n      hot: hmr,\n      proxy: addProxyConfig(root, proxyConfig),\n      contentBase: false,\n      logLevel: 'silent'\n    }\n  };\n}\n\nexports.getDevServerConfig = getDevServerConfig;\n/**\n * Resolve and build a URL _path_ that will be the root of the server. This resolved base href and\n * deploy URL from the browser options and returns a path from the root.\n */\n\nfunction buildServePath(options, logger) {\n  var servePath = options.servePath;\n\n  if (servePath === undefined) {\n    var defaultPath = findDefaultServePath(options.baseHref, options.deployUrl);\n\n    if (defaultPath == null) {\n      logger.warn(core_1.tags.oneLine(_templateObject || (_templateObject = _taggedTemplateLiteral([\"\\n        Warning: --deploy-url and/or --base-href contain unsupported values for ng serve. Default\\n        serve path of '/' used. Use --serve-path to override.\\n      \"]))));\n    }\n\n    servePath = defaultPath || '';\n  }\n\n  if (servePath.endsWith('/')) {\n    servePath = servePath.substr(0, servePath.length - 1);\n  }\n\n  if (!servePath.startsWith('/')) {\n    servePath = \"/\".concat(servePath);\n  }\n\n  return servePath;\n}\n\nexports.buildServePath = buildServePath;\n/**\n * Private method to enhance a webpack config with SSL configuration.\n * @private\n */\n\nfunction getSslConfig(root, options) {\n  var ssl = options.ssl,\n      sslCert = options.sslCert,\n      sslKey = options.sslKey;\n\n  if (ssl && sslCert && sslKey) {\n    return {\n      key: fs_1.readFileSync(path_1.resolve(root, sslKey), 'utf-8'),\n      cert: fs_1.readFileSync(path_1.resolve(root, sslCert), 'utf-8')\n    };\n  }\n\n  return ssl;\n}\n/**\n * Private method to enhance a webpack config with Proxy configuration.\n * @private\n */\n\n\nfunction addProxyConfig(root, proxyConfig) {\n  if (!proxyConfig) {\n    return undefined;\n  }\n\n  var proxyPath = path_1.resolve(root, proxyConfig);\n\n  if (fs_1.existsSync(proxyPath)) {\n    return require(proxyPath);\n  }\n\n  throw new Error('Proxy config file ' + proxyPath + ' does not exist.');\n}\n/**\n * Find the default server path. We don't want to expose baseHref and deployUrl as arguments, only\n * the browser options where needed. This method should stay private (people who want to resolve\n * baseHref and deployUrl should use the buildServePath exported function.\n * @private\n */\n\n\nfunction findDefaultServePath(baseHref, deployUrl) {\n  if (!baseHref && !deployUrl) {\n    return '';\n  }\n\n  if (/^(\\w+:)?\\/\\//.test(baseHref || '') || /^(\\w+:)?\\/\\//.test(deployUrl || '')) {\n    // If baseHref or deployUrl is absolute, unsupported by ng serve\n    return null;\n  } // normalize baseHref\n  // for ng serve the starting base is always `/` so a relative\n  // and root relative value are identical\n\n\n  var baseHrefParts = (baseHref || '').split('/').filter(function (part) {\n    return part !== '';\n  });\n\n  if (baseHref && !baseHref.endsWith('/')) {\n    baseHrefParts.pop();\n  }\n\n  var normalizedBaseHref = baseHrefParts.length === 0 ? '/' : \"/\".concat(baseHrefParts.join('/'), \"/\");\n\n  if (deployUrl && deployUrl[0] === '/') {\n    if (baseHref && baseHref[0] === '/' && normalizedBaseHref !== deployUrl) {\n      // If baseHref and deployUrl are root relative and not equivalent, unsupported by ng serve\n      return null;\n    }\n\n    return deployUrl;\n  } // Join together baseHref and deployUrl\n\n\n  return \"\".concat(normalizedBaseHref).concat(deployUrl || '');\n}","map":{"version":3,"sources":["/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@angular-devkit/build-angular/src/webpack/configs/dev-server.js"],"names":["Object","defineProperty","exports","value","buildServePath","getDevServerConfig","core_1","require","fs_1","path_1","url","utils_1","webpack_browser_config_1","hmr_loader_1","helpers_1","wco","buildOptions","optimization","host","port","index","headers","poll","ssl","hmr","main","disableHostCheck","liveReload","allowedHosts","watch","proxyConfig","logger","root","servePath","normalizeOptimization","stylesOptimization","styles","scriptsOptimization","scripts","extraPlugins","publicHost","test","parsedHost","parse","push","apply","compiler","hooks","afterEnvironment","tap","watchFileSystem","extraRules","loader","HmrLoader","include","map","p","resolve","plugins","module","rules","devServer","historyApiFallback","getIndexOutputFile","disableDotRule","htmlAcceptHeaders","rewrites","from","RegExp","to","context","format","parsedUrl","sockPath","posix","join","stats","compress","watchOptions","getWatchOptions","https","getSslConfig","overlay","errors","warnings","public","inline","publicPath","hotOnly","hot","proxy","addProxyConfig","contentBase","logLevel","options","undefined","defaultPath","findDefaultServePath","baseHref","deployUrl","warn","tags","oneLine","endsWith","substr","length","startsWith","sslCert","sslKey","key","readFileSync","cert","proxyPath","existsSync","Error","baseHrefParts","split","filter","part","pop","normalizedBaseHref"],"mappings":"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","sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.buildServePath = exports.getDevServerConfig = void 0;\nconst core_1 = require(\"@angular-devkit/core\");\nconst fs_1 = require(\"fs\");\nconst path_1 = require(\"path\");\nconst url = require(\"url\");\nconst utils_1 = require(\"../../utils\");\nconst webpack_browser_config_1 = require(\"../../utils/webpack-browser-config\");\nconst hmr_loader_1 = require(\"../plugins/hmr/hmr-loader\");\nconst helpers_1 = require(\"../utils/helpers\");\nfunction getDevServerConfig(wco) {\n    const { buildOptions: { optimization, host, port, index, headers, poll, ssl, hmr, main, disableHostCheck, liveReload, allowedHosts, watch, proxyConfig, }, logger, root, } = wco;\n    const servePath = buildServePath(wco.buildOptions, logger);\n    const { styles: stylesOptimization, scripts: scriptsOptimization } = utils_1.normalizeOptimization(optimization);\n    const extraPlugins = [];\n    // Resolve public host and client address.\n    let publicHost = wco.buildOptions.publicHost;\n    if (publicHost) {\n        if (!/^\\w+:\\/\\//.test(publicHost)) {\n            publicHost = `${ssl ? 'https' : 'http'}://${publicHost}`;\n        }\n        const parsedHost = url.parse(publicHost);\n        publicHost = parsedHost.host;\n    }\n    else {\n        publicHost = '0.0.0.0:0';\n    }\n    if (!watch) {\n        // There's no option to turn off file watching in webpack-dev-server, but\n        // we can override the file watcher instead.\n        extraPlugins.push({\n            // tslint:disable-next-line:no-any\n            apply: (compiler) => {\n                compiler.hooks.afterEnvironment.tap('angular-cli', () => {\n                    compiler.watchFileSystem = { watch: () => { } };\n                });\n            },\n        });\n    }\n    const extraRules = [];\n    if (hmr) {\n        extraRules.push({\n            loader: hmr_loader_1.HmrLoader,\n            include: [main].map(p => path_1.resolve(wco.root, p)),\n        });\n    }\n    return {\n        plugins: extraPlugins,\n        module: {\n            rules: extraRules,\n        },\n        devServer: {\n            host,\n            port,\n            headers: {\n                'Access-Control-Allow-Origin': '*',\n                ...headers,\n            },\n            historyApiFallback: !!index && {\n                index: `${servePath}/${webpack_browser_config_1.getIndexOutputFile(index)}`,\n                disableDotRule: true,\n                htmlAcceptHeaders: ['text/html', 'application/xhtml+xml'],\n                rewrites: [\n                    {\n                        from: new RegExp(`^(?!${servePath})/.*`),\n                        to: context => url.format(context.parsedUrl),\n                    },\n                ],\n            },\n            sockPath: path_1.posix.join(servePath, 'sockjs-node'),\n            stats: false,\n            compress: stylesOptimization || scriptsOptimization,\n            watchOptions: helpers_1.getWatchOptions(poll),\n            https: getSslConfig(root, wco.buildOptions),\n            overlay: {\n                errors: !(stylesOptimization || scriptsOptimization),\n                warnings: false,\n            },\n            public: publicHost,\n            allowedHosts,\n            disableHostCheck,\n            // This should always be true, but at the moment this breaks 'SuppressExtractedTextChunksWebpackPlugin'\n            // because it will include addition JS in the styles.js.\n            inline: hmr,\n            publicPath: servePath,\n            liveReload,\n            hotOnly: hmr && !liveReload,\n            hot: hmr,\n            proxy: addProxyConfig(root, proxyConfig),\n            contentBase: false,\n            logLevel: 'silent',\n        },\n    };\n}\nexports.getDevServerConfig = getDevServerConfig;\n/**\n * Resolve and build a URL _path_ that will be the root of the server. This resolved base href and\n * deploy URL from the browser options and returns a path from the root.\n */\nfunction buildServePath(options, logger) {\n    let servePath = options.servePath;\n    if (servePath === undefined) {\n        const defaultPath = findDefaultServePath(options.baseHref, options.deployUrl);\n        if (defaultPath == null) {\n            logger.warn(core_1.tags.oneLine `\n        Warning: --deploy-url and/or --base-href contain unsupported values for ng serve. Default\n        serve path of '/' used. Use --serve-path to override.\n      `);\n        }\n        servePath = defaultPath || '';\n    }\n    if (servePath.endsWith('/')) {\n        servePath = servePath.substr(0, servePath.length - 1);\n    }\n    if (!servePath.startsWith('/')) {\n        servePath = `/${servePath}`;\n    }\n    return servePath;\n}\nexports.buildServePath = buildServePath;\n/**\n * Private method to enhance a webpack config with SSL configuration.\n * @private\n */\nfunction getSslConfig(root, options) {\n    const { ssl, sslCert, sslKey } = options;\n    if (ssl && sslCert && sslKey) {\n        return {\n            key: fs_1.readFileSync(path_1.resolve(root, sslKey), 'utf-8'),\n            cert: fs_1.readFileSync(path_1.resolve(root, sslCert), 'utf-8'),\n        };\n    }\n    return ssl;\n}\n/**\n * Private method to enhance a webpack config with Proxy configuration.\n * @private\n */\nfunction addProxyConfig(root, proxyConfig) {\n    if (!proxyConfig) {\n        return undefined;\n    }\n    const proxyPath = path_1.resolve(root, proxyConfig);\n    if (fs_1.existsSync(proxyPath)) {\n        return require(proxyPath);\n    }\n    throw new Error('Proxy config file ' + proxyPath + ' does not exist.');\n}\n/**\n * Find the default server path. We don't want to expose baseHref and deployUrl as arguments, only\n * the browser options where needed. This method should stay private (people who want to resolve\n * baseHref and deployUrl should use the buildServePath exported function.\n * @private\n */\nfunction findDefaultServePath(baseHref, deployUrl) {\n    if (!baseHref && !deployUrl) {\n        return '';\n    }\n    if (/^(\\w+:)?\\/\\//.test(baseHref || '') || /^(\\w+:)?\\/\\//.test(deployUrl || '')) {\n        // If baseHref or deployUrl is absolute, unsupported by ng serve\n        return null;\n    }\n    // normalize baseHref\n    // for ng serve the starting base is always `/` so a relative\n    // and root relative value are identical\n    const baseHrefParts = (baseHref || '').split('/').filter(part => part !== '');\n    if (baseHref && !baseHref.endsWith('/')) {\n        baseHrefParts.pop();\n    }\n    const normalizedBaseHref = baseHrefParts.length === 0 ? '/' : `/${baseHrefParts.join('/')}/`;\n    if (deployUrl && deployUrl[0] === '/') {\n        if (baseHref && baseHref[0] === '/' && normalizedBaseHref !== deployUrl) {\n            // If baseHref and deployUrl are root relative and not equivalent, unsupported by ng serve\n            return null;\n        }\n        return deployUrl;\n    }\n    // Join together baseHref and deployUrl\n    return `${normalizedBaseHref}${deployUrl || ''}`;\n}\n"]},"metadata":{},"sourceType":"script"}