{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _createForOfIteratorHelper = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _require = require('util'),\n    promisify = _require.promisify;\n\nvar fs = require('fs');\n\nvar path = require('path');\n\nvar fastGlob = require('fast-glob');\n\nvar gitIgnore = require('ignore');\n\nvar slash = require('slash');\n\nvar DEFAULT_IGNORE = ['**/node_modules/**', '**/flow-typed/**', '**/coverage/**', '**/.git'];\nvar readFileP = promisify(fs.readFile);\n\nvar mapGitIgnorePatternTo = function mapGitIgnorePatternTo(base) {\n  return function (ignore) {\n    if (ignore.startsWith('!')) {\n      return '!' + path.posix.join(base, ignore.slice(1));\n    }\n\n    return path.posix.join(base, ignore);\n  };\n};\n\nvar parseGitIgnore = function parseGitIgnore(content, options) {\n  var base = slash(path.relative(options.cwd, path.dirname(options.fileName)));\n  return content.split(/\\r?\\n/).filter(Boolean).filter(function (line) {\n    return !line.startsWith('#');\n  }).map(mapGitIgnorePatternTo(base));\n};\n\nvar reduceIgnore = function reduceIgnore(files) {\n  var ignores = gitIgnore();\n\n  var _iterator = _createForOfIteratorHelper(files),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var file = _step.value;\n      ignores.add(parseGitIgnore(file.content, {\n        cwd: file.cwd,\n        fileName: file.filePath\n      }));\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  return ignores;\n};\n\nvar ensureAbsolutePathForCwd = function ensureAbsolutePathForCwd(cwd, p) {\n  cwd = slash(cwd);\n\n  if (path.isAbsolute(p)) {\n    if (slash(p).startsWith(cwd)) {\n      return p;\n    }\n\n    throw new Error(\"Path \".concat(p, \" is not in cwd \").concat(cwd));\n  }\n\n  return path.join(cwd, p);\n};\n\nvar getIsIgnoredPredecate = function getIsIgnoredPredecate(ignores, cwd) {\n  return function (p) {\n    return ignores.ignores(slash(path.relative(cwd, ensureAbsolutePathForCwd(cwd, p.path || p))));\n  };\n};\n\nvar getFile = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(file, cwd) {\n    var filePath, content;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            filePath = path.join(cwd, file);\n            _context.next = 3;\n            return readFileP(filePath, 'utf8');\n\n          case 3:\n            content = _context.sent;\n            return _context.abrupt(\"return\", {\n              cwd: cwd,\n              filePath: filePath,\n              content: content\n            });\n\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function getFile(_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nvar getFileSync = function getFileSync(file, cwd) {\n  var filePath = path.join(cwd, file);\n  var content = fs.readFileSync(filePath, 'utf8');\n  return {\n    cwd: cwd,\n    filePath: filePath,\n    content: content\n  };\n};\n\nvar normalizeOptions = function normalizeOptions() {\n  var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n      _ref2$ignore = _ref2.ignore,\n      ignore = _ref2$ignore === void 0 ? [] : _ref2$ignore,\n      _ref2$cwd = _ref2.cwd,\n      cwd = _ref2$cwd === void 0 ? slash(process.cwd()) : _ref2$cwd;\n\n  return {\n    ignore: ignore,\n    cwd: cwd\n  };\n};\n\nmodule.exports = /*#__PURE__*/function () {\n  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(options) {\n    var paths, files, ignores;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            options = normalizeOptions(options);\n            _context2.next = 3;\n            return fastGlob('**/.gitignore', {\n              ignore: DEFAULT_IGNORE.concat(options.ignore),\n              cwd: options.cwd\n            });\n\n          case 3:\n            paths = _context2.sent;\n            _context2.next = 6;\n            return Promise.all(paths.map(function (file) {\n              return getFile(file, options.cwd);\n            }));\n\n          case 6:\n            files = _context2.sent;\n            ignores = reduceIgnore(files);\n            return _context2.abrupt(\"return\", getIsIgnoredPredecate(ignores, options.cwd));\n\n          case 9:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function (_x3) {\n    return _ref3.apply(this, arguments);\n  };\n}();\n\nmodule.exports.sync = function (options) {\n  options = normalizeOptions(options);\n  var paths = fastGlob.sync('**/.gitignore', {\n    ignore: DEFAULT_IGNORE.concat(options.ignore),\n    cwd: options.cwd\n  });\n  var files = paths.map(function (file) {\n    return getFileSync(file, options.cwd);\n  });\n  var ignores = reduceIgnore(files);\n  return getIsIgnoredPredecate(ignores, options.cwd);\n};","map":{"version":3,"sources":["/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/globby/gitignore.js"],"names":["require","promisify","fs","path","fastGlob","gitIgnore","slash","DEFAULT_IGNORE","readFileP","readFile","mapGitIgnorePatternTo","base","ignore","startsWith","posix","join","slice","parseGitIgnore","content","options","relative","cwd","dirname","fileName","split","filter","Boolean","line","map","reduceIgnore","files","ignores","file","add","filePath","ensureAbsolutePathForCwd","p","isAbsolute","Error","getIsIgnoredPredecate","getFile","getFileSync","readFileSync","normalizeOptions","process","module","exports","concat","paths","Promise","all","sync"],"mappings":"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","sourcesContent":["'use strict';\nconst {promisify} = require('util');\nconst fs = require('fs');\nconst path = require('path');\nconst fastGlob = require('fast-glob');\nconst gitIgnore = require('ignore');\nconst slash = require('slash');\n\nconst DEFAULT_IGNORE = [\n\t'**/node_modules/**',\n\t'**/flow-typed/**',\n\t'**/coverage/**',\n\t'**/.git'\n];\n\nconst readFileP = promisify(fs.readFile);\n\nconst mapGitIgnorePatternTo = base => ignore => {\n\tif (ignore.startsWith('!')) {\n\t\treturn '!' + path.posix.join(base, ignore.slice(1));\n\t}\n\n\treturn path.posix.join(base, ignore);\n};\n\nconst parseGitIgnore = (content, options) => {\n\tconst base = slash(path.relative(options.cwd, path.dirname(options.fileName)));\n\n\treturn content\n\t\t.split(/\\r?\\n/)\n\t\t.filter(Boolean)\n\t\t.filter(line => !line.startsWith('#'))\n\t\t.map(mapGitIgnorePatternTo(base));\n};\n\nconst reduceIgnore = files => {\n\tconst ignores = gitIgnore();\n\tfor (const file of files) {\n\t\tignores.add(parseGitIgnore(file.content, {\n\t\t\tcwd: file.cwd,\n\t\t\tfileName: file.filePath\n\t\t}));\n\t}\n\n\treturn ignores;\n};\n\nconst ensureAbsolutePathForCwd = (cwd, p) => {\n\tcwd = slash(cwd);\n\tif (path.isAbsolute(p)) {\n\t\tif (slash(p).startsWith(cwd)) {\n\t\t\treturn p;\n\t\t}\n\n\t\tthrow new Error(`Path ${p} is not in cwd ${cwd}`);\n\t}\n\n\treturn path.join(cwd, p);\n};\n\nconst getIsIgnoredPredecate = (ignores, cwd) => {\n\treturn p => ignores.ignores(slash(path.relative(cwd, ensureAbsolutePathForCwd(cwd, p.path || p))));\n};\n\nconst getFile = async (file, cwd) => {\n\tconst filePath = path.join(cwd, file);\n\tconst content = await readFileP(filePath, 'utf8');\n\n\treturn {\n\t\tcwd,\n\t\tfilePath,\n\t\tcontent\n\t};\n};\n\nconst getFileSync = (file, cwd) => {\n\tconst filePath = path.join(cwd, file);\n\tconst content = fs.readFileSync(filePath, 'utf8');\n\n\treturn {\n\t\tcwd,\n\t\tfilePath,\n\t\tcontent\n\t};\n};\n\nconst normalizeOptions = ({\n\tignore = [],\n\tcwd = slash(process.cwd())\n} = {}) => {\n\treturn {ignore, cwd};\n};\n\nmodule.exports = async options => {\n\toptions = normalizeOptions(options);\n\n\tconst paths = await fastGlob('**/.gitignore', {\n\t\tignore: DEFAULT_IGNORE.concat(options.ignore),\n\t\tcwd: options.cwd\n\t});\n\n\tconst files = await Promise.all(paths.map(file => getFile(file, options.cwd)));\n\tconst ignores = reduceIgnore(files);\n\n\treturn getIsIgnoredPredecate(ignores, options.cwd);\n};\n\nmodule.exports.sync = options => {\n\toptions = normalizeOptions(options);\n\n\tconst paths = fastGlob.sync('**/.gitignore', {\n\t\tignore: DEFAULT_IGNORE.concat(options.ignore),\n\t\tcwd: options.cwd\n\t});\n\n\tconst files = paths.map(file => getFileSync(file, options.cwd));\n\tconst ignores = reduceIgnore(files);\n\n\treturn getIsIgnoredPredecate(ignores, options.cwd);\n};\n"]},"metadata":{},"sourceType":"script"}