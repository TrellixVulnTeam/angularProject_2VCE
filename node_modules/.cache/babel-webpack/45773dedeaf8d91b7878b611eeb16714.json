{"ast":null,"code":"// This is the **logger** module for *Karma*. It uses\n// [log4js](https://github.com/nomiddlename/log4js-node) to handle and\n// configure all logging that happens inside of *Karma*.\n// ### Helpers and Setup\nvar log4js = require('log4js');\n\nvar helper = require('./helper');\n\nvar constant = require('./constants'); // #### Public Functions\n// Setup the logger by passing in the configuration options. It needs\n// three arguments:\n//\n//     setup(logLevel, colors, appenders)\n//\n// * `logLevel`: *String* Defines the global log level.\n// * `colors`: *Boolean* Use colors in the stdout or not.\n// * `appenders`: *Object*  This will be passed as appenders to log4js\n//   to allow for fine grained configuration of log4js. For more information\n//   see https://github.com/nomiddlename/log4js-node.\n//   *Array* is also accepted for backwards compatibility.\n\n\nfunction setup(level, colors, appenders) {\n  // Turn color on/off on the console appenders with pattern layout\n  var pattern = colors ? constant.COLOR_PATTERN : constant.NO_COLOR_PATTERN;\n\n  if (appenders) {\n    // Convert Array to Object for backwards compatibility.\n    if (appenders.map) {\n      if (appenders.length === 0) {\n        appenders = [constant.CONSOLE_APPENDER];\n      }\n\n      var v1Appenders = appenders;\n      appenders = {};\n      v1Appenders.forEach(function (appender, index) {\n        if (appender.type === 'console') {\n          appenders.console = appender;\n\n          if (helper.isDefined(appender.layout) && appender.layout.type === 'pattern') {\n            appender.layout.pattern = pattern;\n          }\n        } else {\n          appenders[index + ''] = appender;\n        }\n\n        return appender;\n      });\n    }\n  } else {\n    appenders = {\n      console: constant.CONSOLE_APPENDER\n    };\n  }\n\n  log4js.configure({\n    appenders: appenders,\n    categories: {\n      default: {\n        appenders: Object.keys(appenders),\n        level: level\n      }\n    }\n  });\n} // Setup the logger by passing in the config object. The function sets the\n// `colors` and `logLevel` if they are defined. It takes two arguments:\n//\n//     setupFromConfig(config, appenders)\n//\n// * `config`: *Object* The configuration object.\n// * `appenders`: *Object*  This will be passed as appenders to log4js\n//   to allow for fine grained configuration of log4js. For more information\n//   see https://github.com/nomiddlename/log4js-node.\n//   *Array* is also accepted for backwards compatibility.\n\n\nfunction setupFromConfig(config, appenders) {\n  var useColors = true;\n  var logLevel = constant.LOG_INFO;\n\n  if (helper.isDefined(config.colors)) {\n    useColors = config.colors;\n  }\n\n  if (helper.isDefined(config.logLevel)) {\n    logLevel = config.logLevel;\n  }\n\n  setup(logLevel, useColors, appenders);\n}\n\nvar loggerCache = {}; // Create a new logger. There are two optional arguments\n// * `name`, which defaults to `karma` and\n//   If the `name = 'socket.io'` this will create a special wrapper\n//   to be used as a logger for socket.io.\n// * `level`, which defaults to the global level.\n\nfunction create(name, level) {\n  name = name || 'karma';\n  var logger;\n\n  if (Object.prototype.hasOwnProperty.call(loggerCache, name)) {\n    logger = loggerCache[name];\n  } else {\n    logger = log4js.getLogger(name);\n    loggerCache[name] = logger;\n  }\n\n  if (helper.isDefined(level)) {\n    logger.setLevel(level);\n  }\n\n  return logger;\n} // #### Publish\n\n\nexports.create = create;\nexports.setup = setup;\nexports.setupFromConfig = setupFromConfig;\n\nexports._rebindLog4js4testing = function (mockLog4js) {\n  log4js = mockLog4js;\n};","map":{"version":3,"sources":["/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/karma/lib/logger.js"],"names":["log4js","require","helper","constant","setup","level","colors","appenders","pattern","COLOR_PATTERN","NO_COLOR_PATTERN","map","length","CONSOLE_APPENDER","v1Appenders","forEach","appender","index","type","console","isDefined","layout","configure","categories","default","Object","keys","setupFromConfig","config","useColors","logLevel","LOG_INFO","loggerCache","create","name","logger","prototype","hasOwnProperty","call","getLogger","setLevel","exports","_rebindLog4js4testing","mockLog4js"],"mappings":"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","sourcesContent":["// This is the **logger** module for *Karma*. It uses\n// [log4js](https://github.com/nomiddlename/log4js-node) to handle and\n// configure all logging that happens inside of *Karma*.\n\n// ### Helpers and Setup\n\nlet log4js = require('log4js')\nconst helper = require('./helper')\nconst constant = require('./constants')\n\n// #### Public Functions\n\n// Setup the logger by passing in the configuration options. It needs\n// three arguments:\n//\n//     setup(logLevel, colors, appenders)\n//\n// * `logLevel`: *String* Defines the global log level.\n// * `colors`: *Boolean* Use colors in the stdout or not.\n// * `appenders`: *Object*  This will be passed as appenders to log4js\n//   to allow for fine grained configuration of log4js. For more information\n//   see https://github.com/nomiddlename/log4js-node.\n//   *Array* is also accepted for backwards compatibility.\nfunction setup (level, colors, appenders) {\n  // Turn color on/off on the console appenders with pattern layout\n  const pattern = colors ? constant.COLOR_PATTERN : constant.NO_COLOR_PATTERN\n  if (appenders) {\n    // Convert Array to Object for backwards compatibility.\n    if (appenders.map) {\n      if (appenders.length === 0) {\n        appenders = [constant.CONSOLE_APPENDER]\n      }\n      const v1Appenders = appenders\n      appenders = {}\n      v1Appenders.forEach(function (appender, index) {\n        if (appender.type === 'console') {\n          appenders.console = appender\n          if (helper.isDefined(appender.layout) && appender.layout.type === 'pattern') {\n            appender.layout.pattern = pattern\n          }\n        } else {\n          appenders[index + ''] = appender\n        }\n        return appender\n      })\n    }\n  } else {\n    appenders = { console: constant.CONSOLE_APPENDER }\n  }\n\n  log4js.configure({\n    appenders: appenders,\n    categories: {\n      default: {\n        appenders: Object.keys(appenders),\n        level: level\n      }\n    }\n  })\n}\n\n// Setup the logger by passing in the config object. The function sets the\n// `colors` and `logLevel` if they are defined. It takes two arguments:\n//\n//     setupFromConfig(config, appenders)\n//\n// * `config`: *Object* The configuration object.\n// * `appenders`: *Object*  This will be passed as appenders to log4js\n//   to allow for fine grained configuration of log4js. For more information\n//   see https://github.com/nomiddlename/log4js-node.\n//   *Array* is also accepted for backwards compatibility.\nfunction setupFromConfig (config, appenders) {\n  let useColors = true\n  let logLevel = constant.LOG_INFO\n\n  if (helper.isDefined(config.colors)) {\n    useColors = config.colors\n  }\n\n  if (helper.isDefined(config.logLevel)) {\n    logLevel = config.logLevel\n  }\n  setup(logLevel, useColors, appenders)\n}\n\nconst loggerCache = {}\n\n// Create a new logger. There are two optional arguments\n// * `name`, which defaults to `karma` and\n//   If the `name = 'socket.io'` this will create a special wrapper\n//   to be used as a logger for socket.io.\n// * `level`, which defaults to the global level.\nfunction create (name, level) {\n  name = name || 'karma'\n  let logger\n  if (Object.prototype.hasOwnProperty.call(loggerCache, name)) {\n    logger = loggerCache[name]\n  } else {\n    logger = log4js.getLogger(name)\n    loggerCache[name] = logger\n  }\n  if (helper.isDefined(level)) {\n    logger.setLevel(level)\n  }\n  return logger\n}\n\n// #### Publish\n\nexports.create = create\nexports.setup = setup\nexports.setupFromConfig = setupFromConfig\nexports._rebindLog4js4testing = function (mockLog4js) {\n  log4js = mockLog4js\n}\n"]},"metadata":{},"sourceType":"script"}