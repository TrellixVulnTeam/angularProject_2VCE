{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar path = require(\"path\");\n\nvar fsScandir = require(\"@nodelib/fs.scandir\");\n\nvar Settings = /*#__PURE__*/function () {\n  function Settings() {\n    var _options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, Settings);\n\n    this._options = _options;\n    this.basePath = this._getValue(this._options.basePath, undefined);\n    this.concurrency = this._getValue(this._options.concurrency, Number.POSITIVE_INFINITY);\n    this.deepFilter = this._getValue(this._options.deepFilter, null);\n    this.entryFilter = this._getValue(this._options.entryFilter, null);\n    this.errorFilter = this._getValue(this._options.errorFilter, null);\n    this.pathSegmentSeparator = this._getValue(this._options.pathSegmentSeparator, path.sep);\n    this.fsScandirSettings = new fsScandir.Settings({\n      followSymbolicLinks: this._options.followSymbolicLinks,\n      fs: this._options.fs,\n      pathSegmentSeparator: this._options.pathSegmentSeparator,\n      stats: this._options.stats,\n      throwErrorOnBrokenSymbolicLink: this._options.throwErrorOnBrokenSymbolicLink\n    });\n  }\n\n  _createClass(Settings, [{\n    key: \"_getValue\",\n    value: function _getValue(option, value) {\n      return option !== null && option !== void 0 ? option : value;\n    }\n  }]);\n\n  return Settings;\n}();\n\nexports.default = Settings;","map":{"version":3,"sources":["/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@nodelib/fs.walk/out/settings.js"],"names":["Object","defineProperty","exports","value","path","require","fsScandir","Settings","_options","basePath","_getValue","undefined","concurrency","Number","POSITIVE_INFINITY","deepFilter","entryFilter","errorFilter","pathSegmentSeparator","sep","fsScandirSettings","followSymbolicLinks","fs","stats","throwErrorOnBrokenSymbolicLink","option","default"],"mappings":"AAAA;;;;;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AACA,IAAMC,IAAI,GAAGC,OAAO,CAAC,MAAD,CAApB;;AACA,IAAMC,SAAS,GAAGD,OAAO,CAAC,qBAAD,CAAzB;;IACME,Q;AACF,sBAA2B;AAAA,QAAfC,QAAe,uEAAJ,EAAI;;AAAA;;AACvB,SAAKA,QAAL,GAAgBA,QAAhB;AACA,SAAKC,QAAL,GAAgB,KAAKC,SAAL,CAAe,KAAKF,QAAL,CAAcC,QAA7B,EAAuCE,SAAvC,CAAhB;AACA,SAAKC,WAAL,GAAmB,KAAKF,SAAL,CAAe,KAAKF,QAAL,CAAcI,WAA7B,EAA0CC,MAAM,CAACC,iBAAjD,CAAnB;AACA,SAAKC,UAAL,GAAkB,KAAKL,SAAL,CAAe,KAAKF,QAAL,CAAcO,UAA7B,EAAyC,IAAzC,CAAlB;AACA,SAAKC,WAAL,GAAmB,KAAKN,SAAL,CAAe,KAAKF,QAAL,CAAcQ,WAA7B,EAA0C,IAA1C,CAAnB;AACA,SAAKC,WAAL,GAAmB,KAAKP,SAAL,CAAe,KAAKF,QAAL,CAAcS,WAA7B,EAA0C,IAA1C,CAAnB;AACA,SAAKC,oBAAL,GAA4B,KAAKR,SAAL,CAAe,KAAKF,QAAL,CAAcU,oBAA7B,EAAmDd,IAAI,CAACe,GAAxD,CAA5B;AACA,SAAKC,iBAAL,GAAyB,IAAId,SAAS,CAACC,QAAd,CAAuB;AAC5Cc,MAAAA,mBAAmB,EAAE,KAAKb,QAAL,CAAca,mBADS;AAE5CC,MAAAA,EAAE,EAAE,KAAKd,QAAL,CAAcc,EAF0B;AAG5CJ,MAAAA,oBAAoB,EAAE,KAAKV,QAAL,CAAcU,oBAHQ;AAI5CK,MAAAA,KAAK,EAAE,KAAKf,QAAL,CAAce,KAJuB;AAK5CC,MAAAA,8BAA8B,EAAE,KAAKhB,QAAL,CAAcgB;AALF,KAAvB,CAAzB;AAOH;;;;WACD,mBAAUC,MAAV,EAAkBtB,KAAlB,EAAyB;AACrB,aAAOsB,MAAM,KAAK,IAAX,IAAmBA,MAAM,KAAK,KAAK,CAAnC,GAAuCA,MAAvC,GAAgDtB,KAAvD;AACH;;;;;;AAELD,OAAO,CAACwB,OAAR,GAAkBnB,QAAlB","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst path = require(\"path\");\nconst fsScandir = require(\"@nodelib/fs.scandir\");\nclass Settings {\n    constructor(_options = {}) {\n        this._options = _options;\n        this.basePath = this._getValue(this._options.basePath, undefined);\n        this.concurrency = this._getValue(this._options.concurrency, Number.POSITIVE_INFINITY);\n        this.deepFilter = this._getValue(this._options.deepFilter, null);\n        this.entryFilter = this._getValue(this._options.entryFilter, null);\n        this.errorFilter = this._getValue(this._options.errorFilter, null);\n        this.pathSegmentSeparator = this._getValue(this._options.pathSegmentSeparator, path.sep);\n        this.fsScandirSettings = new fsScandir.Settings({\n            followSymbolicLinks: this._options.followSymbolicLinks,\n            fs: this._options.fs,\n            pathSegmentSeparator: this._options.pathSegmentSeparator,\n            stats: this._options.stats,\n            throwErrorOnBrokenSymbolicLink: this._options.throwErrorOnBrokenSymbolicLink\n        });\n    }\n    _getValue(option, value) {\n        return option !== null && option !== void 0 ? option : value;\n    }\n}\nexports.default = Settings;\n"]},"metadata":{},"sourceType":"script"}