{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.buildOptimizerLoaderPath = void 0;\n\nvar webpack_sources_1 = require(\"webpack-sources\");\n\nvar loaderUtils = require('loader-utils');\n\nvar build_optimizer_1 = require(\"./build-optimizer\");\n\nexports.buildOptimizerLoaderPath = __filename;\n\nvar alwaysProcess = function alwaysProcess(path) {\n  return (// Always process TS files.\n    path.endsWith('.ts') || path.endsWith('.tsx') || // Always process factory files.\n    path.endsWith('.ngfactory.js') || path.endsWith('.ngstyle.js')\n  );\n};\n\nfunction buildOptimizerLoader(content, previousSourceMap) {\n  this.cacheable();\n  var callback = this.async();\n\n  if (!callback) {\n    throw new Error('Async loader support is required.');\n  }\n\n  var skipBuildOptimizer = this._module && this._module.factoryMeta && this._module.factoryMeta.skipBuildOptimizer;\n\n  if (!alwaysProcess(this.resourcePath) && skipBuildOptimizer) {\n    // Skip loading processing this file with Build Optimizer if we determined in\n    // BuildOptimizerWebpackPlugin that we shouldn't.\n    // Webpack typings for previousSourceMap are wrong, they are JSON objects and not strings.\n    // tslint:disable-next-line:no-any\n    this.callback(null, content, previousSourceMap);\n    return;\n  }\n\n  var options = loaderUtils.getOptions(this) || {};\n  var boOutput = build_optimizer_1.buildOptimizer({\n    content: content,\n    originalFilePath: this.resourcePath,\n    inputFilePath: this.resourcePath,\n    outputFilePath: this.resourcePath,\n    emitSourceMap: options.sourceMap,\n    isSideEffectFree: this._module && this._module.factoryMeta && this._module.factoryMeta.sideEffectFree\n  });\n\n  if (boOutput.emitSkipped || boOutput.content === null) {\n    // tslint:disable-next-line:no-any\n    this.callback(null, content, previousSourceMap);\n    return;\n  }\n\n  var intermediateSourceMap = boOutput.sourceMap;\n  var newContent = boOutput.content;\n  var newSourceMap;\n\n  if (options.sourceMap && intermediateSourceMap) {\n    // Webpack doesn't need sourceMappingURL since we pass them on explicitely.\n    newContent = newContent.replace(/^\\/\\/# sourceMappingURL=[^\\r\\n]*/gm, '');\n\n    if (previousSourceMap) {\n      // Use http://sokra.github.io/source-map-visualization/ to validate sourcemaps make sense.\n      // The last argument is not yet in the typings\n      // tslint:disable-next-line: no-any\n      newSourceMap = new webpack_sources_1.SourceMapSource(newContent, this.resourcePath, intermediateSourceMap, content, previousSourceMap, true).map();\n    } else {\n      // Otherwise just return our generated sourcemap.\n      newSourceMap = intermediateSourceMap;\n    }\n  } // Webpack typings for previousSourceMap are wrong, they are JSON objects and not strings.\n  // tslint:disable-next-line:no-any\n\n\n  callback(null, newContent, newSourceMap);\n}\n\nexports.default = buildOptimizerLoader;","map":{"version":3,"sources":["/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js"],"names":["Object","defineProperty","exports","value","buildOptimizerLoaderPath","webpack_sources_1","require","loaderUtils","build_optimizer_1","__filename","alwaysProcess","path","endsWith","buildOptimizerLoader","content","previousSourceMap","cacheable","callback","async","Error","skipBuildOptimizer","_module","factoryMeta","resourcePath","options","getOptions","boOutput","buildOptimizer","originalFilePath","inputFilePath","outputFilePath","emitSourceMap","sourceMap","isSideEffectFree","sideEffectFree","emitSkipped","intermediateSourceMap","newContent","newSourceMap","replace","SourceMapSource","map","default"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.buildOptimizerLoaderPath = void 0;\nconst webpack_sources_1 = require(\"webpack-sources\");\nconst loaderUtils = require('loader-utils');\nconst build_optimizer_1 = require(\"./build-optimizer\");\nexports.buildOptimizerLoaderPath = __filename;\nconst alwaysProcess = (path) => \n// Always process TS files.\npath.endsWith('.ts') ||\n    path.endsWith('.tsx') ||\n    // Always process factory files.\n    path.endsWith('.ngfactory.js') ||\n    path.endsWith('.ngstyle.js');\nfunction buildOptimizerLoader(content, previousSourceMap) {\n    this.cacheable();\n    const callback = this.async();\n    if (!callback) {\n        throw new Error('Async loader support is required.');\n    }\n    const skipBuildOptimizer = this._module && this._module.factoryMeta && this._module.factoryMeta.skipBuildOptimizer;\n    if (!alwaysProcess(this.resourcePath) && skipBuildOptimizer) {\n        // Skip loading processing this file with Build Optimizer if we determined in\n        // BuildOptimizerWebpackPlugin that we shouldn't.\n        // Webpack typings for previousSourceMap are wrong, they are JSON objects and not strings.\n        // tslint:disable-next-line:no-any\n        this.callback(null, content, previousSourceMap);\n        return;\n    }\n    const options = loaderUtils.getOptions(this) || {};\n    const boOutput = build_optimizer_1.buildOptimizer({\n        content,\n        originalFilePath: this.resourcePath,\n        inputFilePath: this.resourcePath,\n        outputFilePath: this.resourcePath,\n        emitSourceMap: options.sourceMap,\n        isSideEffectFree: this._module && this._module.factoryMeta && this._module.factoryMeta.sideEffectFree,\n    });\n    if (boOutput.emitSkipped || boOutput.content === null) {\n        // tslint:disable-next-line:no-any\n        this.callback(null, content, previousSourceMap);\n        return;\n    }\n    const intermediateSourceMap = boOutput.sourceMap;\n    let newContent = boOutput.content;\n    let newSourceMap;\n    if (options.sourceMap && intermediateSourceMap) {\n        // Webpack doesn't need sourceMappingURL since we pass them on explicitely.\n        newContent = newContent.replace(/^\\/\\/# sourceMappingURL=[^\\r\\n]*/gm, '');\n        if (previousSourceMap) {\n            // Use http://sokra.github.io/source-map-visualization/ to validate sourcemaps make sense.\n            // The last argument is not yet in the typings\n            // tslint:disable-next-line: no-any\n            newSourceMap = new webpack_sources_1.SourceMapSource(newContent, this.resourcePath, intermediateSourceMap, content, previousSourceMap, true).map();\n        }\n        else {\n            // Otherwise just return our generated sourcemap.\n            newSourceMap = intermediateSourceMap;\n        }\n    }\n    // Webpack typings for previousSourceMap are wrong, they are JSON objects and not strings.\n    // tslint:disable-next-line:no-any\n    callback(null, newContent, newSourceMap);\n}\nexports.default = buildOptimizerLoader;\n"]},"metadata":{},"sourceType":"script"}