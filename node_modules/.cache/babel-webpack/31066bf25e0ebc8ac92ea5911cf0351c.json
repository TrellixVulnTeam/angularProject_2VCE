{"ast":null,"code":"\"use strict\";\n\nvar _toConsumableArray = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/toConsumableArray\");\n\nvar _createForOfIteratorHelper = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _classCallCheck = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _get = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/get\");\n\nvar _getPrototypeOf = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/createSuper\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.test = void 0;\n\nvar path_1 = require(\"../path\");\n\nvar buffer_1 = require(\"./buffer\");\n\nvar memory_1 = require(\"./memory\");\n\nvar sync_1 = require(\"./sync\");\n\nvar test;\n\n(function (test) {\n  var TestHost = /*#__PURE__*/function (_memory_1$SimpleMemor) {\n    _inherits(TestHost, _memory_1$SimpleMemor);\n\n    var _super = _createSuper(TestHost);\n\n    function TestHost() {\n      var _this;\n\n      var map = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      _classCallCheck(this, TestHost);\n\n      _this = _super.call(this);\n      _this._records = [];\n      _this._sync = null;\n\n      var _iterator = _createForOfIteratorHelper(Object.getOwnPropertyNames(map)),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var filePath = _step.value;\n\n          _this._write(path_1.normalize(filePath), buffer_1.stringToFileBuffer(map[filePath]));\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      return _this;\n    }\n\n    _createClass(TestHost, [{\n      key: \"records\",\n      get: function get() {\n        return _toConsumableArray(this._records);\n      }\n    }, {\n      key: \"clearRecords\",\n      value: function clearRecords() {\n        this._records = [];\n      }\n    }, {\n      key: \"files\",\n      get: function get() {\n        var sync = this.sync;\n\n        function _visit(p) {\n          return sync.list(p).map(function (fragment) {\n            return path_1.join(p, fragment);\n          }).reduce(function (files, path) {\n            if (sync.isDirectory(path)) {\n              return files.concat(_visit(path));\n            } else {\n              return files.concat(path);\n            }\n          }, []);\n        }\n\n        return _visit(path_1.normalize('/'));\n      }\n    }, {\n      key: \"sync\",\n      get: function get() {\n        if (!this._sync) {\n          this._sync = new sync_1.SyncDelegateHost(this);\n        }\n\n        return this._sync;\n      }\n    }, {\n      key: \"clone\",\n      value: function clone() {\n        var newHost = new TestHost();\n        newHost._cache = new Map(this._cache);\n        return newHost;\n      } // Override parents functions to keep a record of all operators that were done.\n\n    }, {\n      key: \"_write\",\n      value: function _write(path, content) {\n        this._records.push({\n          kind: 'write',\n          path: path\n        });\n\n        return _get(_getPrototypeOf(TestHost.prototype), \"_write\", this).call(this, path, content);\n      }\n    }, {\n      key: \"_read\",\n      value: function _read(path) {\n        this._records.push({\n          kind: 'read',\n          path: path\n        });\n\n        return _get(_getPrototypeOf(TestHost.prototype), \"_read\", this).call(this, path);\n      }\n    }, {\n      key: \"_delete\",\n      value: function _delete(path) {\n        this._records.push({\n          kind: 'delete',\n          path: path\n        });\n\n        return _get(_getPrototypeOf(TestHost.prototype), \"_delete\", this).call(this, path);\n      }\n    }, {\n      key: \"_rename\",\n      value: function _rename(from, to) {\n        this._records.push({\n          kind: 'rename',\n          from: from,\n          to: to\n        });\n\n        return _get(_getPrototypeOf(TestHost.prototype), \"_rename\", this).call(this, from, to);\n      }\n    }, {\n      key: \"_list\",\n      value: function _list(path) {\n        this._records.push({\n          kind: 'list',\n          path: path\n        });\n\n        return _get(_getPrototypeOf(TestHost.prototype), \"_list\", this).call(this, path);\n      }\n    }, {\n      key: \"_exists\",\n      value: function _exists(path) {\n        this._records.push({\n          kind: 'exists',\n          path: path\n        });\n\n        return _get(_getPrototypeOf(TestHost.prototype), \"_exists\", this).call(this, path);\n      }\n    }, {\n      key: \"_isDirectory\",\n      value: function _isDirectory(path) {\n        this._records.push({\n          kind: 'isDirectory',\n          path: path\n        });\n\n        return _get(_getPrototypeOf(TestHost.prototype), \"_isDirectory\", this).call(this, path);\n      }\n    }, {\n      key: \"_isFile\",\n      value: function _isFile(path) {\n        this._records.push({\n          kind: 'isFile',\n          path: path\n        });\n\n        return _get(_getPrototypeOf(TestHost.prototype), \"_isFile\", this).call(this, path);\n      }\n    }, {\n      key: \"_stat\",\n      value: function _stat(path) {\n        this._records.push({\n          kind: 'stat',\n          path: path\n        });\n\n        return _get(_getPrototypeOf(TestHost.prototype), \"_stat\", this).call(this, path);\n      }\n    }, {\n      key: \"_watch\",\n      value: function _watch(path, options) {\n        this._records.push({\n          kind: 'watch',\n          path: path\n        });\n\n        return _get(_getPrototypeOf(TestHost.prototype), \"_watch\", this).call(this, path, options);\n      }\n    }, {\n      key: \"$write\",\n      value: function $write(path, content) {\n        return _get(_getPrototypeOf(TestHost.prototype), \"_write\", this).call(this, path_1.normalize(path), buffer_1.stringToFileBuffer(content));\n      }\n    }, {\n      key: \"$read\",\n      value: function $read(path) {\n        return buffer_1.fileBufferToString(_get(_getPrototypeOf(TestHost.prototype), \"_read\", this).call(this, path_1.normalize(path)));\n      }\n    }, {\n      key: \"$list\",\n      value: function $list(path) {\n        return _get(_getPrototypeOf(TestHost.prototype), \"_list\", this).call(this, path_1.normalize(path));\n      }\n    }, {\n      key: \"$exists\",\n      value: function $exists(path) {\n        return _get(_getPrototypeOf(TestHost.prototype), \"_exists\", this).call(this, path_1.normalize(path));\n      }\n    }, {\n      key: \"$isDirectory\",\n      value: function $isDirectory(path) {\n        return _get(_getPrototypeOf(TestHost.prototype), \"_isDirectory\", this).call(this, path_1.normalize(path));\n      }\n    }, {\n      key: \"$isFile\",\n      value: function $isFile(path) {\n        return _get(_getPrototypeOf(TestHost.prototype), \"_isFile\", this).call(this, path_1.normalize(path));\n      }\n    }]);\n\n    return TestHost;\n  }(memory_1.SimpleMemoryHost);\n\n  test.TestHost = TestHost;\n})(test = exports.test || (exports.test = {}));","map":{"version":3,"sources":["/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@angular-devkit/build-angular/node_modules/@angular-devkit/core/src/virtual-fs/host/test.js"],"names":["Object","defineProperty","exports","value","test","path_1","require","buffer_1","memory_1","sync_1","TestHost","map","_records","_sync","getOwnPropertyNames","filePath","_write","normalize","stringToFileBuffer","sync","_visit","p","list","fragment","join","reduce","files","path","isDirectory","concat","SyncDelegateHost","newHost","_cache","Map","content","push","kind","from","to","options","fileBufferToString","SimpleMemoryHost"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.test = void 0;\nconst path_1 = require(\"../path\");\nconst buffer_1 = require(\"./buffer\");\nconst memory_1 = require(\"./memory\");\nconst sync_1 = require(\"./sync\");\nvar test;\n(function (test) {\n    class TestHost extends memory_1.SimpleMemoryHost {\n        constructor(map = {}) {\n            super();\n            this._records = [];\n            this._sync = null;\n            for (const filePath of Object.getOwnPropertyNames(map)) {\n                this._write(path_1.normalize(filePath), buffer_1.stringToFileBuffer(map[filePath]));\n            }\n        }\n        get records() {\n            return [...this._records];\n        }\n        clearRecords() {\n            this._records = [];\n        }\n        get files() {\n            const sync = this.sync;\n            function _visit(p) {\n                return sync.list(p)\n                    .map(fragment => path_1.join(p, fragment))\n                    .reduce((files, path) => {\n                    if (sync.isDirectory(path)) {\n                        return files.concat(_visit(path));\n                    }\n                    else {\n                        return files.concat(path);\n                    }\n                }, []);\n            }\n            return _visit(path_1.normalize('/'));\n        }\n        get sync() {\n            if (!this._sync) {\n                this._sync = new sync_1.SyncDelegateHost(this);\n            }\n            return this._sync;\n        }\n        clone() {\n            const newHost = new TestHost();\n            newHost._cache = new Map(this._cache);\n            return newHost;\n        }\n        // Override parents functions to keep a record of all operators that were done.\n        _write(path, content) {\n            this._records.push({ kind: 'write', path });\n            return super._write(path, content);\n        }\n        _read(path) {\n            this._records.push({ kind: 'read', path });\n            return super._read(path);\n        }\n        _delete(path) {\n            this._records.push({ kind: 'delete', path });\n            return super._delete(path);\n        }\n        _rename(from, to) {\n            this._records.push({ kind: 'rename', from, to });\n            return super._rename(from, to);\n        }\n        _list(path) {\n            this._records.push({ kind: 'list', path });\n            return super._list(path);\n        }\n        _exists(path) {\n            this._records.push({ kind: 'exists', path });\n            return super._exists(path);\n        }\n        _isDirectory(path) {\n            this._records.push({ kind: 'isDirectory', path });\n            return super._isDirectory(path);\n        }\n        _isFile(path) {\n            this._records.push({ kind: 'isFile', path });\n            return super._isFile(path);\n        }\n        _stat(path) {\n            this._records.push({ kind: 'stat', path });\n            return super._stat(path);\n        }\n        _watch(path, options) {\n            this._records.push({ kind: 'watch', path });\n            return super._watch(path, options);\n        }\n        $write(path, content) {\n            return super._write(path_1.normalize(path), buffer_1.stringToFileBuffer(content));\n        }\n        $read(path) {\n            return buffer_1.fileBufferToString(super._read(path_1.normalize(path)));\n        }\n        $list(path) {\n            return super._list(path_1.normalize(path));\n        }\n        $exists(path) {\n            return super._exists(path_1.normalize(path));\n        }\n        $isDirectory(path) {\n            return super._isDirectory(path_1.normalize(path));\n        }\n        $isFile(path) {\n            return super._isFile(path_1.normalize(path));\n        }\n    }\n    test.TestHost = TestHost;\n})(test = exports.test || (exports.test = {}));\n"]},"metadata":{},"sourceType":"script"}