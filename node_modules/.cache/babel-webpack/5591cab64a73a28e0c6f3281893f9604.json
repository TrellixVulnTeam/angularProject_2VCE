{"ast":null,"code":"(function (factory) {\n  if (typeof module === \"object\" && typeof module.exports === \"object\") {\n    var v = factory(require, exports);\n    if (v !== undefined) module.exports = v;\n  } else if (typeof define === \"function\" && define.amd) {\n    define(\"@angular/compiler-cli/src/ngtsc/file_system/src/node_js_file_system\", [\"require\", \"exports\", \"tslib\", \"fs\", \"fs-extra\", \"path\"], factory);\n  }\n})(function (require, exports) {\n  \"use strict\";\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.NodeJSFileSystem = exports.NodeJSReadonlyFileSystem = exports.NodeJSPathManipulation = void 0;\n\n  var tslib_1 = require(\"tslib\");\n  /**\n   * @license\n   * Copyright Google LLC All Rights Reserved.\n   *\n   * Use of this source code is governed by an MIT-style license that can be\n   * found in the LICENSE file at https://angular.io/license\n   */\n  /// <reference types=\"node\" />\n\n\n  var fs = require(\"fs\");\n\n  var fsExtra = require(\"fs-extra\");\n\n  var p = require(\"path\");\n  /**\n   * A wrapper around the Node.js file-system that supports path manipulation.\n   */\n\n\n  var NodeJSPathManipulation =\n  /** @class */\n  function () {\n    function NodeJSPathManipulation() {}\n\n    NodeJSPathManipulation.prototype.pwd = function () {\n      return this.normalize(process.cwd());\n    };\n\n    NodeJSPathManipulation.prototype.chdir = function (dir) {\n      process.chdir(dir);\n    };\n\n    NodeJSPathManipulation.prototype.resolve = function () {\n      var paths = [];\n\n      for (var _i = 0; _i < arguments.length; _i++) {\n        paths[_i] = arguments[_i];\n      }\n\n      return this.normalize(p.resolve.apply(p, tslib_1.__spread(paths)));\n    };\n\n    NodeJSPathManipulation.prototype.dirname = function (file) {\n      return this.normalize(p.dirname(file));\n    };\n\n    NodeJSPathManipulation.prototype.join = function (basePath) {\n      var paths = [];\n\n      for (var _i = 1; _i < arguments.length; _i++) {\n        paths[_i - 1] = arguments[_i];\n      }\n\n      return this.normalize(p.join.apply(p, tslib_1.__spread([basePath], paths)));\n    };\n\n    NodeJSPathManipulation.prototype.isRoot = function (path) {\n      return this.dirname(path) === this.normalize(path);\n    };\n\n    NodeJSPathManipulation.prototype.isRooted = function (path) {\n      return p.isAbsolute(path);\n    };\n\n    NodeJSPathManipulation.prototype.relative = function (from, to) {\n      return this.normalize(p.relative(from, to));\n    };\n\n    NodeJSPathManipulation.prototype.basename = function (filePath, extension) {\n      return p.basename(filePath, extension);\n    };\n\n    NodeJSPathManipulation.prototype.extname = function (path) {\n      return p.extname(path);\n    };\n\n    NodeJSPathManipulation.prototype.normalize = function (path) {\n      // Convert backslashes to forward slashes\n      return path.replace(/\\\\/g, '/');\n    };\n\n    return NodeJSPathManipulation;\n  }();\n\n  exports.NodeJSPathManipulation = NodeJSPathManipulation;\n  /**\n   * A wrapper around the Node.js file-system that supports readonly operations and path manipulation.\n   */\n\n  var NodeJSReadonlyFileSystem =\n  /** @class */\n  function (_super) {\n    tslib_1.__extends(NodeJSReadonlyFileSystem, _super);\n\n    function NodeJSReadonlyFileSystem() {\n      var _this = _super !== null && _super.apply(this, arguments) || this;\n\n      _this._caseSensitive = undefined;\n      return _this;\n    }\n\n    NodeJSReadonlyFileSystem.prototype.isCaseSensitive = function () {\n      if (this._caseSensitive === undefined) {\n        // Note the use of the real file-system is intentional:\n        // `this.exists()` relies upon `isCaseSensitive()` so that would cause an infinite recursion.\n        this._caseSensitive = !fs.existsSync(this.normalize(toggleCase(__filename)));\n      }\n\n      return this._caseSensitive;\n    };\n\n    NodeJSReadonlyFileSystem.prototype.exists = function (path) {\n      return fs.existsSync(path);\n    };\n\n    NodeJSReadonlyFileSystem.prototype.readFile = function (path) {\n      return fs.readFileSync(path, 'utf8');\n    };\n\n    NodeJSReadonlyFileSystem.prototype.readFileBuffer = function (path) {\n      return fs.readFileSync(path);\n    };\n\n    NodeJSReadonlyFileSystem.prototype.readdir = function (path) {\n      return fs.readdirSync(path);\n    };\n\n    NodeJSReadonlyFileSystem.prototype.lstat = function (path) {\n      return fs.lstatSync(path);\n    };\n\n    NodeJSReadonlyFileSystem.prototype.stat = function (path) {\n      return fs.statSync(path);\n    };\n\n    NodeJSReadonlyFileSystem.prototype.realpath = function (path) {\n      return this.resolve(fs.realpathSync(path));\n    };\n\n    NodeJSReadonlyFileSystem.prototype.getDefaultLibLocation = function () {\n      return this.resolve(require.resolve('typescript'), '..');\n    };\n\n    return NodeJSReadonlyFileSystem;\n  }(NodeJSPathManipulation);\n\n  exports.NodeJSReadonlyFileSystem = NodeJSReadonlyFileSystem;\n  /**\n   * A wrapper around the Node.js file-system (i.e. the `fs` package).\n   */\n\n  var NodeJSFileSystem =\n  /** @class */\n  function (_super) {\n    tslib_1.__extends(NodeJSFileSystem, _super);\n\n    function NodeJSFileSystem() {\n      return _super !== null && _super.apply(this, arguments) || this;\n    }\n\n    NodeJSFileSystem.prototype.writeFile = function (path, data, exclusive) {\n      if (exclusive === void 0) {\n        exclusive = false;\n      }\n\n      fs.writeFileSync(path, data, exclusive ? {\n        flag: 'wx'\n      } : undefined);\n    };\n\n    NodeJSFileSystem.prototype.removeFile = function (path) {\n      fs.unlinkSync(path);\n    };\n\n    NodeJSFileSystem.prototype.symlink = function (target, path) {\n      fs.symlinkSync(target, path);\n    };\n\n    NodeJSFileSystem.prototype.copyFile = function (from, to) {\n      fs.copyFileSync(from, to);\n    };\n\n    NodeJSFileSystem.prototype.moveFile = function (from, to) {\n      fs.renameSync(from, to);\n    };\n\n    NodeJSFileSystem.prototype.ensureDir = function (path) {\n      var parents = [];\n\n      while (!this.isRoot(path) && !this.exists(path)) {\n        parents.push(path);\n        path = this.dirname(path);\n      }\n\n      while (parents.length) {\n        this.safeMkdir(parents.pop());\n      }\n    };\n\n    NodeJSFileSystem.prototype.removeDeep = function (path) {\n      fsExtra.removeSync(path);\n    };\n\n    NodeJSFileSystem.prototype.safeMkdir = function (path) {\n      try {\n        fs.mkdirSync(path);\n      } catch (err) {\n        // Ignore the error, if the path already exists and points to a directory.\n        // Re-throw otherwise.\n        if (!this.exists(path) || !this.stat(path).isDirectory()) {\n          throw err;\n        }\n      }\n    };\n\n    return NodeJSFileSystem;\n  }(NodeJSReadonlyFileSystem);\n\n  exports.NodeJSFileSystem = NodeJSFileSystem;\n  /**\n   * Toggle the case of each character in a string.\n   */\n\n  function toggleCase(str) {\n    return str.replace(/\\w/g, function (ch) {\n      return ch.toUpperCase() === ch ? ch.toLowerCase() : ch.toUpperCase();\n    });\n  }\n});","map":{"version":3,"sources":["../../../../../../../../../packages/compiler-cli/src/ngtsc/file_system/src/node_js_file_system.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/// <reference types=\"node\" />\nimport * as fs from 'fs';\nimport * as fsExtra from 'fs-extra';\nimport * as p from 'path';\nimport {AbsoluteFsPath, FileStats, FileSystem, PathManipulation, PathSegment, PathString, ReadonlyFileSystem} from './types';\n\n/**\n * A wrapper around the Node.js file-system that supports path manipulation.\n */\nexport class NodeJSPathManipulation implements PathManipulation {\n  pwd(): AbsoluteFsPath {\n    return this.normalize(process.cwd()) as AbsoluteFsPath;\n  }\n  chdir(dir: AbsoluteFsPath): void {\n    process.chdir(dir);\n  }\n  resolve(...paths: string[]): AbsoluteFsPath {\n    return this.normalize(p.resolve(...paths)) as AbsoluteFsPath;\n  }\n\n  dirname<T extends string>(file: T): T {\n    return this.normalize(p.dirname(file)) as T;\n  }\n  join<T extends string>(basePath: T, ...paths: string[]): T {\n    return this.normalize(p.join(basePath, ...paths)) as T;\n  }\n  isRoot(path: AbsoluteFsPath): boolean {\n    return this.dirname(path) === this.normalize(path);\n  }\n  isRooted(path: string): boolean {\n    return p.isAbsolute(path);\n  }\n  relative<T extends PathString>(from: T, to: T): PathSegment|AbsoluteFsPath {\n    return this.normalize(p.relative(from, to)) as PathSegment | AbsoluteFsPath;\n  }\n  basename(filePath: string, extension?: string): PathSegment {\n    return p.basename(filePath, extension) as PathSegment;\n  }\n  extname(path: AbsoluteFsPath|PathSegment): string {\n    return p.extname(path);\n  }\n  normalize<T extends string>(path: T): T {\n    // Convert backslashes to forward slashes\n    return path.replace(/\\\\/g, '/') as T;\n  }\n}\n\n/**\n * A wrapper around the Node.js file-system that supports readonly operations and path manipulation.\n */\nexport class NodeJSReadonlyFileSystem extends NodeJSPathManipulation implements ReadonlyFileSystem {\n  private _caseSensitive: boolean|undefined = undefined;\n  isCaseSensitive(): boolean {\n    if (this._caseSensitive === undefined) {\n      // Note the use of the real file-system is intentional:\n      // `this.exists()` relies upon `isCaseSensitive()` so that would cause an infinite recursion.\n      this._caseSensitive = !fs.existsSync(this.normalize(toggleCase(__filename)));\n    }\n    return this._caseSensitive;\n  }\n  exists(path: AbsoluteFsPath): boolean {\n    return fs.existsSync(path);\n  }\n  readFile(path: AbsoluteFsPath): string {\n    return fs.readFileSync(path, 'utf8');\n  }\n  readFileBuffer(path: AbsoluteFsPath): Uint8Array {\n    return fs.readFileSync(path);\n  }\n  readdir(path: AbsoluteFsPath): PathSegment[] {\n    return fs.readdirSync(path) as PathSegment[];\n  }\n  lstat(path: AbsoluteFsPath): FileStats {\n    return fs.lstatSync(path);\n  }\n  stat(path: AbsoluteFsPath): FileStats {\n    return fs.statSync(path);\n  }\n  realpath(path: AbsoluteFsPath): AbsoluteFsPath {\n    return this.resolve(fs.realpathSync(path));\n  }\n  getDefaultLibLocation(): AbsoluteFsPath {\n    return this.resolve(require.resolve('typescript'), '..');\n  }\n}\n\n/**\n * A wrapper around the Node.js file-system (i.e. the `fs` package).\n */\nexport class NodeJSFileSystem extends NodeJSReadonlyFileSystem implements FileSystem {\n  writeFile(path: AbsoluteFsPath, data: string|Uint8Array, exclusive: boolean = false): void {\n    fs.writeFileSync(path, data, exclusive ? {flag: 'wx'} : undefined);\n  }\n  removeFile(path: AbsoluteFsPath): void {\n    fs.unlinkSync(path);\n  }\n  symlink(target: AbsoluteFsPath, path: AbsoluteFsPath): void {\n    fs.symlinkSync(target, path);\n  }\n  copyFile(from: AbsoluteFsPath, to: AbsoluteFsPath): void {\n    fs.copyFileSync(from, to);\n  }\n  moveFile(from: AbsoluteFsPath, to: AbsoluteFsPath): void {\n    fs.renameSync(from, to);\n  }\n  ensureDir(path: AbsoluteFsPath): void {\n    const parents: AbsoluteFsPath[] = [];\n    while (!this.isRoot(path) && !this.exists(path)) {\n      parents.push(path);\n      path = this.dirname(path);\n    }\n    while (parents.length) {\n      this.safeMkdir(parents.pop()!);\n    }\n  }\n  removeDeep(path: AbsoluteFsPath): void {\n    fsExtra.removeSync(path);\n  }\n\n  private safeMkdir(path: AbsoluteFsPath): void {\n    try {\n      fs.mkdirSync(path);\n    } catch (err) {\n      // Ignore the error, if the path already exists and points to a directory.\n      // Re-throw otherwise.\n      if (!this.exists(path) || !this.stat(path).isDirectory()) {\n        throw err;\n      }\n    }\n  }\n}\n\n/**\n * Toggle the case of each character in a string.\n */\nfunction toggleCase(str: string): string {\n  return str.replace(/\\w/g, ch => ch.toUpperCase() === ch ? ch.toLowerCase() : ch.toUpperCase());\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}