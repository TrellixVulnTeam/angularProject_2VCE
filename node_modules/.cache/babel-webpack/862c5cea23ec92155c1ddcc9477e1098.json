{"ast":null,"code":"\"use strict\";\n\nvar _toConsumableArray = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/toConsumableArray\");\n\nvar _regeneratorRuntime = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _slicedToArray = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nvar _inherits = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar _classCallCheck = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _objectSpread = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/objectSpread2\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Architect = void 0;\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nvar core_1 = require(\"@angular-devkit/core\");\n\nvar rxjs_1 = require(\"rxjs\");\n\nvar operators_1 = require(\"rxjs/operators\");\n\nvar api_1 = require(\"./api\");\n\nvar schedule_by_name_1 = require(\"./schedule-by-name\");\n\nvar inputSchema = require('./input-schema.json');\n\nvar outputSchema = require('./output-schema.json');\n\nfunction _createJobHandlerFromBuilderInfo(info, target, host, registry, baseOptions) {\n  var jobDescription = {\n    name: target ? \"{\".concat(api_1.targetStringFromTarget(target), \"}\") : info.builderName,\n    argument: {\n      type: 'object'\n    },\n    input: inputSchema,\n    output: outputSchema,\n    info: info\n  };\n\n  function handler(argument, context) {\n    // Add input validation to the inbound bus.\n    var inboundBusWithInputValidation = context.inboundBus.pipe(operators_1.concatMap(function (message) {\n      if (message.kind === core_1.experimental.jobs.JobInboundMessageKind.Input) {\n        var v = message.value;\n\n        var options = _objectSpread(_objectSpread({}, baseOptions), v.options); // Validate v against the options schema.\n\n\n        return registry.compile(info.optionSchema).pipe(operators_1.concatMap(function (validation) {\n          return validation(options);\n        }), operators_1.map(function (validationResult) {\n          var data = validationResult.data,\n              success = validationResult.success,\n              errors = validationResult.errors;\n\n          if (success) {\n            return _objectSpread(_objectSpread({}, v), {}, {\n              options: data\n            });\n          }\n\n          throw new core_1.json.schema.SchemaValidationException(errors);\n        }), operators_1.map(function (value) {\n          return _objectSpread(_objectSpread({}, message), {}, {\n            value: value\n          });\n        }));\n      } else {\n        return rxjs_1.of(message);\n      }\n    }), // Using a share replay because the job might be synchronously sending input, but\n    // asynchronously listening to it.\n    operators_1.shareReplay(1)); // Make an inboundBus that completes instead of erroring out.\n    // We'll merge the errors into the output instead.\n\n    var inboundBus = rxjs_1.onErrorResumeNext(inboundBusWithInputValidation);\n    var output = rxjs_1.from(host.loadBuilder(info)).pipe(operators_1.concatMap(function (builder) {\n      if (builder === null) {\n        throw new Error(\"Cannot load builder for builderInfo \".concat(JSON.stringify(info, null, 2)));\n      }\n\n      return builder.handler(argument, _objectSpread(_objectSpread({}, context), {}, {\n        inboundBus: inboundBus\n      })).pipe(operators_1.map(function (output) {\n        if (output.kind === core_1.experimental.jobs.JobOutboundMessageKind.Output) {\n          // Add target to it.\n          return _objectSpread(_objectSpread({}, output), {}, {\n            value: _objectSpread(_objectSpread({}, output.value), target ? {\n              target: target\n            } : 0)\n          });\n        } else {\n          return output;\n        }\n      }));\n    }), // Share subscriptions to the output, otherwise the the handler will be re-run.\n    operators_1.shareReplay()); // Separate the errors from the inbound bus into their own observable that completes when the\n    // builder output does.\n\n    var inboundBusErrors = inboundBusWithInputValidation.pipe(operators_1.ignoreElements(), operators_1.takeUntil(rxjs_1.onErrorResumeNext(output.pipe(operators_1.last())))); // Return the builder output plus any input errors.\n\n    return rxjs_1.merge(inboundBusErrors, output);\n  }\n\n  return rxjs_1.of(Object.assign(handler, {\n    jobDescription: jobDescription\n  }));\n}\n/**\n * A JobRegistry that resolves builder targets from the host.\n */\n\n\nvar ArchitectBuilderJobRegistry = /*#__PURE__*/function () {\n  function ArchitectBuilderJobRegistry(_host, _registry, _jobCache, _infoCache) {\n    _classCallCheck(this, ArchitectBuilderJobRegistry);\n\n    this._host = _host;\n    this._registry = _registry;\n    this._jobCache = _jobCache;\n    this._infoCache = _infoCache;\n  }\n\n  _createClass(ArchitectBuilderJobRegistry, [{\n    key: \"_resolveBuilder\",\n    value: function _resolveBuilder(name) {\n      var cache = this._infoCache;\n\n      if (cache) {\n        var maybeCache = cache.get(name);\n\n        if (maybeCache !== undefined) {\n          return maybeCache;\n        }\n\n        var info = rxjs_1.from(this._host.resolveBuilder(name)).pipe(operators_1.shareReplay(1));\n        cache.set(name, info);\n        return info;\n      }\n\n      return rxjs_1.from(this._host.resolveBuilder(name));\n    }\n  }, {\n    key: \"_createBuilder\",\n    value: function _createBuilder(info, target, options) {\n      var cache = this._jobCache;\n\n      if (target) {\n        var maybeHit = cache && cache.get(api_1.targetStringFromTarget(target));\n\n        if (maybeHit) {\n          return maybeHit;\n        }\n      } else {\n        var _maybeHit = cache && cache.get(info.builderName);\n\n        if (_maybeHit) {\n          return _maybeHit;\n        }\n      }\n\n      var result = _createJobHandlerFromBuilderInfo(info, target, this._host, this._registry, options || {});\n\n      if (cache) {\n        if (target) {\n          cache.set(api_1.targetStringFromTarget(target), result.pipe(operators_1.shareReplay(1)));\n        } else {\n          cache.set(info.builderName, result.pipe(operators_1.shareReplay(1)));\n        }\n      }\n\n      return result;\n    }\n  }, {\n    key: \"get\",\n    value: function get(name) {\n      var _this = this;\n\n      var m = name.match(/^([^:]+):([^:]+)$/i);\n\n      if (!m) {\n        return rxjs_1.of(null);\n      }\n\n      return rxjs_1.from(this._resolveBuilder(name)).pipe(operators_1.concatMap(function (builderInfo) {\n        return builderInfo ? _this._createBuilder(builderInfo) : rxjs_1.of(null);\n      }), operators_1.first(null, null));\n    }\n  }]);\n\n  return ArchitectBuilderJobRegistry;\n}();\n/**\n * A JobRegistry that resolves targets from the host.\n */\n\n\nvar ArchitectTargetJobRegistry = /*#__PURE__*/function (_ArchitectBuilderJobR) {\n  _inherits(ArchitectTargetJobRegistry, _ArchitectBuilderJobR);\n\n  var _super = _createSuper(ArchitectTargetJobRegistry);\n\n  function ArchitectTargetJobRegistry() {\n    _classCallCheck(this, ArchitectTargetJobRegistry);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(ArchitectTargetJobRegistry, [{\n    key: \"get\",\n    value: function get(name) {\n      var _this2 = this;\n\n      var m = name.match(/^{([^:]+):([^:]+)(?::([^:]*))?}$/i);\n\n      if (!m) {\n        return rxjs_1.of(null);\n      }\n\n      var target = {\n        project: m[1],\n        target: m[2],\n        configuration: m[3]\n      };\n      return rxjs_1.from(Promise.all([this._host.getBuilderNameForTarget(target), this._host.getOptionsForTarget(target)])).pipe(operators_1.concatMap(function (_ref) {\n        var _ref2 = _slicedToArray(_ref, 2),\n            builderStr = _ref2[0],\n            options = _ref2[1];\n\n        if (builderStr === null || options === null) {\n          return rxjs_1.of(null);\n        }\n\n        return _this2._resolveBuilder(builderStr).pipe(operators_1.concatMap(function (builderInfo) {\n          if (builderInfo === null) {\n            return rxjs_1.of(null);\n          }\n\n          return _this2._createBuilder(builderInfo, target, options);\n        }));\n      }), operators_1.first(null, null));\n    }\n  }]);\n\n  return ArchitectTargetJobRegistry;\n}(ArchitectBuilderJobRegistry);\n\nfunction _getTargetOptionsFactory(host) {\n  return core_1.experimental.jobs.createJobHandler(function (target) {\n    return host.getOptionsForTarget(target).then(function (options) {\n      if (options === null) {\n        throw new Error(\"Invalid target: \".concat(JSON.stringify(target), \".\"));\n      }\n\n      return options;\n    });\n  }, {\n    name: '..getTargetOptions',\n    output: {\n      type: 'object'\n    },\n    argument: inputSchema.properties.target\n  });\n}\n\nfunction _getProjectMetadataFactory(host) {\n  return core_1.experimental.jobs.createJobHandler(function (target) {\n    return host.getProjectMetadata(target).then(function (options) {\n      if (options === null) {\n        throw new Error(\"Invalid target: \".concat(JSON.stringify(target), \".\"));\n      }\n\n      return options;\n    });\n  }, {\n    name: '..getProjectMetadata',\n    output: {\n      type: 'object'\n    },\n    argument: {\n      oneOf: [{\n        type: 'string'\n      }, inputSchema.properties.target]\n    }\n  });\n}\n\nfunction _getBuilderNameForTargetFactory(host) {\n  return core_1.experimental.jobs.createJobHandler( /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(target) {\n      var builderName;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return host.getBuilderNameForTarget(target);\n\n            case 2:\n              builderName = _context.sent;\n\n              if (builderName) {\n                _context.next = 5;\n                break;\n              }\n\n              throw new Error(\"No builder were found for target \".concat(api_1.targetStringFromTarget(target), \".\"));\n\n            case 5:\n              return _context.abrupt(\"return\", builderName);\n\n            case 6:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function (_x) {\n      return _ref3.apply(this, arguments);\n    };\n  }(), {\n    name: '..getBuilderNameForTarget',\n    output: {\n      type: 'string'\n    },\n    argument: inputSchema.properties.target\n  });\n}\n\nfunction _validateOptionsFactory(host, registry) {\n  return core_1.experimental.jobs.createJobHandler( /*#__PURE__*/function () {\n    var _ref5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(_ref4) {\n      var _ref6, builderName, options, builderInfo;\n\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _ref6 = _slicedToArray(_ref4, 2), builderName = _ref6[0], options = _ref6[1];\n              _context2.next = 3;\n              return host.resolveBuilder(builderName);\n\n            case 3:\n              builderInfo = _context2.sent;\n\n              if (builderInfo) {\n                _context2.next = 6;\n                break;\n              }\n\n              throw new Error(\"No builder info were found for builder \".concat(JSON.stringify(builderName), \".\"));\n\n            case 6:\n              return _context2.abrupt(\"return\", registry.compile(builderInfo.optionSchema).pipe(operators_1.concatMap(function (validation) {\n                return validation(options);\n              }), operators_1.switchMap(function (_ref7) {\n                var data = _ref7.data,\n                    success = _ref7.success,\n                    errors = _ref7.errors;\n\n                if (success) {\n                  return rxjs_1.of(data);\n                }\n\n                throw new core_1.json.schema.SchemaValidationException(errors);\n              })).toPromise());\n\n            case 7:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function (_x2) {\n      return _ref5.apply(this, arguments);\n    };\n  }(), {\n    name: '..validateOptions',\n    output: {\n      type: 'object'\n    },\n    argument: {\n      type: 'array',\n      items: [{\n        type: 'string'\n      }, {\n        type: 'object'\n      }]\n    }\n  });\n}\n\nvar Architect = /*#__PURE__*/function () {\n  function Architect(_host) {\n    var registry = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new core_1.json.schema.CoreSchemaRegistry();\n    var additionalJobRegistry = arguments.length > 2 ? arguments[2] : undefined;\n\n    _classCallCheck(this, Architect);\n\n    this._host = _host;\n    this._jobCache = new Map();\n    this._infoCache = new Map();\n    var privateArchitectJobRegistry = new core_1.experimental.jobs.SimpleJobRegistry(); // Create private jobs.\n\n    privateArchitectJobRegistry.register(_getTargetOptionsFactory(_host));\n    privateArchitectJobRegistry.register(_getBuilderNameForTargetFactory(_host));\n    privateArchitectJobRegistry.register(_validateOptionsFactory(_host, registry));\n    privateArchitectJobRegistry.register(_getProjectMetadataFactory(_host));\n    var jobRegistry = new core_1.experimental.jobs.FallbackRegistry([new ArchitectTargetJobRegistry(_host, registry, this._jobCache, this._infoCache), new ArchitectBuilderJobRegistry(_host, registry, this._jobCache, this._infoCache), privateArchitectJobRegistry].concat(_toConsumableArray(additionalJobRegistry ? [additionalJobRegistry] : [])));\n    this._scheduler = new core_1.experimental.jobs.SimpleScheduler(jobRegistry, registry);\n  }\n\n  _createClass(Architect, [{\n    key: \"has\",\n    value: function has(name) {\n      return this._scheduler.has(name);\n    }\n  }, {\n    key: \"scheduleBuilder\",\n    value: function scheduleBuilder(name, options) {\n      var scheduleOptions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n      // The below will match 'project:target:configuration'\n      if (!/^[^:]+:[^:]+(:[^:]+)?$/.test(name)) {\n        throw new Error('Invalid builder name: ' + JSON.stringify(name));\n      }\n\n      return schedule_by_name_1.scheduleByName(name, options, {\n        scheduler: this._scheduler,\n        logger: scheduleOptions.logger || new core_1.logging.NullLogger(),\n        currentDirectory: this._host.getCurrentDirectory(),\n        workspaceRoot: this._host.getWorkspaceRoot(),\n        analytics: scheduleOptions.analytics\n      });\n    }\n  }, {\n    key: \"scheduleTarget\",\n    value: function scheduleTarget(target) {\n      var overrides = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var scheduleOptions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      return schedule_by_name_1.scheduleByTarget(target, overrides, {\n        scheduler: this._scheduler,\n        logger: scheduleOptions.logger || new core_1.logging.NullLogger(),\n        currentDirectory: this._host.getCurrentDirectory(),\n        workspaceRoot: this._host.getWorkspaceRoot(),\n        analytics: scheduleOptions.analytics\n      });\n    }\n  }]);\n\n  return Architect;\n}();\n\nexports.Architect = Architect;","map":{"version":3,"sources":["/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@angular-devkit/architect/src/architect.js"],"names":["Object","defineProperty","exports","value","Architect","core_1","require","rxjs_1","operators_1","api_1","schedule_by_name_1","inputSchema","outputSchema","_createJobHandlerFromBuilderInfo","info","target","host","registry","baseOptions","jobDescription","name","targetStringFromTarget","builderName","argument","type","input","output","handler","context","inboundBusWithInputValidation","inboundBus","pipe","concatMap","message","kind","experimental","jobs","JobInboundMessageKind","Input","v","options","compile","optionSchema","validation","map","validationResult","data","success","errors","json","schema","SchemaValidationException","of","shareReplay","onErrorResumeNext","from","loadBuilder","builder","Error","JSON","stringify","JobOutboundMessageKind","Output","inboundBusErrors","ignoreElements","takeUntil","last","merge","assign","ArchitectBuilderJobRegistry","_host","_registry","_jobCache","_infoCache","cache","maybeCache","get","undefined","resolveBuilder","set","maybeHit","result","m","match","_resolveBuilder","builderInfo","_createBuilder","first","ArchitectTargetJobRegistry","project","configuration","Promise","all","getBuilderNameForTarget","getOptionsForTarget","builderStr","_getTargetOptionsFactory","createJobHandler","then","properties","_getProjectMetadataFactory","getProjectMetadata","oneOf","_getBuilderNameForTargetFactory","_validateOptionsFactory","switchMap","toPromise","items","CoreSchemaRegistry","additionalJobRegistry","Map","privateArchitectJobRegistry","SimpleJobRegistry","register","jobRegistry","FallbackRegistry","_scheduler","SimpleScheduler","has","scheduleOptions","test","scheduleByName","scheduler","logger","logging","NullLogger","currentDirectory","getCurrentDirectory","workspaceRoot","getWorkspaceRoot","analytics","overrides","scheduleByTarget"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Architect = void 0;\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst core_1 = require(\"@angular-devkit/core\");\nconst rxjs_1 = require(\"rxjs\");\nconst operators_1 = require(\"rxjs/operators\");\nconst api_1 = require(\"./api\");\nconst schedule_by_name_1 = require(\"./schedule-by-name\");\nconst inputSchema = require('./input-schema.json');\nconst outputSchema = require('./output-schema.json');\nfunction _createJobHandlerFromBuilderInfo(info, target, host, registry, baseOptions) {\n    const jobDescription = {\n        name: target ? `{${api_1.targetStringFromTarget(target)}}` : info.builderName,\n        argument: { type: 'object' },\n        input: inputSchema,\n        output: outputSchema,\n        info,\n    };\n    function handler(argument, context) {\n        // Add input validation to the inbound bus.\n        const inboundBusWithInputValidation = context.inboundBus.pipe(operators_1.concatMap(message => {\n            if (message.kind === core_1.experimental.jobs.JobInboundMessageKind.Input) {\n                const v = message.value;\n                const options = {\n                    ...baseOptions,\n                    ...v.options,\n                };\n                // Validate v against the options schema.\n                return registry.compile(info.optionSchema).pipe(operators_1.concatMap(validation => validation(options)), operators_1.map((validationResult) => {\n                    const { data, success, errors } = validationResult;\n                    if (success) {\n                        return { ...v, options: data };\n                    }\n                    throw new core_1.json.schema.SchemaValidationException(errors);\n                }), operators_1.map(value => ({ ...message, value })));\n            }\n            else {\n                return rxjs_1.of(message);\n            }\n        }), \n        // Using a share replay because the job might be synchronously sending input, but\n        // asynchronously listening to it.\n        operators_1.shareReplay(1));\n        // Make an inboundBus that completes instead of erroring out.\n        // We'll merge the errors into the output instead.\n        const inboundBus = rxjs_1.onErrorResumeNext(inboundBusWithInputValidation);\n        const output = rxjs_1.from(host.loadBuilder(info)).pipe(operators_1.concatMap(builder => {\n            if (builder === null) {\n                throw new Error(`Cannot load builder for builderInfo ${JSON.stringify(info, null, 2)}`);\n            }\n            return builder.handler(argument, { ...context, inboundBus }).pipe(operators_1.map(output => {\n                if (output.kind === core_1.experimental.jobs.JobOutboundMessageKind.Output) {\n                    // Add target to it.\n                    return {\n                        ...output,\n                        value: {\n                            ...output.value,\n                            ...target ? { target } : 0,\n                        },\n                    };\n                }\n                else {\n                    return output;\n                }\n            }));\n        }), \n        // Share subscriptions to the output, otherwise the the handler will be re-run.\n        operators_1.shareReplay());\n        // Separate the errors from the inbound bus into their own observable that completes when the\n        // builder output does.\n        const inboundBusErrors = inboundBusWithInputValidation.pipe(operators_1.ignoreElements(), operators_1.takeUntil(rxjs_1.onErrorResumeNext(output.pipe(operators_1.last()))));\n        // Return the builder output plus any input errors.\n        return rxjs_1.merge(inboundBusErrors, output);\n    }\n    return rxjs_1.of(Object.assign(handler, { jobDescription }));\n}\n/**\n * A JobRegistry that resolves builder targets from the host.\n */\nclass ArchitectBuilderJobRegistry {\n    constructor(_host, _registry, _jobCache, _infoCache) {\n        this._host = _host;\n        this._registry = _registry;\n        this._jobCache = _jobCache;\n        this._infoCache = _infoCache;\n    }\n    _resolveBuilder(name) {\n        const cache = this._infoCache;\n        if (cache) {\n            const maybeCache = cache.get(name);\n            if (maybeCache !== undefined) {\n                return maybeCache;\n            }\n            const info = rxjs_1.from(this._host.resolveBuilder(name)).pipe(operators_1.shareReplay(1));\n            cache.set(name, info);\n            return info;\n        }\n        return rxjs_1.from(this._host.resolveBuilder(name));\n    }\n    _createBuilder(info, target, options) {\n        const cache = this._jobCache;\n        if (target) {\n            const maybeHit = cache && cache.get(api_1.targetStringFromTarget(target));\n            if (maybeHit) {\n                return maybeHit;\n            }\n        }\n        else {\n            const maybeHit = cache && cache.get(info.builderName);\n            if (maybeHit) {\n                return maybeHit;\n            }\n        }\n        const result = _createJobHandlerFromBuilderInfo(info, target, this._host, this._registry, options || {});\n        if (cache) {\n            if (target) {\n                cache.set(api_1.targetStringFromTarget(target), result.pipe(operators_1.shareReplay(1)));\n            }\n            else {\n                cache.set(info.builderName, result.pipe(operators_1.shareReplay(1)));\n            }\n        }\n        return result;\n    }\n    get(name) {\n        const m = name.match(/^([^:]+):([^:]+)$/i);\n        if (!m) {\n            return rxjs_1.of(null);\n        }\n        return rxjs_1.from(this._resolveBuilder(name)).pipe(operators_1.concatMap(builderInfo => (builderInfo ? this._createBuilder(builderInfo) : rxjs_1.of(null))), operators_1.first(null, null));\n    }\n}\n/**\n * A JobRegistry that resolves targets from the host.\n */\nclass ArchitectTargetJobRegistry extends ArchitectBuilderJobRegistry {\n    get(name) {\n        const m = name.match(/^{([^:]+):([^:]+)(?::([^:]*))?}$/i);\n        if (!m) {\n            return rxjs_1.of(null);\n        }\n        const target = {\n            project: m[1],\n            target: m[2],\n            configuration: m[3],\n        };\n        return rxjs_1.from(Promise.all([\n            this._host.getBuilderNameForTarget(target),\n            this._host.getOptionsForTarget(target),\n        ])).pipe(operators_1.concatMap(([builderStr, options]) => {\n            if (builderStr === null || options === null) {\n                return rxjs_1.of(null);\n            }\n            return this._resolveBuilder(builderStr).pipe(operators_1.concatMap(builderInfo => {\n                if (builderInfo === null) {\n                    return rxjs_1.of(null);\n                }\n                return this._createBuilder(builderInfo, target, options);\n            }));\n        }), operators_1.first(null, null));\n    }\n}\nfunction _getTargetOptionsFactory(host) {\n    return core_1.experimental.jobs.createJobHandler(target => {\n        return host.getOptionsForTarget(target).then(options => {\n            if (options === null) {\n                throw new Error(`Invalid target: ${JSON.stringify(target)}.`);\n            }\n            return options;\n        });\n    }, {\n        name: '..getTargetOptions',\n        output: { type: 'object' },\n        argument: inputSchema.properties.target,\n    });\n}\nfunction _getProjectMetadataFactory(host) {\n    return core_1.experimental.jobs.createJobHandler(target => {\n        return host.getProjectMetadata(target).then(options => {\n            if (options === null) {\n                throw new Error(`Invalid target: ${JSON.stringify(target)}.`);\n            }\n            return options;\n        });\n    }, {\n        name: '..getProjectMetadata',\n        output: { type: 'object' },\n        argument: {\n            oneOf: [\n                { type: 'string' },\n                inputSchema.properties.target,\n            ],\n        },\n    });\n}\nfunction _getBuilderNameForTargetFactory(host) {\n    return core_1.experimental.jobs.createJobHandler(async (target) => {\n        const builderName = await host.getBuilderNameForTarget(target);\n        if (!builderName) {\n            throw new Error(`No builder were found for target ${api_1.targetStringFromTarget(target)}.`);\n        }\n        return builderName;\n    }, {\n        name: '..getBuilderNameForTarget',\n        output: { type: 'string' },\n        argument: inputSchema.properties.target,\n    });\n}\nfunction _validateOptionsFactory(host, registry) {\n    return core_1.experimental.jobs.createJobHandler(async ([builderName, options]) => {\n        // Get option schema from the host.\n        const builderInfo = await host.resolveBuilder(builderName);\n        if (!builderInfo) {\n            throw new Error(`No builder info were found for builder ${JSON.stringify(builderName)}.`);\n        }\n        return registry.compile(builderInfo.optionSchema).pipe(operators_1.concatMap(validation => validation(options)), operators_1.switchMap(({ data, success, errors }) => {\n            if (success) {\n                return rxjs_1.of(data);\n            }\n            throw new core_1.json.schema.SchemaValidationException(errors);\n        })).toPromise();\n    }, {\n        name: '..validateOptions',\n        output: { type: 'object' },\n        argument: {\n            type: 'array',\n            items: [\n                { type: 'string' },\n                { type: 'object' },\n            ],\n        },\n    });\n}\nclass Architect {\n    constructor(_host, registry = new core_1.json.schema.CoreSchemaRegistry(), additionalJobRegistry) {\n        this._host = _host;\n        this._jobCache = new Map();\n        this._infoCache = new Map();\n        const privateArchitectJobRegistry = new core_1.experimental.jobs.SimpleJobRegistry();\n        // Create private jobs.\n        privateArchitectJobRegistry.register(_getTargetOptionsFactory(_host));\n        privateArchitectJobRegistry.register(_getBuilderNameForTargetFactory(_host));\n        privateArchitectJobRegistry.register(_validateOptionsFactory(_host, registry));\n        privateArchitectJobRegistry.register(_getProjectMetadataFactory(_host));\n        const jobRegistry = new core_1.experimental.jobs.FallbackRegistry([\n            new ArchitectTargetJobRegistry(_host, registry, this._jobCache, this._infoCache),\n            new ArchitectBuilderJobRegistry(_host, registry, this._jobCache, this._infoCache),\n            privateArchitectJobRegistry,\n            ...(additionalJobRegistry ? [additionalJobRegistry] : []),\n        ]);\n        this._scheduler = new core_1.experimental.jobs.SimpleScheduler(jobRegistry, registry);\n    }\n    has(name) {\n        return this._scheduler.has(name);\n    }\n    scheduleBuilder(name, options, scheduleOptions = {}) {\n        // The below will match 'project:target:configuration'\n        if (!/^[^:]+:[^:]+(:[^:]+)?$/.test(name)) {\n            throw new Error('Invalid builder name: ' + JSON.stringify(name));\n        }\n        return schedule_by_name_1.scheduleByName(name, options, {\n            scheduler: this._scheduler,\n            logger: scheduleOptions.logger || new core_1.logging.NullLogger(),\n            currentDirectory: this._host.getCurrentDirectory(),\n            workspaceRoot: this._host.getWorkspaceRoot(),\n            analytics: scheduleOptions.analytics,\n        });\n    }\n    scheduleTarget(target, overrides = {}, scheduleOptions = {}) {\n        return schedule_by_name_1.scheduleByTarget(target, overrides, {\n            scheduler: this._scheduler,\n            logger: scheduleOptions.logger || new core_1.logging.NullLogger(),\n            currentDirectory: this._host.getCurrentDirectory(),\n            workspaceRoot: this._host.getWorkspaceRoot(),\n            analytics: scheduleOptions.analytics,\n        });\n    }\n}\nexports.Architect = Architect;\n"]},"metadata":{},"sourceType":"script"}