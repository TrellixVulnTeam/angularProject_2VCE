{"ast":null,"code":"(function (factory) {\n  if (typeof module === \"object\" && typeof module.exports === \"object\") {\n    var v = factory(require, exports);\n    if (v !== undefined) module.exports = v;\n  } else if (typeof define === \"function\" && define.amd) {\n    define(\"@angular/compiler/src/render3/r3_pipe_compiler\", [\"require\", \"exports\", \"@angular/compiler/src/output/output_ast\", \"@angular/compiler/src/render3/r3_identifiers\", \"@angular/compiler/src/render3/util\"], factory);\n  }\n})(function (require, exports) {\n  \"use strict\";\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.createPipeType = exports.compilePipeFromMetadata = void 0;\n  /**\n   * @license\n   * Copyright Google LLC All Rights Reserved.\n   *\n   * Use of this source code is governed by an MIT-style license that can be\n   * found in the LICENSE file at https://angular.io/license\n   */\n\n  var o = require(\"@angular/compiler/src/output/output_ast\");\n\n  var r3_identifiers_1 = require(\"@angular/compiler/src/render3/r3_identifiers\");\n\n  var util_1 = require(\"@angular/compiler/src/render3/util\");\n\n  function compilePipeFromMetadata(metadata) {\n    var definitionMapValues = []; // e.g. `name: 'myPipe'`\n\n    definitionMapValues.push({\n      key: 'name',\n      value: o.literal(metadata.pipeName),\n      quoted: false\n    }); // e.g. `type: MyPipe`\n\n    definitionMapValues.push({\n      key: 'type',\n      value: metadata.type.value,\n      quoted: false\n    }); // e.g. `pure: true`\n\n    definitionMapValues.push({\n      key: 'pure',\n      value: o.literal(metadata.pure),\n      quoted: false\n    });\n    var expression = o.importExpr(r3_identifiers_1.Identifiers.definePipe).callFn([o.literalMap(definitionMapValues)]);\n    var type = createPipeType(metadata);\n    return {\n      expression: expression,\n      type: type\n    };\n  }\n\n  exports.compilePipeFromMetadata = compilePipeFromMetadata;\n\n  function createPipeType(metadata) {\n    return new o.ExpressionType(o.importExpr(r3_identifiers_1.Identifiers.PipeDefWithMeta, [util_1.typeWithParameters(metadata.type.type, metadata.typeArgumentCount), new o.ExpressionType(new o.LiteralExpr(metadata.pipeName))]));\n  }\n\n  exports.createPipeType = createPipeType;\n});","map":{"version":3,"sources":["../../../../../../../packages/compiler/src/render3/r3_pipe_compiler.ts"],"names":[],"mappings":";;;;;;;;;;;;;;AAAA;;;;;;AAMG;;AACH,MAAA,CAAA,GAAA,OAAA,CAAA,yCAAA,CAAA;;AAGA,MAAA,gBAAA,GAAA,OAAA,CAAA,8CAAA,CAAA;;AACA,MAAA,MAAA,GAAA,OAAA,CAAA,oCAAA,CAAA;;AA4CA,WAAgB,uBAAhB,CAAwC,QAAxC,EAAgE;AAC9D,QAAM,mBAAmB,GAA0D,EAAnF,CAD8D,CAG9D;;AACA,IAAA,mBAAmB,CAAC,IAApB,CAAyB;AAAC,MAAA,GAAG,EAAE,MAAN;AAAc,MAAA,KAAK,EAAE,CAAC,CAAC,OAAF,CAAU,QAAQ,CAAC,QAAnB,CAArB;AAAmD,MAAA,MAAM,EAAE;AAA3D,KAAzB,EAJ8D,CAM9D;;AACA,IAAA,mBAAmB,CAAC,IAApB,CAAyB;AAAC,MAAA,GAAG,EAAE,MAAN;AAAc,MAAA,KAAK,EAAE,QAAQ,CAAC,IAAT,CAAc,KAAnC;AAA0C,MAAA,MAAM,EAAE;AAAlD,KAAzB,EAP8D,CAS9D;;AACA,IAAA,mBAAmB,CAAC,IAApB,CAAyB;AAAC,MAAA,GAAG,EAAE,MAAN;AAAc,MAAA,KAAK,EAAE,CAAC,CAAC,OAAF,CAAU,QAAQ,CAAC,IAAnB,CAArB;AAA+C,MAAA,MAAM,EAAE;AAAvD,KAAzB;AAEA,QAAM,UAAU,GAAG,CAAC,CAAC,UAAF,CAAa,gBAAA,CAAA,WAAA,CAAG,UAAhB,EAA4B,MAA5B,CAAmC,CAAC,CAAC,CAAC,UAAF,CAAa,mBAAb,CAAD,CAAnC,CAAnB;AACA,QAAM,IAAI,GAAG,cAAc,CAAC,QAAD,CAA3B;AAEA,WAAO;AAAC,MAAA,UAAU,EAAA,UAAX;AAAa,MAAA,IAAI,EAAA;AAAjB,KAAP;AACD;;AAhBD,EAAA,OAAA,CAAA,uBAAA,GAAA,uBAAA;;AAkBA,WAAgB,cAAhB,CAA+B,QAA/B,EAAuD;AACrD,WAAO,IAAI,CAAC,CAAC,cAAN,CAAqB,CAAC,CAAC,UAAF,CAAa,gBAAA,CAAA,WAAA,CAAG,eAAhB,EAAiC,CAC3D,MAAA,CAAA,kBAAA,CAAmB,QAAQ,CAAC,IAAT,CAAc,IAAjC,EAAuC,QAAQ,CAAC,iBAAhD,CAD2D,EAE3D,IAAI,CAAC,CAAC,cAAN,CAAqB,IAAI,CAAC,CAAC,WAAN,CAAkB,QAAQ,CAAC,QAA3B,CAArB,CAF2D,CAAjC,CAArB,CAAP;AAID;;AALD,EAAA,OAAA,CAAA,cAAA,GAAA,cAAA","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as o from '../output/output_ast';\n\nimport {R3DependencyMetadata} from './r3_factory';\nimport {Identifiers as R3} from './r3_identifiers';\nimport {R3Reference, typeWithParameters} from './util';\nimport {R3PipeDef} from './view/api';\n\nexport interface R3PipeMetadata {\n  /**\n   * Name of the pipe type.\n   */\n  name: string;\n\n  /**\n   * An expression representing a reference to the pipe itself.\n   */\n  type: R3Reference;\n\n  /**\n   * An expression representing the pipe being compiled, intended for use within a class definition\n   * itself.\n   *\n   * This can differ from the outer `type` if the class is being compiled by ngcc and is inside an\n   * IIFE structure that uses a different name internally.\n   */\n  internalType: o.Expression;\n\n  /**\n   * Number of generic type parameters of the type itself.\n   */\n  typeArgumentCount: number;\n\n  /**\n   * Name of the pipe.\n   */\n  pipeName: string;\n\n  /**\n   * Dependencies of the pipe's constructor.\n   */\n  deps: R3DependencyMetadata[]|null;\n\n  /**\n   * Whether the pipe is marked as pure.\n   */\n  pure: boolean;\n}\n\nexport function compilePipeFromMetadata(metadata: R3PipeMetadata): R3PipeDef {\n  const definitionMapValues: {key: string, quoted: boolean, value: o.Expression}[] = [];\n\n  // e.g. `name: 'myPipe'`\n  definitionMapValues.push({key: 'name', value: o.literal(metadata.pipeName), quoted: false});\n\n  // e.g. `type: MyPipe`\n  definitionMapValues.push({key: 'type', value: metadata.type.value, quoted: false});\n\n  // e.g. `pure: true`\n  definitionMapValues.push({key: 'pure', value: o.literal(metadata.pure), quoted: false});\n\n  const expression = o.importExpr(R3.definePipe).callFn([o.literalMap(definitionMapValues)]);\n  const type = createPipeType(metadata);\n\n  return {expression, type};\n}\n\nexport function createPipeType(metadata: R3PipeMetadata): o.Type {\n  return new o.ExpressionType(o.importExpr(R3.PipeDefWithMeta, [\n    typeWithParameters(metadata.type.type, metadata.typeArgumentCount),\n    new o.ExpressionType(new o.LiteralExpr(metadata.pipeName)),\n  ]));\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}