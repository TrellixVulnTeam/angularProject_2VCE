{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.checkPort = void 0;\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nvar inquirer_1 = require(\"inquirer\");\n\nvar net = require(\"net\");\n\nvar tty_1 = require(\"./tty\");\n\nfunction createInUseError(port) {\n  return new Error(\"Port \".concat(port, \" is already in use. Use '--port' to specify a different port.\"));\n}\n\nfunction checkPort(_x, _x2) {\n  return _checkPort.apply(this, arguments);\n}\n\nfunction _checkPort() {\n  _checkPort = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(port, host) {\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!(port === 0)) {\n              _context.next = 2;\n              break;\n            }\n\n            return _context.abrupt(\"return\", 0);\n\n          case 2:\n            return _context.abrupt(\"return\", new Promise(function (resolve, reject) {\n              var server = net.createServer();\n              server.once('error', function (err) {\n                if (err.code !== 'EADDRINUSE') {\n                  reject(err);\n                  return;\n                }\n\n                if (!tty_1.isTTY) {\n                  reject(createInUseError(port));\n                  return;\n                }\n\n                inquirer_1.prompt({\n                  type: 'confirm',\n                  name: 'useDifferent',\n                  message: \"Port \".concat(port, \" is already in use.\\nWould you like to use a different port?\"),\n                  default: true\n                }).then(function (answers) {\n                  return answers.useDifferent ? resolve(0) : reject(createInUseError(port));\n                }, function () {\n                  return reject(createInUseError(port));\n                });\n              }).once('listening', function () {\n                server.close();\n                resolve(port);\n              }).listen(port, host);\n            }));\n\n          case 3:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _checkPort.apply(this, arguments);\n}\n\nexports.checkPort = checkPort;","map":{"version":3,"sources":["/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@angular-devkit/build-angular/src/utils/check-port.js"],"names":["Object","defineProperty","exports","value","checkPort","inquirer_1","require","net","tty_1","createInUseError","port","Error","host","Promise","resolve","reject","server","createServer","once","err","code","isTTY","prompt","type","name","message","default","then","answers","useDifferent","close","listen"],"mappings":"AAAA;;;;;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,SAAR,GAAoB,KAAK,CAAzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAMC,UAAU,GAAGC,OAAO,CAAC,UAAD,CAA1B;;AACA,IAAMC,GAAG,GAAGD,OAAO,CAAC,KAAD,CAAnB;;AACA,IAAME,KAAK,GAAGF,OAAO,CAAC,OAAD,CAArB;;AACA,SAASG,gBAAT,CAA0BC,IAA1B,EAAgC;AAC5B,SAAO,IAAIC,KAAJ,gBAAkBD,IAAlB,mEAAP;AACH;;SACcN,S;;;;;wEAAf,iBAAyBM,IAAzB,EAA+BE,IAA/B;AAAA;AAAA;AAAA;AAAA;AAAA,kBACQF,IAAI,KAAK,CADjB;AAAA;AAAA;AAAA;;AAAA,6CAEe,CAFf;;AAAA;AAAA,6CAIW,IAAIG,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC,kBAAMC,MAAM,GAAGT,GAAG,CAACU,YAAJ,EAAf;AACAD,cAAAA,MAAM,CACDE,IADL,CACU,OADV,EACmB,UAACC,GAAD,EAAS;AACxB,oBAAIA,GAAG,CAACC,IAAJ,KAAa,YAAjB,EAA+B;AAC3BL,kBAAAA,MAAM,CAACI,GAAD,CAAN;AACA;AACH;;AACD,oBAAI,CAACX,KAAK,CAACa,KAAX,EAAkB;AACdN,kBAAAA,MAAM,CAACN,gBAAgB,CAACC,IAAD,CAAjB,CAAN;AACA;AACH;;AACDL,gBAAAA,UAAU,CAACiB,MAAX,CAAkB;AACdC,kBAAAA,IAAI,EAAE,SADQ;AAEdC,kBAAAA,IAAI,EAAE,cAFQ;AAGdC,kBAAAA,OAAO,iBAAUf,IAAV,iEAHO;AAIdgB,kBAAAA,OAAO,EAAE;AAJK,iBAAlB,EAKGC,IALH,CAKQ,UAACC,OAAD;AAAA,yBAAaA,OAAO,CAACC,YAAR,GAAuBf,OAAO,CAAC,CAAD,CAA9B,GAAoCC,MAAM,CAACN,gBAAgB,CAACC,IAAD,CAAjB,CAAvD;AAAA,iBALR,EAKyF;AAAA,yBAAMK,MAAM,CAACN,gBAAgB,CAACC,IAAD,CAAjB,CAAZ;AAAA,iBALzF;AAMH,eAhBD,EAiBKQ,IAjBL,CAiBU,WAjBV,EAiBuB,YAAM;AACzBF,gBAAAA,MAAM,CAACc,KAAP;AACAhB,gBAAAA,OAAO,CAACJ,IAAD,CAAP;AACH,eApBD,EAqBKqB,MArBL,CAqBYrB,IArBZ,EAqBkBE,IArBlB;AAsBH,aAxBM,CAJX;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AA8BAV,OAAO,CAACE,SAAR,GAAoBA,SAApB","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.checkPort = void 0;\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst inquirer_1 = require(\"inquirer\");\nconst net = require(\"net\");\nconst tty_1 = require(\"./tty\");\nfunction createInUseError(port) {\n    return new Error(`Port ${port} is already in use. Use '--port' to specify a different port.`);\n}\nasync function checkPort(port, host) {\n    if (port === 0) {\n        return 0;\n    }\n    return new Promise((resolve, reject) => {\n        const server = net.createServer();\n        server\n            .once('error', (err) => {\n            if (err.code !== 'EADDRINUSE') {\n                reject(err);\n                return;\n            }\n            if (!tty_1.isTTY) {\n                reject(createInUseError(port));\n                return;\n            }\n            inquirer_1.prompt({\n                type: 'confirm',\n                name: 'useDifferent',\n                message: `Port ${port} is already in use.\\nWould you like to use a different port?`,\n                default: true,\n            }).then((answers) => answers.useDifferent ? resolve(0) : reject(createInUseError(port)), () => reject(createInUseError(port)));\n        })\n            .once('listening', () => {\n            server.close();\n            resolve(port);\n        })\n            .listen(port, host);\n    });\n}\nexports.checkPort = checkPort;\n"]},"metadata":{},"sourceType":"script"}