{"ast":null,"code":"/***********************************************************************\n\n  A JavaScript tokenizer / parser / beautifier / compressor.\n  https://github.com/mishoo/UglifyJS2\n\n  -------------------------------- (C) ---------------------------------\n\n                           Author: Mihai Bazon\n                         <mihai.bazon@gmail.com>\n                       http://mihai.bazon.net/blog\n\n  Distributed under the BSD license:\n\n    Copyright 2012 (c) Mihai Bazon <mihai.bazon@gmail.com>\n\n    Redistribution and use in source and binary forms, with or without\n    modification, are permitted provided that the following conditions\n    are met:\n\n        * Redistributions of source code must retain the above\n          copyright notice, this list of conditions and the following\n          disclaimer.\n\n        * Redistributions in binary form must reproduce the above\n          copyright notice, this list of conditions and the following\n          disclaimer in the documentation and/or other materials\n          provided with the distribution.\n\n    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDER “AS IS” AND ANY\n    EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n    PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER BE\n    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,\n    OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n    PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n    PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n    THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR\n    TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF\n    THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n    SUCH DAMAGE.\n\n ***********************************************************************/\n\"use strict\";\n\nimport _inherits from \"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _createForOfIteratorHelper from \"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nimport _toConsumableArray from \"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { HOP, MAP, noop } from \"./utils/index.js\";\nimport { parse } from \"./parse.js\";\n\nfunction DEFNODE(type, props, methods) {\n  var base = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : AST_Node;\n  if (!props) props = [];else props = props.split(/\\s+/);\n  var self_props = props;\n  if (base && base.PROPS) props = props.concat(base.PROPS);\n  var code = \"return function AST_\" + type + \"(props){ if (props) { \";\n\n  for (var i = props.length; --i >= 0;) {\n    code += \"this.\" + props[i] + \" = props.\" + props[i] + \";\";\n  }\n\n  var proto = base && Object.create(base.prototype);\n  if (proto && proto.initialize || methods && methods.initialize) code += \"this.initialize();\";\n  code += \"}\";\n  code += \"this.flags = 0;\";\n  code += \"}\";\n  var ctor = new Function(code)();\n\n  if (proto) {\n    ctor.prototype = proto;\n    ctor.BASE = base;\n  }\n\n  if (base) base.SUBCLASSES.push(ctor);\n  ctor.prototype.CTOR = ctor;\n  ctor.prototype.constructor = ctor;\n  ctor.PROPS = props || null;\n  ctor.SELF_PROPS = self_props;\n  ctor.SUBCLASSES = [];\n\n  if (type) {\n    ctor.prototype.TYPE = ctor.TYPE = type;\n  }\n\n  if (methods) for (i in methods) {\n    if (HOP(methods, i)) {\n      if (i[0] === \"$\") {\n        ctor[i.substr(1)] = methods[i];\n      } else {\n        ctor.prototype[i] = methods[i];\n      }\n    }\n  }\n\n  ctor.DEFMETHOD = function (name, method) {\n    this.prototype[name] = method;\n  };\n\n  return ctor;\n}\n\nvar has_tok_flag = function has_tok_flag(tok, flag) {\n  return Boolean(tok.flags & flag);\n};\n\nvar set_tok_flag = function set_tok_flag(tok, flag, truth) {\n  if (truth) {\n    tok.flags |= flag;\n  } else {\n    tok.flags &= ~flag;\n  }\n};\n\nvar TOK_FLAG_NLB = 1;\nvar TOK_FLAG_QUOTE_SINGLE = 2;\nvar TOK_FLAG_QUOTE_EXISTS = 4;\n\nvar AST_Token = /*#__PURE__*/function () {\n  function AST_Token(type, value, line, col, pos, nlb, comments_before, comments_after, file) {\n    _classCallCheck(this, AST_Token);\n\n    this.flags = nlb ? 1 : 0;\n    this.type = type;\n    this.value = value;\n    this.line = line;\n    this.col = col;\n    this.pos = pos;\n    this.comments_before = comments_before;\n    this.comments_after = comments_after;\n    this.file = file;\n    Object.seal(this);\n  }\n\n  _createClass(AST_Token, [{\n    key: \"nlb\",\n    get: function get() {\n      return has_tok_flag(this, TOK_FLAG_NLB);\n    },\n    set: function set(new_nlb) {\n      set_tok_flag(this, TOK_FLAG_NLB, new_nlb);\n    }\n  }, {\n    key: \"quote\",\n    get: function get() {\n      return !has_tok_flag(this, TOK_FLAG_QUOTE_EXISTS) ? \"\" : has_tok_flag(this, TOK_FLAG_QUOTE_SINGLE) ? \"'\" : '\"';\n    },\n    set: function set(quote_type) {\n      set_tok_flag(this, TOK_FLAG_QUOTE_SINGLE, quote_type === \"'\");\n      set_tok_flag(this, TOK_FLAG_QUOTE_EXISTS, !!quote_type);\n    }\n  }]);\n\n  return AST_Token;\n}();\n\nvar AST_Node = DEFNODE(\"Node\", \"start end\", {\n  _clone: function _clone(deep) {\n    if (deep) {\n      var self = this.clone();\n      return self.transform(new TreeTransformer(function (node) {\n        if (node !== self) {\n          return node.clone(true);\n        }\n      }));\n    }\n\n    return new this.CTOR(this);\n  },\n  clone: function clone(deep) {\n    return this._clone(deep);\n  },\n  $documentation: \"Base class of all AST nodes\",\n  $propdoc: {\n    start: \"[AST_Token] The first token of this node\",\n    end: \"[AST_Token] The last token of this node\"\n  },\n  _walk: function _walk(visitor) {\n    return visitor._visit(this);\n  },\n  walk: function walk(visitor) {\n    return this._walk(visitor); // not sure the indirection will be any help\n  },\n  _children_backwards: function _children_backwards() {}\n}, null);\n/* -----[ statements ]----- */\n\nvar AST_Statement = DEFNODE(\"Statement\", null, {\n  $documentation: \"Base class of all statements\"\n});\nvar AST_Debugger = DEFNODE(\"Debugger\", null, {\n  $documentation: \"Represents a debugger statement\"\n}, AST_Statement);\nvar AST_Directive = DEFNODE(\"Directive\", \"value quote\", {\n  $documentation: \"Represents a directive, like \\\"use strict\\\";\",\n  $propdoc: {\n    value: \"[string] The value of this directive as a plain string (it's not an AST_String!)\",\n    quote: \"[string] the original quote character\"\n  }\n}, AST_Statement);\nvar AST_SimpleStatement = DEFNODE(\"SimpleStatement\", \"body\", {\n  $documentation: \"A statement consisting of an expression, i.e. a = 1 + 2\",\n  $propdoc: {\n    body: \"[AST_Node] an expression node (should not be instanceof AST_Statement)\"\n  },\n  _walk: function _walk(visitor) {\n    return visitor._visit(this, function () {\n      this.body._walk(visitor);\n    });\n  },\n  _children_backwards: function _children_backwards(push) {\n    push(this.body);\n  }\n}, AST_Statement);\n\nfunction walk_body(node, visitor) {\n  var body = node.body;\n\n  for (var i = 0, len = body.length; i < len; i++) {\n    body[i]._walk(visitor);\n  }\n}\n\nfunction clone_block_scope(deep) {\n  var clone = this._clone(deep);\n\n  if (this.block_scope) {\n    clone.block_scope = this.block_scope.clone();\n  }\n\n  return clone;\n}\n\nvar AST_Block = DEFNODE(\"Block\", \"body block_scope\", {\n  $documentation: \"A body of statements (usually braced)\",\n  $propdoc: {\n    body: \"[AST_Statement*] an array of statements\",\n    block_scope: \"[AST_Scope] the block scope\"\n  },\n  _walk: function _walk(visitor) {\n    return visitor._visit(this, function () {\n      walk_body(this, visitor);\n    });\n  },\n  _children_backwards: function _children_backwards(push) {\n    var i = this.body.length;\n\n    while (i--) {\n      push(this.body[i]);\n    }\n  },\n  clone: clone_block_scope\n}, AST_Statement);\nvar AST_BlockStatement = DEFNODE(\"BlockStatement\", null, {\n  $documentation: \"A block statement\"\n}, AST_Block);\nvar AST_EmptyStatement = DEFNODE(\"EmptyStatement\", null, {\n  $documentation: \"The empty statement (empty block or simply a semicolon)\"\n}, AST_Statement);\nvar AST_StatementWithBody = DEFNODE(\"StatementWithBody\", \"body\", {\n  $documentation: \"Base class for all statements that contain one nested body: `For`, `ForIn`, `Do`, `While`, `With`\",\n  $propdoc: {\n    body: \"[AST_Statement] the body; this should always be present, even if it's an AST_EmptyStatement\"\n  }\n}, AST_Statement);\nvar AST_LabeledStatement = DEFNODE(\"LabeledStatement\", \"label\", {\n  $documentation: \"Statement with a label\",\n  $propdoc: {\n    label: \"[AST_Label] a label definition\"\n  },\n  _walk: function _walk(visitor) {\n    return visitor._visit(this, function () {\n      this.label._walk(visitor);\n\n      this.body._walk(visitor);\n    });\n  },\n  _children_backwards: function _children_backwards(push) {\n    push(this.body);\n    push(this.label);\n  },\n  clone: function clone(deep) {\n    var node = this._clone(deep);\n\n    if (deep) {\n      var label = node.label;\n      var def = this.label;\n      node.walk(new TreeWalker(function (node) {\n        if (node instanceof AST_LoopControl && node.label && node.label.thedef === def) {\n          node.label.thedef = label;\n          label.references.push(node);\n        }\n      }));\n    }\n\n    return node;\n  }\n}, AST_StatementWithBody);\nvar AST_IterationStatement = DEFNODE(\"IterationStatement\", \"block_scope\", {\n  $documentation: \"Internal class.  All loops inherit from it.\",\n  $propdoc: {\n    block_scope: \"[AST_Scope] the block scope for this iteration statement.\"\n  },\n  clone: clone_block_scope\n}, AST_StatementWithBody);\nvar AST_DWLoop = DEFNODE(\"DWLoop\", \"condition\", {\n  $documentation: \"Base class for do/while statements\",\n  $propdoc: {\n    condition: \"[AST_Node] the loop condition.  Should not be instanceof AST_Statement\"\n  }\n}, AST_IterationStatement);\nvar AST_Do = DEFNODE(\"Do\", null, {\n  $documentation: \"A `do` statement\",\n  _walk: function _walk(visitor) {\n    return visitor._visit(this, function () {\n      this.body._walk(visitor);\n\n      this.condition._walk(visitor);\n    });\n  },\n  _children_backwards: function _children_backwards(push) {\n    push(this.condition);\n    push(this.body);\n  }\n}, AST_DWLoop);\nvar AST_While = DEFNODE(\"While\", null, {\n  $documentation: \"A `while` statement\",\n  _walk: function _walk(visitor) {\n    return visitor._visit(this, function () {\n      this.condition._walk(visitor);\n\n      this.body._walk(visitor);\n    });\n  },\n  _children_backwards: function _children_backwards(push) {\n    push(this.body);\n    push(this.condition);\n  }\n}, AST_DWLoop);\nvar AST_For = DEFNODE(\"For\", \"init condition step\", {\n  $documentation: \"A `for` statement\",\n  $propdoc: {\n    init: \"[AST_Node?] the `for` initialization code, or null if empty\",\n    condition: \"[AST_Node?] the `for` termination clause, or null if empty\",\n    step: \"[AST_Node?] the `for` update clause, or null if empty\"\n  },\n  _walk: function _walk(visitor) {\n    return visitor._visit(this, function () {\n      if (this.init) this.init._walk(visitor);\n      if (this.condition) this.condition._walk(visitor);\n      if (this.step) this.step._walk(visitor);\n\n      this.body._walk(visitor);\n    });\n  },\n  _children_backwards: function _children_backwards(push) {\n    push(this.body);\n    if (this.step) push(this.step);\n    if (this.condition) push(this.condition);\n    if (this.init) push(this.init);\n  }\n}, AST_IterationStatement);\nvar AST_ForIn = DEFNODE(\"ForIn\", \"init object\", {\n  $documentation: \"A `for ... in` statement\",\n  $propdoc: {\n    init: \"[AST_Node] the `for/in` initialization code\",\n    object: \"[AST_Node] the object that we're looping through\"\n  },\n  _walk: function _walk(visitor) {\n    return visitor._visit(this, function () {\n      this.init._walk(visitor);\n\n      this.object._walk(visitor);\n\n      this.body._walk(visitor);\n    });\n  },\n  _children_backwards: function _children_backwards(push) {\n    push(this.body);\n    if (this.object) push(this.object);\n    if (this.init) push(this.init);\n  }\n}, AST_IterationStatement);\nvar AST_ForOf = DEFNODE(\"ForOf\", \"await\", {\n  $documentation: \"A `for ... of` statement\"\n}, AST_ForIn);\nvar AST_With = DEFNODE(\"With\", \"expression\", {\n  $documentation: \"A `with` statement\",\n  $propdoc: {\n    expression: \"[AST_Node] the `with` expression\"\n  },\n  _walk: function _walk(visitor) {\n    return visitor._visit(this, function () {\n      this.expression._walk(visitor);\n\n      this.body._walk(visitor);\n    });\n  },\n  _children_backwards: function _children_backwards(push) {\n    push(this.body);\n    push(this.expression);\n  }\n}, AST_StatementWithBody);\n/* -----[ scope and functions ]----- */\n\nvar AST_Scope = DEFNODE(\"Scope\", \"variables functions uses_with uses_eval parent_scope enclosed cname\", {\n  $documentation: \"Base class for all statements introducing a lexical scope\",\n  $propdoc: {\n    variables: \"[Map/S] a map of name -> SymbolDef for all variables/functions defined in this scope\",\n    uses_with: \"[boolean/S] tells whether this scope uses the `with` statement\",\n    uses_eval: \"[boolean/S] tells whether this scope contains a direct call to the global `eval`\",\n    parent_scope: \"[AST_Scope?/S] link to the parent scope\",\n    enclosed: \"[SymbolDef*/S] a list of all symbol definitions that are accessed from this scope or any subscopes\",\n    cname: \"[integer/S] current index for mangling variables (used internally by the mangler)\"\n  },\n  get_defun_scope: function get_defun_scope() {\n    var self = this;\n\n    while (self.is_block_scope()) {\n      self = self.parent_scope;\n    }\n\n    return self;\n  },\n  clone: function clone(deep, toplevel) {\n    var node = this._clone(deep);\n\n    if (deep && this.variables && toplevel && !this._block_scope) {\n      node.figure_out_scope({}, {\n        toplevel: toplevel,\n        parent_scope: this.parent_scope\n      });\n    } else {\n      if (this.variables) node.variables = new Map(this.variables);\n      if (this.enclosed) node.enclosed = this.enclosed.slice();\n      if (this._block_scope) node._block_scope = this._block_scope;\n    }\n\n    return node;\n  },\n  pinned: function pinned() {\n    return this.uses_eval || this.uses_with;\n  }\n}, AST_Block);\nvar AST_Toplevel = DEFNODE(\"Toplevel\", \"globals\", {\n  $documentation: \"The toplevel scope\",\n  $propdoc: {\n    globals: \"[Map/S] a map of name -> SymbolDef for all undeclared names\"\n  },\n  wrap_commonjs: function wrap_commonjs(name) {\n    var body = this.body;\n    var wrapped_tl = \"(function(exports){'$ORIG';})(typeof \" + name + \"=='undefined'?(\" + name + \"={}):\" + name + \");\";\n    wrapped_tl = parse(wrapped_tl);\n    wrapped_tl = wrapped_tl.transform(new TreeTransformer(function (node) {\n      if (node instanceof AST_Directive && node.value == \"$ORIG\") {\n        return MAP.splice(body);\n      }\n    }));\n    return wrapped_tl;\n  },\n  wrap_enclose: function wrap_enclose(args_values) {\n    if (typeof args_values != \"string\") args_values = \"\";\n    var index = args_values.indexOf(\":\");\n    if (index < 0) index = args_values.length;\n    var body = this.body;\n    return parse([\"(function(\", args_values.slice(0, index), '){\"$ORIG\"})(', args_values.slice(index + 1), \")\"].join(\"\")).transform(new TreeTransformer(function (node) {\n      if (node instanceof AST_Directive && node.value == \"$ORIG\") {\n        return MAP.splice(body);\n      }\n    }));\n  }\n}, AST_Scope);\nvar AST_Expansion = DEFNODE(\"Expansion\", \"expression\", {\n  $documentation: \"An expandible argument, such as ...rest, a splat, such as [1,2,...all], or an expansion in a variable declaration, such as var [first, ...rest] = list\",\n  $propdoc: {\n    expression: \"[AST_Node] the thing to be expanded\"\n  },\n  _walk: function _walk(visitor) {\n    return visitor._visit(this, function () {\n      this.expression.walk(visitor);\n    });\n  },\n  _children_backwards: function _children_backwards(push) {\n    push(this.expression);\n  }\n});\nvar AST_Lambda = DEFNODE(\"Lambda\", \"name argnames uses_arguments is_generator async\", {\n  $documentation: \"Base class for functions\",\n  $propdoc: {\n    name: \"[AST_SymbolDeclaration?] the name of this function\",\n    argnames: \"[AST_SymbolFunarg|AST_Destructuring|AST_Expansion|AST_DefaultAssign*] array of function arguments, destructurings, or expanding arguments\",\n    uses_arguments: \"[boolean/S] tells whether this function accesses the arguments array\",\n    is_generator: \"[boolean] is this a generator method\",\n    async: \"[boolean] is this method async\"\n  },\n  args_as_names: function args_as_names() {\n    var out = [];\n\n    for (var i = 0; i < this.argnames.length; i++) {\n      if (this.argnames[i] instanceof AST_Destructuring) {\n        out.push.apply(out, _toConsumableArray(this.argnames[i].all_symbols()));\n      } else {\n        out.push(this.argnames[i]);\n      }\n    }\n\n    return out;\n  },\n  _walk: function _walk(visitor) {\n    return visitor._visit(this, function () {\n      if (this.name) this.name._walk(visitor);\n      var argnames = this.argnames;\n\n      for (var i = 0, len = argnames.length; i < len; i++) {\n        argnames[i]._walk(visitor);\n      }\n\n      walk_body(this, visitor);\n    });\n  },\n  _children_backwards: function _children_backwards(push) {\n    var i = this.body.length;\n\n    while (i--) {\n      push(this.body[i]);\n    }\n\n    i = this.argnames.length;\n\n    while (i--) {\n      push(this.argnames[i]);\n    }\n\n    if (this.name) push(this.name);\n  },\n  is_braceless: function is_braceless() {\n    return this.body[0] instanceof AST_Return && this.body[0].value;\n  },\n  // Default args and expansion don't count, so .argnames.length doesn't cut it\n  length_property: function length_property() {\n    var length = 0;\n\n    var _iterator = _createForOfIteratorHelper(this.argnames),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var arg = _step.value;\n\n        if (arg instanceof AST_SymbolFunarg || arg instanceof AST_Destructuring) {\n          length++;\n        }\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n\n    return length;\n  }\n}, AST_Scope);\nvar AST_Accessor = DEFNODE(\"Accessor\", null, {\n  $documentation: \"A setter/getter function.  The `name` property is always null.\"\n}, AST_Lambda);\nvar AST_Function = DEFNODE(\"Function\", null, {\n  $documentation: \"A function expression\"\n}, AST_Lambda);\nvar AST_Arrow = DEFNODE(\"Arrow\", null, {\n  $documentation: \"An ES6 Arrow function ((a) => b)\"\n}, AST_Lambda);\nvar AST_Defun = DEFNODE(\"Defun\", null, {\n  $documentation: \"A function definition\"\n}, AST_Lambda);\n/* -----[ DESTRUCTURING ]----- */\n\nvar AST_Destructuring = DEFNODE(\"Destructuring\", \"names is_array\", {\n  $documentation: \"A destructuring of several names. Used in destructuring assignment and with destructuring function argument names\",\n  $propdoc: {\n    \"names\": \"[AST_Node*] Array of properties or elements\",\n    \"is_array\": \"[Boolean] Whether the destructuring represents an object or array\"\n  },\n  _walk: function _walk(visitor) {\n    return visitor._visit(this, function () {\n      this.names.forEach(function (name) {\n        name._walk(visitor);\n      });\n    });\n  },\n  _children_backwards: function _children_backwards(push) {\n    var i = this.names.length;\n\n    while (i--) {\n      push(this.names[i]);\n    }\n  },\n  all_symbols: function all_symbols() {\n    var out = [];\n    this.walk(new TreeWalker(function (node) {\n      if (node instanceof AST_Symbol) {\n        out.push(node);\n      }\n    }));\n    return out;\n  }\n});\nvar AST_PrefixedTemplateString = DEFNODE(\"PrefixedTemplateString\", \"template_string prefix\", {\n  $documentation: \"A templatestring with a prefix, such as String.raw`foobarbaz`\",\n  $propdoc: {\n    template_string: \"[AST_TemplateString] The template string\",\n    prefix: \"[AST_Node] The prefix, which will get called.\"\n  },\n  _walk: function _walk(visitor) {\n    return visitor._visit(this, function () {\n      this.prefix._walk(visitor);\n\n      this.template_string._walk(visitor);\n    });\n  },\n  _children_backwards: function _children_backwards(push) {\n    push(this.template_string);\n    push(this.prefix);\n  }\n});\nvar AST_TemplateString = DEFNODE(\"TemplateString\", \"segments\", {\n  $documentation: \"A template string literal\",\n  $propdoc: {\n    segments: \"[AST_Node*] One or more segments, starting with AST_TemplateSegment. AST_Node may follow AST_TemplateSegment, but each AST_Node must be followed by AST_TemplateSegment.\"\n  },\n  _walk: function _walk(visitor) {\n    return visitor._visit(this, function () {\n      this.segments.forEach(function (seg) {\n        seg._walk(visitor);\n      });\n    });\n  },\n  _children_backwards: function _children_backwards(push) {\n    var i = this.segments.length;\n\n    while (i--) {\n      push(this.segments[i]);\n    }\n  }\n});\nvar AST_TemplateSegment = DEFNODE(\"TemplateSegment\", \"value raw\", {\n  $documentation: \"A segment of a template string literal\",\n  $propdoc: {\n    value: \"Content of the segment\",\n    raw: \"Raw source of the segment\"\n  }\n});\n/* -----[ JUMPS ]----- */\n\nvar AST_Jump = DEFNODE(\"Jump\", null, {\n  $documentation: \"Base class for “jumps” (for now that's `return`, `throw`, `break` and `continue`)\"\n}, AST_Statement);\nvar AST_Exit = DEFNODE(\"Exit\", \"value\", {\n  $documentation: \"Base class for “exits” (`return` and `throw`)\",\n  $propdoc: {\n    value: \"[AST_Node?] the value returned or thrown by this statement; could be null for AST_Return\"\n  },\n  _walk: function _walk(visitor) {\n    return visitor._visit(this, this.value && function () {\n      this.value._walk(visitor);\n    });\n  },\n  _children_backwards: function _children_backwards(push) {\n    if (this.value) push(this.value);\n  }\n}, AST_Jump);\nvar AST_Return = DEFNODE(\"Return\", null, {\n  $documentation: \"A `return` statement\"\n}, AST_Exit);\nvar AST_Throw = DEFNODE(\"Throw\", null, {\n  $documentation: \"A `throw` statement\"\n}, AST_Exit);\nvar AST_LoopControl = DEFNODE(\"LoopControl\", \"label\", {\n  $documentation: \"Base class for loop control statements (`break` and `continue`)\",\n  $propdoc: {\n    label: \"[AST_LabelRef?] the label, or null if none\"\n  },\n  _walk: function _walk(visitor) {\n    return visitor._visit(this, this.label && function () {\n      this.label._walk(visitor);\n    });\n  },\n  _children_backwards: function _children_backwards(push) {\n    if (this.label) push(this.label);\n  }\n}, AST_Jump);\nvar AST_Break = DEFNODE(\"Break\", null, {\n  $documentation: \"A `break` statement\"\n}, AST_LoopControl);\nvar AST_Continue = DEFNODE(\"Continue\", null, {\n  $documentation: \"A `continue` statement\"\n}, AST_LoopControl);\nvar AST_Await = DEFNODE(\"Await\", \"expression\", {\n  $documentation: \"An `await` statement\",\n  $propdoc: {\n    expression: \"[AST_Node] the mandatory expression being awaited\"\n  },\n  _walk: function _walk(visitor) {\n    return visitor._visit(this, function () {\n      this.expression._walk(visitor);\n    });\n  },\n  _children_backwards: function _children_backwards(push) {\n    push(this.expression);\n  }\n});\nvar AST_Yield = DEFNODE(\"Yield\", \"expression is_star\", {\n  $documentation: \"A `yield` statement\",\n  $propdoc: {\n    expression: \"[AST_Node?] the value returned or thrown by this statement; could be null (representing undefined) but only when is_star is set to false\",\n    is_star: \"[Boolean] Whether this is a yield or yield* statement\"\n  },\n  _walk: function _walk(visitor) {\n    return visitor._visit(this, this.expression && function () {\n      this.expression._walk(visitor);\n    });\n  },\n  _children_backwards: function _children_backwards(push) {\n    if (this.expression) push(this.expression);\n  }\n});\n/* -----[ IF ]----- */\n\nvar AST_If = DEFNODE(\"If\", \"condition alternative\", {\n  $documentation: \"A `if` statement\",\n  $propdoc: {\n    condition: \"[AST_Node] the `if` condition\",\n    alternative: \"[AST_Statement?] the `else` part, or null if not present\"\n  },\n  _walk: function _walk(visitor) {\n    return visitor._visit(this, function () {\n      this.condition._walk(visitor);\n\n      this.body._walk(visitor);\n\n      if (this.alternative) this.alternative._walk(visitor);\n    });\n  },\n  _children_backwards: function _children_backwards(push) {\n    if (this.alternative) {\n      push(this.alternative);\n    }\n\n    push(this.body);\n    push(this.condition);\n  }\n}, AST_StatementWithBody);\n/* -----[ SWITCH ]----- */\n\nvar AST_Switch = DEFNODE(\"Switch\", \"expression\", {\n  $documentation: \"A `switch` statement\",\n  $propdoc: {\n    expression: \"[AST_Node] the `switch` “discriminant”\"\n  },\n  _walk: function _walk(visitor) {\n    return visitor._visit(this, function () {\n      this.expression._walk(visitor);\n\n      walk_body(this, visitor);\n    });\n  },\n  _children_backwards: function _children_backwards(push) {\n    var i = this.body.length;\n\n    while (i--) {\n      push(this.body[i]);\n    }\n\n    push(this.expression);\n  }\n}, AST_Block);\nvar AST_SwitchBranch = DEFNODE(\"SwitchBranch\", null, {\n  $documentation: \"Base class for `switch` branches\"\n}, AST_Block);\nvar AST_Default = DEFNODE(\"Default\", null, {\n  $documentation: \"A `default` switch branch\"\n}, AST_SwitchBranch);\nvar AST_Case = DEFNODE(\"Case\", \"expression\", {\n  $documentation: \"A `case` switch branch\",\n  $propdoc: {\n    expression: \"[AST_Node] the `case` expression\"\n  },\n  _walk: function _walk(visitor) {\n    return visitor._visit(this, function () {\n      this.expression._walk(visitor);\n\n      walk_body(this, visitor);\n    });\n  },\n  _children_backwards: function _children_backwards(push) {\n    var i = this.body.length;\n\n    while (i--) {\n      push(this.body[i]);\n    }\n\n    push(this.expression);\n  }\n}, AST_SwitchBranch);\n/* -----[ EXCEPTIONS ]----- */\n\nvar AST_Try = DEFNODE(\"Try\", \"bcatch bfinally\", {\n  $documentation: \"A `try` statement\",\n  $propdoc: {\n    bcatch: \"[AST_Catch?] the catch block, or null if not present\",\n    bfinally: \"[AST_Finally?] the finally block, or null if not present\"\n  },\n  _walk: function _walk(visitor) {\n    return visitor._visit(this, function () {\n      walk_body(this, visitor);\n      if (this.bcatch) this.bcatch._walk(visitor);\n      if (this.bfinally) this.bfinally._walk(visitor);\n    });\n  },\n  _children_backwards: function _children_backwards(push) {\n    if (this.bfinally) push(this.bfinally);\n    if (this.bcatch) push(this.bcatch);\n    var i = this.body.length;\n\n    while (i--) {\n      push(this.body[i]);\n    }\n  }\n}, AST_Block);\nvar AST_Catch = DEFNODE(\"Catch\", \"argname\", {\n  $documentation: \"A `catch` node; only makes sense as part of a `try` statement\",\n  $propdoc: {\n    argname: \"[AST_SymbolCatch|AST_Destructuring|AST_Expansion|AST_DefaultAssign] symbol for the exception\"\n  },\n  _walk: function _walk(visitor) {\n    return visitor._visit(this, function () {\n      if (this.argname) this.argname._walk(visitor);\n      walk_body(this, visitor);\n    });\n  },\n  _children_backwards: function _children_backwards(push) {\n    var i = this.body.length;\n\n    while (i--) {\n      push(this.body[i]);\n    }\n\n    if (this.argname) push(this.argname);\n  }\n}, AST_Block);\nvar AST_Finally = DEFNODE(\"Finally\", null, {\n  $documentation: \"A `finally` node; only makes sense as part of a `try` statement\"\n}, AST_Block);\n/* -----[ VAR/CONST ]----- */\n\nvar AST_Definitions = DEFNODE(\"Definitions\", \"definitions\", {\n  $documentation: \"Base class for `var` or `const` nodes (variable declarations/initializations)\",\n  $propdoc: {\n    definitions: \"[AST_VarDef*] array of variable definitions\"\n  },\n  _walk: function _walk(visitor) {\n    return visitor._visit(this, function () {\n      var definitions = this.definitions;\n\n      for (var i = 0, len = definitions.length; i < len; i++) {\n        definitions[i]._walk(visitor);\n      }\n    });\n  },\n  _children_backwards: function _children_backwards(push) {\n    var i = this.definitions.length;\n\n    while (i--) {\n      push(this.definitions[i]);\n    }\n  }\n}, AST_Statement);\nvar AST_Var = DEFNODE(\"Var\", null, {\n  $documentation: \"A `var` statement\"\n}, AST_Definitions);\nvar AST_Let = DEFNODE(\"Let\", null, {\n  $documentation: \"A `let` statement\"\n}, AST_Definitions);\nvar AST_Const = DEFNODE(\"Const\", null, {\n  $documentation: \"A `const` statement\"\n}, AST_Definitions);\nvar AST_VarDef = DEFNODE(\"VarDef\", \"name value\", {\n  $documentation: \"A variable declaration; only appears in a AST_Definitions node\",\n  $propdoc: {\n    name: \"[AST_Destructuring|AST_SymbolConst|AST_SymbolLet|AST_SymbolVar] name of the variable\",\n    value: \"[AST_Node?] initializer, or null of there's no initializer\"\n  },\n  _walk: function _walk(visitor) {\n    return visitor._visit(this, function () {\n      this.name._walk(visitor);\n\n      if (this.value) this.value._walk(visitor);\n    });\n  },\n  _children_backwards: function _children_backwards(push) {\n    if (this.value) push(this.value);\n    push(this.name);\n  }\n});\nvar AST_NameMapping = DEFNODE(\"NameMapping\", \"foreign_name name\", {\n  $documentation: \"The part of the export/import statement that declare names from a module.\",\n  $propdoc: {\n    foreign_name: \"[AST_SymbolExportForeign|AST_SymbolImportForeign] The name being exported/imported (as specified in the module)\",\n    name: \"[AST_SymbolExport|AST_SymbolImport] The name as it is visible to this module.\"\n  },\n  _walk: function _walk(visitor) {\n    return visitor._visit(this, function () {\n      this.foreign_name._walk(visitor);\n\n      this.name._walk(visitor);\n    });\n  },\n  _children_backwards: function _children_backwards(push) {\n    push(this.name);\n    push(this.foreign_name);\n  }\n});\nvar AST_Import = DEFNODE(\"Import\", \"imported_name imported_names module_name\", {\n  $documentation: \"An `import` statement\",\n  $propdoc: {\n    imported_name: \"[AST_SymbolImport] The name of the variable holding the module's default export.\",\n    imported_names: \"[AST_NameMapping*] The names of non-default imported variables\",\n    module_name: \"[AST_String] String literal describing where this module came from\"\n  },\n  _walk: function _walk(visitor) {\n    return visitor._visit(this, function () {\n      if (this.imported_name) {\n        this.imported_name._walk(visitor);\n      }\n\n      if (this.imported_names) {\n        this.imported_names.forEach(function (name_import) {\n          name_import._walk(visitor);\n        });\n      }\n\n      this.module_name._walk(visitor);\n    });\n  },\n  _children_backwards: function _children_backwards(push) {\n    push(this.module_name);\n\n    if (this.imported_names) {\n      var i = this.imported_names.length;\n\n      while (i--) {\n        push(this.imported_names[i]);\n      }\n    }\n\n    if (this.imported_name) push(this.imported_name);\n  }\n});\nvar AST_ImportMeta = DEFNODE(\"ImportMeta\", null, {\n  $documentation: \"A reference to import.meta\"\n});\nvar AST_Export = DEFNODE(\"Export\", \"exported_definition exported_value is_default exported_names module_name\", {\n  $documentation: \"An `export` statement\",\n  $propdoc: {\n    exported_definition: \"[AST_Defun|AST_Definitions|AST_DefClass?] An exported definition\",\n    exported_value: \"[AST_Node?] An exported value\",\n    exported_names: \"[AST_NameMapping*?] List of exported names\",\n    module_name: \"[AST_String?] Name of the file to load exports from\",\n    is_default: \"[Boolean] Whether this is the default exported value of this module\"\n  },\n  _walk: function _walk(visitor) {\n    return visitor._visit(this, function () {\n      if (this.exported_definition) {\n        this.exported_definition._walk(visitor);\n      }\n\n      if (this.exported_value) {\n        this.exported_value._walk(visitor);\n      }\n\n      if (this.exported_names) {\n        this.exported_names.forEach(function (name_export) {\n          name_export._walk(visitor);\n        });\n      }\n\n      if (this.module_name) {\n        this.module_name._walk(visitor);\n      }\n    });\n  },\n  _children_backwards: function _children_backwards(push) {\n    if (this.module_name) push(this.module_name);\n\n    if (this.exported_names) {\n      var i = this.exported_names.length;\n\n      while (i--) {\n        push(this.exported_names[i]);\n      }\n    }\n\n    if (this.exported_value) push(this.exported_value);\n    if (this.exported_definition) push(this.exported_definition);\n  }\n}, AST_Statement);\n/* -----[ OTHER ]----- */\n\nvar AST_Call = DEFNODE(\"Call\", \"expression args optional _annotations\", {\n  $documentation: \"A function call expression\",\n  $propdoc: {\n    expression: \"[AST_Node] expression to invoke as function\",\n    args: \"[AST_Node*] array of arguments\",\n    optional: \"[boolean] whether this is an optional call (IE ?.() )\",\n    _annotations: \"[number] bitfield containing information about the call\"\n  },\n  initialize: function initialize() {\n    if (this._annotations == null) this._annotations = 0;\n  },\n  _walk: function _walk(visitor) {\n    return visitor._visit(this, function () {\n      var args = this.args;\n\n      for (var i = 0, len = args.length; i < len; i++) {\n        args[i]._walk(visitor);\n      }\n\n      this.expression._walk(visitor); // TODO why do we need to crawl this last?\n\n    });\n  },\n  _children_backwards: function _children_backwards(push) {\n    var i = this.args.length;\n\n    while (i--) {\n      push(this.args[i]);\n    }\n\n    push(this.expression);\n  }\n});\nvar AST_New = DEFNODE(\"New\", null, {\n  $documentation: \"An object instantiation.  Derives from a function call since it has exactly the same properties\"\n}, AST_Call);\nvar AST_Sequence = DEFNODE(\"Sequence\", \"expressions\", {\n  $documentation: \"A sequence expression (comma-separated expressions)\",\n  $propdoc: {\n    expressions: \"[AST_Node*] array of expressions (at least two)\"\n  },\n  _walk: function _walk(visitor) {\n    return visitor._visit(this, function () {\n      this.expressions.forEach(function (node) {\n        node._walk(visitor);\n      });\n    });\n  },\n  _children_backwards: function _children_backwards(push) {\n    var i = this.expressions.length;\n\n    while (i--) {\n      push(this.expressions[i]);\n    }\n  }\n});\nvar AST_PropAccess = DEFNODE(\"PropAccess\", \"expression property optional\", {\n  $documentation: \"Base class for property access expressions, i.e. `a.foo` or `a[\\\"foo\\\"]`\",\n  $propdoc: {\n    expression: \"[AST_Node] the “container” expression\",\n    property: \"[AST_Node|string] the property to access.  For AST_Dot & AST_DotHash this is always a plain string, while for AST_Sub it's an arbitrary AST_Node\",\n    optional: \"[boolean] whether this is an optional property access (IE ?.)\"\n  }\n});\nvar AST_Dot = DEFNODE(\"Dot\", \"quote\", {\n  $documentation: \"A dotted property access expression\",\n  $propdoc: {\n    quote: \"[string] the original quote character when transformed from AST_Sub\"\n  },\n  _walk: function _walk(visitor) {\n    return visitor._visit(this, function () {\n      this.expression._walk(visitor);\n    });\n  },\n  _children_backwards: function _children_backwards(push) {\n    push(this.expression);\n  }\n}, AST_PropAccess);\nvar AST_DotHash = DEFNODE(\"DotHash\", \"\", {\n  $documentation: \"A dotted property access to a private property\",\n  _walk: function _walk(visitor) {\n    return visitor._visit(this, function () {\n      this.expression._walk(visitor);\n    });\n  },\n  _children_backwards: function _children_backwards(push) {\n    push(this.expression);\n  }\n}, AST_PropAccess);\nvar AST_Sub = DEFNODE(\"Sub\", null, {\n  $documentation: \"Index-style property access, i.e. `a[\\\"foo\\\"]`\",\n  _walk: function _walk(visitor) {\n    return visitor._visit(this, function () {\n      this.expression._walk(visitor);\n\n      this.property._walk(visitor);\n    });\n  },\n  _children_backwards: function _children_backwards(push) {\n    push(this.property);\n    push(this.expression);\n  }\n}, AST_PropAccess);\nvar AST_Chain = DEFNODE(\"Chain\", \"expression\", {\n  $documentation: \"A chain expression like a?.b?.(c)?.[d]\",\n  $propdoc: {\n    expression: \"[AST_Call|AST_Dot|AST_DotHash|AST_Sub] chain element.\"\n  },\n  _walk: function _walk(visitor) {\n    return visitor._visit(this, function () {\n      this.expression._walk(visitor);\n    });\n  },\n  _children_backwards: function _children_backwards(push) {\n    push(this.expression);\n  }\n});\nvar AST_Unary = DEFNODE(\"Unary\", \"operator expression\", {\n  $documentation: \"Base class for unary expressions\",\n  $propdoc: {\n    operator: \"[string] the operator\",\n    expression: \"[AST_Node] expression that this unary operator applies to\"\n  },\n  _walk: function _walk(visitor) {\n    return visitor._visit(this, function () {\n      this.expression._walk(visitor);\n    });\n  },\n  _children_backwards: function _children_backwards(push) {\n    push(this.expression);\n  }\n});\nvar AST_UnaryPrefix = DEFNODE(\"UnaryPrefix\", null, {\n  $documentation: \"Unary prefix expression, i.e. `typeof i` or `++i`\"\n}, AST_Unary);\nvar AST_UnaryPostfix = DEFNODE(\"UnaryPostfix\", null, {\n  $documentation: \"Unary postfix expression, i.e. `i++`\"\n}, AST_Unary);\nvar AST_Binary = DEFNODE(\"Binary\", \"operator left right\", {\n  $documentation: \"Binary expression, i.e. `a + b`\",\n  $propdoc: {\n    left: \"[AST_Node] left-hand side expression\",\n    operator: \"[string] the operator\",\n    right: \"[AST_Node] right-hand side expression\"\n  },\n  _walk: function _walk(visitor) {\n    return visitor._visit(this, function () {\n      this.left._walk(visitor);\n\n      this.right._walk(visitor);\n    });\n  },\n  _children_backwards: function _children_backwards(push) {\n    push(this.right);\n    push(this.left);\n  }\n});\nvar AST_Conditional = DEFNODE(\"Conditional\", \"condition consequent alternative\", {\n  $documentation: \"Conditional expression using the ternary operator, i.e. `a ? b : c`\",\n  $propdoc: {\n    condition: \"[AST_Node]\",\n    consequent: \"[AST_Node]\",\n    alternative: \"[AST_Node]\"\n  },\n  _walk: function _walk(visitor) {\n    return visitor._visit(this, function () {\n      this.condition._walk(visitor);\n\n      this.consequent._walk(visitor);\n\n      this.alternative._walk(visitor);\n    });\n  },\n  _children_backwards: function _children_backwards(push) {\n    push(this.alternative);\n    push(this.consequent);\n    push(this.condition);\n  }\n});\nvar AST_Assign = DEFNODE(\"Assign\", \"logical\", {\n  $documentation: \"An assignment expression — `a = b + 5`\",\n  $propdoc: {\n    logical: \"Whether it's a logical assignment\"\n  }\n}, AST_Binary);\nvar AST_DefaultAssign = DEFNODE(\"DefaultAssign\", null, {\n  $documentation: \"A default assignment expression like in `(a = 3) => a`\"\n}, AST_Binary);\n/* -----[ LITERALS ]----- */\n\nvar AST_Array = DEFNODE(\"Array\", \"elements\", {\n  $documentation: \"An array literal\",\n  $propdoc: {\n    elements: \"[AST_Node*] array of elements\"\n  },\n  _walk: function _walk(visitor) {\n    return visitor._visit(this, function () {\n      var elements = this.elements;\n\n      for (var i = 0, len = elements.length; i < len; i++) {\n        elements[i]._walk(visitor);\n      }\n    });\n  },\n  _children_backwards: function _children_backwards(push) {\n    var i = this.elements.length;\n\n    while (i--) {\n      push(this.elements[i]);\n    }\n  }\n});\nvar AST_Object = DEFNODE(\"Object\", \"properties\", {\n  $documentation: \"An object literal\",\n  $propdoc: {\n    properties: \"[AST_ObjectProperty*] array of properties\"\n  },\n  _walk: function _walk(visitor) {\n    return visitor._visit(this, function () {\n      var properties = this.properties;\n\n      for (var i = 0, len = properties.length; i < len; i++) {\n        properties[i]._walk(visitor);\n      }\n    });\n  },\n  _children_backwards: function _children_backwards(push) {\n    var i = this.properties.length;\n\n    while (i--) {\n      push(this.properties[i]);\n    }\n  }\n});\nvar AST_ObjectProperty = DEFNODE(\"ObjectProperty\", \"key value\", {\n  $documentation: \"Base class for literal object properties\",\n  $propdoc: {\n    key: \"[string|AST_Node] property name. For ObjectKeyVal this is a string. For getters, setters and computed property this is an AST_Node.\",\n    value: \"[AST_Node] property value.  For getters and setters this is an AST_Accessor.\"\n  },\n  _walk: function _walk(visitor) {\n    return visitor._visit(this, function () {\n      if (this.key instanceof AST_Node) this.key._walk(visitor);\n\n      this.value._walk(visitor);\n    });\n  },\n  _children_backwards: function _children_backwards(push) {\n    push(this.value);\n    if (this.key instanceof AST_Node) push(this.key);\n  }\n});\nvar AST_ObjectKeyVal = DEFNODE(\"ObjectKeyVal\", \"quote\", {\n  $documentation: \"A key: value object property\",\n  $propdoc: {\n    quote: \"[string] the original quote character\"\n  },\n  computed_key: function computed_key() {\n    return this.key instanceof AST_Node;\n  }\n}, AST_ObjectProperty);\nvar AST_PrivateSetter = DEFNODE(\"PrivateSetter\", \"static\", {\n  $propdoc: {\n    static: \"[boolean] whether this is a static private setter\"\n  },\n  $documentation: \"A private setter property\",\n  computed_key: function computed_key() {\n    return false;\n  }\n}, AST_ObjectProperty);\nvar AST_PrivateGetter = DEFNODE(\"PrivateGetter\", \"static\", {\n  $propdoc: {\n    static: \"[boolean] whether this is a static private getter\"\n  },\n  $documentation: \"A private getter property\",\n  computed_key: function computed_key() {\n    return false;\n  }\n}, AST_ObjectProperty);\nvar AST_ObjectSetter = DEFNODE(\"ObjectSetter\", \"quote static\", {\n  $propdoc: {\n    quote: \"[string|undefined] the original quote character, if any\",\n    static: \"[boolean] whether this is a static setter (classes only)\"\n  },\n  $documentation: \"An object setter property\",\n  computed_key: function computed_key() {\n    return !(this.key instanceof AST_SymbolMethod);\n  }\n}, AST_ObjectProperty);\nvar AST_ObjectGetter = DEFNODE(\"ObjectGetter\", \"quote static\", {\n  $propdoc: {\n    quote: \"[string|undefined] the original quote character, if any\",\n    static: \"[boolean] whether this is a static getter (classes only)\"\n  },\n  $documentation: \"An object getter property\",\n  computed_key: function computed_key() {\n    return !(this.key instanceof AST_SymbolMethod);\n  }\n}, AST_ObjectProperty);\nvar AST_ConciseMethod = DEFNODE(\"ConciseMethod\", \"quote static is_generator async\", {\n  $propdoc: {\n    quote: \"[string|undefined] the original quote character, if any\",\n    static: \"[boolean] is this method static (classes only)\",\n    is_generator: \"[boolean] is this a generator method\",\n    async: \"[boolean] is this method async\"\n  },\n  $documentation: \"An ES6 concise method inside an object or class\",\n  computed_key: function computed_key() {\n    return !(this.key instanceof AST_SymbolMethod);\n  }\n}, AST_ObjectProperty);\nvar AST_PrivateMethod = DEFNODE(\"PrivateMethod\", \"\", {\n  $documentation: \"A private class method inside a class\"\n}, AST_ConciseMethod);\nvar AST_Class = DEFNODE(\"Class\", \"name extends properties\", {\n  $propdoc: {\n    name: \"[AST_SymbolClass|AST_SymbolDefClass?] optional class name.\",\n    extends: \"[AST_Node]? optional parent class\",\n    properties: \"[AST_ObjectProperty*] array of properties\"\n  },\n  $documentation: \"An ES6 class\",\n  _walk: function _walk(visitor) {\n    return visitor._visit(this, function () {\n      if (this.name) {\n        this.name._walk(visitor);\n      }\n\n      if (this.extends) {\n        this.extends._walk(visitor);\n      }\n\n      this.properties.forEach(function (prop) {\n        return prop._walk(visitor);\n      });\n    });\n  },\n  _children_backwards: function _children_backwards(push) {\n    var i = this.properties.length;\n\n    while (i--) {\n      push(this.properties[i]);\n    }\n\n    if (this.extends) push(this.extends);\n    if (this.name) push(this.name);\n  }\n}, AST_Scope\n/* TODO a class might have a scope but it's not a scope */\n);\nvar AST_ClassProperty = DEFNODE(\"ClassProperty\", \"static quote\", {\n  $documentation: \"A class property\",\n  $propdoc: {\n    static: \"[boolean] whether this is a static key\",\n    quote: \"[string] which quote is being used\"\n  },\n  _walk: function _walk(visitor) {\n    return visitor._visit(this, function () {\n      if (this.key instanceof AST_Node) this.key._walk(visitor);\n      if (this.value instanceof AST_Node) this.value._walk(visitor);\n    });\n  },\n  _children_backwards: function _children_backwards(push) {\n    if (this.value instanceof AST_Node) push(this.value);\n    if (this.key instanceof AST_Node) push(this.key);\n  },\n  computed_key: function computed_key() {\n    return !(this.key instanceof AST_SymbolClassProperty);\n  }\n}, AST_ObjectProperty);\nvar AST_ClassPrivateProperty = DEFNODE(\"ClassProperty\", \"\", {\n  $documentation: \"A class property for a private property\"\n}, AST_ClassProperty);\nvar AST_DefClass = DEFNODE(\"DefClass\", null, {\n  $documentation: \"A class definition\"\n}, AST_Class);\nvar AST_ClassExpression = DEFNODE(\"ClassExpression\", null, {\n  $documentation: \"A class expression.\"\n}, AST_Class);\nvar AST_Symbol = DEFNODE(\"Symbol\", \"scope name thedef\", {\n  $propdoc: {\n    name: \"[string] name of this symbol\",\n    scope: \"[AST_Scope/S] the current scope (not necessarily the definition scope)\",\n    thedef: \"[SymbolDef/S] the definition of this symbol\"\n  },\n  $documentation: \"Base class for all symbols\"\n});\nvar AST_NewTarget = DEFNODE(\"NewTarget\", null, {\n  $documentation: \"A reference to new.target\"\n});\nvar AST_SymbolDeclaration = DEFNODE(\"SymbolDeclaration\", \"init\", {\n  $documentation: \"A declaration symbol (symbol in var/const, function name or argument, symbol in catch)\"\n}, AST_Symbol);\nvar AST_SymbolVar = DEFNODE(\"SymbolVar\", null, {\n  $documentation: \"Symbol defining a variable\"\n}, AST_SymbolDeclaration);\nvar AST_SymbolBlockDeclaration = DEFNODE(\"SymbolBlockDeclaration\", null, {\n  $documentation: \"Base class for block-scoped declaration symbols\"\n}, AST_SymbolDeclaration);\nvar AST_SymbolConst = DEFNODE(\"SymbolConst\", null, {\n  $documentation: \"A constant declaration\"\n}, AST_SymbolBlockDeclaration);\nvar AST_SymbolLet = DEFNODE(\"SymbolLet\", null, {\n  $documentation: \"A block-scoped `let` declaration\"\n}, AST_SymbolBlockDeclaration);\nvar AST_SymbolFunarg = DEFNODE(\"SymbolFunarg\", null, {\n  $documentation: \"Symbol naming a function argument\"\n}, AST_SymbolVar);\nvar AST_SymbolDefun = DEFNODE(\"SymbolDefun\", null, {\n  $documentation: \"Symbol defining a function\"\n}, AST_SymbolDeclaration);\nvar AST_SymbolMethod = DEFNODE(\"SymbolMethod\", null, {\n  $documentation: \"Symbol in an object defining a method\"\n}, AST_Symbol);\nvar AST_SymbolClassProperty = DEFNODE(\"SymbolClassProperty\", null, {\n  $documentation: \"Symbol for a class property\"\n}, AST_Symbol);\nvar AST_SymbolLambda = DEFNODE(\"SymbolLambda\", null, {\n  $documentation: \"Symbol naming a function expression\"\n}, AST_SymbolDeclaration);\nvar AST_SymbolDefClass = DEFNODE(\"SymbolDefClass\", null, {\n  $documentation: \"Symbol naming a class's name in a class declaration. Lexically scoped to its containing scope, and accessible within the class.\"\n}, AST_SymbolBlockDeclaration);\nvar AST_SymbolClass = DEFNODE(\"SymbolClass\", null, {\n  $documentation: \"Symbol naming a class's name. Lexically scoped to the class.\"\n}, AST_SymbolDeclaration);\nvar AST_SymbolCatch = DEFNODE(\"SymbolCatch\", null, {\n  $documentation: \"Symbol naming the exception in catch\"\n}, AST_SymbolBlockDeclaration);\nvar AST_SymbolImport = DEFNODE(\"SymbolImport\", null, {\n  $documentation: \"Symbol referring to an imported name\"\n}, AST_SymbolBlockDeclaration);\nvar AST_SymbolImportForeign = DEFNODE(\"SymbolImportForeign\", null, {\n  $documentation: \"A symbol imported from a module, but it is defined in the other module, and its real name is irrelevant for this module's purposes\"\n}, AST_Symbol);\nvar AST_Label = DEFNODE(\"Label\", \"references\", {\n  $documentation: \"Symbol naming a label (declaration)\",\n  $propdoc: {\n    references: \"[AST_LoopControl*] a list of nodes referring to this label\"\n  },\n  initialize: function initialize() {\n    this.references = [];\n    this.thedef = this;\n  }\n}, AST_Symbol);\nvar AST_SymbolRef = DEFNODE(\"SymbolRef\", null, {\n  $documentation: \"Reference to some symbol (not definition/declaration)\"\n}, AST_Symbol);\nvar AST_SymbolExport = DEFNODE(\"SymbolExport\", null, {\n  $documentation: \"Symbol referring to a name to export\"\n}, AST_SymbolRef);\nvar AST_SymbolExportForeign = DEFNODE(\"SymbolExportForeign\", null, {\n  $documentation: \"A symbol exported from this module, but it is used in the other module, and its real name is irrelevant for this module's purposes\"\n}, AST_Symbol);\nvar AST_LabelRef = DEFNODE(\"LabelRef\", null, {\n  $documentation: \"Reference to a label symbol\"\n}, AST_Symbol);\nvar AST_This = DEFNODE(\"This\", null, {\n  $documentation: \"The `this` symbol\"\n}, AST_Symbol);\nvar AST_Super = DEFNODE(\"Super\", null, {\n  $documentation: \"The `super` symbol\"\n}, AST_This);\nvar AST_Constant = DEFNODE(\"Constant\", null, {\n  $documentation: \"Base class for all constants\",\n  getValue: function getValue() {\n    return this.value;\n  }\n});\nvar AST_String = DEFNODE(\"String\", \"value quote\", {\n  $documentation: \"A string literal\",\n  $propdoc: {\n    value: \"[string] the contents of this string\",\n    quote: \"[string] the original quote character\"\n  }\n}, AST_Constant);\nvar AST_Number = DEFNODE(\"Number\", \"value raw\", {\n  $documentation: \"A number literal\",\n  $propdoc: {\n    value: \"[number] the numeric value\",\n    raw: \"[string] numeric value as string\"\n  }\n}, AST_Constant);\nvar AST_BigInt = DEFNODE(\"BigInt\", \"value\", {\n  $documentation: \"A big int literal\",\n  $propdoc: {\n    value: \"[string] big int value\"\n  }\n}, AST_Constant);\nvar AST_RegExp = DEFNODE(\"RegExp\", \"value\", {\n  $documentation: \"A regexp literal\",\n  $propdoc: {\n    value: \"[RegExp] the actual regexp\"\n  }\n}, AST_Constant);\nvar AST_Atom = DEFNODE(\"Atom\", null, {\n  $documentation: \"Base class for atoms\"\n}, AST_Constant);\nvar AST_Null = DEFNODE(\"Null\", null, {\n  $documentation: \"The `null` atom\",\n  value: null\n}, AST_Atom);\nvar AST_NaN = DEFNODE(\"NaN\", null, {\n  $documentation: \"The impossible value\",\n  value: 0 / 0\n}, AST_Atom);\nvar AST_Undefined = DEFNODE(\"Undefined\", null, {\n  $documentation: \"The `undefined` value\",\n  value: function () {}()\n}, AST_Atom);\nvar AST_Hole = DEFNODE(\"Hole\", null, {\n  $documentation: \"A hole in an array\",\n  value: function () {}()\n}, AST_Atom);\nvar AST_Infinity = DEFNODE(\"Infinity\", null, {\n  $documentation: \"The `Infinity` value\",\n  value: 1 / 0\n}, AST_Atom);\nvar AST_Boolean = DEFNODE(\"Boolean\", null, {\n  $documentation: \"Base class for booleans\"\n}, AST_Atom);\nvar AST_False = DEFNODE(\"False\", null, {\n  $documentation: \"The `false` atom\",\n  value: false\n}, AST_Boolean);\nvar AST_True = DEFNODE(\"True\", null, {\n  $documentation: \"The `true` atom\",\n  value: true\n}, AST_Boolean);\n/* -----[ Walk function ]---- */\n\n/**\n * Walk nodes in depth-first search fashion.\n * Callback can return `walk_abort` symbol to stop iteration.\n * It can also return `true` to stop iteration just for child nodes.\n * Iteration can be stopped and continued by passing the `to_visit` argument,\n * which is given to the callback in the second argument.\n **/\n\nfunction walk(node, cb) {\n  var to_visit = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [node];\n  var push = to_visit.push.bind(to_visit);\n\n  while (to_visit.length) {\n    var _node = to_visit.pop();\n\n    var ret = cb(_node, to_visit);\n\n    if (ret) {\n      if (ret === walk_abort) return true;\n      continue;\n    }\n\n    _node._children_backwards(push);\n  }\n\n  return false;\n}\n\nfunction walk_parent(node, cb, initial_stack) {\n  var to_visit = [node];\n  var push = to_visit.push.bind(to_visit);\n  var stack = initial_stack ? initial_stack.slice() : [];\n  var parent_pop_indices = [];\n  var current;\n  var info = {\n    parent: function parent() {\n      var n = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n\n      if (n === -1) {\n        return current;\n      } // [ p1 p0 ] [ 1 0 ]\n\n\n      if (initial_stack && n >= stack.length) {\n        n -= stack.length;\n        return initial_stack[initial_stack.length - (n + 1)];\n      }\n\n      return stack[stack.length - (1 + n)];\n    }\n  };\n\n  while (to_visit.length) {\n    current = to_visit.pop();\n\n    while (parent_pop_indices.length && to_visit.length == parent_pop_indices[parent_pop_indices.length - 1]) {\n      stack.pop();\n      parent_pop_indices.pop();\n    }\n\n    var ret = cb(current, info);\n\n    if (ret) {\n      if (ret === walk_abort) return true;\n      continue;\n    }\n\n    var visit_length = to_visit.length;\n\n    current._children_backwards(push); // Push only if we're going to traverse the children\n\n\n    if (to_visit.length > visit_length) {\n      stack.push(current);\n      parent_pop_indices.push(visit_length - 1);\n    }\n  }\n\n  return false;\n}\n\nvar walk_abort = Symbol(\"abort walk\");\n/* -----[ TreeWalker ]----- */\n\nvar TreeWalker = /*#__PURE__*/function () {\n  function TreeWalker(callback) {\n    _classCallCheck(this, TreeWalker);\n\n    this.visit = callback;\n    this.stack = [];\n    this.directives = Object.create(null);\n  }\n\n  _createClass(TreeWalker, [{\n    key: \"_visit\",\n    value: function _visit(node, descend) {\n      this.push(node);\n      var ret = this.visit(node, descend ? function () {\n        descend.call(node);\n      } : noop);\n\n      if (!ret && descend) {\n        descend.call(node);\n      }\n\n      this.pop();\n      return ret;\n    }\n  }, {\n    key: \"parent\",\n    value: function parent(n) {\n      return this.stack[this.stack.length - 2 - (n || 0)];\n    }\n  }, {\n    key: \"push\",\n    value: function push(node) {\n      if (node instanceof AST_Lambda) {\n        this.directives = Object.create(this.directives);\n      } else if (node instanceof AST_Directive && !this.directives[node.value]) {\n        this.directives[node.value] = node;\n      } else if (node instanceof AST_Class) {\n        this.directives = Object.create(this.directives);\n\n        if (!this.directives[\"use strict\"]) {\n          this.directives[\"use strict\"] = node;\n        }\n      }\n\n      this.stack.push(node);\n    }\n  }, {\n    key: \"pop\",\n    value: function pop() {\n      var node = this.stack.pop();\n\n      if (node instanceof AST_Lambda || node instanceof AST_Class) {\n        this.directives = Object.getPrototypeOf(this.directives);\n      }\n    }\n  }, {\n    key: \"self\",\n    value: function self() {\n      return this.stack[this.stack.length - 1];\n    }\n  }, {\n    key: \"find_parent\",\n    value: function find_parent(type) {\n      var stack = this.stack;\n\n      for (var i = stack.length; --i >= 0;) {\n        var x = stack[i];\n        if (x instanceof type) return x;\n      }\n    }\n  }, {\n    key: \"has_directive\",\n    value: function has_directive(type) {\n      var dir = this.directives[type];\n      if (dir) return dir;\n      var node = this.stack[this.stack.length - 1];\n\n      if (node instanceof AST_Scope && node.body) {\n        for (var i = 0; i < node.body.length; ++i) {\n          var st = node.body[i];\n          if (!(st instanceof AST_Directive)) break;\n          if (st.value == type) return st;\n        }\n      }\n    }\n  }, {\n    key: \"loopcontrol_target\",\n    value: function loopcontrol_target(node) {\n      var stack = this.stack;\n      if (node.label) for (var i = stack.length; --i >= 0;) {\n        var x = stack[i];\n        if (x instanceof AST_LabeledStatement && x.label.name == node.label.name) return x.body;\n      } else for (var i = stack.length; --i >= 0;) {\n        var x = stack[i];\n        if (x instanceof AST_IterationStatement || node instanceof AST_Break && x instanceof AST_Switch) return x;\n      }\n    }\n  }]);\n\n  return TreeWalker;\n}(); // Tree transformer helpers.\n\n\nvar TreeTransformer = /*#__PURE__*/function (_TreeWalker) {\n  _inherits(TreeTransformer, _TreeWalker);\n\n  var _super = _createSuper(TreeTransformer);\n\n  function TreeTransformer(before, after) {\n    var _this;\n\n    _classCallCheck(this, TreeTransformer);\n\n    _this = _super.call(this);\n    _this.before = before;\n    _this.after = after;\n    return _this;\n  }\n\n  return TreeTransformer;\n}(TreeWalker);\n\nvar _PURE = 1;\nvar _INLINE = 2;\nvar _NOINLINE = 4;\nexport { AST_Accessor, AST_Array, AST_Arrow, AST_Assign, AST_Atom, AST_Await, AST_BigInt, AST_Binary, AST_Block, AST_BlockStatement, AST_Boolean, AST_Break, AST_Call, AST_Case, AST_Catch, AST_Chain, AST_Class, AST_ClassExpression, AST_ClassPrivateProperty, AST_ClassProperty, AST_ConciseMethod, AST_Conditional, AST_Const, AST_Constant, AST_Continue, AST_Debugger, AST_Default, AST_DefaultAssign, AST_DefClass, AST_Definitions, AST_Defun, AST_Destructuring, AST_Directive, AST_Do, AST_Dot, AST_DotHash, AST_DWLoop, AST_EmptyStatement, AST_Exit, AST_Expansion, AST_Export, AST_False, AST_Finally, AST_For, AST_ForIn, AST_ForOf, AST_Function, AST_Hole, AST_If, AST_Import, AST_ImportMeta, AST_Infinity, AST_IterationStatement, AST_Jump, AST_Label, AST_LabeledStatement, AST_LabelRef, AST_Lambda, AST_Let, AST_LoopControl, AST_NameMapping, AST_NaN, AST_New, AST_NewTarget, AST_Node, AST_Null, AST_Number, AST_Object, AST_ObjectGetter, AST_ObjectKeyVal, AST_ObjectProperty, AST_ObjectSetter, AST_PrefixedTemplateString, AST_PrivateGetter, AST_PrivateMethod, AST_PrivateSetter, AST_PropAccess, AST_RegExp, AST_Return, AST_Scope, AST_Sequence, AST_SimpleStatement, AST_Statement, AST_StatementWithBody, AST_String, AST_Sub, AST_Super, AST_Switch, AST_SwitchBranch, AST_Symbol, AST_SymbolBlockDeclaration, AST_SymbolCatch, AST_SymbolClass, AST_SymbolClassProperty, AST_SymbolConst, AST_SymbolDeclaration, AST_SymbolDefClass, AST_SymbolDefun, AST_SymbolExport, AST_SymbolExportForeign, AST_SymbolFunarg, AST_SymbolImport, AST_SymbolImportForeign, AST_SymbolLambda, AST_SymbolLet, AST_SymbolMethod, AST_SymbolRef, AST_SymbolVar, AST_TemplateSegment, AST_TemplateString, AST_This, AST_Throw, AST_Token, AST_Toplevel, AST_True, AST_Try, AST_Unary, AST_UnaryPostfix, AST_UnaryPrefix, AST_Undefined, AST_Var, AST_VarDef, AST_While, AST_With, AST_Yield // Walkers\n, TreeTransformer, TreeWalker, walk, walk_abort, walk_body, walk_parent // annotations\n, _INLINE, _NOINLINE, _PURE };","map":{"version":3,"sources":["/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/terser-webpack-plugin/node_modules/terser/lib/ast.js"],"names":["HOP","MAP","noop","parse","DEFNODE","type","props","methods","base","AST_Node","split","self_props","PROPS","concat","code","i","length","proto","Object","create","prototype","initialize","ctor","Function","BASE","SUBCLASSES","push","CTOR","constructor","SELF_PROPS","TYPE","substr","DEFMETHOD","name","method","has_tok_flag","tok","flag","Boolean","flags","set_tok_flag","truth","TOK_FLAG_NLB","TOK_FLAG_QUOTE_SINGLE","TOK_FLAG_QUOTE_EXISTS","AST_Token","value","line","col","pos","nlb","comments_before","comments_after","file","seal","new_nlb","quote_type","_clone","deep","self","clone","transform","TreeTransformer","node","$documentation","$propdoc","start","end","_walk","visitor","_visit","walk","_children_backwards","AST_Statement","AST_Debugger","AST_Directive","quote","AST_SimpleStatement","body","walk_body","len","clone_block_scope","block_scope","AST_Block","AST_BlockStatement","AST_EmptyStatement","AST_StatementWithBody","AST_LabeledStatement","label","def","TreeWalker","AST_LoopControl","thedef","references","AST_IterationStatement","AST_DWLoop","condition","AST_Do","AST_While","AST_For","init","step","AST_ForIn","object","AST_ForOf","AST_With","expression","AST_Scope","variables","uses_with","uses_eval","parent_scope","enclosed","cname","get_defun_scope","is_block_scope","toplevel","_block_scope","figure_out_scope","Map","slice","pinned","AST_Toplevel","globals","wrap_commonjs","wrapped_tl","splice","wrap_enclose","args_values","index","indexOf","join","AST_Expansion","AST_Lambda","argnames","uses_arguments","is_generator","async","args_as_names","out","AST_Destructuring","all_symbols","is_braceless","AST_Return","length_property","arg","AST_SymbolFunarg","AST_Accessor","AST_Function","AST_Arrow","AST_Defun","names","forEach","AST_Symbol","AST_PrefixedTemplateString","template_string","prefix","AST_TemplateString","segments","seg","AST_TemplateSegment","raw","AST_Jump","AST_Exit","AST_Throw","AST_Break","AST_Continue","AST_Await","AST_Yield","is_star","AST_If","alternative","AST_Switch","AST_SwitchBranch","AST_Default","AST_Case","AST_Try","bcatch","bfinally","AST_Catch","argname","AST_Finally","AST_Definitions","definitions","AST_Var","AST_Let","AST_Const","AST_VarDef","AST_NameMapping","foreign_name","AST_Import","imported_name","imported_names","module_name","name_import","AST_ImportMeta","AST_Export","exported_definition","exported_value","exported_names","is_default","name_export","AST_Call","args","optional","_annotations","AST_New","AST_Sequence","expressions","AST_PropAccess","property","AST_Dot","AST_DotHash","AST_Sub","AST_Chain","AST_Unary","operator","AST_UnaryPrefix","AST_UnaryPostfix","AST_Binary","left","right","AST_Conditional","consequent","AST_Assign","logical","AST_DefaultAssign","AST_Array","elements","AST_Object","properties","AST_ObjectProperty","key","AST_ObjectKeyVal","computed_key","AST_PrivateSetter","static","AST_PrivateGetter","AST_ObjectSetter","AST_SymbolMethod","AST_ObjectGetter","AST_ConciseMethod","AST_PrivateMethod","AST_Class","extends","prop","AST_ClassProperty","AST_SymbolClassProperty","AST_ClassPrivateProperty","AST_DefClass","AST_ClassExpression","scope","AST_NewTarget","AST_SymbolDeclaration","AST_SymbolVar","AST_SymbolBlockDeclaration","AST_SymbolConst","AST_SymbolLet","AST_SymbolDefun","AST_SymbolLambda","AST_SymbolDefClass","AST_SymbolClass","AST_SymbolCatch","AST_SymbolImport","AST_SymbolImportForeign","AST_Label","AST_SymbolRef","AST_SymbolExport","AST_SymbolExportForeign","AST_LabelRef","AST_This","AST_Super","AST_Constant","getValue","AST_String","AST_Number","AST_BigInt","AST_RegExp","AST_Atom","AST_Null","AST_NaN","AST_Undefined","AST_Hole","AST_Infinity","AST_Boolean","AST_False","AST_True","cb","to_visit","bind","pop","ret","walk_abort","walk_parent","initial_stack","stack","parent_pop_indices","current","info","parent","n","visit_length","Symbol","callback","visit","directives","descend","call","getPrototypeOf","x","dir","st","before","after","_PURE","_INLINE","_NOINLINE"],"mappings":"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","sourcesContent":["/***********************************************************************\n\n  A JavaScript tokenizer / parser / beautifier / compressor.\n  https://github.com/mishoo/UglifyJS2\n\n  -------------------------------- (C) ---------------------------------\n\n                           Author: Mihai Bazon\n                         <mihai.bazon@gmail.com>\n                       http://mihai.bazon.net/blog\n\n  Distributed under the BSD license:\n\n    Copyright 2012 (c) Mihai Bazon <mihai.bazon@gmail.com>\n\n    Redistribution and use in source and binary forms, with or without\n    modification, are permitted provided that the following conditions\n    are met:\n\n        * Redistributions of source code must retain the above\n          copyright notice, this list of conditions and the following\n          disclaimer.\n\n        * Redistributions in binary form must reproduce the above\n          copyright notice, this list of conditions and the following\n          disclaimer in the documentation and/or other materials\n          provided with the distribution.\n\n    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDER “AS IS” AND ANY\n    EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n    PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER BE\n    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,\n    OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n    PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n    PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n    THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR\n    TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF\n    THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n    SUCH DAMAGE.\n\n ***********************************************************************/\n\n\"use strict\";\n\nimport {\n    HOP,\n    MAP,\n    noop\n} from \"./utils/index.js\";\nimport { parse } from \"./parse.js\";\n\nfunction DEFNODE(type, props, methods, base = AST_Node) {\n    if (!props) props = [];\n    else props = props.split(/\\s+/);\n    var self_props = props;\n    if (base && base.PROPS)\n        props = props.concat(base.PROPS);\n    var code = \"return function AST_\" + type + \"(props){ if (props) { \";\n    for (var i = props.length; --i >= 0;) {\n        code += \"this.\" + props[i] + \" = props.\" + props[i] + \";\";\n    }\n    const proto = base && Object.create(base.prototype);\n    if (proto && proto.initialize || (methods && methods.initialize))\n        code += \"this.initialize();\";\n    code += \"}\";\n    code += \"this.flags = 0;\";\n    code += \"}\";\n    var ctor = new Function(code)();\n    if (proto) {\n        ctor.prototype = proto;\n        ctor.BASE = base;\n    }\n    if (base) base.SUBCLASSES.push(ctor);\n    ctor.prototype.CTOR = ctor;\n    ctor.prototype.constructor = ctor;\n    ctor.PROPS = props || null;\n    ctor.SELF_PROPS = self_props;\n    ctor.SUBCLASSES = [];\n    if (type) {\n        ctor.prototype.TYPE = ctor.TYPE = type;\n    }\n    if (methods) for (i in methods) if (HOP(methods, i)) {\n        if (i[0] === \"$\") {\n            ctor[i.substr(1)] = methods[i];\n        } else {\n            ctor.prototype[i] = methods[i];\n        }\n    }\n    ctor.DEFMETHOD = function(name, method) {\n        this.prototype[name] = method;\n    };\n    return ctor;\n}\n\nconst has_tok_flag = (tok, flag) => Boolean(tok.flags & flag);\nconst set_tok_flag = (tok, flag, truth) => {\n    if (truth) {\n        tok.flags |= flag;\n    } else {\n        tok.flags &= ~flag;\n    }\n};\n\nconst TOK_FLAG_NLB          = 0b0001;\nconst TOK_FLAG_QUOTE_SINGLE = 0b0010;\nconst TOK_FLAG_QUOTE_EXISTS = 0b0100;\n\nclass AST_Token {\n    constructor(type, value, line, col, pos, nlb, comments_before, comments_after, file) {\n        this.flags = (nlb ? 1 : 0);\n\n        this.type = type;\n        this.value = value;\n        this.line = line;\n        this.col = col;\n        this.pos = pos;\n        this.comments_before = comments_before;\n        this.comments_after = comments_after;\n        this.file = file;\n\n        Object.seal(this);\n    }\n\n    get nlb() {\n        return has_tok_flag(this, TOK_FLAG_NLB);\n    }\n\n    set nlb(new_nlb) {\n        set_tok_flag(this, TOK_FLAG_NLB, new_nlb);\n    }\n\n    get quote() {\n        return !has_tok_flag(this, TOK_FLAG_QUOTE_EXISTS)\n            ? \"\"\n            : (has_tok_flag(this, TOK_FLAG_QUOTE_SINGLE) ? \"'\" : '\"');\n    }\n\n    set quote(quote_type) {\n        set_tok_flag(this, TOK_FLAG_QUOTE_SINGLE, quote_type === \"'\");\n        set_tok_flag(this, TOK_FLAG_QUOTE_EXISTS, !!quote_type);\n    }\n}\n\nvar AST_Node = DEFNODE(\"Node\", \"start end\", {\n    _clone: function(deep) {\n        if (deep) {\n            var self = this.clone();\n            return self.transform(new TreeTransformer(function(node) {\n                if (node !== self) {\n                    return node.clone(true);\n                }\n            }));\n        }\n        return new this.CTOR(this);\n    },\n    clone: function(deep) {\n        return this._clone(deep);\n    },\n    $documentation: \"Base class of all AST nodes\",\n    $propdoc: {\n        start: \"[AST_Token] The first token of this node\",\n        end: \"[AST_Token] The last token of this node\"\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this);\n    },\n    walk: function(visitor) {\n        return this._walk(visitor); // not sure the indirection will be any help\n    },\n    _children_backwards: () => {}\n}, null);\n\n/* -----[ statements ]----- */\n\nvar AST_Statement = DEFNODE(\"Statement\", null, {\n    $documentation: \"Base class of all statements\",\n});\n\nvar AST_Debugger = DEFNODE(\"Debugger\", null, {\n    $documentation: \"Represents a debugger statement\",\n}, AST_Statement);\n\nvar AST_Directive = DEFNODE(\"Directive\", \"value quote\", {\n    $documentation: \"Represents a directive, like \\\"use strict\\\";\",\n    $propdoc: {\n        value: \"[string] The value of this directive as a plain string (it's not an AST_String!)\",\n        quote: \"[string] the original quote character\"\n    },\n}, AST_Statement);\n\nvar AST_SimpleStatement = DEFNODE(\"SimpleStatement\", \"body\", {\n    $documentation: \"A statement consisting of an expression, i.e. a = 1 + 2\",\n    $propdoc: {\n        body: \"[AST_Node] an expression node (should not be instanceof AST_Statement)\"\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, function() {\n            this.body._walk(visitor);\n        });\n    },\n    _children_backwards(push) {\n        push(this.body);\n    }\n}, AST_Statement);\n\nfunction walk_body(node, visitor) {\n    const body = node.body;\n    for (var i = 0, len = body.length; i < len; i++) {\n        body[i]._walk(visitor);\n    }\n}\n\nfunction clone_block_scope(deep) {\n    var clone = this._clone(deep);\n    if (this.block_scope) {\n        clone.block_scope = this.block_scope.clone();\n    }\n    return clone;\n}\n\nvar AST_Block = DEFNODE(\"Block\", \"body block_scope\", {\n    $documentation: \"A body of statements (usually braced)\",\n    $propdoc: {\n        body: \"[AST_Statement*] an array of statements\",\n        block_scope: \"[AST_Scope] the block scope\"\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, function() {\n            walk_body(this, visitor);\n        });\n    },\n    _children_backwards(push) {\n        let i = this.body.length;\n        while (i--) push(this.body[i]);\n    },\n    clone: clone_block_scope\n}, AST_Statement);\n\nvar AST_BlockStatement = DEFNODE(\"BlockStatement\", null, {\n    $documentation: \"A block statement\",\n}, AST_Block);\n\nvar AST_EmptyStatement = DEFNODE(\"EmptyStatement\", null, {\n    $documentation: \"The empty statement (empty block or simply a semicolon)\"\n}, AST_Statement);\n\nvar AST_StatementWithBody = DEFNODE(\"StatementWithBody\", \"body\", {\n    $documentation: \"Base class for all statements that contain one nested body: `For`, `ForIn`, `Do`, `While`, `With`\",\n    $propdoc: {\n        body: \"[AST_Statement] the body; this should always be present, even if it's an AST_EmptyStatement\"\n    }\n}, AST_Statement);\n\nvar AST_LabeledStatement = DEFNODE(\"LabeledStatement\", \"label\", {\n    $documentation: \"Statement with a label\",\n    $propdoc: {\n        label: \"[AST_Label] a label definition\"\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, function() {\n            this.label._walk(visitor);\n            this.body._walk(visitor);\n        });\n    },\n    _children_backwards(push) {\n        push(this.body);\n        push(this.label);\n    },\n    clone: function(deep) {\n        var node = this._clone(deep);\n        if (deep) {\n            var label = node.label;\n            var def = this.label;\n            node.walk(new TreeWalker(function(node) {\n                if (node instanceof AST_LoopControl\n                    && node.label && node.label.thedef === def) {\n                    node.label.thedef = label;\n                    label.references.push(node);\n                }\n            }));\n        }\n        return node;\n    }\n}, AST_StatementWithBody);\n\nvar AST_IterationStatement = DEFNODE(\"IterationStatement\", \"block_scope\", {\n    $documentation: \"Internal class.  All loops inherit from it.\",\n    $propdoc: {\n        block_scope: \"[AST_Scope] the block scope for this iteration statement.\"\n    },\n    clone: clone_block_scope\n}, AST_StatementWithBody);\n\nvar AST_DWLoop = DEFNODE(\"DWLoop\", \"condition\", {\n    $documentation: \"Base class for do/while statements\",\n    $propdoc: {\n        condition: \"[AST_Node] the loop condition.  Should not be instanceof AST_Statement\"\n    }\n}, AST_IterationStatement);\n\nvar AST_Do = DEFNODE(\"Do\", null, {\n    $documentation: \"A `do` statement\",\n    _walk: function(visitor) {\n        return visitor._visit(this, function() {\n            this.body._walk(visitor);\n            this.condition._walk(visitor);\n        });\n    },\n    _children_backwards(push) {\n        push(this.condition);\n        push(this.body);\n    }\n}, AST_DWLoop);\n\nvar AST_While = DEFNODE(\"While\", null, {\n    $documentation: \"A `while` statement\",\n    _walk: function(visitor) {\n        return visitor._visit(this, function() {\n            this.condition._walk(visitor);\n            this.body._walk(visitor);\n        });\n    },\n    _children_backwards(push) {\n        push(this.body);\n        push(this.condition);\n    },\n}, AST_DWLoop);\n\nvar AST_For = DEFNODE(\"For\", \"init condition step\", {\n    $documentation: \"A `for` statement\",\n    $propdoc: {\n        init: \"[AST_Node?] the `for` initialization code, or null if empty\",\n        condition: \"[AST_Node?] the `for` termination clause, or null if empty\",\n        step: \"[AST_Node?] the `for` update clause, or null if empty\"\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, function() {\n            if (this.init) this.init._walk(visitor);\n            if (this.condition) this.condition._walk(visitor);\n            if (this.step) this.step._walk(visitor);\n            this.body._walk(visitor);\n        });\n    },\n    _children_backwards(push) {\n        push(this.body);\n        if (this.step) push(this.step);\n        if (this.condition) push(this.condition);\n        if (this.init) push(this.init);\n    },\n}, AST_IterationStatement);\n\nvar AST_ForIn = DEFNODE(\"ForIn\", \"init object\", {\n    $documentation: \"A `for ... in` statement\",\n    $propdoc: {\n        init: \"[AST_Node] the `for/in` initialization code\",\n        object: \"[AST_Node] the object that we're looping through\"\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, function() {\n            this.init._walk(visitor);\n            this.object._walk(visitor);\n            this.body._walk(visitor);\n        });\n    },\n    _children_backwards(push) {\n        push(this.body);\n        if (this.object) push(this.object);\n        if (this.init) push(this.init);\n    },\n}, AST_IterationStatement);\n\nvar AST_ForOf = DEFNODE(\"ForOf\", \"await\", {\n    $documentation: \"A `for ... of` statement\",\n}, AST_ForIn);\n\nvar AST_With = DEFNODE(\"With\", \"expression\", {\n    $documentation: \"A `with` statement\",\n    $propdoc: {\n        expression: \"[AST_Node] the `with` expression\"\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, function() {\n            this.expression._walk(visitor);\n            this.body._walk(visitor);\n        });\n    },\n    _children_backwards(push) {\n        push(this.body);\n        push(this.expression);\n    },\n}, AST_StatementWithBody);\n\n/* -----[ scope and functions ]----- */\n\nvar AST_Scope = DEFNODE(\"Scope\", \"variables functions uses_with uses_eval parent_scope enclosed cname\", {\n    $documentation: \"Base class for all statements introducing a lexical scope\",\n    $propdoc: {\n        variables: \"[Map/S] a map of name -> SymbolDef for all variables/functions defined in this scope\",\n        uses_with: \"[boolean/S] tells whether this scope uses the `with` statement\",\n        uses_eval: \"[boolean/S] tells whether this scope contains a direct call to the global `eval`\",\n        parent_scope: \"[AST_Scope?/S] link to the parent scope\",\n        enclosed: \"[SymbolDef*/S] a list of all symbol definitions that are accessed from this scope or any subscopes\",\n        cname: \"[integer/S] current index for mangling variables (used internally by the mangler)\",\n    },\n    get_defun_scope: function() {\n        var self = this;\n        while (self.is_block_scope()) {\n            self = self.parent_scope;\n        }\n        return self;\n    },\n    clone: function(deep, toplevel) {\n        var node = this._clone(deep);\n        if (deep && this.variables && toplevel && !this._block_scope) {\n            node.figure_out_scope({}, {\n                toplevel: toplevel,\n                parent_scope: this.parent_scope\n            });\n        } else {\n            if (this.variables) node.variables = new Map(this.variables);\n            if (this.enclosed) node.enclosed = this.enclosed.slice();\n            if (this._block_scope) node._block_scope = this._block_scope;\n        }\n        return node;\n    },\n    pinned: function() {\n        return this.uses_eval || this.uses_with;\n    }\n}, AST_Block);\n\nvar AST_Toplevel = DEFNODE(\"Toplevel\", \"globals\", {\n    $documentation: \"The toplevel scope\",\n    $propdoc: {\n        globals: \"[Map/S] a map of name -> SymbolDef for all undeclared names\",\n    },\n    wrap_commonjs: function(name) {\n        var body = this.body;\n        var wrapped_tl = \"(function(exports){'$ORIG';})(typeof \" + name + \"=='undefined'?(\" + name + \"={}):\" + name + \");\";\n        wrapped_tl = parse(wrapped_tl);\n        wrapped_tl = wrapped_tl.transform(new TreeTransformer(function(node) {\n            if (node instanceof AST_Directive && node.value == \"$ORIG\") {\n                return MAP.splice(body);\n            }\n        }));\n        return wrapped_tl;\n    },\n    wrap_enclose: function(args_values) {\n        if (typeof args_values != \"string\") args_values = \"\";\n        var index = args_values.indexOf(\":\");\n        if (index < 0) index = args_values.length;\n        var body = this.body;\n        return parse([\n            \"(function(\",\n            args_values.slice(0, index),\n            '){\"$ORIG\"})(',\n            args_values.slice(index + 1),\n            \")\"\n        ].join(\"\")).transform(new TreeTransformer(function(node) {\n            if (node instanceof AST_Directive && node.value == \"$ORIG\") {\n                return MAP.splice(body);\n            }\n        }));\n    }\n}, AST_Scope);\n\nvar AST_Expansion = DEFNODE(\"Expansion\", \"expression\", {\n    $documentation: \"An expandible argument, such as ...rest, a splat, such as [1,2,...all], or an expansion in a variable declaration, such as var [first, ...rest] = list\",\n    $propdoc: {\n        expression: \"[AST_Node] the thing to be expanded\"\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, function() {\n            this.expression.walk(visitor);\n        });\n    },\n    _children_backwards(push) {\n        push(this.expression);\n    },\n});\n\nvar AST_Lambda = DEFNODE(\"Lambda\", \"name argnames uses_arguments is_generator async\", {\n    $documentation: \"Base class for functions\",\n    $propdoc: {\n        name: \"[AST_SymbolDeclaration?] the name of this function\",\n        argnames: \"[AST_SymbolFunarg|AST_Destructuring|AST_Expansion|AST_DefaultAssign*] array of function arguments, destructurings, or expanding arguments\",\n        uses_arguments: \"[boolean/S] tells whether this function accesses the arguments array\",\n        is_generator: \"[boolean] is this a generator method\",\n        async: \"[boolean] is this method async\",\n    },\n    args_as_names: function () {\n        var out = [];\n        for (var i = 0; i < this.argnames.length; i++) {\n            if (this.argnames[i] instanceof AST_Destructuring) {\n                out.push(...this.argnames[i].all_symbols());\n            } else {\n                out.push(this.argnames[i]);\n            }\n        }\n        return out;\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, function() {\n            if (this.name) this.name._walk(visitor);\n            var argnames = this.argnames;\n            for (var i = 0, len = argnames.length; i < len; i++) {\n                argnames[i]._walk(visitor);\n            }\n            walk_body(this, visitor);\n        });\n    },\n    _children_backwards(push) {\n        let i = this.body.length;\n        while (i--) push(this.body[i]);\n\n        i = this.argnames.length;\n        while (i--) push(this.argnames[i]);\n\n        if (this.name) push(this.name);\n    },\n    is_braceless() {\n        return this.body[0] instanceof AST_Return && this.body[0].value;\n    },\n    // Default args and expansion don't count, so .argnames.length doesn't cut it\n    length_property() {\n        let length = 0;\n\n        for (const arg of this.argnames) {\n            if (arg instanceof AST_SymbolFunarg || arg instanceof AST_Destructuring) {\n                length++;\n            }\n        }\n\n        return length;\n    }\n}, AST_Scope);\n\nvar AST_Accessor = DEFNODE(\"Accessor\", null, {\n    $documentation: \"A setter/getter function.  The `name` property is always null.\"\n}, AST_Lambda);\n\nvar AST_Function = DEFNODE(\"Function\", null, {\n    $documentation: \"A function expression\"\n}, AST_Lambda);\n\nvar AST_Arrow = DEFNODE(\"Arrow\", null, {\n    $documentation: \"An ES6 Arrow function ((a) => b)\"\n}, AST_Lambda);\n\nvar AST_Defun = DEFNODE(\"Defun\", null, {\n    $documentation: \"A function definition\"\n}, AST_Lambda);\n\n/* -----[ DESTRUCTURING ]----- */\nvar AST_Destructuring = DEFNODE(\"Destructuring\", \"names is_array\", {\n    $documentation: \"A destructuring of several names. Used in destructuring assignment and with destructuring function argument names\",\n    $propdoc: {\n        \"names\": \"[AST_Node*] Array of properties or elements\",\n        \"is_array\": \"[Boolean] Whether the destructuring represents an object or array\"\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, function() {\n            this.names.forEach(function(name) {\n                name._walk(visitor);\n            });\n        });\n    },\n    _children_backwards(push) {\n        let i = this.names.length;\n        while (i--) push(this.names[i]);\n    },\n    all_symbols: function() {\n        var out = [];\n        this.walk(new TreeWalker(function (node) {\n            if (node instanceof AST_Symbol) {\n                out.push(node);\n            }\n        }));\n        return out;\n    }\n});\n\nvar AST_PrefixedTemplateString = DEFNODE(\"PrefixedTemplateString\", \"template_string prefix\", {\n    $documentation: \"A templatestring with a prefix, such as String.raw`foobarbaz`\",\n    $propdoc: {\n        template_string: \"[AST_TemplateString] The template string\",\n        prefix: \"[AST_Node] The prefix, which will get called.\"\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, function () {\n            this.prefix._walk(visitor);\n            this.template_string._walk(visitor);\n        });\n    },\n    _children_backwards(push) {\n        push(this.template_string);\n        push(this.prefix);\n    },\n});\n\nvar AST_TemplateString = DEFNODE(\"TemplateString\", \"segments\", {\n    $documentation: \"A template string literal\",\n    $propdoc: {\n        segments: \"[AST_Node*] One or more segments, starting with AST_TemplateSegment. AST_Node may follow AST_TemplateSegment, but each AST_Node must be followed by AST_TemplateSegment.\"\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, function() {\n            this.segments.forEach(function(seg) {\n                seg._walk(visitor);\n            });\n        });\n    },\n    _children_backwards(push) {\n        let i = this.segments.length;\n        while (i--) push(this.segments[i]);\n    }\n});\n\nvar AST_TemplateSegment = DEFNODE(\"TemplateSegment\", \"value raw\", {\n    $documentation: \"A segment of a template string literal\",\n    $propdoc: {\n        value: \"Content of the segment\",\n        raw: \"Raw source of the segment\",\n    }\n});\n\n/* -----[ JUMPS ]----- */\n\nvar AST_Jump = DEFNODE(\"Jump\", null, {\n    $documentation: \"Base class for “jumps” (for now that's `return`, `throw`, `break` and `continue`)\"\n}, AST_Statement);\n\nvar AST_Exit = DEFNODE(\"Exit\", \"value\", {\n    $documentation: \"Base class for “exits” (`return` and `throw`)\",\n    $propdoc: {\n        value: \"[AST_Node?] the value returned or thrown by this statement; could be null for AST_Return\"\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, this.value && function() {\n            this.value._walk(visitor);\n        });\n    },\n    _children_backwards(push) {\n        if (this.value) push(this.value);\n    },\n}, AST_Jump);\n\nvar AST_Return = DEFNODE(\"Return\", null, {\n    $documentation: \"A `return` statement\"\n}, AST_Exit);\n\nvar AST_Throw = DEFNODE(\"Throw\", null, {\n    $documentation: \"A `throw` statement\"\n}, AST_Exit);\n\nvar AST_LoopControl = DEFNODE(\"LoopControl\", \"label\", {\n    $documentation: \"Base class for loop control statements (`break` and `continue`)\",\n    $propdoc: {\n        label: \"[AST_LabelRef?] the label, or null if none\",\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, this.label && function() {\n            this.label._walk(visitor);\n        });\n    },\n    _children_backwards(push) {\n        if (this.label) push(this.label);\n    },\n}, AST_Jump);\n\nvar AST_Break = DEFNODE(\"Break\", null, {\n    $documentation: \"A `break` statement\"\n}, AST_LoopControl);\n\nvar AST_Continue = DEFNODE(\"Continue\", null, {\n    $documentation: \"A `continue` statement\"\n}, AST_LoopControl);\n\nvar AST_Await = DEFNODE(\"Await\", \"expression\", {\n    $documentation: \"An `await` statement\",\n    $propdoc: {\n        expression: \"[AST_Node] the mandatory expression being awaited\",\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, function() {\n            this.expression._walk(visitor);\n        });\n    },\n    _children_backwards(push) {\n        push(this.expression);\n    },\n});\n\nvar AST_Yield = DEFNODE(\"Yield\", \"expression is_star\", {\n    $documentation: \"A `yield` statement\",\n    $propdoc: {\n        expression: \"[AST_Node?] the value returned or thrown by this statement; could be null (representing undefined) but only when is_star is set to false\",\n        is_star: \"[Boolean] Whether this is a yield or yield* statement\"\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, this.expression && function() {\n            this.expression._walk(visitor);\n        });\n    },\n    _children_backwards(push) {\n        if (this.expression) push(this.expression);\n    }\n});\n\n/* -----[ IF ]----- */\n\nvar AST_If = DEFNODE(\"If\", \"condition alternative\", {\n    $documentation: \"A `if` statement\",\n    $propdoc: {\n        condition: \"[AST_Node] the `if` condition\",\n        alternative: \"[AST_Statement?] the `else` part, or null if not present\"\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, function() {\n            this.condition._walk(visitor);\n            this.body._walk(visitor);\n            if (this.alternative) this.alternative._walk(visitor);\n        });\n    },\n    _children_backwards(push) {\n        if (this.alternative) {\n            push(this.alternative);\n        }\n        push(this.body);\n        push(this.condition);\n    }\n}, AST_StatementWithBody);\n\n/* -----[ SWITCH ]----- */\n\nvar AST_Switch = DEFNODE(\"Switch\", \"expression\", {\n    $documentation: \"A `switch` statement\",\n    $propdoc: {\n        expression: \"[AST_Node] the `switch` “discriminant”\"\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, function() {\n            this.expression._walk(visitor);\n            walk_body(this, visitor);\n        });\n    },\n    _children_backwards(push) {\n        let i = this.body.length;\n        while (i--) push(this.body[i]);\n        push(this.expression);\n    }\n}, AST_Block);\n\nvar AST_SwitchBranch = DEFNODE(\"SwitchBranch\", null, {\n    $documentation: \"Base class for `switch` branches\",\n}, AST_Block);\n\nvar AST_Default = DEFNODE(\"Default\", null, {\n    $documentation: \"A `default` switch branch\",\n}, AST_SwitchBranch);\n\nvar AST_Case = DEFNODE(\"Case\", \"expression\", {\n    $documentation: \"A `case` switch branch\",\n    $propdoc: {\n        expression: \"[AST_Node] the `case` expression\"\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, function() {\n            this.expression._walk(visitor);\n            walk_body(this, visitor);\n        });\n    },\n    _children_backwards(push) {\n        let i = this.body.length;\n        while (i--) push(this.body[i]);\n        push(this.expression);\n    },\n}, AST_SwitchBranch);\n\n/* -----[ EXCEPTIONS ]----- */\n\nvar AST_Try = DEFNODE(\"Try\", \"bcatch bfinally\", {\n    $documentation: \"A `try` statement\",\n    $propdoc: {\n        bcatch: \"[AST_Catch?] the catch block, or null if not present\",\n        bfinally: \"[AST_Finally?] the finally block, or null if not present\"\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, function() {\n            walk_body(this, visitor);\n            if (this.bcatch) this.bcatch._walk(visitor);\n            if (this.bfinally) this.bfinally._walk(visitor);\n        });\n    },\n    _children_backwards(push) {\n        if (this.bfinally) push(this.bfinally);\n        if (this.bcatch) push(this.bcatch);\n        let i = this.body.length;\n        while (i--) push(this.body[i]);\n    },\n}, AST_Block);\n\nvar AST_Catch = DEFNODE(\"Catch\", \"argname\", {\n    $documentation: \"A `catch` node; only makes sense as part of a `try` statement\",\n    $propdoc: {\n        argname: \"[AST_SymbolCatch|AST_Destructuring|AST_Expansion|AST_DefaultAssign] symbol for the exception\"\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, function() {\n            if (this.argname) this.argname._walk(visitor);\n            walk_body(this, visitor);\n        });\n    },\n    _children_backwards(push) {\n        let i = this.body.length;\n        while (i--) push(this.body[i]);\n        if (this.argname) push(this.argname);\n    },\n}, AST_Block);\n\nvar AST_Finally = DEFNODE(\"Finally\", null, {\n    $documentation: \"A `finally` node; only makes sense as part of a `try` statement\"\n}, AST_Block);\n\n/* -----[ VAR/CONST ]----- */\n\nvar AST_Definitions = DEFNODE(\"Definitions\", \"definitions\", {\n    $documentation: \"Base class for `var` or `const` nodes (variable declarations/initializations)\",\n    $propdoc: {\n        definitions: \"[AST_VarDef*] array of variable definitions\"\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, function() {\n            var definitions = this.definitions;\n            for (var i = 0, len = definitions.length; i < len; i++) {\n                definitions[i]._walk(visitor);\n            }\n        });\n    },\n    _children_backwards(push) {\n        let i = this.definitions.length;\n        while (i--) push(this.definitions[i]);\n    },\n}, AST_Statement);\n\nvar AST_Var = DEFNODE(\"Var\", null, {\n    $documentation: \"A `var` statement\"\n}, AST_Definitions);\n\nvar AST_Let = DEFNODE(\"Let\", null, {\n    $documentation: \"A `let` statement\"\n}, AST_Definitions);\n\nvar AST_Const = DEFNODE(\"Const\", null, {\n    $documentation: \"A `const` statement\"\n}, AST_Definitions);\n\nvar AST_VarDef = DEFNODE(\"VarDef\", \"name value\", {\n    $documentation: \"A variable declaration; only appears in a AST_Definitions node\",\n    $propdoc: {\n        name: \"[AST_Destructuring|AST_SymbolConst|AST_SymbolLet|AST_SymbolVar] name of the variable\",\n        value: \"[AST_Node?] initializer, or null of there's no initializer\"\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, function() {\n            this.name._walk(visitor);\n            if (this.value) this.value._walk(visitor);\n        });\n    },\n    _children_backwards(push) {\n        if (this.value) push(this.value);\n        push(this.name);\n    },\n});\n\nvar AST_NameMapping = DEFNODE(\"NameMapping\", \"foreign_name name\", {\n    $documentation: \"The part of the export/import statement that declare names from a module.\",\n    $propdoc: {\n        foreign_name: \"[AST_SymbolExportForeign|AST_SymbolImportForeign] The name being exported/imported (as specified in the module)\",\n        name: \"[AST_SymbolExport|AST_SymbolImport] The name as it is visible to this module.\"\n    },\n    _walk: function (visitor) {\n        return visitor._visit(this, function() {\n            this.foreign_name._walk(visitor);\n            this.name._walk(visitor);\n        });\n    },\n    _children_backwards(push) {\n        push(this.name);\n        push(this.foreign_name);\n    },\n});\n\nvar AST_Import = DEFNODE(\"Import\", \"imported_name imported_names module_name\", {\n    $documentation: \"An `import` statement\",\n    $propdoc: {\n        imported_name: \"[AST_SymbolImport] The name of the variable holding the module's default export.\",\n        imported_names: \"[AST_NameMapping*] The names of non-default imported variables\",\n        module_name: \"[AST_String] String literal describing where this module came from\",\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, function() {\n            if (this.imported_name) {\n                this.imported_name._walk(visitor);\n            }\n            if (this.imported_names) {\n                this.imported_names.forEach(function(name_import) {\n                    name_import._walk(visitor);\n                });\n            }\n            this.module_name._walk(visitor);\n        });\n    },\n    _children_backwards(push) {\n        push(this.module_name);\n        if (this.imported_names) {\n            let i = this.imported_names.length;\n            while (i--) push(this.imported_names[i]);\n        }\n        if (this.imported_name) push(this.imported_name);\n    },\n});\n\nvar AST_ImportMeta = DEFNODE(\"ImportMeta\", null, {\n    $documentation: \"A reference to import.meta\",\n});\n\nvar AST_Export = DEFNODE(\"Export\", \"exported_definition exported_value is_default exported_names module_name\", {\n    $documentation: \"An `export` statement\",\n    $propdoc: {\n        exported_definition: \"[AST_Defun|AST_Definitions|AST_DefClass?] An exported definition\",\n        exported_value: \"[AST_Node?] An exported value\",\n        exported_names: \"[AST_NameMapping*?] List of exported names\",\n        module_name: \"[AST_String?] Name of the file to load exports from\",\n        is_default: \"[Boolean] Whether this is the default exported value of this module\"\n    },\n    _walk: function (visitor) {\n        return visitor._visit(this, function () {\n            if (this.exported_definition) {\n                this.exported_definition._walk(visitor);\n            }\n            if (this.exported_value) {\n                this.exported_value._walk(visitor);\n            }\n            if (this.exported_names) {\n                this.exported_names.forEach(function(name_export) {\n                    name_export._walk(visitor);\n                });\n            }\n            if (this.module_name) {\n                this.module_name._walk(visitor);\n            }\n        });\n    },\n    _children_backwards(push) {\n        if (this.module_name) push(this.module_name);\n        if (this.exported_names) {\n            let i = this.exported_names.length;\n            while (i--) push(this.exported_names[i]);\n        }\n        if (this.exported_value) push(this.exported_value);\n        if (this.exported_definition) push(this.exported_definition);\n    }\n}, AST_Statement);\n\n/* -----[ OTHER ]----- */\n\nvar AST_Call = DEFNODE(\"Call\", \"expression args optional _annotations\", {\n    $documentation: \"A function call expression\",\n    $propdoc: {\n        expression: \"[AST_Node] expression to invoke as function\",\n        args: \"[AST_Node*] array of arguments\",\n        optional: \"[boolean] whether this is an optional call (IE ?.() )\",\n        _annotations: \"[number] bitfield containing information about the call\"\n    },\n    initialize() {\n        if (this._annotations == null) this._annotations = 0;\n    },\n    _walk(visitor) {\n        return visitor._visit(this, function() {\n            var args = this.args;\n            for (var i = 0, len = args.length; i < len; i++) {\n                args[i]._walk(visitor);\n            }\n            this.expression._walk(visitor);  // TODO why do we need to crawl this last?\n        });\n    },\n    _children_backwards(push) {\n        let i = this.args.length;\n        while (i--) push(this.args[i]);\n        push(this.expression);\n    },\n});\n\nvar AST_New = DEFNODE(\"New\", null, {\n    $documentation: \"An object instantiation.  Derives from a function call since it has exactly the same properties\"\n}, AST_Call);\n\nvar AST_Sequence = DEFNODE(\"Sequence\", \"expressions\", {\n    $documentation: \"A sequence expression (comma-separated expressions)\",\n    $propdoc: {\n        expressions: \"[AST_Node*] array of expressions (at least two)\"\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, function() {\n            this.expressions.forEach(function(node) {\n                node._walk(visitor);\n            });\n        });\n    },\n    _children_backwards(push) {\n        let i = this.expressions.length;\n        while (i--) push(this.expressions[i]);\n    },\n});\n\nvar AST_PropAccess = DEFNODE(\"PropAccess\", \"expression property optional\", {\n    $documentation: \"Base class for property access expressions, i.e. `a.foo` or `a[\\\"foo\\\"]`\",\n    $propdoc: {\n        expression: \"[AST_Node] the “container” expression\",\n        property: \"[AST_Node|string] the property to access.  For AST_Dot & AST_DotHash this is always a plain string, while for AST_Sub it's an arbitrary AST_Node\",\n\n        optional: \"[boolean] whether this is an optional property access (IE ?.)\"\n    }\n});\n\nvar AST_Dot = DEFNODE(\"Dot\", \"quote\", {\n    $documentation: \"A dotted property access expression\",\n    $propdoc: {\n        quote: \"[string] the original quote character when transformed from AST_Sub\",\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, function() {\n            this.expression._walk(visitor);\n        });\n    },\n    _children_backwards(push) {\n        push(this.expression);\n    },\n}, AST_PropAccess);\n\nvar AST_DotHash = DEFNODE(\"DotHash\", \"\", {\n    $documentation: \"A dotted property access to a private property\",\n    _walk: function(visitor) {\n        return visitor._visit(this, function() {\n            this.expression._walk(visitor);\n        });\n    },\n    _children_backwards(push) {\n        push(this.expression);\n    },\n}, AST_PropAccess);\n\nvar AST_Sub = DEFNODE(\"Sub\", null, {\n    $documentation: \"Index-style property access, i.e. `a[\\\"foo\\\"]`\",\n    _walk: function(visitor) {\n        return visitor._visit(this, function() {\n            this.expression._walk(visitor);\n            this.property._walk(visitor);\n        });\n    },\n    _children_backwards(push) {\n        push(this.property);\n        push(this.expression);\n    },\n}, AST_PropAccess);\n\nvar AST_Chain = DEFNODE(\"Chain\", \"expression\", {\n    $documentation: \"A chain expression like a?.b?.(c)?.[d]\",\n    $propdoc: {\n        expression: \"[AST_Call|AST_Dot|AST_DotHash|AST_Sub] chain element.\"\n    },\n    _walk: function (visitor) {\n        return visitor._visit(this, function() {\n            this.expression._walk(visitor);\n        });\n    },\n    _children_backwards(push) {\n        push(this.expression);\n    },\n});\n\nvar AST_Unary = DEFNODE(\"Unary\", \"operator expression\", {\n    $documentation: \"Base class for unary expressions\",\n    $propdoc: {\n        operator: \"[string] the operator\",\n        expression: \"[AST_Node] expression that this unary operator applies to\"\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, function() {\n            this.expression._walk(visitor);\n        });\n    },\n    _children_backwards(push) {\n        push(this.expression);\n    },\n});\n\nvar AST_UnaryPrefix = DEFNODE(\"UnaryPrefix\", null, {\n    $documentation: \"Unary prefix expression, i.e. `typeof i` or `++i`\"\n}, AST_Unary);\n\nvar AST_UnaryPostfix = DEFNODE(\"UnaryPostfix\", null, {\n    $documentation: \"Unary postfix expression, i.e. `i++`\"\n}, AST_Unary);\n\nvar AST_Binary = DEFNODE(\"Binary\", \"operator left right\", {\n    $documentation: \"Binary expression, i.e. `a + b`\",\n    $propdoc: {\n        left: \"[AST_Node] left-hand side expression\",\n        operator: \"[string] the operator\",\n        right: \"[AST_Node] right-hand side expression\"\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, function() {\n            this.left._walk(visitor);\n            this.right._walk(visitor);\n        });\n    },\n    _children_backwards(push) {\n        push(this.right);\n        push(this.left);\n    },\n});\n\nvar AST_Conditional = DEFNODE(\"Conditional\", \"condition consequent alternative\", {\n    $documentation: \"Conditional expression using the ternary operator, i.e. `a ? b : c`\",\n    $propdoc: {\n        condition: \"[AST_Node]\",\n        consequent: \"[AST_Node]\",\n        alternative: \"[AST_Node]\"\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, function() {\n            this.condition._walk(visitor);\n            this.consequent._walk(visitor);\n            this.alternative._walk(visitor);\n        });\n    },\n    _children_backwards(push) {\n        push(this.alternative);\n        push(this.consequent);\n        push(this.condition);\n    },\n});\n\nvar AST_Assign = DEFNODE(\"Assign\", \"logical\", {\n    $documentation: \"An assignment expression — `a = b + 5`\",\n    $propdoc: {\n        logical: \"Whether it's a logical assignment\"\n    }\n}, AST_Binary);\n\nvar AST_DefaultAssign = DEFNODE(\"DefaultAssign\", null, {\n    $documentation: \"A default assignment expression like in `(a = 3) => a`\"\n}, AST_Binary);\n\n/* -----[ LITERALS ]----- */\n\nvar AST_Array = DEFNODE(\"Array\", \"elements\", {\n    $documentation: \"An array literal\",\n    $propdoc: {\n        elements: \"[AST_Node*] array of elements\"\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, function() {\n            var elements = this.elements;\n            for (var i = 0, len = elements.length; i < len; i++) {\n                elements[i]._walk(visitor);\n            }\n        });\n    },\n    _children_backwards(push) {\n        let i = this.elements.length;\n        while (i--) push(this.elements[i]);\n    },\n});\n\nvar AST_Object = DEFNODE(\"Object\", \"properties\", {\n    $documentation: \"An object literal\",\n    $propdoc: {\n        properties: \"[AST_ObjectProperty*] array of properties\"\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, function() {\n            var properties = this.properties;\n            for (var i = 0, len = properties.length; i < len; i++) {\n                properties[i]._walk(visitor);\n            }\n        });\n    },\n    _children_backwards(push) {\n        let i = this.properties.length;\n        while (i--) push(this.properties[i]);\n    },\n});\n\nvar AST_ObjectProperty = DEFNODE(\"ObjectProperty\", \"key value\", {\n    $documentation: \"Base class for literal object properties\",\n    $propdoc: {\n        key: \"[string|AST_Node] property name. For ObjectKeyVal this is a string. For getters, setters and computed property this is an AST_Node.\",\n        value: \"[AST_Node] property value.  For getters and setters this is an AST_Accessor.\"\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, function() {\n            if (this.key instanceof AST_Node)\n                this.key._walk(visitor);\n            this.value._walk(visitor);\n        });\n    },\n    _children_backwards(push) {\n        push(this.value);\n        if (this.key instanceof AST_Node) push(this.key);\n    }\n});\n\nvar AST_ObjectKeyVal = DEFNODE(\"ObjectKeyVal\", \"quote\", {\n    $documentation: \"A key: value object property\",\n    $propdoc: {\n        quote: \"[string] the original quote character\"\n    },\n    computed_key() {\n        return this.key instanceof AST_Node;\n    }\n}, AST_ObjectProperty);\n\nvar AST_PrivateSetter = DEFNODE(\"PrivateSetter\", \"static\", {\n    $propdoc: {\n        static: \"[boolean] whether this is a static private setter\"\n    },\n    $documentation: \"A private setter property\",\n    computed_key() {\n        return false;\n    }\n}, AST_ObjectProperty);\n\nvar AST_PrivateGetter = DEFNODE(\"PrivateGetter\", \"static\", {\n    $propdoc: {\n        static: \"[boolean] whether this is a static private getter\"\n    },\n    $documentation: \"A private getter property\",\n    computed_key() {\n        return false;\n    }\n}, AST_ObjectProperty);\n\nvar AST_ObjectSetter = DEFNODE(\"ObjectSetter\", \"quote static\", {\n    $propdoc: {\n        quote: \"[string|undefined] the original quote character, if any\",\n        static: \"[boolean] whether this is a static setter (classes only)\"\n    },\n    $documentation: \"An object setter property\",\n    computed_key() {\n        return !(this.key instanceof AST_SymbolMethod);\n    }\n}, AST_ObjectProperty);\n\nvar AST_ObjectGetter = DEFNODE(\"ObjectGetter\", \"quote static\", {\n    $propdoc: {\n        quote: \"[string|undefined] the original quote character, if any\",\n        static: \"[boolean] whether this is a static getter (classes only)\"\n    },\n    $documentation: \"An object getter property\",\n    computed_key() {\n        return !(this.key instanceof AST_SymbolMethod);\n    }\n}, AST_ObjectProperty);\n\nvar AST_ConciseMethod = DEFNODE(\"ConciseMethod\", \"quote static is_generator async\", {\n    $propdoc: {\n        quote: \"[string|undefined] the original quote character, if any\",\n        static: \"[boolean] is this method static (classes only)\",\n        is_generator: \"[boolean] is this a generator method\",\n        async: \"[boolean] is this method async\",\n    },\n    $documentation: \"An ES6 concise method inside an object or class\",\n    computed_key() {\n        return !(this.key instanceof AST_SymbolMethod);\n    }\n}, AST_ObjectProperty);\n\nvar AST_PrivateMethod = DEFNODE(\"PrivateMethod\", \"\", {\n    $documentation: \"A private class method inside a class\",\n}, AST_ConciseMethod);\n\nvar AST_Class = DEFNODE(\"Class\", \"name extends properties\", {\n    $propdoc: {\n        name: \"[AST_SymbolClass|AST_SymbolDefClass?] optional class name.\",\n        extends: \"[AST_Node]? optional parent class\",\n        properties: \"[AST_ObjectProperty*] array of properties\"\n    },\n    $documentation: \"An ES6 class\",\n    _walk: function(visitor) {\n        return visitor._visit(this, function() {\n            if (this.name) {\n                this.name._walk(visitor);\n            }\n            if (this.extends) {\n                this.extends._walk(visitor);\n            }\n            this.properties.forEach((prop) => prop._walk(visitor));\n        });\n    },\n    _children_backwards(push) {\n        let i = this.properties.length;\n        while (i--) push(this.properties[i]);\n        if (this.extends) push(this.extends);\n        if (this.name) push(this.name);\n    },\n}, AST_Scope /* TODO a class might have a scope but it's not a scope */);\n\nvar AST_ClassProperty = DEFNODE(\"ClassProperty\", \"static quote\", {\n    $documentation: \"A class property\",\n    $propdoc: {\n        static: \"[boolean] whether this is a static key\",\n        quote: \"[string] which quote is being used\"\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, function() {\n            if (this.key instanceof AST_Node)\n                this.key._walk(visitor);\n            if (this.value instanceof AST_Node)\n                this.value._walk(visitor);\n        });\n    },\n    _children_backwards(push) {\n        if (this.value instanceof AST_Node) push(this.value);\n        if (this.key instanceof AST_Node) push(this.key);\n    },\n    computed_key() {\n        return !(this.key instanceof AST_SymbolClassProperty);\n    }\n}, AST_ObjectProperty);\n\nvar AST_ClassPrivateProperty = DEFNODE(\"ClassProperty\", \"\", {\n    $documentation: \"A class property for a private property\",\n}, AST_ClassProperty);\n\nvar AST_DefClass = DEFNODE(\"DefClass\", null, {\n    $documentation: \"A class definition\",\n}, AST_Class);\n\nvar AST_ClassExpression = DEFNODE(\"ClassExpression\", null, {\n    $documentation: \"A class expression.\"\n}, AST_Class);\n\nvar AST_Symbol = DEFNODE(\"Symbol\", \"scope name thedef\", {\n    $propdoc: {\n        name: \"[string] name of this symbol\",\n        scope: \"[AST_Scope/S] the current scope (not necessarily the definition scope)\",\n        thedef: \"[SymbolDef/S] the definition of this symbol\"\n    },\n    $documentation: \"Base class for all symbols\"\n});\n\nvar AST_NewTarget = DEFNODE(\"NewTarget\", null, {\n    $documentation: \"A reference to new.target\"\n});\n\nvar AST_SymbolDeclaration = DEFNODE(\"SymbolDeclaration\", \"init\", {\n    $documentation: \"A declaration symbol (symbol in var/const, function name or argument, symbol in catch)\",\n}, AST_Symbol);\n\nvar AST_SymbolVar = DEFNODE(\"SymbolVar\", null, {\n    $documentation: \"Symbol defining a variable\",\n}, AST_SymbolDeclaration);\n\nvar AST_SymbolBlockDeclaration = DEFNODE(\"SymbolBlockDeclaration\", null, {\n    $documentation: \"Base class for block-scoped declaration symbols\"\n}, AST_SymbolDeclaration);\n\nvar AST_SymbolConst = DEFNODE(\"SymbolConst\", null, {\n    $documentation: \"A constant declaration\"\n}, AST_SymbolBlockDeclaration);\n\nvar AST_SymbolLet = DEFNODE(\"SymbolLet\", null, {\n    $documentation: \"A block-scoped `let` declaration\"\n}, AST_SymbolBlockDeclaration);\n\nvar AST_SymbolFunarg = DEFNODE(\"SymbolFunarg\", null, {\n    $documentation: \"Symbol naming a function argument\",\n}, AST_SymbolVar);\n\nvar AST_SymbolDefun = DEFNODE(\"SymbolDefun\", null, {\n    $documentation: \"Symbol defining a function\",\n}, AST_SymbolDeclaration);\n\nvar AST_SymbolMethod = DEFNODE(\"SymbolMethod\", null, {\n    $documentation: \"Symbol in an object defining a method\",\n}, AST_Symbol);\n\nvar AST_SymbolClassProperty = DEFNODE(\"SymbolClassProperty\", null, {\n    $documentation: \"Symbol for a class property\",\n}, AST_Symbol);\n\nvar AST_SymbolLambda = DEFNODE(\"SymbolLambda\", null, {\n    $documentation: \"Symbol naming a function expression\",\n}, AST_SymbolDeclaration);\n\nvar AST_SymbolDefClass = DEFNODE(\"SymbolDefClass\", null, {\n    $documentation: \"Symbol naming a class's name in a class declaration. Lexically scoped to its containing scope, and accessible within the class.\"\n}, AST_SymbolBlockDeclaration);\n\nvar AST_SymbolClass = DEFNODE(\"SymbolClass\", null, {\n    $documentation: \"Symbol naming a class's name. Lexically scoped to the class.\"\n}, AST_SymbolDeclaration);\n\nvar AST_SymbolCatch = DEFNODE(\"SymbolCatch\", null, {\n    $documentation: \"Symbol naming the exception in catch\",\n}, AST_SymbolBlockDeclaration);\n\nvar AST_SymbolImport = DEFNODE(\"SymbolImport\", null, {\n    $documentation: \"Symbol referring to an imported name\",\n}, AST_SymbolBlockDeclaration);\n\nvar AST_SymbolImportForeign = DEFNODE(\"SymbolImportForeign\", null, {\n    $documentation: \"A symbol imported from a module, but it is defined in the other module, and its real name is irrelevant for this module's purposes\",\n}, AST_Symbol);\n\nvar AST_Label = DEFNODE(\"Label\", \"references\", {\n    $documentation: \"Symbol naming a label (declaration)\",\n    $propdoc: {\n        references: \"[AST_LoopControl*] a list of nodes referring to this label\"\n    },\n    initialize: function() {\n        this.references = [];\n        this.thedef = this;\n    }\n}, AST_Symbol);\n\nvar AST_SymbolRef = DEFNODE(\"SymbolRef\", null, {\n    $documentation: \"Reference to some symbol (not definition/declaration)\",\n}, AST_Symbol);\n\nvar AST_SymbolExport = DEFNODE(\"SymbolExport\", null, {\n    $documentation: \"Symbol referring to a name to export\",\n}, AST_SymbolRef);\n\nvar AST_SymbolExportForeign = DEFNODE(\"SymbolExportForeign\", null, {\n    $documentation: \"A symbol exported from this module, but it is used in the other module, and its real name is irrelevant for this module's purposes\",\n}, AST_Symbol);\n\nvar AST_LabelRef = DEFNODE(\"LabelRef\", null, {\n    $documentation: \"Reference to a label symbol\",\n}, AST_Symbol);\n\nvar AST_This = DEFNODE(\"This\", null, {\n    $documentation: \"The `this` symbol\",\n}, AST_Symbol);\n\nvar AST_Super = DEFNODE(\"Super\", null, {\n    $documentation: \"The `super` symbol\",\n}, AST_This);\n\nvar AST_Constant = DEFNODE(\"Constant\", null, {\n    $documentation: \"Base class for all constants\",\n    getValue: function() {\n        return this.value;\n    }\n});\n\nvar AST_String = DEFNODE(\"String\", \"value quote\", {\n    $documentation: \"A string literal\",\n    $propdoc: {\n        value: \"[string] the contents of this string\",\n        quote: \"[string] the original quote character\"\n    }\n}, AST_Constant);\n\nvar AST_Number = DEFNODE(\"Number\", \"value raw\", {\n    $documentation: \"A number literal\",\n    $propdoc: {\n        value: \"[number] the numeric value\",\n        raw: \"[string] numeric value as string\"\n    }\n}, AST_Constant);\n\nvar AST_BigInt = DEFNODE(\"BigInt\", \"value\", {\n    $documentation: \"A big int literal\",\n    $propdoc: {\n        value: \"[string] big int value\"\n    }\n}, AST_Constant);\n\nvar AST_RegExp = DEFNODE(\"RegExp\", \"value\", {\n    $documentation: \"A regexp literal\",\n    $propdoc: {\n        value: \"[RegExp] the actual regexp\",\n    }\n}, AST_Constant);\n\nvar AST_Atom = DEFNODE(\"Atom\", null, {\n    $documentation: \"Base class for atoms\",\n}, AST_Constant);\n\nvar AST_Null = DEFNODE(\"Null\", null, {\n    $documentation: \"The `null` atom\",\n    value: null\n}, AST_Atom);\n\nvar AST_NaN = DEFNODE(\"NaN\", null, {\n    $documentation: \"The impossible value\",\n    value: 0/0\n}, AST_Atom);\n\nvar AST_Undefined = DEFNODE(\"Undefined\", null, {\n    $documentation: \"The `undefined` value\",\n    value: (function() {}())\n}, AST_Atom);\n\nvar AST_Hole = DEFNODE(\"Hole\", null, {\n    $documentation: \"A hole in an array\",\n    value: (function() {}())\n}, AST_Atom);\n\nvar AST_Infinity = DEFNODE(\"Infinity\", null, {\n    $documentation: \"The `Infinity` value\",\n    value: 1/0\n}, AST_Atom);\n\nvar AST_Boolean = DEFNODE(\"Boolean\", null, {\n    $documentation: \"Base class for booleans\",\n}, AST_Atom);\n\nvar AST_False = DEFNODE(\"False\", null, {\n    $documentation: \"The `false` atom\",\n    value: false\n}, AST_Boolean);\n\nvar AST_True = DEFNODE(\"True\", null, {\n    $documentation: \"The `true` atom\",\n    value: true\n}, AST_Boolean);\n\n/* -----[ Walk function ]---- */\n\n/**\n * Walk nodes in depth-first search fashion.\n * Callback can return `walk_abort` symbol to stop iteration.\n * It can also return `true` to stop iteration just for child nodes.\n * Iteration can be stopped and continued by passing the `to_visit` argument,\n * which is given to the callback in the second argument.\n **/\nfunction walk(node, cb, to_visit = [node]) {\n    const push = to_visit.push.bind(to_visit);\n    while (to_visit.length) {\n        const node = to_visit.pop();\n        const ret = cb(node, to_visit);\n\n        if (ret) {\n            if (ret === walk_abort) return true;\n            continue;\n        }\n\n        node._children_backwards(push);\n    }\n    return false;\n}\n\nfunction walk_parent(node, cb, initial_stack) {\n    const to_visit = [node];\n    const push = to_visit.push.bind(to_visit);\n    const stack = initial_stack ? initial_stack.slice() : [];\n    const parent_pop_indices = [];\n\n    let current;\n\n    const info = {\n        parent: (n = 0) => {\n            if (n === -1) {\n                return current;\n            }\n\n            // [ p1 p0 ] [ 1 0 ]\n            if (initial_stack && n >= stack.length) {\n                n -= stack.length;\n                return initial_stack[\n                    initial_stack.length - (n + 1)\n                ];\n            }\n\n            return stack[stack.length - (1 + n)];\n        },\n    };\n\n    while (to_visit.length) {\n        current = to_visit.pop();\n\n        while (\n            parent_pop_indices.length &&\n            to_visit.length == parent_pop_indices[parent_pop_indices.length - 1]\n        ) {\n            stack.pop();\n            parent_pop_indices.pop();\n        }\n\n        const ret = cb(current, info);\n\n        if (ret) {\n            if (ret === walk_abort) return true;\n            continue;\n        }\n\n        const visit_length = to_visit.length;\n\n        current._children_backwards(push);\n\n        // Push only if we're going to traverse the children\n        if (to_visit.length > visit_length) {\n            stack.push(current);\n            parent_pop_indices.push(visit_length - 1);\n        }\n    }\n\n    return false;\n}\n\nconst walk_abort = Symbol(\"abort walk\");\n\n/* -----[ TreeWalker ]----- */\n\nclass TreeWalker {\n    constructor(callback) {\n        this.visit = callback;\n        this.stack = [];\n        this.directives = Object.create(null);\n    }\n\n    _visit(node, descend) {\n        this.push(node);\n        var ret = this.visit(node, descend ? function() {\n            descend.call(node);\n        } : noop);\n        if (!ret && descend) {\n            descend.call(node);\n        }\n        this.pop();\n        return ret;\n    }\n\n    parent(n) {\n        return this.stack[this.stack.length - 2 - (n || 0)];\n    }\n\n    push(node) {\n        if (node instanceof AST_Lambda) {\n            this.directives = Object.create(this.directives);\n        } else if (node instanceof AST_Directive && !this.directives[node.value]) {\n            this.directives[node.value] = node;\n        } else if (node instanceof AST_Class) {\n            this.directives = Object.create(this.directives);\n            if (!this.directives[\"use strict\"]) {\n                this.directives[\"use strict\"] = node;\n            }\n        }\n        this.stack.push(node);\n    }\n\n    pop() {\n        var node = this.stack.pop();\n        if (node instanceof AST_Lambda || node instanceof AST_Class) {\n            this.directives = Object.getPrototypeOf(this.directives);\n        }\n    }\n\n    self() {\n        return this.stack[this.stack.length - 1];\n    }\n\n    find_parent(type) {\n        var stack = this.stack;\n        for (var i = stack.length; --i >= 0;) {\n            var x = stack[i];\n            if (x instanceof type) return x;\n        }\n    }\n\n    has_directive(type) {\n        var dir = this.directives[type];\n        if (dir) return dir;\n        var node = this.stack[this.stack.length - 1];\n        if (node instanceof AST_Scope && node.body) {\n            for (var i = 0; i < node.body.length; ++i) {\n                var st = node.body[i];\n                if (!(st instanceof AST_Directive)) break;\n                if (st.value == type) return st;\n            }\n        }\n    }\n\n    loopcontrol_target(node) {\n        var stack = this.stack;\n        if (node.label) for (var i = stack.length; --i >= 0;) {\n            var x = stack[i];\n            if (x instanceof AST_LabeledStatement && x.label.name == node.label.name)\n                return x.body;\n        } else for (var i = stack.length; --i >= 0;) {\n            var x = stack[i];\n            if (x instanceof AST_IterationStatement\n                || node instanceof AST_Break && x instanceof AST_Switch)\n                return x;\n        }\n    }\n}\n\n// Tree transformer helpers.\nclass TreeTransformer extends TreeWalker {\n    constructor(before, after) {\n        super();\n        this.before = before;\n        this.after = after;\n    }\n}\n\nconst _PURE     = 0b00000001;\nconst _INLINE   = 0b00000010;\nconst _NOINLINE = 0b00000100;\n\nexport {\n    AST_Accessor,\n    AST_Array,\n    AST_Arrow,\n    AST_Assign,\n    AST_Atom,\n    AST_Await,\n    AST_BigInt,\n    AST_Binary,\n    AST_Block,\n    AST_BlockStatement,\n    AST_Boolean,\n    AST_Break,\n    AST_Call,\n    AST_Case,\n    AST_Catch,\n    AST_Chain,\n    AST_Class,\n    AST_ClassExpression,\n    AST_ClassPrivateProperty,\n    AST_ClassProperty,\n    AST_ConciseMethod,\n    AST_Conditional,\n    AST_Const,\n    AST_Constant,\n    AST_Continue,\n    AST_Debugger,\n    AST_Default,\n    AST_DefaultAssign,\n    AST_DefClass,\n    AST_Definitions,\n    AST_Defun,\n    AST_Destructuring,\n    AST_Directive,\n    AST_Do,\n    AST_Dot,\n    AST_DotHash,\n    AST_DWLoop,\n    AST_EmptyStatement,\n    AST_Exit,\n    AST_Expansion,\n    AST_Export,\n    AST_False,\n    AST_Finally,\n    AST_For,\n    AST_ForIn,\n    AST_ForOf,\n    AST_Function,\n    AST_Hole,\n    AST_If,\n    AST_Import,\n    AST_ImportMeta,\n    AST_Infinity,\n    AST_IterationStatement,\n    AST_Jump,\n    AST_Label,\n    AST_LabeledStatement,\n    AST_LabelRef,\n    AST_Lambda,\n    AST_Let,\n    AST_LoopControl,\n    AST_NameMapping,\n    AST_NaN,\n    AST_New,\n    AST_NewTarget,\n    AST_Node,\n    AST_Null,\n    AST_Number,\n    AST_Object,\n    AST_ObjectGetter,\n    AST_ObjectKeyVal,\n    AST_ObjectProperty,\n    AST_ObjectSetter,\n    AST_PrefixedTemplateString,\n    AST_PrivateGetter,\n    AST_PrivateMethod,\n    AST_PrivateSetter,\n    AST_PropAccess,\n    AST_RegExp,\n    AST_Return,\n    AST_Scope,\n    AST_Sequence,\n    AST_SimpleStatement,\n    AST_Statement,\n    AST_StatementWithBody,\n    AST_String,\n    AST_Sub,\n    AST_Super,\n    AST_Switch,\n    AST_SwitchBranch,\n    AST_Symbol,\n    AST_SymbolBlockDeclaration,\n    AST_SymbolCatch,\n    AST_SymbolClass,\n    AST_SymbolClassProperty,\n    AST_SymbolConst,\n    AST_SymbolDeclaration,\n    AST_SymbolDefClass,\n    AST_SymbolDefun,\n    AST_SymbolExport,\n    AST_SymbolExportForeign,\n    AST_SymbolFunarg,\n    AST_SymbolImport,\n    AST_SymbolImportForeign,\n    AST_SymbolLambda,\n    AST_SymbolLet,\n    AST_SymbolMethod,\n    AST_SymbolRef,\n    AST_SymbolVar,\n    AST_TemplateSegment,\n    AST_TemplateString,\n    AST_This,\n    AST_Throw,\n    AST_Token,\n    AST_Toplevel,\n    AST_True,\n    AST_Try,\n    AST_Unary,\n    AST_UnaryPostfix,\n    AST_UnaryPrefix,\n    AST_Undefined,\n    AST_Var,\n    AST_VarDef,\n    AST_While,\n    AST_With,\n    AST_Yield,\n\n    // Walkers\n    TreeTransformer,\n    TreeWalker,\n    walk,\n    walk_abort,\n    walk_body,\n    walk_parent,\n\n    // annotations\n    _INLINE,\n    _NOINLINE,\n    _PURE,\n};\n"]},"metadata":{},"sourceType":"module"}