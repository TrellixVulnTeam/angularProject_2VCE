{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nvar _classCallCheck = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/createClass\");\n\nvar WasmMainTemplatePlugin = require(\"../wasm/WasmMainTemplatePlugin\");\n\nvar FetchCompileWasmTemplatePlugin = /*#__PURE__*/function () {\n  function FetchCompileWasmTemplatePlugin(options) {\n    _classCallCheck(this, FetchCompileWasmTemplatePlugin);\n\n    this.options = options || {};\n  }\n\n  _createClass(FetchCompileWasmTemplatePlugin, [{\n    key: \"apply\",\n    value: function apply(compiler) {\n      var _this = this;\n\n      compiler.hooks.thisCompilation.tap(\"FetchCompileWasmTemplatePlugin\", function (compilation) {\n        var mainTemplate = compilation.mainTemplate;\n\n        var generateLoadBinaryCode = function generateLoadBinaryCode(path) {\n          return \"fetch(\".concat(mainTemplate.requireFn, \".p + \").concat(path, \")\");\n        };\n\n        var plugin = new WasmMainTemplatePlugin(Object.assign({\n          generateLoadBinaryCode: generateLoadBinaryCode,\n          supportsStreaming: true\n        }, _this.options));\n        plugin.apply(mainTemplate);\n      });\n    }\n  }]);\n\n  return FetchCompileWasmTemplatePlugin;\n}();\n\nmodule.exports = FetchCompileWasmTemplatePlugin;","map":{"version":3,"sources":["/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/webpack/lib/web/FetchCompileWasmTemplatePlugin.js"],"names":["WasmMainTemplatePlugin","require","FetchCompileWasmTemplatePlugin","options","compiler","hooks","thisCompilation","tap","compilation","mainTemplate","generateLoadBinaryCode","path","requireFn","plugin","Object","assign","supportsStreaming","apply","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;;;;;AAEA,IAAMA,sBAAsB,GAAGC,OAAO,CAAC,gCAAD,CAAtC;;IAEMC,8B;AACL,0CAAYC,OAAZ,EAAqB;AAAA;;AACpB,SAAKA,OAAL,GAAeA,OAAO,IAAI,EAA1B;AACA;;;;WAED,eAAMC,QAAN,EAAgB;AAAA;;AACfA,MAAAA,QAAQ,CAACC,KAAT,CAAeC,eAAf,CAA+BC,GAA/B,CACC,gCADD,EAEC,UAAAC,WAAW,EAAI;AACd,YAAMC,YAAY,GAAGD,WAAW,CAACC,YAAjC;;AACA,YAAMC,sBAAsB,GAAG,SAAzBA,sBAAyB,CAAAC,IAAI;AAAA,iCACzBF,YAAY,CAACG,SADY,kBACKD,IADL;AAAA,SAAnC;;AAGA,YAAME,MAAM,GAAG,IAAIb,sBAAJ,CACdc,MAAM,CAACC,MAAP,CACC;AACCL,UAAAA,sBAAsB,EAAtBA,sBADD;AAECM,UAAAA,iBAAiB,EAAE;AAFpB,SADD,EAKC,KAAI,CAACb,OALN,CADc,CAAf;AASAU,QAAAA,MAAM,CAACI,KAAP,CAAaR,YAAb;AACA,OAjBF;AAmBA;;;;;;AAGFS,MAAM,CAACC,OAAP,GAAiBjB,8BAAjB","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst WasmMainTemplatePlugin = require(\"../wasm/WasmMainTemplatePlugin\");\n\nclass FetchCompileWasmTemplatePlugin {\n\tconstructor(options) {\n\t\tthis.options = options || {};\n\t}\n\n\tapply(compiler) {\n\t\tcompiler.hooks.thisCompilation.tap(\n\t\t\t\"FetchCompileWasmTemplatePlugin\",\n\t\t\tcompilation => {\n\t\t\t\tconst mainTemplate = compilation.mainTemplate;\n\t\t\t\tconst generateLoadBinaryCode = path =>\n\t\t\t\t\t`fetch(${mainTemplate.requireFn}.p + ${path})`;\n\n\t\t\t\tconst plugin = new WasmMainTemplatePlugin(\n\t\t\t\t\tObject.assign(\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tgenerateLoadBinaryCode,\n\t\t\t\t\t\t\tsupportsStreaming: true\n\t\t\t\t\t\t},\n\t\t\t\t\t\tthis.options\n\t\t\t\t\t)\n\t\t\t\t);\n\t\t\t\tplugin.apply(mainTemplate);\n\t\t\t}\n\t\t);\n\t}\n}\n\nmodule.exports = FetchCompileWasmTemplatePlugin;\n"]},"metadata":{},"sourceType":"script"}