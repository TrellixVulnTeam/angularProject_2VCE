{"ast":null,"code":"/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n(function (factory) {\n  if (typeof module === \"object\" && typeof module.exports === \"object\") {\n    var v = factory(require, exports);\n    if (v !== undefined) module.exports = v;\n  } else if (typeof define === \"function\" && define.amd) {\n    define(\"@angular/compiler-cli/src/transformers/util\", [\"require\", \"exports\", \"tslib\", \"@angular/compiler\", \"path\", \"typescript\", \"@angular/compiler-cli/src/transformers/api\"], factory);\n  }\n})(function (require, exports) {\n  \"use strict\";\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.stripComment = exports.ngToTsDiagnostic = exports.relativeToRootDirs = exports.isInRootDir = exports.createMessageDiagnostic = exports.userError = exports.error = exports.tsStructureIsReused = exports.TS = exports.DTS = exports.GENERATED_FILES = void 0;\n\n  var tslib_1 = require(\"tslib\");\n\n  var compiler_1 = require(\"@angular/compiler\");\n\n  var path = require(\"path\");\n\n  var ts = require(\"typescript\");\n\n  var api_1 = require(\"@angular/compiler-cli/src/transformers/api\");\n\n  exports.GENERATED_FILES = /(.*?)\\.(ngfactory|shim\\.ngstyle|ngstyle|ngsummary)\\.(js|d\\.ts|ts)$/;\n  exports.DTS = /\\.d\\.ts$/;\n  exports.TS = /^(?!.*\\.d\\.ts$).*\\.ts$/; // Note: This is an internal property in TypeScript. Use it only for assertions and tests.\n\n  function tsStructureIsReused(program) {\n    return program.structureIsReused;\n  }\n\n  exports.tsStructureIsReused = tsStructureIsReused;\n\n  function error(msg) {\n    throw new Error(\"Internal error: \" + msg);\n  }\n\n  exports.error = error;\n\n  function userError(msg) {\n    throw compiler_1.syntaxError(msg);\n  }\n\n  exports.userError = userError;\n\n  function createMessageDiagnostic(messageText) {\n    return {\n      file: undefined,\n      start: undefined,\n      length: undefined,\n      category: ts.DiagnosticCategory.Message,\n      messageText: messageText,\n      code: api_1.DEFAULT_ERROR_CODE,\n      source: api_1.SOURCE\n    };\n  }\n\n  exports.createMessageDiagnostic = createMessageDiagnostic;\n\n  function isInRootDir(fileName, options) {\n    return !options.rootDir || pathStartsWithPrefix(options.rootDir, fileName);\n  }\n\n  exports.isInRootDir = isInRootDir;\n\n  function relativeToRootDirs(filePath, rootDirs) {\n    var e_1, _a;\n\n    if (!filePath) return filePath;\n\n    try {\n      for (var _b = tslib_1.__values(rootDirs || []), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var dir = _c.value;\n        var rel = pathStartsWithPrefix(dir, filePath);\n\n        if (rel) {\n          return rel;\n        }\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n\n    return filePath;\n  }\n\n  exports.relativeToRootDirs = relativeToRootDirs;\n\n  function pathStartsWithPrefix(prefix, fullPath) {\n    var rel = path.relative(prefix, fullPath);\n    return rel.startsWith('..') ? null : rel;\n  }\n  /**\n   * Converts a ng.Diagnostic into a ts.Diagnostic.\n   * This looses some information, and also uses an incomplete object as `file`.\n   *\n   * I.e. only use this where the API allows only a ts.Diagnostic.\n   */\n\n\n  function ngToTsDiagnostic(ng) {\n    var file;\n    var start;\n    var length;\n\n    if (ng.span) {\n      // Note: We can't use a real ts.SourceFile,\n      // but we can at least mirror the properties `fileName` and `text`, which\n      // are mostly used for error reporting.\n      file = {\n        fileName: ng.span.start.file.url,\n        text: ng.span.start.file.content\n      };\n      start = ng.span.start.offset;\n      length = ng.span.end.offset - start;\n    }\n\n    return {\n      file: file,\n      messageText: ng.messageText,\n      category: ng.category,\n      code: ng.code,\n      start: start,\n      length: length\n    };\n  }\n\n  exports.ngToTsDiagnostic = ngToTsDiagnostic;\n  /**\n   * Strip multiline comment start and end markers from the `commentText` string.\n   *\n   * This will also strip the JSDOC comment start marker (`/**`).\n   */\n\n  function stripComment(commentText) {\n    return commentText.replace(/^\\/\\*\\*?/, '').replace(/\\*\\/$/, '').trim();\n  }\n\n  exports.stripComment = stripComment;\n});","map":{"version":3,"sources":["../../../../../../../packages/compiler-cli/src/transformers/util.ts"],"names":[],"mappings":"AAAA;;;;;;AAMG;;;;;;;;;;;;;;;;;;AAEH,MAAA,UAAA,GAAA,OAAA,CAAA,mBAAA,CAAA;;AACA,MAAA,IAAA,GAAA,OAAA,CAAA,MAAA,CAAA;;AACA,MAAA,EAAA,GAAA,OAAA,CAAA,YAAA,CAAA;;AAEA,MAAA,KAAA,GAAA,OAAA,CAAA,4CAAA,CAAA;;AAEa,EAAA,OAAA,CAAA,eAAA,GAAkB,oEAAlB;AACA,EAAA,OAAA,CAAA,GAAA,GAAM,UAAN;AACA,EAAA,OAAA,CAAA,EAAA,GAAK,wBAAL,C,CAQb;;AACA,WAAgB,mBAAhB,CAAoC,OAApC,EAAuD;AACrD,WAAQ,OAAe,CAAC,iBAAxB;AACD;;AAFD,EAAA,OAAA,CAAA,mBAAA,GAAA,mBAAA;;AAIA,WAAgB,KAAhB,CAAsB,GAAtB,EAAiC;AAC/B,UAAM,IAAI,KAAJ,CAAU,qBAAmB,GAA7B,CAAN;AACD;;AAFD,EAAA,OAAA,CAAA,KAAA,GAAA,KAAA;;AAIA,WAAgB,SAAhB,CAA0B,GAA1B,EAAqC;AACnC,UAAM,UAAA,CAAA,WAAA,CAAY,GAAZ,CAAN;AACD;;AAFD,EAAA,OAAA,CAAA,SAAA,GAAA,SAAA;;AAIA,WAAgB,uBAAhB,CAAwC,WAAxC,EAA2D;AACzD,WAAO;AACL,MAAA,IAAI,EAAE,SADD;AAEL,MAAA,KAAK,EAAE,SAFF;AAGL,MAAA,MAAM,EAAE,SAHH;AAIL,MAAA,QAAQ,EAAE,EAAE,CAAC,kBAAH,CAAsB,OAJ3B;AAKL,MAAA,WAAW,EAAA,WALN;AAML,MAAA,IAAI,EAAE,KAAA,CAAA,kBAND;AAOL,MAAA,MAAM,EAAE,KAAA,CAAA;AAPH,KAAP;AASD;;AAVD,EAAA,OAAA,CAAA,uBAAA,GAAA,uBAAA;;AAYA,WAAgB,WAAhB,CAA4B,QAA5B,EAA8C,OAA9C,EAAsE;AACpE,WAAO,CAAC,OAAO,CAAC,OAAT,IAAoB,oBAAoB,CAAC,OAAO,CAAC,OAAT,EAAkB,QAAlB,CAA/C;AACD;;AAFD,EAAA,OAAA,CAAA,WAAA,GAAA,WAAA;;AAIA,WAAgB,kBAAhB,CAAmC,QAAnC,EAAqD,QAArD,EAAuE;;;AACrE,QAAI,CAAC,QAAL,EAAe,OAAO,QAAP;;;AACf,WAAkB,IAAA,EAAA,GAAA,OAAA,CAAA,QAAA,CAAA,QAAQ,IAAI,EAAZ,CAAA,EAAc,EAAA,GAAA,EAAA,CAAA,IAAA,EAAhC,EAAgC,CAAA,EAAA,CAAA,IAAhC,EAAgC,EAAA,GAAA,EAAA,CAAA,IAAA,EAAhC,EAAkC;AAA7B,YAAM,GAAG,GAAA,EAAA,CAAA,KAAT;AACH,YAAM,GAAG,GAAG,oBAAoB,CAAC,GAAD,EAAM,QAAN,CAAhC;;AACA,YAAI,GAAJ,EAAS;AACP,iBAAO,GAAP;AACD;AACF;;;;;;;;;;;;;AACD,WAAO,QAAP;AACD;;AATD,EAAA,OAAA,CAAA,kBAAA,GAAA,kBAAA;;AAWA,WAAS,oBAAT,CAA8B,MAA9B,EAA8C,QAA9C,EAA8D;AAC5D,QAAM,GAAG,GAAG,IAAI,CAAC,QAAL,CAAc,MAAd,EAAsB,QAAtB,CAAZ;AACA,WAAO,GAAG,CAAC,UAAJ,CAAe,IAAf,IAAuB,IAAvB,GAA8B,GAArC;AACD;AAED;;;;;AAKG;;;AACH,WAAgB,gBAAhB,CAAiC,EAAjC,EAA+C;AAC7C,QAAI,IAAJ;AACA,QAAI,KAAJ;AACA,QAAI,MAAJ;;AACA,QAAI,EAAE,CAAC,IAAP,EAAa;AACX;AACA;AACA;AACA,MAAA,IAAI,GAAG;AAAC,QAAA,QAAQ,EAAE,EAAE,CAAC,IAAH,CAAQ,KAAR,CAAc,IAAd,CAAmB,GAA9B;AAAmC,QAAA,IAAI,EAAE,EAAE,CAAC,IAAH,CAAQ,KAAR,CAAc,IAAd,CAAmB;AAA5D,OAAP;AACA,MAAA,KAAK,GAAG,EAAE,CAAC,IAAH,CAAQ,KAAR,CAAc,MAAtB;AACA,MAAA,MAAM,GAAG,EAAE,CAAC,IAAH,CAAQ,GAAR,CAAY,MAAZ,GAAqB,KAA9B;AACD;;AACD,WAAO;AACL,MAAA,IAAI,EAAA,IADC;AAEL,MAAA,WAAW,EAAE,EAAE,CAAC,WAFX;AAGL,MAAA,QAAQ,EAAE,EAAE,CAAC,QAHR;AAIL,MAAA,IAAI,EAAE,EAAE,CAAC,IAJJ;AAKL,MAAA,KAAK,EAAA,KALA;AAML,MAAA,MAAM,EAAA;AAND,KAAP;AAQD;;AApBD,EAAA,OAAA,CAAA,gBAAA,GAAA,gBAAA;AAsBA;;;;AAIG;;AACH,WAAgB,YAAhB,CAA6B,WAA7B,EAAgD;AAC9C,WAAO,WAAW,CAAC,OAAZ,CAAoB,UAApB,EAAgC,EAAhC,EAAoC,OAApC,CAA4C,OAA5C,EAAqD,EAArD,EAAyD,IAAzD,EAAP;AACD;;AAFD,EAAA,OAAA,CAAA,YAAA,GAAA,YAAA","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {syntaxError} from '@angular/compiler';\nimport * as path from 'path';\nimport * as ts from 'typescript';\n\nimport {CompilerOptions, DEFAULT_ERROR_CODE, Diagnostic, SOURCE} from './api';\n\nexport const GENERATED_FILES = /(.*?)\\.(ngfactory|shim\\.ngstyle|ngstyle|ngsummary)\\.(js|d\\.ts|ts)$/;\nexport const DTS = /\\.d\\.ts$/;\nexport const TS = /^(?!.*\\.d\\.ts$).*\\.ts$/;\n\nexport const enum StructureIsReused {\n  Not = 0,\n  SafeModules = 1,\n  Completely = 2\n}\n\n// Note: This is an internal property in TypeScript. Use it only for assertions and tests.\nexport function tsStructureIsReused(program: ts.Program): StructureIsReused {\n  return (program as any).structureIsReused;\n}\n\nexport function error(msg: string): never {\n  throw new Error(`Internal error: ${msg}`);\n}\n\nexport function userError(msg: string): never {\n  throw syntaxError(msg);\n}\n\nexport function createMessageDiagnostic(messageText: string): ts.Diagnostic&Diagnostic {\n  return {\n    file: undefined,\n    start: undefined,\n    length: undefined,\n    category: ts.DiagnosticCategory.Message,\n    messageText,\n    code: DEFAULT_ERROR_CODE,\n    source: SOURCE,\n  };\n}\n\nexport function isInRootDir(fileName: string, options: CompilerOptions) {\n  return !options.rootDir || pathStartsWithPrefix(options.rootDir, fileName);\n}\n\nexport function relativeToRootDirs(filePath: string, rootDirs: string[]): string {\n  if (!filePath) return filePath;\n  for (const dir of rootDirs || []) {\n    const rel = pathStartsWithPrefix(dir, filePath);\n    if (rel) {\n      return rel;\n    }\n  }\n  return filePath;\n}\n\nfunction pathStartsWithPrefix(prefix: string, fullPath: string): string|null {\n  const rel = path.relative(prefix, fullPath);\n  return rel.startsWith('..') ? null : rel;\n}\n\n/**\n * Converts a ng.Diagnostic into a ts.Diagnostic.\n * This looses some information, and also uses an incomplete object as `file`.\n *\n * I.e. only use this where the API allows only a ts.Diagnostic.\n */\nexport function ngToTsDiagnostic(ng: Diagnostic): ts.Diagnostic {\n  let file: ts.SourceFile|undefined;\n  let start: number|undefined;\n  let length: number|undefined;\n  if (ng.span) {\n    // Note: We can't use a real ts.SourceFile,\n    // but we can at least mirror the properties `fileName` and `text`, which\n    // are mostly used for error reporting.\n    file = {fileName: ng.span.start.file.url, text: ng.span.start.file.content} as ts.SourceFile;\n    start = ng.span.start.offset;\n    length = ng.span.end.offset - start;\n  }\n  return {\n    file,\n    messageText: ng.messageText,\n    category: ng.category,\n    code: ng.code,\n    start,\n    length,\n  };\n}\n\n/**\n * Strip multiline comment start and end markers from the `commentText` string.\n *\n * This will also strip the JSDOC comment start marker (`/**`).\n */\nexport function stripComment(commentText: string): string {\n  return commentText.replace(/^\\/\\*\\*?/, '').replace(/\\*\\/$/, '').trim();\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}