{"ast":null,"code":"'use strict';\n\nvar fs = require('fs');\n\nvar path = require('path');\n\nvar pify = require('pify');\n\nvar semver = require('semver');\n\nvar defaults = {\n  mode: 511 & ~process.umask(),\n  fs: fs\n};\nvar useNativeRecursiveOption = semver.satisfies(process.version, '>=10.12.0'); // https://github.com/nodejs/node/issues/8987\n// https://github.com/libuv/libuv/pull/1088\n\nvar checkPath = function checkPath(pth) {\n  if (process.platform === 'win32') {\n    var pathHasInvalidWinCharacters = /[<>:\"|?*]/.test(pth.replace(path.parse(pth).root, ''));\n\n    if (pathHasInvalidWinCharacters) {\n      var error = new Error(\"Path contains invalid characters: \".concat(pth));\n      error.code = 'EINVAL';\n      throw error;\n    }\n  }\n};\n\nvar permissionError = function permissionError(pth) {\n  // This replicates the exception of `fs.mkdir` with native the\n  // `recusive` option when run on an invalid drive under Windows.\n  var error = new Error(\"operation not permitted, mkdir '\".concat(pth, \"'\"));\n  error.code = 'EPERM';\n  error.errno = -4048;\n  error.path = pth;\n  error.syscall = 'mkdir';\n  return error;\n};\n\nvar makeDir = function makeDir(input, options) {\n  return Promise.resolve().then(function () {\n    checkPath(input);\n    options = Object.assign({}, defaults, options); // TODO: Use util.promisify when targeting Node.js 8\n\n    var mkdir = pify(options.fs.mkdir);\n    var stat = pify(options.fs.stat);\n\n    if (useNativeRecursiveOption && options.fs.mkdir === fs.mkdir) {\n      var pth = path.resolve(input);\n      return mkdir(pth, {\n        mode: options.mode,\n        recursive: true\n      }).then(function () {\n        return pth;\n      });\n    }\n\n    var make = function make(pth) {\n      return mkdir(pth, options.mode).then(function () {\n        return pth;\n      }).catch(function (error) {\n        if (error.code === 'EPERM') {\n          throw error;\n        }\n\n        if (error.code === 'ENOENT') {\n          if (path.dirname(pth) === pth) {\n            throw permissionError(pth);\n          }\n\n          if (error.message.includes('null bytes')) {\n            throw error;\n          }\n\n          return make(path.dirname(pth)).then(function () {\n            return make(pth);\n          });\n        }\n\n        return stat(pth).then(function (stats) {\n          return stats.isDirectory() ? pth : Promise.reject();\n        }).catch(function () {\n          throw error;\n        });\n      });\n    };\n\n    return make(path.resolve(input));\n  });\n};\n\nmodule.exports = makeDir;\nmodule.exports.default = makeDir;\n\nmodule.exports.sync = function (input, options) {\n  checkPath(input);\n  options = Object.assign({}, defaults, options);\n\n  if (useNativeRecursiveOption && options.fs.mkdirSync === fs.mkdirSync) {\n    var pth = path.resolve(input);\n    fs.mkdirSync(pth, {\n      mode: options.mode,\n      recursive: true\n    });\n    return pth;\n  }\n\n  var make = function make(pth) {\n    try {\n      options.fs.mkdirSync(pth, options.mode);\n    } catch (error) {\n      if (error.code === 'EPERM') {\n        throw error;\n      }\n\n      if (error.code === 'ENOENT') {\n        if (path.dirname(pth) === pth) {\n          throw permissionError(pth);\n        }\n\n        if (error.message.includes('null bytes')) {\n          throw error;\n        }\n\n        make(path.dirname(pth));\n        return make(pth);\n      }\n\n      try {\n        if (!options.fs.statSync(pth).isDirectory()) {\n          throw new Error('The path is not a directory');\n        }\n      } catch (_) {\n        throw error;\n      }\n    }\n\n    return pth;\n  };\n\n  return make(path.resolve(input));\n};","map":{"version":3,"sources":["/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/make-dir/index.js"],"names":["fs","require","path","pify","semver","defaults","mode","process","umask","useNativeRecursiveOption","satisfies","version","checkPath","pth","platform","pathHasInvalidWinCharacters","test","replace","parse","root","error","Error","code","permissionError","errno","syscall","makeDir","input","options","Promise","resolve","then","Object","assign","mkdir","stat","recursive","make","catch","dirname","message","includes","stats","isDirectory","reject","module","exports","default","sync","mkdirSync","statSync","_"],"mappings":"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","sourcesContent":["'use strict';\nconst fs = require('fs');\nconst path = require('path');\nconst pify = require('pify');\nconst semver = require('semver');\n\nconst defaults = {\n\tmode: 0o777 & (~process.umask()),\n\tfs\n};\n\nconst useNativeRecursiveOption = semver.satisfies(process.version, '>=10.12.0');\n\n// https://github.com/nodejs/node/issues/8987\n// https://github.com/libuv/libuv/pull/1088\nconst checkPath = pth => {\n\tif (process.platform === 'win32') {\n\t\tconst pathHasInvalidWinCharacters = /[<>:\"|?*]/.test(pth.replace(path.parse(pth).root, ''));\n\n\t\tif (pathHasInvalidWinCharacters) {\n\t\t\tconst error = new Error(`Path contains invalid characters: ${pth}`);\n\t\t\terror.code = 'EINVAL';\n\t\t\tthrow error;\n\t\t}\n\t}\n};\n\nconst permissionError = pth => {\n\t// This replicates the exception of `fs.mkdir` with native the\n\t// `recusive` option when run on an invalid drive under Windows.\n\tconst error = new Error(`operation not permitted, mkdir '${pth}'`);\n\terror.code = 'EPERM';\n\terror.errno = -4048;\n\terror.path = pth;\n\terror.syscall = 'mkdir';\n\treturn error;\n};\n\nconst makeDir = (input, options) => Promise.resolve().then(() => {\n\tcheckPath(input);\n\toptions = Object.assign({}, defaults, options);\n\n\t// TODO: Use util.promisify when targeting Node.js 8\n\tconst mkdir = pify(options.fs.mkdir);\n\tconst stat = pify(options.fs.stat);\n\n\tif (useNativeRecursiveOption && options.fs.mkdir === fs.mkdir) {\n\t\tconst pth = path.resolve(input);\n\n\t\treturn mkdir(pth, {\n\t\t\tmode: options.mode,\n\t\t\trecursive: true\n\t\t}).then(() => pth);\n\t}\n\n\tconst make = pth => {\n\t\treturn mkdir(pth, options.mode)\n\t\t\t.then(() => pth)\n\t\t\t.catch(error => {\n\t\t\t\tif (error.code === 'EPERM') {\n\t\t\t\t\tthrow error;\n\t\t\t\t}\n\n\t\t\t\tif (error.code === 'ENOENT') {\n\t\t\t\t\tif (path.dirname(pth) === pth) {\n\t\t\t\t\t\tthrow permissionError(pth);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (error.message.includes('null bytes')) {\n\t\t\t\t\t\tthrow error;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn make(path.dirname(pth)).then(() => make(pth));\n\t\t\t\t}\n\n\t\t\t\treturn stat(pth)\n\t\t\t\t\t.then(stats => stats.isDirectory() ? pth : Promise.reject())\n\t\t\t\t\t.catch(() => {\n\t\t\t\t\t\tthrow error;\n\t\t\t\t\t});\n\t\t\t});\n\t};\n\n\treturn make(path.resolve(input));\n});\n\nmodule.exports = makeDir;\nmodule.exports.default = makeDir;\n\nmodule.exports.sync = (input, options) => {\n\tcheckPath(input);\n\toptions = Object.assign({}, defaults, options);\n\n\tif (useNativeRecursiveOption && options.fs.mkdirSync === fs.mkdirSync) {\n\t\tconst pth = path.resolve(input);\n\n\t\tfs.mkdirSync(pth, {\n\t\t\tmode: options.mode,\n\t\t\trecursive: true\n\t\t});\n\n\t\treturn pth;\n\t}\n\n\tconst make = pth => {\n\t\ttry {\n\t\t\toptions.fs.mkdirSync(pth, options.mode);\n\t\t} catch (error) {\n\t\t\tif (error.code === 'EPERM') {\n\t\t\t\tthrow error;\n\t\t\t}\n\n\t\t\tif (error.code === 'ENOENT') {\n\t\t\t\tif (path.dirname(pth) === pth) {\n\t\t\t\t\tthrow permissionError(pth);\n\t\t\t\t}\n\n\t\t\t\tif (error.message.includes('null bytes')) {\n\t\t\t\t\tthrow error;\n\t\t\t\t}\n\n\t\t\t\tmake(path.dirname(pth));\n\t\t\t\treturn make(pth);\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (!options.fs.statSync(pth).isDirectory()) {\n\t\t\t\t\tthrow new Error('The path is not a directory');\n\t\t\t\t}\n\t\t\t} catch (_) {\n\t\t\t\tthrow error;\n\t\t\t}\n\t\t}\n\n\t\treturn pth;\n\t};\n\n\treturn make(path.resolve(input));\n};\n"]},"metadata":{},"sourceType":"script"}