{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.NamedLazyChunksPlugin = void 0;\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nvar NamedLazyChunksPlugin = /*#__PURE__*/function () {\n  function NamedLazyChunksPlugin() {\n    _classCallCheck(this, NamedLazyChunksPlugin);\n  }\n\n  _createClass(NamedLazyChunksPlugin, [{\n    key: \"apply\",\n    value: function apply(compiler) {\n      // Webpack doesn't export these so the deep imports can potentially break.\n      // There doesn't seem to exist any ergonomic way to alter chunk names for non-context lazy chunks\n      // (https://github.com/webpack/webpack/issues/9075) so this is the best alternative for now.\n      var ImportDependency = require('webpack/lib/dependencies/ImportDependency');\n\n      var ImportDependenciesBlock = require('webpack/lib/dependencies/ImportDependenciesBlock');\n\n      var Template = require('webpack/lib/Template');\n\n      compiler.hooks.compilation.tap('named-lazy-chunks-plugin', function (compilation) {\n        // The dependencyReference hook isn't in the webpack typings so we have to type it as any.\n        // tslint:disable-next-line: no-any\n        compilation.hooks.dependencyReference.tap('named-lazy-chunks-plugin', // tslint:disable-next-line: no-any\n        function (_, dependency) {\n          if ( // Check this dependency is from an `import()` statement.\n          dependency instanceof ImportDependency && dependency.block instanceof ImportDependenciesBlock // Don't rename chunks that already have a name.\n          && dependency.block.chunkName === null) {\n            // Convert the request to a valid chunk name using the same logic used\n            // in webpack/lib/ContextModule.js\n            dependency.block.chunkName = Template.toPath(dependency.request);\n          }\n        });\n      });\n    }\n  }]);\n\n  return NamedLazyChunksPlugin;\n}();\n\nexports.NamedLazyChunksPlugin = NamedLazyChunksPlugin;","map":{"version":3,"sources":["/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@angular-devkit/build-angular/src/webpack/plugins/named-chunks-plugin.js"],"names":["Object","defineProperty","exports","value","NamedLazyChunksPlugin","compiler","ImportDependency","require","ImportDependenciesBlock","Template","hooks","compilation","tap","dependencyReference","_","dependency","block","chunkName","toPath","request"],"mappings":"AAAA;;;;;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,qBAAR,GAAgC,KAAK,CAArC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IACMA,qB;AACF,mCAAc;AAAA;AAAG;;;;WACjB,eAAMC,QAAN,EAAgB;AACZ;AACA;AACA;AACA,UAAMC,gBAAgB,GAAGC,OAAO,CAAC,2CAAD,CAAhC;;AACA,UAAMC,uBAAuB,GAAGD,OAAO,CAAC,kDAAD,CAAvC;;AACA,UAAME,QAAQ,GAAGF,OAAO,CAAC,sBAAD,CAAxB;;AACAF,MAAAA,QAAQ,CAACK,KAAT,CAAeC,WAAf,CAA2BC,GAA3B,CAA+B,0BAA/B,EAA2D,UAAAD,WAAW,EAAI;AACtE;AACA;AACAA,QAAAA,WAAW,CAACD,KAAZ,CAAkBG,mBAAlB,CAAsCD,GAAtC,CAA0C,0BAA1C,EACA;AACA,kBAACE,CAAD,EAAIC,UAAJ,EAAmB;AACf,eACA;AACAA,UAAAA,UAAU,YAAYT,gBAAtB,IACOS,UAAU,CAACC,KAAX,YAA4BR,uBADnC,CAEI;AAFJ,aAGOO,UAAU,CAACC,KAAX,CAAiBC,SAAjB,KAA+B,IALtC,EAK4C;AACxC;AACA;AACAF,YAAAA,UAAU,CAACC,KAAX,CAAiBC,SAAjB,GAA6BR,QAAQ,CAACS,MAAT,CAAgBH,UAAU,CAACI,OAA3B,CAA7B;AACH;AACJ,SAbD;AAcH,OAjBD;AAkBH;;;;;;AAELjB,OAAO,CAACE,qBAAR,GAAgCA,qBAAhC","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.NamedLazyChunksPlugin = void 0;\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass NamedLazyChunksPlugin {\n    constructor() { }\n    apply(compiler) {\n        // Webpack doesn't export these so the deep imports can potentially break.\n        // There doesn't seem to exist any ergonomic way to alter chunk names for non-context lazy chunks\n        // (https://github.com/webpack/webpack/issues/9075) so this is the best alternative for now.\n        const ImportDependency = require('webpack/lib/dependencies/ImportDependency');\n        const ImportDependenciesBlock = require('webpack/lib/dependencies/ImportDependenciesBlock');\n        const Template = require('webpack/lib/Template');\n        compiler.hooks.compilation.tap('named-lazy-chunks-plugin', compilation => {\n            // The dependencyReference hook isn't in the webpack typings so we have to type it as any.\n            // tslint:disable-next-line: no-any\n            compilation.hooks.dependencyReference.tap('named-lazy-chunks-plugin', \n            // tslint:disable-next-line: no-any\n            (_, dependency) => {\n                if (\n                // Check this dependency is from an `import()` statement.\n                dependency instanceof ImportDependency\n                    && dependency.block instanceof ImportDependenciesBlock\n                    // Don't rename chunks that already have a name.\n                    && dependency.block.chunkName === null) {\n                    // Convert the request to a valid chunk name using the same logic used\n                    // in webpack/lib/ContextModule.js\n                    dependency.block.chunkName = Template.toPath(dependency.request);\n                }\n            });\n        });\n    }\n}\nexports.NamedLazyChunksPlugin = NamedLazyChunksPlugin;\n"]},"metadata":{},"sourceType":"script"}