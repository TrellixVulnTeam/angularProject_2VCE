{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nvar _classCallCheck = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar SourceNode = require(\"source-map\").SourceNode;\n\nvar SourceMapConsumer = require(\"source-map\").SourceMapConsumer;\n\nvar SourceListMap = require(\"source-list-map\").SourceListMap;\n\nvar Source = require(\"./Source\");\n\nvar SPLIT_REGEX = /(?!$)[^\\n\\r;{}]*[\\n\\r;{}]*/g;\n\nfunction _splitCode(code) {\n  return code.match(SPLIT_REGEX) || [];\n}\n\nvar OriginalSource = /*#__PURE__*/function (_Source) {\n  _inherits(OriginalSource, _Source);\n\n  var _super = _createSuper(OriginalSource);\n\n  function OriginalSource(value, name) {\n    var _this;\n\n    _classCallCheck(this, OriginalSource);\n\n    _this = _super.call(this);\n    _this._value = value;\n    _this._name = name;\n    return _this;\n  }\n\n  _createClass(OriginalSource, [{\n    key: \"source\",\n    value: function source() {\n      return this._value;\n    }\n  }, {\n    key: \"node\",\n    value: function node(options) {\n      options = options || {};\n      var sourceMap = this._sourceMap;\n      var value = this._value;\n      var name = this._name;\n      var lines = value.split(\"\\n\");\n      var node = new SourceNode(null, null, null, lines.map(function (line, idx) {\n        var pos = 0;\n\n        if (options.columns === false) {\n          var content = line + (idx != lines.length - 1 ? \"\\n\" : \"\");\n          return new SourceNode(idx + 1, 0, name, content);\n        }\n\n        return new SourceNode(null, null, null, _splitCode(line + (idx != lines.length - 1 ? \"\\n\" : \"\")).map(function (item) {\n          if (/^\\s*$/.test(item)) {\n            pos += item.length;\n            return item;\n          }\n\n          var res = new SourceNode(idx + 1, pos, name, item);\n          pos += item.length;\n          return res;\n        }));\n      }));\n      node.setSourceContent(name, value);\n      return node;\n    }\n  }, {\n    key: \"listMap\",\n    value: function listMap(options) {\n      return new SourceListMap(this._value, this._name, this._value);\n    }\n  }, {\n    key: \"updateHash\",\n    value: function updateHash(hash) {\n      hash.update(this._value);\n    }\n  }]);\n\n  return OriginalSource;\n}(Source);\n\nrequire(\"./SourceAndMapMixin\")(OriginalSource.prototype);\n\nmodule.exports = OriginalSource;","map":{"version":3,"sources":["/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/webpack-sources/lib/OriginalSource.js"],"names":["SourceNode","require","SourceMapConsumer","SourceListMap","Source","SPLIT_REGEX","_splitCode","code","match","OriginalSource","value","name","_value","_name","options","sourceMap","_sourceMap","lines","split","node","map","line","idx","pos","columns","content","length","item","test","res","setSourceContent","hash","update","prototype","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;;;;;;;;;AAEA,IAAIA,UAAU,GAAGC,OAAO,CAAC,YAAD,CAAP,CAAsBD,UAAvC;;AACA,IAAIE,iBAAiB,GAAGD,OAAO,CAAC,YAAD,CAAP,CAAsBC,iBAA9C;;AACA,IAAIC,aAAa,GAAGF,OAAO,CAAC,iBAAD,CAAP,CAA2BE,aAA/C;;AACA,IAAIC,MAAM,GAAGH,OAAO,CAAC,UAAD,CAApB;;AAEA,IAAII,WAAW,GAAG,6BAAlB;;AAEA,SAASC,UAAT,CAAoBC,IAApB,EAA0B;AACzB,SAAOA,IAAI,CAACC,KAAL,CAAWH,WAAX,KAA2B,EAAlC;AACA;;IAEKI,c;;;;;AACL,0BAAYC,KAAZ,EAAmBC,IAAnB,EAAyB;AAAA;;AAAA;;AACxB;AACA,UAAKC,MAAL,GAAcF,KAAd;AACA,UAAKG,KAAL,GAAaF,IAAb;AAHwB;AAIxB;;;;WAED,kBAAS;AACR,aAAO,KAAKC,MAAZ;AACA;;;WAED,cAAKE,OAAL,EAAc;AACbA,MAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;AACA,UAAIC,SAAS,GAAG,KAAKC,UAArB;AACA,UAAIN,KAAK,GAAG,KAAKE,MAAjB;AACA,UAAID,IAAI,GAAG,KAAKE,KAAhB;AACA,UAAII,KAAK,GAAGP,KAAK,CAACQ,KAAN,CAAY,IAAZ,CAAZ;AACA,UAAIC,IAAI,GAAG,IAAInB,UAAJ,CAAe,IAAf,EAAqB,IAArB,EAA2B,IAA3B,EACViB,KAAK,CAACG,GAAN,CAAU,UAASC,IAAT,EAAeC,GAAf,EAAoB;AAC7B,YAAIC,GAAG,GAAG,CAAV;;AACA,YAAGT,OAAO,CAACU,OAAR,KAAoB,KAAvB,EAA8B;AAC7B,cAAIC,OAAO,GAAGJ,IAAI,IAAIC,GAAG,IAAIL,KAAK,CAACS,MAAN,GAAe,CAAtB,GAA0B,IAA1B,GAAiC,EAArC,CAAlB;AACA,iBAAO,IAAI1B,UAAJ,CAAesB,GAAG,GAAG,CAArB,EAAwB,CAAxB,EAA2BX,IAA3B,EAAiCc,OAAjC,CAAP;AACA;;AACD,eAAO,IAAIzB,UAAJ,CAAe,IAAf,EAAqB,IAArB,EAA2B,IAA3B,EACNM,UAAU,CAACe,IAAI,IAAIC,GAAG,IAAIL,KAAK,CAACS,MAAN,GAAe,CAAtB,GAA0B,IAA1B,GAAiC,EAArC,CAAL,CAAV,CAAyDN,GAAzD,CAA6D,UAASO,IAAT,EAAe;AAC3E,cAAG,QAAQC,IAAR,CAAaD,IAAb,CAAH,EAAuB;AACtBJ,YAAAA,GAAG,IAAII,IAAI,CAACD,MAAZ;AACA,mBAAOC,IAAP;AACA;;AACD,cAAIE,GAAG,GAAG,IAAI7B,UAAJ,CAAesB,GAAG,GAAG,CAArB,EAAwBC,GAAxB,EAA6BZ,IAA7B,EAAmCgB,IAAnC,CAAV;AACAJ,UAAAA,GAAG,IAAII,IAAI,CAACD,MAAZ;AACA,iBAAOG,GAAP;AACA,SARD,CADM,CAAP;AAWA,OAjBD,CADU,CAAX;AAoBAV,MAAAA,IAAI,CAACW,gBAAL,CAAsBnB,IAAtB,EAA4BD,KAA5B;AACA,aAAOS,IAAP;AACA;;;WAED,iBAAQL,OAAR,EAAiB;AAChB,aAAO,IAAIX,aAAJ,CAAkB,KAAKS,MAAvB,EAA+B,KAAKC,KAApC,EAA2C,KAAKD,MAAhD,CAAP;AACA;;;WAED,oBAAWmB,IAAX,EAAiB;AAChBA,MAAAA,IAAI,CAACC,MAAL,CAAY,KAAKpB,MAAjB;AACA;;;;EA/C2BR,M;;AAkD7BH,OAAO,CAAC,qBAAD,CAAP,CAA+BQ,cAAc,CAACwB,SAA9C;;AAEAC,MAAM,CAACC,OAAP,GAAiB1B,cAAjB","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nvar SourceNode = require(\"source-map\").SourceNode;\nvar SourceMapConsumer = require(\"source-map\").SourceMapConsumer;\nvar SourceListMap = require(\"source-list-map\").SourceListMap;\nvar Source = require(\"./Source\");\n\nvar SPLIT_REGEX = /(?!$)[^\\n\\r;{}]*[\\n\\r;{}]*/g;\n\nfunction _splitCode(code) {\n\treturn code.match(SPLIT_REGEX) || [];\n}\n\nclass OriginalSource extends Source {\n\tconstructor(value, name) {\n\t\tsuper();\n\t\tthis._value = value;\n\t\tthis._name = name;\n\t}\n\n\tsource() {\n\t\treturn this._value;\n\t}\n\n\tnode(options) {\n\t\toptions = options || {};\n\t\tvar sourceMap = this._sourceMap;\n\t\tvar value = this._value;\n\t\tvar name = this._name;\n\t\tvar lines = value.split(\"\\n\");\n\t\tvar node = new SourceNode(null, null, null,\n\t\t\tlines.map(function(line, idx) {\n\t\t\t\tvar pos = 0;\n\t\t\t\tif(options.columns === false) {\n\t\t\t\t\tvar content = line + (idx != lines.length - 1 ? \"\\n\" : \"\");\n\t\t\t\t\treturn new SourceNode(idx + 1, 0, name, content);\n\t\t\t\t}\n\t\t\t\treturn new SourceNode(null, null, null,\n\t\t\t\t\t_splitCode(line + (idx != lines.length - 1 ? \"\\n\" : \"\")).map(function(item) {\n\t\t\t\t\t\tif(/^\\s*$/.test(item)) {\n\t\t\t\t\t\t\tpos += item.length;\n\t\t\t\t\t\t\treturn item;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tvar res = new SourceNode(idx + 1, pos, name, item);\n\t\t\t\t\t\tpos += item.length;\n\t\t\t\t\t\treturn res;\n\t\t\t\t\t})\n\t\t\t\t);\n\t\t\t})\n\t\t);\n\t\tnode.setSourceContent(name, value);\n\t\treturn node;\n\t}\n\n\tlistMap(options) {\n\t\treturn new SourceListMap(this._value, this._name, this._value)\n\t}\n\n\tupdateHash(hash) {\n\t\thash.update(this._value);\n\t}\n}\n\nrequire(\"./SourceAndMapMixin\")(OriginalSource.prototype);\n\nmodule.exports = OriginalSource;\n"]},"metadata":{},"sourceType":"script"}