{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nvar _createForOfIteratorHelper = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _classCallCheck = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/createClass\");\n\nvar validateOptions = require(\"schema-utils\");\n\nvar schema = require(\"../schemas/plugins/ProgressPlugin.json\");\n/** @typedef {import(\"../declarations/plugins/ProgressPlugin\").ProgressPluginArgument} ProgressPluginArgument */\n\n/** @typedef {import(\"../declarations/plugins/ProgressPlugin\").ProgressPluginOptions} ProgressPluginOptions */\n\n\nvar createDefaultHandler = function createDefaultHandler(profile, logger) {\n  var lastState;\n  var lastStateTime;\n\n  var defaultHandler = function defaultHandler(percentage, msg) {\n    for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n      args[_key - 2] = arguments[_key];\n    }\n\n    logger.status.apply(logger, [\"\".concat(Math.floor(percentage * 100), \"%\"), msg].concat(args));\n\n    if (profile) {\n      var state = msg;\n      state = state.replace(/^\\d+\\/\\d+\\s+/, \"\");\n\n      if (percentage === 0) {\n        lastState = null;\n        lastStateTime = Date.now();\n      } else if (state !== lastState || percentage === 1) {\n        var now = Date.now();\n\n        if (lastState) {\n          var diff = now - lastStateTime;\n          var stateMsg = \"\".concat(diff, \"ms \").concat(lastState);\n\n          if (diff > 1000) {\n            logger.warn(stateMsg);\n          } else if (diff > 10) {\n            logger.info(stateMsg);\n          } else if (diff > 0) {\n            logger.log(stateMsg);\n          } else {\n            logger.debug(stateMsg);\n          }\n        }\n\n        lastState = state;\n        lastStateTime = now;\n      }\n    }\n\n    if (percentage === 1) logger.status();\n  };\n\n  return defaultHandler;\n};\n\nvar ProgressPlugin = /*#__PURE__*/function () {\n  /**\n   * @param {ProgressPluginArgument} options options\n   */\n  function ProgressPlugin(options) {\n    _classCallCheck(this, ProgressPlugin);\n\n    if (typeof options === \"function\") {\n      options = {\n        handler: options\n      };\n    }\n\n    options = options || {};\n    validateOptions(schema, options, \"Progress Plugin\");\n    options = Object.assign({}, ProgressPlugin.defaultOptions, options);\n    this.profile = options.profile;\n    this.handler = options.handler;\n    this.modulesCount = options.modulesCount;\n    this.showEntries = options.entries;\n    this.showModules = options.modules;\n    this.showActiveModules = options.activeModules;\n  }\n\n  _createClass(ProgressPlugin, [{\n    key: \"apply\",\n    value: function apply(compiler) {\n      var modulesCount = this.modulesCount;\n      var handler = this.handler || createDefaultHandler(this.profile, compiler.getInfrastructureLogger(\"webpack.Progress\"));\n      var showEntries = this.showEntries;\n      var showModules = this.showModules;\n      var showActiveModules = this.showActiveModules;\n\n      if (compiler.compilers) {\n        var states = new Array(compiler.compilers.length);\n        compiler.compilers.forEach(function (compiler, idx) {\n          new ProgressPlugin(function (p, msg) {\n            for (var _len2 = arguments.length, args = new Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {\n              args[_key2 - 2] = arguments[_key2];\n            }\n\n            states[idx] = [p, msg].concat(args);\n            handler.apply(void 0, [states.map(function (state) {\n              return state && state[0] || 0;\n            }).reduce(function (a, b) {\n              return a + b;\n            }) / states.length, \"[\".concat(idx, \"] \").concat(msg)].concat(args));\n          }).apply(compiler);\n        });\n      } else {\n        var lastModulesCount = 0;\n        var lastEntriesCount = 0;\n        var moduleCount = modulesCount;\n        var entriesCount = 1;\n        var doneModules = 0;\n        var doneEntries = 0;\n        var activeModules = new Set();\n        var lastActiveModule = \"\";\n\n        var update = function update() {\n          var percentByModules = doneModules / Math.max(lastModulesCount, moduleCount);\n          var percentByEntries = doneEntries / Math.max(lastEntriesCount, entriesCount);\n          var items = [0.1 + Math.max(percentByModules, percentByEntries) * 0.6, \"building\"];\n\n          if (showEntries) {\n            items.push(\"\".concat(doneEntries, \"/\").concat(entriesCount, \" entries\"));\n          }\n\n          if (showModules) {\n            items.push(\"\".concat(doneModules, \"/\").concat(moduleCount, \" modules\"));\n          }\n\n          if (showActiveModules) {\n            items.push(\"\".concat(activeModules.size, \" active\"));\n            items.push(lastActiveModule);\n          }\n\n          handler.apply(void 0, items);\n        };\n\n        var moduleAdd = function moduleAdd(module) {\n          moduleCount++;\n\n          if (showActiveModules) {\n            var ident = module.identifier();\n\n            if (ident) {\n              activeModules.add(ident);\n              lastActiveModule = ident;\n            }\n          }\n\n          update();\n        };\n\n        var entryAdd = function entryAdd(entry, name) {\n          entriesCount++;\n          update();\n        };\n\n        var moduleDone = function moduleDone(module) {\n          doneModules++;\n\n          if (showActiveModules) {\n            var ident = module.identifier();\n\n            if (ident) {\n              activeModules.delete(ident);\n\n              if (lastActiveModule === ident) {\n                lastActiveModule = \"\";\n\n                var _iterator = _createForOfIteratorHelper(activeModules),\n                    _step;\n\n                try {\n                  for (_iterator.s(); !(_step = _iterator.n()).done;) {\n                    var m = _step.value;\n                    lastActiveModule = m;\n                  }\n                } catch (err) {\n                  _iterator.e(err);\n                } finally {\n                  _iterator.f();\n                }\n              }\n            }\n          }\n\n          update();\n        };\n\n        var entryDone = function entryDone(entry, name) {\n          doneEntries++;\n          update();\n        };\n\n        compiler.hooks.compilation.tap(\"ProgressPlugin\", function (compilation) {\n          if (compilation.compiler.isChild()) return;\n          lastModulesCount = moduleCount;\n          lastEntriesCount = entriesCount;\n          moduleCount = entriesCount = 0;\n          doneModules = doneEntries = 0;\n          handler(0, \"compiling\");\n          compilation.hooks.buildModule.tap(\"ProgressPlugin\", moduleAdd);\n          compilation.hooks.failedModule.tap(\"ProgressPlugin\", moduleDone);\n          compilation.hooks.succeedModule.tap(\"ProgressPlugin\", moduleDone);\n          compilation.hooks.addEntry.tap(\"ProgressPlugin\", entryAdd);\n          compilation.hooks.failedEntry.tap(\"ProgressPlugin\", entryDone);\n          compilation.hooks.succeedEntry.tap(\"ProgressPlugin\", entryDone);\n          var hooks = {\n            finishModules: \"finish module graph\",\n            seal: \"sealing\",\n            beforeChunks: \"chunk graph\",\n            afterChunks: \"after chunk graph\",\n            optimizeDependenciesBasic: \"basic dependencies optimization\",\n            optimizeDependencies: \"dependencies optimization\",\n            optimizeDependenciesAdvanced: \"advanced dependencies optimization\",\n            afterOptimizeDependencies: \"after dependencies optimization\",\n            optimize: \"optimizing\",\n            optimizeModulesBasic: \"basic module optimization\",\n            optimizeModules: \"module optimization\",\n            optimizeModulesAdvanced: \"advanced module optimization\",\n            afterOptimizeModules: \"after module optimization\",\n            optimizeChunksBasic: \"basic chunk optimization\",\n            optimizeChunks: \"chunk optimization\",\n            optimizeChunksAdvanced: \"advanced chunk optimization\",\n            afterOptimizeChunks: \"after chunk optimization\",\n            optimizeTree: \"module and chunk tree optimization\",\n            afterOptimizeTree: \"after module and chunk tree optimization\",\n            optimizeChunkModulesBasic: \"basic chunk modules optimization\",\n            optimizeChunkModules: \"chunk modules optimization\",\n            optimizeChunkModulesAdvanced: \"advanced chunk modules optimization\",\n            afterOptimizeChunkModules: \"after chunk modules optimization\",\n            reviveModules: \"module reviving\",\n            optimizeModuleOrder: \"module order optimization\",\n            advancedOptimizeModuleOrder: \"advanced module order optimization\",\n            beforeModuleIds: \"before module ids\",\n            moduleIds: \"module ids\",\n            optimizeModuleIds: \"module id optimization\",\n            afterOptimizeModuleIds: \"module id optimization\",\n            reviveChunks: \"chunk reviving\",\n            optimizeChunkOrder: \"chunk order optimization\",\n            beforeChunkIds: \"before chunk ids\",\n            optimizeChunkIds: \"chunk id optimization\",\n            afterOptimizeChunkIds: \"after chunk id optimization\",\n            recordModules: \"record modules\",\n            recordChunks: \"record chunks\",\n            beforeHash: \"hashing\",\n            afterHash: \"after hashing\",\n            recordHash: \"record hash\",\n            beforeModuleAssets: \"module assets processing\",\n            beforeChunkAssets: \"chunk assets processing\",\n            additionalChunkAssets: \"additional chunk assets processing\",\n            record: \"recording\",\n            additionalAssets: \"additional asset processing\",\n            optimizeChunkAssets: \"chunk asset optimization\",\n            afterOptimizeChunkAssets: \"after chunk asset optimization\",\n            optimizeAssets: \"asset optimization\",\n            afterOptimizeAssets: \"after asset optimization\",\n            afterSeal: \"after seal\"\n          };\n          var numberOfHooks = Object.keys(hooks).length;\n          Object.keys(hooks).forEach(function (name, idx) {\n            var title = hooks[name];\n            var percentage = idx / numberOfHooks * 0.25 + 0.7;\n            compilation.hooks[name].intercept({\n              name: \"ProgressPlugin\",\n              context: true,\n              call: function call() {\n                handler(percentage, title);\n              },\n              tap: function tap(context, _tap) {\n                if (context) {\n                  // p is percentage from 0 to 1\n                  // args is any number of messages in a hierarchical matter\n                  context.reportProgress = function (p) {\n                    for (var _len3 = arguments.length, args = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {\n                      args[_key3 - 1] = arguments[_key3];\n                    }\n\n                    handler.apply(void 0, [percentage, title, _tap.name].concat(args));\n                  };\n                }\n\n                handler(percentage, title, _tap.name);\n              }\n            });\n          });\n        });\n        compiler.hooks.emit.intercept({\n          name: \"ProgressPlugin\",\n          context: true,\n          call: function call() {\n            handler(0.95, \"emitting\");\n          },\n          tap: function tap(context, _tap2) {\n            if (context) {\n              context.reportProgress = function (p) {\n                for (var _len4 = arguments.length, args = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {\n                  args[_key4 - 1] = arguments[_key4];\n                }\n\n                handler.apply(void 0, [0.95, \"emitting\", _tap2.name].concat(args));\n              };\n            }\n\n            handler(0.95, \"emitting\", _tap2.name);\n          }\n        });\n        compiler.hooks.afterEmit.intercept({\n          name: \"ProgressPlugin\",\n          context: true,\n          call: function call() {\n            handler(0.98, \"after emitting\");\n          },\n          tap: function tap(context, _tap3) {\n            if (context) {\n              context.reportProgress = function (p) {\n                for (var _len5 = arguments.length, args = new Array(_len5 > 1 ? _len5 - 1 : 0), _key5 = 1; _key5 < _len5; _key5++) {\n                  args[_key5 - 1] = arguments[_key5];\n                }\n\n                handler.apply(void 0, [0.98, \"after emitting\", _tap3.name].concat(args));\n              };\n            }\n\n            handler(0.98, \"after emitting\", _tap3.name);\n          }\n        });\n        compiler.hooks.done.tap(\"ProgressPlugin\", function () {\n          handler(1, \"\");\n        });\n      }\n    }\n  }]);\n\n  return ProgressPlugin;\n}();\n\nProgressPlugin.defaultOptions = {\n  profile: false,\n  modulesCount: 500,\n  modules: true,\n  activeModules: true,\n  // TODO webpack 5 default this to true\n  entries: false\n};\nmodule.exports = ProgressPlugin;","map":{"version":3,"sources":["/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/webpack/lib/ProgressPlugin.js"],"names":["validateOptions","require","schema","createDefaultHandler","profile","logger","lastState","lastStateTime","defaultHandler","percentage","msg","args","status","Math","floor","state","replace","Date","now","diff","stateMsg","warn","info","log","debug","ProgressPlugin","options","handler","Object","assign","defaultOptions","modulesCount","showEntries","entries","showModules","modules","showActiveModules","activeModules","compiler","getInfrastructureLogger","compilers","states","Array","length","forEach","idx","p","map","reduce","a","b","apply","lastModulesCount","lastEntriesCount","moduleCount","entriesCount","doneModules","doneEntries","Set","lastActiveModule","update","percentByModules","max","percentByEntries","items","push","size","moduleAdd","module","ident","identifier","add","entryAdd","entry","name","moduleDone","delete","m","entryDone","hooks","compilation","tap","isChild","buildModule","failedModule","succeedModule","addEntry","failedEntry","succeedEntry","finishModules","seal","beforeChunks","afterChunks","optimizeDependenciesBasic","optimizeDependencies","optimizeDependenciesAdvanced","afterOptimizeDependencies","optimize","optimizeModulesBasic","optimizeModules","optimizeModulesAdvanced","afterOptimizeModules","optimizeChunksBasic","optimizeChunks","optimizeChunksAdvanced","afterOptimizeChunks","optimizeTree","afterOptimizeTree","optimizeChunkModulesBasic","optimizeChunkModules","optimizeChunkModulesAdvanced","afterOptimizeChunkModules","reviveModules","optimizeModuleOrder","advancedOptimizeModuleOrder","beforeModuleIds","moduleIds","optimizeModuleIds","afterOptimizeModuleIds","reviveChunks","optimizeChunkOrder","beforeChunkIds","optimizeChunkIds","afterOptimizeChunkIds","recordModules","recordChunks","beforeHash","afterHash","recordHash","beforeModuleAssets","beforeChunkAssets","additionalChunkAssets","record","additionalAssets","optimizeChunkAssets","afterOptimizeChunkAssets","optimizeAssets","afterOptimizeAssets","afterSeal","numberOfHooks","keys","title","intercept","context","call","reportProgress","emit","afterEmit","done","exports"],"mappings":"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","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst validateOptions = require(\"schema-utils\");\nconst schema = require(\"../schemas/plugins/ProgressPlugin.json\");\n\n/** @typedef {import(\"../declarations/plugins/ProgressPlugin\").ProgressPluginArgument} ProgressPluginArgument */\n/** @typedef {import(\"../declarations/plugins/ProgressPlugin\").ProgressPluginOptions} ProgressPluginOptions */\n\nconst createDefaultHandler = (profile, logger) => {\n\tlet lastState;\n\tlet lastStateTime;\n\n\tconst defaultHandler = (percentage, msg, ...args) => {\n\t\tlogger.status(`${Math.floor(percentage * 100)}%`, msg, ...args);\n\t\tif (profile) {\n\t\t\tlet state = msg;\n\t\t\tstate = state.replace(/^\\d+\\/\\d+\\s+/, \"\");\n\t\t\tif (percentage === 0) {\n\t\t\t\tlastState = null;\n\t\t\t\tlastStateTime = Date.now();\n\t\t\t} else if (state !== lastState || percentage === 1) {\n\t\t\t\tconst now = Date.now();\n\t\t\t\tif (lastState) {\n\t\t\t\t\tconst diff = now - lastStateTime;\n\t\t\t\t\tconst stateMsg = `${diff}ms ${lastState}`;\n\t\t\t\t\tif (diff > 1000) {\n\t\t\t\t\t\tlogger.warn(stateMsg);\n\t\t\t\t\t} else if (diff > 10) {\n\t\t\t\t\t\tlogger.info(stateMsg);\n\t\t\t\t\t} else if (diff > 0) {\n\t\t\t\t\t\tlogger.log(stateMsg);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tlogger.debug(stateMsg);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tlastState = state;\n\t\t\t\tlastStateTime = now;\n\t\t\t}\n\t\t}\n\t\tif (percentage === 1) logger.status();\n\t};\n\n\treturn defaultHandler;\n};\n\nclass ProgressPlugin {\n\t/**\n\t * @param {ProgressPluginArgument} options options\n\t */\n\tconstructor(options) {\n\t\tif (typeof options === \"function\") {\n\t\t\toptions = {\n\t\t\t\thandler: options\n\t\t\t};\n\t\t}\n\n\t\toptions = options || {};\n\t\tvalidateOptions(schema, options, \"Progress Plugin\");\n\t\toptions = Object.assign({}, ProgressPlugin.defaultOptions, options);\n\n\t\tthis.profile = options.profile;\n\t\tthis.handler = options.handler;\n\t\tthis.modulesCount = options.modulesCount;\n\t\tthis.showEntries = options.entries;\n\t\tthis.showModules = options.modules;\n\t\tthis.showActiveModules = options.activeModules;\n\t}\n\n\tapply(compiler) {\n\t\tconst { modulesCount } = this;\n\t\tconst handler =\n\t\t\tthis.handler ||\n\t\t\tcreateDefaultHandler(\n\t\t\t\tthis.profile,\n\t\t\t\tcompiler.getInfrastructureLogger(\"webpack.Progress\")\n\t\t\t);\n\t\tconst showEntries = this.showEntries;\n\t\tconst showModules = this.showModules;\n\t\tconst showActiveModules = this.showActiveModules;\n\t\tif (compiler.compilers) {\n\t\t\tconst states = new Array(compiler.compilers.length);\n\t\t\tcompiler.compilers.forEach((compiler, idx) => {\n\t\t\t\tnew ProgressPlugin((p, msg, ...args) => {\n\t\t\t\t\tstates[idx] = [p, msg, ...args];\n\t\t\t\t\thandler(\n\t\t\t\t\t\tstates\n\t\t\t\t\t\t\t.map(state => (state && state[0]) || 0)\n\t\t\t\t\t\t\t.reduce((a, b) => a + b) / states.length,\n\t\t\t\t\t\t`[${idx}] ${msg}`,\n\t\t\t\t\t\t...args\n\t\t\t\t\t);\n\t\t\t\t}).apply(compiler);\n\t\t\t});\n\t\t} else {\n\t\t\tlet lastModulesCount = 0;\n\t\t\tlet lastEntriesCount = 0;\n\t\t\tlet moduleCount = modulesCount;\n\t\t\tlet entriesCount = 1;\n\t\t\tlet doneModules = 0;\n\t\t\tlet doneEntries = 0;\n\t\t\tconst activeModules = new Set();\n\t\t\tlet lastActiveModule = \"\";\n\n\t\t\tconst update = () => {\n\t\t\t\tconst percentByModules =\n\t\t\t\t\tdoneModules / Math.max(lastModulesCount, moduleCount);\n\t\t\t\tconst percentByEntries =\n\t\t\t\t\tdoneEntries / Math.max(lastEntriesCount, entriesCount);\n\n\t\t\t\tconst items = [\n\t\t\t\t\t0.1 + Math.max(percentByModules, percentByEntries) * 0.6,\n\t\t\t\t\t\"building\"\n\t\t\t\t];\n\t\t\t\tif (showEntries) {\n\t\t\t\t\titems.push(`${doneEntries}/${entriesCount} entries`);\n\t\t\t\t}\n\t\t\t\tif (showModules) {\n\t\t\t\t\titems.push(`${doneModules}/${moduleCount} modules`);\n\t\t\t\t}\n\t\t\t\tif (showActiveModules) {\n\t\t\t\t\titems.push(`${activeModules.size} active`);\n\t\t\t\t\titems.push(lastActiveModule);\n\t\t\t\t}\n\t\t\t\thandler(...items);\n\t\t\t};\n\n\t\t\tconst moduleAdd = module => {\n\t\t\t\tmoduleCount++;\n\t\t\t\tif (showActiveModules) {\n\t\t\t\t\tconst ident = module.identifier();\n\t\t\t\t\tif (ident) {\n\t\t\t\t\t\tactiveModules.add(ident);\n\t\t\t\t\t\tlastActiveModule = ident;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tupdate();\n\t\t\t};\n\n\t\t\tconst entryAdd = (entry, name) => {\n\t\t\t\tentriesCount++;\n\t\t\t\tupdate();\n\t\t\t};\n\n\t\t\tconst moduleDone = module => {\n\t\t\t\tdoneModules++;\n\t\t\t\tif (showActiveModules) {\n\t\t\t\t\tconst ident = module.identifier();\n\t\t\t\t\tif (ident) {\n\t\t\t\t\t\tactiveModules.delete(ident);\n\t\t\t\t\t\tif (lastActiveModule === ident) {\n\t\t\t\t\t\t\tlastActiveModule = \"\";\n\t\t\t\t\t\t\tfor (const m of activeModules) {\n\t\t\t\t\t\t\t\tlastActiveModule = m;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tupdate();\n\t\t\t};\n\n\t\t\tconst entryDone = (entry, name) => {\n\t\t\t\tdoneEntries++;\n\t\t\t\tupdate();\n\t\t\t};\n\n\t\t\tcompiler.hooks.compilation.tap(\"ProgressPlugin\", compilation => {\n\t\t\t\tif (compilation.compiler.isChild()) return;\n\t\t\t\tlastModulesCount = moduleCount;\n\t\t\t\tlastEntriesCount = entriesCount;\n\t\t\t\tmoduleCount = entriesCount = 0;\n\t\t\t\tdoneModules = doneEntries = 0;\n\t\t\t\thandler(0, \"compiling\");\n\n\t\t\t\tcompilation.hooks.buildModule.tap(\"ProgressPlugin\", moduleAdd);\n\t\t\t\tcompilation.hooks.failedModule.tap(\"ProgressPlugin\", moduleDone);\n\t\t\t\tcompilation.hooks.succeedModule.tap(\"ProgressPlugin\", moduleDone);\n\n\t\t\t\tcompilation.hooks.addEntry.tap(\"ProgressPlugin\", entryAdd);\n\t\t\t\tcompilation.hooks.failedEntry.tap(\"ProgressPlugin\", entryDone);\n\t\t\t\tcompilation.hooks.succeedEntry.tap(\"ProgressPlugin\", entryDone);\n\n\t\t\t\tconst hooks = {\n\t\t\t\t\tfinishModules: \"finish module graph\",\n\t\t\t\t\tseal: \"sealing\",\n\t\t\t\t\tbeforeChunks: \"chunk graph\",\n\t\t\t\t\tafterChunks: \"after chunk graph\",\n\t\t\t\t\toptimizeDependenciesBasic: \"basic dependencies optimization\",\n\t\t\t\t\toptimizeDependencies: \"dependencies optimization\",\n\t\t\t\t\toptimizeDependenciesAdvanced: \"advanced dependencies optimization\",\n\t\t\t\t\tafterOptimizeDependencies: \"after dependencies optimization\",\n\t\t\t\t\toptimize: \"optimizing\",\n\t\t\t\t\toptimizeModulesBasic: \"basic module optimization\",\n\t\t\t\t\toptimizeModules: \"module optimization\",\n\t\t\t\t\toptimizeModulesAdvanced: \"advanced module optimization\",\n\t\t\t\t\tafterOptimizeModules: \"after module optimization\",\n\t\t\t\t\toptimizeChunksBasic: \"basic chunk optimization\",\n\t\t\t\t\toptimizeChunks: \"chunk optimization\",\n\t\t\t\t\toptimizeChunksAdvanced: \"advanced chunk optimization\",\n\t\t\t\t\tafterOptimizeChunks: \"after chunk optimization\",\n\t\t\t\t\toptimizeTree: \"module and chunk tree optimization\",\n\t\t\t\t\tafterOptimizeTree: \"after module and chunk tree optimization\",\n\t\t\t\t\toptimizeChunkModulesBasic: \"basic chunk modules optimization\",\n\t\t\t\t\toptimizeChunkModules: \"chunk modules optimization\",\n\t\t\t\t\toptimizeChunkModulesAdvanced: \"advanced chunk modules optimization\",\n\t\t\t\t\tafterOptimizeChunkModules: \"after chunk modules optimization\",\n\t\t\t\t\treviveModules: \"module reviving\",\n\t\t\t\t\toptimizeModuleOrder: \"module order optimization\",\n\t\t\t\t\tadvancedOptimizeModuleOrder: \"advanced module order optimization\",\n\t\t\t\t\tbeforeModuleIds: \"before module ids\",\n\t\t\t\t\tmoduleIds: \"module ids\",\n\t\t\t\t\toptimizeModuleIds: \"module id optimization\",\n\t\t\t\t\tafterOptimizeModuleIds: \"module id optimization\",\n\t\t\t\t\treviveChunks: \"chunk reviving\",\n\t\t\t\t\toptimizeChunkOrder: \"chunk order optimization\",\n\t\t\t\t\tbeforeChunkIds: \"before chunk ids\",\n\t\t\t\t\toptimizeChunkIds: \"chunk id optimization\",\n\t\t\t\t\tafterOptimizeChunkIds: \"after chunk id optimization\",\n\t\t\t\t\trecordModules: \"record modules\",\n\t\t\t\t\trecordChunks: \"record chunks\",\n\t\t\t\t\tbeforeHash: \"hashing\",\n\t\t\t\t\tafterHash: \"after hashing\",\n\t\t\t\t\trecordHash: \"record hash\",\n\t\t\t\t\tbeforeModuleAssets: \"module assets processing\",\n\t\t\t\t\tbeforeChunkAssets: \"chunk assets processing\",\n\t\t\t\t\tadditionalChunkAssets: \"additional chunk assets processing\",\n\t\t\t\t\trecord: \"recording\",\n\t\t\t\t\tadditionalAssets: \"additional asset processing\",\n\t\t\t\t\toptimizeChunkAssets: \"chunk asset optimization\",\n\t\t\t\t\tafterOptimizeChunkAssets: \"after chunk asset optimization\",\n\t\t\t\t\toptimizeAssets: \"asset optimization\",\n\t\t\t\t\tafterOptimizeAssets: \"after asset optimization\",\n\t\t\t\t\tafterSeal: \"after seal\"\n\t\t\t\t};\n\t\t\t\tconst numberOfHooks = Object.keys(hooks).length;\n\t\t\t\tObject.keys(hooks).forEach((name, idx) => {\n\t\t\t\t\tconst title = hooks[name];\n\t\t\t\t\tconst percentage = (idx / numberOfHooks) * 0.25 + 0.7;\n\t\t\t\t\tcompilation.hooks[name].intercept({\n\t\t\t\t\t\tname: \"ProgressPlugin\",\n\t\t\t\t\t\tcontext: true,\n\t\t\t\t\t\tcall: () => {\n\t\t\t\t\t\t\thandler(percentage, title);\n\t\t\t\t\t\t},\n\t\t\t\t\t\ttap: (context, tap) => {\n\t\t\t\t\t\t\tif (context) {\n\t\t\t\t\t\t\t\t// p is percentage from 0 to 1\n\t\t\t\t\t\t\t\t// args is any number of messages in a hierarchical matter\n\t\t\t\t\t\t\t\tcontext.reportProgress = (p, ...args) => {\n\t\t\t\t\t\t\t\t\thandler(percentage, title, tap.name, ...args);\n\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\thandler(percentage, title, tap.name);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\t\t\tcompiler.hooks.emit.intercept({\n\t\t\t\tname: \"ProgressPlugin\",\n\t\t\t\tcontext: true,\n\t\t\t\tcall: () => {\n\t\t\t\t\thandler(0.95, \"emitting\");\n\t\t\t\t},\n\t\t\t\ttap: (context, tap) => {\n\t\t\t\t\tif (context) {\n\t\t\t\t\t\tcontext.reportProgress = (p, ...args) => {\n\t\t\t\t\t\t\thandler(0.95, \"emitting\", tap.name, ...args);\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\t\t\t\t\thandler(0.95, \"emitting\", tap.name);\n\t\t\t\t}\n\t\t\t});\n\t\t\tcompiler.hooks.afterEmit.intercept({\n\t\t\t\tname: \"ProgressPlugin\",\n\t\t\t\tcontext: true,\n\t\t\t\tcall: () => {\n\t\t\t\t\thandler(0.98, \"after emitting\");\n\t\t\t\t},\n\t\t\t\ttap: (context, tap) => {\n\t\t\t\t\tif (context) {\n\t\t\t\t\t\tcontext.reportProgress = (p, ...args) => {\n\t\t\t\t\t\t\thandler(0.98, \"after emitting\", tap.name, ...args);\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\t\t\t\t\thandler(0.98, \"after emitting\", tap.name);\n\t\t\t\t}\n\t\t\t});\n\t\t\tcompiler.hooks.done.tap(\"ProgressPlugin\", () => {\n\t\t\t\thandler(1, \"\");\n\t\t\t});\n\t\t}\n\t}\n}\n\nProgressPlugin.defaultOptions = {\n\tprofile: false,\n\tmodulesCount: 500,\n\tmodules: true,\n\tactiveModules: true,\n\t// TODO webpack 5 default this to true\n\tentries: false\n};\n\nmodule.exports = ProgressPlugin;\n"]},"metadata":{},"sourceType":"script"}