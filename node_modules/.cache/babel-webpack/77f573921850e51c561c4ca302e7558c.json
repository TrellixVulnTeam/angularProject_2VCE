{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.forwardSlashPath = exports.flattenArray = exports.workaroundResolve = void 0;\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nvar core_1 = require(\"@angular-devkit/core\"); // `TsCompilerAotCompilerTypeCheckHostAdapter` in @angular/compiler-cli seems to resolve module\n// names directly via `resolveModuleName`, which prevents full Path usage.\n// NSTSC also uses Node.JS `path.resolve` which will result in incorrect paths in Windows\n// Example: `/D/MyPath/MyProject` -> `D:/d/mypath/myproject`\n// To work around this we must provide the same path format as TS internally uses in\n// the SourceFile paths.\n\n\nfunction workaroundResolve(path) {\n  return forwardSlashPath(core_1.getSystemPath(core_1.normalize(path)));\n}\n\nexports.workaroundResolve = workaroundResolve;\n\nfunction flattenArray(value) {\n  return [].concat.apply([], value);\n}\n\nexports.flattenArray = flattenArray; // TS represents paths internally with '/' and expects paths to be in this format.\n\nfunction forwardSlashPath(path) {\n  return path.replace(/\\\\/g, '/');\n}\n\nexports.forwardSlashPath = forwardSlashPath;","map":{"version":3,"sources":["/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@ngtools/webpack/src/utils.js"],"names":["Object","defineProperty","exports","value","forwardSlashPath","flattenArray","workaroundResolve","core_1","require","path","getSystemPath","normalize","concat","apply","replace"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,gBAAR,GAA2BF,OAAO,CAACG,YAAR,GAAuBH,OAAO,CAACI,iBAAR,GAA4B,KAAK,CAAnF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAMC,MAAM,GAAGC,OAAO,CAAC,sBAAD,CAAtB,C,CACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASF,iBAAT,CAA2BG,IAA3B,EAAiC;AAC7B,SAAOL,gBAAgB,CAACG,MAAM,CAACG,aAAP,CAAqBH,MAAM,CAACI,SAAP,CAAiBF,IAAjB,CAArB,CAAD,CAAvB;AACH;;AACDP,OAAO,CAACI,iBAAR,GAA4BA,iBAA5B;;AACA,SAASD,YAAT,CAAsBF,KAAtB,EAA6B;AACzB,SAAO,GAAGS,MAAH,CAAUC,KAAV,CAAgB,EAAhB,EAAoBV,KAApB,CAAP;AACH;;AACDD,OAAO,CAACG,YAAR,GAAuBA,YAAvB,C,CACA;;AACA,SAASD,gBAAT,CAA0BK,IAA1B,EAAgC;AAC5B,SAAOA,IAAI,CAACK,OAAL,CAAa,KAAb,EAAoB,GAApB,CAAP;AACH;;AACDZ,OAAO,CAACE,gBAAR,GAA2BA,gBAA3B","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.forwardSlashPath = exports.flattenArray = exports.workaroundResolve = void 0;\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst core_1 = require(\"@angular-devkit/core\");\n// `TsCompilerAotCompilerTypeCheckHostAdapter` in @angular/compiler-cli seems to resolve module\n// names directly via `resolveModuleName`, which prevents full Path usage.\n// NSTSC also uses Node.JS `path.resolve` which will result in incorrect paths in Windows\n// Example: `/D/MyPath/MyProject` -> `D:/d/mypath/myproject`\n// To work around this we must provide the same path format as TS internally uses in\n// the SourceFile paths.\nfunction workaroundResolve(path) {\n    return forwardSlashPath(core_1.getSystemPath(core_1.normalize(path)));\n}\nexports.workaroundResolve = workaroundResolve;\nfunction flattenArray(value) {\n    return [].concat.apply([], value);\n}\nexports.flattenArray = flattenArray;\n// TS represents paths internally with '/' and expects paths to be in this format.\nfunction forwardSlashPath(path) {\n    return path.replace(/\\\\/g, '/');\n}\nexports.forwardSlashPath = forwardSlashPath;\n"]},"metadata":{},"sourceType":"script"}