{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nvar _slicedToArray = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nvar _classCallCheck = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _require = require(\"tapable\"),\n    AsyncSeriesBailHook = _require.AsyncSeriesBailHook,\n    AsyncSeriesHook = _require.AsyncSeriesHook,\n    SyncHook = _require.SyncHook;\n\nvar createInnerContext = require(\"./createInnerContext\");\n\nvar _require2 = require(\"./util/identifier\"),\n    parseIdentifier = _require2.parseIdentifier;\n\nvar _require3 = require(\"./util/path\"),\n    _normalize = _require3.normalize,\n    _join = _require3.cachedJoin,\n    getType = _require3.getType,\n    PathType = _require3.PathType;\n/** @typedef {import(\"./ResolverFactory\").ResolveOptions} ResolveOptions */\n\n/**\n * @typedef {Object} FileSystemStats\n * @property {function(): boolean} isDirectory\n * @property {function(): boolean} isFile\n */\n\n/**\n * @typedef {Object} FileSystemDirent\n * @property {Buffer | string} name\n * @property {function(): boolean} isDirectory\n * @property {function(): boolean} isFile\n */\n\n/**\n * @typedef {Object} PossibleFileSystemError\n * @property {string=} code\n * @property {number=} errno\n * @property {string=} path\n * @property {string=} syscall\n */\n\n/**\n * @template T\n * @callback FileSystemCallback\n * @param {PossibleFileSystemError & Error | null | undefined} err\n * @param {T=} result\n */\n\n/**\n * @typedef {Object} FileSystem\n * @property {(function(string, FileSystemCallback<Buffer | string>): void) & function(string, object, FileSystemCallback<Buffer | string>): void} readFile\n * @property {(function(string, FileSystemCallback<(Buffer | string)[] | FileSystemDirent[]>): void) & function(string, object, FileSystemCallback<(Buffer | string)[] | FileSystemDirent[]>): void} readdir\n * @property {((function(string, FileSystemCallback<object>): void) & function(string, object, FileSystemCallback<object>): void)=} readJson\n * @property {(function(string, FileSystemCallback<Buffer | string>): void) & function(string, object, FileSystemCallback<Buffer | string>): void} readlink\n * @property {(function(string, FileSystemCallback<FileSystemStats>): void) & function(string, object, FileSystemCallback<Buffer | string>): void=} lstat\n * @property {(function(string, FileSystemCallback<FileSystemStats>): void) & function(string, object, FileSystemCallback<Buffer | string>): void} stat\n */\n\n/**\n * @typedef {Object} SyncFileSystem\n * @property {function(string, object=): Buffer | string} readFileSync\n * @property {function(string, object=): (Buffer | string)[] | FileSystemDirent[]} readdirSync\n * @property {(function(string, object=): object)=} readJsonSync\n * @property {function(string, object=): Buffer | string} readlinkSync\n * @property {function(string, object=): FileSystemStats=} lstatSync\n * @property {function(string, object=): FileSystemStats} statSync\n */\n\n/**\n * @typedef {Object} ParsedIdentifier\n * @property {string} request\n * @property {string} query\n * @property {string} fragment\n * @property {boolean} directory\n * @property {boolean} module\n * @property {boolean} file\n * @property {boolean} internal\n */\n\n/**\n * @typedef {Object} BaseResolveRequest\n * @property {string | false} path\n * @property {string=} descriptionFilePath\n * @property {string=} descriptionFileRoot\n * @property {object=} descriptionFileData\n * @property {string=} relativePath\n * @property {boolean=} ignoreSymlinks\n * @property {boolean=} fullySpecified\n */\n\n/** @typedef {BaseResolveRequest & Partial<ParsedIdentifier>} ResolveRequest */\n\n/**\n * String with special formatting\n * @typedef {string} StackEntry\n */\n\n/** @template T @typedef {{ add: (T) => void }} WriteOnlySet<T> */\n\n/**\n * Resolve context\n * @typedef {Object} ResolveContext\n * @property {WriteOnlySet<string>=} contextDependencies\n * @property {WriteOnlySet<string>=} fileDependencies files that was found on file system\n * @property {WriteOnlySet<string>=} missingDependencies dependencies that was not found on file system\n * @property {Set<StackEntry>=} stack set of hooks' calls. For instance, `resolve → parsedResolve → describedResolve`,\n * @property {(function(string): void)=} log log function\n */\n\n/** @typedef {AsyncSeriesBailHook<[ResolveRequest, ResolveContext], ResolveRequest | null>} ResolveStepHook */\n\n/**\n * @param {string} str input string\n * @returns {string} in camel case\n */\n\n\nfunction toCamelCase(str) {\n  return str.replace(/-([a-z])/g, function (str) {\n    return str.substr(1).toUpperCase();\n  });\n}\n\nvar Resolver = /*#__PURE__*/function () {\n  /**\n   * @param {FileSystem} fileSystem a filesystem\n   * @param {ResolveOptions} options options\n   */\n  function Resolver(fileSystem, options) {\n    _classCallCheck(this, Resolver);\n\n    this.fileSystem = fileSystem;\n    this.options = options;\n    this.hooks = {\n      /** @type {SyncHook<[ResolveStepHook, ResolveRequest], void>} */\n      resolveStep: new SyncHook([\"hook\", \"request\"], \"resolveStep\"),\n\n      /** @type {SyncHook<[ResolveRequest, Error]>} */\n      noResolve: new SyncHook([\"request\", \"error\"], \"noResolve\"),\n\n      /** @type {ResolveStepHook} */\n      resolve: new AsyncSeriesBailHook([\"request\", \"resolveContext\"], \"resolve\"),\n\n      /** @type {AsyncSeriesHook<[ResolveRequest, ResolveContext], void>} */\n      result: new AsyncSeriesHook([\"result\", \"resolveContext\"], \"result\")\n    };\n  }\n  /**\n   * @param {string | ResolveStepHook} name hook name or hook itself\n   * @returns {ResolveStepHook} the hook\n   */\n\n\n  _createClass(Resolver, [{\n    key: \"ensureHook\",\n    value: function ensureHook(name) {\n      if (typeof name !== \"string\") {\n        return name;\n      }\n\n      name = toCamelCase(name);\n\n      if (/^before/.test(name)) {\n        return (\n          /** @type {ResolveStepHook} */\n          this.ensureHook(name[6].toLowerCase() + name.substr(7)).withOptions({\n            stage: -10\n          })\n        );\n      }\n\n      if (/^after/.test(name)) {\n        return (\n          /** @type {ResolveStepHook} */\n          this.ensureHook(name[5].toLowerCase() + name.substr(6)).withOptions({\n            stage: 10\n          })\n        );\n      }\n\n      var hook = this.hooks[name];\n\n      if (!hook) {\n        return this.hooks[name] = new AsyncSeriesBailHook([\"request\", \"resolveContext\"], name);\n      }\n\n      return hook;\n    }\n    /**\n     * @param {string | ResolveStepHook} name hook name or hook itself\n     * @returns {ResolveStepHook} the hook\n     */\n\n  }, {\n    key: \"getHook\",\n    value: function getHook(name) {\n      if (typeof name !== \"string\") {\n        return name;\n      }\n\n      name = toCamelCase(name);\n\n      if (/^before/.test(name)) {\n        return (\n          /** @type {ResolveStepHook} */\n          this.getHook(name[6].toLowerCase() + name.substr(7)).withOptions({\n            stage: -10\n          })\n        );\n      }\n\n      if (/^after/.test(name)) {\n        return (\n          /** @type {ResolveStepHook} */\n          this.getHook(name[5].toLowerCase() + name.substr(6)).withOptions({\n            stage: 10\n          })\n        );\n      }\n\n      var hook = this.hooks[name];\n\n      if (!hook) {\n        throw new Error(\"Hook \".concat(name, \" doesn't exist\"));\n      }\n\n      return hook;\n    }\n    /**\n     * @param {object} context context information object\n     * @param {string} path context path\n     * @param {string} request request string\n     * @returns {string | false} result\n     */\n\n  }, {\n    key: \"resolveSync\",\n    value: function resolveSync(context, path, request) {\n      /** @type {Error | null | undefined} */\n      var err = undefined;\n      /** @type {string | false | undefined} */\n\n      var result = undefined;\n      var sync = false;\n      this.resolve(context, path, request, {}, function (e, r) {\n        err = e;\n        result = r;\n        sync = true;\n      });\n\n      if (!sync) {\n        throw new Error(\"Cannot 'resolveSync' because the fileSystem is not sync. Use 'resolve'!\");\n      }\n\n      if (err) throw err;\n      if (result === undefined) throw new Error(\"No result\");\n      return result;\n    }\n    /**\n     * @param {object} context context information object\n     * @param {string} path context path\n     * @param {string} request request string\n     * @param {ResolveContext} resolveContext resolve context\n     * @param {function(Error | null, (string|false)=, ResolveRequest=): void} callback callback function\n     * @returns {void}\n     */\n\n  }, {\n    key: \"resolve\",\n    value: function resolve(context, path, request, resolveContext, callback) {\n      var _this = this;\n\n      if (!context || typeof context !== \"object\") return callback(new Error(\"context argument is not an object\"));\n      if (typeof path !== \"string\") return callback(new Error(\"path argument is not a string\"));\n      if (typeof request !== \"string\") return callback(new Error(\"path argument is not a string\"));\n      if (!resolveContext) return callback(new Error(\"resolveContext argument is not set\"));\n      var obj = {\n        context: context,\n        path: path,\n        request: request\n      };\n      var message = \"resolve '\".concat(request, \"' in '\").concat(path, \"'\");\n\n      var finishResolved = function finishResolved(result) {\n        return callback(null, result.path === false ? false : \"\".concat(result.path.replace(/#/g, \"\\0#\")).concat(result.query ? result.query.replace(/#/g, \"\\0#\") : \"\").concat(result.fragment || \"\"), result);\n      };\n\n      var finishWithoutResolve = function finishWithoutResolve(log) {\n        /**\n         * @type {Error & {details?: string}}\n         */\n        var error = new Error(\"Can't \" + message);\n        error.details = log.join(\"\\n\");\n\n        _this.hooks.noResolve.call(obj, error);\n\n        return callback(error);\n      };\n\n      if (resolveContext.log) {\n        // We need log anyway to capture it in case of an error\n        var parentLog = resolveContext.log;\n        var _log = [];\n        return this.doResolve(this.hooks.resolve, obj, message, {\n          log: function log(msg) {\n            parentLog(msg);\n\n            _log.push(msg);\n          },\n          fileDependencies: resolveContext.fileDependencies,\n          contextDependencies: resolveContext.contextDependencies,\n          missingDependencies: resolveContext.missingDependencies,\n          stack: resolveContext.stack\n        }, function (err, result) {\n          if (err) return callback(err);\n          if (result) return finishResolved(result);\n          return finishWithoutResolve(_log);\n        });\n      } else {\n        // Try to resolve assuming there is no error\n        // We don't log stuff in this case\n        return this.doResolve(this.hooks.resolve, obj, message, {\n          log: undefined,\n          fileDependencies: resolveContext.fileDependencies,\n          contextDependencies: resolveContext.contextDependencies,\n          missingDependencies: resolveContext.missingDependencies,\n          stack: resolveContext.stack\n        }, function (err, result) {\n          if (err) return callback(err);\n          if (result) return finishResolved(result); // log is missing for the error details\n          // so we redo the resolving for the log info\n          // this is more expensive to the success case\n          // is assumed by default\n\n          var _log2 = [];\n          return _this.doResolve(_this.hooks.resolve, obj, message, {\n            log: function log(msg) {\n              return _log2.push(msg);\n            },\n            stack: resolveContext.stack\n          }, function (err, result) {\n            if (err) return callback(err);\n            return finishWithoutResolve(_log2);\n          });\n        });\n      }\n    }\n  }, {\n    key: \"doResolve\",\n    value: function doResolve(hook, request, message, resolveContext, callback) {\n      var stackEntry = Resolver.createStackEntry(hook, request);\n      var newStack;\n\n      if (resolveContext.stack) {\n        newStack = new Set(resolveContext.stack);\n\n        if (resolveContext.stack.has(stackEntry)) {\n          /**\n           * Prevent recursion\n           * @type {Error & {recursion?: boolean}}\n           */\n          var recursionError = new Error(\"Recursion in resolving\\nStack:\\n  \" + Array.from(newStack).join(\"\\n  \"));\n          recursionError.recursion = true;\n          if (resolveContext.log) resolveContext.log(\"abort resolving because of recursion\");\n          return callback(recursionError);\n        }\n\n        newStack.add(stackEntry);\n      } else {\n        newStack = new Set([stackEntry]);\n      }\n\n      this.hooks.resolveStep.call(hook, request);\n\n      if (hook.isUsed()) {\n        var innerContext = createInnerContext({\n          log: resolveContext.log,\n          fileDependencies: resolveContext.fileDependencies,\n          contextDependencies: resolveContext.contextDependencies,\n          missingDependencies: resolveContext.missingDependencies,\n          stack: newStack\n        }, message);\n        return hook.callAsync(request, innerContext, function (err, result) {\n          if (err) return callback(err);\n          if (result) return callback(null, result);\n          callback();\n        });\n      } else {\n        callback();\n      }\n    }\n    /**\n     * @param {string} identifier identifier\n     * @returns {ParsedIdentifier} parsed identifier\n     */\n\n  }, {\n    key: \"parse\",\n    value: function parse(identifier) {\n      var part = {\n        request: \"\",\n        query: \"\",\n        fragment: \"\",\n        module: false,\n        directory: false,\n        file: false,\n        internal: false\n      };\n      var parsedIdentifier = parseIdentifier(identifier);\n      if (!parsedIdentifier) return part;\n\n      var _parsedIdentifier = _slicedToArray(parsedIdentifier, 3);\n\n      part.request = _parsedIdentifier[0];\n      part.query = _parsedIdentifier[1];\n      part.fragment = _parsedIdentifier[2];\n\n      if (part.request.length > 0) {\n        part.internal = this.isPrivate(identifier);\n        part.module = this.isModule(part.request);\n        part.directory = this.isDirectory(part.request);\n\n        if (part.directory) {\n          part.request = part.request.substr(0, part.request.length - 1);\n        }\n      }\n\n      return part;\n    }\n  }, {\n    key: \"isModule\",\n    value: function isModule(path) {\n      return getType(path) === PathType.Normal;\n    }\n  }, {\n    key: \"isPrivate\",\n    value: function isPrivate(path) {\n      return getType(path) === PathType.Internal;\n    }\n    /**\n     * @param {string} path a path\n     * @returns {boolean} true, if the path is a directory path\n     */\n\n  }, {\n    key: \"isDirectory\",\n    value: function isDirectory(path) {\n      return path.endsWith(\"/\");\n    }\n  }, {\n    key: \"join\",\n    value: function join(path, request) {\n      return _join(path, request);\n    }\n  }, {\n    key: \"normalize\",\n    value: function normalize(path) {\n      return _normalize(path);\n    }\n  }], [{\n    key: \"createStackEntry\",\n    value:\n    /**\n     * @param {ResolveStepHook} hook hook\n     * @param {ResolveRequest} request request\n     * @returns {StackEntry} stack entry\n     */\n    function createStackEntry(hook, request) {\n      return hook.name + \": (\" + request.path + \") \" + (request.request || \"\") + (request.query || \"\") + (request.fragment || \"\") + (request.directory ? \" directory\" : \"\") + (request.module ? \" module\" : \"\");\n    }\n  }]);\n\n  return Resolver;\n}();\n\nmodule.exports = Resolver;","map":{"version":3,"sources":["/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/enhanced-resolve/lib/Resolver.js"],"names":["require","AsyncSeriesBailHook","AsyncSeriesHook","SyncHook","createInnerContext","parseIdentifier","normalize","join","cachedJoin","getType","PathType","toCamelCase","str","replace","substr","toUpperCase","Resolver","fileSystem","options","hooks","resolveStep","noResolve","resolve","result","name","test","ensureHook","toLowerCase","withOptions","stage","hook","getHook","Error","context","path","request","err","undefined","sync","e","r","resolveContext","callback","obj","message","finishResolved","query","fragment","finishWithoutResolve","log","error","details","call","parentLog","doResolve","msg","push","fileDependencies","contextDependencies","missingDependencies","stack","stackEntry","createStackEntry","newStack","Set","has","recursionError","Array","from","recursion","add","isUsed","innerContext","callAsync","identifier","part","module","directory","file","internal","parsedIdentifier","length","isPrivate","isModule","isDirectory","Normal","Internal","endsWith","exports"],"mappings":"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","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst { AsyncSeriesBailHook, AsyncSeriesHook, SyncHook } = require(\"tapable\");\nconst createInnerContext = require(\"./createInnerContext\");\nconst { parseIdentifier } = require(\"./util/identifier\");\nconst {\n\tnormalize,\n\tcachedJoin: join,\n\tgetType,\n\tPathType\n} = require(\"./util/path\");\n\n/** @typedef {import(\"./ResolverFactory\").ResolveOptions} ResolveOptions */\n\n/**\n * @typedef {Object} FileSystemStats\n * @property {function(): boolean} isDirectory\n * @property {function(): boolean} isFile\n */\n\n/**\n * @typedef {Object} FileSystemDirent\n * @property {Buffer | string} name\n * @property {function(): boolean} isDirectory\n * @property {function(): boolean} isFile\n */\n\n/**\n * @typedef {Object} PossibleFileSystemError\n * @property {string=} code\n * @property {number=} errno\n * @property {string=} path\n * @property {string=} syscall\n */\n\n/**\n * @template T\n * @callback FileSystemCallback\n * @param {PossibleFileSystemError & Error | null | undefined} err\n * @param {T=} result\n */\n\n/**\n * @typedef {Object} FileSystem\n * @property {(function(string, FileSystemCallback<Buffer | string>): void) & function(string, object, FileSystemCallback<Buffer | string>): void} readFile\n * @property {(function(string, FileSystemCallback<(Buffer | string)[] | FileSystemDirent[]>): void) & function(string, object, FileSystemCallback<(Buffer | string)[] | FileSystemDirent[]>): void} readdir\n * @property {((function(string, FileSystemCallback<object>): void) & function(string, object, FileSystemCallback<object>): void)=} readJson\n * @property {(function(string, FileSystemCallback<Buffer | string>): void) & function(string, object, FileSystemCallback<Buffer | string>): void} readlink\n * @property {(function(string, FileSystemCallback<FileSystemStats>): void) & function(string, object, FileSystemCallback<Buffer | string>): void=} lstat\n * @property {(function(string, FileSystemCallback<FileSystemStats>): void) & function(string, object, FileSystemCallback<Buffer | string>): void} stat\n */\n\n/**\n * @typedef {Object} SyncFileSystem\n * @property {function(string, object=): Buffer | string} readFileSync\n * @property {function(string, object=): (Buffer | string)[] | FileSystemDirent[]} readdirSync\n * @property {(function(string, object=): object)=} readJsonSync\n * @property {function(string, object=): Buffer | string} readlinkSync\n * @property {function(string, object=): FileSystemStats=} lstatSync\n * @property {function(string, object=): FileSystemStats} statSync\n */\n\n/**\n * @typedef {Object} ParsedIdentifier\n * @property {string} request\n * @property {string} query\n * @property {string} fragment\n * @property {boolean} directory\n * @property {boolean} module\n * @property {boolean} file\n * @property {boolean} internal\n */\n\n/**\n * @typedef {Object} BaseResolveRequest\n * @property {string | false} path\n * @property {string=} descriptionFilePath\n * @property {string=} descriptionFileRoot\n * @property {object=} descriptionFileData\n * @property {string=} relativePath\n * @property {boolean=} ignoreSymlinks\n * @property {boolean=} fullySpecified\n */\n\n/** @typedef {BaseResolveRequest & Partial<ParsedIdentifier>} ResolveRequest */\n\n/**\n * String with special formatting\n * @typedef {string} StackEntry\n */\n\n/** @template T @typedef {{ add: (T) => void }} WriteOnlySet<T> */\n\n/**\n * Resolve context\n * @typedef {Object} ResolveContext\n * @property {WriteOnlySet<string>=} contextDependencies\n * @property {WriteOnlySet<string>=} fileDependencies files that was found on file system\n * @property {WriteOnlySet<string>=} missingDependencies dependencies that was not found on file system\n * @property {Set<StackEntry>=} stack set of hooks' calls. For instance, `resolve → parsedResolve → describedResolve`,\n * @property {(function(string): void)=} log log function\n */\n\n/** @typedef {AsyncSeriesBailHook<[ResolveRequest, ResolveContext], ResolveRequest | null>} ResolveStepHook */\n\n/**\n * @param {string} str input string\n * @returns {string} in camel case\n */\nfunction toCamelCase(str) {\n\treturn str.replace(/-([a-z])/g, str => str.substr(1).toUpperCase());\n}\n\nclass Resolver {\n\t/**\n\t * @param {ResolveStepHook} hook hook\n\t * @param {ResolveRequest} request request\n\t * @returns {StackEntry} stack entry\n\t */\n\tstatic createStackEntry(hook, request) {\n\t\treturn (\n\t\t\thook.name +\n\t\t\t\": (\" +\n\t\t\trequest.path +\n\t\t\t\") \" +\n\t\t\t(request.request || \"\") +\n\t\t\t(request.query || \"\") +\n\t\t\t(request.fragment || \"\") +\n\t\t\t(request.directory ? \" directory\" : \"\") +\n\t\t\t(request.module ? \" module\" : \"\")\n\t\t);\n\t}\n\n\t/**\n\t * @param {FileSystem} fileSystem a filesystem\n\t * @param {ResolveOptions} options options\n\t */\n\tconstructor(fileSystem, options) {\n\t\tthis.fileSystem = fileSystem;\n\t\tthis.options = options;\n\t\tthis.hooks = {\n\t\t\t/** @type {SyncHook<[ResolveStepHook, ResolveRequest], void>} */\n\t\t\tresolveStep: new SyncHook([\"hook\", \"request\"], \"resolveStep\"),\n\t\t\t/** @type {SyncHook<[ResolveRequest, Error]>} */\n\t\t\tnoResolve: new SyncHook([\"request\", \"error\"], \"noResolve\"),\n\t\t\t/** @type {ResolveStepHook} */\n\t\t\tresolve: new AsyncSeriesBailHook(\n\t\t\t\t[\"request\", \"resolveContext\"],\n\t\t\t\t\"resolve\"\n\t\t\t),\n\t\t\t/** @type {AsyncSeriesHook<[ResolveRequest, ResolveContext], void>} */\n\t\t\tresult: new AsyncSeriesHook([\"result\", \"resolveContext\"], \"result\")\n\t\t};\n\t}\n\n\t/**\n\t * @param {string | ResolveStepHook} name hook name or hook itself\n\t * @returns {ResolveStepHook} the hook\n\t */\n\tensureHook(name) {\n\t\tif (typeof name !== \"string\") {\n\t\t\treturn name;\n\t\t}\n\t\tname = toCamelCase(name);\n\t\tif (/^before/.test(name)) {\n\t\t\treturn /** @type {ResolveStepHook} */ (this.ensureHook(\n\t\t\t\tname[6].toLowerCase() + name.substr(7)\n\t\t\t).withOptions({\n\t\t\t\tstage: -10\n\t\t\t}));\n\t\t}\n\t\tif (/^after/.test(name)) {\n\t\t\treturn /** @type {ResolveStepHook} */ (this.ensureHook(\n\t\t\t\tname[5].toLowerCase() + name.substr(6)\n\t\t\t).withOptions({\n\t\t\t\tstage: 10\n\t\t\t}));\n\t\t}\n\t\tconst hook = this.hooks[name];\n\t\tif (!hook) {\n\t\t\treturn (this.hooks[name] = new AsyncSeriesBailHook(\n\t\t\t\t[\"request\", \"resolveContext\"],\n\t\t\t\tname\n\t\t\t));\n\t\t}\n\t\treturn hook;\n\t}\n\n\t/**\n\t * @param {string | ResolveStepHook} name hook name or hook itself\n\t * @returns {ResolveStepHook} the hook\n\t */\n\tgetHook(name) {\n\t\tif (typeof name !== \"string\") {\n\t\t\treturn name;\n\t\t}\n\t\tname = toCamelCase(name);\n\t\tif (/^before/.test(name)) {\n\t\t\treturn /** @type {ResolveStepHook} */ (this.getHook(\n\t\t\t\tname[6].toLowerCase() + name.substr(7)\n\t\t\t).withOptions({\n\t\t\t\tstage: -10\n\t\t\t}));\n\t\t}\n\t\tif (/^after/.test(name)) {\n\t\t\treturn /** @type {ResolveStepHook} */ (this.getHook(\n\t\t\t\tname[5].toLowerCase() + name.substr(6)\n\t\t\t).withOptions({\n\t\t\t\tstage: 10\n\t\t\t}));\n\t\t}\n\t\tconst hook = this.hooks[name];\n\t\tif (!hook) {\n\t\t\tthrow new Error(`Hook ${name} doesn't exist`);\n\t\t}\n\t\treturn hook;\n\t}\n\n\t/**\n\t * @param {object} context context information object\n\t * @param {string} path context path\n\t * @param {string} request request string\n\t * @returns {string | false} result\n\t */\n\tresolveSync(context, path, request) {\n\t\t/** @type {Error | null | undefined} */\n\t\tlet err = undefined;\n\t\t/** @type {string | false | undefined} */\n\t\tlet result = undefined;\n\t\tlet sync = false;\n\t\tthis.resolve(context, path, request, {}, (e, r) => {\n\t\t\terr = e;\n\t\t\tresult = r;\n\t\t\tsync = true;\n\t\t});\n\t\tif (!sync) {\n\t\t\tthrow new Error(\n\t\t\t\t\"Cannot 'resolveSync' because the fileSystem is not sync. Use 'resolve'!\"\n\t\t\t);\n\t\t}\n\t\tif (err) throw err;\n\t\tif (result === undefined) throw new Error(\"No result\");\n\t\treturn result;\n\t}\n\n\t/**\n\t * @param {object} context context information object\n\t * @param {string} path context path\n\t * @param {string} request request string\n\t * @param {ResolveContext} resolveContext resolve context\n\t * @param {function(Error | null, (string|false)=, ResolveRequest=): void} callback callback function\n\t * @returns {void}\n\t */\n\tresolve(context, path, request, resolveContext, callback) {\n\t\tif (!context || typeof context !== \"object\")\n\t\t\treturn callback(new Error(\"context argument is not an object\"));\n\t\tif (typeof path !== \"string\")\n\t\t\treturn callback(new Error(\"path argument is not a string\"));\n\t\tif (typeof request !== \"string\")\n\t\t\treturn callback(new Error(\"path argument is not a string\"));\n\t\tif (!resolveContext)\n\t\t\treturn callback(new Error(\"resolveContext argument is not set\"));\n\n\t\tconst obj = {\n\t\t\tcontext: context,\n\t\t\tpath: path,\n\t\t\trequest: request\n\t\t};\n\n\t\tconst message = `resolve '${request}' in '${path}'`;\n\n\t\tconst finishResolved = result => {\n\t\t\treturn callback(\n\t\t\t\tnull,\n\t\t\t\tresult.path === false\n\t\t\t\t\t? false\n\t\t\t\t\t: `${result.path.replace(/#/g, \"\\0#\")}${\n\t\t\t\t\t\t\tresult.query ? result.query.replace(/#/g, \"\\0#\") : \"\"\n\t\t\t\t\t  }${result.fragment || \"\"}`,\n\t\t\t\tresult\n\t\t\t);\n\t\t};\n\n\t\tconst finishWithoutResolve = log => {\n\t\t\t/**\n\t\t\t * @type {Error & {details?: string}}\n\t\t\t */\n\t\t\tconst error = new Error(\"Can't \" + message);\n\t\t\terror.details = log.join(\"\\n\");\n\t\t\tthis.hooks.noResolve.call(obj, error);\n\t\t\treturn callback(error);\n\t\t};\n\n\t\tif (resolveContext.log) {\n\t\t\t// We need log anyway to capture it in case of an error\n\t\t\tconst parentLog = resolveContext.log;\n\t\t\tconst log = [];\n\t\t\treturn this.doResolve(\n\t\t\t\tthis.hooks.resolve,\n\t\t\t\tobj,\n\t\t\t\tmessage,\n\t\t\t\t{\n\t\t\t\t\tlog: msg => {\n\t\t\t\t\t\tparentLog(msg);\n\t\t\t\t\t\tlog.push(msg);\n\t\t\t\t\t},\n\t\t\t\t\tfileDependencies: resolveContext.fileDependencies,\n\t\t\t\t\tcontextDependencies: resolveContext.contextDependencies,\n\t\t\t\t\tmissingDependencies: resolveContext.missingDependencies,\n\t\t\t\t\tstack: resolveContext.stack\n\t\t\t\t},\n\t\t\t\t(err, result) => {\n\t\t\t\t\tif (err) return callback(err);\n\n\t\t\t\t\tif (result) return finishResolved(result);\n\n\t\t\t\t\treturn finishWithoutResolve(log);\n\t\t\t\t}\n\t\t\t);\n\t\t} else {\n\t\t\t// Try to resolve assuming there is no error\n\t\t\t// We don't log stuff in this case\n\t\t\treturn this.doResolve(\n\t\t\t\tthis.hooks.resolve,\n\t\t\t\tobj,\n\t\t\t\tmessage,\n\t\t\t\t{\n\t\t\t\t\tlog: undefined,\n\t\t\t\t\tfileDependencies: resolveContext.fileDependencies,\n\t\t\t\t\tcontextDependencies: resolveContext.contextDependencies,\n\t\t\t\t\tmissingDependencies: resolveContext.missingDependencies,\n\t\t\t\t\tstack: resolveContext.stack\n\t\t\t\t},\n\t\t\t\t(err, result) => {\n\t\t\t\t\tif (err) return callback(err);\n\n\t\t\t\t\tif (result) return finishResolved(result);\n\n\t\t\t\t\t// log is missing for the error details\n\t\t\t\t\t// so we redo the resolving for the log info\n\t\t\t\t\t// this is more expensive to the success case\n\t\t\t\t\t// is assumed by default\n\n\t\t\t\t\tconst log = [];\n\n\t\t\t\t\treturn this.doResolve(\n\t\t\t\t\t\tthis.hooks.resolve,\n\t\t\t\t\t\tobj,\n\t\t\t\t\t\tmessage,\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlog: msg => log.push(msg),\n\t\t\t\t\t\t\tstack: resolveContext.stack\n\t\t\t\t\t\t},\n\t\t\t\t\t\t(err, result) => {\n\t\t\t\t\t\t\tif (err) return callback(err);\n\n\t\t\t\t\t\t\treturn finishWithoutResolve(log);\n\t\t\t\t\t\t}\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t);\n\t\t}\n\t}\n\n\tdoResolve(hook, request, message, resolveContext, callback) {\n\t\tconst stackEntry = Resolver.createStackEntry(hook, request);\n\n\t\tlet newStack;\n\t\tif (resolveContext.stack) {\n\t\t\tnewStack = new Set(resolveContext.stack);\n\t\t\tif (resolveContext.stack.has(stackEntry)) {\n\t\t\t\t/**\n\t\t\t\t * Prevent recursion\n\t\t\t\t * @type {Error & {recursion?: boolean}}\n\t\t\t\t */\n\t\t\t\tconst recursionError = new Error(\n\t\t\t\t\t\"Recursion in resolving\\nStack:\\n  \" +\n\t\t\t\t\t\tArray.from(newStack).join(\"\\n  \")\n\t\t\t\t);\n\t\t\t\trecursionError.recursion = true;\n\t\t\t\tif (resolveContext.log)\n\t\t\t\t\tresolveContext.log(\"abort resolving because of recursion\");\n\t\t\t\treturn callback(recursionError);\n\t\t\t}\n\t\t\tnewStack.add(stackEntry);\n\t\t} else {\n\t\t\tnewStack = new Set([stackEntry]);\n\t\t}\n\t\tthis.hooks.resolveStep.call(hook, request);\n\n\t\tif (hook.isUsed()) {\n\t\t\tconst innerContext = createInnerContext(\n\t\t\t\t{\n\t\t\t\t\tlog: resolveContext.log,\n\t\t\t\t\tfileDependencies: resolveContext.fileDependencies,\n\t\t\t\t\tcontextDependencies: resolveContext.contextDependencies,\n\t\t\t\t\tmissingDependencies: resolveContext.missingDependencies,\n\t\t\t\t\tstack: newStack\n\t\t\t\t},\n\t\t\t\tmessage\n\t\t\t);\n\t\t\treturn hook.callAsync(request, innerContext, (err, result) => {\n\t\t\t\tif (err) return callback(err);\n\t\t\t\tif (result) return callback(null, result);\n\t\t\t\tcallback();\n\t\t\t});\n\t\t} else {\n\t\t\tcallback();\n\t\t}\n\t}\n\n\t/**\n\t * @param {string} identifier identifier\n\t * @returns {ParsedIdentifier} parsed identifier\n\t */\n\tparse(identifier) {\n\t\tconst part = {\n\t\t\trequest: \"\",\n\t\t\tquery: \"\",\n\t\t\tfragment: \"\",\n\t\t\tmodule: false,\n\t\t\tdirectory: false,\n\t\t\tfile: false,\n\t\t\tinternal: false\n\t\t};\n\n\t\tconst parsedIdentifier = parseIdentifier(identifier);\n\n\t\tif (!parsedIdentifier) return part;\n\n\t\t[part.request, part.query, part.fragment] = parsedIdentifier;\n\n\t\tif (part.request.length > 0) {\n\t\t\tpart.internal = this.isPrivate(identifier);\n\t\t\tpart.module = this.isModule(part.request);\n\t\t\tpart.directory = this.isDirectory(part.request);\n\t\t\tif (part.directory) {\n\t\t\t\tpart.request = part.request.substr(0, part.request.length - 1);\n\t\t\t}\n\t\t}\n\n\t\treturn part;\n\t}\n\n\tisModule(path) {\n\t\treturn getType(path) === PathType.Normal;\n\t}\n\n\tisPrivate(path) {\n\t\treturn getType(path) === PathType.Internal;\n\t}\n\n\t/**\n\t * @param {string} path a path\n\t * @returns {boolean} true, if the path is a directory path\n\t */\n\tisDirectory(path) {\n\t\treturn path.endsWith(\"/\");\n\t}\n\n\tjoin(path, request) {\n\t\treturn join(path, request);\n\t}\n\n\tnormalize(path) {\n\t\treturn normalize(path);\n\t}\n}\n\nmodule.exports = Resolver;\n"]},"metadata":{},"sourceType":"script"}