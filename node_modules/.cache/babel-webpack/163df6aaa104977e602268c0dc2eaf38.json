{"ast":null,"code":"/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n(function (factory) {\n  if (typeof module === \"object\" && typeof module.exports === \"object\") {\n    var v = factory(require, exports);\n    if (v !== undefined) module.exports = v;\n  } else if (typeof define === \"function\" && define.amd) {\n    define(\"@angular/compiler/src/i18n/serializers/xmb\", [\"require\", \"exports\", \"tslib\", \"@angular/compiler/src/i18n/digest\", \"@angular/compiler/src/i18n/serializers/serializer\", \"@angular/compiler/src/i18n/serializers/xml_helper\"], factory);\n  }\n})(function (require, exports) {\n  \"use strict\";\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.toPublicName = exports.digest = exports.Xmb = void 0;\n\n  var tslib_1 = require(\"tslib\");\n\n  var digest_1 = require(\"@angular/compiler/src/i18n/digest\");\n\n  var serializer_1 = require(\"@angular/compiler/src/i18n/serializers/serializer\");\n\n  var xml = require(\"@angular/compiler/src/i18n/serializers/xml_helper\");\n\n  var _MESSAGES_TAG = 'messagebundle';\n  var _MESSAGE_TAG = 'msg';\n  var _PLACEHOLDER_TAG = 'ph';\n  var _EXAMPLE_TAG = 'ex';\n  var _SOURCE_TAG = 'source';\n  var _DOCTYPE = \"<!ELEMENT messagebundle (msg)*>\\n<!ATTLIST messagebundle class CDATA #IMPLIED>\\n\\n<!ELEMENT msg (#PCDATA|ph|source)*>\\n<!ATTLIST msg id CDATA #IMPLIED>\\n<!ATTLIST msg seq CDATA #IMPLIED>\\n<!ATTLIST msg name CDATA #IMPLIED>\\n<!ATTLIST msg desc CDATA #IMPLIED>\\n<!ATTLIST msg meaning CDATA #IMPLIED>\\n<!ATTLIST msg obsolete (obsolete) #IMPLIED>\\n<!ATTLIST msg xml:space (default|preserve) \\\"default\\\">\\n<!ATTLIST msg is_hidden CDATA #IMPLIED>\\n\\n<!ELEMENT source (#PCDATA)>\\n\\n<!ELEMENT ph (#PCDATA|ex)*>\\n<!ATTLIST ph name CDATA #REQUIRED>\\n\\n<!ELEMENT ex (#PCDATA)>\";\n\n  var Xmb =\n  /** @class */\n  function (_super) {\n    tslib_1.__extends(Xmb, _super);\n\n    function Xmb() {\n      return _super !== null && _super.apply(this, arguments) || this;\n    }\n\n    Xmb.prototype.write = function (messages, locale) {\n      var exampleVisitor = new ExampleVisitor();\n      var visitor = new _Visitor();\n      var rootNode = new xml.Tag(_MESSAGES_TAG);\n      messages.forEach(function (message) {\n        var attrs = {\n          id: message.id\n        };\n\n        if (message.description) {\n          attrs['desc'] = message.description;\n        }\n\n        if (message.meaning) {\n          attrs['meaning'] = message.meaning;\n        }\n\n        var sourceTags = [];\n        message.sources.forEach(function (source) {\n          sourceTags.push(new xml.Tag(_SOURCE_TAG, {}, [new xml.Text(source.filePath + \":\" + source.startLine + (source.endLine !== source.startLine ? ',' + source.endLine : ''))]));\n        });\n        rootNode.children.push(new xml.CR(2), new xml.Tag(_MESSAGE_TAG, attrs, tslib_1.__spread(sourceTags, visitor.serialize(message.nodes))));\n      });\n      rootNode.children.push(new xml.CR());\n      return xml.serialize([new xml.Declaration({\n        version: '1.0',\n        encoding: 'UTF-8'\n      }), new xml.CR(), new xml.Doctype(_MESSAGES_TAG, _DOCTYPE), new xml.CR(), exampleVisitor.addDefaultExamples(rootNode), new xml.CR()]);\n    };\n\n    Xmb.prototype.load = function (content, url) {\n      throw new Error('Unsupported');\n    };\n\n    Xmb.prototype.digest = function (message) {\n      return digest(message);\n    };\n\n    Xmb.prototype.createNameMapper = function (message) {\n      return new serializer_1.SimplePlaceholderMapper(message, toPublicName);\n    };\n\n    return Xmb;\n  }(serializer_1.Serializer);\n\n  exports.Xmb = Xmb;\n\n  var _Visitor =\n  /** @class */\n  function () {\n    function _Visitor() {}\n\n    _Visitor.prototype.visitText = function (text, context) {\n      return [new xml.Text(text.value)];\n    };\n\n    _Visitor.prototype.visitContainer = function (container, context) {\n      var _this = this;\n\n      var nodes = [];\n      container.children.forEach(function (node) {\n        return nodes.push.apply(nodes, tslib_1.__spread(node.visit(_this)));\n      });\n      return nodes;\n    };\n\n    _Visitor.prototype.visitIcu = function (icu, context) {\n      var _this = this;\n\n      var nodes = [new xml.Text(\"{\" + icu.expressionPlaceholder + \", \" + icu.type + \", \")];\n      Object.keys(icu.cases).forEach(function (c) {\n        nodes.push.apply(nodes, tslib_1.__spread([new xml.Text(c + \" {\")], icu.cases[c].visit(_this), [new xml.Text(\"} \")]));\n      });\n      nodes.push(new xml.Text(\"}\"));\n      return nodes;\n    };\n\n    _Visitor.prototype.visitTagPlaceholder = function (ph, context) {\n      var startTagAsText = new xml.Text(\"<\" + ph.tag + \">\");\n      var startEx = new xml.Tag(_EXAMPLE_TAG, {}, [startTagAsText]); // TC requires PH to have a non empty EX, and uses the text node to show the \"original\" value.\n\n      var startTagPh = new xml.Tag(_PLACEHOLDER_TAG, {\n        name: ph.startName\n      }, [startEx, startTagAsText]);\n\n      if (ph.isVoid) {\n        // void tags have no children nor closing tags\n        return [startTagPh];\n      }\n\n      var closeTagAsText = new xml.Text(\"</\" + ph.tag + \">\");\n      var closeEx = new xml.Tag(_EXAMPLE_TAG, {}, [closeTagAsText]); // TC requires PH to have a non empty EX, and uses the text node to show the \"original\" value.\n\n      var closeTagPh = new xml.Tag(_PLACEHOLDER_TAG, {\n        name: ph.closeName\n      }, [closeEx, closeTagAsText]);\n      return tslib_1.__spread([startTagPh], this.serialize(ph.children), [closeTagPh]);\n    };\n\n    _Visitor.prototype.visitPlaceholder = function (ph, context) {\n      var interpolationAsText = new xml.Text(\"{{\" + ph.value + \"}}\"); // Example tag needs to be not-empty for TC.\n\n      var exTag = new xml.Tag(_EXAMPLE_TAG, {}, [interpolationAsText]);\n      return [// TC requires PH to have a non empty EX, and uses the text node to show the \"original\" value.\n      new xml.Tag(_PLACEHOLDER_TAG, {\n        name: ph.name\n      }, [exTag, interpolationAsText])];\n    };\n\n    _Visitor.prototype.visitIcuPlaceholder = function (ph, context) {\n      var icuExpression = ph.value.expression;\n      var icuType = ph.value.type;\n      var icuCases = Object.keys(ph.value.cases).map(function (value) {\n        return value + ' {...}';\n      }).join(' ');\n      var icuAsText = new xml.Text(\"{\" + icuExpression + \", \" + icuType + \", \" + icuCases + \"}\");\n      var exTag = new xml.Tag(_EXAMPLE_TAG, {}, [icuAsText]);\n      return [// TC requires PH to have a non empty EX, and uses the text node to show the \"original\" value.\n      new xml.Tag(_PLACEHOLDER_TAG, {\n        name: ph.name\n      }, [exTag, icuAsText])];\n    };\n\n    _Visitor.prototype.serialize = function (nodes) {\n      var _this = this;\n\n      return [].concat.apply([], tslib_1.__spread(nodes.map(function (node) {\n        return node.visit(_this);\n      })));\n    };\n\n    return _Visitor;\n  }();\n\n  function digest(message) {\n    return digest_1.decimalDigest(message);\n  }\n\n  exports.digest = digest; // TC requires at least one non-empty example on placeholders\n\n  var ExampleVisitor =\n  /** @class */\n  function () {\n    function ExampleVisitor() {}\n\n    ExampleVisitor.prototype.addDefaultExamples = function (node) {\n      node.visit(this);\n      return node;\n    };\n\n    ExampleVisitor.prototype.visitTag = function (tag) {\n      var _this = this;\n\n      if (tag.name === _PLACEHOLDER_TAG) {\n        if (!tag.children || tag.children.length == 0) {\n          var exText = new xml.Text(tag.attrs['name'] || '...');\n          tag.children = [new xml.Tag(_EXAMPLE_TAG, {}, [exText])];\n        }\n      } else if (tag.children) {\n        tag.children.forEach(function (node) {\n          return node.visit(_this);\n        });\n      }\n    };\n\n    ExampleVisitor.prototype.visitText = function (text) {};\n\n    ExampleVisitor.prototype.visitDeclaration = function (decl) {};\n\n    ExampleVisitor.prototype.visitDoctype = function (doctype) {};\n\n    return ExampleVisitor;\n  }(); // XMB/XTB placeholders can only contain A-Z, 0-9 and _\n\n\n  function toPublicName(internalName) {\n    return internalName.toUpperCase().replace(/[^A-Z0-9_]/g, '_');\n  }\n\n  exports.toPublicName = toPublicName;\n});","map":{"version":3,"sources":["../../../../../../../../packages/compiler/src/i18n/serializers/xmb.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {decimalDigest} from '../digest';\nimport * as i18n from '../i18n_ast';\n\nimport {PlaceholderMapper, Serializer, SimplePlaceholderMapper} from './serializer';\nimport * as xml from './xml_helper';\n\nconst _MESSAGES_TAG = 'messagebundle';\nconst _MESSAGE_TAG = 'msg';\nconst _PLACEHOLDER_TAG = 'ph';\nconst _EXAMPLE_TAG = 'ex';\nconst _SOURCE_TAG = 'source';\n\nconst _DOCTYPE = `<!ELEMENT messagebundle (msg)*>\n<!ATTLIST messagebundle class CDATA #IMPLIED>\n\n<!ELEMENT msg (#PCDATA|ph|source)*>\n<!ATTLIST msg id CDATA #IMPLIED>\n<!ATTLIST msg seq CDATA #IMPLIED>\n<!ATTLIST msg name CDATA #IMPLIED>\n<!ATTLIST msg desc CDATA #IMPLIED>\n<!ATTLIST msg meaning CDATA #IMPLIED>\n<!ATTLIST msg obsolete (obsolete) #IMPLIED>\n<!ATTLIST msg xml:space (default|preserve) \"default\">\n<!ATTLIST msg is_hidden CDATA #IMPLIED>\n\n<!ELEMENT source (#PCDATA)>\n\n<!ELEMENT ph (#PCDATA|ex)*>\n<!ATTLIST ph name CDATA #REQUIRED>\n\n<!ELEMENT ex (#PCDATA)>`;\n\nexport class Xmb extends Serializer {\n  write(messages: i18n.Message[], locale: string|null): string {\n    const exampleVisitor = new ExampleVisitor();\n    const visitor = new _Visitor();\n    let rootNode = new xml.Tag(_MESSAGES_TAG);\n\n    messages.forEach(message => {\n      const attrs: {[k: string]: string} = {id: message.id};\n\n      if (message.description) {\n        attrs['desc'] = message.description;\n      }\n\n      if (message.meaning) {\n        attrs['meaning'] = message.meaning;\n      }\n\n      let sourceTags: xml.Tag[] = [];\n      message.sources.forEach((source: i18n.MessageSpan) => {\n        sourceTags.push(new xml.Tag(\n            _SOURCE_TAG, {},\n            [new xml.Text(`${source.filePath}:${source.startLine}${\n                source.endLine !== source.startLine ? ',' + source.endLine : ''}`)]));\n      });\n\n      rootNode.children.push(\n          new xml.CR(2),\n          new xml.Tag(_MESSAGE_TAG, attrs, [...sourceTags, ...visitor.serialize(message.nodes)]));\n    });\n\n    rootNode.children.push(new xml.CR());\n\n    return xml.serialize([\n      new xml.Declaration({version: '1.0', encoding: 'UTF-8'}),\n      new xml.CR(),\n      new xml.Doctype(_MESSAGES_TAG, _DOCTYPE),\n      new xml.CR(),\n      exampleVisitor.addDefaultExamples(rootNode),\n      new xml.CR(),\n    ]);\n  }\n\n  load(content: string, url: string):\n      {locale: string, i18nNodesByMsgId: {[msgId: string]: i18n.Node[]}} {\n    throw new Error('Unsupported');\n  }\n\n  digest(message: i18n.Message): string {\n    return digest(message);\n  }\n\n\n  createNameMapper(message: i18n.Message): PlaceholderMapper {\n    return new SimplePlaceholderMapper(message, toPublicName);\n  }\n}\n\nclass _Visitor implements i18n.Visitor {\n  visitText(text: i18n.Text, context?: any): xml.Node[] {\n    return [new xml.Text(text.value)];\n  }\n\n  visitContainer(container: i18n.Container, context: any): xml.Node[] {\n    const nodes: xml.Node[] = [];\n    container.children.forEach((node: i18n.Node) => nodes.push(...node.visit(this)));\n    return nodes;\n  }\n\n  visitIcu(icu: i18n.Icu, context?: any): xml.Node[] {\n    const nodes = [new xml.Text(`{${icu.expressionPlaceholder}, ${icu.type}, `)];\n\n    Object.keys(icu.cases).forEach((c: string) => {\n      nodes.push(new xml.Text(`${c} {`), ...icu.cases[c].visit(this), new xml.Text(`} `));\n    });\n\n    nodes.push(new xml.Text(`}`));\n\n    return nodes;\n  }\n\n  visitTagPlaceholder(ph: i18n.TagPlaceholder, context?: any): xml.Node[] {\n    const startTagAsText = new xml.Text(`<${ph.tag}>`);\n    const startEx = new xml.Tag(_EXAMPLE_TAG, {}, [startTagAsText]);\n    // TC requires PH to have a non empty EX, and uses the text node to show the \"original\" value.\n    const startTagPh =\n        new xml.Tag(_PLACEHOLDER_TAG, {name: ph.startName}, [startEx, startTagAsText]);\n    if (ph.isVoid) {\n      // void tags have no children nor closing tags\n      return [startTagPh];\n    }\n\n    const closeTagAsText = new xml.Text(`</${ph.tag}>`);\n    const closeEx = new xml.Tag(_EXAMPLE_TAG, {}, [closeTagAsText]);\n    // TC requires PH to have a non empty EX, and uses the text node to show the \"original\" value.\n    const closeTagPh =\n        new xml.Tag(_PLACEHOLDER_TAG, {name: ph.closeName}, [closeEx, closeTagAsText]);\n\n    return [startTagPh, ...this.serialize(ph.children), closeTagPh];\n  }\n\n  visitPlaceholder(ph: i18n.Placeholder, context?: any): xml.Node[] {\n    const interpolationAsText = new xml.Text(`{{${ph.value}}}`);\n    // Example tag needs to be not-empty for TC.\n    const exTag = new xml.Tag(_EXAMPLE_TAG, {}, [interpolationAsText]);\n    return [\n      // TC requires PH to have a non empty EX, and uses the text node to show the \"original\" value.\n      new xml.Tag(_PLACEHOLDER_TAG, {name: ph.name}, [exTag, interpolationAsText])\n    ];\n  }\n\n  visitIcuPlaceholder(ph: i18n.IcuPlaceholder, context?: any): xml.Node[] {\n    const icuExpression = ph.value.expression;\n    const icuType = ph.value.type;\n    const icuCases = Object.keys(ph.value.cases).map((value: string) => value + ' {...}').join(' ');\n    const icuAsText = new xml.Text(`{${icuExpression}, ${icuType}, ${icuCases}}`);\n    const exTag = new xml.Tag(_EXAMPLE_TAG, {}, [icuAsText]);\n    return [\n      // TC requires PH to have a non empty EX, and uses the text node to show the \"original\" value.\n      new xml.Tag(_PLACEHOLDER_TAG, {name: ph.name}, [exTag, icuAsText])\n    ];\n  }\n\n  serialize(nodes: i18n.Node[]): xml.Node[] {\n    return [].concat(...nodes.map(node => node.visit(this)));\n  }\n}\n\nexport function digest(message: i18n.Message): string {\n  return decimalDigest(message);\n}\n\n// TC requires at least one non-empty example on placeholders\nclass ExampleVisitor implements xml.IVisitor {\n  addDefaultExamples(node: xml.Node): xml.Node {\n    node.visit(this);\n    return node;\n  }\n\n  visitTag(tag: xml.Tag): void {\n    if (tag.name === _PLACEHOLDER_TAG) {\n      if (!tag.children || tag.children.length == 0) {\n        const exText = new xml.Text(tag.attrs['name'] || '...');\n        tag.children = [new xml.Tag(_EXAMPLE_TAG, {}, [exText])];\n      }\n    } else if (tag.children) {\n      tag.children.forEach(node => node.visit(this));\n    }\n  }\n\n  visitText(text: xml.Text): void {}\n  visitDeclaration(decl: xml.Declaration): void {}\n  visitDoctype(doctype: xml.Doctype): void {}\n}\n\n// XMB/XTB placeholders can only contain A-Z, 0-9 and _\nexport function toPublicName(internalName: string): string {\n  return internalName.toUpperCase().replace(/[^A-Z0-9_]/g, '_');\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}