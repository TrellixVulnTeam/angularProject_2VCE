{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nvar _classCallCheck = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/createClass\");\n\nvar path = require(\"path\");\n\nvar AMDRequireDependency = require(\"./AMDRequireDependency\");\n\nvar AMDRequireItemDependency = require(\"./AMDRequireItemDependency\");\n\nvar AMDRequireArrayDependency = require(\"./AMDRequireArrayDependency\");\n\nvar AMDRequireContextDependency = require(\"./AMDRequireContextDependency\");\n\nvar AMDDefineDependency = require(\"./AMDDefineDependency\");\n\nvar UnsupportedDependency = require(\"./UnsupportedDependency\");\n\nvar LocalModuleDependency = require(\"./LocalModuleDependency\");\n\nvar NullFactory = require(\"../NullFactory\");\n\nvar AMDRequireDependenciesBlockParserPlugin = require(\"./AMDRequireDependenciesBlockParserPlugin\");\n\nvar AMDDefineDependencyParserPlugin = require(\"./AMDDefineDependencyParserPlugin\");\n\nvar AliasPlugin = require(\"enhanced-resolve/lib/AliasPlugin\");\n\nvar ParserHelpers = require(\"../ParserHelpers\");\n\nvar AMDPlugin = /*#__PURE__*/function () {\n  function AMDPlugin(options, amdOptions) {\n    _classCallCheck(this, AMDPlugin);\n\n    this.amdOptions = amdOptions;\n    this.options = options;\n  }\n\n  _createClass(AMDPlugin, [{\n    key: \"apply\",\n    value: function apply(compiler) {\n      var options = this.options;\n      var amdOptions = this.amdOptions;\n      compiler.hooks.compilation.tap(\"AMDPlugin\", function (compilation, _ref) {\n        var contextModuleFactory = _ref.contextModuleFactory,\n            normalModuleFactory = _ref.normalModuleFactory;\n        compilation.dependencyFactories.set(AMDRequireDependency, new NullFactory());\n        compilation.dependencyTemplates.set(AMDRequireDependency, new AMDRequireDependency.Template());\n        compilation.dependencyFactories.set(AMDRequireItemDependency, normalModuleFactory);\n        compilation.dependencyTemplates.set(AMDRequireItemDependency, new AMDRequireItemDependency.Template());\n        compilation.dependencyFactories.set(AMDRequireArrayDependency, new NullFactory());\n        compilation.dependencyTemplates.set(AMDRequireArrayDependency, new AMDRequireArrayDependency.Template());\n        compilation.dependencyFactories.set(AMDRequireContextDependency, contextModuleFactory);\n        compilation.dependencyTemplates.set(AMDRequireContextDependency, new AMDRequireContextDependency.Template());\n        compilation.dependencyFactories.set(AMDDefineDependency, new NullFactory());\n        compilation.dependencyTemplates.set(AMDDefineDependency, new AMDDefineDependency.Template());\n        compilation.dependencyFactories.set(UnsupportedDependency, new NullFactory());\n        compilation.dependencyTemplates.set(UnsupportedDependency, new UnsupportedDependency.Template());\n        compilation.dependencyFactories.set(LocalModuleDependency, new NullFactory());\n        compilation.dependencyTemplates.set(LocalModuleDependency, new LocalModuleDependency.Template());\n\n        var handler = function handler(parser, parserOptions) {\n          if (parserOptions.amd !== undefined && !parserOptions.amd) return;\n\n          var setExpressionToModule = function setExpressionToModule(outerExpr, module) {\n            parser.hooks.expression.for(outerExpr).tap(\"AMDPlugin\", function (expr) {\n              var dep = new AMDRequireItemDependency(module, expr.range);\n              dep.userRequest = outerExpr;\n              dep.loc = expr.loc;\n              parser.state.current.addDependency(dep);\n              return true;\n            });\n          };\n\n          new AMDRequireDependenciesBlockParserPlugin(options).apply(parser);\n          new AMDDefineDependencyParserPlugin(options).apply(parser);\n          setExpressionToModule(\"require.amd\", \"!!webpack amd options\");\n          setExpressionToModule(\"define.amd\", \"!!webpack amd options\");\n          setExpressionToModule(\"define\", \"!!webpack amd define\");\n          parser.hooks.expression.for(\"__webpack_amd_options__\").tap(\"AMDPlugin\", function () {\n            return parser.state.current.addVariable(\"__webpack_amd_options__\", JSON.stringify(amdOptions));\n          });\n          parser.hooks.evaluateTypeof.for(\"define.amd\").tap(\"AMDPlugin\", ParserHelpers.evaluateToString(typeof amdOptions));\n          parser.hooks.evaluateTypeof.for(\"require.amd\").tap(\"AMDPlugin\", ParserHelpers.evaluateToString(typeof amdOptions));\n          parser.hooks.evaluateIdentifier.for(\"define.amd\").tap(\"AMDPlugin\", ParserHelpers.evaluateToIdentifier(\"define.amd\", true));\n          parser.hooks.evaluateIdentifier.for(\"require.amd\").tap(\"AMDPlugin\", ParserHelpers.evaluateToIdentifier(\"require.amd\", true));\n          parser.hooks.typeof.for(\"define\").tap(\"AMDPlugin\", ParserHelpers.toConstantDependency(parser, JSON.stringify(\"function\")));\n          parser.hooks.evaluateTypeof.for(\"define\").tap(\"AMDPlugin\", ParserHelpers.evaluateToString(\"function\"));\n          parser.hooks.canRename.for(\"define\").tap(\"AMDPlugin\", ParserHelpers.approve);\n          parser.hooks.rename.for(\"define\").tap(\"AMDPlugin\", function (expr) {\n            var dep = new AMDRequireItemDependency(\"!!webpack amd define\", expr.range);\n            dep.userRequest = \"define\";\n            dep.loc = expr.loc;\n            parser.state.current.addDependency(dep);\n            return false;\n          });\n          parser.hooks.typeof.for(\"require\").tap(\"AMDPlugin\", ParserHelpers.toConstantDependency(parser, JSON.stringify(\"function\")));\n          parser.hooks.evaluateTypeof.for(\"require\").tap(\"AMDPlugin\", ParserHelpers.evaluateToString(\"function\"));\n        };\n\n        normalModuleFactory.hooks.parser.for(\"javascript/auto\").tap(\"AMDPlugin\", handler);\n        normalModuleFactory.hooks.parser.for(\"javascript/dynamic\").tap(\"AMDPlugin\", handler);\n      });\n      compiler.hooks.afterResolvers.tap(\"AMDPlugin\", function () {\n        compiler.resolverFactory.hooks.resolver.for(\"normal\").tap(\"AMDPlugin\", function (resolver) {\n          new AliasPlugin(\"described-resolve\", {\n            name: \"amdefine\",\n            alias: path.join(__dirname, \"..\", \"..\", \"buildin\", \"amd-define.js\")\n          }, \"resolve\").apply(resolver);\n          new AliasPlugin(\"described-resolve\", {\n            name: \"webpack amd options\",\n            alias: path.join(__dirname, \"..\", \"..\", \"buildin\", \"amd-options.js\")\n          }, \"resolve\").apply(resolver);\n          new AliasPlugin(\"described-resolve\", {\n            name: \"webpack amd define\",\n            alias: path.join(__dirname, \"..\", \"..\", \"buildin\", \"amd-define.js\")\n          }, \"resolve\").apply(resolver);\n        });\n      });\n    }\n  }]);\n\n  return AMDPlugin;\n}();\n\nmodule.exports = AMDPlugin;","map":{"version":3,"sources":["/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/webpack/lib/dependencies/AMDPlugin.js"],"names":["path","require","AMDRequireDependency","AMDRequireItemDependency","AMDRequireArrayDependency","AMDRequireContextDependency","AMDDefineDependency","UnsupportedDependency","LocalModuleDependency","NullFactory","AMDRequireDependenciesBlockParserPlugin","AMDDefineDependencyParserPlugin","AliasPlugin","ParserHelpers","AMDPlugin","options","amdOptions","compiler","hooks","compilation","tap","contextModuleFactory","normalModuleFactory","dependencyFactories","set","dependencyTemplates","Template","handler","parser","parserOptions","amd","undefined","setExpressionToModule","outerExpr","module","expression","for","expr","dep","range","userRequest","loc","state","current","addDependency","apply","addVariable","JSON","stringify","evaluateTypeof","evaluateToString","evaluateIdentifier","evaluateToIdentifier","typeof","toConstantDependency","canRename","approve","rename","afterResolvers","resolverFactory","resolver","name","alias","join","__dirname","exports"],"mappings":"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","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst path = require(\"path\");\nconst AMDRequireDependency = require(\"./AMDRequireDependency\");\nconst AMDRequireItemDependency = require(\"./AMDRequireItemDependency\");\nconst AMDRequireArrayDependency = require(\"./AMDRequireArrayDependency\");\nconst AMDRequireContextDependency = require(\"./AMDRequireContextDependency\");\nconst AMDDefineDependency = require(\"./AMDDefineDependency\");\nconst UnsupportedDependency = require(\"./UnsupportedDependency\");\nconst LocalModuleDependency = require(\"./LocalModuleDependency\");\n\nconst NullFactory = require(\"../NullFactory\");\n\nconst AMDRequireDependenciesBlockParserPlugin = require(\"./AMDRequireDependenciesBlockParserPlugin\");\nconst AMDDefineDependencyParserPlugin = require(\"./AMDDefineDependencyParserPlugin\");\n\nconst AliasPlugin = require(\"enhanced-resolve/lib/AliasPlugin\");\n\nconst ParserHelpers = require(\"../ParserHelpers\");\n\nclass AMDPlugin {\n\tconstructor(options, amdOptions) {\n\t\tthis.amdOptions = amdOptions;\n\t\tthis.options = options;\n\t}\n\n\tapply(compiler) {\n\t\tconst options = this.options;\n\t\tconst amdOptions = this.amdOptions;\n\t\tcompiler.hooks.compilation.tap(\n\t\t\t\"AMDPlugin\",\n\t\t\t(compilation, { contextModuleFactory, normalModuleFactory }) => {\n\t\t\t\tcompilation.dependencyFactories.set(\n\t\t\t\t\tAMDRequireDependency,\n\t\t\t\t\tnew NullFactory()\n\t\t\t\t);\n\t\t\t\tcompilation.dependencyTemplates.set(\n\t\t\t\t\tAMDRequireDependency,\n\t\t\t\t\tnew AMDRequireDependency.Template()\n\t\t\t\t);\n\n\t\t\t\tcompilation.dependencyFactories.set(\n\t\t\t\t\tAMDRequireItemDependency,\n\t\t\t\t\tnormalModuleFactory\n\t\t\t\t);\n\t\t\t\tcompilation.dependencyTemplates.set(\n\t\t\t\t\tAMDRequireItemDependency,\n\t\t\t\t\tnew AMDRequireItemDependency.Template()\n\t\t\t\t);\n\n\t\t\t\tcompilation.dependencyFactories.set(\n\t\t\t\t\tAMDRequireArrayDependency,\n\t\t\t\t\tnew NullFactory()\n\t\t\t\t);\n\t\t\t\tcompilation.dependencyTemplates.set(\n\t\t\t\t\tAMDRequireArrayDependency,\n\t\t\t\t\tnew AMDRequireArrayDependency.Template()\n\t\t\t\t);\n\n\t\t\t\tcompilation.dependencyFactories.set(\n\t\t\t\t\tAMDRequireContextDependency,\n\t\t\t\t\tcontextModuleFactory\n\t\t\t\t);\n\t\t\t\tcompilation.dependencyTemplates.set(\n\t\t\t\t\tAMDRequireContextDependency,\n\t\t\t\t\tnew AMDRequireContextDependency.Template()\n\t\t\t\t);\n\n\t\t\t\tcompilation.dependencyFactories.set(\n\t\t\t\t\tAMDDefineDependency,\n\t\t\t\t\tnew NullFactory()\n\t\t\t\t);\n\t\t\t\tcompilation.dependencyTemplates.set(\n\t\t\t\t\tAMDDefineDependency,\n\t\t\t\t\tnew AMDDefineDependency.Template()\n\t\t\t\t);\n\n\t\t\t\tcompilation.dependencyFactories.set(\n\t\t\t\t\tUnsupportedDependency,\n\t\t\t\t\tnew NullFactory()\n\t\t\t\t);\n\t\t\t\tcompilation.dependencyTemplates.set(\n\t\t\t\t\tUnsupportedDependency,\n\t\t\t\t\tnew UnsupportedDependency.Template()\n\t\t\t\t);\n\n\t\t\t\tcompilation.dependencyFactories.set(\n\t\t\t\t\tLocalModuleDependency,\n\t\t\t\t\tnew NullFactory()\n\t\t\t\t);\n\t\t\t\tcompilation.dependencyTemplates.set(\n\t\t\t\t\tLocalModuleDependency,\n\t\t\t\t\tnew LocalModuleDependency.Template()\n\t\t\t\t);\n\n\t\t\t\tconst handler = (parser, parserOptions) => {\n\t\t\t\t\tif (parserOptions.amd !== undefined && !parserOptions.amd) return;\n\n\t\t\t\t\tconst setExpressionToModule = (outerExpr, module) => {\n\t\t\t\t\t\tparser.hooks.expression.for(outerExpr).tap(\"AMDPlugin\", expr => {\n\t\t\t\t\t\t\tconst dep = new AMDRequireItemDependency(module, expr.range);\n\t\t\t\t\t\t\tdep.userRequest = outerExpr;\n\t\t\t\t\t\t\tdep.loc = expr.loc;\n\t\t\t\t\t\t\tparser.state.current.addDependency(dep);\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t});\n\t\t\t\t\t};\n\n\t\t\t\t\tnew AMDRequireDependenciesBlockParserPlugin(options).apply(parser);\n\t\t\t\t\tnew AMDDefineDependencyParserPlugin(options).apply(parser);\n\n\t\t\t\t\tsetExpressionToModule(\"require.amd\", \"!!webpack amd options\");\n\t\t\t\t\tsetExpressionToModule(\"define.amd\", \"!!webpack amd options\");\n\t\t\t\t\tsetExpressionToModule(\"define\", \"!!webpack amd define\");\n\n\t\t\t\t\tparser.hooks.expression\n\t\t\t\t\t\t.for(\"__webpack_amd_options__\")\n\t\t\t\t\t\t.tap(\"AMDPlugin\", () =>\n\t\t\t\t\t\t\tparser.state.current.addVariable(\n\t\t\t\t\t\t\t\t\"__webpack_amd_options__\",\n\t\t\t\t\t\t\t\tJSON.stringify(amdOptions)\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t);\n\t\t\t\t\tparser.hooks.evaluateTypeof\n\t\t\t\t\t\t.for(\"define.amd\")\n\t\t\t\t\t\t.tap(\n\t\t\t\t\t\t\t\"AMDPlugin\",\n\t\t\t\t\t\t\tParserHelpers.evaluateToString(typeof amdOptions)\n\t\t\t\t\t\t);\n\t\t\t\t\tparser.hooks.evaluateTypeof\n\t\t\t\t\t\t.for(\"require.amd\")\n\t\t\t\t\t\t.tap(\n\t\t\t\t\t\t\t\"AMDPlugin\",\n\t\t\t\t\t\t\tParserHelpers.evaluateToString(typeof amdOptions)\n\t\t\t\t\t\t);\n\t\t\t\t\tparser.hooks.evaluateIdentifier\n\t\t\t\t\t\t.for(\"define.amd\")\n\t\t\t\t\t\t.tap(\n\t\t\t\t\t\t\t\"AMDPlugin\",\n\t\t\t\t\t\t\tParserHelpers.evaluateToIdentifier(\"define.amd\", true)\n\t\t\t\t\t\t);\n\t\t\t\t\tparser.hooks.evaluateIdentifier\n\t\t\t\t\t\t.for(\"require.amd\")\n\t\t\t\t\t\t.tap(\n\t\t\t\t\t\t\t\"AMDPlugin\",\n\t\t\t\t\t\t\tParserHelpers.evaluateToIdentifier(\"require.amd\", true)\n\t\t\t\t\t\t);\n\t\t\t\t\tparser.hooks.typeof\n\t\t\t\t\t\t.for(\"define\")\n\t\t\t\t\t\t.tap(\n\t\t\t\t\t\t\t\"AMDPlugin\",\n\t\t\t\t\t\t\tParserHelpers.toConstantDependency(\n\t\t\t\t\t\t\t\tparser,\n\t\t\t\t\t\t\t\tJSON.stringify(\"function\")\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t);\n\t\t\t\t\tparser.hooks.evaluateTypeof\n\t\t\t\t\t\t.for(\"define\")\n\t\t\t\t\t\t.tap(\"AMDPlugin\", ParserHelpers.evaluateToString(\"function\"));\n\t\t\t\t\tparser.hooks.canRename\n\t\t\t\t\t\t.for(\"define\")\n\t\t\t\t\t\t.tap(\"AMDPlugin\", ParserHelpers.approve);\n\t\t\t\t\tparser.hooks.rename.for(\"define\").tap(\"AMDPlugin\", expr => {\n\t\t\t\t\t\tconst dep = new AMDRequireItemDependency(\n\t\t\t\t\t\t\t\"!!webpack amd define\",\n\t\t\t\t\t\t\texpr.range\n\t\t\t\t\t\t);\n\t\t\t\t\t\tdep.userRequest = \"define\";\n\t\t\t\t\t\tdep.loc = expr.loc;\n\t\t\t\t\t\tparser.state.current.addDependency(dep);\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t});\n\t\t\t\t\tparser.hooks.typeof\n\t\t\t\t\t\t.for(\"require\")\n\t\t\t\t\t\t.tap(\n\t\t\t\t\t\t\t\"AMDPlugin\",\n\t\t\t\t\t\t\tParserHelpers.toConstantDependency(\n\t\t\t\t\t\t\t\tparser,\n\t\t\t\t\t\t\t\tJSON.stringify(\"function\")\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t);\n\t\t\t\t\tparser.hooks.evaluateTypeof\n\t\t\t\t\t\t.for(\"require\")\n\t\t\t\t\t\t.tap(\"AMDPlugin\", ParserHelpers.evaluateToString(\"function\"));\n\t\t\t\t};\n\n\t\t\t\tnormalModuleFactory.hooks.parser\n\t\t\t\t\t.for(\"javascript/auto\")\n\t\t\t\t\t.tap(\"AMDPlugin\", handler);\n\t\t\t\tnormalModuleFactory.hooks.parser\n\t\t\t\t\t.for(\"javascript/dynamic\")\n\t\t\t\t\t.tap(\"AMDPlugin\", handler);\n\t\t\t}\n\t\t);\n\t\tcompiler.hooks.afterResolvers.tap(\"AMDPlugin\", () => {\n\t\t\tcompiler.resolverFactory.hooks.resolver\n\t\t\t\t.for(\"normal\")\n\t\t\t\t.tap(\"AMDPlugin\", resolver => {\n\t\t\t\t\tnew AliasPlugin(\n\t\t\t\t\t\t\"described-resolve\",\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: \"amdefine\",\n\t\t\t\t\t\t\talias: path.join(\n\t\t\t\t\t\t\t\t__dirname,\n\t\t\t\t\t\t\t\t\"..\",\n\t\t\t\t\t\t\t\t\"..\",\n\t\t\t\t\t\t\t\t\"buildin\",\n\t\t\t\t\t\t\t\t\"amd-define.js\"\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\"resolve\"\n\t\t\t\t\t).apply(resolver);\n\t\t\t\t\tnew AliasPlugin(\n\t\t\t\t\t\t\"described-resolve\",\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: \"webpack amd options\",\n\t\t\t\t\t\t\talias: path.join(\n\t\t\t\t\t\t\t\t__dirname,\n\t\t\t\t\t\t\t\t\"..\",\n\t\t\t\t\t\t\t\t\"..\",\n\t\t\t\t\t\t\t\t\"buildin\",\n\t\t\t\t\t\t\t\t\"amd-options.js\"\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\"resolve\"\n\t\t\t\t\t).apply(resolver);\n\t\t\t\t\tnew AliasPlugin(\n\t\t\t\t\t\t\"described-resolve\",\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: \"webpack amd define\",\n\t\t\t\t\t\t\talias: path.join(\n\t\t\t\t\t\t\t\t__dirname,\n\t\t\t\t\t\t\t\t\"..\",\n\t\t\t\t\t\t\t\t\"..\",\n\t\t\t\t\t\t\t\t\"buildin\",\n\t\t\t\t\t\t\t\t\"amd-define.js\"\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\"resolve\"\n\t\t\t\t\t).apply(resolver);\n\t\t\t\t});\n\t\t});\n\t}\n}\nmodule.exports = AMDPlugin;\n"]},"metadata":{},"sourceType":"script"}