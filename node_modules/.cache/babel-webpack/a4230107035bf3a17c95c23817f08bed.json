{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nvar _classCallCheck = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/createClass\");\n\nvar SingleEntryDependency = require(\"./dependencies/SingleEntryDependency\");\n/** @typedef {import(\"./Compiler\")} Compiler */\n\n\nvar SingleEntryPlugin = /*#__PURE__*/function () {\n  /**\n   * An entry plugin which will handle\n   * creation of the SingleEntryDependency\n   *\n   * @param {string} context context path\n   * @param {string} entry entry path\n   * @param {string} name entry key name\n   */\n  function SingleEntryPlugin(context, entry, name) {\n    _classCallCheck(this, SingleEntryPlugin);\n\n    this.context = context;\n    this.entry = entry;\n    this.name = name;\n  }\n  /**\n   * @param {Compiler} compiler the compiler instance\n   * @returns {void}\n   */\n\n\n  _createClass(SingleEntryPlugin, [{\n    key: \"apply\",\n    value: function apply(compiler) {\n      var _this = this;\n\n      compiler.hooks.compilation.tap(\"SingleEntryPlugin\", function (compilation, _ref) {\n        var normalModuleFactory = _ref.normalModuleFactory;\n        compilation.dependencyFactories.set(SingleEntryDependency, normalModuleFactory);\n      });\n      compiler.hooks.make.tapAsync(\"SingleEntryPlugin\", function (compilation, callback) {\n        var entry = _this.entry,\n            name = _this.name,\n            context = _this.context;\n        var dep = SingleEntryPlugin.createDependency(entry, name);\n        compilation.addEntry(context, dep, name, callback);\n      });\n    }\n    /**\n     * @param {string} entry entry request\n     * @param {string} name entry name\n     * @returns {SingleEntryDependency} the dependency\n     */\n\n  }], [{\n    key: \"createDependency\",\n    value: function createDependency(entry, name) {\n      var dep = new SingleEntryDependency(entry);\n      dep.loc = {\n        name: name\n      };\n      return dep;\n    }\n  }]);\n\n  return SingleEntryPlugin;\n}();\n\nmodule.exports = SingleEntryPlugin;","map":{"version":3,"sources":["/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/webpack/lib/SingleEntryPlugin.js"],"names":["SingleEntryDependency","require","SingleEntryPlugin","context","entry","name","compiler","hooks","compilation","tap","normalModuleFactory","dependencyFactories","set","make","tapAsync","callback","dep","createDependency","addEntry","loc","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;;;;;AACA,IAAMA,qBAAqB,GAAGC,OAAO,CAAC,sCAAD,CAArC;AAEA;;;IAEMC,iB;AACL;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACC,6BAAYC,OAAZ,EAAqBC,KAArB,EAA4BC,IAA5B,EAAkC;AAAA;;AACjC,SAAKF,OAAL,GAAeA,OAAf;AACA,SAAKC,KAAL,GAAaA,KAAb;AACA,SAAKC,IAAL,GAAYA,IAAZ;AACA;AAED;AACD;AACA;AACA;;;;;WACC,eAAMC,QAAN,EAAgB;AAAA;;AACfA,MAAAA,QAAQ,CAACC,KAAT,CAAeC,WAAf,CAA2BC,GAA3B,CACC,mBADD,EAEC,UAACD,WAAD,QAA0C;AAAA,YAA1BE,mBAA0B,QAA1BA,mBAA0B;AACzCF,QAAAA,WAAW,CAACG,mBAAZ,CAAgCC,GAAhC,CACCZ,qBADD,EAECU,mBAFD;AAIA,OAPF;AAUAJ,MAAAA,QAAQ,CAACC,KAAT,CAAeM,IAAf,CAAoBC,QAApB,CACC,mBADD,EAEC,UAACN,WAAD,EAAcO,QAAd,EAA2B;AAC1B,YAAQX,KAAR,GAAiC,KAAjC,CAAQA,KAAR;AAAA,YAAeC,IAAf,GAAiC,KAAjC,CAAeA,IAAf;AAAA,YAAqBF,OAArB,GAAiC,KAAjC,CAAqBA,OAArB;AAEA,YAAMa,GAAG,GAAGd,iBAAiB,CAACe,gBAAlB,CAAmCb,KAAnC,EAA0CC,IAA1C,CAAZ;AACAG,QAAAA,WAAW,CAACU,QAAZ,CAAqBf,OAArB,EAA8Ba,GAA9B,EAAmCX,IAAnC,EAAyCU,QAAzC;AACA,OAPF;AASA;AAED;AACD;AACA;AACA;AACA;;;;WACC,0BAAwBX,KAAxB,EAA+BC,IAA/B,EAAqC;AACpC,UAAMW,GAAG,GAAG,IAAIhB,qBAAJ,CAA0BI,KAA1B,CAAZ;AACAY,MAAAA,GAAG,CAACG,GAAJ,GAAU;AAAEd,QAAAA,IAAI,EAAJA;AAAF,OAAV;AACA,aAAOW,GAAP;AACA;;;;;;AAGFI,MAAM,CAACC,OAAP,GAAiBnB,iBAAjB","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\nconst SingleEntryDependency = require(\"./dependencies/SingleEntryDependency\");\n\n/** @typedef {import(\"./Compiler\")} Compiler */\n\nclass SingleEntryPlugin {\n\t/**\n\t * An entry plugin which will handle\n\t * creation of the SingleEntryDependency\n\t *\n\t * @param {string} context context path\n\t * @param {string} entry entry path\n\t * @param {string} name entry key name\n\t */\n\tconstructor(context, entry, name) {\n\t\tthis.context = context;\n\t\tthis.entry = entry;\n\t\tthis.name = name;\n\t}\n\n\t/**\n\t * @param {Compiler} compiler the compiler instance\n\t * @returns {void}\n\t */\n\tapply(compiler) {\n\t\tcompiler.hooks.compilation.tap(\n\t\t\t\"SingleEntryPlugin\",\n\t\t\t(compilation, { normalModuleFactory }) => {\n\t\t\t\tcompilation.dependencyFactories.set(\n\t\t\t\t\tSingleEntryDependency,\n\t\t\t\t\tnormalModuleFactory\n\t\t\t\t);\n\t\t\t}\n\t\t);\n\n\t\tcompiler.hooks.make.tapAsync(\n\t\t\t\"SingleEntryPlugin\",\n\t\t\t(compilation, callback) => {\n\t\t\t\tconst { entry, name, context } = this;\n\n\t\t\t\tconst dep = SingleEntryPlugin.createDependency(entry, name);\n\t\t\t\tcompilation.addEntry(context, dep, name, callback);\n\t\t\t}\n\t\t);\n\t}\n\n\t/**\n\t * @param {string} entry entry request\n\t * @param {string} name entry name\n\t * @returns {SingleEntryDependency} the dependency\n\t */\n\tstatic createDependency(entry, name) {\n\t\tconst dep = new SingleEntryDependency(entry);\n\t\tdep.loc = { name };\n\t\treturn dep;\n\t}\n}\n\nmodule.exports = SingleEntryPlugin;\n"]},"metadata":{},"sourceType":"script"}