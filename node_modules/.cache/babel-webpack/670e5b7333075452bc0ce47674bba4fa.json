{"ast":null,"code":"/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n(function (factory) {\n  if (typeof module === \"object\" && typeof module.exports === \"object\") {\n    var v = factory(require, exports);\n    if (v !== undefined) module.exports = v;\n  } else if (typeof define === \"function\" && define.amd) {\n    define(\"@angular/compiler-cli/src/ngtsc/shims/src/reference_tagger\", [\"require\", \"exports\", \"tslib\", \"@angular/compiler-cli/src/ngtsc/file_system\", \"@angular/compiler-cli/src/ngtsc/util/src/typescript\", \"@angular/compiler-cli/src/ngtsc/shims/src/expando\", \"@angular/compiler-cli/src/ngtsc/shims/src/util\"], factory);\n  }\n})(function (require, exports) {\n  \"use strict\";\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.ShimReferenceTagger = void 0;\n\n  var tslib_1 = require(\"tslib\");\n\n  var file_system_1 = require(\"@angular/compiler-cli/src/ngtsc/file_system\");\n\n  var typescript_1 = require(\"@angular/compiler-cli/src/ngtsc/util/src/typescript\");\n\n  var expando_1 = require(\"@angular/compiler-cli/src/ngtsc/shims/src/expando\");\n\n  var util_1 = require(\"@angular/compiler-cli/src/ngtsc/shims/src/util\");\n  /**\n   * Manipulates the `referencedFiles` property of `ts.SourceFile`s to add references to shim files\n   * for each original source file, causing the shims to be loaded into the program as well.\n   *\n   * `ShimReferenceTagger`s are intended to operate during program creation only.\n   */\n\n\n  var ShimReferenceTagger =\n  /** @class */\n  function () {\n    function ShimReferenceTagger(shimExtensions) {\n      /**\n       * Tracks which original files have been processed and had shims generated if necessary.\n       *\n       * This is used to avoid generating shims twice for the same file.\n       */\n      this.tagged = new Set();\n      /**\n       * Whether shim tagging is currently being performed.\n       */\n\n      this.enabled = true;\n      this.suffixes = shimExtensions.map(function (extension) {\n        return \".\" + extension + \".ts\";\n      });\n    }\n    /**\n     * Tag `sf` with any needed references if it's not a shim itself.\n     */\n\n\n    ShimReferenceTagger.prototype.tag = function (sf) {\n      var e_1, _a;\n\n      if (!this.enabled || sf.isDeclarationFile || expando_1.isShim(sf) || this.tagged.has(sf) || !typescript_1.isNonDeclarationTsPath(sf.fileName)) {\n        return;\n      }\n\n      var ext = expando_1.sfExtensionData(sf); // If this file has never been tagged before, capture its `referencedFiles` in the extension\n      // data.\n\n      if (ext.originalReferencedFiles === null) {\n        ext.originalReferencedFiles = sf.referencedFiles;\n      }\n\n      var referencedFiles = tslib_1.__spread(ext.originalReferencedFiles);\n\n      var sfPath = file_system_1.absoluteFromSourceFile(sf);\n\n      try {\n        for (var _b = tslib_1.__values(this.suffixes), _c = _b.next(); !_c.done; _c = _b.next()) {\n          var suffix = _c.value;\n          referencedFiles.push({\n            fileName: util_1.makeShimFileName(sfPath, suffix),\n            pos: 0,\n            end: 0\n          });\n        }\n      } catch (e_1_1) {\n        e_1 = {\n          error: e_1_1\n        };\n      } finally {\n        try {\n          if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n        } finally {\n          if (e_1) throw e_1.error;\n        }\n      }\n\n      ext.taggedReferenceFiles = referencedFiles;\n      sf.referencedFiles = referencedFiles;\n      this.tagged.add(sf);\n    };\n    /**\n     * Disable the `ShimReferenceTagger` and free memory associated with tracking tagged files.\n     */\n\n\n    ShimReferenceTagger.prototype.finalize = function () {\n      this.enabled = false;\n      this.tagged.clear();\n    };\n\n    return ShimReferenceTagger;\n  }();\n\n  exports.ShimReferenceTagger = ShimReferenceTagger;\n});","map":{"version":3,"sources":["../../../../../../../../../packages/compiler-cli/src/ngtsc/shims/src/reference_tagger.ts"],"names":[],"mappings":"AAAA;;;;;;AAMG;;;;;;;;;;;;;;;;;;AAIH,MAAA,aAAA,GAAA,OAAA,CAAA,6CAAA,CAAA;;AACA,MAAA,YAAA,GAAA,OAAA,CAAA,qDAAA,CAAA;;AAEA,MAAA,SAAA,GAAA,OAAA,CAAA,mDAAA,CAAA;;AACA,MAAA,MAAA,GAAA,OAAA,CAAA,gDAAA,CAAA;AAEA;;;;;AAKG;;;AACH,MAAA,mBAAA;AAAA;AAAA,cAAA;AAeE,aAAA,mBAAA,CAAY,cAAZ,EAAoC;AAZpC;;;;AAIG;AACK,WAAA,MAAA,GAAS,IAAI,GAAJ,EAAT;AAER;;AAEG;;AACK,WAAA,OAAA,GAAmB,IAAnB;AAGN,WAAK,QAAL,GAAgB,cAAc,CAAC,GAAf,CAAmB,UAAA,SAAA,EAAS;AAAI,eAAA,MAAI,SAAJ,GAAA,KAAA;AAAkB,OAAlD,CAAhB;AACD;AAED;;AAEG;;;AACH,IAAA,mBAAA,CAAA,SAAA,CAAA,GAAA,GAAA,UAAI,EAAJ,EAAqB;;;AACnB,UAAI,CAAC,KAAK,OAAN,IAAiB,EAAE,CAAC,iBAApB,IAAyC,SAAA,CAAA,MAAA,CAAO,EAAP,CAAzC,IAAuD,KAAK,MAAL,CAAY,GAAZ,CAAgB,EAAhB,CAAvD,IACA,CAAC,YAAA,CAAA,sBAAA,CAAuB,EAAE,CAAC,QAA1B,CADL,EAC0C;AACxC;AACD;;AAED,UAAM,GAAG,GAAG,SAAA,CAAA,eAAA,CAAgB,EAAhB,CAAZ,CANmB,CAQnB;AACA;;AACA,UAAI,GAAG,CAAC,uBAAJ,KAAgC,IAApC,EAA0C;AACxC,QAAA,GAAG,CAAC,uBAAJ,GAA8B,EAAE,CAAC,eAAjC;AACD;;AAED,UAAM,eAAe,GAAA,OAAA,CAAA,QAAA,CAAO,GAAG,CAAC,uBAAX,CAArB;;AAGA,UAAM,MAAM,GAAG,aAAA,CAAA,sBAAA,CAAuB,EAAvB,CAAf;;;AACA,aAAqB,IAAA,EAAA,GAAA,OAAA,CAAA,QAAA,CAAA,KAAK,QAAL,CAAA,EAAa,EAAA,GAAA,EAAA,CAAA,IAAA,EAAlC,EAAkC,CAAA,EAAA,CAAA,IAAlC,EAAkC,EAAA,GAAA,EAAA,CAAA,IAAA,EAAlC,EAAoC;AAA/B,cAAM,MAAM,GAAA,EAAA,CAAA,KAAZ;AACH,UAAA,eAAe,CAAC,IAAhB,CAAqB;AACnB,YAAA,QAAQ,EAAE,MAAA,CAAA,gBAAA,CAAiB,MAAjB,EAAyB,MAAzB,CADS;AAEnB,YAAA,GAAG,EAAE,CAFc;AAGnB,YAAA,GAAG,EAAE;AAHc,WAArB;AAKD;;;;;;;;;;;;;AAED,MAAA,GAAG,CAAC,oBAAJ,GAA2B,eAA3B;AACA,MAAA,EAAE,CAAC,eAAH,GAAqB,eAArB;AACA,WAAK,MAAL,CAAY,GAAZ,CAAgB,EAAhB;AACD,KA7BD;AA+BA;;AAEG;;;AACH,IAAA,mBAAA,CAAA,SAAA,CAAA,QAAA,GAAA,YAAA;AACE,WAAK,OAAL,GAAe,KAAf;AACA,WAAK,MAAL,CAAY,KAAZ;AACD,KAHD;;AAIF,WAAA,mBAAA;AAAC,GA5DD,EAAA;;AAAa,EAAA,OAAA,CAAA,mBAAA,GAAA,mBAAA","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport * as ts from 'typescript';\n\nimport {absoluteFromSourceFile} from '../../file_system';\nimport {isNonDeclarationTsPath} from '../../util/src/typescript';\n\nimport {isShim, sfExtensionData} from './expando';\nimport {makeShimFileName} from './util';\n\n/**\n * Manipulates the `referencedFiles` property of `ts.SourceFile`s to add references to shim files\n * for each original source file, causing the shims to be loaded into the program as well.\n *\n * `ShimReferenceTagger`s are intended to operate during program creation only.\n */\nexport class ShimReferenceTagger {\n  private suffixes: string[];\n\n  /**\n   * Tracks which original files have been processed and had shims generated if necessary.\n   *\n   * This is used to avoid generating shims twice for the same file.\n   */\n  private tagged = new Set<ts.SourceFile>();\n\n  /**\n   * Whether shim tagging is currently being performed.\n   */\n  private enabled: boolean = true;\n\n  constructor(shimExtensions: string[]) {\n    this.suffixes = shimExtensions.map(extension => `.${extension}.ts`);\n  }\n\n  /**\n   * Tag `sf` with any needed references if it's not a shim itself.\n   */\n  tag(sf: ts.SourceFile): void {\n    if (!this.enabled || sf.isDeclarationFile || isShim(sf) || this.tagged.has(sf) ||\n        !isNonDeclarationTsPath(sf.fileName)) {\n      return;\n    }\n\n    const ext = sfExtensionData(sf);\n\n    // If this file has never been tagged before, capture its `referencedFiles` in the extension\n    // data.\n    if (ext.originalReferencedFiles === null) {\n      ext.originalReferencedFiles = sf.referencedFiles;\n    }\n\n    const referencedFiles = [...ext.originalReferencedFiles];\n\n\n    const sfPath = absoluteFromSourceFile(sf);\n    for (const suffix of this.suffixes) {\n      referencedFiles.push({\n        fileName: makeShimFileName(sfPath, suffix),\n        pos: 0,\n        end: 0,\n      });\n    }\n\n    ext.taggedReferenceFiles = referencedFiles;\n    sf.referencedFiles = referencedFiles;\n    this.tagged.add(sf);\n  }\n\n  /**\n   * Disable the `ShimReferenceTagger` and free memory associated with tracking tagged files.\n   */\n  finalize(): void {\n    this.enabled = false;\n    this.tagged.clear();\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}