{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _assertThisInitialized = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/assertThisInitialized\");\n\nvar _inherits = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar SocketIO = require('socket.io');\n\nvar di = require('di');\n\nvar util = require('util');\n\nvar spawn = require('child_process').spawn;\n\nvar tmp = require('tmp');\n\nvar fs = require('fs');\n\nvar path = require('path');\n\nvar BundleUtils = require('./utils/bundle-utils');\n\nvar NetUtils = require('./utils/net-utils');\n\nvar root = global || window || this;\n\nvar cfg = require('./config');\n\nvar logger = require('./logger');\n\nvar constant = require('./constants');\n\nvar watcher = require('./watcher');\n\nvar plugin = require('./plugin');\n\nvar createServeFile = require('./web-server').createServeFile;\n\nvar createServeStaticFile = require('./web-server').createServeStaticFile;\n\nvar createFilesPromise = require('./web-server').createFilesPromise;\n\nvar createWebServer = require('./web-server').createWebServer;\n\nvar preprocessor = require('./preprocessor');\n\nvar Launcher = require('./launcher').Launcher;\n\nvar FileList = require('./file-list');\n\nvar reporter = require('./reporter');\n\nvar helper = require('./helper');\n\nvar events = require('./events');\n\nvar KarmaEventEmitter = events.EventEmitter;\n\nvar EventEmitter = require('events').EventEmitter;\n\nvar Executor = require('./executor');\n\nvar Browser = require('./browser');\n\nvar BrowserCollection = require('./browser_collection');\n\nvar EmitterWrapper = require('./emitter_wrapper');\n\nvar processWrapper = new EmitterWrapper(process);\n\nfunction createSocketIoServer(webServer, executor, config) {\n  var server = new SocketIO(webServer, {\n    // avoid destroying http upgrades from socket.io to get proxied websockets working\n    destroyUpgrade: false,\n    path: config.urlRoot + 'socket.io/',\n    transports: config.transports,\n    forceJSONP: config.forceJSONP,\n    // Default is 5000 in socket.io v2.x.\n    pingTimeout: config.pingTimeout || 5000\n  }); // hack to overcome circular dependency\n\n  executor.socketIoSockets = server.sockets;\n  return server;\n}\n\nvar Server = /*#__PURE__*/function (_KarmaEventEmitter) {\n  _inherits(Server, _KarmaEventEmitter);\n\n  var _super = _createSuper(Server);\n\n  function Server(cliOptions, done) {\n    var _this;\n\n    _classCallCheck(this, Server);\n\n    _this = _super.call(this);\n    logger.setupFromConfig(cliOptions);\n    _this.log = logger.create('karma-server');\n    _this.loadErrors = [];\n    var config = cfg.parseConfig(cliOptions.configFile, cliOptions);\n\n    _this.log.debug('Final config', util.inspect(config, false,\n    /** depth **/\n    null));\n\n    var modules = [{\n      helper: ['value', helper],\n      logger: ['value', logger],\n      done: ['value', done || process.exit],\n      emitter: ['value', _assertThisInitialized(_this)],\n      server: ['value', _assertThisInitialized(_this)],\n      watcher: ['value', watcher],\n      launcher: ['factory', Launcher.factory],\n      config: ['value', config],\n      preprocess: ['factory', preprocessor.createPriorityPreprocessor],\n      fileList: ['factory', FileList.factory],\n      webServer: ['factory', createWebServer],\n      serveFile: ['factory', createServeFile],\n      serveStaticFile: ['factory', createServeStaticFile],\n      filesPromise: ['factory', createFilesPromise],\n      socketServer: ['factory', createSocketIoServer],\n      executor: ['factory', Executor.factory],\n      // TODO(vojta): remove\n      customFileHandlers: ['value', []],\n      // TODO(vojta): remove, once karma-dart does not rely on it\n      customScriptTypes: ['value', []],\n      reporter: ['factory', reporter.createReporters],\n      capturedBrowsers: ['factory', BrowserCollection.factory],\n      args: ['value', {}],\n      timer: ['value', {\n        setTimeout: function (_setTimeout) {\n          function setTimeout() {\n            return _setTimeout.apply(this, arguments);\n          }\n\n          setTimeout.toString = function () {\n            return _setTimeout.toString();\n          };\n\n          return setTimeout;\n        }(function () {\n          return setTimeout.apply(root, arguments);\n        }),\n        clearTimeout: clearTimeout\n      }]\n    }];\n\n    _this.on('load_error', function (type, name) {\n      _this.log.debug(\"Registered a load error of type \".concat(type, \" with name \").concat(name));\n\n      _this.loadErrors.push([type, name]);\n    });\n\n    modules = modules.concat(plugin.resolve(config.plugins, _assertThisInitialized(_this)));\n    _this._injector = new di.Injector(modules);\n    return _this;\n  }\n\n  _createClass(Server, [{\n    key: \"dieOnError\",\n    value: function dieOnError(error) {\n      this.log.error(error);\n      process.exitCode = 1;\n      process.kill(process.pid, 'SIGINT');\n    }\n  }, {\n    key: \"start\",\n    value: function () {\n      var _start2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var _this2 = this;\n\n        var config;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                config = this.get('config');\n                _context.prev = 1;\n                _context.next = 4;\n                return Promise.all([BundleUtils.bundleResourceIfNotExist('client/main.js', 'static/karma.js'), BundleUtils.bundleResourceIfNotExist('context/main.js', 'static/context.js')]);\n\n              case 4:\n                _context.next = 6;\n                return NetUtils.bindAvailablePort(config.port, config.listenAddress);\n\n              case 6:\n                this._boundServer = _context.sent;\n\n                this._boundServer.on('connection', function (socket) {\n                  // Attach an error handler to avoid UncaughtException errors.\n                  socket.on('error', function (err) {\n                    // Errors on this socket are retried, ignore them\n                    _this2.log.debug('Ignoring error on webserver connection: ' + err);\n                  });\n                });\n\n                config.port = this._boundServer.address().port;\n                _context.next = 11;\n                return this._injector.invoke(this._start, this);\n\n              case 11:\n                _context.next = 16;\n                break;\n\n              case 13:\n                _context.prev = 13;\n                _context.t0 = _context[\"catch\"](1);\n                this.dieOnError(\"Server start failed on port \".concat(config.port, \": \").concat(_context.t0));\n\n              case 16:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[1, 13]]);\n      }));\n\n      function start() {\n        return _start2.apply(this, arguments);\n      }\n\n      return start;\n    }()\n  }, {\n    key: \"get\",\n    value: function get(token) {\n      return this._injector.get(token);\n    }\n  }, {\n    key: \"refreshFiles\",\n    value: function refreshFiles() {\n      return this._fileList ? this._fileList.refresh() : Promise.resolve();\n    }\n  }, {\n    key: \"refreshFile\",\n    value: function refreshFile(path) {\n      return this._fileList ? this._fileList.changeFile(path) : Promise.resolve();\n    }\n  }, {\n    key: \"_start\",\n    value: function () {\n      var _start3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(config, launcher, preprocess, fileList, capturedBrowsers, executor, done) {\n        var _this3 = this;\n\n        var webServer, socketServer, singleRunDoneBrowsers, singleRunBrowsers, singleRunBrowserNotCaptured, afterPreprocess, configLevel, configFormat, configPath, browserLogFile, levels, emitRunCompleteIfAllBrowsersDone, webServerCloseTimeout, disconnectBrowsers, reportError;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (!config.detached) {\n                  _context2.next = 3;\n                  break;\n                }\n\n                this._detach(config, done);\n\n                return _context2.abrupt(\"return\");\n\n              case 3:\n                this._fileList = fileList;\n                _context2.next = 6;\n                return Promise.all(config.frameworks.map(function (framework) {\n                  return _this3._injector.get('framework:' + framework);\n                }));\n\n              case 6:\n                webServer = this._injector.get('webServer');\n                socketServer = this._injector.get('socketServer');\n                singleRunDoneBrowsers = Object.create(null);\n                singleRunBrowsers = new BrowserCollection(new EventEmitter());\n                singleRunBrowserNotCaptured = false;\n                webServer.on('error', function (err) {\n                  _this3.dieOnError(\"Webserver fail \".concat(err));\n                });\n\n                afterPreprocess = function afterPreprocess() {\n                  if (config.autoWatch) {\n                    var _watcher = _this3.get('watcher');\n\n                    _this3._injector.invoke(_watcher);\n                  }\n\n                  webServer.listen(_this3._boundServer, function () {\n                    _this3.log.info(\"Karma v\".concat(constant.VERSION, \" server started at \").concat(config.protocol, \"//\").concat(config.hostname, \":\").concat(config.port).concat(config.urlRoot));\n\n                    _this3.emit('listening', config.port);\n\n                    if (config.browsers && config.browsers.length) {\n                      _this3._injector.invoke(launcher.launch, launcher).forEach(function (browserLauncher) {\n                        singleRunDoneBrowsers[browserLauncher.id] = false;\n                      });\n                    }\n\n                    if (_this3.loadErrors.length > 0) {\n                      _this3.dieOnError(new Error(\"Found \".concat(_this3.loadErrors.length, \" load error\").concat(_this3.loadErrors.length === 1 ? '' : 's')));\n                    }\n                  });\n                };\n\n                fileList.refresh().then(afterPreprocess, afterPreprocess);\n                this.on('browsers_change', function () {\n                  return socketServer.sockets.emit('info', capturedBrowsers.serialize());\n                });\n                this.on('browser_register', function (browser) {\n                  launcher.markCaptured(browser.id);\n\n                  if (launcher.areAllCaptured()) {\n                    _this3.emit('browsers_ready');\n\n                    if (config.autoWatch) {\n                      executor.schedule();\n                    }\n                  }\n                });\n\n                if (config.browserConsoleLogOptions && config.browserConsoleLogOptions.path) {\n                  configLevel = config.browserConsoleLogOptions.level || 'debug';\n                  configFormat = config.browserConsoleLogOptions.format || '%b %T: %m';\n                  configPath = config.browserConsoleLogOptions.path;\n                  this.log.info(\"Writing browser console to file: \".concat(configPath));\n                  browserLogFile = fs.openSync(configPath, 'w+');\n                  levels = ['log', 'error', 'warn', 'info', 'debug'];\n                  this.on('browser_log', function (browser, message, level) {\n                    if (levels.indexOf(level.toLowerCase()) > levels.indexOf(configLevel)) {\n                      return;\n                    }\n\n                    if (!helper.isString(message)) {\n                      message = util.inspect(message, {\n                        showHidden: false,\n                        colors: false\n                      });\n                    }\n\n                    var logMap = {\n                      '%m': message,\n                      '%t': level.toLowerCase(),\n                      '%T': level.toUpperCase(),\n                      '%b': browser\n                    };\n                    var logString = configFormat.replace(/%[mtTb]/g, function (m) {\n                      return logMap[m];\n                    });\n                    this.log.debug(\"Writing browser console line: \".concat(logString));\n                    fs.writeSync(browserLogFile, logString + '\\n');\n                  });\n                }\n\n                socketServer.sockets.on('connection', function (socket) {\n                  _this3.log.debug(\"A browser has connected on socket \".concat(socket.id));\n\n                  var replySocketEvents = events.bufferEvents(socket, ['start', 'info', 'karma_error', 'result', 'complete']);\n                  socket.on('complete', function (data, ack) {\n                    return ack();\n                  });\n                  socket.on('error', function (err) {\n                    _this3.log.debug('karma server socket error: ' + err);\n                  });\n                  socket.on('register', function (info) {\n                    var newBrowser = info.id ? capturedBrowsers.getById(info.id) || singleRunBrowsers.getById(info.id) : null;\n\n                    if (newBrowser) {\n                      // By default if a browser disconnects while still executing, we assume that the test\n                      // execution still continues because just the socket connection has been terminated. Now\n                      // since we know whether this is just a socket reconnect or full client reconnect, we\n                      // need to update the browser state accordingly. This is necessary because in case a\n                      // browser crashed and has been restarted, we need to start with a fresh execution.\n                      if (!info.isSocketReconnect) {\n                        newBrowser.setState(Browser.STATE_DISCONNECTED);\n                      }\n\n                      newBrowser.reconnect(socket); // Since not every reconnected browser is able to continue with its previous execution,\n                      // we need to start a new execution in case a browser has restarted and is now idling.\n\n                      if (newBrowser.state === Browser.STATE_CONNECTED && config.singleRun) {\n                        newBrowser.execute(config.client);\n                      }\n                    } else {\n                      newBrowser = _this3._injector.createChild([{\n                        id: ['value', info.id || null],\n                        fullName: ['value', helper.isDefined(info.displayName) ? info.displayName : info.name],\n                        socket: ['value', socket]\n                      }]).invoke(Browser.factory);\n                      newBrowser.init();\n\n                      if (config.singleRun) {\n                        newBrowser.execute(config.client);\n                        singleRunBrowsers.add(newBrowser);\n                      }\n                    }\n\n                    replySocketEvents();\n                  });\n                });\n\n                emitRunCompleteIfAllBrowsersDone = function emitRunCompleteIfAllBrowsersDone() {\n                  if (Object.keys(singleRunDoneBrowsers).every(function (key) {\n                    return singleRunDoneBrowsers[key];\n                  })) {\n                    _this3.emit('run_complete', singleRunBrowsers, singleRunBrowsers.getResults(singleRunBrowserNotCaptured, config));\n                  }\n                };\n\n                this.on('browser_complete', function (completedBrowser) {\n                  if (completedBrowser.lastResult.disconnected && completedBrowser.disconnectsCount <= config.browserDisconnectTolerance) {\n                    _this3.log.info(\"Restarting \".concat(completedBrowser.name, \" (\").concat(completedBrowser.disconnectsCount, \" of \").concat(config.browserDisconnectTolerance, \" attempts)\"));\n\n                    if (!launcher.restart(completedBrowser.id)) {\n                      _this3.emit('browser_restart_failure', completedBrowser);\n                    }\n                  } else {\n                    _this3.emit('browser_complete_with_no_more_retries', completedBrowser);\n                  }\n                });\n                this.on('stop', function (done) {\n                  this.log.debug('Received stop event, exiting.');\n                  return disconnectBrowsers().then(done);\n                });\n\n                if (config.singleRun) {\n                  this.on('browser_restart_failure', function (completedBrowser) {\n                    singleRunDoneBrowsers[completedBrowser.id] = true;\n                    emitRunCompleteIfAllBrowsersDone();\n                  }); // This is the normal exit trigger.\n\n                  this.on('browser_complete_with_no_more_retries', function (completedBrowser) {\n                    singleRunDoneBrowsers[completedBrowser.id] = true;\n\n                    if (launcher.kill(completedBrowser.id)) {\n                      // workaround to supress \"disconnect\" warning\n                      completedBrowser.state = Browser.STATE_DISCONNECTED;\n                    }\n\n                    emitRunCompleteIfAllBrowsersDone();\n                  });\n                  this.on('browser_process_failure', function (browserLauncher) {\n                    singleRunDoneBrowsers[browserLauncher.id] = true;\n                    singleRunBrowserNotCaptured = true;\n                    emitRunCompleteIfAllBrowsersDone();\n                  });\n                  this.on('run_complete', function (browsers, results) {\n                    this.log.debug('Run complete, exiting.');\n                    disconnectBrowsers(results.exitCode);\n                  });\n                  this.emit('run_start', singleRunBrowsers);\n                }\n\n                if (config.autoWatch) {\n                  this.on('file_list_modified', function () {\n                    _this3.log.debug('List of files has changed, trying to execute');\n\n                    if (config.restartOnFileChange) {\n                      socketServer.sockets.emit('stop');\n                    }\n\n                    executor.schedule();\n                  });\n                }\n\n                webServerCloseTimeout = 3000;\n\n                disconnectBrowsers = function disconnectBrowsers(code) {\n                  var sockets = socketServer.sockets.sockets;\n                  Object.keys(sockets).forEach(function (id) {\n                    var socket = sockets[id];\n                    socket.removeAllListeners('disconnect');\n\n                    if (!socket.disconnected) {\n                      process.nextTick(socket.disconnect.bind(socket));\n                    }\n                  });\n                  var removeAllListenersDone = false;\n\n                  var removeAllListeners = function removeAllListeners() {\n                    if (removeAllListenersDone) {\n                      return;\n                    }\n\n                    removeAllListenersDone = true;\n                    webServer.removeAllListeners();\n                    processWrapper.removeAllListeners();\n                    done(code || 0);\n                  };\n\n                  return _this3.emitAsync('exit').then(function () {\n                    return new Promise(function (resolve, reject) {\n                      socketServer.sockets.removeAllListeners();\n                      socketServer.close();\n                      var closeTimeout = setTimeout(removeAllListeners, webServerCloseTimeout);\n                      webServer.close(function () {\n                        clearTimeout(closeTimeout);\n                        removeAllListeners();\n                        resolve();\n                      });\n                    });\n                  });\n                };\n\n                processWrapper.on('SIGINT', function () {\n                  return disconnectBrowsers(process.exitCode);\n                });\n                processWrapper.on('SIGTERM', disconnectBrowsers);\n\n                reportError = function reportError(error) {\n                  process.emit('infrastructure_error', error);\n                  disconnectBrowsers(1);\n\n                  _this3.log.error(error);\n                };\n\n                processWrapper.on('unhandledRejection', function (error) {\n                  _this3.log.error(\"UnhandledRejection: \".concat(error.message || String(error)));\n\n                  reportError(error);\n                });\n                processWrapper.on('uncaughtException', function (error) {\n                  _this3.log.error(\"UncaughtException:: \".concat(error.message || String(error)));\n\n                  reportError(error);\n                });\n\n              case 30:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function _start(_x, _x2, _x3, _x4, _x5, _x6, _x7) {\n        return _start3.apply(this, arguments);\n      }\n\n      return _start;\n    }()\n  }, {\n    key: \"_detach\",\n    value: function _detach(config, done) {\n      var tmpFile = tmp.fileSync({\n        keep: true\n      });\n      this.log.info('Starting karma detached');\n      this.log.info('Run \"karma stop\" to stop the server.');\n      this.log.debug(\"Writing config to tmp-file \".concat(tmpFile.name));\n      config.detached = false;\n\n      try {\n        fs.writeFileSync(tmpFile.name, JSON.stringify(config), 'utf8');\n      } catch (e) {\n        this.log.error(\"Couldn't write temporary configuration file\");\n        done(1);\n        return;\n      }\n\n      var child = spawn(process.argv[0], [path.resolve(__dirname, '../lib/detached.js'), tmpFile.name], {\n        detached: true,\n        stdio: 'ignore'\n      });\n      child.unref();\n    }\n  }, {\n    key: \"stop\",\n    value: function stop() {\n      return this.emitAsync('stop');\n    }\n  }], [{\n    key: \"start\",\n    value: function start(cliOptions, done) {\n      console.warn('Deprecated static method to be removed in v3.0');\n      return new Server(cliOptions, done).start();\n    }\n  }]);\n\n  return Server;\n}(KarmaEventEmitter);\n\nServer.prototype._start.$inject = ['config', 'launcher', 'preprocess', 'fileList', 'capturedBrowsers', 'executor', 'done'];\nmodule.exports = Server;","map":{"version":3,"sources":["/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/karma/lib/server.js"],"names":["SocketIO","require","di","util","spawn","tmp","fs","path","BundleUtils","NetUtils","root","global","window","cfg","logger","constant","watcher","plugin","createServeFile","createServeStaticFile","createFilesPromise","createWebServer","preprocessor","Launcher","FileList","reporter","helper","events","KarmaEventEmitter","EventEmitter","Executor","Browser","BrowserCollection","EmitterWrapper","processWrapper","process","createSocketIoServer","webServer","executor","config","server","destroyUpgrade","urlRoot","transports","forceJSONP","pingTimeout","socketIoSockets","sockets","Server","cliOptions","done","setupFromConfig","log","create","loadErrors","parseConfig","configFile","debug","inspect","modules","exit","emitter","launcher","factory","preprocess","createPriorityPreprocessor","fileList","serveFile","serveStaticFile","filesPromise","socketServer","customFileHandlers","customScriptTypes","createReporters","capturedBrowsers","args","timer","setTimeout","apply","arguments","clearTimeout","on","type","name","push","concat","resolve","plugins","_injector","Injector","error","exitCode","kill","pid","get","Promise","all","bundleResourceIfNotExist","bindAvailablePort","port","listenAddress","_boundServer","socket","err","address","invoke","_start","dieOnError","token","_fileList","refresh","changeFile","detached","_detach","frameworks","map","framework","singleRunDoneBrowsers","Object","singleRunBrowsers","singleRunBrowserNotCaptured","afterPreprocess","autoWatch","listen","info","VERSION","protocol","hostname","emit","browsers","length","launch","forEach","browserLauncher","id","Error","then","serialize","browser","markCaptured","areAllCaptured","schedule","browserConsoleLogOptions","configLevel","level","configFormat","format","configPath","browserLogFile","openSync","levels","message","indexOf","toLowerCase","isString","showHidden","colors","logMap","toUpperCase","logString","replace","m","writeSync","replySocketEvents","bufferEvents","data","ack","newBrowser","getById","isSocketReconnect","setState","STATE_DISCONNECTED","reconnect","state","STATE_CONNECTED","singleRun","execute","client","createChild","fullName","isDefined","displayName","init","add","emitRunCompleteIfAllBrowsersDone","keys","every","key","getResults","completedBrowser","lastResult","disconnected","disconnectsCount","browserDisconnectTolerance","restart","disconnectBrowsers","results","restartOnFileChange","webServerCloseTimeout","code","removeAllListeners","nextTick","disconnect","bind","removeAllListenersDone","emitAsync","reject","close","closeTimeout","reportError","String","tmpFile","fileSync","keep","writeFileSync","JSON","stringify","e","child","argv","__dirname","stdio","unref","console","warn","start","prototype","$inject","module","exports"],"mappings":"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","sourcesContent":["'use strict'\n\nconst SocketIO = require('socket.io')\nconst di = require('di')\nconst util = require('util')\nconst spawn = require('child_process').spawn\nconst tmp = require('tmp')\nconst fs = require('fs')\nconst path = require('path')\n\nconst BundleUtils = require('./utils/bundle-utils')\nconst NetUtils = require('./utils/net-utils')\nconst root = global || window || this\n\nconst cfg = require('./config')\nconst logger = require('./logger')\nconst constant = require('./constants')\nconst watcher = require('./watcher')\nconst plugin = require('./plugin')\n\nconst createServeFile = require('./web-server').createServeFile\nconst createServeStaticFile = require('./web-server').createServeStaticFile\nconst createFilesPromise = require('./web-server').createFilesPromise\nconst createWebServer = require('./web-server').createWebServer\nconst preprocessor = require('./preprocessor')\nconst Launcher = require('./launcher').Launcher\nconst FileList = require('./file-list')\nconst reporter = require('./reporter')\nconst helper = require('./helper')\nconst events = require('./events')\nconst KarmaEventEmitter = events.EventEmitter\nconst EventEmitter = require('events').EventEmitter\nconst Executor = require('./executor')\nconst Browser = require('./browser')\nconst BrowserCollection = require('./browser_collection')\nconst EmitterWrapper = require('./emitter_wrapper')\nconst processWrapper = new EmitterWrapper(process)\n\nfunction createSocketIoServer (webServer, executor, config) {\n  const server = new SocketIO(webServer, {\n    // avoid destroying http upgrades from socket.io to get proxied websockets working\n    destroyUpgrade: false,\n    path: config.urlRoot + 'socket.io/',\n    transports: config.transports,\n    forceJSONP: config.forceJSONP,\n    // Default is 5000 in socket.io v2.x.\n    pingTimeout: config.pingTimeout || 5000\n  })\n\n  // hack to overcome circular dependency\n  executor.socketIoSockets = server.sockets\n\n  return server\n}\n\nclass Server extends KarmaEventEmitter {\n  constructor (cliOptions, done) {\n    super()\n    logger.setupFromConfig(cliOptions)\n\n    this.log = logger.create('karma-server')\n\n    this.loadErrors = []\n\n    const config = cfg.parseConfig(cliOptions.configFile, cliOptions)\n\n    this.log.debug('Final config', util.inspect(config, false, /** depth **/ null))\n\n    let modules = [{\n      helper: ['value', helper],\n      logger: ['value', logger],\n      done: ['value', done || process.exit],\n      emitter: ['value', this],\n      server: ['value', this],\n      watcher: ['value', watcher],\n      launcher: ['factory', Launcher.factory],\n      config: ['value', config],\n      preprocess: ['factory', preprocessor.createPriorityPreprocessor],\n      fileList: ['factory', FileList.factory],\n      webServer: ['factory', createWebServer],\n      serveFile: ['factory', createServeFile],\n      serveStaticFile: ['factory', createServeStaticFile],\n      filesPromise: ['factory', createFilesPromise],\n      socketServer: ['factory', createSocketIoServer],\n      executor: ['factory', Executor.factory],\n      // TODO(vojta): remove\n      customFileHandlers: ['value', []],\n      // TODO(vojta): remove, once karma-dart does not rely on it\n      customScriptTypes: ['value', []],\n      reporter: ['factory', reporter.createReporters],\n      capturedBrowsers: ['factory', BrowserCollection.factory],\n      args: ['value', {}],\n      timer: ['value', {\n        setTimeout () {\n          return setTimeout.apply(root, arguments)\n        },\n        clearTimeout\n      }]\n    }]\n\n    this.on('load_error', (type, name) => {\n      this.log.debug(`Registered a load error of type ${type} with name ${name}`)\n      this.loadErrors.push([type, name])\n    })\n\n    modules = modules.concat(plugin.resolve(config.plugins, this))\n    this._injector = new di.Injector(modules)\n  }\n\n  dieOnError (error) {\n    this.log.error(error)\n    process.exitCode = 1\n    process.kill(process.pid, 'SIGINT')\n  }\n\n  async start () {\n    const config = this.get('config')\n    try {\n      await Promise.all([\n        BundleUtils.bundleResourceIfNotExist('client/main.js', 'static/karma.js'),\n        BundleUtils.bundleResourceIfNotExist('context/main.js', 'static/context.js')\n      ])\n      this._boundServer = await NetUtils.bindAvailablePort(config.port, config.listenAddress)\n      this._boundServer.on('connection', (socket) => {\n        // Attach an error handler to avoid UncaughtException errors.\n        socket.on('error', (err) => {\n          // Errors on this socket are retried, ignore them\n          this.log.debug('Ignoring error on webserver connection: ' + err)\n        })\n      })\n      config.port = this._boundServer.address().port\n      await this._injector.invoke(this._start, this)\n    } catch (err) {\n      this.dieOnError(`Server start failed on port ${config.port}: ${err}`)\n    }\n  }\n\n  get (token) {\n    return this._injector.get(token)\n  }\n\n  refreshFiles () {\n    return this._fileList ? this._fileList.refresh() : Promise.resolve()\n  }\n\n  refreshFile (path) {\n    return this._fileList ? this._fileList.changeFile(path) : Promise.resolve()\n  }\n\n  async _start (config, launcher, preprocess, fileList, capturedBrowsers, executor, done) {\n    if (config.detached) {\n      this._detach(config, done)\n      return\n    }\n\n    this._fileList = fileList\n\n    await Promise.all(\n      config.frameworks.map((framework) => this._injector.get('framework:' + framework))\n    )\n\n    const webServer = this._injector.get('webServer')\n    const socketServer = this._injector.get('socketServer')\n\n    const singleRunDoneBrowsers = Object.create(null)\n    const singleRunBrowsers = new BrowserCollection(new EventEmitter())\n    let singleRunBrowserNotCaptured = false\n\n    webServer.on('error', (err) => {\n      this.dieOnError(`Webserver fail ${err}`)\n    })\n\n    const afterPreprocess = () => {\n      if (config.autoWatch) {\n        const watcher = this.get('watcher')\n        this._injector.invoke(watcher)\n      }\n\n      webServer.listen(this._boundServer, () => {\n        this.log.info(`Karma v${constant.VERSION} server started at ${config.protocol}//${config.hostname}:${config.port}${config.urlRoot}`)\n\n        this.emit('listening', config.port)\n        if (config.browsers && config.browsers.length) {\n          this._injector.invoke(launcher.launch, launcher).forEach((browserLauncher) => {\n            singleRunDoneBrowsers[browserLauncher.id] = false\n          })\n        }\n        if (this.loadErrors.length > 0) {\n          this.dieOnError(new Error(`Found ${this.loadErrors.length} load error${this.loadErrors.length === 1 ? '' : 's'}`))\n        }\n      })\n    }\n\n    fileList.refresh().then(afterPreprocess, afterPreprocess)\n\n    this.on('browsers_change', () => socketServer.sockets.emit('info', capturedBrowsers.serialize()))\n\n    this.on('browser_register', (browser) => {\n      launcher.markCaptured(browser.id)\n\n      if (launcher.areAllCaptured()) {\n        this.emit('browsers_ready')\n\n        if (config.autoWatch) {\n          executor.schedule()\n        }\n      }\n    })\n\n    if (config.browserConsoleLogOptions && config.browserConsoleLogOptions.path) {\n      const configLevel = config.browserConsoleLogOptions.level || 'debug'\n      const configFormat = config.browserConsoleLogOptions.format || '%b %T: %m'\n      const configPath = config.browserConsoleLogOptions.path\n      this.log.info(`Writing browser console to file: ${configPath}`)\n      const browserLogFile = fs.openSync(configPath, 'w+')\n      const levels = ['log', 'error', 'warn', 'info', 'debug']\n      this.on('browser_log', function (browser, message, level) {\n        if (levels.indexOf(level.toLowerCase()) > levels.indexOf(configLevel)) {\n          return\n        }\n        if (!helper.isString(message)) {\n          message = util.inspect(message, { showHidden: false, colors: false })\n        }\n        const logMap = { '%m': message, '%t': level.toLowerCase(), '%T': level.toUpperCase(), '%b': browser }\n        const logString = configFormat.replace(/%[mtTb]/g, (m) => logMap[m])\n        this.log.debug(`Writing browser console line: ${logString}`)\n        fs.writeSync(browserLogFile, logString + '\\n')\n      })\n    }\n\n    socketServer.sockets.on('connection', (socket) => {\n      this.log.debug(`A browser has connected on socket ${socket.id}`)\n\n      const replySocketEvents = events.bufferEvents(socket, ['start', 'info', 'karma_error', 'result', 'complete'])\n\n      socket.on('complete', (data, ack) => ack())\n\n      socket.on('error', (err) => {\n        this.log.debug('karma server socket error: ' + err)\n      })\n\n      socket.on('register', (info) => {\n        let newBrowser = info.id ? (capturedBrowsers.getById(info.id) || singleRunBrowsers.getById(info.id)) : null\n\n        if (newBrowser) {\n          // By default if a browser disconnects while still executing, we assume that the test\n          // execution still continues because just the socket connection has been terminated. Now\n          // since we know whether this is just a socket reconnect or full client reconnect, we\n          // need to update the browser state accordingly. This is necessary because in case a\n          // browser crashed and has been restarted, we need to start with a fresh execution.\n          if (!info.isSocketReconnect) {\n            newBrowser.setState(Browser.STATE_DISCONNECTED)\n          }\n\n          newBrowser.reconnect(socket)\n\n          // Since not every reconnected browser is able to continue with its previous execution,\n          // we need to start a new execution in case a browser has restarted and is now idling.\n          if (newBrowser.state === Browser.STATE_CONNECTED && config.singleRun) {\n            newBrowser.execute(config.client)\n          }\n        } else {\n          newBrowser = this._injector.createChild([{\n            id: ['value', info.id || null],\n            fullName: ['value', (helper.isDefined(info.displayName) ? info.displayName : info.name)],\n            socket: ['value', socket]\n          }]).invoke(Browser.factory)\n\n          newBrowser.init()\n\n          if (config.singleRun) {\n            newBrowser.execute(config.client)\n            singleRunBrowsers.add(newBrowser)\n          }\n        }\n\n        replySocketEvents()\n      })\n    })\n\n    const emitRunCompleteIfAllBrowsersDone = () => {\n      if (Object.keys(singleRunDoneBrowsers).every((key) => singleRunDoneBrowsers[key])) {\n        this.emit('run_complete', singleRunBrowsers, singleRunBrowsers.getResults(singleRunBrowserNotCaptured, config))\n      }\n    }\n\n    this.on('browser_complete', (completedBrowser) => {\n      if (completedBrowser.lastResult.disconnected && completedBrowser.disconnectsCount <= config.browserDisconnectTolerance) {\n        this.log.info(`Restarting ${completedBrowser.name} (${completedBrowser.disconnectsCount} of ${config.browserDisconnectTolerance} attempts)`)\n\n        if (!launcher.restart(completedBrowser.id)) {\n          this.emit('browser_restart_failure', completedBrowser)\n        }\n      } else {\n        this.emit('browser_complete_with_no_more_retries', completedBrowser)\n      }\n    })\n\n    this.on('stop', function (done) {\n      this.log.debug('Received stop event, exiting.')\n      return disconnectBrowsers().then(done)\n    })\n\n    if (config.singleRun) {\n      this.on('browser_restart_failure', (completedBrowser) => {\n        singleRunDoneBrowsers[completedBrowser.id] = true\n        emitRunCompleteIfAllBrowsersDone()\n      })\n\n      // This is the normal exit trigger.\n      this.on('browser_complete_with_no_more_retries', function (completedBrowser) {\n        singleRunDoneBrowsers[completedBrowser.id] = true\n\n        if (launcher.kill(completedBrowser.id)) {\n          // workaround to supress \"disconnect\" warning\n          completedBrowser.state = Browser.STATE_DISCONNECTED\n        }\n\n        emitRunCompleteIfAllBrowsersDone()\n      })\n\n      this.on('browser_process_failure', (browserLauncher) => {\n        singleRunDoneBrowsers[browserLauncher.id] = true\n        singleRunBrowserNotCaptured = true\n\n        emitRunCompleteIfAllBrowsersDone()\n      })\n\n      this.on('run_complete', function (browsers, results) {\n        this.log.debug('Run complete, exiting.')\n        disconnectBrowsers(results.exitCode)\n      })\n\n      this.emit('run_start', singleRunBrowsers)\n    }\n\n    if (config.autoWatch) {\n      this.on('file_list_modified', () => {\n        this.log.debug('List of files has changed, trying to execute')\n        if (config.restartOnFileChange) {\n          socketServer.sockets.emit('stop')\n        }\n        executor.schedule()\n      })\n    }\n\n    const webServerCloseTimeout = 3000\n    const disconnectBrowsers = (code) => {\n      const sockets = socketServer.sockets.sockets\n\n      Object.keys(sockets).forEach((id) => {\n        const socket = sockets[id]\n        socket.removeAllListeners('disconnect')\n        if (!socket.disconnected) {\n          process.nextTick(socket.disconnect.bind(socket))\n        }\n      })\n\n      let removeAllListenersDone = false\n      const removeAllListeners = () => {\n        if (removeAllListenersDone) {\n          return\n        }\n        removeAllListenersDone = true\n        webServer.removeAllListeners()\n        processWrapper.removeAllListeners()\n        done(code || 0)\n      }\n\n      return this.emitAsync('exit').then(() => {\n        return new Promise((resolve, reject) => {\n          socketServer.sockets.removeAllListeners()\n          socketServer.close()\n          const closeTimeout = setTimeout(removeAllListeners, webServerCloseTimeout)\n\n          webServer.close(() => {\n            clearTimeout(closeTimeout)\n            removeAllListeners()\n            resolve()\n          })\n        })\n      })\n    }\n\n    processWrapper.on('SIGINT', () => disconnectBrowsers(process.exitCode))\n    processWrapper.on('SIGTERM', disconnectBrowsers)\n\n    const reportError = (error) => {\n      process.emit('infrastructure_error', error)\n      disconnectBrowsers(1)\n      this.log.error(error)\n    }\n\n    processWrapper.on('unhandledRejection', (error) => {\n      this.log.error(`UnhandledRejection: ${error.message || String(error)}`)\n      reportError(error)\n    })\n\n    processWrapper.on('uncaughtException', (error) => {\n      this.log.error(`UncaughtException:: ${error.message || String(error)}`)\n      reportError(error)\n    })\n  }\n\n  _detach (config, done) {\n    const tmpFile = tmp.fileSync({ keep: true })\n    this.log.info('Starting karma detached')\n    this.log.info('Run \"karma stop\" to stop the server.')\n    this.log.debug(`Writing config to tmp-file ${tmpFile.name}`)\n    config.detached = false\n    try {\n      fs.writeFileSync(tmpFile.name, JSON.stringify(config), 'utf8')\n    } catch (e) {\n      this.log.error(\"Couldn't write temporary configuration file\")\n      done(1)\n      return\n    }\n    const child = spawn(process.argv[0], [path.resolve(__dirname, '../lib/detached.js'), tmpFile.name], {\n      detached: true,\n      stdio: 'ignore'\n    })\n    child.unref()\n  }\n\n  stop () {\n    return this.emitAsync('stop')\n  }\n\n  static start (cliOptions, done) {\n    console.warn('Deprecated static method to be removed in v3.0')\n    return new Server(cliOptions, done).start()\n  }\n}\n\nServer.prototype._start.$inject = ['config', 'launcher', 'preprocess', 'fileList', 'capturedBrowsers', 'executor', 'done']\n\nmodule.exports = Server\n"]},"metadata":{},"sourceType":"script"}