{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/createClass\");\n\nvar Tokenizer = require('parse5/lib/tokenizer');\n\nvar foreignContent = require('parse5/lib/common/foreign-content');\n\nvar unicode = require('parse5/lib/common/unicode');\n\nvar HTML = require('parse5/lib/common/html'); //Aliases\n\n\nvar $ = HTML.TAG_NAMES;\nvar NS = HTML.NAMESPACES; //ParserFeedbackSimulator\n//Simulates adjustment of the Tokenizer which performed by standard parser during tree construction.\n\nvar ParserFeedbackSimulator = /*#__PURE__*/function () {\n  function ParserFeedbackSimulator(tokenizer) {\n    _classCallCheck(this, ParserFeedbackSimulator);\n\n    this.tokenizer = tokenizer;\n    this.namespaceStack = [];\n    this.namespaceStackTop = -1;\n\n    this._enterNamespace(NS.HTML);\n  }\n\n  _createClass(ParserFeedbackSimulator, [{\n    key: \"getNextToken\",\n    value: function getNextToken() {\n      var token = this.tokenizer.getNextToken();\n\n      if (token.type === Tokenizer.START_TAG_TOKEN) {\n        this._handleStartTagToken(token);\n      } else if (token.type === Tokenizer.END_TAG_TOKEN) {\n        this._handleEndTagToken(token);\n      } else if (token.type === Tokenizer.NULL_CHARACTER_TOKEN && this.inForeignContent) {\n        token.type = Tokenizer.CHARACTER_TOKEN;\n        token.chars = unicode.REPLACEMENT_CHARACTER;\n      } else if (this.skipNextNewLine) {\n        if (token.type !== Tokenizer.HIBERNATION_TOKEN) {\n          this.skipNextNewLine = false;\n        }\n\n        if (token.type === Tokenizer.WHITESPACE_CHARACTER_TOKEN && token.chars[0] === '\\n') {\n          if (token.chars.length === 1) {\n            return this.getNextToken();\n          }\n\n          token.chars = token.chars.substr(1);\n        }\n      }\n\n      return token;\n    } //Namespace stack mutations\n\n  }, {\n    key: \"_enterNamespace\",\n    value: function _enterNamespace(namespace) {\n      this.namespaceStackTop++;\n      this.namespaceStack.push(namespace);\n      this.inForeignContent = namespace !== NS.HTML;\n      this.currentNamespace = namespace;\n      this.tokenizer.allowCDATA = this.inForeignContent;\n    }\n  }, {\n    key: \"_leaveCurrentNamespace\",\n    value: function _leaveCurrentNamespace() {\n      this.namespaceStackTop--;\n      this.namespaceStack.pop();\n      this.currentNamespace = this.namespaceStack[this.namespaceStackTop];\n      this.inForeignContent = this.currentNamespace !== NS.HTML;\n      this.tokenizer.allowCDATA = this.inForeignContent;\n    } //Token handlers\n\n  }, {\n    key: \"_ensureTokenizerMode\",\n    value: function _ensureTokenizerMode(tn) {\n      if (tn === $.TEXTAREA || tn === $.TITLE) {\n        this.tokenizer.state = Tokenizer.MODE.RCDATA;\n      } else if (tn === $.PLAINTEXT) {\n        this.tokenizer.state = Tokenizer.MODE.PLAINTEXT;\n      } else if (tn === $.SCRIPT) {\n        this.tokenizer.state = Tokenizer.MODE.SCRIPT_DATA;\n      } else if (tn === $.STYLE || tn === $.IFRAME || tn === $.XMP || tn === $.NOEMBED || tn === $.NOFRAMES || tn === $.NOSCRIPT) {\n        this.tokenizer.state = Tokenizer.MODE.RAWTEXT;\n      }\n    }\n  }, {\n    key: \"_handleStartTagToken\",\n    value: function _handleStartTagToken(token) {\n      var tn = token.tagName;\n\n      if (tn === $.SVG) {\n        this._enterNamespace(NS.SVG);\n      } else if (tn === $.MATH) {\n        this._enterNamespace(NS.MATHML);\n      }\n\n      if (this.inForeignContent) {\n        if (foreignContent.causesExit(token)) {\n          this._leaveCurrentNamespace();\n\n          return;\n        }\n\n        var currentNs = this.currentNamespace;\n\n        if (currentNs === NS.MATHML) {\n          foreignContent.adjustTokenMathMLAttrs(token);\n        } else if (currentNs === NS.SVG) {\n          foreignContent.adjustTokenSVGTagName(token);\n          foreignContent.adjustTokenSVGAttrs(token);\n        }\n\n        foreignContent.adjustTokenXMLAttrs(token);\n        tn = token.tagName;\n\n        if (!token.selfClosing && foreignContent.isIntegrationPoint(tn, currentNs, token.attrs)) {\n          this._enterNamespace(NS.HTML);\n        }\n      } else {\n        if (tn === $.PRE || tn === $.TEXTAREA || tn === $.LISTING) {\n          this.skipNextNewLine = true;\n        } else if (tn === $.IMAGE) {\n          token.tagName = $.IMG;\n        }\n\n        this._ensureTokenizerMode(tn);\n      }\n    }\n  }, {\n    key: \"_handleEndTagToken\",\n    value: function _handleEndTagToken(token) {\n      var tn = token.tagName;\n\n      if (!this.inForeignContent) {\n        var previousNs = this.namespaceStack[this.namespaceStackTop - 1];\n\n        if (previousNs === NS.SVG && foreignContent.SVG_TAG_NAMES_ADJUSTMENT_MAP[tn]) {\n          tn = foreignContent.SVG_TAG_NAMES_ADJUSTMENT_MAP[tn];\n        } //NOTE: check for exit from integration point\n\n\n        if (foreignContent.isIntegrationPoint(tn, previousNs, token.attrs)) {\n          this._leaveCurrentNamespace();\n        }\n      } else if (tn === $.SVG && this.currentNamespace === NS.SVG || tn === $.MATH && this.currentNamespace === NS.MATHML) {\n        this._leaveCurrentNamespace();\n      } // NOTE: adjust end tag name as well for consistency\n\n\n      if (this.currentNamespace === NS.SVG) {\n        foreignContent.adjustTokenSVGTagName(token);\n      }\n    }\n  }]);\n\n  return ParserFeedbackSimulator;\n}();\n\nmodule.exports = ParserFeedbackSimulator;","map":{"version":3,"sources":["/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/parse5-sax-parser/lib/parser-feedback-simulator.js"],"names":["Tokenizer","require","foreignContent","unicode","HTML","$","TAG_NAMES","NS","NAMESPACES","ParserFeedbackSimulator","tokenizer","namespaceStack","namespaceStackTop","_enterNamespace","token","getNextToken","type","START_TAG_TOKEN","_handleStartTagToken","END_TAG_TOKEN","_handleEndTagToken","NULL_CHARACTER_TOKEN","inForeignContent","CHARACTER_TOKEN","chars","REPLACEMENT_CHARACTER","skipNextNewLine","HIBERNATION_TOKEN","WHITESPACE_CHARACTER_TOKEN","length","substr","namespace","push","currentNamespace","allowCDATA","pop","tn","TEXTAREA","TITLE","state","MODE","RCDATA","PLAINTEXT","SCRIPT","SCRIPT_DATA","STYLE","IFRAME","XMP","NOEMBED","NOFRAMES","NOSCRIPT","RAWTEXT","tagName","SVG","MATH","MATHML","causesExit","_leaveCurrentNamespace","currentNs","adjustTokenMathMLAttrs","adjustTokenSVGTagName","adjustTokenSVGAttrs","adjustTokenXMLAttrs","selfClosing","isIntegrationPoint","attrs","PRE","LISTING","IMAGE","IMG","_ensureTokenizerMode","previousNs","SVG_TAG_NAMES_ADJUSTMENT_MAP","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nconst Tokenizer = require('parse5/lib/tokenizer');\nconst foreignContent = require('parse5/lib/common/foreign-content');\nconst unicode = require('parse5/lib/common/unicode');\nconst HTML = require('parse5/lib/common/html');\n\n//Aliases\nconst $ = HTML.TAG_NAMES;\nconst NS = HTML.NAMESPACES;\n\n//ParserFeedbackSimulator\n//Simulates adjustment of the Tokenizer which performed by standard parser during tree construction.\nclass ParserFeedbackSimulator {\n    constructor(tokenizer) {\n        this.tokenizer = tokenizer;\n\n        this.namespaceStack = [];\n        this.namespaceStackTop = -1;\n        this._enterNamespace(NS.HTML);\n    }\n\n    getNextToken() {\n        const token = this.tokenizer.getNextToken();\n\n        if (token.type === Tokenizer.START_TAG_TOKEN) {\n            this._handleStartTagToken(token);\n        } else if (token.type === Tokenizer.END_TAG_TOKEN) {\n            this._handleEndTagToken(token);\n        } else if (token.type === Tokenizer.NULL_CHARACTER_TOKEN && this.inForeignContent) {\n            token.type = Tokenizer.CHARACTER_TOKEN;\n            token.chars = unicode.REPLACEMENT_CHARACTER;\n        } else if (this.skipNextNewLine) {\n            if (token.type !== Tokenizer.HIBERNATION_TOKEN) {\n                this.skipNextNewLine = false;\n            }\n\n            if (token.type === Tokenizer.WHITESPACE_CHARACTER_TOKEN && token.chars[0] === '\\n') {\n                if (token.chars.length === 1) {\n                    return this.getNextToken();\n                }\n\n                token.chars = token.chars.substr(1);\n            }\n        }\n\n        return token;\n    }\n\n    //Namespace stack mutations\n    _enterNamespace(namespace) {\n        this.namespaceStackTop++;\n        this.namespaceStack.push(namespace);\n\n        this.inForeignContent = namespace !== NS.HTML;\n        this.currentNamespace = namespace;\n        this.tokenizer.allowCDATA = this.inForeignContent;\n    }\n\n    _leaveCurrentNamespace() {\n        this.namespaceStackTop--;\n        this.namespaceStack.pop();\n\n        this.currentNamespace = this.namespaceStack[this.namespaceStackTop];\n        this.inForeignContent = this.currentNamespace !== NS.HTML;\n        this.tokenizer.allowCDATA = this.inForeignContent;\n    }\n\n    //Token handlers\n    _ensureTokenizerMode(tn) {\n        if (tn === $.TEXTAREA || tn === $.TITLE) {\n            this.tokenizer.state = Tokenizer.MODE.RCDATA;\n        } else if (tn === $.PLAINTEXT) {\n            this.tokenizer.state = Tokenizer.MODE.PLAINTEXT;\n        } else if (tn === $.SCRIPT) {\n            this.tokenizer.state = Tokenizer.MODE.SCRIPT_DATA;\n        } else if (\n            tn === $.STYLE ||\n            tn === $.IFRAME ||\n            tn === $.XMP ||\n            tn === $.NOEMBED ||\n            tn === $.NOFRAMES ||\n            tn === $.NOSCRIPT\n        ) {\n            this.tokenizer.state = Tokenizer.MODE.RAWTEXT;\n        }\n    }\n\n    _handleStartTagToken(token) {\n        let tn = token.tagName;\n\n        if (tn === $.SVG) {\n            this._enterNamespace(NS.SVG);\n        } else if (tn === $.MATH) {\n            this._enterNamespace(NS.MATHML);\n        }\n\n        if (this.inForeignContent) {\n            if (foreignContent.causesExit(token)) {\n                this._leaveCurrentNamespace();\n                return;\n            }\n\n            const currentNs = this.currentNamespace;\n\n            if (currentNs === NS.MATHML) {\n                foreignContent.adjustTokenMathMLAttrs(token);\n            } else if (currentNs === NS.SVG) {\n                foreignContent.adjustTokenSVGTagName(token);\n                foreignContent.adjustTokenSVGAttrs(token);\n            }\n\n            foreignContent.adjustTokenXMLAttrs(token);\n\n            tn = token.tagName;\n\n            if (!token.selfClosing && foreignContent.isIntegrationPoint(tn, currentNs, token.attrs)) {\n                this._enterNamespace(NS.HTML);\n            }\n        } else {\n            if (tn === $.PRE || tn === $.TEXTAREA || tn === $.LISTING) {\n                this.skipNextNewLine = true;\n            } else if (tn === $.IMAGE) {\n                token.tagName = $.IMG;\n            }\n\n            this._ensureTokenizerMode(tn);\n        }\n    }\n\n    _handleEndTagToken(token) {\n        let tn = token.tagName;\n\n        if (!this.inForeignContent) {\n            const previousNs = this.namespaceStack[this.namespaceStackTop - 1];\n\n            if (previousNs === NS.SVG && foreignContent.SVG_TAG_NAMES_ADJUSTMENT_MAP[tn]) {\n                tn = foreignContent.SVG_TAG_NAMES_ADJUSTMENT_MAP[tn];\n            }\n\n            //NOTE: check for exit from integration point\n            if (foreignContent.isIntegrationPoint(tn, previousNs, token.attrs)) {\n                this._leaveCurrentNamespace();\n            }\n        } else if (\n            (tn === $.SVG && this.currentNamespace === NS.SVG) ||\n            (tn === $.MATH && this.currentNamespace === NS.MATHML)\n        ) {\n            this._leaveCurrentNamespace();\n        }\n\n        // NOTE: adjust end tag name as well for consistency\n        if (this.currentNamespace === NS.SVG) {\n            foreignContent.adjustTokenSVGTagName(token);\n        }\n    }\n}\n\nmodule.exports = ParserFeedbackSimulator;\n"]},"metadata":{},"sourceType":"script"}