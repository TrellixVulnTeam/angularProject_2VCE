{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/regenerator\");\n\nvar _objectSpread = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/objectSpread2\");\n\nvar _asyncToGenerator = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.scheduleTargetAndForget = exports.targetFromTargetString = exports.targetStringFromTarget = exports.fromAsyncIterable = exports.isBuilderOutput = exports.BuilderProgressState = void 0;\n\nvar rxjs_1 = require(\"rxjs\");\n\nvar operators_1 = require(\"rxjs/operators\");\n\nvar progress_schema_1 = require(\"./progress-schema\");\n\nObject.defineProperty(exports, \"BuilderProgressState\", {\n  enumerable: true,\n  get: function get() {\n    return progress_schema_1.State;\n  }\n}); // tslint:disable-next-line:no-any\n\nfunction isBuilderOutput(obj) {\n  if (!obj || typeof obj.then === 'function' || typeof obj.subscribe === 'function') {\n    return false;\n  }\n\n  if (typeof obj[Symbol.asyncIterator] === 'function') {\n    return false;\n  }\n\n  return typeof obj.success === 'boolean';\n}\n\nexports.isBuilderOutput = isBuilderOutput;\n\nfunction fromAsyncIterable(iterable) {\n  return new rxjs_1.Observable(function (subscriber) {\n    handleAsyncIterator(subscriber, iterable[Symbol.asyncIterator]()).then(function () {\n      return subscriber.complete();\n    }, function (error) {\n      return subscriber.error(error);\n    });\n  });\n}\n\nexports.fromAsyncIterable = fromAsyncIterable;\n\nfunction handleAsyncIterator(_x, _x2) {\n  return _handleAsyncIterator.apply(this, arguments);\n}\n/**\n * Returns a string of \"project:target[:configuration]\" for the target object.\n */\n\n\nfunction _handleAsyncIterator() {\n  _handleAsyncIterator = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(subscriber, iterator) {\n    var _a, teardown, result;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            teardown = new Promise(function (resolve) {\n              return subscriber.add(function () {\n                return resolve();\n              });\n            });\n            _context.prev = 1;\n\n          case 2:\n            if (subscriber.closed) {\n              _context.next = 11;\n              break;\n            }\n\n            _context.next = 5;\n            return Promise.race([teardown, iterator.next()]);\n\n          case 5:\n            result = _context.sent;\n\n            if (!(!result || result.done)) {\n              _context.next = 8;\n              break;\n            }\n\n            return _context.abrupt(\"break\", 11);\n\n          case 8:\n            subscriber.next(result.value);\n            _context.next = 2;\n            break;\n\n          case 11:\n            _context.prev = 11;\n            _context.next = 14;\n            return (_a = iterator.return) === null || _a === void 0 ? void 0 : _a.call(iterator);\n\n          case 14:\n            return _context.finish(11);\n\n          case 15:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[1,, 11, 15]]);\n  }));\n  return _handleAsyncIterator.apply(this, arguments);\n}\n\nfunction targetStringFromTarget(_ref) {\n  var project = _ref.project,\n      target = _ref.target,\n      configuration = _ref.configuration;\n  return \"\".concat(project, \":\").concat(target).concat(configuration !== undefined ? ':' + configuration : '');\n}\n\nexports.targetStringFromTarget = targetStringFromTarget;\n/**\n * Return a Target tuple from a string.\n */\n\nfunction targetFromTargetString(str) {\n  var tuple = str.split(/:/, 3);\n\n  if (tuple.length < 2) {\n    throw new Error('Invalid target string: ' + JSON.stringify(str));\n  }\n\n  return _objectSpread({\n    project: tuple[0],\n    target: tuple[1]\n  }, tuple[2] !== undefined && {\n    configuration: tuple[2]\n  });\n}\n\nexports.targetFromTargetString = targetFromTargetString;\n/**\n * Schedule a target, and forget about its run. This will return an observable of outputs, that\n * as a a teardown will stop the target from running. This means that the Run object this returns\n * should not be shared.\n *\n * The reason this is not part of the Context interface is to keep the Context as normal form as\n * possible. This is really an utility that people would implement in their project.\n *\n * @param context The context of your current execution.\n * @param target The target to schedule.\n * @param overrides Overrides that are used in the target.\n * @param scheduleOptions Additional scheduling options.\n */\n\nfunction scheduleTargetAndForget(context, target, overrides, scheduleOptions) {\n  var resolve = null;\n  var promise = new Promise(function (r) {\n    return resolve = r;\n  });\n  context.addTeardown(function () {\n    return promise;\n  });\n  return rxjs_1.from(context.scheduleTarget(target, overrides, scheduleOptions)).pipe(operators_1.switchMap(function (run) {\n    return new rxjs_1.Observable(function (observer) {\n      var subscription = run.output.subscribe(observer);\n      return function () {\n        subscription.unsubscribe(); // We can properly ignore the floating promise as it's a \"reverse\" promise; the teardown\n        // is waiting for the resolve.\n        // tslint:disable-next-line:no-floating-promises\n\n        run.stop().then(resolve);\n      };\n    });\n  }));\n}\n\nexports.scheduleTargetAndForget = scheduleTargetAndForget;","map":{"version":3,"sources":["/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@angular-devkit/architect/src/api.js"],"names":["Object","defineProperty","exports","value","scheduleTargetAndForget","targetFromTargetString","targetStringFromTarget","fromAsyncIterable","isBuilderOutput","BuilderProgressState","rxjs_1","require","operators_1","progress_schema_1","enumerable","get","State","obj","then","subscribe","Symbol","asyncIterator","success","iterable","Observable","subscriber","handleAsyncIterator","complete","error","iterator","teardown","Promise","resolve","add","closed","race","next","result","done","_a","return","call","project","target","configuration","undefined","str","tuple","split","length","Error","JSON","stringify","context","overrides","scheduleOptions","promise","r","addTeardown","from","scheduleTarget","pipe","switchMap","run","observer","subscription","output","unsubscribe","stop"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.scheduleTargetAndForget = exports.targetFromTargetString = exports.targetStringFromTarget = exports.fromAsyncIterable = exports.isBuilderOutput = exports.BuilderProgressState = void 0;\nconst rxjs_1 = require(\"rxjs\");\nconst operators_1 = require(\"rxjs/operators\");\nconst progress_schema_1 = require(\"./progress-schema\");\nObject.defineProperty(exports, \"BuilderProgressState\", { enumerable: true, get: function () { return progress_schema_1.State; } });\n// tslint:disable-next-line:no-any\nfunction isBuilderOutput(obj) {\n    if (!obj || typeof obj.then === 'function' || typeof obj.subscribe === 'function') {\n        return false;\n    }\n    if (typeof obj[Symbol.asyncIterator] === 'function') {\n        return false;\n    }\n    return typeof obj.success === 'boolean';\n}\nexports.isBuilderOutput = isBuilderOutput;\nfunction fromAsyncIterable(iterable) {\n    return new rxjs_1.Observable((subscriber) => {\n        handleAsyncIterator(subscriber, iterable[Symbol.asyncIterator]()).then(() => subscriber.complete(), (error) => subscriber.error(error));\n    });\n}\nexports.fromAsyncIterable = fromAsyncIterable;\nasync function handleAsyncIterator(subscriber, iterator) {\n    var _a;\n    const teardown = new Promise((resolve) => subscriber.add(() => resolve()));\n    try {\n        while (!subscriber.closed) {\n            const result = await Promise.race([teardown, iterator.next()]);\n            if (!result || result.done) {\n                break;\n            }\n            subscriber.next(result.value);\n        }\n    }\n    finally {\n        await ((_a = iterator.return) === null || _a === void 0 ? void 0 : _a.call(iterator));\n    }\n}\n/**\n * Returns a string of \"project:target[:configuration]\" for the target object.\n */\nfunction targetStringFromTarget({ project, target, configuration }) {\n    return `${project}:${target}${configuration !== undefined ? ':' + configuration : ''}`;\n}\nexports.targetStringFromTarget = targetStringFromTarget;\n/**\n * Return a Target tuple from a string.\n */\nfunction targetFromTargetString(str) {\n    const tuple = str.split(/:/, 3);\n    if (tuple.length < 2) {\n        throw new Error('Invalid target string: ' + JSON.stringify(str));\n    }\n    return {\n        project: tuple[0],\n        target: tuple[1],\n        ...(tuple[2] !== undefined) && { configuration: tuple[2] },\n    };\n}\nexports.targetFromTargetString = targetFromTargetString;\n/**\n * Schedule a target, and forget about its run. This will return an observable of outputs, that\n * as a a teardown will stop the target from running. This means that the Run object this returns\n * should not be shared.\n *\n * The reason this is not part of the Context interface is to keep the Context as normal form as\n * possible. This is really an utility that people would implement in their project.\n *\n * @param context The context of your current execution.\n * @param target The target to schedule.\n * @param overrides Overrides that are used in the target.\n * @param scheduleOptions Additional scheduling options.\n */\nfunction scheduleTargetAndForget(context, target, overrides, scheduleOptions) {\n    let resolve = null;\n    const promise = new Promise(r => resolve = r);\n    context.addTeardown(() => promise);\n    return rxjs_1.from(context.scheduleTarget(target, overrides, scheduleOptions)).pipe(operators_1.switchMap(run => new rxjs_1.Observable(observer => {\n        const subscription = run.output.subscribe(observer);\n        return () => {\n            subscription.unsubscribe();\n            // We can properly ignore the floating promise as it's a \"reverse\" promise; the teardown\n            // is waiting for the resolve.\n            // tslint:disable-next-line:no-floating-promises\n            run.stop().then(resolve);\n        };\n    })));\n}\nexports.scheduleTargetAndForget = scheduleTargetAndForget;\n"]},"metadata":{},"sourceType":"script"}