{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nvar _createForOfIteratorHelper = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar Template = require(\"../Template\");\n\nvar WebAssemblyImportDependency = require(\"../dependencies/WebAssemblyImportDependency\");\n/** @typedef {import(\"../Module\")} Module */\n\n/** @typedef {Object} UsedWasmDependency\n * @property {WebAssemblyImportDependency} dependency the dependency\n * @property {string} name the export name\n * @property {string} module the module name\n */\n\n\nvar MANGLED_MODULE = \"a\";\n/**\n * @param {Module} module the module\n * @param {boolean} mangle mangle module and export names\n * @returns {UsedWasmDependency[]} used dependencies and (mangled) name\n */\n\nvar getUsedDependencies = function getUsedDependencies(module, mangle) {\n  /** @type {UsedWasmDependency[]} */\n  var array = [];\n  var importIndex = 0;\n\n  var _iterator = _createForOfIteratorHelper(module.dependencies),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var dep = _step.value;\n\n      if (dep instanceof WebAssemblyImportDependency) {\n        if (dep.description.type === \"GlobalType\" || dep.module === null) {\n          continue;\n        }\n\n        var exportName = dep.name; // TODO add the following 3 lines when removing of ModuleExport is possible\n        // const importedModule = dep.module;\n        // const usedName = importedModule && importedModule.isUsed(exportName);\n        // if (usedName !== false) {\n\n        if (mangle) {\n          array.push({\n            dependency: dep,\n            name: Template.numberToIdentifer(importIndex++),\n            module: MANGLED_MODULE\n          });\n        } else {\n          array.push({\n            dependency: dep,\n            name: exportName,\n            module: dep.request\n          });\n        }\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  return array;\n};\n\nexports.getUsedDependencies = getUsedDependencies;\nexports.MANGLED_MODULE = MANGLED_MODULE;","map":{"version":3,"sources":["/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/webpack/lib/wasm/WebAssemblyUtils.js"],"names":["Template","require","WebAssemblyImportDependency","MANGLED_MODULE","getUsedDependencies","module","mangle","array","importIndex","dependencies","dep","description","type","exportName","name","push","dependency","numberToIdentifer","request","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;;;AAEA,IAAMA,QAAQ,GAAGC,OAAO,CAAC,aAAD,CAAxB;;AACA,IAAMC,2BAA2B,GAAGD,OAAO,CAAC,6CAAD,CAA3C;AAEA;;AAEA;AACA;AACA;AACA;AACA;;;AAEA,IAAME,cAAc,GAAG,GAAvB;AAEA;AACA;AACA;AACA;AACA;;AACA,IAAMC,mBAAmB,GAAG,SAAtBA,mBAAsB,CAACC,MAAD,EAASC,MAAT,EAAoB;AAC/C;AACA,MAAMC,KAAK,GAAG,EAAd;AACA,MAAIC,WAAW,GAAG,CAAlB;;AAH+C,6CAI7BH,MAAM,CAACI,YAJsB;AAAA;;AAAA;AAI/C,wDAAuC;AAAA,UAA5BC,GAA4B;;AACtC,UAAIA,GAAG,YAAYR,2BAAnB,EAAgD;AAC/C,YAAIQ,GAAG,CAACC,WAAJ,CAAgBC,IAAhB,KAAyB,YAAzB,IAAyCF,GAAG,CAACL,MAAJ,KAAe,IAA5D,EAAkE;AACjE;AACA;;AAED,YAAMQ,UAAU,GAAGH,GAAG,CAACI,IAAvB,CAL+C,CAM/C;AACA;AACA;AACA;;AACA,YAAIR,MAAJ,EAAY;AACXC,UAAAA,KAAK,CAACQ,IAAN,CAAW;AACVC,YAAAA,UAAU,EAAEN,GADF;AAEVI,YAAAA,IAAI,EAAEd,QAAQ,CAACiB,iBAAT,CAA2BT,WAAW,EAAtC,CAFI;AAGVH,YAAAA,MAAM,EAAEF;AAHE,WAAX;AAKA,SAND,MAMO;AACNI,UAAAA,KAAK,CAACQ,IAAN,CAAW;AACVC,YAAAA,UAAU,EAAEN,GADF;AAEVI,YAAAA,IAAI,EAAED,UAFI;AAGVR,YAAAA,MAAM,EAAEK,GAAG,CAACQ;AAHF,WAAX;AAKA;AACD;AACD;AA7B8C;AAAA;AAAA;AAAA;AAAA;;AA8B/C,SAAOX,KAAP;AACA,CA/BD;;AAiCAY,OAAO,CAACf,mBAAR,GAA8BA,mBAA9B;AACAe,OAAO,CAAChB,cAAR,GAAyBA,cAAzB","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst Template = require(\"../Template\");\nconst WebAssemblyImportDependency = require(\"../dependencies/WebAssemblyImportDependency\");\n\n/** @typedef {import(\"../Module\")} Module */\n\n/** @typedef {Object} UsedWasmDependency\n * @property {WebAssemblyImportDependency} dependency the dependency\n * @property {string} name the export name\n * @property {string} module the module name\n */\n\nconst MANGLED_MODULE = \"a\";\n\n/**\n * @param {Module} module the module\n * @param {boolean} mangle mangle module and export names\n * @returns {UsedWasmDependency[]} used dependencies and (mangled) name\n */\nconst getUsedDependencies = (module, mangle) => {\n\t/** @type {UsedWasmDependency[]} */\n\tconst array = [];\n\tlet importIndex = 0;\n\tfor (const dep of module.dependencies) {\n\t\tif (dep instanceof WebAssemblyImportDependency) {\n\t\t\tif (dep.description.type === \"GlobalType\" || dep.module === null) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst exportName = dep.name;\n\t\t\t// TODO add the following 3 lines when removing of ModuleExport is possible\n\t\t\t// const importedModule = dep.module;\n\t\t\t// const usedName = importedModule && importedModule.isUsed(exportName);\n\t\t\t// if (usedName !== false) {\n\t\t\tif (mangle) {\n\t\t\t\tarray.push({\n\t\t\t\t\tdependency: dep,\n\t\t\t\t\tname: Template.numberToIdentifer(importIndex++),\n\t\t\t\t\tmodule: MANGLED_MODULE\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tarray.push({\n\t\t\t\t\tdependency: dep,\n\t\t\t\t\tname: exportName,\n\t\t\t\t\tmodule: dep.request\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n\treturn array;\n};\n\nexports.getUsedDependencies = getUsedDependencies;\nexports.MANGLED_MODULE = MANGLED_MODULE;\n"]},"metadata":{},"sourceType":"script"}