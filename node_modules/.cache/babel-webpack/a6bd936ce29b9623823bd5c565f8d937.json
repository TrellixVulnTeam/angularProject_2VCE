{"ast":null,"code":"'use strict';\n\nvar _objectSpread = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/objectSpread2\");\n\nvar _regeneratorRuntime = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar path = require('path');\n\nvar locatePath = require('locate-path');\n\nvar pathExists = require('path-exists');\n\nvar stop = Symbol('findUp.stop');\n\nmodule.exports = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(name) {\n    var options,\n        directory,\n        _path$parse,\n        root,\n        paths,\n        runMatcher,\n        foundPath,\n        _args2 = arguments;\n\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            options = _args2.length > 1 && _args2[1] !== undefined ? _args2[1] : {};\n            directory = path.resolve(options.cwd || '');\n            _path$parse = path.parse(directory), root = _path$parse.root;\n            paths = [].concat(name);\n\n            runMatcher = /*#__PURE__*/function () {\n              var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(locateOptions) {\n                var foundPath;\n                return _regeneratorRuntime.wrap(function _callee$(_context) {\n                  while (1) {\n                    switch (_context.prev = _context.next) {\n                      case 0:\n                        if (!(typeof name !== 'function')) {\n                          _context.next = 2;\n                          break;\n                        }\n\n                        return _context.abrupt(\"return\", locatePath(paths, locateOptions));\n\n                      case 2:\n                        _context.next = 4;\n                        return name(locateOptions.cwd);\n\n                      case 4:\n                        foundPath = _context.sent;\n\n                        if (!(typeof foundPath === 'string')) {\n                          _context.next = 7;\n                          break;\n                        }\n\n                        return _context.abrupt(\"return\", locatePath([foundPath], locateOptions));\n\n                      case 7:\n                        return _context.abrupt(\"return\", foundPath);\n\n                      case 8:\n                      case \"end\":\n                        return _context.stop();\n                    }\n                  }\n                }, _callee);\n              }));\n\n              return function runMatcher(_x2) {\n                return _ref2.apply(this, arguments);\n              };\n            }(); // eslint-disable-next-line no-constant-condition\n\n\n          case 5:\n            if (!true) {\n              _context2.next = 18;\n              break;\n            }\n\n            _context2.next = 8;\n            return runMatcher(_objectSpread(_objectSpread({}, options), {}, {\n              cwd: directory\n            }));\n\n          case 8:\n            foundPath = _context2.sent;\n\n            if (!(foundPath === stop)) {\n              _context2.next = 11;\n              break;\n            }\n\n            return _context2.abrupt(\"return\");\n\n          case 11:\n            if (!foundPath) {\n              _context2.next = 13;\n              break;\n            }\n\n            return _context2.abrupt(\"return\", path.resolve(directory, foundPath));\n\n          case 13:\n            if (!(directory === root)) {\n              _context2.next = 15;\n              break;\n            }\n\n            return _context2.abrupt(\"return\");\n\n          case 15:\n            directory = path.dirname(directory);\n            _context2.next = 5;\n            break;\n\n          case 18:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function (_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nmodule.exports.sync = function (name) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var directory = path.resolve(options.cwd || '');\n\n  var _path$parse2 = path.parse(directory),\n      root = _path$parse2.root;\n\n  var paths = [].concat(name);\n\n  var runMatcher = function runMatcher(locateOptions) {\n    if (typeof name !== 'function') {\n      return locatePath.sync(paths, locateOptions);\n    }\n\n    var foundPath = name(locateOptions.cwd);\n\n    if (typeof foundPath === 'string') {\n      return locatePath.sync([foundPath], locateOptions);\n    }\n\n    return foundPath;\n  }; // eslint-disable-next-line no-constant-condition\n\n\n  while (true) {\n    var foundPath = runMatcher(_objectSpread(_objectSpread({}, options), {}, {\n      cwd: directory\n    }));\n\n    if (foundPath === stop) {\n      return;\n    }\n\n    if (foundPath) {\n      return path.resolve(directory, foundPath);\n    }\n\n    if (directory === root) {\n      return;\n    }\n\n    directory = path.dirname(directory);\n  }\n};\n\nmodule.exports.exists = pathExists;\nmodule.exports.sync.exists = pathExists.sync;\nmodule.exports.stop = stop;","map":{"version":3,"sources":["/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/find-cache-dir/node_modules/find-up/index.js"],"names":["path","require","locatePath","pathExists","stop","Symbol","module","exports","name","options","directory","resolve","cwd","parse","root","paths","concat","runMatcher","locateOptions","foundPath","dirname","sync","exists"],"mappings":"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","sourcesContent":["'use strict';\nconst path = require('path');\nconst locatePath = require('locate-path');\nconst pathExists = require('path-exists');\n\nconst stop = Symbol('findUp.stop');\n\nmodule.exports = async (name, options = {}) => {\n\tlet directory = path.resolve(options.cwd || '');\n\tconst {root} = path.parse(directory);\n\tconst paths = [].concat(name);\n\n\tconst runMatcher = async locateOptions => {\n\t\tif (typeof name !== 'function') {\n\t\t\treturn locatePath(paths, locateOptions);\n\t\t}\n\n\t\tconst foundPath = await name(locateOptions.cwd);\n\t\tif (typeof foundPath === 'string') {\n\t\t\treturn locatePath([foundPath], locateOptions);\n\t\t}\n\n\t\treturn foundPath;\n\t};\n\n\t// eslint-disable-next-line no-constant-condition\n\twhile (true) {\n\t\t// eslint-disable-next-line no-await-in-loop\n\t\tconst foundPath = await runMatcher({...options, cwd: directory});\n\n\t\tif (foundPath === stop) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (foundPath) {\n\t\t\treturn path.resolve(directory, foundPath);\n\t\t}\n\n\t\tif (directory === root) {\n\t\t\treturn;\n\t\t}\n\n\t\tdirectory = path.dirname(directory);\n\t}\n};\n\nmodule.exports.sync = (name, options = {}) => {\n\tlet directory = path.resolve(options.cwd || '');\n\tconst {root} = path.parse(directory);\n\tconst paths = [].concat(name);\n\n\tconst runMatcher = locateOptions => {\n\t\tif (typeof name !== 'function') {\n\t\t\treturn locatePath.sync(paths, locateOptions);\n\t\t}\n\n\t\tconst foundPath = name(locateOptions.cwd);\n\t\tif (typeof foundPath === 'string') {\n\t\t\treturn locatePath.sync([foundPath], locateOptions);\n\t\t}\n\n\t\treturn foundPath;\n\t};\n\n\t// eslint-disable-next-line no-constant-condition\n\twhile (true) {\n\t\tconst foundPath = runMatcher({...options, cwd: directory});\n\n\t\tif (foundPath === stop) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (foundPath) {\n\t\t\treturn path.resolve(directory, foundPath);\n\t\t}\n\n\t\tif (directory === root) {\n\t\t\treturn;\n\t\t}\n\n\t\tdirectory = path.dirname(directory);\n\t}\n};\n\nmodule.exports.exists = pathExists;\n\nmodule.exports.sync.exists = pathExists.sync;\n\nmodule.exports.stop = stop;\n"]},"metadata":{},"sourceType":"script"}