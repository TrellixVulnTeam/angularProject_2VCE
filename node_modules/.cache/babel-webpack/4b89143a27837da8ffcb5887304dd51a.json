{"ast":null,"code":"'use strict';\n\nvar fs = require('graceful-fs');\n\nvar path = require('path');\n\nvar helper = require('./helper');\n\nvar log = require('./logger').create('plugin');\n\nvar IGNORED_PACKAGES = ['karma-cli', 'karma-runner.github.com'];\n\nfunction resolve(plugins, emitter) {\n  var modules = [];\n\n  function requirePlugin(name) {\n    log.debug(\"Loading plugin \".concat(name, \".\"));\n\n    try {\n      modules.push(require(name));\n    } catch (e) {\n      if (e.code === 'MODULE_NOT_FOUND' && e.message.includes(name)) {\n        log.error(\"Cannot find plugin \\\"\".concat(name, \"\\\".\\n  Did you forget to install it?\\n  npm install \").concat(name, \" --save-dev\"));\n      } else {\n        log.error(\"Error during loading \\\"\".concat(name, \"\\\" plugin:\\n  \").concat(e.message));\n      }\n\n      emitter.emit('load_error', 'plug_in', name);\n    }\n  }\n\n  plugins.forEach(function (plugin) {\n    if (helper.isString(plugin)) {\n      if (!plugin.includes('*')) {\n        requirePlugin(plugin);\n        return;\n      }\n\n      var pluginDirectory = path.normalize(path.join(__dirname, '/../..'));\n      var regexp = new RegExp(\"^\".concat(plugin.replace('*', '.*')));\n      log.debug(\"Loading \".concat(plugin, \" from \").concat(pluginDirectory));\n      fs.readdirSync(pluginDirectory).filter(function (pluginName) {\n        return !IGNORED_PACKAGES.includes(pluginName) && regexp.test(pluginName);\n      }).forEach(function (pluginName) {\n        return requirePlugin(\"\".concat(pluginDirectory, \"/\").concat(pluginName));\n      });\n    } else if (helper.isObject(plugin)) {\n      log.debug(\"Loading inlined plugin (defining \".concat(Object.keys(plugin).join(', '), \").\"));\n      modules.push(plugin);\n    } else {\n      log.error(\"Invalid plugin \".concat(plugin));\n      emitter.emit('load_error', 'plug_in', plugin);\n    }\n  });\n  return modules;\n}\n\nexports.resolve = resolve;","map":{"version":3,"sources":["/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/karma/lib/plugin.js"],"names":["fs","require","path","helper","log","create","IGNORED_PACKAGES","resolve","plugins","emitter","modules","requirePlugin","name","debug","push","e","code","message","includes","error","emit","forEach","plugin","isString","pluginDirectory","normalize","join","__dirname","regexp","RegExp","replace","readdirSync","filter","pluginName","test","isObject","Object","keys","exports"],"mappings":"AAAA;;AAEA,IAAMA,EAAE,GAAGC,OAAO,CAAC,aAAD,CAAlB;;AACA,IAAMC,IAAI,GAAGD,OAAO,CAAC,MAAD,CAApB;;AACA,IAAME,MAAM,GAAGF,OAAO,CAAC,UAAD,CAAtB;;AAEA,IAAMG,GAAG,GAAGH,OAAO,CAAC,UAAD,CAAP,CAAoBI,MAApB,CAA2B,QAA3B,CAAZ;;AAEA,IAAMC,gBAAgB,GAAG,CAAC,WAAD,EAAc,yBAAd,CAAzB;;AAEA,SAASC,OAAT,CAAkBC,OAAlB,EAA2BC,OAA3B,EAAoC;AAClC,MAAMC,OAAO,GAAG,EAAhB;;AAEA,WAASC,aAAT,CAAwBC,IAAxB,EAA8B;AAC5BR,IAAAA,GAAG,CAACS,KAAJ,0BAA4BD,IAA5B;;AACA,QAAI;AACFF,MAAAA,OAAO,CAACI,IAAR,CAAab,OAAO,CAACW,IAAD,CAApB;AACD,KAFD,CAEE,OAAOG,CAAP,EAAU;AACV,UAAIA,CAAC,CAACC,IAAF,KAAW,kBAAX,IAAiCD,CAAC,CAACE,OAAF,CAAUC,QAAV,CAAmBN,IAAnB,CAArC,EAA+D;AAC7DR,QAAAA,GAAG,CAACe,KAAJ,gCAAiCP,IAAjC,iEAA2FA,IAA3F;AACD,OAFD,MAEO;AACLR,QAAAA,GAAG,CAACe,KAAJ,kCAAmCP,IAAnC,2BAAuDG,CAAC,CAACE,OAAzD;AACD;;AACDR,MAAAA,OAAO,CAACW,IAAR,CAAa,YAAb,EAA2B,SAA3B,EAAsCR,IAAtC;AACD;AACF;;AAEDJ,EAAAA,OAAO,CAACa,OAAR,CAAgB,UAAUC,MAAV,EAAkB;AAChC,QAAInB,MAAM,CAACoB,QAAP,CAAgBD,MAAhB,CAAJ,EAA6B;AAC3B,UAAI,CAACA,MAAM,CAACJ,QAAP,CAAgB,GAAhB,CAAL,EAA2B;AACzBP,QAAAA,aAAa,CAACW,MAAD,CAAb;AACA;AACD;;AACD,UAAME,eAAe,GAAGtB,IAAI,CAACuB,SAAL,CAAevB,IAAI,CAACwB,IAAL,CAAUC,SAAV,EAAqB,QAArB,CAAf,CAAxB;AACA,UAAMC,MAAM,GAAG,IAAIC,MAAJ,YAAeP,MAAM,CAACQ,OAAP,CAAe,GAAf,EAAoB,IAApB,CAAf,EAAf;AAEA1B,MAAAA,GAAG,CAACS,KAAJ,mBAAqBS,MAArB,mBAAoCE,eAApC;AACAxB,MAAAA,EAAE,CAAC+B,WAAH,CAAeP,eAAf,EACGQ,MADH,CACU,UAACC,UAAD;AAAA,eAAgB,CAAC3B,gBAAgB,CAACY,QAAjB,CAA0Be,UAA1B,CAAD,IAA0CL,MAAM,CAACM,IAAP,CAAYD,UAAZ,CAA1D;AAAA,OADV,EAEGZ,OAFH,CAEW,UAACY,UAAD;AAAA,eAAgBtB,aAAa,WAAIa,eAAJ,cAAuBS,UAAvB,EAA7B;AAAA,OAFX;AAGD,KAZD,MAYO,IAAI9B,MAAM,CAACgC,QAAP,CAAgBb,MAAhB,CAAJ,EAA6B;AAClClB,MAAAA,GAAG,CAACS,KAAJ,4CAA8CuB,MAAM,CAACC,IAAP,CAAYf,MAAZ,EAAoBI,IAApB,CAAyB,IAAzB,CAA9C;AACAhB,MAAAA,OAAO,CAACI,IAAR,CAAaQ,MAAb;AACD,KAHM,MAGA;AACLlB,MAAAA,GAAG,CAACe,KAAJ,0BAA4BG,MAA5B;AACAb,MAAAA,OAAO,CAACW,IAAR,CAAa,YAAb,EAA2B,SAA3B,EAAsCE,MAAtC;AACD;AACF,GApBD;AAsBA,SAAOZ,OAAP;AACD;;AAED4B,OAAO,CAAC/B,OAAR,GAAkBA,OAAlB","sourcesContent":["'use strict'\n\nconst fs = require('graceful-fs')\nconst path = require('path')\nconst helper = require('./helper')\n\nconst log = require('./logger').create('plugin')\n\nconst IGNORED_PACKAGES = ['karma-cli', 'karma-runner.github.com']\n\nfunction resolve (plugins, emitter) {\n  const modules = []\n\n  function requirePlugin (name) {\n    log.debug(`Loading plugin ${name}.`)\n    try {\n      modules.push(require(name))\n    } catch (e) {\n      if (e.code === 'MODULE_NOT_FOUND' && e.message.includes(name)) {\n        log.error(`Cannot find plugin \"${name}\".\\n  Did you forget to install it?\\n  npm install ${name} --save-dev`)\n      } else {\n        log.error(`Error during loading \"${name}\" plugin:\\n  ${e.message}`)\n      }\n      emitter.emit('load_error', 'plug_in', name)\n    }\n  }\n\n  plugins.forEach(function (plugin) {\n    if (helper.isString(plugin)) {\n      if (!plugin.includes('*')) {\n        requirePlugin(plugin)\n        return\n      }\n      const pluginDirectory = path.normalize(path.join(__dirname, '/../..'))\n      const regexp = new RegExp(`^${plugin.replace('*', '.*')}`)\n\n      log.debug(`Loading ${plugin} from ${pluginDirectory}`)\n      fs.readdirSync(pluginDirectory)\n        .filter((pluginName) => !IGNORED_PACKAGES.includes(pluginName) && regexp.test(pluginName))\n        .forEach((pluginName) => requirePlugin(`${pluginDirectory}/${pluginName}`))\n    } else if (helper.isObject(plugin)) {\n      log.debug(`Loading inlined plugin (defining ${Object.keys(plugin).join(', ')}).`)\n      modules.push(plugin)\n    } else {\n      log.error(`Invalid plugin ${plugin}`)\n      emitter.emit('load_error', 'plug_in', plugin)\n    }\n  })\n\n  return modules\n}\n\nexports.resolve = resolve\n"]},"metadata":{},"sourceType":"script"}