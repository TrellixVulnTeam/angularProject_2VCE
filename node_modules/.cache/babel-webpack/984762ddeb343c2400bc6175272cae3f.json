{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nvar _createForOfIteratorHelper = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _classCallCheck = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/createClass\");\n\nvar createHash = require(\"./util/createHash\");\n\nvar validateOptions = require(\"schema-utils\");\n\nvar schema = require(\"../schemas/plugins/HashedModuleIdsPlugin.json\");\n/** @typedef {import(\"../declarations/plugins/HashedModuleIdsPlugin\").HashedModuleIdsPluginOptions} HashedModuleIdsPluginOptions */\n\n\nvar HashedModuleIdsPlugin = /*#__PURE__*/function () {\n  /**\n   * @param {HashedModuleIdsPluginOptions=} options options object\n   */\n  function HashedModuleIdsPlugin(options) {\n    _classCallCheck(this, HashedModuleIdsPlugin);\n\n    if (!options) options = {};\n    validateOptions(schema, options, \"Hashed Module Ids Plugin\");\n    /** @type {HashedModuleIdsPluginOptions} */\n\n    this.options = Object.assign({\n      context: null,\n      hashFunction: \"md4\",\n      hashDigest: \"base64\",\n      hashDigestLength: 4\n    }, options);\n  }\n\n  _createClass(HashedModuleIdsPlugin, [{\n    key: \"apply\",\n    value: function apply(compiler) {\n      var _this = this;\n\n      var options = this.options;\n      compiler.hooks.compilation.tap(\"HashedModuleIdsPlugin\", function (compilation) {\n        var usedIds = new Set();\n        compilation.hooks.beforeModuleIds.tap(\"HashedModuleIdsPlugin\", function (modules) {\n          var _iterator = _createForOfIteratorHelper(modules),\n              _step;\n\n          try {\n            for (_iterator.s(); !(_step = _iterator.n()).done;) {\n              var _module = _step.value;\n\n              if (_module.id === null && _module.libIdent) {\n                var id = _module.libIdent({\n                  context: _this.options.context || compiler.options.context\n                });\n\n                var hash = createHash(options.hashFunction);\n                hash.update(id);\n                var hashId =\n                /** @type {string} */\n                hash.digest(options.hashDigest);\n                var len = options.hashDigestLength;\n\n                while (usedIds.has(hashId.substr(0, len))) {\n                  len++;\n                }\n\n                _module.id = hashId.substr(0, len);\n                usedIds.add(_module.id);\n              }\n            }\n          } catch (err) {\n            _iterator.e(err);\n          } finally {\n            _iterator.f();\n          }\n        });\n      });\n    }\n  }]);\n\n  return HashedModuleIdsPlugin;\n}();\n\nmodule.exports = HashedModuleIdsPlugin;","map":{"version":3,"sources":["/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/webpack/lib/HashedModuleIdsPlugin.js"],"names":["createHash","require","validateOptions","schema","HashedModuleIdsPlugin","options","Object","assign","context","hashFunction","hashDigest","hashDigestLength","compiler","hooks","compilation","tap","usedIds","Set","beforeModuleIds","modules","module","id","libIdent","hash","update","hashId","digest","len","has","substr","add","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;;;;;;;AACA,IAAMA,UAAU,GAAGC,OAAO,CAAC,mBAAD,CAA1B;;AAEA,IAAMC,eAAe,GAAGD,OAAO,CAAC,cAAD,CAA/B;;AACA,IAAME,MAAM,GAAGF,OAAO,CAAC,+CAAD,CAAtB;AAEA;;;IAEMG,qB;AACL;AACD;AACA;AACC,iCAAYC,OAAZ,EAAqB;AAAA;;AACpB,QAAI,CAACA,OAAL,EAAcA,OAAO,GAAG,EAAV;AAEdH,IAAAA,eAAe,CAACC,MAAD,EAASE,OAAT,EAAkB,0BAAlB,CAAf;AAEA;;AACA,SAAKA,OAAL,GAAeC,MAAM,CAACC,MAAP,CACd;AACCC,MAAAA,OAAO,EAAE,IADV;AAECC,MAAAA,YAAY,EAAE,KAFf;AAGCC,MAAAA,UAAU,EAAE,QAHb;AAICC,MAAAA,gBAAgB,EAAE;AAJnB,KADc,EAOdN,OAPc,CAAf;AASA;;;;WAED,eAAMO,QAAN,EAAgB;AAAA;;AACf,UAAMP,OAAO,GAAG,KAAKA,OAArB;AACAO,MAAAA,QAAQ,CAACC,KAAT,CAAeC,WAAf,CAA2BC,GAA3B,CAA+B,uBAA/B,EAAwD,UAAAD,WAAW,EAAI;AACtE,YAAME,OAAO,GAAG,IAAIC,GAAJ,EAAhB;AACAH,QAAAA,WAAW,CAACD,KAAZ,CAAkBK,eAAlB,CAAkCH,GAAlC,CACC,uBADD,EAEC,UAAAI,OAAO,EAAI;AAAA,qDACWA,OADX;AAAA;;AAAA;AACV,gEAA8B;AAAA,kBAAnBC,OAAmB;;AAC7B,kBAAIA,OAAM,CAACC,EAAP,KAAc,IAAd,IAAsBD,OAAM,CAACE,QAAjC,EAA2C;AAC1C,oBAAMD,EAAE,GAAGD,OAAM,CAACE,QAAP,CAAgB;AAC1Bd,kBAAAA,OAAO,EAAE,KAAI,CAACH,OAAL,CAAaG,OAAb,IAAwBI,QAAQ,CAACP,OAAT,CAAiBG;AADxB,iBAAhB,CAAX;;AAGA,oBAAMe,IAAI,GAAGvB,UAAU,CAACK,OAAO,CAACI,YAAT,CAAvB;AACAc,gBAAAA,IAAI,CAACC,MAAL,CAAYH,EAAZ;AACA,oBAAMI,MAAM;AAAG;AAAuBF,gBAAAA,IAAI,CAACG,MAAL,CACrCrB,OAAO,CAACK,UAD6B,CAAtC;AAGA,oBAAIiB,GAAG,GAAGtB,OAAO,CAACM,gBAAlB;;AACA,uBAAOK,OAAO,CAACY,GAAR,CAAYH,MAAM,CAACI,MAAP,CAAc,CAAd,EAAiBF,GAAjB,CAAZ,CAAP;AAA2CA,kBAAAA,GAAG;AAA9C;;AACAP,gBAAAA,OAAM,CAACC,EAAP,GAAYI,MAAM,CAACI,MAAP,CAAc,CAAd,EAAiBF,GAAjB,CAAZ;AACAX,gBAAAA,OAAO,CAACc,GAAR,CAAYV,OAAM,CAACC,EAAnB;AACA;AACD;AAhBS;AAAA;AAAA;AAAA;AAAA;AAiBV,SAnBF;AAqBA,OAvBD;AAwBA;;;;;;AAGFD,MAAM,CAACW,OAAP,GAAiB3B,qBAAjB","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\nconst createHash = require(\"./util/createHash\");\n\nconst validateOptions = require(\"schema-utils\");\nconst schema = require(\"../schemas/plugins/HashedModuleIdsPlugin.json\");\n\n/** @typedef {import(\"../declarations/plugins/HashedModuleIdsPlugin\").HashedModuleIdsPluginOptions} HashedModuleIdsPluginOptions */\n\nclass HashedModuleIdsPlugin {\n\t/**\n\t * @param {HashedModuleIdsPluginOptions=} options options object\n\t */\n\tconstructor(options) {\n\t\tif (!options) options = {};\n\n\t\tvalidateOptions(schema, options, \"Hashed Module Ids Plugin\");\n\n\t\t/** @type {HashedModuleIdsPluginOptions} */\n\t\tthis.options = Object.assign(\n\t\t\t{\n\t\t\t\tcontext: null,\n\t\t\t\thashFunction: \"md4\",\n\t\t\t\thashDigest: \"base64\",\n\t\t\t\thashDigestLength: 4\n\t\t\t},\n\t\t\toptions\n\t\t);\n\t}\n\n\tapply(compiler) {\n\t\tconst options = this.options;\n\t\tcompiler.hooks.compilation.tap(\"HashedModuleIdsPlugin\", compilation => {\n\t\t\tconst usedIds = new Set();\n\t\t\tcompilation.hooks.beforeModuleIds.tap(\n\t\t\t\t\"HashedModuleIdsPlugin\",\n\t\t\t\tmodules => {\n\t\t\t\t\tfor (const module of modules) {\n\t\t\t\t\t\tif (module.id === null && module.libIdent) {\n\t\t\t\t\t\t\tconst id = module.libIdent({\n\t\t\t\t\t\t\t\tcontext: this.options.context || compiler.options.context\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\tconst hash = createHash(options.hashFunction);\n\t\t\t\t\t\t\thash.update(id);\n\t\t\t\t\t\t\tconst hashId = /** @type {string} */ (hash.digest(\n\t\t\t\t\t\t\t\toptions.hashDigest\n\t\t\t\t\t\t\t));\n\t\t\t\t\t\t\tlet len = options.hashDigestLength;\n\t\t\t\t\t\t\twhile (usedIds.has(hashId.substr(0, len))) len++;\n\t\t\t\t\t\t\tmodule.id = hashId.substr(0, len);\n\t\t\t\t\t\t\tusedIds.add(module.id);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t);\n\t\t});\n\t}\n}\n\nmodule.exports = HashedModuleIdsPlugin;\n"]},"metadata":{},"sourceType":"script"}