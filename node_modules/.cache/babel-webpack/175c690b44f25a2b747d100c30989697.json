{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nvar _slicedToArray = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nvar _createForOfIteratorHelper = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _classCallCheck = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/createClass\");\n\nvar SortableSet = require(\"./util/SortableSet\");\n\nvar compareLocations = require(\"./compareLocations\");\n/** @typedef {import(\"./Chunk\")} Chunk */\n\n/** @typedef {import(\"./Module\")} Module */\n\n/** @typedef {import(\"./ModuleReason\")} ModuleReason */\n\n/** @typedef {{module: Module, loc: TODO, request: string}} OriginRecord */\n\n/** @typedef {string|{name: string}} ChunkGroupOptions */\n\n\nvar debugId = 5000;\n/**\n * @template T\n * @param {SortableSet<T>} set set to convert to array.\n * @returns {T[]} the array format of existing set\n */\n\nvar getArray = function getArray(set) {\n  return Array.from(set);\n};\n/**\n * A convenience method used to sort chunks based on their id's\n * @param {ChunkGroup} a first sorting comparator\n * @param {ChunkGroup} b second sorting comparator\n * @returns {1|0|-1} a sorting index to determine order\n */\n\n\nvar sortById = function sortById(a, b) {\n  if (a.id < b.id) return -1;\n  if (b.id < a.id) return 1;\n  return 0;\n};\n/**\n * @param {OriginRecord} a the first comparator in sort\n * @param {OriginRecord} b the second comparator in sort\n * @returns {1|-1|0} returns sorting order as index\n */\n\n\nvar sortOrigin = function sortOrigin(a, b) {\n  var aIdent = a.module ? a.module.identifier() : \"\";\n  var bIdent = b.module ? b.module.identifier() : \"\";\n  if (aIdent < bIdent) return -1;\n  if (aIdent > bIdent) return 1;\n  return compareLocations(a.loc, b.loc);\n};\n\nvar ChunkGroup = /*#__PURE__*/function () {\n  /**\n   * Creates an instance of ChunkGroup.\n   * @param {ChunkGroupOptions=} options chunk group options passed to chunkGroup\n   */\n  function ChunkGroup(options) {\n    _classCallCheck(this, ChunkGroup);\n\n    if (typeof options === \"string\") {\n      options = {\n        name: options\n      };\n    } else if (!options) {\n      options = {\n        name: undefined\n      };\n    }\n    /** @type {number} */\n\n\n    this.groupDebugId = debugId++;\n    this.options = options;\n    /** @type {SortableSet<ChunkGroup>} */\n\n    this._children = new SortableSet(undefined, sortById);\n    this._parents = new SortableSet(undefined, sortById);\n    this._blocks = new SortableSet();\n    /** @type {Chunk[]} */\n\n    this.chunks = [];\n    /** @type {OriginRecord[]} */\n\n    this.origins = [];\n    /** Indices in top-down order */\n\n    /** @private @type {Map<Module, number>} */\n\n    this._moduleIndices = new Map();\n    /** Indices in bottom-up order */\n\n    /** @private @type {Map<Module, number>} */\n\n    this._moduleIndices2 = new Map();\n  }\n  /**\n   * when a new chunk is added to a chunkGroup, addingOptions will occur.\n   * @param {ChunkGroupOptions} options the chunkGroup options passed to addOptions\n   * @returns {void}\n   */\n\n\n  _createClass(ChunkGroup, [{\n    key: \"addOptions\",\n    value: function addOptions(options) {\n      for (var _i = 0, _Object$keys = Object.keys(options); _i < _Object$keys.length; _i++) {\n        var key = _Object$keys[_i];\n\n        if (this.options[key] === undefined) {\n          this.options[key] = options[key];\n        } else if (this.options[key] !== options[key]) {\n          if (key.endsWith(\"Order\")) {\n            this.options[key] = Math.max(this.options[key], options[key]);\n          } else {\n            throw new Error(\"ChunkGroup.addOptions: No option merge strategy for \".concat(key));\n          }\n        }\n      }\n    }\n    /**\n     * returns the name of current ChunkGroup\n     * @returns {string|undefined} returns the ChunkGroup name\n     */\n\n  }, {\n    key: \"name\",\n    get: function get() {\n      return this.options.name;\n    }\n    /**\n     * sets a new name for current ChunkGroup\n     * @param {string} value the new name for ChunkGroup\n     * @returns {void}\n     */\n    ,\n    set: function set(value) {\n      this.options.name = value;\n    }\n    /**\n     * get a uniqueId for ChunkGroup, made up of its member Chunk debugId's\n     * @returns {string} a unique concatenation of chunk debugId's\n     */\n\n  }, {\n    key: \"debugId\",\n    get: function get() {\n      return Array.from(this.chunks, function (x) {\n        return x.debugId;\n      }).join(\"+\");\n    }\n    /**\n     * get a unique id for ChunkGroup, made up of its member Chunk id's\n     * @returns {string} a unique concatenation of chunk ids\n     */\n\n  }, {\n    key: \"id\",\n    get: function get() {\n      return Array.from(this.chunks, function (x) {\n        return x.id;\n      }).join(\"+\");\n    }\n    /**\n     * Performs an unshift of a specific chunk\n     * @param {Chunk} chunk chunk being unshifted\n     * @returns {boolean} returns true if attempted chunk shift is accepted\n     */\n\n  }, {\n    key: \"unshiftChunk\",\n    value: function unshiftChunk(chunk) {\n      var oldIdx = this.chunks.indexOf(chunk);\n\n      if (oldIdx > 0) {\n        this.chunks.splice(oldIdx, 1);\n        this.chunks.unshift(chunk);\n      } else if (oldIdx < 0) {\n        this.chunks.unshift(chunk);\n        return true;\n      }\n\n      return false;\n    }\n    /**\n     * inserts a chunk before another existing chunk in group\n     * @param {Chunk} chunk Chunk being inserted\n     * @param {Chunk} before Placeholder/target chunk marking new chunk insertion point\n     * @returns {boolean} return true if insertion was successful\n     */\n\n  }, {\n    key: \"insertChunk\",\n    value: function insertChunk(chunk, before) {\n      var oldIdx = this.chunks.indexOf(chunk);\n      var idx = this.chunks.indexOf(before);\n\n      if (idx < 0) {\n        throw new Error(\"before chunk not found\");\n      }\n\n      if (oldIdx >= 0 && oldIdx > idx) {\n        this.chunks.splice(oldIdx, 1);\n        this.chunks.splice(idx, 0, chunk);\n      } else if (oldIdx < 0) {\n        this.chunks.splice(idx, 0, chunk);\n        return true;\n      }\n\n      return false;\n    }\n    /**\n     * add a chunk into ChunkGroup. Is pushed on or prepended\n     * @param {Chunk} chunk chunk being pushed into ChunkGroupS\n     * @returns {boolean} returns true if chunk addition was successful.\n     */\n\n  }, {\n    key: \"pushChunk\",\n    value: function pushChunk(chunk) {\n      var oldIdx = this.chunks.indexOf(chunk);\n\n      if (oldIdx >= 0) {\n        return false;\n      }\n\n      this.chunks.push(chunk);\n      return true;\n    }\n    /**\n     * @param {Chunk} oldChunk chunk to be replaced\n     * @param {Chunk} newChunk New chunk that will be replaced with\n     * @returns {boolean} returns true if the replacement was successful\n     */\n\n  }, {\n    key: \"replaceChunk\",\n    value: function replaceChunk(oldChunk, newChunk) {\n      var oldIdx = this.chunks.indexOf(oldChunk);\n      if (oldIdx < 0) return false;\n      var newIdx = this.chunks.indexOf(newChunk);\n\n      if (newIdx < 0) {\n        this.chunks[oldIdx] = newChunk;\n        return true;\n      }\n\n      if (newIdx < oldIdx) {\n        this.chunks.splice(oldIdx, 1);\n        return true;\n      } else if (newIdx !== oldIdx) {\n        this.chunks[oldIdx] = newChunk;\n        this.chunks.splice(newIdx, 1);\n        return true;\n      }\n    }\n  }, {\n    key: \"removeChunk\",\n    value: function removeChunk(chunk) {\n      var idx = this.chunks.indexOf(chunk);\n\n      if (idx >= 0) {\n        this.chunks.splice(idx, 1);\n        return true;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"isInitial\",\n    value: function isInitial() {\n      return false;\n    }\n  }, {\n    key: \"addChild\",\n    value: function addChild(chunk) {\n      if (this._children.has(chunk)) {\n        return false;\n      }\n\n      this._children.add(chunk);\n\n      return true;\n    }\n  }, {\n    key: \"getChildren\",\n    value: function getChildren() {\n      return this._children.getFromCache(getArray);\n    }\n  }, {\n    key: \"getNumberOfChildren\",\n    value: function getNumberOfChildren() {\n      return this._children.size;\n    }\n  }, {\n    key: \"childrenIterable\",\n    get: function get() {\n      return this._children;\n    }\n  }, {\n    key: \"removeChild\",\n    value: function removeChild(chunk) {\n      if (!this._children.has(chunk)) {\n        return false;\n      }\n\n      this._children.delete(chunk);\n\n      chunk.removeParent(this);\n      return true;\n    }\n  }, {\n    key: \"addParent\",\n    value: function addParent(parentChunk) {\n      if (!this._parents.has(parentChunk)) {\n        this._parents.add(parentChunk);\n\n        return true;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"getParents\",\n    value: function getParents() {\n      return this._parents.getFromCache(getArray);\n    }\n  }, {\n    key: \"setParents\",\n    value: function setParents(newParents) {\n      this._parents.clear();\n\n      var _iterator = _createForOfIteratorHelper(newParents),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var p = _step.value;\n\n          this._parents.add(p);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n  }, {\n    key: \"getNumberOfParents\",\n    value: function getNumberOfParents() {\n      return this._parents.size;\n    }\n  }, {\n    key: \"hasParent\",\n    value: function hasParent(parent) {\n      return this._parents.has(parent);\n    }\n  }, {\n    key: \"parentsIterable\",\n    get: function get() {\n      return this._parents;\n    }\n  }, {\n    key: \"removeParent\",\n    value: function removeParent(chunk) {\n      if (this._parents.delete(chunk)) {\n        chunk.removeChunk(this);\n        return true;\n      }\n\n      return false;\n    }\n    /**\n     * @returns {Array} - an array containing the blocks\n     */\n\n  }, {\n    key: \"getBlocks\",\n    value: function getBlocks() {\n      return this._blocks.getFromCache(getArray);\n    }\n  }, {\n    key: \"getNumberOfBlocks\",\n    value: function getNumberOfBlocks() {\n      return this._blocks.size;\n    }\n  }, {\n    key: \"hasBlock\",\n    value: function hasBlock(block) {\n      return this._blocks.has(block);\n    }\n  }, {\n    key: \"blocksIterable\",\n    get: function get() {\n      return this._blocks;\n    }\n  }, {\n    key: \"addBlock\",\n    value: function addBlock(block) {\n      if (!this._blocks.has(block)) {\n        this._blocks.add(block);\n\n        return true;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"addOrigin\",\n    value: function addOrigin(module, loc, request) {\n      this.origins.push({\n        module: module,\n        loc: loc,\n        request: request\n      });\n    }\n  }, {\n    key: \"containsModule\",\n    value: function containsModule(module) {\n      var _iterator2 = _createForOfIteratorHelper(this.chunks),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var chunk = _step2.value;\n          if (chunk.containsModule(module)) return true;\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n\n      return false;\n    }\n  }, {\n    key: \"getFiles\",\n    value: function getFiles() {\n      var files = new Set();\n\n      var _iterator3 = _createForOfIteratorHelper(this.chunks),\n          _step3;\n\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var chunk = _step3.value;\n\n          var _iterator4 = _createForOfIteratorHelper(chunk.files),\n              _step4;\n\n          try {\n            for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n              var file = _step4.value;\n              files.add(file);\n            }\n          } catch (err) {\n            _iterator4.e(err);\n          } finally {\n            _iterator4.f();\n          }\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n\n      return Array.from(files);\n    }\n    /**\n     * @param {string=} reason reason for removing ChunkGroup\n     * @returns {void}\n     */\n\n  }, {\n    key: \"remove\",\n    value: function remove(reason) {\n      // cleanup parents\n      var _iterator5 = _createForOfIteratorHelper(this._parents),\n          _step5;\n\n      try {\n        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n          var parentChunkGroup = _step5.value;\n\n          // remove this chunk from its parents\n          parentChunkGroup._children.delete(this); // cleanup \"sub chunks\"\n\n\n          var _iterator9 = _createForOfIteratorHelper(this._children),\n              _step9;\n\n          try {\n            for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {\n              var chunkGroup = _step9.value;\n\n              /**\n               * remove this chunk as \"intermediary\" and connect\n               * it \"sub chunks\" and parents directly\n               */\n              // add parent to each \"sub chunk\"\n              chunkGroup.addParent(parentChunkGroup); // add \"sub chunk\" to parent\n\n              parentChunkGroup.addChild(chunkGroup);\n            }\n          } catch (err) {\n            _iterator9.e(err);\n          } finally {\n            _iterator9.f();\n          }\n        }\n        /**\n         * we need to iterate again over the children\n         * to remove this from the child's parents.\n         * This can not be done in the above loop\n         * as it is not guaranteed that `this._parents` contains anything.\n         */\n\n      } catch (err) {\n        _iterator5.e(err);\n      } finally {\n        _iterator5.f();\n      }\n\n      var _iterator6 = _createForOfIteratorHelper(this._children),\n          _step6;\n\n      try {\n        for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n          var _chunkGroup = _step6.value;\n\n          // remove this as parent of every \"sub chunk\"\n          _chunkGroup._parents.delete(this);\n        } // cleanup blocks\n\n      } catch (err) {\n        _iterator6.e(err);\n      } finally {\n        _iterator6.f();\n      }\n\n      var _iterator7 = _createForOfIteratorHelper(this._blocks),\n          _step7;\n\n      try {\n        for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n          var block = _step7.value;\n          block.chunkGroup = null;\n        } // remove chunks\n\n      } catch (err) {\n        _iterator7.e(err);\n      } finally {\n        _iterator7.f();\n      }\n\n      var _iterator8 = _createForOfIteratorHelper(this.chunks),\n          _step8;\n\n      try {\n        for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {\n          var chunk = _step8.value;\n          chunk.removeGroup(this);\n        }\n      } catch (err) {\n        _iterator8.e(err);\n      } finally {\n        _iterator8.f();\n      }\n    }\n  }, {\n    key: \"sortItems\",\n    value: function sortItems() {\n      this.origins.sort(sortOrigin);\n\n      this._parents.sort();\n\n      this._children.sort();\n    }\n    /**\n     * Sorting predicate which allows current ChunkGroup to be compared against another.\n     * Sorting values are based off of number of chunks in ChunkGroup.\n     *\n     * @param {ChunkGroup} otherGroup the chunkGroup to compare this against\n     * @returns {-1|0|1} sort position for comparison\n     */\n\n  }, {\n    key: \"compareTo\",\n    value: function compareTo(otherGroup) {\n      if (this.chunks.length > otherGroup.chunks.length) return -1;\n      if (this.chunks.length < otherGroup.chunks.length) return 1;\n      var a = this.chunks[Symbol.iterator]();\n      var b = otherGroup.chunks[Symbol.iterator](); // eslint-disable-next-line no-constant-condition\n\n      while (true) {\n        var aItem = a.next();\n        var bItem = b.next();\n        if (aItem.done) return 0;\n        var cmp = aItem.value.compareTo(bItem.value);\n        if (cmp !== 0) return cmp;\n      }\n    }\n  }, {\n    key: \"getChildrenByOrders\",\n    value: function getChildrenByOrders() {\n      var lists = new Map();\n\n      var _iterator10 = _createForOfIteratorHelper(this._children),\n          _step10;\n\n      try {\n        for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {\n          var childGroup = _step10.value;\n\n          // TODO webpack 5 remove this check for options\n          if (typeof childGroup.options === \"object\") {\n            for (var _i2 = 0, _Object$keys2 = Object.keys(childGroup.options); _i2 < _Object$keys2.length; _i2++) {\n              var key = _Object$keys2[_i2];\n\n              if (key.endsWith(\"Order\")) {\n                var name = key.substr(0, key.length - \"Order\".length);\n                var list = lists.get(name);\n\n                if (list === undefined) {\n                  lists.set(name, list = []);\n                }\n\n                list.push({\n                  order: childGroup.options[key],\n                  group: childGroup\n                });\n              }\n            }\n          }\n        }\n      } catch (err) {\n        _iterator10.e(err);\n      } finally {\n        _iterator10.f();\n      }\n\n      var result = Object.create(null);\n\n      var _iterator11 = _createForOfIteratorHelper(lists),\n          _step11;\n\n      try {\n        for (_iterator11.s(); !(_step11 = _iterator11.n()).done;) {\n          var _step11$value = _slicedToArray(_step11.value, 2),\n              _name = _step11$value[0],\n              _list = _step11$value[1];\n\n          _list.sort(function (a, b) {\n            var cmp = b.order - a.order;\n            if (cmp !== 0) return cmp; // TODO webpack 5 remove this check of compareTo\n\n            if (a.group.compareTo) {\n              return a.group.compareTo(b.group);\n            }\n\n            return 0;\n          });\n\n          result[_name] = _list.map(function (i) {\n            return i.group;\n          });\n        }\n      } catch (err) {\n        _iterator11.e(err);\n      } finally {\n        _iterator11.f();\n      }\n\n      return result;\n    }\n    /**\n     * Sets the top-down index of a module in this ChunkGroup\n     * @param {Module} module module for which the index should be set\n     * @param {number} index the index of the module\n     * @returns {void}\n     */\n\n  }, {\n    key: \"setModuleIndex\",\n    value: function setModuleIndex(module, index) {\n      this._moduleIndices.set(module, index);\n    }\n    /**\n     * Gets the top-down index of a module in this ChunkGroup\n     * @param {Module} module the module\n     * @returns {number} index\n     */\n\n  }, {\n    key: \"getModuleIndex\",\n    value: function getModuleIndex(module) {\n      return this._moduleIndices.get(module);\n    }\n    /**\n     * Sets the bottom-up index of a module in this ChunkGroup\n     * @param {Module} module module for which the index should be set\n     * @param {number} index the index of the module\n     * @returns {void}\n     */\n\n  }, {\n    key: \"setModuleIndex2\",\n    value: function setModuleIndex2(module, index) {\n      this._moduleIndices2.set(module, index);\n    }\n    /**\n     * Gets the bottom-up index of a module in this ChunkGroup\n     * @param {Module} module the module\n     * @returns {number} index\n     */\n\n  }, {\n    key: \"getModuleIndex2\",\n    value: function getModuleIndex2(module) {\n      return this._moduleIndices2.get(module);\n    }\n  }, {\n    key: \"checkConstraints\",\n    value: function checkConstraints() {\n      var chunk = this;\n\n      var _iterator12 = _createForOfIteratorHelper(chunk._children),\n          _step12;\n\n      try {\n        for (_iterator12.s(); !(_step12 = _iterator12.n()).done;) {\n          var child = _step12.value;\n\n          if (!child._parents.has(chunk)) {\n            throw new Error(\"checkConstraints: child missing parent \".concat(chunk.debugId, \" -> \").concat(child.debugId));\n          }\n        }\n      } catch (err) {\n        _iterator12.e(err);\n      } finally {\n        _iterator12.f();\n      }\n\n      var _iterator13 = _createForOfIteratorHelper(chunk._parents),\n          _step13;\n\n      try {\n        for (_iterator13.s(); !(_step13 = _iterator13.n()).done;) {\n          var parentChunk = _step13.value;\n\n          if (!parentChunk._children.has(chunk)) {\n            throw new Error(\"checkConstraints: parent missing child \".concat(parentChunk.debugId, \" <- \").concat(chunk.debugId));\n          }\n        }\n      } catch (err) {\n        _iterator13.e(err);\n      } finally {\n        _iterator13.f();\n      }\n    }\n  }]);\n\n  return ChunkGroup;\n}();\n\nmodule.exports = ChunkGroup;","map":{"version":3,"sources":["/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/webpack/lib/ChunkGroup.js"],"names":["SortableSet","require","compareLocations","debugId","getArray","set","Array","from","sortById","a","b","id","sortOrigin","aIdent","module","identifier","bIdent","loc","ChunkGroup","options","name","undefined","groupDebugId","_children","_parents","_blocks","chunks","origins","_moduleIndices","Map","_moduleIndices2","Object","keys","key","endsWith","Math","max","Error","value","x","join","chunk","oldIdx","indexOf","splice","unshift","before","idx","push","oldChunk","newChunk","newIdx","has","add","getFromCache","size","delete","removeParent","parentChunk","newParents","clear","p","parent","removeChunk","block","request","containsModule","files","Set","file","reason","parentChunkGroup","chunkGroup","addParent","addChild","removeGroup","sort","otherGroup","length","Symbol","iterator","aItem","next","bItem","done","cmp","compareTo","lists","childGroup","substr","list","get","order","group","result","create","map","i","index","child","exports"],"mappings":"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","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst SortableSet = require(\"./util/SortableSet\");\nconst compareLocations = require(\"./compareLocations\");\n\n/** @typedef {import(\"./Chunk\")} Chunk */\n/** @typedef {import(\"./Module\")} Module */\n/** @typedef {import(\"./ModuleReason\")} ModuleReason */\n\n/** @typedef {{module: Module, loc: TODO, request: string}} OriginRecord */\n/** @typedef {string|{name: string}} ChunkGroupOptions */\n\nlet debugId = 5000;\n\n/**\n * @template T\n * @param {SortableSet<T>} set set to convert to array.\n * @returns {T[]} the array format of existing set\n */\nconst getArray = set => Array.from(set);\n\n/**\n * A convenience method used to sort chunks based on their id's\n * @param {ChunkGroup} a first sorting comparator\n * @param {ChunkGroup} b second sorting comparator\n * @returns {1|0|-1} a sorting index to determine order\n */\nconst sortById = (a, b) => {\n\tif (a.id < b.id) return -1;\n\tif (b.id < a.id) return 1;\n\treturn 0;\n};\n\n/**\n * @param {OriginRecord} a the first comparator in sort\n * @param {OriginRecord} b the second comparator in sort\n * @returns {1|-1|0} returns sorting order as index\n */\nconst sortOrigin = (a, b) => {\n\tconst aIdent = a.module ? a.module.identifier() : \"\";\n\tconst bIdent = b.module ? b.module.identifier() : \"\";\n\tif (aIdent < bIdent) return -1;\n\tif (aIdent > bIdent) return 1;\n\treturn compareLocations(a.loc, b.loc);\n};\n\nclass ChunkGroup {\n\t/**\n\t * Creates an instance of ChunkGroup.\n\t * @param {ChunkGroupOptions=} options chunk group options passed to chunkGroup\n\t */\n\tconstructor(options) {\n\t\tif (typeof options === \"string\") {\n\t\t\toptions = { name: options };\n\t\t} else if (!options) {\n\t\t\toptions = { name: undefined };\n\t\t}\n\t\t/** @type {number} */\n\t\tthis.groupDebugId = debugId++;\n\t\tthis.options = options;\n\t\t/** @type {SortableSet<ChunkGroup>} */\n\t\tthis._children = new SortableSet(undefined, sortById);\n\t\tthis._parents = new SortableSet(undefined, sortById);\n\t\tthis._blocks = new SortableSet();\n\t\t/** @type {Chunk[]} */\n\t\tthis.chunks = [];\n\t\t/** @type {OriginRecord[]} */\n\t\tthis.origins = [];\n\t\t/** Indices in top-down order */\n\t\t/** @private @type {Map<Module, number>} */\n\t\tthis._moduleIndices = new Map();\n\t\t/** Indices in bottom-up order */\n\t\t/** @private @type {Map<Module, number>} */\n\t\tthis._moduleIndices2 = new Map();\n\t}\n\n\t/**\n\t * when a new chunk is added to a chunkGroup, addingOptions will occur.\n\t * @param {ChunkGroupOptions} options the chunkGroup options passed to addOptions\n\t * @returns {void}\n\t */\n\taddOptions(options) {\n\t\tfor (const key of Object.keys(options)) {\n\t\t\tif (this.options[key] === undefined) {\n\t\t\t\tthis.options[key] = options[key];\n\t\t\t} else if (this.options[key] !== options[key]) {\n\t\t\t\tif (key.endsWith(\"Order\")) {\n\t\t\t\t\tthis.options[key] = Math.max(this.options[key], options[key]);\n\t\t\t\t} else {\n\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t`ChunkGroup.addOptions: No option merge strategy for ${key}`\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * returns the name of current ChunkGroup\n\t * @returns {string|undefined} returns the ChunkGroup name\n\t */\n\tget name() {\n\t\treturn this.options.name;\n\t}\n\n\t/**\n\t * sets a new name for current ChunkGroup\n\t * @param {string} value the new name for ChunkGroup\n\t * @returns {void}\n\t */\n\tset name(value) {\n\t\tthis.options.name = value;\n\t}\n\n\t/**\n\t * get a uniqueId for ChunkGroup, made up of its member Chunk debugId's\n\t * @returns {string} a unique concatenation of chunk debugId's\n\t */\n\tget debugId() {\n\t\treturn Array.from(this.chunks, x => x.debugId).join(\"+\");\n\t}\n\n\t/**\n\t * get a unique id for ChunkGroup, made up of its member Chunk id's\n\t * @returns {string} a unique concatenation of chunk ids\n\t */\n\tget id() {\n\t\treturn Array.from(this.chunks, x => x.id).join(\"+\");\n\t}\n\n\t/**\n\t * Performs an unshift of a specific chunk\n\t * @param {Chunk} chunk chunk being unshifted\n\t * @returns {boolean} returns true if attempted chunk shift is accepted\n\t */\n\tunshiftChunk(chunk) {\n\t\tconst oldIdx = this.chunks.indexOf(chunk);\n\t\tif (oldIdx > 0) {\n\t\t\tthis.chunks.splice(oldIdx, 1);\n\t\t\tthis.chunks.unshift(chunk);\n\t\t} else if (oldIdx < 0) {\n\t\t\tthis.chunks.unshift(chunk);\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t * inserts a chunk before another existing chunk in group\n\t * @param {Chunk} chunk Chunk being inserted\n\t * @param {Chunk} before Placeholder/target chunk marking new chunk insertion point\n\t * @returns {boolean} return true if insertion was successful\n\t */\n\tinsertChunk(chunk, before) {\n\t\tconst oldIdx = this.chunks.indexOf(chunk);\n\t\tconst idx = this.chunks.indexOf(before);\n\t\tif (idx < 0) {\n\t\t\tthrow new Error(\"before chunk not found\");\n\t\t}\n\t\tif (oldIdx >= 0 && oldIdx > idx) {\n\t\t\tthis.chunks.splice(oldIdx, 1);\n\t\t\tthis.chunks.splice(idx, 0, chunk);\n\t\t} else if (oldIdx < 0) {\n\t\t\tthis.chunks.splice(idx, 0, chunk);\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t * add a chunk into ChunkGroup. Is pushed on or prepended\n\t * @param {Chunk} chunk chunk being pushed into ChunkGroupS\n\t * @returns {boolean} returns true if chunk addition was successful.\n\t */\n\tpushChunk(chunk) {\n\t\tconst oldIdx = this.chunks.indexOf(chunk);\n\t\tif (oldIdx >= 0) {\n\t\t\treturn false;\n\t\t}\n\t\tthis.chunks.push(chunk);\n\t\treturn true;\n\t}\n\n\t/**\n\t * @param {Chunk} oldChunk chunk to be replaced\n\t * @param {Chunk} newChunk New chunk that will be replaced with\n\t * @returns {boolean} returns true if the replacement was successful\n\t */\n\treplaceChunk(oldChunk, newChunk) {\n\t\tconst oldIdx = this.chunks.indexOf(oldChunk);\n\t\tif (oldIdx < 0) return false;\n\t\tconst newIdx = this.chunks.indexOf(newChunk);\n\t\tif (newIdx < 0) {\n\t\t\tthis.chunks[oldIdx] = newChunk;\n\t\t\treturn true;\n\t\t}\n\t\tif (newIdx < oldIdx) {\n\t\t\tthis.chunks.splice(oldIdx, 1);\n\t\t\treturn true;\n\t\t} else if (newIdx !== oldIdx) {\n\t\t\tthis.chunks[oldIdx] = newChunk;\n\t\t\tthis.chunks.splice(newIdx, 1);\n\t\t\treturn true;\n\t\t}\n\t}\n\n\tremoveChunk(chunk) {\n\t\tconst idx = this.chunks.indexOf(chunk);\n\t\tif (idx >= 0) {\n\t\t\tthis.chunks.splice(idx, 1);\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\tisInitial() {\n\t\treturn false;\n\t}\n\n\taddChild(chunk) {\n\t\tif (this._children.has(chunk)) {\n\t\t\treturn false;\n\t\t}\n\t\tthis._children.add(chunk);\n\t\treturn true;\n\t}\n\n\tgetChildren() {\n\t\treturn this._children.getFromCache(getArray);\n\t}\n\n\tgetNumberOfChildren() {\n\t\treturn this._children.size;\n\t}\n\n\tget childrenIterable() {\n\t\treturn this._children;\n\t}\n\n\tremoveChild(chunk) {\n\t\tif (!this._children.has(chunk)) {\n\t\t\treturn false;\n\t\t}\n\n\t\tthis._children.delete(chunk);\n\t\tchunk.removeParent(this);\n\t\treturn true;\n\t}\n\n\taddParent(parentChunk) {\n\t\tif (!this._parents.has(parentChunk)) {\n\t\t\tthis._parents.add(parentChunk);\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\tgetParents() {\n\t\treturn this._parents.getFromCache(getArray);\n\t}\n\n\tsetParents(newParents) {\n\t\tthis._parents.clear();\n\t\tfor (const p of newParents) {\n\t\t\tthis._parents.add(p);\n\t\t}\n\t}\n\n\tgetNumberOfParents() {\n\t\treturn this._parents.size;\n\t}\n\n\thasParent(parent) {\n\t\treturn this._parents.has(parent);\n\t}\n\n\tget parentsIterable() {\n\t\treturn this._parents;\n\t}\n\n\tremoveParent(chunk) {\n\t\tif (this._parents.delete(chunk)) {\n\t\t\tchunk.removeChunk(this);\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t * @returns {Array} - an array containing the blocks\n\t */\n\tgetBlocks() {\n\t\treturn this._blocks.getFromCache(getArray);\n\t}\n\n\tgetNumberOfBlocks() {\n\t\treturn this._blocks.size;\n\t}\n\n\thasBlock(block) {\n\t\treturn this._blocks.has(block);\n\t}\n\n\tget blocksIterable() {\n\t\treturn this._blocks;\n\t}\n\n\taddBlock(block) {\n\t\tif (!this._blocks.has(block)) {\n\t\t\tthis._blocks.add(block);\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\taddOrigin(module, loc, request) {\n\t\tthis.origins.push({\n\t\t\tmodule,\n\t\t\tloc,\n\t\t\trequest\n\t\t});\n\t}\n\n\tcontainsModule(module) {\n\t\tfor (const chunk of this.chunks) {\n\t\t\tif (chunk.containsModule(module)) return true;\n\t\t}\n\t\treturn false;\n\t}\n\n\tgetFiles() {\n\t\tconst files = new Set();\n\n\t\tfor (const chunk of this.chunks) {\n\t\t\tfor (const file of chunk.files) {\n\t\t\t\tfiles.add(file);\n\t\t\t}\n\t\t}\n\n\t\treturn Array.from(files);\n\t}\n\n\t/**\n\t * @param {string=} reason reason for removing ChunkGroup\n\t * @returns {void}\n\t */\n\tremove(reason) {\n\t\t// cleanup parents\n\t\tfor (const parentChunkGroup of this._parents) {\n\t\t\t// remove this chunk from its parents\n\t\t\tparentChunkGroup._children.delete(this);\n\n\t\t\t// cleanup \"sub chunks\"\n\t\t\tfor (const chunkGroup of this._children) {\n\t\t\t\t/**\n\t\t\t\t * remove this chunk as \"intermediary\" and connect\n\t\t\t\t * it \"sub chunks\" and parents directly\n\t\t\t\t */\n\t\t\t\t// add parent to each \"sub chunk\"\n\t\t\t\tchunkGroup.addParent(parentChunkGroup);\n\t\t\t\t// add \"sub chunk\" to parent\n\t\t\t\tparentChunkGroup.addChild(chunkGroup);\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * we need to iterate again over the children\n\t\t * to remove this from the child's parents.\n\t\t * This can not be done in the above loop\n\t\t * as it is not guaranteed that `this._parents` contains anything.\n\t\t */\n\t\tfor (const chunkGroup of this._children) {\n\t\t\t// remove this as parent of every \"sub chunk\"\n\t\t\tchunkGroup._parents.delete(this);\n\t\t}\n\n\t\t// cleanup blocks\n\t\tfor (const block of this._blocks) {\n\t\t\tblock.chunkGroup = null;\n\t\t}\n\n\t\t// remove chunks\n\t\tfor (const chunk of this.chunks) {\n\t\t\tchunk.removeGroup(this);\n\t\t}\n\t}\n\n\tsortItems() {\n\t\tthis.origins.sort(sortOrigin);\n\t\tthis._parents.sort();\n\t\tthis._children.sort();\n\t}\n\n\t/**\n\t * Sorting predicate which allows current ChunkGroup to be compared against another.\n\t * Sorting values are based off of number of chunks in ChunkGroup.\n\t *\n\t * @param {ChunkGroup} otherGroup the chunkGroup to compare this against\n\t * @returns {-1|0|1} sort position for comparison\n\t */\n\tcompareTo(otherGroup) {\n\t\tif (this.chunks.length > otherGroup.chunks.length) return -1;\n\t\tif (this.chunks.length < otherGroup.chunks.length) return 1;\n\t\tconst a = this.chunks[Symbol.iterator]();\n\t\tconst b = otherGroup.chunks[Symbol.iterator]();\n\t\t// eslint-disable-next-line no-constant-condition\n\t\twhile (true) {\n\t\t\tconst aItem = a.next();\n\t\t\tconst bItem = b.next();\n\t\t\tif (aItem.done) return 0;\n\t\t\tconst cmp = aItem.value.compareTo(bItem.value);\n\t\t\tif (cmp !== 0) return cmp;\n\t\t}\n\t}\n\n\tgetChildrenByOrders() {\n\t\tconst lists = new Map();\n\t\tfor (const childGroup of this._children) {\n\t\t\t// TODO webpack 5 remove this check for options\n\t\t\tif (typeof childGroup.options === \"object\") {\n\t\t\t\tfor (const key of Object.keys(childGroup.options)) {\n\t\t\t\t\tif (key.endsWith(\"Order\")) {\n\t\t\t\t\t\tconst name = key.substr(0, key.length - \"Order\".length);\n\t\t\t\t\t\tlet list = lists.get(name);\n\t\t\t\t\t\tif (list === undefined) {\n\t\t\t\t\t\t\tlists.set(name, (list = []));\n\t\t\t\t\t\t}\n\t\t\t\t\t\tlist.push({\n\t\t\t\t\t\t\torder: childGroup.options[key],\n\t\t\t\t\t\t\tgroup: childGroup\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tconst result = Object.create(null);\n\t\tfor (const [name, list] of lists) {\n\t\t\tlist.sort((a, b) => {\n\t\t\t\tconst cmp = b.order - a.order;\n\t\t\t\tif (cmp !== 0) return cmp;\n\t\t\t\t// TODO webpack 5 remove this check of compareTo\n\t\t\t\tif (a.group.compareTo) {\n\t\t\t\t\treturn a.group.compareTo(b.group);\n\t\t\t\t}\n\t\t\t\treturn 0;\n\t\t\t});\n\t\t\tresult[name] = list.map(i => i.group);\n\t\t}\n\t\treturn result;\n\t}\n\n\t/**\n\t * Sets the top-down index of a module in this ChunkGroup\n\t * @param {Module} module module for which the index should be set\n\t * @param {number} index the index of the module\n\t * @returns {void}\n\t */\n\tsetModuleIndex(module, index) {\n\t\tthis._moduleIndices.set(module, index);\n\t}\n\n\t/**\n\t * Gets the top-down index of a module in this ChunkGroup\n\t * @param {Module} module the module\n\t * @returns {number} index\n\t */\n\tgetModuleIndex(module) {\n\t\treturn this._moduleIndices.get(module);\n\t}\n\n\t/**\n\t * Sets the bottom-up index of a module in this ChunkGroup\n\t * @param {Module} module module for which the index should be set\n\t * @param {number} index the index of the module\n\t * @returns {void}\n\t */\n\tsetModuleIndex2(module, index) {\n\t\tthis._moduleIndices2.set(module, index);\n\t}\n\n\t/**\n\t * Gets the bottom-up index of a module in this ChunkGroup\n\t * @param {Module} module the module\n\t * @returns {number} index\n\t */\n\tgetModuleIndex2(module) {\n\t\treturn this._moduleIndices2.get(module);\n\t}\n\n\tcheckConstraints() {\n\t\tconst chunk = this;\n\t\tfor (const child of chunk._children) {\n\t\t\tif (!child._parents.has(chunk)) {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t`checkConstraints: child missing parent ${chunk.debugId} -> ${child.debugId}`\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\tfor (const parentChunk of chunk._parents) {\n\t\t\tif (!parentChunk._children.has(chunk)) {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t`checkConstraints: parent missing child ${parentChunk.debugId} <- ${chunk.debugId}`\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n}\n\nmodule.exports = ChunkGroup;\n"]},"metadata":{},"sourceType":"script"}