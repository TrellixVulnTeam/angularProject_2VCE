{"ast":null,"code":"\"use strict\";\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nvar _createForOfIteratorHelper = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getTestConfig = void 0;\n\nvar glob = require(\"glob\");\n\nvar path = require(\"path\");\n\nvar helpers_1 = require(\"../utils/helpers\");\n\nfunction getTestConfig(wco) {\n  var _wco$buildOptions = wco.buildOptions,\n      codeCoverage = _wco$buildOptions.codeCoverage,\n      codeCoverageExclude = _wco$buildOptions.codeCoverageExclude,\n      main = _wco$buildOptions.main,\n      sourceMap = _wco$buildOptions.sourceMap,\n      root = wco.root,\n      sourceRoot = wco.sourceRoot;\n  var extraRules = [];\n  var extraPlugins = [];\n\n  if (codeCoverage) {\n    (function () {\n      var exclude = [/\\.(e2e|spec)\\.tsx?$/, /node_modules/];\n\n      if (codeCoverageExclude) {\n        var _iterator = _createForOfIteratorHelper(codeCoverageExclude),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var excludeGlob = _step.value;\n            glob.sync(path.join(root, excludeGlob), {\n              nodir: true\n            }).forEach(function (file) {\n              return exclude.push(path.normalize(file));\n            });\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n      }\n\n      extraRules.push({\n        test: /\\.(jsx?|tsx?)$/,\n        loader: require.resolve('@jsdevtools/coverage-istanbul-loader'),\n        options: {\n          esModules: true\n        },\n        enforce: 'post',\n        exclude: exclude,\n        include: sourceRoot\n      });\n    })();\n  }\n\n  if (sourceMap.scripts || sourceMap.styles) {\n    extraPlugins.push(helpers_1.getSourceMapDevTool(sourceMap.scripts, sourceMap.styles, false, true));\n  }\n\n  return {\n    mode: 'development',\n    resolve: {\n      mainFields: ['es2015', 'browser', 'module', 'main']\n    },\n    devtool: false,\n    entry: {\n      main: path.resolve(root, main)\n    },\n    module: {\n      rules: extraRules\n    },\n    plugins: extraPlugins,\n    optimization: {\n      splitChunks: {\n        chunks: function chunks(chunk) {\n          return !helpers_1.isPolyfillsEntry(chunk.name);\n        },\n        cacheGroups: {\n          vendors: false,\n          defaultVendors: {\n            name: 'vendor',\n            chunks: function chunks(chunk) {\n              return chunk.name === 'main';\n            },\n            enforce: true,\n            test: /[\\\\/]node_modules[\\\\/]/\n          }\n        }\n      }\n    }\n  };\n}\n\nexports.getTestConfig = getTestConfig;","map":{"version":3,"sources":["/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@angular-devkit/build-angular/src/webpack/configs/test.js"],"names":["Object","defineProperty","exports","value","getTestConfig","glob","require","path","helpers_1","wco","buildOptions","codeCoverage","codeCoverageExclude","main","sourceMap","root","sourceRoot","extraRules","extraPlugins","exclude","excludeGlob","sync","join","nodir","forEach","file","push","normalize","test","loader","resolve","options","esModules","enforce","include","scripts","styles","getSourceMapDevTool","mode","mainFields","devtool","entry","module","rules","plugins","optimization","splitChunks","chunks","chunk","isPolyfillsEntry","name","cacheGroups","vendors","defaultVendors"],"mappings":"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","sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getTestConfig = void 0;\nconst glob = require(\"glob\");\nconst path = require(\"path\");\nconst helpers_1 = require(\"../utils/helpers\");\nfunction getTestConfig(wco) {\n    const { buildOptions: { codeCoverage, codeCoverageExclude, main, sourceMap }, root, sourceRoot, } = wco;\n    const extraRules = [];\n    const extraPlugins = [];\n    if (codeCoverage) {\n        const exclude = [\n            /\\.(e2e|spec)\\.tsx?$/,\n            /node_modules/,\n        ];\n        if (codeCoverageExclude) {\n            for (const excludeGlob of codeCoverageExclude) {\n                glob\n                    .sync(path.join(root, excludeGlob), { nodir: true })\n                    .forEach((file) => exclude.push(path.normalize(file)));\n            }\n        }\n        extraRules.push({\n            test: /\\.(jsx?|tsx?)$/,\n            loader: require.resolve('@jsdevtools/coverage-istanbul-loader'),\n            options: { esModules: true },\n            enforce: 'post',\n            exclude,\n            include: sourceRoot,\n        });\n    }\n    if (sourceMap.scripts || sourceMap.styles) {\n        extraPlugins.push(helpers_1.getSourceMapDevTool(sourceMap.scripts, sourceMap.styles, false, true));\n    }\n    return {\n        mode: 'development',\n        resolve: {\n            mainFields: ['es2015', 'browser', 'module', 'main'],\n        },\n        devtool: false,\n        entry: {\n            main: path.resolve(root, main),\n        },\n        module: {\n            rules: extraRules,\n        },\n        plugins: extraPlugins,\n        optimization: {\n            splitChunks: {\n                chunks: (chunk) => !helpers_1.isPolyfillsEntry(chunk.name),\n                cacheGroups: {\n                    vendors: false,\n                    defaultVendors: {\n                        name: 'vendor',\n                        chunks: (chunk) => chunk.name === 'main',\n                        enforce: true,\n                        test: /[\\\\/]node_modules[\\\\/]/,\n                    },\n                },\n            },\n        },\n    };\n}\nexports.getTestConfig = getTestConfig;\n"]},"metadata":{},"sourceType":"script"}