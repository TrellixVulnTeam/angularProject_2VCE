{"ast":null,"code":"#!/usr/bin/env node\n\n(function (factory) {\n  if (typeof module === \"object\" && typeof module.exports === \"object\") {\n    var v = factory(require, exports);\n    if (v !== undefined) module.exports = v;\n  } else if (typeof define === \"function\" && define.amd) {\n    define(\"@angular/compiler-cli/ngcc/main-ngcc\", [\"require\", \"exports\", \"tslib\", \"@angular/compiler-cli/ngcc/src/main\", \"@angular/compiler-cli/ngcc/src/command_line_options\"], factory);\n  }\n})(function (require, exports) {\n  \"use strict\";\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n\n  var tslib_1 = require(\"tslib\");\n  /**\n   * @license\n   * Copyright Google LLC All Rights Reserved.\n   *\n   * Use of this source code is governed by an MIT-style license that can be\n   * found in the LICENSE file at https://angular.io/license\n   */\n\n\n  var main_1 = require(\"@angular/compiler-cli/ngcc/src/main\");\n\n  var command_line_options_1 = require(\"@angular/compiler-cli/ngcc/src/command_line_options\"); // CLI entry point\n\n\n  if (require.main === module) {\n    process.title = 'ngcc';\n    var startTime_1 = Date.now();\n    var options_1 = command_line_options_1.parseCommandLineOptions(process.argv.slice(2));\n\n    (function () {\n      return tslib_1.__awaiter(void 0, void 0, void 0, function () {\n        var duration, e_1;\n        return tslib_1.__generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              _a.trys.push([0, 2,, 3]);\n\n              return [4\n              /*yield*/\n              , main_1.mainNgcc(options_1)];\n\n            case 1:\n              _a.sent();\n\n              if (options_1.logger) {\n                duration = Math.round((Date.now() - startTime_1) / 1000);\n                options_1.logger.debug(\"Run ngcc in \" + duration + \"s.\");\n              }\n\n              process.exitCode = 0;\n              return [3\n              /*break*/\n              , 3];\n\n            case 2:\n              e_1 = _a.sent();\n              console.error(e_1.stack || e_1.message);\n              process.exit(typeof e_1.code === 'number' ? e_1.code : 1);\n              return [3\n              /*break*/\n              , 3];\n\n            case 3:\n              return [2\n              /*return*/\n              ];\n          }\n        });\n      });\n    })();\n  }\n});","map":{"version":3,"sources":["../../../../../../packages/compiler-cli/ngcc/main-ngcc.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;AACA;;;;;;AAMG;;;AACH,MAAA,MAAA,GAAA,OAAA,CAAA,qCAAA,CAAA;;AACA,MAAA,sBAAA,GAAA,OAAA,CAAA,qDAAA,CAAA,C,CAEA;;;AACA,MAAI,OAAO,CAAC,IAAR,KAAiB,MAArB,EAA6B;AAC3B,IAAA,OAAO,CAAC,KAAR,GAAgB,MAAhB;AACA,QAAM,WAAS,GAAG,IAAI,CAAC,GAAL,EAAlB;AACA,QAAM,SAAO,GAAG,sBAAA,CAAA,uBAAA,CAAwB,OAAO,CAAC,IAAR,CAAa,KAAb,CAAmB,CAAnB,CAAxB,CAAhB;;AACA,KAAC,YAAA;AAAA,aAAA,OAAA,CAAA,SAAA,CAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,YAAA;;;;;;;AAEG,qBAAA,CAAA;AAAA;AAAA,gBAAM,MAAA,CAAA,QAAA,CAAS,SAAT,CAAN,CAAA;;;AAAA,cAAA,EAAA,CAAA,IAAA;;AACA,kBAAI,SAAO,CAAC,MAAZ,EAAoB;AACZ,gBAAA,QAAQ,GAAG,IAAI,CAAC,KAAL,CAAW,CAAC,IAAI,CAAC,GAAL,KAAa,WAAd,IAA2B,IAAtC,CAAX;AACN,gBAAA,SAAO,CAAC,MAAR,CAAe,KAAf,CAAqB,iBAAe,QAAf,GAAuB,IAA5C;AACD;;AACD,cAAA,OAAO,CAAC,QAAR,GAAmB,CAAnB;;;;;;;AAEA,cAAA,OAAO,CAAC,KAAR,CAAc,GAAC,CAAC,KAAF,IAAW,GAAC,CAAC,OAA3B;AACA,cAAA,OAAO,CAAC,IAAR,CAAa,OAAO,GAAC,CAAC,IAAT,KAAkB,QAAlB,GAA6B,GAAC,CAAC,IAA/B,GAAsC,CAAnD;;;;;;;;;;;OAVH,CAAA;AAYA,KAZD;AAaD","sourcesContent":["#!/usr/bin/env node\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {mainNgcc} from './src/main';\nimport {parseCommandLineOptions} from './src/command_line_options';\n\n// CLI entry point\nif (require.main === module) {\n  process.title = 'ngcc';\n  const startTime = Date.now();\n  const options = parseCommandLineOptions(process.argv.slice(2));\n  (async () => {\n    try {\n      await mainNgcc(options);\n      if (options.logger) {\n        const duration = Math.round((Date.now() - startTime) / 1000);\n        options.logger.debug(`Run ngcc in ${duration}s.`);\n      }\n      process.exitCode = 0;\n    } catch (e) {\n      console.error(e.stack || e.message);\n      process.exit(typeof e.code === 'number' ? e.code : 1);\n    }\n  })();\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}