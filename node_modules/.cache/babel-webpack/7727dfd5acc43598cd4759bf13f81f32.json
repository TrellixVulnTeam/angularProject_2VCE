{"ast":null,"code":"\"use strict\";\n\nvar _objectSpread = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/objectSpread2\");\n\nvar _classCallCheck = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.BuildOptimizerWebpackPlugin = void 0;\n\nvar BuildOptimizerWebpackPlugin = /*#__PURE__*/function () {\n  function BuildOptimizerWebpackPlugin() {\n    _classCallCheck(this, BuildOptimizerWebpackPlugin);\n  }\n\n  _createClass(BuildOptimizerWebpackPlugin, [{\n    key: \"apply\",\n    value: function apply(compiler) {\n      compiler.hooks.normalModuleFactory.tap('BuildOptimizerWebpackPlugin', function (nmf) {\n        nmf.hooks.module.tap('BuildOptimizerWebpackPlugin', function (module, data) {\n          var descriptionFileData = data.resourceResolveData.descriptionFileData;\n\n          if (descriptionFileData) {\n            // Only TS packages should use Build Optimizer.\n            // Notes:\n            // - a TS package might not have defined typings but still use .d.ts files next to their\n            // .js files. We don't cover that case because the Angular Package Format (APF) calls for\n            // using the Typings field and Build Optimizer is geared towards APF. Maybe we could\n            // provide configuration options to the plugin to cover that case if there's demand.\n            // - a JS-only package that also happens to provides typings will also be flagged by this\n            // check. Not sure there's a good way to skip those.\n            var skipBuildOptimizer = !descriptionFileData.typings;\n            module.factoryMeta = _objectSpread(_objectSpread({}, module.factoryMeta), {}, {\n              skipBuildOptimizer: skipBuildOptimizer\n            });\n          }\n\n          return module;\n        });\n      });\n    }\n  }]);\n\n  return BuildOptimizerWebpackPlugin;\n}();\n\nexports.BuildOptimizerWebpackPlugin = BuildOptimizerWebpackPlugin;","map":{"version":3,"sources":["/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-plugin.js"],"names":["Object","defineProperty","exports","value","BuildOptimizerWebpackPlugin","compiler","hooks","normalModuleFactory","tap","nmf","module","data","descriptionFileData","resourceResolveData","skipBuildOptimizer","typings","factoryMeta"],"mappings":"AAAA;;;;;;;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,2BAAR,GAAsC,KAAK,CAA3C;;IACMA,2B;;;;;;;WACF,eAAMC,QAAN,EAAgB;AACZA,MAAAA,QAAQ,CAACC,KAAT,CAAeC,mBAAf,CAAmCC,GAAnC,CAAuC,6BAAvC,EAAsE,UAAAC,GAAG,EAAI;AACzEA,QAAAA,GAAG,CAACH,KAAJ,CAAUI,MAAV,CAAiBF,GAAjB,CAAqB,6BAArB,EAAoD,UAACE,MAAD,EAASC,IAAT,EAAkB;AAClE,cAAQC,mBAAR,GAAgCD,IAAI,CAACE,mBAArC,CAAQD,mBAAR;;AACA,cAAIA,mBAAJ,EAAyB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAME,kBAAkB,GAAG,CAACF,mBAAmB,CAACG,OAAhD;AACAL,YAAAA,MAAM,CAACM,WAAP,mCAA0BN,MAAM,CAACM,WAAjC;AAA8CF,cAAAA,kBAAkB,EAAlBA;AAA9C;AACH;;AACD,iBAAOJ,MAAP;AACH,SAfD;AAgBH,OAjBD;AAkBH;;;;;;AAELR,OAAO,CAACE,2BAAR,GAAsCA,2BAAtC","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.BuildOptimizerWebpackPlugin = void 0;\nclass BuildOptimizerWebpackPlugin {\n    apply(compiler) {\n        compiler.hooks.normalModuleFactory.tap('BuildOptimizerWebpackPlugin', nmf => {\n            nmf.hooks.module.tap('BuildOptimizerWebpackPlugin', (module, data) => {\n                const { descriptionFileData } = data.resourceResolveData;\n                if (descriptionFileData) {\n                    // Only TS packages should use Build Optimizer.\n                    // Notes:\n                    // - a TS package might not have defined typings but still use .d.ts files next to their\n                    // .js files. We don't cover that case because the Angular Package Format (APF) calls for\n                    // using the Typings field and Build Optimizer is geared towards APF. Maybe we could\n                    // provide configuration options to the plugin to cover that case if there's demand.\n                    // - a JS-only package that also happens to provides typings will also be flagged by this\n                    // check. Not sure there's a good way to skip those.\n                    const skipBuildOptimizer = !descriptionFileData.typings;\n                    module.factoryMeta = { ...module.factoryMeta, skipBuildOptimizer };\n                }\n                return module;\n            });\n        });\n    }\n}\nexports.BuildOptimizerWebpackPlugin = BuildOptimizerWebpackPlugin;\n"]},"metadata":{},"sourceType":"script"}