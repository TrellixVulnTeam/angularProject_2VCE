{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n/** @typedef {import(\"./Resolver\")} Resolver */\n\n/** @typedef {import(\"./Resolver\").ResolveStepHook} ResolveStepHook */\n\nvar _objectSpread = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/objectSpread2\");\n\nvar _classCallCheck = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/createClass\");\n\nmodule.exports = /*#__PURE__*/function () {\n  /**\n   * @param {ResolveStepHook} source source\n   */\n  function ResultPlugin(source) {\n    _classCallCheck(this, ResultPlugin);\n\n    this.source = source;\n  }\n  /**\n   * @param {Resolver} resolver the resolver\n   * @returns {void}\n   */\n\n\n  _createClass(ResultPlugin, [{\n    key: \"apply\",\n    value: function apply(resolver) {\n      this.source.tapAsync(\"ResultPlugin\", function (request, resolverContext, callback) {\n        var obj = _objectSpread({}, request);\n\n        if (resolverContext.log) resolverContext.log(\"reporting result \" + obj.path);\n        resolver.hooks.result.callAsync(obj, resolverContext, function (err) {\n          if (err) return callback(err);\n          callback(null, obj);\n        });\n      });\n    }\n  }]);\n\n  return ResultPlugin;\n}();","map":{"version":3,"sources":["/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/enhanced-resolve/lib/ResultPlugin.js"],"names":["module","exports","source","resolver","tapAsync","request","resolverContext","callback","obj","log","path","hooks","result","callAsync","err"],"mappings":"AAAA;AACA;AACA;AACA;AAEA;AAEA;;AACA;;;;;;;;AAEAA,MAAM,CAACC,OAAP;AACC;AACD;AACA;AACC,wBAAYC,MAAZ,EAAoB;AAAA;;AACnB,SAAKA,MAAL,GAAcA,MAAd;AACA;AAED;AACD;AACA;AACA;;;AAXA;AAAA;AAAA,WAYC,eAAMC,QAAN,EAAgB;AACf,WAAKD,MAAL,CAAYE,QAAZ,CACC,cADD,EAEC,UAACC,OAAD,EAAUC,eAAV,EAA2BC,QAA3B,EAAwC;AACvC,YAAMC,GAAG,qBAAQH,OAAR,CAAT;;AACA,YAAIC,eAAe,CAACG,GAApB,EACCH,eAAe,CAACG,GAAhB,CAAoB,sBAAsBD,GAAG,CAACE,IAA9C;AACDP,QAAAA,QAAQ,CAACQ,KAAT,CAAeC,MAAf,CAAsBC,SAAtB,CAAgCL,GAAhC,EAAqCF,eAArC,EAAsD,UAAAQ,GAAG,EAAI;AAC5D,cAAIA,GAAJ,EAAS,OAAOP,QAAQ,CAACO,GAAD,CAAf;AACTP,UAAAA,QAAQ,CAAC,IAAD,EAAOC,GAAP,CAAR;AACA,SAHD;AAIA,OAVF;AAYA;AAzBF;;AAAA;AAAA","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\n/** @typedef {import(\"./Resolver\")} Resolver */\n/** @typedef {import(\"./Resolver\").ResolveStepHook} ResolveStepHook */\n\nmodule.exports = class ResultPlugin {\n\t/**\n\t * @param {ResolveStepHook} source source\n\t */\n\tconstructor(source) {\n\t\tthis.source = source;\n\t}\n\n\t/**\n\t * @param {Resolver} resolver the resolver\n\t * @returns {void}\n\t */\n\tapply(resolver) {\n\t\tthis.source.tapAsync(\n\t\t\t\"ResultPlugin\",\n\t\t\t(request, resolverContext, callback) => {\n\t\t\t\tconst obj = { ...request };\n\t\t\t\tif (resolverContext.log)\n\t\t\t\t\tresolverContext.log(\"reporting result \" + obj.path);\n\t\t\t\tresolver.hooks.result.callAsync(obj, resolverContext, err => {\n\t\t\t\t\tif (err) return callback(err);\n\t\t\t\t\tcallback(null, obj);\n\t\t\t\t});\n\t\t\t}\n\t\t);\n\t}\n};\n"]},"metadata":{},"sourceType":"script"}