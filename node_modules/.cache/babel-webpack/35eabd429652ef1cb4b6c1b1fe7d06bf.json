{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nvar _classCallCheck = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar Hook = require(\"./Hook\");\n\nvar HookCodeFactory = require(\"./HookCodeFactory\");\n\nvar AsyncSeriesHookCodeFactory = /*#__PURE__*/function (_HookCodeFactory) {\n  _inherits(AsyncSeriesHookCodeFactory, _HookCodeFactory);\n\n  var _super = _createSuper(AsyncSeriesHookCodeFactory);\n\n  function AsyncSeriesHookCodeFactory() {\n    _classCallCheck(this, AsyncSeriesHookCodeFactory);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(AsyncSeriesHookCodeFactory, [{\n    key: \"content\",\n    value: function content(_ref) {\n      var _onError = _ref.onError,\n          onDone = _ref.onDone;\n      return this.callTapsSeries({\n        onError: function onError(i, err, next, doneBreak) {\n          return _onError(err) + doneBreak(true);\n        },\n        onDone: onDone\n      });\n    }\n  }]);\n\n  return AsyncSeriesHookCodeFactory;\n}(HookCodeFactory);\n\nvar factory = new AsyncSeriesHookCodeFactory();\n\nvar COMPILE = function COMPILE(options) {\n  factory.setup(this, options);\n  return factory.create(options);\n};\n\nfunction AsyncSeriesHook() {\n  var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;\n  var hook = new Hook(args, name);\n  hook.constructor = AsyncSeriesHook;\n  hook.compile = COMPILE;\n  hook._call = undefined;\n  hook.call = undefined;\n  return hook;\n}\n\nAsyncSeriesHook.prototype = null;\nmodule.exports = AsyncSeriesHook;","map":{"version":3,"sources":["/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/enhanced-resolve/node_modules/tapable/lib/AsyncSeriesHook.js"],"names":["Hook","require","HookCodeFactory","AsyncSeriesHookCodeFactory","onError","onDone","callTapsSeries","i","err","next","doneBreak","factory","COMPILE","options","setup","create","AsyncSeriesHook","args","name","undefined","hook","constructor","compile","_call","call","prototype","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;;;;;;;;;AAEA,IAAMA,IAAI,GAAGC,OAAO,CAAC,QAAD,CAApB;;AACA,IAAMC,eAAe,GAAGD,OAAO,CAAC,mBAAD,CAA/B;;IAEME,0B;;;;;;;;;;;;;WACL,uBAA6B;AAAA,UAAnBC,QAAmB,QAAnBA,OAAmB;AAAA,UAAVC,MAAU,QAAVA,MAAU;AAC5B,aAAO,KAAKC,cAAL,CAAoB;AAC1BF,QAAAA,OAAO,EAAE,iBAACG,CAAD,EAAIC,GAAJ,EAASC,IAAT,EAAeC,SAAf;AAAA,iBAA6BN,QAAO,CAACI,GAAD,CAAP,GAAeE,SAAS,CAAC,IAAD,CAArD;AAAA,SADiB;AAE1BL,QAAAA,MAAM,EAANA;AAF0B,OAApB,CAAP;AAIA;;;;EANuCH,e;;AASzC,IAAMS,OAAO,GAAG,IAAIR,0BAAJ,EAAhB;;AAEA,IAAMS,OAAO,GAAG,SAAVA,OAAU,CAASC,OAAT,EAAkB;AACjCF,EAAAA,OAAO,CAACG,KAAR,CAAc,IAAd,EAAoBD,OAApB;AACA,SAAOF,OAAO,CAACI,MAAR,CAAeF,OAAf,CAAP;AACA,CAHD;;AAKA,SAASG,eAAT,GAAsD;AAAA,MAA7BC,IAA6B,uEAAtB,EAAsB;AAAA,MAAlBC,IAAkB,uEAAXC,SAAW;AACrD,MAAMC,IAAI,GAAG,IAAIpB,IAAJ,CAASiB,IAAT,EAAeC,IAAf,CAAb;AACAE,EAAAA,IAAI,CAACC,WAAL,GAAmBL,eAAnB;AACAI,EAAAA,IAAI,CAACE,OAAL,GAAeV,OAAf;AACAQ,EAAAA,IAAI,CAACG,KAAL,GAAaJ,SAAb;AACAC,EAAAA,IAAI,CAACI,IAAL,GAAYL,SAAZ;AACA,SAAOC,IAAP;AACA;;AAEDJ,eAAe,CAACS,SAAhB,GAA4B,IAA5B;AAEAC,MAAM,CAACC,OAAP,GAAiBX,eAAjB","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst Hook = require(\"./Hook\");\nconst HookCodeFactory = require(\"./HookCodeFactory\");\n\nclass AsyncSeriesHookCodeFactory extends HookCodeFactory {\n\tcontent({ onError, onDone }) {\n\t\treturn this.callTapsSeries({\n\t\t\tonError: (i, err, next, doneBreak) => onError(err) + doneBreak(true),\n\t\t\tonDone\n\t\t});\n\t}\n}\n\nconst factory = new AsyncSeriesHookCodeFactory();\n\nconst COMPILE = function(options) {\n\tfactory.setup(this, options);\n\treturn factory.create(options);\n};\n\nfunction AsyncSeriesHook(args = [], name = undefined) {\n\tconst hook = new Hook(args, name);\n\thook.constructor = AsyncSeriesHook;\n\thook.compile = COMPILE;\n\thook._call = undefined;\n\thook.call = undefined;\n\treturn hook;\n}\n\nAsyncSeriesHook.prototype = null;\n\nmodule.exports = AsyncSeriesHook;\n"]},"metadata":{},"sourceType":"script"}