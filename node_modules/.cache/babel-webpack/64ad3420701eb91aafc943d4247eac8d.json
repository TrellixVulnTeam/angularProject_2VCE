{"ast":null,"code":"\"use strict\";\n\nvar _createForOfIteratorHelper = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _toConsumableArray = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/toConsumableArray\");\n\nvar _classCallCheck = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/createSuper\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar fsScandir = require(\"@nodelib/fs.scandir\");\n\nvar common = require(\"./common\");\n\nvar reader_1 = require(\"./reader\");\n\nvar SyncReader = /*#__PURE__*/function (_reader_1$default) {\n  _inherits(SyncReader, _reader_1$default);\n\n  var _super = _createSuper(SyncReader);\n\n  function SyncReader() {\n    var _this;\n\n    _classCallCheck(this, SyncReader);\n\n    _this = _super.apply(this, arguments);\n    _this._scandir = fsScandir.scandirSync;\n    _this._storage = new Set();\n    _this._queue = new Set();\n    return _this;\n  }\n\n  _createClass(SyncReader, [{\n    key: \"read\",\n    value: function read() {\n      this._pushToQueue(this._root, this._settings.basePath);\n\n      this._handleQueue();\n\n      return _toConsumableArray(this._storage);\n    }\n  }, {\n    key: \"_pushToQueue\",\n    value: function _pushToQueue(directory, base) {\n      this._queue.add({\n        directory: directory,\n        base: base\n      });\n    }\n  }, {\n    key: \"_handleQueue\",\n    value: function _handleQueue() {\n      var _iterator = _createForOfIteratorHelper(this._queue.values()),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var item = _step.value;\n\n          this._handleDirectory(item.directory, item.base);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n  }, {\n    key: \"_handleDirectory\",\n    value: function _handleDirectory(directory, base) {\n      try {\n        var entries = this._scandir(directory, this._settings.fsScandirSettings);\n\n        var _iterator2 = _createForOfIteratorHelper(entries),\n            _step2;\n\n        try {\n          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n            var entry = _step2.value;\n\n            this._handleEntry(entry, base);\n          }\n        } catch (err) {\n          _iterator2.e(err);\n        } finally {\n          _iterator2.f();\n        }\n      } catch (error) {\n        this._handleError(error);\n      }\n    }\n  }, {\n    key: \"_handleError\",\n    value: function _handleError(error) {\n      if (!common.isFatalError(this._settings, error)) {\n        return;\n      }\n\n      throw error;\n    }\n  }, {\n    key: \"_handleEntry\",\n    value: function _handleEntry(entry, base) {\n      var fullpath = entry.path;\n\n      if (base !== undefined) {\n        entry.path = common.joinPathSegments(base, entry.name, this._settings.pathSegmentSeparator);\n      }\n\n      if (common.isAppliedFilter(this._settings.entryFilter, entry)) {\n        this._pushToStorage(entry);\n      }\n\n      if (entry.dirent.isDirectory() && common.isAppliedFilter(this._settings.deepFilter, entry)) {\n        this._pushToQueue(fullpath, entry.path);\n      }\n    }\n  }, {\n    key: \"_pushToStorage\",\n    value: function _pushToStorage(entry) {\n      this._storage.add(entry);\n    }\n  }]);\n\n  return SyncReader;\n}(reader_1.default);\n\nexports.default = SyncReader;","map":{"version":3,"sources":["/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@nodelib/fs.walk/out/readers/sync.js"],"names":["Object","defineProperty","exports","value","fsScandir","require","common","reader_1","SyncReader","arguments","_scandir","scandirSync","_storage","Set","_queue","_pushToQueue","_root","_settings","basePath","_handleQueue","directory","base","add","values","item","_handleDirectory","entries","fsScandirSettings","entry","_handleEntry","error","_handleError","isFatalError","fullpath","path","undefined","joinPathSegments","name","pathSegmentSeparator","isAppliedFilter","entryFilter","_pushToStorage","dirent","isDirectory","deepFilter","default"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst fsScandir = require(\"@nodelib/fs.scandir\");\nconst common = require(\"./common\");\nconst reader_1 = require(\"./reader\");\nclass SyncReader extends reader_1.default {\n    constructor() {\n        super(...arguments);\n        this._scandir = fsScandir.scandirSync;\n        this._storage = new Set();\n        this._queue = new Set();\n    }\n    read() {\n        this._pushToQueue(this._root, this._settings.basePath);\n        this._handleQueue();\n        return [...this._storage];\n    }\n    _pushToQueue(directory, base) {\n        this._queue.add({ directory, base });\n    }\n    _handleQueue() {\n        for (const item of this._queue.values()) {\n            this._handleDirectory(item.directory, item.base);\n        }\n    }\n    _handleDirectory(directory, base) {\n        try {\n            const entries = this._scandir(directory, this._settings.fsScandirSettings);\n            for (const entry of entries) {\n                this._handleEntry(entry, base);\n            }\n        }\n        catch (error) {\n            this._handleError(error);\n        }\n    }\n    _handleError(error) {\n        if (!common.isFatalError(this._settings, error)) {\n            return;\n        }\n        throw error;\n    }\n    _handleEntry(entry, base) {\n        const fullpath = entry.path;\n        if (base !== undefined) {\n            entry.path = common.joinPathSegments(base, entry.name, this._settings.pathSegmentSeparator);\n        }\n        if (common.isAppliedFilter(this._settings.entryFilter, entry)) {\n            this._pushToStorage(entry);\n        }\n        if (entry.dirent.isDirectory() && common.isAppliedFilter(this._settings.deepFilter, entry)) {\n            this._pushToQueue(fullpath, entry.path);\n        }\n    }\n    _pushToStorage(entry) {\n        this._storage.add(entry);\n    }\n}\nexports.default = SyncReader;\n"]},"metadata":{},"sourceType":"script"}