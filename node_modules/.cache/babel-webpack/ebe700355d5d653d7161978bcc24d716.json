{"ast":null,"code":"'use strict';\n\nvar util = require('util');\n\nvar constants = require('../constants');\n\nvar helper = require('../helper');\n\nvar BaseReporter = function BaseReporter(formatError, reportSlow, useColors, browserConsoleLogOptions, adapter) {\n  var _this = this;\n\n  this.adapters = [adapter || process.stdout.write.bind(process.stdout)];\n  this.USE_COLORS = false;\n  this.EXCLUSIVELY_USE_COLORS = undefined;\n  this.LOG_SINGLE_BROWSER = '%s: %s\\n';\n  this.LOG_MULTI_BROWSER = '%s %s: %s\\n';\n  this.SPEC_FAILURE = '%s %s FAILED' + '\\n';\n  this.SPEC_SLOW = '%s SLOW %s: %s\\n';\n  this.ERROR = '%s ERROR\\n';\n  this.FINISHED_ERROR = ' ERROR';\n  this.FINISHED_SUCCESS = ' SUCCESS';\n  this.FINISHED_DISCONNECTED = ' DISCONNECTED';\n  this.X_FAILED = ' (%d FAILED)';\n  this.TOTAL_SUCCESS = 'TOTAL: %d SUCCESS\\n';\n  this.TOTAL_FAILED = 'TOTAL: %d FAILED, %d SUCCESS\\n';\n\n  this.onRunStart = function () {\n    _this._browsers = [];\n  };\n\n  this.onBrowserStart = function (browser) {\n    _this._browsers.push(browser);\n  };\n\n  this.renderBrowser = function (browser) {\n    var results = browser.lastResult;\n    var totalExecuted = results.success + results.failed;\n    var msg = \"\".concat(browser, \": Executed \").concat(totalExecuted, \" of \").concat(results.total);\n\n    if (results.failed) {\n      msg += util.format(_this.X_FAILED, results.failed);\n    }\n\n    if (results.skipped) {\n      msg += \" (skipped \".concat(results.skipped, \")\");\n    }\n\n    if (browser.isConnected) {\n      if (results.disconnected) {\n        msg += _this.FINISHED_DISCONNECTED;\n      } else if (results.error) {\n        msg += _this.FINISHED_ERROR;\n      } else if (!results.failed) {\n        msg += _this.FINISHED_SUCCESS;\n      }\n\n      msg += \" (\".concat(helper.formatTimeInterval(results.totalTime), \" / \").concat(helper.formatTimeInterval(results.netTime), \")\");\n    }\n\n    return msg;\n  };\n\n  this.write = function () {\n    var _this2 = this;\n\n    var msg = util.format.apply(null, Array.prototype.slice.call(arguments));\n    this.adapters.forEach(function (adapter) {\n      if (!helper.isDefined(adapter.colors)) {\n        adapter.colors = useColors;\n      }\n\n      if (!helper.isDefined(_this2.EXCLUSIVELY_USE_COLORS) || adapter.colors === _this2.EXCLUSIVELY_USE_COLORS) {\n        return adapter(msg);\n      }\n    });\n  };\n\n  this.writeCommonMsg = function () {\n    this.write.apply(this, arguments);\n  };\n\n  this.onBrowserError = function (browser, error) {\n    _this.writeCommonMsg(util.format(_this.ERROR, browser) + formatError(error, '  '));\n  };\n\n  this.onBrowserLog = function (browser, log, type) {\n    if (!browserConsoleLogOptions || !browserConsoleLogOptions.terminal) return;\n    type = type.toUpperCase();\n\n    if (browserConsoleLogOptions.level) {\n      var logPriority = constants.LOG_PRIORITIES.indexOf(browserConsoleLogOptions.level.toUpperCase());\n      if (constants.LOG_PRIORITIES.indexOf(type) > logPriority) return;\n    }\n\n    if (!helper.isString(log)) {\n      // TODO(vojta): change util to new syntax (config object)\n      log = util.inspect(log, false, undefined, _this.USE_COLORS);\n    }\n\n    if (_this._browsers && _this._browsers.length === 1) {\n      _this.writeCommonMsg(util.format(_this.LOG_SINGLE_BROWSER, type, log));\n    } else {\n      _this.writeCommonMsg(util.format(_this.LOG_MULTI_BROWSER, browser, type, log));\n    }\n  };\n\n  this.onSpecComplete = function (browser, result) {\n    if (result.skipped) {\n      _this.specSkipped(browser, result);\n    } else if (result.success) {\n      _this.specSuccess(browser, result);\n    } else {\n      _this.specFailure(browser, result);\n    }\n\n    if (reportSlow && result.time > reportSlow) {\n      var specName = result.suite.join(' ') + ' ' + result.description;\n      var time = helper.formatTimeInterval(result.time);\n\n      _this.writeCommonMsg(util.format(_this.SPEC_SLOW, browser, time, specName));\n    }\n  };\n\n  this.specSuccess = function () {};\n\n  this.specSkipped = function () {};\n\n  this.specFailure = function (browser, result) {\n    var specName = result.suite.join(' ') + ' ' + result.description;\n    var msg = util.format(_this.SPEC_FAILURE, browser, specName);\n    result.log.forEach(function (log) {\n      msg += formatError(log, '\\t');\n    });\n\n    _this.writeCommonMsg(msg);\n  };\n\n  this.onRunComplete = function (browsers, results) {\n    if (browsers.length >= 1 && !results.error && !results.disconnected) {\n      if (!results.failed) {\n        _this.write(_this.TOTAL_SUCCESS, results.success);\n      } else {\n        _this.write(_this.TOTAL_FAILED, results.failed, results.success);\n      }\n    }\n  };\n};\n\nBaseReporter.decoratorFactory = function (formatError, reportSlow, useColors, browserConsoleLogOptions) {\n  return function (self) {\n    BaseReporter.call(self, formatError, reportSlow, useColors, browserConsoleLogOptions);\n  };\n};\n\nBaseReporter.decoratorFactory.$inject = ['formatError', 'config.reportSlowerThan', 'config.colors', 'config.browserConsoleLogOptions']; // PUBLISH\n\nmodule.exports = BaseReporter;","map":{"version":3,"sources":["/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/karma/lib/reporters/base.js"],"names":["util","require","constants","helper","BaseReporter","formatError","reportSlow","useColors","browserConsoleLogOptions","adapter","adapters","process","stdout","write","bind","USE_COLORS","EXCLUSIVELY_USE_COLORS","undefined","LOG_SINGLE_BROWSER","LOG_MULTI_BROWSER","SPEC_FAILURE","SPEC_SLOW","ERROR","FINISHED_ERROR","FINISHED_SUCCESS","FINISHED_DISCONNECTED","X_FAILED","TOTAL_SUCCESS","TOTAL_FAILED","onRunStart","_browsers","onBrowserStart","browser","push","renderBrowser","results","lastResult","totalExecuted","success","failed","msg","total","format","skipped","isConnected","disconnected","error","formatTimeInterval","totalTime","netTime","apply","Array","prototype","slice","call","arguments","forEach","isDefined","colors","writeCommonMsg","onBrowserError","onBrowserLog","log","type","terminal","toUpperCase","level","logPriority","LOG_PRIORITIES","indexOf","isString","inspect","length","onSpecComplete","result","specSkipped","specSuccess","specFailure","time","specName","suite","join","description","onRunComplete","browsers","decoratorFactory","self","$inject","module","exports"],"mappings":"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","sourcesContent":["'use strict'\n\nconst util = require('util')\n\nconst constants = require('../constants')\nconst helper = require('../helper')\n\nconst BaseReporter = function (formatError, reportSlow, useColors, browserConsoleLogOptions, adapter) {\n  this.adapters = [adapter || process.stdout.write.bind(process.stdout)]\n\n  this.USE_COLORS = false\n  this.EXCLUSIVELY_USE_COLORS = undefined\n  this.LOG_SINGLE_BROWSER = '%s: %s\\n'\n  this.LOG_MULTI_BROWSER = '%s %s: %s\\n'\n\n  this.SPEC_FAILURE = '%s %s FAILED' + '\\n'\n  this.SPEC_SLOW = '%s SLOW %s: %s\\n'\n  this.ERROR = '%s ERROR\\n'\n\n  this.FINISHED_ERROR = ' ERROR'\n  this.FINISHED_SUCCESS = ' SUCCESS'\n  this.FINISHED_DISCONNECTED = ' DISCONNECTED'\n\n  this.X_FAILED = ' (%d FAILED)'\n\n  this.TOTAL_SUCCESS = 'TOTAL: %d SUCCESS\\n'\n  this.TOTAL_FAILED = 'TOTAL: %d FAILED, %d SUCCESS\\n'\n\n  this.onRunStart = () => {\n    this._browsers = []\n  }\n\n  this.onBrowserStart = (browser) => {\n    this._browsers.push(browser)\n  }\n\n  this.renderBrowser = (browser) => {\n    const results = browser.lastResult\n    const totalExecuted = results.success + results.failed\n    let msg = `${browser}: Executed ${totalExecuted} of ${results.total}`\n\n    if (results.failed) {\n      msg += util.format(this.X_FAILED, results.failed)\n    }\n\n    if (results.skipped) {\n      msg += ` (skipped ${results.skipped})`\n    }\n\n    if (browser.isConnected) {\n      if (results.disconnected) {\n        msg += this.FINISHED_DISCONNECTED\n      } else if (results.error) {\n        msg += this.FINISHED_ERROR\n      } else if (!results.failed) {\n        msg += this.FINISHED_SUCCESS\n      }\n\n      msg += ` (${helper.formatTimeInterval(results.totalTime)} / ${helper.formatTimeInterval(results.netTime)})`\n    }\n\n    return msg\n  }\n\n  this.write = function () {\n    const msg = util.format.apply(null, Array.prototype.slice.call(arguments))\n    this.adapters.forEach((adapter) => {\n      if (!helper.isDefined(adapter.colors)) {\n        adapter.colors = useColors\n      }\n      if (!helper.isDefined(this.EXCLUSIVELY_USE_COLORS) || adapter.colors === this.EXCLUSIVELY_USE_COLORS) {\n        return adapter(msg)\n      }\n    })\n  }\n\n  this.writeCommonMsg = function () {\n    this.write.apply(this, arguments)\n  }\n\n  this.onBrowserError = (browser, error) => {\n    this.writeCommonMsg(util.format(this.ERROR, browser) + formatError(error, '  '))\n  }\n\n  this.onBrowserLog = (browser, log, type) => {\n    if (!browserConsoleLogOptions || !browserConsoleLogOptions.terminal) return\n    type = type.toUpperCase()\n    if (browserConsoleLogOptions.level) {\n      const logPriority = constants.LOG_PRIORITIES.indexOf(browserConsoleLogOptions.level.toUpperCase())\n      if (constants.LOG_PRIORITIES.indexOf(type) > logPriority) return\n    }\n    if (!helper.isString(log)) {\n      // TODO(vojta): change util to new syntax (config object)\n      log = util.inspect(log, false, undefined, this.USE_COLORS)\n    }\n    if (this._browsers && this._browsers.length === 1) {\n      this.writeCommonMsg(util.format(this.LOG_SINGLE_BROWSER, type, log))\n    } else {\n      this.writeCommonMsg(util.format(this.LOG_MULTI_BROWSER, browser, type, log))\n    }\n  }\n\n  this.onSpecComplete = (browser, result) => {\n    if (result.skipped) {\n      this.specSkipped(browser, result)\n    } else if (result.success) {\n      this.specSuccess(browser, result)\n    } else {\n      this.specFailure(browser, result)\n    }\n\n    if (reportSlow && result.time > reportSlow) {\n      const specName = result.suite.join(' ') + ' ' + result.description\n      const time = helper.formatTimeInterval(result.time)\n\n      this.writeCommonMsg(util.format(this.SPEC_SLOW, browser, time, specName))\n    }\n  }\n\n  this.specSuccess = () => {\n  }\n\n  this.specSkipped = () => {\n  }\n\n  this.specFailure = (browser, result) => {\n    const specName = result.suite.join(' ') + ' ' + result.description\n    let msg = util.format(this.SPEC_FAILURE, browser, specName)\n\n    result.log.forEach((log) => {\n      msg += formatError(log, '\\t')\n    })\n\n    this.writeCommonMsg(msg)\n  }\n\n  this.onRunComplete = (browsers, results) => {\n    if (browsers.length >= 1 && !results.error && !results.disconnected) {\n      if (!results.failed) {\n        this.write(this.TOTAL_SUCCESS, results.success)\n      } else {\n        this.write(this.TOTAL_FAILED, results.failed, results.success)\n      }\n    }\n  }\n}\n\nBaseReporter.decoratorFactory = function (formatError, reportSlow, useColors, browserConsoleLogOptions) {\n  return function (self) {\n    BaseReporter.call(self, formatError, reportSlow, useColors, browserConsoleLogOptions)\n  }\n}\n\nBaseReporter.decoratorFactory.$inject = [\n  'formatError',\n  'config.reportSlowerThan',\n  'config.colors',\n  'config.browserConsoleLogOptions'\n]\n\n// PUBLISH\nmodule.exports = BaseReporter\n"]},"metadata":{},"sourceType":"script"}