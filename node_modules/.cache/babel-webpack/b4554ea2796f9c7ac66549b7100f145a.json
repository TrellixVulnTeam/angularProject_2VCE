{"ast":null,"code":"import _regeneratorRuntime from \"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/regenerator\";\nimport _defineProperty from \"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _asyncToGenerator from \"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport \"./lib/transform.js\";\nimport \"./lib/mozilla-ast.js\";\nimport { minify } from \"./lib/minify.js\";\nexport { minify } from \"./lib/minify.js\";\nexport { run_cli as _run_cli } from \"./lib/cli.js\";\nexport function _default_options() {\n  return _default_options2.apply(this, arguments);\n}\n\nfunction _default_options2() {\n  _default_options2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var defs;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            defs = {};\n            Object.keys(infer_options({\n              0: 0\n            })).forEach(function (component) {\n              var options = infer_options(_defineProperty({}, component, {\n                0: 0\n              }));\n              if (options) defs[component] = options;\n            });\n            return _context.abrupt(\"return\", defs);\n\n          case 3:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _default_options2.apply(this, arguments);\n}\n\nfunction infer_options(_x) {\n  return _infer_options.apply(this, arguments);\n}\n\nfunction _infer_options() {\n  _infer_options = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(options) {\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.prev = 0;\n            _context2.next = 3;\n            return minify(\"\", options);\n\n          case 3:\n            _context2.next = 8;\n            break;\n\n          case 5:\n            _context2.prev = 5;\n            _context2.t0 = _context2[\"catch\"](0);\n            return _context2.abrupt(\"return\", _context2.t0.defs);\n\n          case 8:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2, null, [[0, 5]]);\n  }));\n  return _infer_options.apply(this, arguments);\n}","map":{"version":3,"sources":["/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/terser/main.js"],"names":["minify","run_cli","_run_cli","_default_options","defs","Object","keys","infer_options","forEach","component","options"],"mappings":";;;AAAA,OAAO,oBAAP;AACA,OAAO,sBAAP;AACA,SAASA,MAAT,QAAuB,iBAAvB;AAEA,SAASA,MAAT,QAAuB,iBAAvB;AACA,SAASC,OAAO,IAAIC,QAApB,QAAoC,cAApC;AAEA,gBAAsBC,gBAAtB;AAAA;AAAA;;;+EAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AACGC,YAAAA,IADH,GACU,EADV;AAGHC,YAAAA,MAAM,CAACC,IAAP,CAAYC,aAAa,CAAC;AAAE,iBAAG;AAAL,aAAD,CAAzB,EAAqCC,OAArC,CAA6C,UAACC,SAAD,EAAe;AACxD,kBAAMC,OAAO,GAAGH,aAAa,qBACxBE,SADwB,EACZ;AAAC,mBAAG;AAAJ,eADY,EAA7B;AAIA,kBAAIC,OAAJ,EAAaN,IAAI,CAACK,SAAD,CAAJ,GAAkBC,OAAlB;AAChB,aAND;AAHG,6CAUIN,IAVJ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;SAaQG,a;;;;;4EAAf,kBAA6BG,OAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAEcV,MAAM,CAAC,EAAD,EAAKU,OAAL,CAFpB;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA,8CAIe,aAAMN,IAJrB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["import \"./lib/transform.js\";\nimport \"./lib/mozilla-ast.js\";\nimport { minify } from \"./lib/minify.js\";\n\nexport { minify } from \"./lib/minify.js\";\nexport { run_cli as _run_cli } from \"./lib/cli.js\";\n\nexport async function _default_options() {\n    const defs = {};\n\n    Object.keys(infer_options({ 0: 0 })).forEach((component) => {\n        const options = infer_options({\n            [component]: {0: 0}\n        });\n\n        if (options) defs[component] = options;\n    });\n    return defs;\n}\n\nasync function infer_options(options) {\n    try {\n        await minify(\"\", options);\n    } catch (error) {\n        return error.defs;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}