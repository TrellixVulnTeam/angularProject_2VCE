{"ast":null,"code":"var util = require('util');\n\nvar debug = require('debug')('log4js:configuration');\n\nvar preProcessingListeners = [];\nvar listeners = [];\n\nvar not = function not(thing) {\n  return !thing;\n};\n\nvar anObject = function anObject(thing) {\n  return thing && typeof thing === 'object' && !Array.isArray(thing);\n};\n\nvar validIdentifier = function validIdentifier(thing) {\n  return /^[A-Za-z][A-Za-z0-9_]*$/g.test(thing);\n};\n\nvar anInteger = function anInteger(thing) {\n  return thing && typeof thing === 'number' && Number.isInteger(thing);\n};\n\nvar addListener = function addListener(fn) {\n  listeners.push(fn);\n  debug(\"Added listener, now \".concat(listeners.length, \" listeners\"));\n};\n\nvar addPreProcessingListener = function addPreProcessingListener(fn) {\n  preProcessingListeners.push(fn);\n  debug(\"Added pre-processing listener, now \".concat(preProcessingListeners.length, \" listeners\"));\n};\n\nvar throwExceptionIf = function throwExceptionIf(config, checks, message) {\n  var tests = Array.isArray(checks) ? checks : [checks];\n  tests.forEach(function (test) {\n    if (test) {\n      throw new Error(\"Problem with log4js configuration: (\".concat(util.inspect(config, {\n        depth: 5\n      }), \")\") + \" - \".concat(message));\n    }\n  });\n};\n\nvar configure = function configure(candidate) {\n  debug('New configuration to be validated: ', candidate);\n  throwExceptionIf(candidate, not(anObject(candidate)), 'must be an object.');\n  debug(\"Calling pre-processing listeners (\".concat(preProcessingListeners.length, \")\"));\n  preProcessingListeners.forEach(function (listener) {\n    return listener(candidate);\n  });\n  debug('Configuration pre-processing finished.');\n  debug(\"Calling configuration listeners (\".concat(listeners.length, \")\"));\n  listeners.forEach(function (listener) {\n    return listener(candidate);\n  });\n  debug('Configuration finished.');\n};\n\nmodule.exports = {\n  configure: configure,\n  addListener: addListener,\n  addPreProcessingListener: addPreProcessingListener,\n  throwExceptionIf: throwExceptionIf,\n  anObject: anObject,\n  anInteger: anInteger,\n  validIdentifier: validIdentifier,\n  not: not\n};","map":{"version":3,"sources":["/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/log4js/lib/configuration.js"],"names":["util","require","debug","preProcessingListeners","listeners","not","thing","anObject","Array","isArray","validIdentifier","test","anInteger","Number","isInteger","addListener","fn","push","length","addPreProcessingListener","throwExceptionIf","config","checks","message","tests","forEach","Error","inspect","depth","configure","candidate","listener","module","exports"],"mappings":"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","sourcesContent":["\n\nconst util = require('util');\nconst debug = require('debug')('log4js:configuration');\n\nconst preProcessingListeners = [];\nconst listeners = [];\n\nconst not = thing => !thing;\n\nconst anObject = thing => thing && typeof thing === 'object' && !Array.isArray(thing);\n\nconst validIdentifier = thing => /^[A-Za-z][A-Za-z0-9_]*$/g.test(thing);\n\nconst anInteger = thing => thing && typeof thing === 'number' && Number.isInteger(thing);\n\nconst addListener = (fn) => {\n  listeners.push(fn);\n  debug(`Added listener, now ${listeners.length} listeners`);\n};\n\nconst addPreProcessingListener = (fn) => {\n  preProcessingListeners.push(fn);\n  debug(`Added pre-processing listener, now ${preProcessingListeners.length} listeners`);\n};\n\nconst throwExceptionIf = (config, checks, message) => {\n  const tests = Array.isArray(checks) ? checks : [checks];\n  tests.forEach((test) => {\n    if (test) {\n      throw new Error(`Problem with log4js configuration: (${util.inspect(config, { depth: 5 })})`\n        + ` - ${message}`);\n    }\n  });\n};\n\nconst configure = (candidate) => {\n  debug('New configuration to be validated: ', candidate);\n  throwExceptionIf(candidate, not(anObject(candidate)), 'must be an object.');\n\n  debug(`Calling pre-processing listeners (${preProcessingListeners.length})`);\n  preProcessingListeners.forEach(listener => listener(candidate));\n  debug('Configuration pre-processing finished.');\n\n  debug(`Calling configuration listeners (${listeners.length})`);\n  listeners.forEach(listener => listener(candidate));\n  debug('Configuration finished.');\n};\n\nmodule.exports = {\n  configure,\n  addListener,\n  addPreProcessingListener,\n  throwExceptionIf,\n  anObject,\n  anInteger,\n  validIdentifier,\n  not\n};\n"]},"metadata":{},"sourceType":"script"}