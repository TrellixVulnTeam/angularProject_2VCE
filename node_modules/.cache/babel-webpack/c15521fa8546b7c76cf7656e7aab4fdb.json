{"ast":null,"code":"var debug = require(\"debug\")(\"log4js:clustering\");\n\nvar LoggingEvent = require(\"./LoggingEvent\");\n\nvar configuration = require(\"./configuration\");\n\nvar disabled = false;\nvar cluster = null;\n\ntry {\n  cluster = require(\"cluster\"); //eslint-disable-line\n} catch (e) {\n  debug(\"cluster module not present\");\n  disabled = true;\n}\n\nvar listeners = [];\nvar pm2 = false;\nvar pm2InstanceVar = \"NODE_APP_INSTANCE\";\n\nvar isPM2Master = function isPM2Master() {\n  return pm2 && process.env[pm2InstanceVar] === \"0\";\n};\n\nvar isMaster = function isMaster() {\n  return disabled || cluster.isMaster || isPM2Master();\n};\n\nvar sendToListeners = function sendToListeners(logEvent) {\n  listeners.forEach(function (l) {\n    return l(logEvent);\n  });\n}; // in a multi-process node environment, worker loggers will use\n// process.send\n\n\nvar receiver = function receiver(worker, message) {\n  // prior to node v6, the worker parameter was not passed (args were message, handle)\n  debug(\"cluster message received from worker \", worker, \": \", message);\n\n  if (worker.topic && worker.data) {\n    message = worker;\n    worker = undefined;\n  }\n\n  if (message && message.topic && message.topic === \"log4js:message\") {\n    debug(\"received message: \", message.data);\n    var logEvent = LoggingEvent.deserialise(message.data);\n    sendToListeners(logEvent);\n  }\n};\n\nif (!disabled) {\n  configuration.addListener(function (config) {\n    // clear out the listeners, because configure has been called.\n    listeners.length = 0;\n    pm2 = config.pm2;\n    disabled = config.disableClustering;\n    var _config$pm2InstanceVa = config.pm2InstanceVar;\n    pm2InstanceVar = _config$pm2InstanceVa === void 0 ? \"NODE_APP_INSTANCE\" : _config$pm2InstanceVa;\n    debug(\"clustering disabled ? \".concat(disabled));\n    debug(\"cluster.isMaster ? \".concat(cluster && cluster.isMaster));\n    debug(\"pm2 enabled ? \".concat(pm2));\n    debug(\"pm2InstanceVar = \".concat(pm2InstanceVar));\n    debug(\"process.env[\".concat(pm2InstanceVar, \"] = \").concat(process.env[pm2InstanceVar])); // just in case configure is called after shutdown\n\n    if (pm2) {\n      process.removeListener(\"message\", receiver);\n    }\n\n    if (cluster && cluster.removeListener) {\n      cluster.removeListener(\"message\", receiver);\n    }\n\n    if (disabled || config.disableClustering) {\n      debug(\"Not listening for cluster messages, because clustering disabled.\");\n    } else if (isPM2Master()) {\n      // PM2 cluster support\n      // PM2 runs everything as workers - install pm2-intercom for this to work.\n      // we only want one of the app instances to write logs\n      debug(\"listening for PM2 broadcast messages\");\n      process.on(\"message\", receiver);\n    } else if (cluster.isMaster) {\n      debug(\"listening for cluster messages\");\n      cluster.on(\"message\", receiver);\n    } else {\n      debug(\"not listening for messages, because we are not a master process\");\n    }\n  });\n}\n\nmodule.exports = {\n  onlyOnMaster: function onlyOnMaster(fn, notMaster) {\n    return isMaster() ? fn() : notMaster;\n  },\n  isMaster: isMaster,\n  send: function send(msg) {\n    if (isMaster()) {\n      sendToListeners(msg);\n    } else {\n      if (!pm2) {\n        msg.cluster = {\n          workerId: cluster.worker.id,\n          worker: process.pid\n        };\n      }\n\n      process.send({\n        topic: \"log4js:message\",\n        data: msg.serialise()\n      });\n    }\n  },\n  onMessage: function onMessage(listener) {\n    listeners.push(listener);\n  }\n};","map":{"version":3,"sources":["/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/log4js/lib/clustering.js"],"names":["debug","require","LoggingEvent","configuration","disabled","cluster","e","listeners","pm2","pm2InstanceVar","isPM2Master","process","env","isMaster","sendToListeners","logEvent","forEach","l","receiver","worker","message","topic","data","undefined","deserialise","addListener","config","length","disableClustering","removeListener","on","module","exports","onlyOnMaster","fn","notMaster","send","msg","workerId","id","pid","serialise","onMessage","listener","push"],"mappings":"AAAA,IAAMA,KAAK,GAAGC,OAAO,CAAC,OAAD,CAAP,CAAiB,mBAAjB,CAAd;;AACA,IAAMC,YAAY,GAAGD,OAAO,CAAC,gBAAD,CAA5B;;AACA,IAAME,aAAa,GAAGF,OAAO,CAAC,iBAAD,CAA7B;;AAEA,IAAIG,QAAQ,GAAG,KAAf;AACA,IAAIC,OAAO,GAAG,IAAd;;AACA,IAAI;AACFA,EAAAA,OAAO,GAAGJ,OAAO,CAAC,SAAD,CAAjB,CADE,CAC4B;AAC/B,CAFD,CAEE,OAAOK,CAAP,EAAU;AACVN,EAAAA,KAAK,CAAC,4BAAD,CAAL;AACAI,EAAAA,QAAQ,GAAG,IAAX;AACD;;AAED,IAAMG,SAAS,GAAG,EAAlB;AAEA,IAAIC,GAAG,GAAG,KAAV;AACA,IAAIC,cAAc,GAAG,mBAArB;;AAEA,IAAMC,WAAW,GAAG,SAAdA,WAAc;AAAA,SAAMF,GAAG,IAAIG,OAAO,CAACC,GAAR,CAAYH,cAAZ,MAAgC,GAA7C;AAAA,CAApB;;AACA,IAAMI,QAAQ,GAAG,SAAXA,QAAW;AAAA,SAAMT,QAAQ,IAAIC,OAAO,CAACQ,QAApB,IAAgCH,WAAW,EAAjD;AAAA,CAAjB;;AAEA,IAAMI,eAAe,GAAG,SAAlBA,eAAkB,CAAAC,QAAQ,EAAI;AAClCR,EAAAA,SAAS,CAACS,OAAV,CAAkB,UAAAC,CAAC;AAAA,WAAIA,CAAC,CAACF,QAAD,CAAL;AAAA,GAAnB;AACD,CAFD,C,CAIA;AACA;;;AACA,IAAMG,QAAQ,GAAG,SAAXA,QAAW,CAACC,MAAD,EAASC,OAAT,EAAqB;AACpC;AACApB,EAAAA,KAAK,CAAC,uCAAD,EAA0CmB,MAA1C,EAAkD,IAAlD,EAAwDC,OAAxD,CAAL;;AACA,MAAID,MAAM,CAACE,KAAP,IAAgBF,MAAM,CAACG,IAA3B,EAAiC;AAC/BF,IAAAA,OAAO,GAAGD,MAAV;AACAA,IAAAA,MAAM,GAAGI,SAAT;AACD;;AACD,MAAIH,OAAO,IAAIA,OAAO,CAACC,KAAnB,IAA4BD,OAAO,CAACC,KAAR,KAAkB,gBAAlD,EAAoE;AAClErB,IAAAA,KAAK,CAAC,oBAAD,EAAuBoB,OAAO,CAACE,IAA/B,CAAL;AACA,QAAMP,QAAQ,GAAGb,YAAY,CAACsB,WAAb,CAAyBJ,OAAO,CAACE,IAAjC,CAAjB;AACAR,IAAAA,eAAe,CAACC,QAAD,CAAf;AACD;AACF,CAZD;;AAcA,IAAI,CAACX,QAAL,EAAe;AACbD,EAAAA,aAAa,CAACsB,WAAd,CAA0B,UAAAC,MAAM,EAAI;AAClC;AACAnB,IAAAA,SAAS,CAACoB,MAAV,GAAmB,CAAnB;AAGEnB,IAAAA,GALgC,GAQ9BkB,MAR8B,CAKhClB,GALgC;AAMbJ,IAAAA,QANa,GAQ9BsB,MAR8B,CAMhCE,iBANgC;AAAA,gCAQ9BF,MAR8B,CAOhCjB,cAPgC;AAOhCA,IAAAA,cAPgC,sCAOf,mBAPe;AAUlCT,IAAAA,KAAK,iCAA0BI,QAA1B,EAAL;AACAJ,IAAAA,KAAK,8BAAuBK,OAAO,IAAIA,OAAO,CAACQ,QAA1C,EAAL;AACAb,IAAAA,KAAK,yBAAkBQ,GAAlB,EAAL;AACAR,IAAAA,KAAK,4BAAqBS,cAArB,EAAL;AACAT,IAAAA,KAAK,uBAAgBS,cAAhB,iBAAqCE,OAAO,CAACC,GAAR,CAAYH,cAAZ,CAArC,EAAL,CAdkC,CAgBlC;;AACA,QAAID,GAAJ,EAAS;AACPG,MAAAA,OAAO,CAACkB,cAAR,CAAuB,SAAvB,EAAkCX,QAAlC;AACD;;AACD,QAAIb,OAAO,IAAIA,OAAO,CAACwB,cAAvB,EAAuC;AACrCxB,MAAAA,OAAO,CAACwB,cAAR,CAAuB,SAAvB,EAAkCX,QAAlC;AACD;;AAED,QAAId,QAAQ,IAAIsB,MAAM,CAACE,iBAAvB,EAA0C;AACxC5B,MAAAA,KAAK,CAAC,kEAAD,CAAL;AACD,KAFD,MAEO,IAAIU,WAAW,EAAf,EAAmB;AACxB;AACA;AACA;AACAV,MAAAA,KAAK,CAAC,sCAAD,CAAL;AACAW,MAAAA,OAAO,CAACmB,EAAR,CAAW,SAAX,EAAsBZ,QAAtB;AACD,KANM,MAMA,IAAIb,OAAO,CAACQ,QAAZ,EAAsB;AAC3Bb,MAAAA,KAAK,CAAC,gCAAD,CAAL;AACAK,MAAAA,OAAO,CAACyB,EAAR,CAAW,SAAX,EAAsBZ,QAAtB;AACD,KAHM,MAGA;AACLlB,MAAAA,KAAK,CAAC,iEAAD,CAAL;AACD;AACF,GAtCD;AAuCD;;AAED+B,MAAM,CAACC,OAAP,GAAiB;AACfC,EAAAA,YAAY,EAAE,sBAACC,EAAD,EAAKC,SAAL;AAAA,WAAoBtB,QAAQ,KAAKqB,EAAE,EAAP,GAAYC,SAAxC;AAAA,GADC;AAEftB,EAAAA,QAAQ,EAARA,QAFe;AAGfuB,EAAAA,IAAI,EAAE,cAAAC,GAAG,EAAI;AACX,QAAIxB,QAAQ,EAAZ,EAAgB;AACdC,MAAAA,eAAe,CAACuB,GAAD,CAAf;AACD,KAFD,MAEO;AACL,UAAI,CAAC7B,GAAL,EAAU;AACR6B,QAAAA,GAAG,CAAChC,OAAJ,GAAc;AACZiC,UAAAA,QAAQ,EAAEjC,OAAO,CAACc,MAAR,CAAeoB,EADb;AAEZpB,UAAAA,MAAM,EAAER,OAAO,CAAC6B;AAFJ,SAAd;AAID;;AACD7B,MAAAA,OAAO,CAACyB,IAAR,CAAa;AAAEf,QAAAA,KAAK,EAAE,gBAAT;AAA2BC,QAAAA,IAAI,EAAEe,GAAG,CAACI,SAAJ;AAAjC,OAAb;AACD;AACF,GAfc;AAgBfC,EAAAA,SAAS,EAAE,mBAAAC,QAAQ,EAAI;AACrBpC,IAAAA,SAAS,CAACqC,IAAV,CAAeD,QAAf;AACD;AAlBc,CAAjB","sourcesContent":["const debug = require(\"debug\")(\"log4js:clustering\");\nconst LoggingEvent = require(\"./LoggingEvent\");\nconst configuration = require(\"./configuration\");\n\nlet disabled = false;\nlet cluster = null;\ntry {\n  cluster = require(\"cluster\"); //eslint-disable-line\n} catch (e) {\n  debug(\"cluster module not present\");\n  disabled = true;\n}\n\nconst listeners = [];\n\nlet pm2 = false;\nlet pm2InstanceVar = \"NODE_APP_INSTANCE\";\n\nconst isPM2Master = () => pm2 && process.env[pm2InstanceVar] === \"0\";\nconst isMaster = () => disabled || cluster.isMaster || isPM2Master();\n\nconst sendToListeners = logEvent => {\n  listeners.forEach(l => l(logEvent));\n};\n\n// in a multi-process node environment, worker loggers will use\n// process.send\nconst receiver = (worker, message) => {\n  // prior to node v6, the worker parameter was not passed (args were message, handle)\n  debug(\"cluster message received from worker \", worker, \": \", message);\n  if (worker.topic && worker.data) {\n    message = worker;\n    worker = undefined;\n  }\n  if (message && message.topic && message.topic === \"log4js:message\") {\n    debug(\"received message: \", message.data);\n    const logEvent = LoggingEvent.deserialise(message.data);\n    sendToListeners(logEvent);\n  }\n};\n\nif (!disabled) {\n  configuration.addListener(config => {\n    // clear out the listeners, because configure has been called.\n    listeners.length = 0;\n\n    ({\n      pm2,\n      disableClustering: disabled,\n      pm2InstanceVar = \"NODE_APP_INSTANCE\"\n    } = config);\n\n    debug(`clustering disabled ? ${disabled}`);\n    debug(`cluster.isMaster ? ${cluster && cluster.isMaster}`);\n    debug(`pm2 enabled ? ${pm2}`);\n    debug(`pm2InstanceVar = ${pm2InstanceVar}`);\n    debug(`process.env[${pm2InstanceVar}] = ${process.env[pm2InstanceVar]}`);\n\n    // just in case configure is called after shutdown\n    if (pm2) {\n      process.removeListener(\"message\", receiver);\n    }\n    if (cluster && cluster.removeListener) {\n      cluster.removeListener(\"message\", receiver);\n    }\n\n    if (disabled || config.disableClustering) {\n      debug(\"Not listening for cluster messages, because clustering disabled.\");\n    } else if (isPM2Master()) {\n      // PM2 cluster support\n      // PM2 runs everything as workers - install pm2-intercom for this to work.\n      // we only want one of the app instances to write logs\n      debug(\"listening for PM2 broadcast messages\");\n      process.on(\"message\", receiver);\n    } else if (cluster.isMaster) {\n      debug(\"listening for cluster messages\");\n      cluster.on(\"message\", receiver);\n    } else {\n      debug(\"not listening for messages, because we are not a master process\");\n    }\n  });\n}\n\nmodule.exports = {\n  onlyOnMaster: (fn, notMaster) => (isMaster() ? fn() : notMaster),\n  isMaster,\n  send: msg => {\n    if (isMaster()) {\n      sendToListeners(msg);\n    } else {\n      if (!pm2) {\n        msg.cluster = {\n          workerId: cluster.worker.id,\n          worker: process.pid\n        };\n      }\n      process.send({ topic: \"log4js:message\", data: msg.serialise() });\n    }\n  },\n  onMessage: listener => {\n    listeners.push(listener);\n  }\n};\n"]},"metadata":{},"sourceType":"script"}