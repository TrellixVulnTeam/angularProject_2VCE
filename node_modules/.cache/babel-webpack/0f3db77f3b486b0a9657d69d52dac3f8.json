{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function get() {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  }\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar convert = __importStar(require(\"convert-source-map\"));\n\nvar istanbul_lib_instrument_1 = require(\"istanbul-lib-instrument\");\n\nvar loaderUtils = __importStar(require(\"loader-utils\"));\n\nvar merge_source_map_1 = __importDefault(require(\"merge-source-map\"));\n\nvar path = __importStar(require(\"path\"));\n\nvar schema_utils_1 = __importDefault(require(\"schema-utils\"));\n\nvar optionsSchema = __importStar(require(\"./options-schema.json\"));\n\nvar options_js_1 = require(\"./options.js\");\n/**\n * Adds code coverage instrumentation using Istanbul.\n *\n * If the source code has an existing source map, then it is used to re-map the instrumented\n * code back to the original source.\n */\n\n\nfunction default_1(source, sourceMap) {\n  var options = loaderUtils.getOptions(this);\n  options = Object.assign(options_js_1.defaultOptions, options);\n  schema_utils_1.default(optionsSchema, options, \"Coverage Istanbul Loader\"); // If there's no external sourceMap file, then check for an inline sourceMap\n\n  if (!sourceMap) {\n    sourceMap = getInlineSourceMap.call(this, source);\n  } // Instrument the code\n\n\n  var instrumenter = istanbul_lib_instrument_1.createInstrumenter(options);\n  instrumenter.instrument(source, this.resourcePath, done.bind(this), sourceMap);\n\n  function done(error, instrumentedSource) {\n    // Get the source map for the instrumented code\n    var instrumentedSourceMap = instrumenter.lastSourceMap();\n\n    if (sourceMap && instrumentedSourceMap) {\n      // Re-map the source map to the original source code\n      instrumentedSourceMap = merge_source_map_1.default(sourceMap, instrumentedSourceMap);\n    }\n\n    this.callback(error, instrumentedSource, instrumentedSourceMap);\n  }\n}\n\nexports.default = default_1;\n/**\n * If the source code has an inline base64-encoded source map,\n * then this function decodes it, parses it, and returns it.\n */\n\nfunction getInlineSourceMap(source) {\n  try {\n    // Check for an inline source map\n    var inlineSourceMap = convert.fromSource(source) || convert.fromMapFileSource(source, path.dirname(this.resourcePath));\n\n    if (inlineSourceMap) {\n      // Use the inline source map\n      return inlineSourceMap.sourcemap;\n    }\n  } catch (e) {\n    // Exception is thrown by fromMapFileSource when there is no source map file\n    if (e instanceof Error && e.message.includes(\"An error occurred while trying to read the map file at\")) {\n      this.emitWarning(e);\n    } else {\n      throw e;\n    }\n  }\n}","map":{"version":3,"sources":["../src/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAA,OAAA,GAAA,YAAA,CAAA,OAAA,CAAA,oBAAA,CAAA,CAAA;;AACA,IAAA,yBAAA,GAAA,OAAA,CAAA,yBAAA,CAAA;;AACA,IAAA,WAAA,GAAA,YAAA,CAAA,OAAA,CAAA,cAAA,CAAA,CAAA;;AACA,IAAA,kBAAA,GAAA,eAAA,CAAA,OAAA,CAAA,kBAAA,CAAA,CAAA;;AACA,IAAA,IAAA,GAAA,YAAA,CAAA,OAAA,CAAA,MAAA,CAAA,CAAA;;AACA,IAAA,cAAA,GAAA,eAAA,CAAA,OAAA,CAAA,cAAA,CAAA,CAAA;;AAEA,IAAA,aAAA,GAAA,YAAA,CAAA,OAAA,CAAA,uBAAA,CAAA,CAAA;;AACA,IAAA,YAAA,GAAA,OAAA,CAAA,cAAA,CAAA;AAEA;;;;;AAKG;;;AACH,SAAA,SAAA,CAAoD,MAApD,EAAoE,SAApE,EAA4F;AAC1F,MAAI,OAAO,GAAY,WAAW,CAAC,UAAZ,CAAuB,IAAvB,CAAvB;AACA,EAAA,OAAO,GAAG,MAAM,CAAC,MAAP,CAAc,YAAA,CAAA,cAAd,EAA8B,OAA9B,CAAV;AACA,EAAA,cAAA,CAAA,OAAA,CAAgB,aAAhB,EAA+B,OAA/B,EAAwC,0BAAxC,EAH0F,CAK1F;;AACA,MAAI,CAAC,SAAL,EAAgB;AACd,IAAA,SAAS,GAAG,kBAAkB,CAAC,IAAnB,CAAwB,IAAxB,EAA8B,MAA9B,CAAZ;AACD,GARyF,CAU1F;;;AACA,MAAI,YAAY,GAAG,yBAAA,CAAA,kBAAA,CAAmB,OAAnB,CAAnB;AACA,EAAA,YAAY,CAAC,UAAb,CAAwB,MAAxB,EAAgC,KAAK,YAArC,EAAmD,IAAI,CAAC,IAAL,CAAU,IAAV,CAAnD,EAAoE,SAApE;;AAEA,WAAS,IAAT,CAA0C,KAA1C,EAA+D,kBAA/D,EAAyF;AACvF;AACA,QAAI,qBAAqB,GAAG,YAAY,CAAC,aAAb,EAA5B;;AAEA,QAAI,SAAS,IAAI,qBAAjB,EAAwC;AACtC;AACA,MAAA,qBAAqB,GAAG,kBAAA,CAAA,OAAA,CAAe,SAAf,EAA0B,qBAA1B,CAAxB;AACD;;AAED,SAAK,QAAL,CAAc,KAAd,EAAqB,kBAArB,EAAyC,qBAAzC;AACD;AACF;;AAzBD,OAAA,CAAA,OAAA,GAAA,SAAA;AA2BA;;;AAGG;;AACH,SAAS,kBAAT,CAAwD,MAAxD,EAAsE;AACpE,MAAI;AACF;AACA,QAAM,eAAe,GAAG,OAAO,CAAC,UAAR,CAAmB,MAAnB,KACnB,OAAO,CAAC,iBAAR,CAA0B,MAA1B,EAAkC,IAAI,CAAC,OAAL,CAAa,KAAK,YAAlB,CAAlC,CADL;;AAGA,QAAI,eAAJ,EAAqB;AACnB;AACA,aAAO,eAAe,CAAC,SAAvB;AACD;AACF,GATD,CAUA,OAAO,CAAP,EAAU;AACR;AACA,QAAI,CAAC,YAAY,KAAb,IAAsB,CAAC,CAAC,OAAF,CAAU,QAAV,CAAmB,wDAAnB,CAA1B,EAAwG;AACtG,WAAK,WAAL,CAAiB,CAAjB;AACD,KAFD,MAGK;AACH,YAAM,CAAN;AACD;AACF;AACF","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst convert = __importStar(require(\"convert-source-map\"));\nconst istanbul_lib_instrument_1 = require(\"istanbul-lib-instrument\");\nconst loaderUtils = __importStar(require(\"loader-utils\"));\nconst merge_source_map_1 = __importDefault(require(\"merge-source-map\"));\nconst path = __importStar(require(\"path\"));\nconst schema_utils_1 = __importDefault(require(\"schema-utils\"));\nconst optionsSchema = __importStar(require(\"./options-schema.json\"));\nconst options_js_1 = require(\"./options.js\");\n/**\n * Adds code coverage instrumentation using Istanbul.\n *\n * If the source code has an existing source map, then it is used to re-map the instrumented\n * code back to the original source.\n */\nfunction default_1(source, sourceMap) {\n    let options = loaderUtils.getOptions(this);\n    options = Object.assign(options_js_1.defaultOptions, options);\n    schema_utils_1.default(optionsSchema, options, \"Coverage Istanbul Loader\");\n    // If there's no external sourceMap file, then check for an inline sourceMap\n    if (!sourceMap) {\n        sourceMap = getInlineSourceMap.call(this, source);\n    }\n    // Instrument the code\n    let instrumenter = istanbul_lib_instrument_1.createInstrumenter(options);\n    instrumenter.instrument(source, this.resourcePath, done.bind(this), sourceMap);\n    function done(error, instrumentedSource) {\n        // Get the source map for the instrumented code\n        let instrumentedSourceMap = instrumenter.lastSourceMap();\n        if (sourceMap && instrumentedSourceMap) {\n            // Re-map the source map to the original source code\n            instrumentedSourceMap = merge_source_map_1.default(sourceMap, instrumentedSourceMap);\n        }\n        this.callback(error, instrumentedSource, instrumentedSourceMap);\n    }\n}\nexports.default = default_1;\n/**\n * If the source code has an inline base64-encoded source map,\n * then this function decodes it, parses it, and returns it.\n */\nfunction getInlineSourceMap(source) {\n    try {\n        // Check for an inline source map\n        const inlineSourceMap = convert.fromSource(source)\n            || convert.fromMapFileSource(source, path.dirname(this.resourcePath));\n        if (inlineSourceMap) {\n            // Use the inline source map\n            return inlineSourceMap.sourcemap;\n        }\n    }\n    catch (e) {\n        // Exception is thrown by fromMapFileSource when there is no source map file\n        if (e instanceof Error && e.message.includes(\"An error occurred while trying to read the map file at\")) {\n            this.emitWarning(e);\n        }\n        else {\n            throw e;\n        }\n    }\n}\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"script"}