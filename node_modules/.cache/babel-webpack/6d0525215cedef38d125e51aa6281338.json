{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nvar _createForOfIteratorHelper = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _classCallCheck = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/createClass\");\n\nvar FlagIncludedChunksPlugin = /*#__PURE__*/function () {\n  function FlagIncludedChunksPlugin() {\n    _classCallCheck(this, FlagIncludedChunksPlugin);\n  }\n\n  _createClass(FlagIncludedChunksPlugin, [{\n    key: \"apply\",\n    value: function apply(compiler) {\n      compiler.hooks.compilation.tap(\"FlagIncludedChunksPlugin\", function (compilation) {\n        compilation.hooks.optimizeChunkIds.tap(\"FlagIncludedChunksPlugin\", function (chunks) {\n          // prepare two bit integers for each module\n          // 2^31 is the max number represented as SMI in v8\n          // we want the bits distributed this way:\n          // the bit 2^31 is pretty rar and only one module should get it\n          // so it has a probability of 1 / modulesCount\n          // the first bit (2^0) is the easiest and every module could get it\n          // if it doesn't get a better bit\n          // from bit 2^n to 2^(n+1) there is a probability of p\n          // so 1 / modulesCount == p^31\n          // <=> p = sqrt31(1 / modulesCount)\n          // so we use a modulo of 1 / sqrt31(1 / modulesCount)\n          var moduleBits = new WeakMap();\n          var modulesCount = compilation.modules.length; // precalculate the modulo values for each bit\n\n          var modulo = 1 / Math.pow(1 / modulesCount, 1 / 31);\n          var modulos = Array.from({\n            length: 31\n          }, function (x, i) {\n            return Math.pow(modulo, i) | 0;\n          }); // iterate all modules to generate bit values\n\n          var i = 0;\n\n          var _iterator = _createForOfIteratorHelper(compilation.modules),\n              _step;\n\n          try {\n            for (_iterator.s(); !(_step = _iterator.n()).done;) {\n              var _module = _step.value;\n              var bit = 30;\n\n              while (i % modulos[bit] !== 0) {\n                bit--;\n              }\n\n              moduleBits.set(_module, 1 << bit);\n              i++;\n            } // interate all chunks to generate bitmaps\n\n          } catch (err) {\n            _iterator.e(err);\n          } finally {\n            _iterator.f();\n          }\n\n          var chunkModulesHash = new WeakMap();\n\n          var _iterator2 = _createForOfIteratorHelper(chunks),\n              _step2;\n\n          try {\n            for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n              var chunk = _step2.value;\n              var hash = 0;\n\n              var _iterator4 = _createForOfIteratorHelper(chunk.modulesIterable),\n                  _step4;\n\n              try {\n                for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n                  var _module2 = _step4.value;\n                  hash |= moduleBits.get(_module2);\n                }\n              } catch (err) {\n                _iterator4.e(err);\n              } finally {\n                _iterator4.f();\n              }\n\n              chunkModulesHash.set(chunk, hash);\n            }\n          } catch (err) {\n            _iterator2.e(err);\n          } finally {\n            _iterator2.f();\n          }\n\n          var _iterator3 = _createForOfIteratorHelper(chunks),\n              _step3;\n\n          try {\n            for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n              var chunkA = _step3.value;\n              var chunkAHash = chunkModulesHash.get(chunkA);\n              var chunkAModulesCount = chunkA.getNumberOfModules();\n              if (chunkAModulesCount === 0) continue;\n              var bestModule = undefined;\n\n              var _iterator5 = _createForOfIteratorHelper(chunkA.modulesIterable),\n                  _step5;\n\n              try {\n                for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n                  var _module3 = _step5.value;\n                  if (bestModule === undefined || bestModule.getNumberOfChunks() > _module3.getNumberOfChunks()) bestModule = _module3;\n                }\n              } catch (err) {\n                _iterator5.e(err);\n              } finally {\n                _iterator5.f();\n              }\n\n              var _iterator6 = _createForOfIteratorHelper(bestModule.chunksIterable),\n                  _step6;\n\n              try {\n                loopB: for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n                  var chunkB = _step6.value;\n                  // as we iterate the same iterables twice\n                  // skip if we find ourselves\n                  if (chunkA === chunkB) continue;\n                  var chunkBModulesCount = chunkB.getNumberOfModules(); // ids for empty chunks are not included\n\n                  if (chunkBModulesCount === 0) continue; // instead of swapping A and B just bail\n                  // as we loop twice the current A will be B and B then A\n\n                  if (chunkAModulesCount > chunkBModulesCount) continue; // is chunkA in chunkB?\n                  // we do a cheap check for the hash value\n\n                  var chunkBHash = chunkModulesHash.get(chunkB);\n                  if ((chunkBHash & chunkAHash) !== chunkAHash) continue; // compare all modules\n\n                  var _iterator7 = _createForOfIteratorHelper(chunkA.modulesIterable),\n                      _step7;\n\n                  try {\n                    for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n                      var m = _step7.value;\n                      if (!chunkB.containsModule(m)) continue loopB;\n                    }\n                  } catch (err) {\n                    _iterator7.e(err);\n                  } finally {\n                    _iterator7.f();\n                  }\n\n                  chunkB.ids.push(chunkA.id);\n                }\n              } catch (err) {\n                _iterator6.e(err);\n              } finally {\n                _iterator6.f();\n              }\n            }\n          } catch (err) {\n            _iterator3.e(err);\n          } finally {\n            _iterator3.f();\n          }\n        });\n      });\n    }\n  }]);\n\n  return FlagIncludedChunksPlugin;\n}();\n\nmodule.exports = FlagIncludedChunksPlugin;","map":{"version":3,"sources":["/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/webpack/lib/optimize/FlagIncludedChunksPlugin.js"],"names":["FlagIncludedChunksPlugin","compiler","hooks","compilation","tap","optimizeChunkIds","chunks","moduleBits","WeakMap","modulesCount","modules","length","modulo","Math","pow","modulos","Array","from","x","i","module","bit","set","chunkModulesHash","chunk","hash","modulesIterable","get","chunkA","chunkAHash","chunkAModulesCount","getNumberOfModules","bestModule","undefined","getNumberOfChunks","chunksIterable","loopB","chunkB","chunkBModulesCount","chunkBHash","m","containsModule","ids","push","id","exports"],"mappings":"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","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nclass FlagIncludedChunksPlugin {\n\tapply(compiler) {\n\t\tcompiler.hooks.compilation.tap(\"FlagIncludedChunksPlugin\", compilation => {\n\t\t\tcompilation.hooks.optimizeChunkIds.tap(\n\t\t\t\t\"FlagIncludedChunksPlugin\",\n\t\t\t\tchunks => {\n\t\t\t\t\t// prepare two bit integers for each module\n\t\t\t\t\t// 2^31 is the max number represented as SMI in v8\n\t\t\t\t\t// we want the bits distributed this way:\n\t\t\t\t\t// the bit 2^31 is pretty rar and only one module should get it\n\t\t\t\t\t// so it has a probability of 1 / modulesCount\n\t\t\t\t\t// the first bit (2^0) is the easiest and every module could get it\n\t\t\t\t\t// if it doesn't get a better bit\n\t\t\t\t\t// from bit 2^n to 2^(n+1) there is a probability of p\n\t\t\t\t\t// so 1 / modulesCount == p^31\n\t\t\t\t\t// <=> p = sqrt31(1 / modulesCount)\n\t\t\t\t\t// so we use a modulo of 1 / sqrt31(1 / modulesCount)\n\t\t\t\t\tconst moduleBits = new WeakMap();\n\t\t\t\t\tconst modulesCount = compilation.modules.length;\n\n\t\t\t\t\t// precalculate the modulo values for each bit\n\t\t\t\t\tconst modulo = 1 / Math.pow(1 / modulesCount, 1 / 31);\n\t\t\t\t\tconst modulos = Array.from(\n\t\t\t\t\t\t{ length: 31 },\n\t\t\t\t\t\t(x, i) => Math.pow(modulo, i) | 0\n\t\t\t\t\t);\n\n\t\t\t\t\t// iterate all modules to generate bit values\n\t\t\t\t\tlet i = 0;\n\t\t\t\t\tfor (const module of compilation.modules) {\n\t\t\t\t\t\tlet bit = 30;\n\t\t\t\t\t\twhile (i % modulos[bit] !== 0) {\n\t\t\t\t\t\t\tbit--;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tmoduleBits.set(module, 1 << bit);\n\t\t\t\t\t\ti++;\n\t\t\t\t\t}\n\n\t\t\t\t\t// interate all chunks to generate bitmaps\n\t\t\t\t\tconst chunkModulesHash = new WeakMap();\n\t\t\t\t\tfor (const chunk of chunks) {\n\t\t\t\t\t\tlet hash = 0;\n\t\t\t\t\t\tfor (const module of chunk.modulesIterable) {\n\t\t\t\t\t\t\thash |= moduleBits.get(module);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tchunkModulesHash.set(chunk, hash);\n\t\t\t\t\t}\n\n\t\t\t\t\tfor (const chunkA of chunks) {\n\t\t\t\t\t\tconst chunkAHash = chunkModulesHash.get(chunkA);\n\t\t\t\t\t\tconst chunkAModulesCount = chunkA.getNumberOfModules();\n\t\t\t\t\t\tif (chunkAModulesCount === 0) continue;\n\t\t\t\t\t\tlet bestModule = undefined;\n\t\t\t\t\t\tfor (const module of chunkA.modulesIterable) {\n\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\tbestModule === undefined ||\n\t\t\t\t\t\t\t\tbestModule.getNumberOfChunks() > module.getNumberOfChunks()\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\tbestModule = module;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tloopB: for (const chunkB of bestModule.chunksIterable) {\n\t\t\t\t\t\t\t// as we iterate the same iterables twice\n\t\t\t\t\t\t\t// skip if we find ourselves\n\t\t\t\t\t\t\tif (chunkA === chunkB) continue;\n\n\t\t\t\t\t\t\tconst chunkBModulesCount = chunkB.getNumberOfModules();\n\n\t\t\t\t\t\t\t// ids for empty chunks are not included\n\t\t\t\t\t\t\tif (chunkBModulesCount === 0) continue;\n\n\t\t\t\t\t\t\t// instead of swapping A and B just bail\n\t\t\t\t\t\t\t// as we loop twice the current A will be B and B then A\n\t\t\t\t\t\t\tif (chunkAModulesCount > chunkBModulesCount) continue;\n\n\t\t\t\t\t\t\t// is chunkA in chunkB?\n\n\t\t\t\t\t\t\t// we do a cheap check for the hash value\n\t\t\t\t\t\t\tconst chunkBHash = chunkModulesHash.get(chunkB);\n\t\t\t\t\t\t\tif ((chunkBHash & chunkAHash) !== chunkAHash) continue;\n\n\t\t\t\t\t\t\t// compare all modules\n\t\t\t\t\t\t\tfor (const m of chunkA.modulesIterable) {\n\t\t\t\t\t\t\t\tif (!chunkB.containsModule(m)) continue loopB;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tchunkB.ids.push(chunkA.id);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t);\n\t\t});\n\t}\n}\nmodule.exports = FlagIncludedChunksPlugin;\n"]},"metadata":{},"sourceType":"script"}