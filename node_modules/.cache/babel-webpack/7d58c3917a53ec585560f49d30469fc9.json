{"ast":null,"code":"'use strict';\n\nvar _createForOfIteratorHelper = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _regeneratorRuntime = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar util = require('util');\n\nvar fs = require('graceful-fs'); // bind need only for mock unit tests\n\n\nvar readFile = util.promisify(fs.readFile.bind(fs));\n\nvar tryToRead = function tryToRead(path, log) {\n  var maxRetries = 3;\n  var promise = readFile(path);\n\n  var _loop = function _loop(retryCount) {\n    promise = promise.catch(function (err) {\n      log.warn(err);\n      log.warn('retrying ' + retryCount);\n      return readFile(path);\n    });\n  };\n\n  for (var retryCount = 1; retryCount <= maxRetries; retryCount++) {\n    _loop(retryCount);\n  }\n\n  return promise.catch(function (err) {\n    log.warn(err);\n    return Promise.reject(err);\n  });\n};\n\nvar mm = require('minimatch');\n\nvar _require = require('isbinaryfile'),\n    isBinaryFile = _require.isBinaryFile;\n\nvar _ = require('lodash');\n\nvar CryptoUtils = require('./utils/crypto-utils');\n\nvar log = require('./logger').create('preprocess');\n\nfunction executeProcessor(process, file, content) {\n  var done = null;\n  var donePromise = new Promise(function (resolve, reject) {\n    done = function done(error, content) {\n      // normalize B-C\n      if (arguments.length === 1 && typeof error === 'string') {\n        content = error;\n        error = null;\n      }\n\n      if (error) {\n        reject(error);\n      } else {\n        resolve(content);\n      }\n    };\n  });\n  return (process(content, file, done) || Promise.resolve()).then(function (content) {\n    if (content) {\n      // async process correctly returned content\n      return content;\n    } // process called done() (Either old sync api or an async function that did not return content)\n\n\n    return donePromise;\n  });\n}\n\nfunction runProcessors(_x, _x2, _x3) {\n  return _runProcessors.apply(this, arguments);\n}\n\nfunction _runProcessors() {\n  _runProcessors = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(preprocessors, file, content) {\n    var _iterator, _step, process;\n\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.prev = 0;\n            _iterator = _createForOfIteratorHelper(preprocessors);\n            _context2.prev = 2;\n\n            _iterator.s();\n\n          case 4:\n            if ((_step = _iterator.n()).done) {\n              _context2.next = 11;\n              break;\n            }\n\n            process = _step.value;\n            _context2.next = 8;\n            return executeProcessor(process, file, content);\n\n          case 8:\n            content = _context2.sent;\n\n          case 9:\n            _context2.next = 4;\n            break;\n\n          case 11:\n            _context2.next = 16;\n            break;\n\n          case 13:\n            _context2.prev = 13;\n            _context2.t0 = _context2[\"catch\"](2);\n\n            _iterator.e(_context2.t0);\n\n          case 16:\n            _context2.prev = 16;\n\n            _iterator.f();\n\n            return _context2.finish(16);\n\n          case 19:\n            _context2.next = 26;\n            break;\n\n          case 21:\n            _context2.prev = 21;\n            _context2.t1 = _context2[\"catch\"](0);\n            file.contentPath = null;\n            file.content = null;\n            throw _context2.t1;\n\n          case 26:\n            file.contentPath = null;\n            file.content = content;\n            file.sha = CryptoUtils.sha1(content);\n\n          case 29:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2, null, [[0, 21], [2, 13, 16, 19]]);\n  }));\n  return _runProcessors.apply(this, arguments);\n}\n\nfunction createPriorityPreprocessor() {\n  var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var preprocessorPriority = arguments.length > 1 ? arguments[1] : undefined;\n  var basePath = arguments.length > 2 ? arguments[2] : undefined;\n  var injector = arguments.length > 3 ? arguments[3] : undefined;\n  var emitter = injector.get('emitter');\n  var instances = new Map();\n\n  function instantiatePreprocessor(name) {\n    if (instances.has(name)) {\n      return instances.get(name);\n    }\n\n    var p;\n\n    try {\n      p = injector.get('preprocessor:' + name);\n\n      if (!p) {\n        log.error(\"Failed to instantiate preprocessor \".concat(name));\n        emitter.emit('load_error', 'preprocessor', name);\n      }\n    } catch (e) {\n      if (e.message.includes(\"No provider for \\\"preprocessor:\".concat(name, \"\\\"\"))) {\n        log.error(\"Can not load \\\"\".concat(name, \"\\\", it is not registered!\\n  Perhaps you are missing some plugin?\"));\n      } else {\n        log.error(\"Can not load \\\"\".concat(name, \"\\\"!\\n  \") + e.stack);\n      }\n\n      emitter.emit('load_error', 'preprocessor', name);\n    }\n\n    instances.set(name, p);\n    return p;\n  }\n\n  _.union.apply(_, Object.values(config)).forEach(instantiatePreprocessor);\n\n  return /*#__PURE__*/function () {\n    var _preprocess = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(file) {\n      var buffer, isBinary, preprocessorNames, preprocessors;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return tryToRead(file.originalPath, log);\n\n            case 2:\n              buffer = _context.sent;\n              isBinary = file.isBinary;\n\n              if (!(isBinary == null)) {\n                _context.next = 8;\n                break;\n              }\n\n              _context.next = 7;\n              return isBinaryFile(buffer, buffer.length);\n\n            case 7:\n              isBinary = _context.sent;\n\n            case 8:\n              preprocessorNames = Object.keys(config).reduce(function (ppNames, pattern) {\n                if (mm(file.originalPath, pattern, {\n                  dot: true\n                })) {\n                  ppNames = _.union(ppNames, config[pattern]);\n                }\n\n                return ppNames;\n              }, []); // Apply preprocessor priority.\n\n              preprocessors = preprocessorNames.map(function (name) {\n                return [name, preprocessorPriority[name] || 0];\n              }).sort(function (a, b) {\n                return b[1] - a[1];\n              }).map(function (duo) {\n                return duo[0];\n              }).reduce(function (preProcs, name) {\n                var p = instantiatePreprocessor(name);\n\n                if (!isBinary || p && p.handleBinaryFiles) {\n                  preProcs.push(p);\n                } else {\n                  log.warn(\"Ignored preprocessing \".concat(file.originalPath, \" because \").concat(name, \" has handleBinaryFiles=false.\"));\n                }\n\n                return preProcs;\n              }, []);\n              _context.next = 12;\n              return runProcessors(preprocessors, file, isBinary ? buffer : buffer.toString());\n\n            case 12:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    function preprocess(_x4) {\n      return _preprocess.apply(this, arguments);\n    }\n\n    return preprocess;\n  }();\n}\n\ncreatePriorityPreprocessor.$inject = ['config.preprocessors', 'config.preprocessor_priority', 'config.basePath', 'injector'];\nexports.createPriorityPreprocessor = createPriorityPreprocessor;","map":{"version":3,"sources":["/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/karma/lib/preprocessor.js"],"names":["util","require","fs","readFile","promisify","bind","tryToRead","path","log","maxRetries","promise","retryCount","catch","err","warn","Promise","reject","mm","isBinaryFile","_","CryptoUtils","create","executeProcessor","process","file","content","done","donePromise","resolve","error","arguments","length","then","runProcessors","preprocessors","contentPath","sha","sha1","createPriorityPreprocessor","config","preprocessorPriority","basePath","injector","emitter","get","instances","Map","instantiatePreprocessor","name","has","p","emit","e","message","includes","stack","set","union","apply","Object","values","forEach","originalPath","buffer","isBinary","preprocessorNames","keys","reduce","ppNames","pattern","dot","map","sort","a","b","duo","preProcs","handleBinaryFiles","push","toString","preprocess","$inject","exports"],"mappings":"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","sourcesContent":["'use strict'\n\nconst util = require('util')\nconst fs = require('graceful-fs')\n// bind need only for mock unit tests\nconst readFile = util.promisify(fs.readFile.bind(fs))\nconst tryToRead = function (path, log) {\n  const maxRetries = 3\n  let promise = readFile(path)\n  for (let retryCount = 1; retryCount <= maxRetries; retryCount++) {\n    promise = promise.catch((err) => {\n      log.warn(err)\n      log.warn('retrying ' + retryCount)\n      return readFile(path)\n    })\n  }\n  return promise.catch((err) => {\n    log.warn(err)\n    return Promise.reject(err)\n  })\n}\n\nconst mm = require('minimatch')\nconst { isBinaryFile } = require('isbinaryfile')\nconst _ = require('lodash')\nconst CryptoUtils = require('./utils/crypto-utils')\n\nconst log = require('./logger').create('preprocess')\n\nfunction executeProcessor (process, file, content) {\n  let done = null\n  const donePromise = new Promise((resolve, reject) => {\n    done = function (error, content) {\n      // normalize B-C\n      if (arguments.length === 1 && typeof error === 'string') {\n        content = error\n        error = null\n      }\n      if (error) {\n        reject(error)\n      } else {\n        resolve(content)\n      }\n    }\n  })\n\n  return (process(content, file, done) || Promise.resolve()).then((content) => {\n    if (content) {\n      // async process correctly returned content\n      return content\n    }\n    // process called done() (Either old sync api or an async function that did not return content)\n    return donePromise\n  })\n}\n\nasync function runProcessors (preprocessors, file, content) {\n  try {\n    for (const process of preprocessors) {\n      content = await executeProcessor(process, file, content)\n    }\n  } catch (error) {\n    file.contentPath = null\n    file.content = null\n    throw error\n  }\n\n  file.contentPath = null\n  file.content = content\n  file.sha = CryptoUtils.sha1(content)\n}\n\nfunction createPriorityPreprocessor (config = {}, preprocessorPriority, basePath, injector) {\n  const emitter = injector.get('emitter')\n  const instances = new Map()\n\n  function instantiatePreprocessor (name) {\n    if (instances.has(name)) {\n      return instances.get(name)\n    }\n\n    let p\n    try {\n      p = injector.get('preprocessor:' + name)\n      if (!p) {\n        log.error(`Failed to instantiate preprocessor ${name}`)\n        emitter.emit('load_error', 'preprocessor', name)\n      }\n    } catch (e) {\n      if (e.message.includes(`No provider for \"preprocessor:${name}\"`)) {\n        log.error(`Can not load \"${name}\", it is not registered!\\n  Perhaps you are missing some plugin?`)\n      } else {\n        log.error(`Can not load \"${name}\"!\\n  ` + e.stack)\n      }\n      emitter.emit('load_error', 'preprocessor', name)\n    }\n\n    instances.set(name, p)\n    return p\n  }\n  _.union.apply(_, Object.values(config)).forEach(instantiatePreprocessor)\n\n  return async function preprocess (file) {\n    const buffer = await tryToRead(file.originalPath, log)\n    let isBinary = file.isBinary\n    if (isBinary == null) {\n      // Pattern did not specify, probe for it.\n      isBinary = await isBinaryFile(buffer, buffer.length)\n    }\n\n    const preprocessorNames = Object.keys(config).reduce((ppNames, pattern) => {\n      if (mm(file.originalPath, pattern, { dot: true })) {\n        ppNames = _.union(ppNames, config[pattern])\n      }\n      return ppNames\n    }, [])\n\n    // Apply preprocessor priority.\n    const preprocessors = preprocessorNames\n      .map((name) => [name, preprocessorPriority[name] || 0])\n      .sort((a, b) => b[1] - a[1])\n      .map((duo) => duo[0])\n      .reduce((preProcs, name) => {\n        const p = instantiatePreprocessor(name)\n\n        if (!isBinary || (p && p.handleBinaryFiles)) {\n          preProcs.push(p)\n        } else {\n          log.warn(`Ignored preprocessing ${file.originalPath} because ${name} has handleBinaryFiles=false.`)\n        }\n        return preProcs\n      }, [])\n\n    await runProcessors(preprocessors, file, isBinary ? buffer : buffer.toString())\n  }\n}\n\ncreatePriorityPreprocessor.$inject = ['config.preprocessors', 'config.preprocessor_priority', 'config.basePath', 'injector']\nexports.createPriorityPreprocessor = createPriorityPreprocessor\n"]},"metadata":{},"sourceType":"script"}