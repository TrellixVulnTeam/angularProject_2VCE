{"ast":null,"code":"/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n(function (factory) {\n  if (typeof module === \"object\" && typeof module.exports === \"object\") {\n    var v = factory(require, exports);\n    if (v !== undefined) module.exports = v;\n  } else if (typeof define === \"function\" && define.amd) {\n    define(\"@angular/compiler/src/style_url_resolver\", [\"require\", \"exports\"], factory);\n  }\n})(function (require, exports) {\n  \"use strict\";\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.extractStyleUrls = exports.isStyleUrlResolvable = exports.StyleWithImports = void 0;\n\n  var StyleWithImports =\n  /** @class */\n  function () {\n    function StyleWithImports(style, styleUrls) {\n      this.style = style;\n      this.styleUrls = styleUrls;\n    }\n\n    return StyleWithImports;\n  }();\n\n  exports.StyleWithImports = StyleWithImports;\n\n  function isStyleUrlResolvable(url) {\n    if (url == null || url.length === 0 || url[0] == '/') return false;\n    var schemeMatch = url.match(URL_WITH_SCHEMA_REGEXP);\n    return schemeMatch === null || schemeMatch[1] == 'package' || schemeMatch[1] == 'asset';\n  }\n\n  exports.isStyleUrlResolvable = isStyleUrlResolvable;\n  /**\n   * Rewrites stylesheets by resolving and removing the @import urls that\n   * are either relative or don't have a `package:` scheme\n   */\n\n  function extractStyleUrls(resolver, baseUrl, cssText) {\n    var foundUrls = [];\n    var modifiedCssText = cssText.replace(CSS_STRIPPABLE_COMMENT_REGEXP, '').replace(CSS_IMPORT_REGEXP, function () {\n      var m = [];\n\n      for (var _i = 0; _i < arguments.length; _i++) {\n        m[_i] = arguments[_i];\n      }\n\n      var url = m[1] || m[2];\n\n      if (!isStyleUrlResolvable(url)) {\n        // Do not attempt to resolve non-package absolute URLs with URI\n        // scheme\n        return m[0];\n      }\n\n      foundUrls.push(resolver.resolve(baseUrl, url));\n      return '';\n    });\n    return new StyleWithImports(modifiedCssText, foundUrls);\n  }\n\n  exports.extractStyleUrls = extractStyleUrls;\n  var CSS_IMPORT_REGEXP = /@import\\s+(?:url\\()?\\s*(?:(?:['\"]([^'\"]*))|([^;\\)\\s]*))[^;]*;?/g;\n  var CSS_STRIPPABLE_COMMENT_REGEXP = /\\/\\*(?!#\\s*(?:sourceURL|sourceMappingURL)=)[\\s\\S]+?\\*\\//g;\n  var URL_WITH_SCHEMA_REGEXP = /^([^:/?#]+):/;\n});","map":{"version":3,"sources":["../../../../../../packages/compiler/src/style_url_resolver.ts"],"names":[],"mappings":"AAAA;;;;;;AAMG;;;;;;;;;;;;;;;;AAOH,MAAA,gBAAA;AAAA;AAAA,cAAA;AACE,aAAA,gBAAA,CAAmB,KAAnB,EAAyC,SAAzC,EAA4D;AAAzC,WAAA,KAAA,GAAA,KAAA;AAAsB,WAAA,SAAA,GAAA,SAAA;AAAuB;;AAClE,WAAA,gBAAA;AAAC,GAFD,EAAA;;AAAa,EAAA,OAAA,CAAA,gBAAA,GAAA,gBAAA;;AAIb,WAAgB,oBAAhB,CAAqC,GAArC,EAAgD;AAC9C,QAAI,GAAG,IAAI,IAAP,IAAe,GAAG,CAAC,MAAJ,KAAe,CAA9B,IAAmC,GAAG,CAAC,CAAD,CAAH,IAAU,GAAjD,EAAsD,OAAO,KAAP;AACtD,QAAM,WAAW,GAAG,GAAG,CAAC,KAAJ,CAAU,sBAAV,CAApB;AACA,WAAO,WAAW,KAAK,IAAhB,IAAwB,WAAW,CAAC,CAAD,CAAX,IAAkB,SAA1C,IAAuD,WAAW,CAAC,CAAD,CAAX,IAAkB,OAAhF;AACD;;AAJD,EAAA,OAAA,CAAA,oBAAA,GAAA,oBAAA;AAMA;;;AAGG;;AACH,WAAgB,gBAAhB,CACI,QADJ,EAC2B,OAD3B,EAC4C,OAD5C,EAC2D;AACzD,QAAM,SAAS,GAAa,EAA5B;AAEA,QAAM,eAAe,GAAG,OAAO,CAAC,OAAR,CAAgB,6BAAhB,EAA+C,EAA/C,EACK,OADL,CACa,iBADb,EACgC,YAAA;AAAC,UAAA,CAAA,GAAA,EAAA;;WAAA,IAAA,EAAA,GAAA,C,EAAA,EAAA,GAAA,SAAA,CAAA,M,EAAA,EAAA,E,EAAc;AAAd,QAAA,CAAA,CAAA,EAAA,CAAA,GAAA,SAAA,CAAA,EAAA,CAAA;;;AAC3B,UAAM,GAAG,GAAG,CAAC,CAAC,CAAD,CAAD,IAAQ,CAAC,CAAC,CAAD,CAArB;;AACA,UAAI,CAAC,oBAAoB,CAAC,GAAD,CAAzB,EAAgC;AAC9B;AACA;AACA,eAAO,CAAC,CAAC,CAAD,CAAR;AACD;;AACD,MAAA,SAAS,CAAC,IAAV,CAAe,QAAQ,CAAC,OAAT,CAAiB,OAAjB,EAA0B,GAA1B,CAAf;AACA,aAAO,EAAP;AACD,KAVL,CAAxB;AAWA,WAAO,IAAI,gBAAJ,CAAqB,eAArB,EAAsC,SAAtC,CAAP;AACD;;AAhBD,EAAA,OAAA,CAAA,gBAAA,GAAA,gBAAA;AAkBA,MAAM,iBAAiB,GAAG,iEAA1B;AACA,MAAM,6BAA6B,GAAG,0DAAtC;AACA,MAAM,sBAAsB,GAAG,cAA/B","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n// Some of the code comes from WebComponents.JS\n// https://github.com/webcomponents/webcomponentsjs/blob/master/src/HTMLImports/path.js\n\nimport {UrlResolver} from './url_resolver';\n\nexport class StyleWithImports {\n  constructor(public style: string, public styleUrls: string[]) {}\n}\n\nexport function isStyleUrlResolvable(url: string): boolean {\n  if (url == null || url.length === 0 || url[0] == '/') return false;\n  const schemeMatch = url.match(URL_WITH_SCHEMA_REGEXP);\n  return schemeMatch === null || schemeMatch[1] == 'package' || schemeMatch[1] == 'asset';\n}\n\n/**\n * Rewrites stylesheets by resolving and removing the @import urls that\n * are either relative or don't have a `package:` scheme\n */\nexport function extractStyleUrls(\n    resolver: UrlResolver, baseUrl: string, cssText: string): StyleWithImports {\n  const foundUrls: string[] = [];\n\n  const modifiedCssText = cssText.replace(CSS_STRIPPABLE_COMMENT_REGEXP, '')\n                              .replace(CSS_IMPORT_REGEXP, (...m: string[]) => {\n                                const url = m[1] || m[2];\n                                if (!isStyleUrlResolvable(url)) {\n                                  // Do not attempt to resolve non-package absolute URLs with URI\n                                  // scheme\n                                  return m[0];\n                                }\n                                foundUrls.push(resolver.resolve(baseUrl, url));\n                                return '';\n                              });\n  return new StyleWithImports(modifiedCssText, foundUrls);\n}\n\nconst CSS_IMPORT_REGEXP = /@import\\s+(?:url\\()?\\s*(?:(?:['\"]([^'\"]*))|([^;\\)\\s]*))[^;]*;?/g;\nconst CSS_STRIPPABLE_COMMENT_REGEXP = /\\/\\*(?!#\\s*(?:sourceURL|sourceMappingURL)=)[\\s\\S]+?\\*\\//g;\nconst URL_WITH_SCHEMA_REGEXP = /^([^:/?#]+):/;\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}