{"ast":null,"code":"/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n(function (factory) {\n  if (typeof module === \"object\" && typeof module.exports === \"object\") {\n    var v = factory(require, exports);\n    if (v !== undefined) module.exports = v;\n  } else if (typeof define === \"function\" && define.amd) {\n    define(\"@angular/compiler/src/schema/trusted_types_sinks\", [\"require\", \"exports\"], factory);\n  }\n})(function (require, exports) {\n  \"use strict\";\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.isTrustedTypesSink = void 0;\n  /**\n   * Set of tagName|propertyName corresponding to Trusted Types sinks. Properties applying to all\n   * tags use '*'.\n   *\n   * Extracted from, and should be kept in sync with\n   * https://w3c.github.io/webappsec-trusted-types/dist/spec/#integrations\n   */\n\n  var TRUSTED_TYPES_SINKS = new Set([// NOTE: All strings in this set *must* be lowercase!\n  // TrustedHTML\n  'iframe|srcdoc', '*|innerhtml', '*|outerhtml', // NB: no TrustedScript here, as the corresponding tags are stripped by the compiler.\n  // TrustedScriptURL\n  'embed|src', 'object|codebase', 'object|data']);\n  /**\n   * isTrustedTypesSink returns true if the given property on the given DOM tag is a Trusted Types\n   * sink. In that case, use `ElementSchemaRegistry.securityContext` to determine which particular\n   * Trusted Type is required for values passed to the sink:\n   * - SecurityContext.HTML corresponds to TrustedHTML\n   * - SecurityContext.RESOURCE_URL corresponds to TrustedScriptURL\n   */\n\n  function isTrustedTypesSink(tagName, propName) {\n    // Make sure comparisons are case insensitive, so that case differences between attribute and\n    // property names do not have a security impact.\n    tagName = tagName.toLowerCase();\n    propName = propName.toLowerCase();\n    return TRUSTED_TYPES_SINKS.has(tagName + '|' + propName) || TRUSTED_TYPES_SINKS.has('*|' + propName);\n  }\n\n  exports.isTrustedTypesSink = isTrustedTypesSink;\n});","map":{"version":3,"sources":["../../../../../../../packages/compiler/src/schema/trusted_types_sinks.ts"],"names":[],"mappings":"AAAA;;;;;;AAMG;;;;;;;;;;;;;;;AAEH;;;;;;AAMG;;AACH,MAAM,mBAAmB,GAAG,IAAI,GAAJ,CAAgB,CAC1C;AAEA;AACA,iBAJ0C,EAK1C,aAL0C,EAM1C,aAN0C,EAQ1C;AAEA;AACA,aAX0C,EAY1C,iBAZ0C,EAa1C,aAb0C,CAAhB,CAA5B;AAgBA;;;;;;AAMG;;AACH,WAAgB,kBAAhB,CAAmC,OAAnC,EAAoD,QAApD,EAAoE;AAClE;AACA;AACA,IAAA,OAAO,GAAG,OAAO,CAAC,WAAR,EAAV;AACA,IAAA,QAAQ,GAAG,QAAQ,CAAC,WAAT,EAAX;AAEA,WAAO,mBAAmB,CAAC,GAApB,CAAwB,OAAO,GAAG,GAAV,GAAgB,QAAxC,KACH,mBAAmB,CAAC,GAApB,CAAwB,OAAO,QAA/B,CADJ;AAED;;AARD,EAAA,OAAA,CAAA,kBAAA,GAAA,kBAAA","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Set of tagName|propertyName corresponding to Trusted Types sinks. Properties applying to all\n * tags use '*'.\n *\n * Extracted from, and should be kept in sync with\n * https://w3c.github.io/webappsec-trusted-types/dist/spec/#integrations\n */\nconst TRUSTED_TYPES_SINKS = new Set<string>([\n  // NOTE: All strings in this set *must* be lowercase!\n\n  // TrustedHTML\n  'iframe|srcdoc',\n  '*|innerhtml',\n  '*|outerhtml',\n\n  // NB: no TrustedScript here, as the corresponding tags are stripped by the compiler.\n\n  // TrustedScriptURL\n  'embed|src',\n  'object|codebase',\n  'object|data',\n]);\n\n/**\n * isTrustedTypesSink returns true if the given property on the given DOM tag is a Trusted Types\n * sink. In that case, use `ElementSchemaRegistry.securityContext` to determine which particular\n * Trusted Type is required for values passed to the sink:\n * - SecurityContext.HTML corresponds to TrustedHTML\n * - SecurityContext.RESOURCE_URL corresponds to TrustedScriptURL\n */\nexport function isTrustedTypesSink(tagName: string, propName: string): boolean {\n  // Make sure comparisons are case insensitive, so that case differences between attribute and\n  // property names do not have a security impact.\n  tagName = tagName.toLowerCase();\n  propName = propName.toLowerCase();\n\n  return TRUSTED_TYPES_SINKS.has(tagName + '|' + propName) ||\n      TRUSTED_TYPES_SINKS.has('*|' + propName);\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}