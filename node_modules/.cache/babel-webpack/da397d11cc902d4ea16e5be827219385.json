{"ast":null,"code":"//      \n'use strict';\n\nvar _createForOfIteratorHelper = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _classCallCheck = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/createClass\");\n\nvar path = require('path');\n\nvar loaders = require('./loaders');\n\nvar readFile = require('./readFile');\n\nvar cacheWrapper = require('./cacheWrapper');\n\nvar getDirectory = require('./getDirectory');\n\nvar getPropertyByPath = require('./getPropertyByPath');\n\nvar MODE_SYNC = 'sync'; // An object value represents a config object.\n// null represents that the loader did not find anything relevant.\n// undefined represents that the loader found something relevant\n// but it was empty.\n\nvar Explorer = /*#__PURE__*/function () {\n  function Explorer(options) {\n    _classCallCheck(this, Explorer);\n\n    this.loadCache = options.cache ? new Map() : null;\n    this.loadSyncCache = options.cache ? new Map() : null;\n    this.searchCache = options.cache ? new Map() : null;\n    this.searchSyncCache = options.cache ? new Map() : null;\n    this.config = options;\n    this.validateConfig();\n  }\n\n  _createClass(Explorer, [{\n    key: \"clearLoadCache\",\n    value: function clearLoadCache() {\n      if (this.loadCache) {\n        this.loadCache.clear();\n      }\n\n      if (this.loadSyncCache) {\n        this.loadSyncCache.clear();\n      }\n    }\n  }, {\n    key: \"clearSearchCache\",\n    value: function clearSearchCache() {\n      if (this.searchCache) {\n        this.searchCache.clear();\n      }\n\n      if (this.searchSyncCache) {\n        this.searchSyncCache.clear();\n      }\n    }\n  }, {\n    key: \"clearCaches\",\n    value: function clearCaches() {\n      this.clearLoadCache();\n      this.clearSearchCache();\n    }\n  }, {\n    key: \"validateConfig\",\n    value: function validateConfig() {\n      var config = this.config;\n      config.searchPlaces.forEach(function (place) {\n        var loaderKey = path.extname(place) || 'noExt';\n        var loader = config.loaders[loaderKey];\n\n        if (!loader) {\n          throw new Error(\"No loader specified for \".concat(getExtensionDescription(place), \", so searchPlaces item \\\"\").concat(place, \"\\\" is invalid\"));\n        }\n      });\n    }\n  }, {\n    key: \"search\",\n    value: function search(searchFrom) {\n      var _this = this;\n\n      searchFrom = searchFrom || process.cwd();\n      return getDirectory(searchFrom).then(function (dir) {\n        return _this.searchFromDirectory(dir);\n      });\n    }\n  }, {\n    key: \"searchFromDirectory\",\n    value: function searchFromDirectory(dir) {\n      var _this2 = this;\n\n      var absoluteDir = path.resolve(process.cwd(), dir);\n\n      var run = function run() {\n        return _this2.searchDirectory(absoluteDir).then(function (result) {\n          var nextDir = _this2.nextDirectoryToSearch(absoluteDir, result);\n\n          if (nextDir) {\n            return _this2.searchFromDirectory(nextDir);\n          }\n\n          return _this2.config.transform(result);\n        });\n      };\n\n      if (this.searchCache) {\n        return cacheWrapper(this.searchCache, absoluteDir, run);\n      }\n\n      return run();\n    }\n  }, {\n    key: \"searchSync\",\n    value: function searchSync(searchFrom) {\n      searchFrom = searchFrom || process.cwd();\n      var dir = getDirectory.sync(searchFrom);\n      return this.searchFromDirectorySync(dir);\n    }\n  }, {\n    key: \"searchFromDirectorySync\",\n    value: function searchFromDirectorySync(dir) {\n      var _this3 = this;\n\n      var absoluteDir = path.resolve(process.cwd(), dir);\n\n      var run = function run() {\n        var result = _this3.searchDirectorySync(absoluteDir);\n\n        var nextDir = _this3.nextDirectoryToSearch(absoluteDir, result);\n\n        if (nextDir) {\n          return _this3.searchFromDirectorySync(nextDir);\n        }\n\n        return _this3.config.transform(result);\n      };\n\n      if (this.searchSyncCache) {\n        return cacheWrapper(this.searchSyncCache, absoluteDir, run);\n      }\n\n      return run();\n    }\n  }, {\n    key: \"searchDirectory\",\n    value: function searchDirectory(dir) {\n      var _this4 = this;\n\n      return this.config.searchPlaces.reduce(function (prevResultPromise, place) {\n        return prevResultPromise.then(function (prevResult) {\n          if (_this4.shouldSearchStopWithResult(prevResult)) {\n            return prevResult;\n          }\n\n          return _this4.loadSearchPlace(dir, place);\n        });\n      }, Promise.resolve(null));\n    }\n  }, {\n    key: \"searchDirectorySync\",\n    value: function searchDirectorySync(dir) {\n      var result = null;\n\n      var _iterator = _createForOfIteratorHelper(this.config.searchPlaces),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var place = _step.value;\n          result = this.loadSearchPlaceSync(dir, place);\n          if (this.shouldSearchStopWithResult(result)) break;\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      return result;\n    }\n  }, {\n    key: \"shouldSearchStopWithResult\",\n    value: function shouldSearchStopWithResult(result) {\n      if (result === null) return false;\n      if (result.isEmpty && this.config.ignoreEmptySearchPlaces) return false;\n      return true;\n    }\n  }, {\n    key: \"loadSearchPlace\",\n    value: function loadSearchPlace(dir, place) {\n      var _this5 = this;\n\n      var filepath = path.join(dir, place);\n      return readFile(filepath).then(function (content) {\n        return _this5.createCosmiconfigResult(filepath, content);\n      });\n    }\n  }, {\n    key: \"loadSearchPlaceSync\",\n    value: function loadSearchPlaceSync(dir, place) {\n      var filepath = path.join(dir, place);\n      var content = readFile.sync(filepath);\n      return this.createCosmiconfigResultSync(filepath, content);\n    }\n  }, {\n    key: \"nextDirectoryToSearch\",\n    value: function nextDirectoryToSearch(currentDir, currentResult) {\n      if (this.shouldSearchStopWithResult(currentResult)) {\n        return null;\n      }\n\n      var nextDir = nextDirUp(currentDir);\n\n      if (nextDir === currentDir || currentDir === this.config.stopDir) {\n        return null;\n      }\n\n      return nextDir;\n    }\n  }, {\n    key: \"loadPackageProp\",\n    value: function loadPackageProp(filepath, content) {\n      var parsedContent = loaders.loadJson(filepath, content);\n      var packagePropValue = getPropertyByPath(parsedContent, this.config.packageProp);\n      return packagePropValue || null;\n    }\n  }, {\n    key: \"getLoaderEntryForFile\",\n    value: function getLoaderEntryForFile(filepath) {\n      if (path.basename(filepath) === 'package.json') {\n        var loader = this.loadPackageProp.bind(this);\n        return {\n          sync: loader,\n          async: loader\n        };\n      }\n\n      var loaderKey = path.extname(filepath) || 'noExt';\n      return this.config.loaders[loaderKey] || {};\n    }\n  }, {\n    key: \"getSyncLoaderForFile\",\n    value: function getSyncLoaderForFile(filepath) {\n      var entry = this.getLoaderEntryForFile(filepath);\n\n      if (!entry.sync) {\n        throw new Error(\"No sync loader specified for \".concat(getExtensionDescription(filepath)));\n      }\n\n      return entry.sync;\n    }\n  }, {\n    key: \"getAsyncLoaderForFile\",\n    value: function getAsyncLoaderForFile(filepath) {\n      var entry = this.getLoaderEntryForFile(filepath);\n      var loader = entry.async || entry.sync;\n\n      if (!loader) {\n        throw new Error(\"No async loader specified for \".concat(getExtensionDescription(filepath)));\n      }\n\n      return loader;\n    }\n  }, {\n    key: \"loadFileContent\",\n    value: function loadFileContent(mode, filepath, content) {\n      if (content === null) {\n        return null;\n      }\n\n      if (content.trim() === '') {\n        return undefined;\n      }\n\n      var loader = mode === MODE_SYNC ? this.getSyncLoaderForFile(filepath) : this.getAsyncLoaderForFile(filepath);\n      return loader(filepath, content);\n    }\n  }, {\n    key: \"loadedContentToCosmiconfigResult\",\n    value: function loadedContentToCosmiconfigResult(filepath, loadedContent) {\n      if (loadedContent === null) {\n        return null;\n      }\n\n      if (loadedContent === undefined) {\n        return {\n          filepath: filepath,\n          config: undefined,\n          isEmpty: true\n        };\n      }\n\n      return {\n        config: loadedContent,\n        filepath: filepath\n      };\n    }\n  }, {\n    key: \"createCosmiconfigResult\",\n    value: function createCosmiconfigResult(filepath, content) {\n      var _this6 = this;\n\n      return Promise.resolve().then(function () {\n        return _this6.loadFileContent('async', filepath, content);\n      }).then(function (loaderResult) {\n        return _this6.loadedContentToCosmiconfigResult(filepath, loaderResult);\n      });\n    }\n  }, {\n    key: \"createCosmiconfigResultSync\",\n    value: function createCosmiconfigResultSync(filepath, content) {\n      var loaderResult = this.loadFileContent('sync', filepath, content);\n      return this.loadedContentToCosmiconfigResult(filepath, loaderResult);\n    }\n  }, {\n    key: \"validateFilePath\",\n    value: function validateFilePath(filepath) {\n      if (!filepath) {\n        throw new Error('load and loadSync must pass a non-empty string');\n      }\n    }\n  }, {\n    key: \"load\",\n    value: function load(filepath) {\n      var _this7 = this;\n\n      return Promise.resolve().then(function () {\n        _this7.validateFilePath(filepath);\n\n        var absoluteFilePath = path.resolve(process.cwd(), filepath);\n        return cacheWrapper(_this7.loadCache, absoluteFilePath, function () {\n          return readFile(absoluteFilePath, {\n            throwNotFound: true\n          }).then(function (content) {\n            return _this7.createCosmiconfigResult(absoluteFilePath, content);\n          }).then(_this7.config.transform);\n        });\n      });\n    }\n  }, {\n    key: \"loadSync\",\n    value: function loadSync(filepath) {\n      var _this8 = this;\n\n      this.validateFilePath(filepath);\n      var absoluteFilePath = path.resolve(process.cwd(), filepath);\n      return cacheWrapper(this.loadSyncCache, absoluteFilePath, function () {\n        var content = readFile.sync(absoluteFilePath, {\n          throwNotFound: true\n        });\n\n        var result = _this8.createCosmiconfigResultSync(absoluteFilePath, content);\n\n        return _this8.config.transform(result);\n      });\n    }\n  }]);\n\n  return Explorer;\n}();\n\nmodule.exports = function createExplorer(options) {\n  var explorer = new Explorer(options);\n  return {\n    search: explorer.search.bind(explorer),\n    searchSync: explorer.searchSync.bind(explorer),\n    load: explorer.load.bind(explorer),\n    loadSync: explorer.loadSync.bind(explorer),\n    clearLoadCache: explorer.clearLoadCache.bind(explorer),\n    clearSearchCache: explorer.clearSearchCache.bind(explorer),\n    clearCaches: explorer.clearCaches.bind(explorer)\n  };\n};\n\nfunction nextDirUp(dir) {\n  return path.dirname(dir);\n}\n\nfunction getExtensionDescription(filepath) {\n  var ext = path.extname(filepath);\n  return ext ? \"extension \\\"\".concat(ext, \"\\\"\") : 'files without extensions';\n}","map":{"version":3,"sources":["/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/cosmiconfig/dist/createExplorer.js"],"names":["path","require","loaders","readFile","cacheWrapper","getDirectory","getPropertyByPath","MODE_SYNC","Explorer","options","loadCache","cache","Map","loadSyncCache","searchCache","searchSyncCache","config","validateConfig","clear","clearLoadCache","clearSearchCache","searchPlaces","forEach","place","loaderKey","extname","loader","Error","getExtensionDescription","searchFrom","process","cwd","then","dir","searchFromDirectory","absoluteDir","resolve","run","searchDirectory","result","nextDir","nextDirectoryToSearch","transform","sync","searchFromDirectorySync","searchDirectorySync","reduce","prevResultPromise","prevResult","shouldSearchStopWithResult","loadSearchPlace","Promise","loadSearchPlaceSync","isEmpty","ignoreEmptySearchPlaces","filepath","join","content","createCosmiconfigResult","createCosmiconfigResultSync","currentDir","currentResult","nextDirUp","stopDir","parsedContent","loadJson","packagePropValue","packageProp","basename","loadPackageProp","bind","async","entry","getLoaderEntryForFile","mode","trim","undefined","getSyncLoaderForFile","getAsyncLoaderForFile","loadedContent","loadFileContent","loaderResult","loadedContentToCosmiconfigResult","validateFilePath","absoluteFilePath","throwNotFound","module","exports","createExplorer","explorer","search","searchSync","load","loadSync","clearCaches","dirname","ext"],"mappings":"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","sourcesContent":["//      \n'use strict';\n\nconst path = require('path');\nconst loaders = require('./loaders');\nconst readFile = require('./readFile');\nconst cacheWrapper = require('./cacheWrapper');\nconst getDirectory = require('./getDirectory');\nconst getPropertyByPath = require('./getPropertyByPath');\n\nconst MODE_SYNC = 'sync';\n\n// An object value represents a config object.\n// null represents that the loader did not find anything relevant.\n// undefined represents that the loader found something relevant\n// but it was empty.\n                                              \n\nclass Explorer {\n                                                      \n                                                 \n                                                        \n                                                   \n                          \n\n  constructor(options                 ) {\n    this.loadCache = options.cache ? new Map() : null;\n    this.loadSyncCache = options.cache ? new Map() : null;\n    this.searchCache = options.cache ? new Map() : null;\n    this.searchSyncCache = options.cache ? new Map() : null;\n    this.config = options;\n    this.validateConfig();\n  }\n\n  clearLoadCache() {\n    if (this.loadCache) {\n      this.loadCache.clear();\n    }\n    if (this.loadSyncCache) {\n      this.loadSyncCache.clear();\n    }\n  }\n\n  clearSearchCache() {\n    if (this.searchCache) {\n      this.searchCache.clear();\n    }\n    if (this.searchSyncCache) {\n      this.searchSyncCache.clear();\n    }\n  }\n\n  clearCaches() {\n    this.clearLoadCache();\n    this.clearSearchCache();\n  }\n\n  validateConfig() {\n    const config = this.config;\n\n    config.searchPlaces.forEach(place => {\n      const loaderKey = path.extname(place) || 'noExt';\n      const loader = config.loaders[loaderKey];\n      if (!loader) {\n        throw new Error(\n          `No loader specified for ${getExtensionDescription(\n            place\n          )}, so searchPlaces item \"${place}\" is invalid`\n        );\n      }\n    });\n  }\n\n  search(searchFrom         )                             {\n    searchFrom = searchFrom || process.cwd();\n    return getDirectory(searchFrom).then(dir => {\n      return this.searchFromDirectory(dir);\n    });\n  }\n\n  searchFromDirectory(dir        )                             {\n    const absoluteDir = path.resolve(process.cwd(), dir);\n    const run = () => {\n      return this.searchDirectory(absoluteDir).then(result => {\n        const nextDir = this.nextDirectoryToSearch(absoluteDir, result);\n        if (nextDir) {\n          return this.searchFromDirectory(nextDir);\n        }\n        return this.config.transform(result);\n      });\n    };\n\n    if (this.searchCache) {\n      return cacheWrapper(this.searchCache, absoluteDir, run);\n    }\n    return run();\n  }\n\n  searchSync(searchFrom         )                    {\n    searchFrom = searchFrom || process.cwd();\n    const dir = getDirectory.sync(searchFrom);\n    return this.searchFromDirectorySync(dir);\n  }\n\n  searchFromDirectorySync(dir        )                    {\n    const absoluteDir = path.resolve(process.cwd(), dir);\n    const run = () => {\n      const result = this.searchDirectorySync(absoluteDir);\n      const nextDir = this.nextDirectoryToSearch(absoluteDir, result);\n      if (nextDir) {\n        return this.searchFromDirectorySync(nextDir);\n      }\n      return this.config.transform(result);\n    };\n\n    if (this.searchSyncCache) {\n      return cacheWrapper(this.searchSyncCache, absoluteDir, run);\n    }\n    return run();\n  }\n\n  searchDirectory(dir        )                             {\n    return this.config.searchPlaces.reduce((prevResultPromise, place) => {\n      return prevResultPromise.then(prevResult => {\n        if (this.shouldSearchStopWithResult(prevResult)) {\n          return prevResult;\n        }\n        return this.loadSearchPlace(dir, place);\n      });\n    }, Promise.resolve(null));\n  }\n\n  searchDirectorySync(dir        )                    {\n    let result = null;\n    for (const place of this.config.searchPlaces) {\n      result = this.loadSearchPlaceSync(dir, place);\n      if (this.shouldSearchStopWithResult(result)) break;\n    }\n    return result;\n  }\n\n  shouldSearchStopWithResult(result                   )          {\n    if (result === null) return false;\n    if (result.isEmpty && this.config.ignoreEmptySearchPlaces) return false;\n    return true;\n  }\n\n  loadSearchPlace(dir        , place        )                             {\n    const filepath = path.join(dir, place);\n    return readFile(filepath).then(content => {\n      return this.createCosmiconfigResult(filepath, content);\n    });\n  }\n\n  loadSearchPlaceSync(dir        , place        )                    {\n    const filepath = path.join(dir, place);\n    const content = readFile.sync(filepath);\n    return this.createCosmiconfigResultSync(filepath, content);\n  }\n\n  nextDirectoryToSearch(\n    currentDir        ,\n    currentResult                   \n  )          {\n    if (this.shouldSearchStopWithResult(currentResult)) {\n      return null;\n    }\n    const nextDir = nextDirUp(currentDir);\n    if (nextDir === currentDir || currentDir === this.config.stopDir) {\n      return null;\n    }\n    return nextDir;\n  }\n\n  loadPackageProp(filepath        , content        ) {\n    const parsedContent = loaders.loadJson(filepath, content);\n    const packagePropValue = getPropertyByPath(\n      parsedContent,\n      this.config.packageProp\n    );\n    return packagePropValue || null;\n  }\n\n  getLoaderEntryForFile(filepath        )              {\n    if (path.basename(filepath) === 'package.json') {\n      const loader = this.loadPackageProp.bind(this);\n      return { sync: loader, async: loader };\n    }\n\n    const loaderKey = path.extname(filepath) || 'noExt';\n    return this.config.loaders[loaderKey] || {};\n  }\n\n  getSyncLoaderForFile(filepath        )             {\n    const entry = this.getLoaderEntryForFile(filepath);\n    if (!entry.sync) {\n      throw new Error(\n        `No sync loader specified for ${getExtensionDescription(filepath)}`\n      );\n    }\n    return entry.sync;\n  }\n\n  getAsyncLoaderForFile(filepath        )              {\n    const entry = this.getLoaderEntryForFile(filepath);\n    const loader = entry.async || entry.sync;\n    if (!loader) {\n      throw new Error(\n        `No async loader specified for ${getExtensionDescription(filepath)}`\n      );\n    }\n    return loader;\n  }\n\n  loadFileContent(\n    mode                  ,\n    filepath        ,\n    content               \n  )                                                 {\n    if (content === null) {\n      return null;\n    }\n    if (content.trim() === '') {\n      return undefined;\n    }\n    const loader =\n      mode === MODE_SYNC\n        ? this.getSyncLoaderForFile(filepath)\n        : this.getAsyncLoaderForFile(filepath);\n    return loader(filepath, content);\n  }\n\n  loadedContentToCosmiconfigResult(\n    filepath        ,\n    loadedContent                   \n  )                    {\n    if (loadedContent === null) {\n      return null;\n    }\n    if (loadedContent === undefined) {\n      return { filepath, config: undefined, isEmpty: true };\n    }\n    return { config: loadedContent, filepath };\n  }\n\n  createCosmiconfigResult(\n    filepath        ,\n    content               \n  )                             {\n    return Promise.resolve()\n      .then(() => {\n        return this.loadFileContent('async', filepath, content);\n      })\n      .then(loaderResult => {\n        return this.loadedContentToCosmiconfigResult(filepath, loaderResult);\n      });\n  }\n\n  createCosmiconfigResultSync(\n    filepath        ,\n    content               \n  )                    {\n    const loaderResult = this.loadFileContent('sync', filepath, content);\n    return this.loadedContentToCosmiconfigResult(filepath, loaderResult);\n  }\n\n  validateFilePath(filepath         ) {\n    if (!filepath) {\n      throw new Error('load and loadSync must pass a non-empty string');\n    }\n  }\n\n  load(filepath        )                             {\n    return Promise.resolve().then(() => {\n      this.validateFilePath(filepath);\n      const absoluteFilePath = path.resolve(process.cwd(), filepath);\n      return cacheWrapper(this.loadCache, absoluteFilePath, () => {\n        return readFile(absoluteFilePath, { throwNotFound: true })\n          .then(content => {\n            return this.createCosmiconfigResult(absoluteFilePath, content);\n          })\n          .then(this.config.transform);\n      });\n    });\n  }\n\n  loadSync(filepath        )                    {\n    this.validateFilePath(filepath);\n    const absoluteFilePath = path.resolve(process.cwd(), filepath);\n    return cacheWrapper(this.loadSyncCache, absoluteFilePath, () => {\n      const content = readFile.sync(absoluteFilePath, { throwNotFound: true });\n      const result = this.createCosmiconfigResultSync(\n        absoluteFilePath,\n        content\n      );\n      return this.config.transform(result);\n    });\n  }\n}\n\nmodule.exports = function createExplorer(options                 ) {\n  const explorer = new Explorer(options);\n\n  return {\n    search: explorer.search.bind(explorer),\n    searchSync: explorer.searchSync.bind(explorer),\n    load: explorer.load.bind(explorer),\n    loadSync: explorer.loadSync.bind(explorer),\n    clearLoadCache: explorer.clearLoadCache.bind(explorer),\n    clearSearchCache: explorer.clearSearchCache.bind(explorer),\n    clearCaches: explorer.clearCaches.bind(explorer),\n  };\n};\n\nfunction nextDirUp(dir        )         {\n  return path.dirname(dir);\n}\n\nfunction getExtensionDescription(filepath        )         {\n  const ext = path.extname(filepath);\n  return ext ? `extension \"${ext}\"` : 'files without extensions';\n}\n"]},"metadata":{},"sourceType":"script"}