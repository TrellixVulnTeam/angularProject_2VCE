{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/regenerator\");\n\nvar _objectSpread = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/objectSpread2\");\n\nvar _asyncToGenerator = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar path = require('path');\n\nvar pathType = require('path-type');\n\nvar getExtensions = function getExtensions(extensions) {\n  return extensions.length > 1 ? \"{\".concat(extensions.join(','), \"}\") : extensions[0];\n};\n\nvar getPath = function getPath(filepath, cwd) {\n  var pth = filepath[0] === '!' ? filepath.slice(1) : filepath;\n  return path.isAbsolute(pth) ? pth : path.join(cwd, pth);\n};\n\nvar addExtensions = function addExtensions(file, extensions) {\n  if (path.extname(file)) {\n    return \"**/\".concat(file);\n  }\n\n  return \"**/\".concat(file, \".\").concat(getExtensions(extensions));\n};\n\nvar getGlob = function getGlob(directory, options) {\n  if (options.files && !Array.isArray(options.files)) {\n    throw new TypeError(\"Expected `files` to be of type `Array` but received type `\".concat(typeof options.files, \"`\"));\n  }\n\n  if (options.extensions && !Array.isArray(options.extensions)) {\n    throw new TypeError(\"Expected `extensions` to be of type `Array` but received type `\".concat(typeof options.extensions, \"`\"));\n  }\n\n  if (options.files && options.extensions) {\n    return options.files.map(function (x) {\n      return path.posix.join(directory, addExtensions(x, options.extensions));\n    });\n  }\n\n  if (options.files) {\n    return options.files.map(function (x) {\n      return path.posix.join(directory, \"**/\".concat(x));\n    });\n  }\n\n  if (options.extensions) {\n    return [path.posix.join(directory, \"**/*.\".concat(getExtensions(options.extensions)))];\n  }\n\n  return [path.posix.join(directory, '**')];\n};\n\nmodule.exports = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(input, options) {\n    var globs;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            options = _objectSpread({\n              cwd: process.cwd()\n            }, options);\n\n            if (!(typeof options.cwd !== 'string')) {\n              _context2.next = 3;\n              break;\n            }\n\n            throw new TypeError(\"Expected `cwd` to be of type `string` but received type `\".concat(typeof options.cwd, \"`\"));\n\n          case 3:\n            _context2.next = 5;\n            return Promise.all([].concat(input).map( /*#__PURE__*/function () {\n              var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(x) {\n                var isDirectory;\n                return _regeneratorRuntime.wrap(function _callee$(_context) {\n                  while (1) {\n                    switch (_context.prev = _context.next) {\n                      case 0:\n                        _context.next = 2;\n                        return pathType.isDirectory(getPath(x, options.cwd));\n\n                      case 2:\n                        isDirectory = _context.sent;\n                        return _context.abrupt(\"return\", isDirectory ? getGlob(x, options) : x);\n\n                      case 4:\n                      case \"end\":\n                        return _context.stop();\n                    }\n                  }\n                }, _callee);\n              }));\n\n              return function (_x3) {\n                return _ref2.apply(this, arguments);\n              };\n            }()));\n\n          case 5:\n            globs = _context2.sent;\n            return _context2.abrupt(\"return\", [].concat.apply([], globs));\n\n          case 7:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function (_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nmodule.exports.sync = function (input, options) {\n  options = _objectSpread({\n    cwd: process.cwd()\n  }, options);\n\n  if (typeof options.cwd !== 'string') {\n    throw new TypeError(\"Expected `cwd` to be of type `string` but received type `\".concat(typeof options.cwd, \"`\"));\n  }\n\n  var globs = [].concat(input).map(function (x) {\n    return pathType.isDirectorySync(getPath(x, options.cwd)) ? getGlob(x, options) : x;\n  });\n  return [].concat.apply([], globs); // eslint-disable-line prefer-spread\n};","map":{"version":3,"sources":["/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/dir-glob/index.js"],"names":["path","require","pathType","getExtensions","extensions","length","join","getPath","filepath","cwd","pth","slice","isAbsolute","addExtensions","file","extname","getGlob","directory","options","files","Array","isArray","TypeError","map","x","posix","module","exports","input","process","Promise","all","concat","isDirectory","globs","apply","sync","isDirectorySync"],"mappings":"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","sourcesContent":["'use strict';\nconst path = require('path');\nconst pathType = require('path-type');\n\nconst getExtensions = extensions => extensions.length > 1 ? `{${extensions.join(',')}}` : extensions[0];\n\nconst getPath = (filepath, cwd) => {\n\tconst pth = filepath[0] === '!' ? filepath.slice(1) : filepath;\n\treturn path.isAbsolute(pth) ? pth : path.join(cwd, pth);\n};\n\nconst addExtensions = (file, extensions) => {\n\tif (path.extname(file)) {\n\t\treturn `**/${file}`;\n\t}\n\n\treturn `**/${file}.${getExtensions(extensions)}`;\n};\n\nconst getGlob = (directory, options) => {\n\tif (options.files && !Array.isArray(options.files)) {\n\t\tthrow new TypeError(`Expected \\`files\\` to be of type \\`Array\\` but received type \\`${typeof options.files}\\``);\n\t}\n\n\tif (options.extensions && !Array.isArray(options.extensions)) {\n\t\tthrow new TypeError(`Expected \\`extensions\\` to be of type \\`Array\\` but received type \\`${typeof options.extensions}\\``);\n\t}\n\n\tif (options.files && options.extensions) {\n\t\treturn options.files.map(x => path.posix.join(directory, addExtensions(x, options.extensions)));\n\t}\n\n\tif (options.files) {\n\t\treturn options.files.map(x => path.posix.join(directory, `**/${x}`));\n\t}\n\n\tif (options.extensions) {\n\t\treturn [path.posix.join(directory, `**/*.${getExtensions(options.extensions)}`)];\n\t}\n\n\treturn [path.posix.join(directory, '**')];\n};\n\nmodule.exports = async (input, options) => {\n\toptions = {\n\t\tcwd: process.cwd(),\n\t\t...options\n\t};\n\n\tif (typeof options.cwd !== 'string') {\n\t\tthrow new TypeError(`Expected \\`cwd\\` to be of type \\`string\\` but received type \\`${typeof options.cwd}\\``);\n\t}\n\n\tconst globs = await Promise.all([].concat(input).map(async x => {\n\t\tconst isDirectory = await pathType.isDirectory(getPath(x, options.cwd));\n\t\treturn isDirectory ? getGlob(x, options) : x;\n\t}));\n\n\treturn [].concat.apply([], globs); // eslint-disable-line prefer-spread\n};\n\nmodule.exports.sync = (input, options) => {\n\toptions = {\n\t\tcwd: process.cwd(),\n\t\t...options\n\t};\n\n\tif (typeof options.cwd !== 'string') {\n\t\tthrow new TypeError(`Expected \\`cwd\\` to be of type \\`string\\` but received type \\`${typeof options.cwd}\\``);\n\t}\n\n\tconst globs = [].concat(input).map(x => pathType.isDirectorySync(getPath(x, options.cwd)) ? getGlob(x, options) : x);\n\n\treturn [].concat.apply([], globs); // eslint-disable-line prefer-spread\n};\n"]},"metadata":{},"sourceType":"script"}