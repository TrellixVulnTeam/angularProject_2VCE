{"ast":null,"code":"/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n(function (factory) {\n  if (typeof module === \"object\" && typeof module.exports === \"object\") {\n    var v = factory(require, exports);\n    if (v !== undefined) module.exports = v;\n  } else if (typeof define === \"function\" && define.amd) {\n    define(\"@angular/compiler/src/assertions\", [\"require\", \"exports\"], factory);\n  }\n})(function (require, exports) {\n  \"use strict\";\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.assertInterpolationSymbols = exports.assertArrayOfStrings = void 0;\n\n  function assertArrayOfStrings(identifier, value) {\n    if (value == null) {\n      return;\n    }\n\n    if (!Array.isArray(value)) {\n      throw new Error(\"Expected '\" + identifier + \"' to be an array of strings.\");\n    }\n\n    for (var i = 0; i < value.length; i += 1) {\n      if (typeof value[i] !== 'string') {\n        throw new Error(\"Expected '\" + identifier + \"' to be an array of strings.\");\n      }\n    }\n  }\n\n  exports.assertArrayOfStrings = assertArrayOfStrings;\n  var UNUSABLE_INTERPOLATION_REGEXPS = [/^\\s*$/, /[<>]/, /^[{}]$/, /&(#|[a-z])/i, /^\\/\\//];\n\n  function assertInterpolationSymbols(identifier, value) {\n    if (value != null && !(Array.isArray(value) && value.length == 2)) {\n      throw new Error(\"Expected '\" + identifier + \"' to be an array, [start, end].\");\n    } else if (value != null) {\n      var start_1 = value[0];\n      var end_1 = value[1]; // Check for unusable interpolation symbols\n\n      UNUSABLE_INTERPOLATION_REGEXPS.forEach(function (regexp) {\n        if (regexp.test(start_1) || regexp.test(end_1)) {\n          throw new Error(\"['\" + start_1 + \"', '\" + end_1 + \"'] contains unusable interpolation symbol.\");\n        }\n      });\n    }\n  }\n\n  exports.assertInterpolationSymbols = assertInterpolationSymbols;\n});","map":{"version":3,"sources":["../../../../../../packages/compiler/src/assertions.ts"],"names":[],"mappings":"AAAA;;;;;;AAMG;;;;;;;;;;;;;;;;AAEH,WAAgB,oBAAhB,CAAqC,UAArC,EAAyD,KAAzD,EAAmE;AACjE,QAAI,KAAK,IAAI,IAAb,EAAmB;AACjB;AACD;;AACD,QAAI,CAAC,KAAK,CAAC,OAAN,CAAc,KAAd,CAAL,EAA2B;AACzB,YAAM,IAAI,KAAJ,CAAU,eAAa,UAAb,GAAuB,8BAAjC,CAAN;AACD;;AACD,SAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,KAAK,CAAC,MAA1B,EAAkC,CAAC,IAAI,CAAvC,EAA0C;AACxC,UAAI,OAAO,KAAK,CAAC,CAAD,CAAZ,KAAoB,QAAxB,EAAkC;AAChC,cAAM,IAAI,KAAJ,CAAU,eAAa,UAAb,GAAuB,8BAAjC,CAAN;AACD;AACF;AACF;;AAZD,EAAA,OAAA,CAAA,oBAAA,GAAA,oBAAA;AAcA,MAAM,8BAA8B,GAAG,CACrC,OADqC,EAErC,MAFqC,EAGrC,QAHqC,EAIrC,aAJqC,EAKrC,OALqC,CAAvC;;AAQA,WAAgB,0BAAhB,CAA2C,UAA3C,EAA+D,KAA/D,EAAyE;AACvE,QAAI,KAAK,IAAI,IAAT,IAAiB,EAAE,KAAK,CAAC,OAAN,CAAc,KAAd,KAAwB,KAAK,CAAC,MAAN,IAAgB,CAA1C,CAArB,EAAmE;AACjE,YAAM,IAAI,KAAJ,CAAU,eAAa,UAAb,GAAuB,iCAAjC,CAAN;AACD,KAFD,MAEO,IAAI,KAAK,IAAI,IAAb,EAAmB;AACxB,UAAM,OAAK,GAAG,KAAK,CAAC,CAAD,CAAnB;AACA,UAAM,KAAG,GAAG,KAAK,CAAC,CAAD,CAAjB,CAFwB,CAGxB;;AACA,MAAA,8BAA8B,CAAC,OAA/B,CAAuC,UAAA,MAAA,EAAM;AAC3C,YAAI,MAAM,CAAC,IAAP,CAAY,OAAZ,KAAsB,MAAM,CAAC,IAAP,CAAY,KAAZ,CAA1B,EAA4C;AAC1C,gBAAM,IAAI,KAAJ,CAAU,OAAK,OAAL,GAAU,MAAV,GAAiB,KAAjB,GAAoB,4CAA9B,CAAN;AACD;AACF,OAJD;AAKD;AACF;;AAbD,EAAA,OAAA,CAAA,0BAAA,GAAA,0BAAA","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport function assertArrayOfStrings(identifier: string, value: any) {\n  if (value == null) {\n    return;\n  }\n  if (!Array.isArray(value)) {\n    throw new Error(`Expected '${identifier}' to be an array of strings.`);\n  }\n  for (let i = 0; i < value.length; i += 1) {\n    if (typeof value[i] !== 'string') {\n      throw new Error(`Expected '${identifier}' to be an array of strings.`);\n    }\n  }\n}\n\nconst UNUSABLE_INTERPOLATION_REGEXPS = [\n  /^\\s*$/,        // empty\n  /[<>]/,         // html tag\n  /^[{}]$/,       // i18n expansion\n  /&(#|[a-z])/i,  // character reference,\n  /^\\/\\//,        // comment\n];\n\nexport function assertInterpolationSymbols(identifier: string, value: any): void {\n  if (value != null && !(Array.isArray(value) && value.length == 2)) {\n    throw new Error(`Expected '${identifier}' to be an array, [start, end].`);\n  } else if (value != null) {\n    const start = value[0] as string;\n    const end = value[1] as string;\n    // Check for unusable interpolation symbols\n    UNUSABLE_INTERPOLATION_REGEXPS.forEach(regexp => {\n      if (regexp.test(start) || regexp.test(end)) {\n        throw new Error(`['${start}', '${end}'] contains unusable interpolation symbol.`);\n      }\n    });\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}