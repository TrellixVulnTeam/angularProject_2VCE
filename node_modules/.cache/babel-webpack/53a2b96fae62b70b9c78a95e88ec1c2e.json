{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n/** @typedef {import(\"./Resolver\")} Resolver */\n\n/** @typedef {import(\"./Resolver\").ResolveStepHook} ResolveStepHook */\n\nvar _objectSpread = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/objectSpread2\");\n\nvar _classCallCheck = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/createClass\");\n\nmodule.exports = /*#__PURE__*/function () {\n  /**\n   * @param {string | ResolveStepHook} source source\n   * @param {string} path path\n   * @param {string | ResolveStepHook} target target\n   */\n  function ModulesInRootPlugin(source, path, target) {\n    _classCallCheck(this, ModulesInRootPlugin);\n\n    this.source = source;\n    this.path = path;\n    this.target = target;\n  }\n  /**\n   * @param {Resolver} resolver the resolver\n   * @returns {void}\n   */\n\n\n  _createClass(ModulesInRootPlugin, [{\n    key: \"apply\",\n    value: function apply(resolver) {\n      var _this = this;\n\n      var target = resolver.ensureHook(this.target);\n      resolver.getHook(this.source).tapAsync(\"ModulesInRootPlugin\", function (request, resolveContext, callback) {\n        var obj = _objectSpread(_objectSpread({}, request), {}, {\n          path: _this.path,\n          request: \"./\" + request.request,\n          module: false\n        });\n\n        resolver.doResolve(target, obj, \"looking for modules in \" + _this.path, resolveContext, callback);\n      });\n    }\n  }]);\n\n  return ModulesInRootPlugin;\n}();","map":{"version":3,"sources":["/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/enhanced-resolve/lib/ModulesInRootPlugin.js"],"names":["module","exports","source","path","target","resolver","ensureHook","getHook","tapAsync","request","resolveContext","callback","obj","doResolve"],"mappings":"AAAA;AACA;AACA;AACA;AAEA;AAEA;;AACA;;;;;;;;AAEAA,MAAM,CAACC,OAAP;AACC;AACD;AACA;AACA;AACA;AACC,+BAAYC,MAAZ,EAAoBC,IAApB,EAA0BC,MAA1B,EAAkC;AAAA;;AACjC,SAAKF,MAAL,GAAcA,MAAd;AACA,SAAKC,IAAL,GAAYA,IAAZ;AACA,SAAKC,MAAL,GAAcA,MAAd;AACA;AAED;AACD;AACA;AACA;;;AAfA;AAAA;AAAA,WAgBC,eAAMC,QAAN,EAAgB;AAAA;;AACf,UAAMD,MAAM,GAAGC,QAAQ,CAACC,UAAT,CAAoB,KAAKF,MAAzB,CAAf;AACAC,MAAAA,QAAQ,CACNE,OADF,CACU,KAAKL,MADf,EAEEM,QAFF,CAEW,qBAFX,EAEkC,UAACC,OAAD,EAAUC,cAAV,EAA0BC,QAA1B,EAAuC;AACvE,YAAMC,GAAG,mCACLH,OADK;AAERN,UAAAA,IAAI,EAAE,KAAI,CAACA,IAFH;AAGRM,UAAAA,OAAO,EAAE,OAAOA,OAAO,CAACA,OAHhB;AAIRT,UAAAA,MAAM,EAAE;AAJA,UAAT;;AAMAK,QAAAA,QAAQ,CAACQ,SAAT,CACCT,MADD,EAECQ,GAFD,EAGC,4BAA4B,KAAI,CAACT,IAHlC,EAICO,cAJD,EAKCC,QALD;AAOA,OAhBF;AAiBA;AAnCF;;AAAA;AAAA","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\n/** @typedef {import(\"./Resolver\")} Resolver */\n/** @typedef {import(\"./Resolver\").ResolveStepHook} ResolveStepHook */\n\nmodule.exports = class ModulesInRootPlugin {\n\t/**\n\t * @param {string | ResolveStepHook} source source\n\t * @param {string} path path\n\t * @param {string | ResolveStepHook} target target\n\t */\n\tconstructor(source, path, target) {\n\t\tthis.source = source;\n\t\tthis.path = path;\n\t\tthis.target = target;\n\t}\n\n\t/**\n\t * @param {Resolver} resolver the resolver\n\t * @returns {void}\n\t */\n\tapply(resolver) {\n\t\tconst target = resolver.ensureHook(this.target);\n\t\tresolver\n\t\t\t.getHook(this.source)\n\t\t\t.tapAsync(\"ModulesInRootPlugin\", (request, resolveContext, callback) => {\n\t\t\t\tconst obj = {\n\t\t\t\t\t...request,\n\t\t\t\t\tpath: this.path,\n\t\t\t\t\trequest: \"./\" + request.request,\n\t\t\t\t\tmodule: false\n\t\t\t\t};\n\t\t\t\tresolver.doResolve(\n\t\t\t\t\ttarget,\n\t\t\t\t\tobj,\n\t\t\t\t\t\"looking for modules in \" + this.path,\n\t\t\t\t\tresolveContext,\n\t\t\t\t\tcallback\n\t\t\t\t);\n\t\t\t});\n\t}\n};\n"]},"metadata":{},"sourceType":"script"}