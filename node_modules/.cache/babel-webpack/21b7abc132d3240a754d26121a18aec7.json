{"ast":null,"code":"'use strict';\n\nvar path = require('path');\n\nvar fs = require('fs');\n\nvar del = require('del');\n\nvar createCertificate = require('./createCertificate');\n\nfunction getCertificate(logger) {\n  // Use a self-signed certificate if no certificate was configured.\n  // Cycle certs every 24 hours\n  var certificatePath = path.join(__dirname, '../../ssl/server.pem');\n  var certificateExists = fs.existsSync(certificatePath);\n\n  if (certificateExists) {\n    var certificateTtl = 1000 * 60 * 60 * 24;\n    var certificateStat = fs.statSync(certificatePath);\n    var now = new Date(); // cert is more than 30 days old, kill it with fire\n\n    if ((now - certificateStat.ctime) / certificateTtl > 30) {\n      logger.info('SSL Certificate is more than 30 days old. Removing.');\n      del.sync([certificatePath], {\n        force: true\n      });\n      certificateExists = false;\n    }\n  }\n\n  if (!certificateExists) {\n    logger.info('Generating SSL Certificate');\n    var attributes = [{\n      name: 'commonName',\n      value: 'localhost'\n    }];\n    var pems = createCertificate(attributes);\n    fs.writeFileSync(certificatePath, pems.private + pems.cert, {\n      encoding: 'utf8'\n    });\n  }\n\n  return fs.readFileSync(certificatePath);\n}\n\nmodule.exports = getCertificate;","map":{"version":3,"sources":["/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/webpack-dev-server/lib/utils/getCertificate.js"],"names":["path","require","fs","del","createCertificate","getCertificate","logger","certificatePath","join","__dirname","certificateExists","existsSync","certificateTtl","certificateStat","statSync","now","Date","ctime","info","sync","force","attributes","name","value","pems","writeFileSync","private","cert","encoding","readFileSync","module","exports"],"mappings":"AAAA;;AAEA,IAAMA,IAAI,GAAGC,OAAO,CAAC,MAAD,CAApB;;AACA,IAAMC,EAAE,GAAGD,OAAO,CAAC,IAAD,CAAlB;;AACA,IAAME,GAAG,GAAGF,OAAO,CAAC,KAAD,CAAnB;;AACA,IAAMG,iBAAiB,GAAGH,OAAO,CAAC,qBAAD,CAAjC;;AAEA,SAASI,cAAT,CAAwBC,MAAxB,EAAgC;AAC9B;AACA;AACA,MAAMC,eAAe,GAAGP,IAAI,CAACQ,IAAL,CAAUC,SAAV,EAAqB,sBAArB,CAAxB;AAEA,MAAIC,iBAAiB,GAAGR,EAAE,CAACS,UAAH,CAAcJ,eAAd,CAAxB;;AAEA,MAAIG,iBAAJ,EAAuB;AACrB,QAAME,cAAc,GAAG,OAAO,EAAP,GAAY,EAAZ,GAAiB,EAAxC;AACA,QAAMC,eAAe,GAAGX,EAAE,CAACY,QAAH,CAAYP,eAAZ,CAAxB;AAEA,QAAMQ,GAAG,GAAG,IAAIC,IAAJ,EAAZ,CAJqB,CAMrB;;AACA,QAAI,CAACD,GAAG,GAAGF,eAAe,CAACI,KAAvB,IAAgCL,cAAhC,GAAiD,EAArD,EAAyD;AACvDN,MAAAA,MAAM,CAACY,IAAP,CAAY,qDAAZ;AAEAf,MAAAA,GAAG,CAACgB,IAAJ,CAAS,CAACZ,eAAD,CAAT,EAA4B;AAAEa,QAAAA,KAAK,EAAE;AAAT,OAA5B;AAEAV,MAAAA,iBAAiB,GAAG,KAApB;AACD;AACF;;AAED,MAAI,CAACA,iBAAL,EAAwB;AACtBJ,IAAAA,MAAM,CAACY,IAAP,CAAY,4BAAZ;AAEA,QAAMG,UAAU,GAAG,CAAC;AAAEC,MAAAA,IAAI,EAAE,YAAR;AAAsBC,MAAAA,KAAK,EAAE;AAA7B,KAAD,CAAnB;AACA,QAAMC,IAAI,GAAGpB,iBAAiB,CAACiB,UAAD,CAA9B;AAEAnB,IAAAA,EAAE,CAACuB,aAAH,CAAiBlB,eAAjB,EAAkCiB,IAAI,CAACE,OAAL,GAAeF,IAAI,CAACG,IAAtD,EAA4D;AAC1DC,MAAAA,QAAQ,EAAE;AADgD,KAA5D;AAGD;;AAED,SAAO1B,EAAE,CAAC2B,YAAH,CAAgBtB,eAAhB,CAAP;AACD;;AAEDuB,MAAM,CAACC,OAAP,GAAiB1B,cAAjB","sourcesContent":["'use strict';\n\nconst path = require('path');\nconst fs = require('fs');\nconst del = require('del');\nconst createCertificate = require('./createCertificate');\n\nfunction getCertificate(logger) {\n  // Use a self-signed certificate if no certificate was configured.\n  // Cycle certs every 24 hours\n  const certificatePath = path.join(__dirname, '../../ssl/server.pem');\n\n  let certificateExists = fs.existsSync(certificatePath);\n\n  if (certificateExists) {\n    const certificateTtl = 1000 * 60 * 60 * 24;\n    const certificateStat = fs.statSync(certificatePath);\n\n    const now = new Date();\n\n    // cert is more than 30 days old, kill it with fire\n    if ((now - certificateStat.ctime) / certificateTtl > 30) {\n      logger.info('SSL Certificate is more than 30 days old. Removing.');\n\n      del.sync([certificatePath], { force: true });\n\n      certificateExists = false;\n    }\n  }\n\n  if (!certificateExists) {\n    logger.info('Generating SSL Certificate');\n\n    const attributes = [{ name: 'commonName', value: 'localhost' }];\n    const pems = createCertificate(attributes);\n\n    fs.writeFileSync(certificatePath, pems.private + pems.cert, {\n      encoding: 'utf8',\n    });\n  }\n\n  return fs.readFileSync(certificatePath);\n}\n\nmodule.exports = getCertificate;\n"]},"metadata":{},"sourceType":"script"}