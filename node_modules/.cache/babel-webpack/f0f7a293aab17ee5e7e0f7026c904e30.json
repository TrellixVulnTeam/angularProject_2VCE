{"ast":null,"code":"/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n(function (factory) {\n  if (typeof module === \"object\" && typeof module.exports === \"object\") {\n    var v = factory(require, exports);\n    if (v !== undefined) module.exports = v;\n  } else if (typeof define === \"function\" && define.amd) {\n    define(\"@angular/compiler/src/i18n/extractor\", [\"require\", \"exports\", \"tslib\", \"@angular/compiler/src/aot/compiler\", \"@angular/compiler/src/aot/compiler_factory\", \"@angular/compiler/src/aot/static_reflector\", \"@angular/compiler/src/aot/static_symbol\", \"@angular/compiler/src/aot/static_symbol_resolver\", \"@angular/compiler/src/aot/summary_resolver\", \"@angular/compiler/src/config\", \"@angular/compiler/src/core\", \"@angular/compiler/src/directive_normalizer\", \"@angular/compiler/src/directive_resolver\", \"@angular/compiler/src/metadata_resolver\", \"@angular/compiler/src/ml_parser/html_parser\", \"@angular/compiler/src/ml_parser/interpolation_config\", \"@angular/compiler/src/ng_module_resolver\", \"@angular/compiler/src/pipe_resolver\", \"@angular/compiler/src/schema/dom_element_schema_registry\", \"@angular/compiler/src/i18n/message_bundle\"], factory);\n  }\n})(function (require, exports) {\n  \"use strict\";\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.Extractor = void 0;\n\n  var tslib_1 = require(\"tslib\");\n  /**\n   * Extract i18n messages from source code\n   */\n\n\n  var compiler_1 = require(\"@angular/compiler/src/aot/compiler\");\n\n  var compiler_factory_1 = require(\"@angular/compiler/src/aot/compiler_factory\");\n\n  var static_reflector_1 = require(\"@angular/compiler/src/aot/static_reflector\");\n\n  var static_symbol_1 = require(\"@angular/compiler/src/aot/static_symbol\");\n\n  var static_symbol_resolver_1 = require(\"@angular/compiler/src/aot/static_symbol_resolver\");\n\n  var summary_resolver_1 = require(\"@angular/compiler/src/aot/summary_resolver\");\n\n  var config_1 = require(\"@angular/compiler/src/config\");\n\n  var core_1 = require(\"@angular/compiler/src/core\");\n\n  var directive_normalizer_1 = require(\"@angular/compiler/src/directive_normalizer\");\n\n  var directive_resolver_1 = require(\"@angular/compiler/src/directive_resolver\");\n\n  var metadata_resolver_1 = require(\"@angular/compiler/src/metadata_resolver\");\n\n  var html_parser_1 = require(\"@angular/compiler/src/ml_parser/html_parser\");\n\n  var interpolation_config_1 = require(\"@angular/compiler/src/ml_parser/interpolation_config\");\n\n  var ng_module_resolver_1 = require(\"@angular/compiler/src/ng_module_resolver\");\n\n  var pipe_resolver_1 = require(\"@angular/compiler/src/pipe_resolver\");\n\n  var dom_element_schema_registry_1 = require(\"@angular/compiler/src/schema/dom_element_schema_registry\");\n\n  var message_bundle_1 = require(\"@angular/compiler/src/i18n/message_bundle\");\n\n  var Extractor =\n  /** @class */\n  function () {\n    function Extractor(host, staticSymbolResolver, messageBundle, metadataResolver) {\n      this.host = host;\n      this.staticSymbolResolver = staticSymbolResolver;\n      this.messageBundle = messageBundle;\n      this.metadataResolver = metadataResolver;\n    }\n\n    Extractor.prototype.extract = function (rootFiles) {\n      var _this = this;\n\n      var _a = compiler_1.analyzeAndValidateNgModules(rootFiles, this.host, this.staticSymbolResolver, this.metadataResolver),\n          files = _a.files,\n          ngModules = _a.ngModules;\n\n      return Promise.all(ngModules.map(function (ngModule) {\n        return _this.metadataResolver.loadNgModuleDirectiveAndPipeMetadata(ngModule.type.reference, false);\n      })).then(function () {\n        var errors = [];\n        files.forEach(function (file) {\n          var compMetas = [];\n          file.directives.forEach(function (directiveType) {\n            var dirMeta = _this.metadataResolver.getDirectiveMetadata(directiveType);\n\n            if (dirMeta && dirMeta.isComponent) {\n              compMetas.push(dirMeta);\n            }\n          });\n          compMetas.forEach(function (compMeta) {\n            var html = compMeta.template.template; // Template URL points to either an HTML or TS file depending on\n            // whether the file is used with `templateUrl:` or `template:`,\n            // respectively.\n\n            var templateUrl = compMeta.template.templateUrl;\n            var interpolationConfig = interpolation_config_1.InterpolationConfig.fromArray(compMeta.template.interpolation);\n            errors.push.apply(errors, tslib_1.__spread(_this.messageBundle.updateFromTemplate(html, templateUrl, interpolationConfig)));\n          });\n        });\n\n        if (errors.length) {\n          throw new Error(errors.map(function (e) {\n            return e.toString();\n          }).join('\\n'));\n        }\n\n        return _this.messageBundle;\n      });\n    };\n\n    Extractor.create = function (host, locale) {\n      var htmlParser = new html_parser_1.HtmlParser();\n      var urlResolver = compiler_factory_1.createAotUrlResolver(host);\n      var symbolCache = new static_symbol_1.StaticSymbolCache();\n      var summaryResolver = new summary_resolver_1.AotSummaryResolver(host, symbolCache);\n      var staticSymbolResolver = new static_symbol_resolver_1.StaticSymbolResolver(host, symbolCache, summaryResolver);\n      var staticReflector = new static_reflector_1.StaticReflector(summaryResolver, staticSymbolResolver);\n      var config = new config_1.CompilerConfig({\n        defaultEncapsulation: core_1.ViewEncapsulation.Emulated,\n        useJit: false\n      });\n      var normalizer = new directive_normalizer_1.DirectiveNormalizer({\n        get: function get(url) {\n          return host.loadResource(url);\n        }\n      }, urlResolver, htmlParser, config);\n      var elementSchemaRegistry = new dom_element_schema_registry_1.DomElementSchemaRegistry();\n      var resolver = new metadata_resolver_1.CompileMetadataResolver(config, htmlParser, new ng_module_resolver_1.NgModuleResolver(staticReflector), new directive_resolver_1.DirectiveResolver(staticReflector), new pipe_resolver_1.PipeResolver(staticReflector), summaryResolver, elementSchemaRegistry, normalizer, console, symbolCache, staticReflector); // TODO(vicb): implicit tags & attributes\n\n      var messageBundle = new message_bundle_1.MessageBundle(htmlParser, [], {}, locale);\n      var extractor = new Extractor(host, staticSymbolResolver, messageBundle, resolver);\n      return {\n        extractor: extractor,\n        staticReflector: staticReflector\n      };\n    };\n\n    return Extractor;\n  }();\n\n  exports.Extractor = Extractor;\n});","map":{"version":3,"sources":["../../../../../../../packages/compiler/src/i18n/extractor.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\n/**\n * Extract i18n messages from source code\n */\nimport {analyzeAndValidateNgModules} from '../aot/compiler';\nimport {createAotUrlResolver} from '../aot/compiler_factory';\nimport {StaticReflector} from '../aot/static_reflector';\nimport {StaticSymbolCache} from '../aot/static_symbol';\nimport {StaticSymbolResolver, StaticSymbolResolverHost} from '../aot/static_symbol_resolver';\nimport {AotSummaryResolver, AotSummaryResolverHost} from '../aot/summary_resolver';\nimport {CompileDirectiveMetadata} from '../compile_metadata';\nimport {CompilerConfig} from '../config';\nimport {ViewEncapsulation} from '../core';\nimport {DirectiveNormalizer} from '../directive_normalizer';\nimport {DirectiveResolver} from '../directive_resolver';\nimport {CompileMetadataResolver} from '../metadata_resolver';\nimport {HtmlParser} from '../ml_parser/html_parser';\nimport {InterpolationConfig} from '../ml_parser/interpolation_config';\nimport {NgModuleResolver} from '../ng_module_resolver';\nimport {ParseError} from '../parse_util';\nimport {PipeResolver} from '../pipe_resolver';\nimport {DomElementSchemaRegistry} from '../schema/dom_element_schema_registry';\nimport {syntaxError} from '../util';\n\nimport {MessageBundle} from './message_bundle';\n\n\n\n/**\n * The host of the Extractor disconnects the implementation from TypeScript / other language\n * services and from underlying file systems.\n */\nexport interface ExtractorHost extends StaticSymbolResolverHost, AotSummaryResolverHost {\n  /**\n   * Converts a path that refers to a resource into an absolute filePath\n   * that can be lateron used for loading the resource via `loadResource.\n   */\n  resourceNameToFileName(path: string, containingFile: string): string|null;\n  /**\n   * Loads a resource (e.g. html / css)\n   */\n  loadResource(path: string): Promise<string>|string;\n}\n\nexport class Extractor {\n  constructor(\n      public host: ExtractorHost, private staticSymbolResolver: StaticSymbolResolver,\n      private messageBundle: MessageBundle, private metadataResolver: CompileMetadataResolver) {}\n\n  extract(rootFiles: string[]): Promise<MessageBundle> {\n    const {files, ngModules} = analyzeAndValidateNgModules(\n        rootFiles, this.host, this.staticSymbolResolver, this.metadataResolver);\n    return Promise\n        .all(ngModules.map(\n            ngModule => this.metadataResolver.loadNgModuleDirectiveAndPipeMetadata(\n                ngModule.type.reference, false)))\n        .then(() => {\n          const errors: ParseError[] = [];\n\n          files.forEach(file => {\n            const compMetas: CompileDirectiveMetadata[] = [];\n            file.directives.forEach(directiveType => {\n              const dirMeta = this.metadataResolver.getDirectiveMetadata(directiveType);\n              if (dirMeta && dirMeta.isComponent) {\n                compMetas.push(dirMeta);\n              }\n            });\n            compMetas.forEach(compMeta => {\n              const html = compMeta.template !.template !;\n              // Template URL points to either an HTML or TS file depending on\n              // whether the file is used with `templateUrl:` or `template:`,\n              // respectively.\n              const templateUrl = compMeta.template !.templateUrl!;\n              const interpolationConfig =\n                  InterpolationConfig.fromArray(compMeta.template !.interpolation);\n              errors.push(...this.messageBundle.updateFromTemplate(\n                  html, templateUrl, interpolationConfig)!);\n            });\n          });\n\n          if (errors.length) {\n            throw new Error(errors.map(e => e.toString()).join('\\n'));\n          }\n\n          return this.messageBundle;\n        });\n  }\n\n  static create(host: ExtractorHost, locale: string|null):\n      {extractor: Extractor, staticReflector: StaticReflector} {\n    const htmlParser = new HtmlParser();\n\n    const urlResolver = createAotUrlResolver(host);\n    const symbolCache = new StaticSymbolCache();\n    const summaryResolver = new AotSummaryResolver(host, symbolCache);\n    const staticSymbolResolver = new StaticSymbolResolver(host, symbolCache, summaryResolver);\n    const staticReflector = new StaticReflector(summaryResolver, staticSymbolResolver);\n\n    const config =\n        new CompilerConfig({defaultEncapsulation: ViewEncapsulation.Emulated, useJit: false});\n\n    const normalizer = new DirectiveNormalizer(\n        {get: (url: string) => host.loadResource(url)}, urlResolver, htmlParser, config);\n    const elementSchemaRegistry = new DomElementSchemaRegistry();\n    const resolver = new CompileMetadataResolver(\n        config, htmlParser, new NgModuleResolver(staticReflector),\n        new DirectiveResolver(staticReflector), new PipeResolver(staticReflector), summaryResolver,\n        elementSchemaRegistry, normalizer, console, symbolCache, staticReflector);\n\n    // TODO(vicb): implicit tags & attributes\n    const messageBundle = new MessageBundle(htmlParser, [], {}, locale);\n\n    const extractor = new Extractor(host, staticSymbolResolver, messageBundle, resolver);\n    return {extractor, staticReflector};\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}