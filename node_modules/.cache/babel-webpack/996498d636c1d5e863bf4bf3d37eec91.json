{"ast":null,"code":"/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n(function (factory) {\n  if (typeof module === \"object\" && typeof module.exports === \"object\") {\n    var v = factory(require, exports);\n    if (v !== undefined) module.exports = v;\n  } else if (typeof define === \"function\" && define.amd) {\n    define(\"@angular/compiler-cli/src/ngtsc/logging/src/logger\", [\"require\", \"exports\"], factory);\n  }\n})(function (require, exports) {\n  \"use strict\";\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.LogLevel = void 0;\n  var LogLevel;\n\n  (function (LogLevel) {\n    LogLevel[LogLevel[\"debug\"] = 0] = \"debug\";\n    LogLevel[LogLevel[\"info\"] = 1] = \"info\";\n    LogLevel[LogLevel[\"warn\"] = 2] = \"warn\";\n    LogLevel[LogLevel[\"error\"] = 3] = \"error\";\n  })(LogLevel = exports.LogLevel || (exports.LogLevel = {}));\n});","map":{"version":3,"sources":["../../../../../../../../../packages/compiler-cli/src/ngtsc/logging/src/logger.ts"],"names":[],"mappings":"AAAA;;;;;;AAMG;;;;;;;;;;;;;;;AAcH,MAAY,QAAZ;;AAAA,GAAA,UAAY,QAAZ,EAAoB;AAClB,IAAA,QAAA,CAAA,QAAA,CAAA,OAAA,CAAA,GAAA,CAAA,CAAA,GAAA,OAAA;AACA,IAAA,QAAA,CAAA,QAAA,CAAA,MAAA,CAAA,GAAA,CAAA,CAAA,GAAA,MAAA;AACA,IAAA,QAAA,CAAA,QAAA,CAAA,MAAA,CAAA,GAAA,CAAA,CAAA,GAAA,MAAA;AACA,IAAA,QAAA,CAAA,QAAA,CAAA,OAAA,CAAA,GAAA,CAAA,CAAA,GAAA,OAAA;AACD,GALD,EAAY,QAAQ,GAAR,OAAA,CAAA,QAAA,KAAA,OAAA,CAAA,QAAA,GAAQ,EAAR,CAAZ","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Implement this interface if you want to provide different logging\n * output from the standard ConsoleLogger.\n */\nexport interface Logger {\n  level: LogLevel;\n  debug(...args: string[]): void;\n  info(...args: string[]): void;\n  warn(...args: string[]): void;\n  error(...args: string[]): void;\n}\n\nexport enum LogLevel {\n  debug,\n  info,\n  warn,\n  error,\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}