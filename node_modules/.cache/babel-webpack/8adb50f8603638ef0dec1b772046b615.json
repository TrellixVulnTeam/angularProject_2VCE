{"ast":null,"code":"(function (factory) {\n  if (typeof module === \"object\" && typeof module.exports === \"object\") {\n    var v = factory(require, exports);\n    if (v !== undefined) module.exports = v;\n  } else if (typeof define === \"function\" && define.amd) {\n    define(\"@angular/compiler-cli/src/ngtsc/file_system/src/invalid_file_system\", [\"require\", \"exports\"], factory);\n  }\n})(function (require, exports) {\n  \"use strict\";\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.InvalidFileSystem = void 0;\n  /**\n   * The default `FileSystem` that will always fail.\n   *\n   * This is a way of ensuring that the developer consciously chooses and\n   * configures the `FileSystem` before using it; particularly important when\n   * considering static functions like `absoluteFrom()` which rely on\n   * the `FileSystem` under the hood.\n   */\n\n  var InvalidFileSystem =\n  /** @class */\n  function () {\n    function InvalidFileSystem() {}\n\n    InvalidFileSystem.prototype.exists = function (path) {\n      throw makeError();\n    };\n\n    InvalidFileSystem.prototype.readFile = function (path) {\n      throw makeError();\n    };\n\n    InvalidFileSystem.prototype.readFileBuffer = function (path) {\n      throw makeError();\n    };\n\n    InvalidFileSystem.prototype.writeFile = function (path, data, exclusive) {\n      throw makeError();\n    };\n\n    InvalidFileSystem.prototype.removeFile = function (path) {\n      throw makeError();\n    };\n\n    InvalidFileSystem.prototype.symlink = function (target, path) {\n      throw makeError();\n    };\n\n    InvalidFileSystem.prototype.readdir = function (path) {\n      throw makeError();\n    };\n\n    InvalidFileSystem.prototype.lstat = function (path) {\n      throw makeError();\n    };\n\n    InvalidFileSystem.prototype.stat = function (path) {\n      throw makeError();\n    };\n\n    InvalidFileSystem.prototype.pwd = function () {\n      throw makeError();\n    };\n\n    InvalidFileSystem.prototype.chdir = function (path) {\n      throw makeError();\n    };\n\n    InvalidFileSystem.prototype.extname = function (path) {\n      throw makeError();\n    };\n\n    InvalidFileSystem.prototype.copyFile = function (from, to) {\n      throw makeError();\n    };\n\n    InvalidFileSystem.prototype.moveFile = function (from, to) {\n      throw makeError();\n    };\n\n    InvalidFileSystem.prototype.ensureDir = function (path) {\n      throw makeError();\n    };\n\n    InvalidFileSystem.prototype.removeDeep = function (path) {\n      throw makeError();\n    };\n\n    InvalidFileSystem.prototype.isCaseSensitive = function () {\n      throw makeError();\n    };\n\n    InvalidFileSystem.prototype.resolve = function () {\n      var paths = [];\n\n      for (var _i = 0; _i < arguments.length; _i++) {\n        paths[_i] = arguments[_i];\n      }\n\n      throw makeError();\n    };\n\n    InvalidFileSystem.prototype.dirname = function (file) {\n      throw makeError();\n    };\n\n    InvalidFileSystem.prototype.join = function (basePath) {\n      var paths = [];\n\n      for (var _i = 1; _i < arguments.length; _i++) {\n        paths[_i - 1] = arguments[_i];\n      }\n\n      throw makeError();\n    };\n\n    InvalidFileSystem.prototype.isRoot = function (path) {\n      throw makeError();\n    };\n\n    InvalidFileSystem.prototype.isRooted = function (path) {\n      throw makeError();\n    };\n\n    InvalidFileSystem.prototype.relative = function (from, to) {\n      throw makeError();\n    };\n\n    InvalidFileSystem.prototype.basename = function (filePath, extension) {\n      throw makeError();\n    };\n\n    InvalidFileSystem.prototype.realpath = function (filePath) {\n      throw makeError();\n    };\n\n    InvalidFileSystem.prototype.getDefaultLibLocation = function () {\n      throw makeError();\n    };\n\n    InvalidFileSystem.prototype.normalize = function (path) {\n      throw makeError();\n    };\n\n    return InvalidFileSystem;\n  }();\n\n  exports.InvalidFileSystem = InvalidFileSystem;\n\n  function makeError() {\n    return new Error('FileSystem has not been configured. Please call `setFileSystem()` before calling this method.');\n  }\n});","map":{"version":3,"sources":["../../../../../../../../../packages/compiler-cli/src/ngtsc/file_system/src/invalid_file_system.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AbsoluteFsPath, FileStats, FileSystem, PathSegment, PathString} from './types';\n\n/**\n * The default `FileSystem` that will always fail.\n *\n * This is a way of ensuring that the developer consciously chooses and\n * configures the `FileSystem` before using it; particularly important when\n * considering static functions like `absoluteFrom()` which rely on\n * the `FileSystem` under the hood.\n */\nexport class InvalidFileSystem implements FileSystem {\n  exists(path: AbsoluteFsPath): boolean {\n    throw makeError();\n  }\n  readFile(path: AbsoluteFsPath): string {\n    throw makeError();\n  }\n  readFileBuffer(path: AbsoluteFsPath): Uint8Array {\n    throw makeError();\n  }\n  writeFile(path: AbsoluteFsPath, data: string|Uint8Array, exclusive?: boolean): void {\n    throw makeError();\n  }\n  removeFile(path: AbsoluteFsPath): void {\n    throw makeError();\n  }\n  symlink(target: AbsoluteFsPath, path: AbsoluteFsPath): void {\n    throw makeError();\n  }\n  readdir(path: AbsoluteFsPath): PathSegment[] {\n    throw makeError();\n  }\n  lstat(path: AbsoluteFsPath): FileStats {\n    throw makeError();\n  }\n  stat(path: AbsoluteFsPath): FileStats {\n    throw makeError();\n  }\n  pwd(): AbsoluteFsPath {\n    throw makeError();\n  }\n  chdir(path: AbsoluteFsPath): void {\n    throw makeError();\n  }\n  extname(path: AbsoluteFsPath|PathSegment): string {\n    throw makeError();\n  }\n  copyFile(from: AbsoluteFsPath, to: AbsoluteFsPath): void {\n    throw makeError();\n  }\n  moveFile(from: AbsoluteFsPath, to: AbsoluteFsPath): void {\n    throw makeError();\n  }\n  ensureDir(path: AbsoluteFsPath): void {\n    throw makeError();\n  }\n  removeDeep(path: AbsoluteFsPath): void {\n    throw makeError();\n  }\n  isCaseSensitive(): boolean {\n    throw makeError();\n  }\n  resolve(...paths: string[]): AbsoluteFsPath {\n    throw makeError();\n  }\n  dirname<T extends PathString>(file: T): T {\n    throw makeError();\n  }\n  join<T extends PathString>(basePath: T, ...paths: string[]): T {\n    throw makeError();\n  }\n  isRoot(path: AbsoluteFsPath): boolean {\n    throw makeError();\n  }\n  isRooted(path: string): boolean {\n    throw makeError();\n  }\n  relative<T extends PathString>(from: T, to: T): PathSegment|AbsoluteFsPath {\n    throw makeError();\n  }\n  basename(filePath: string, extension?: string): PathSegment {\n    throw makeError();\n  }\n  realpath(filePath: AbsoluteFsPath): AbsoluteFsPath {\n    throw makeError();\n  }\n  getDefaultLibLocation(): AbsoluteFsPath {\n    throw makeError();\n  }\n  normalize<T extends PathString>(path: T): T {\n    throw makeError();\n  }\n}\n\nfunction makeError() {\n  return new Error(\n      'FileSystem has not been configured. Please call `setFileSystem()` before calling this method.');\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}