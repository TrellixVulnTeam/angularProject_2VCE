{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nvar _classCallCheck = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/createClass\");\n\nvar path = require(\"path\");\n\nvar ParserHelpers = require(\"./ParserHelpers\");\n\nvar ConstDependency = require(\"./dependencies/ConstDependency\");\n\nvar NullFactory = require(\"./NullFactory\");\n\nvar NodeStuffPlugin = /*#__PURE__*/function () {\n  function NodeStuffPlugin(options) {\n    _classCallCheck(this, NodeStuffPlugin);\n\n    this.options = options;\n  }\n\n  _createClass(NodeStuffPlugin, [{\n    key: \"apply\",\n    value: function apply(compiler) {\n      var options = this.options;\n      compiler.hooks.compilation.tap(\"NodeStuffPlugin\", function (compilation, _ref) {\n        var normalModuleFactory = _ref.normalModuleFactory;\n        compilation.dependencyFactories.set(ConstDependency, new NullFactory());\n        compilation.dependencyTemplates.set(ConstDependency, new ConstDependency.Template());\n\n        var handler = function handler(parser, parserOptions) {\n          if (parserOptions.node === false) return;\n          var localOptions = options;\n\n          if (parserOptions.node) {\n            localOptions = Object.assign({}, localOptions, parserOptions.node);\n          }\n\n          var setConstant = function setConstant(expressionName, value) {\n            parser.hooks.expression.for(expressionName).tap(\"NodeStuffPlugin\", function () {\n              parser.state.current.addVariable(expressionName, JSON.stringify(value));\n              return true;\n            });\n          };\n\n          var setModuleConstant = function setModuleConstant(expressionName, fn) {\n            parser.hooks.expression.for(expressionName).tap(\"NodeStuffPlugin\", function () {\n              parser.state.current.addVariable(expressionName, JSON.stringify(fn(parser.state.module)));\n              return true;\n            });\n          };\n\n          var context = compiler.context;\n\n          if (localOptions.__filename) {\n            if (localOptions.__filename === \"mock\") {\n              setConstant(\"__filename\", \"/index.js\");\n            } else {\n              setModuleConstant(\"__filename\", function (module) {\n                return path.relative(context, module.resource);\n              });\n            }\n\n            parser.hooks.evaluateIdentifier.for(\"__filename\").tap(\"NodeStuffPlugin\", function (expr) {\n              if (!parser.state.module) return;\n              var resource = parser.state.module.resource;\n              var i = resource.indexOf(\"?\");\n              return ParserHelpers.evaluateToString(i < 0 ? resource : resource.substr(0, i))(expr);\n            });\n          }\n\n          if (localOptions.__dirname) {\n            if (localOptions.__dirname === \"mock\") {\n              setConstant(\"__dirname\", \"/\");\n            } else {\n              setModuleConstant(\"__dirname\", function (module) {\n                return path.relative(context, module.context);\n              });\n            }\n\n            parser.hooks.evaluateIdentifier.for(\"__dirname\").tap(\"NodeStuffPlugin\", function (expr) {\n              if (!parser.state.module) return;\n              return ParserHelpers.evaluateToString(parser.state.module.context)(expr);\n            });\n          }\n\n          parser.hooks.expression.for(\"require.extensions\").tap(\"NodeStuffPlugin\", ParserHelpers.expressionIsUnsupported(parser, \"require.extensions is not supported by webpack. Use a loader instead.\"));\n        };\n\n        normalModuleFactory.hooks.parser.for(\"javascript/auto\").tap(\"NodeStuffPlugin\", handler);\n        normalModuleFactory.hooks.parser.for(\"javascript/dynamic\").tap(\"NodeStuffPlugin\", handler);\n      });\n    }\n  }]);\n\n  return NodeStuffPlugin;\n}();\n\nmodule.exports = NodeStuffPlugin;","map":{"version":3,"sources":["/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/webpack/lib/NodeStuffPlugin.js"],"names":["path","require","ParserHelpers","ConstDependency","NullFactory","NodeStuffPlugin","options","compiler","hooks","compilation","tap","normalModuleFactory","dependencyFactories","set","dependencyTemplates","Template","handler","parser","parserOptions","node","localOptions","Object","assign","setConstant","expressionName","value","expression","for","state","current","addVariable","JSON","stringify","setModuleConstant","fn","module","context","__filename","relative","resource","evaluateIdentifier","expr","i","indexOf","evaluateToString","substr","__dirname","expressionIsUnsupported","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;;;;;AAEA,IAAMA,IAAI,GAAGC,OAAO,CAAC,MAAD,CAApB;;AACA,IAAMC,aAAa,GAAGD,OAAO,CAAC,iBAAD,CAA7B;;AACA,IAAME,eAAe,GAAGF,OAAO,CAAC,gCAAD,CAA/B;;AAEA,IAAMG,WAAW,GAAGH,OAAO,CAAC,eAAD,CAA3B;;IAEMI,e;AACL,2BAAYC,OAAZ,EAAqB;AAAA;;AACpB,SAAKA,OAAL,GAAeA,OAAf;AACA;;;;WAED,eAAMC,QAAN,EAAgB;AACf,UAAMD,OAAO,GAAG,KAAKA,OAArB;AACAC,MAAAA,QAAQ,CAACC,KAAT,CAAeC,WAAf,CAA2BC,GAA3B,CACC,iBADD,EAEC,UAACD,WAAD,QAA0C;AAAA,YAA1BE,mBAA0B,QAA1BA,mBAA0B;AACzCF,QAAAA,WAAW,CAACG,mBAAZ,CAAgCC,GAAhC,CAAoCV,eAApC,EAAqD,IAAIC,WAAJ,EAArD;AACAK,QAAAA,WAAW,CAACK,mBAAZ,CAAgCD,GAAhC,CACCV,eADD,EAEC,IAAIA,eAAe,CAACY,QAApB,EAFD;;AAKA,YAAMC,OAAO,GAAG,SAAVA,OAAU,CAACC,MAAD,EAASC,aAAT,EAA2B;AAC1C,cAAIA,aAAa,CAACC,IAAd,KAAuB,KAA3B,EAAkC;AAElC,cAAIC,YAAY,GAAGd,OAAnB;;AACA,cAAIY,aAAa,CAACC,IAAlB,EAAwB;AACvBC,YAAAA,YAAY,GAAGC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBF,YAAlB,EAAgCF,aAAa,CAACC,IAA9C,CAAf;AACA;;AAED,cAAMI,WAAW,GAAG,SAAdA,WAAc,CAACC,cAAD,EAAiBC,KAAjB,EAA2B;AAC9CR,YAAAA,MAAM,CAACT,KAAP,CAAakB,UAAb,CACEC,GADF,CACMH,cADN,EAEEd,GAFF,CAEM,iBAFN,EAEyB,YAAM;AAC7BO,cAAAA,MAAM,CAACW,KAAP,CAAaC,OAAb,CAAqBC,WAArB,CACCN,cADD,EAECO,IAAI,CAACC,SAAL,CAAeP,KAAf,CAFD;AAIA,qBAAO,IAAP;AACA,aARF;AASA,WAVD;;AAYA,cAAMQ,iBAAiB,GAAG,SAApBA,iBAAoB,CAACT,cAAD,EAAiBU,EAAjB,EAAwB;AACjDjB,YAAAA,MAAM,CAACT,KAAP,CAAakB,UAAb,CACEC,GADF,CACMH,cADN,EAEEd,GAFF,CAEM,iBAFN,EAEyB,YAAM;AAC7BO,cAAAA,MAAM,CAACW,KAAP,CAAaC,OAAb,CAAqBC,WAArB,CACCN,cADD,EAECO,IAAI,CAACC,SAAL,CAAeE,EAAE,CAACjB,MAAM,CAACW,KAAP,CAAaO,MAAd,CAAjB,CAFD;AAIA,qBAAO,IAAP;AACA,aARF;AASA,WAVD;;AAWA,cAAMC,OAAO,GAAG7B,QAAQ,CAAC6B,OAAzB;;AACA,cAAIhB,YAAY,CAACiB,UAAjB,EAA6B;AAC5B,gBAAIjB,YAAY,CAACiB,UAAb,KAA4B,MAAhC,EAAwC;AACvCd,cAAAA,WAAW,CAAC,YAAD,EAAe,WAAf,CAAX;AACA,aAFD,MAEO;AACNU,cAAAA,iBAAiB,CAAC,YAAD,EAAe,UAAAE,MAAM;AAAA,uBACrCnC,IAAI,CAACsC,QAAL,CAAcF,OAAd,EAAuBD,MAAM,CAACI,QAA9B,CADqC;AAAA,eAArB,CAAjB;AAGA;;AACDtB,YAAAA,MAAM,CAACT,KAAP,CAAagC,kBAAb,CACEb,GADF,CACM,YADN,EAEEjB,GAFF,CAEM,iBAFN,EAEyB,UAAA+B,IAAI,EAAI;AAC/B,kBAAI,CAACxB,MAAM,CAACW,KAAP,CAAaO,MAAlB,EAA0B;AAC1B,kBAAMI,QAAQ,GAAGtB,MAAM,CAACW,KAAP,CAAaO,MAAb,CAAoBI,QAArC;AACA,kBAAMG,CAAC,GAAGH,QAAQ,CAACI,OAAT,CAAiB,GAAjB,CAAV;AACA,qBAAOzC,aAAa,CAAC0C,gBAAd,CACNF,CAAC,GAAG,CAAJ,GAAQH,QAAR,GAAmBA,QAAQ,CAACM,MAAT,CAAgB,CAAhB,EAAmBH,CAAnB,CADb,EAELD,IAFK,CAAP;AAGA,aATF;AAUA;;AACD,cAAIrB,YAAY,CAAC0B,SAAjB,EAA4B;AAC3B,gBAAI1B,YAAY,CAAC0B,SAAb,KAA2B,MAA/B,EAAuC;AACtCvB,cAAAA,WAAW,CAAC,WAAD,EAAc,GAAd,CAAX;AACA,aAFD,MAEO;AACNU,cAAAA,iBAAiB,CAAC,WAAD,EAAc,UAAAE,MAAM;AAAA,uBACpCnC,IAAI,CAACsC,QAAL,CAAcF,OAAd,EAAuBD,MAAM,CAACC,OAA9B,CADoC;AAAA,eAApB,CAAjB;AAGA;;AACDnB,YAAAA,MAAM,CAACT,KAAP,CAAagC,kBAAb,CACEb,GADF,CACM,WADN,EAEEjB,GAFF,CAEM,iBAFN,EAEyB,UAAA+B,IAAI,EAAI;AAC/B,kBAAI,CAACxB,MAAM,CAACW,KAAP,CAAaO,MAAlB,EAA0B;AAC1B,qBAAOjC,aAAa,CAAC0C,gBAAd,CACN3B,MAAM,CAACW,KAAP,CAAaO,MAAb,CAAoBC,OADd,EAELK,IAFK,CAAP;AAGA,aAPF;AAQA;;AACDxB,UAAAA,MAAM,CAACT,KAAP,CAAakB,UAAb,CACEC,GADF,CACM,oBADN,EAEEjB,GAFF,CAGE,iBAHF,EAIER,aAAa,CAAC6C,uBAAd,CACC9B,MADD,EAEC,uEAFD,CAJF;AASA,SA7ED;;AA+EAN,QAAAA,mBAAmB,CAACH,KAApB,CAA0BS,MAA1B,CACEU,GADF,CACM,iBADN,EAEEjB,GAFF,CAEM,iBAFN,EAEyBM,OAFzB;AAGAL,QAAAA,mBAAmB,CAACH,KAApB,CAA0BS,MAA1B,CACEU,GADF,CACM,oBADN,EAEEjB,GAFF,CAEM,iBAFN,EAEyBM,OAFzB;AAGA,OA9FF;AAgGA;;;;;;AAEFmB,MAAM,CAACa,OAAP,GAAiB3C,eAAjB","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst path = require(\"path\");\nconst ParserHelpers = require(\"./ParserHelpers\");\nconst ConstDependency = require(\"./dependencies/ConstDependency\");\n\nconst NullFactory = require(\"./NullFactory\");\n\nclass NodeStuffPlugin {\n\tconstructor(options) {\n\t\tthis.options = options;\n\t}\n\n\tapply(compiler) {\n\t\tconst options = this.options;\n\t\tcompiler.hooks.compilation.tap(\n\t\t\t\"NodeStuffPlugin\",\n\t\t\t(compilation, { normalModuleFactory }) => {\n\t\t\t\tcompilation.dependencyFactories.set(ConstDependency, new NullFactory());\n\t\t\t\tcompilation.dependencyTemplates.set(\n\t\t\t\t\tConstDependency,\n\t\t\t\t\tnew ConstDependency.Template()\n\t\t\t\t);\n\n\t\t\t\tconst handler = (parser, parserOptions) => {\n\t\t\t\t\tif (parserOptions.node === false) return;\n\n\t\t\t\t\tlet localOptions = options;\n\t\t\t\t\tif (parserOptions.node) {\n\t\t\t\t\t\tlocalOptions = Object.assign({}, localOptions, parserOptions.node);\n\t\t\t\t\t}\n\n\t\t\t\t\tconst setConstant = (expressionName, value) => {\n\t\t\t\t\t\tparser.hooks.expression\n\t\t\t\t\t\t\t.for(expressionName)\n\t\t\t\t\t\t\t.tap(\"NodeStuffPlugin\", () => {\n\t\t\t\t\t\t\t\tparser.state.current.addVariable(\n\t\t\t\t\t\t\t\t\texpressionName,\n\t\t\t\t\t\t\t\t\tJSON.stringify(value)\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t});\n\t\t\t\t\t};\n\n\t\t\t\t\tconst setModuleConstant = (expressionName, fn) => {\n\t\t\t\t\t\tparser.hooks.expression\n\t\t\t\t\t\t\t.for(expressionName)\n\t\t\t\t\t\t\t.tap(\"NodeStuffPlugin\", () => {\n\t\t\t\t\t\t\t\tparser.state.current.addVariable(\n\t\t\t\t\t\t\t\t\texpressionName,\n\t\t\t\t\t\t\t\t\tJSON.stringify(fn(parser.state.module))\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t});\n\t\t\t\t\t};\n\t\t\t\t\tconst context = compiler.context;\n\t\t\t\t\tif (localOptions.__filename) {\n\t\t\t\t\t\tif (localOptions.__filename === \"mock\") {\n\t\t\t\t\t\t\tsetConstant(\"__filename\", \"/index.js\");\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tsetModuleConstant(\"__filename\", module =>\n\t\t\t\t\t\t\t\tpath.relative(context, module.resource)\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tparser.hooks.evaluateIdentifier\n\t\t\t\t\t\t\t.for(\"__filename\")\n\t\t\t\t\t\t\t.tap(\"NodeStuffPlugin\", expr => {\n\t\t\t\t\t\t\t\tif (!parser.state.module) return;\n\t\t\t\t\t\t\t\tconst resource = parser.state.module.resource;\n\t\t\t\t\t\t\t\tconst i = resource.indexOf(\"?\");\n\t\t\t\t\t\t\t\treturn ParserHelpers.evaluateToString(\n\t\t\t\t\t\t\t\t\ti < 0 ? resource : resource.substr(0, i)\n\t\t\t\t\t\t\t\t)(expr);\n\t\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t\tif (localOptions.__dirname) {\n\t\t\t\t\t\tif (localOptions.__dirname === \"mock\") {\n\t\t\t\t\t\t\tsetConstant(\"__dirname\", \"/\");\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tsetModuleConstant(\"__dirname\", module =>\n\t\t\t\t\t\t\t\tpath.relative(context, module.context)\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tparser.hooks.evaluateIdentifier\n\t\t\t\t\t\t\t.for(\"__dirname\")\n\t\t\t\t\t\t\t.tap(\"NodeStuffPlugin\", expr => {\n\t\t\t\t\t\t\t\tif (!parser.state.module) return;\n\t\t\t\t\t\t\t\treturn ParserHelpers.evaluateToString(\n\t\t\t\t\t\t\t\t\tparser.state.module.context\n\t\t\t\t\t\t\t\t)(expr);\n\t\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t\tparser.hooks.expression\n\t\t\t\t\t\t.for(\"require.extensions\")\n\t\t\t\t\t\t.tap(\n\t\t\t\t\t\t\t\"NodeStuffPlugin\",\n\t\t\t\t\t\t\tParserHelpers.expressionIsUnsupported(\n\t\t\t\t\t\t\t\tparser,\n\t\t\t\t\t\t\t\t\"require.extensions is not supported by webpack. Use a loader instead.\"\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t);\n\t\t\t\t};\n\n\t\t\t\tnormalModuleFactory.hooks.parser\n\t\t\t\t\t.for(\"javascript/auto\")\n\t\t\t\t\t.tap(\"NodeStuffPlugin\", handler);\n\t\t\t\tnormalModuleFactory.hooks.parser\n\t\t\t\t\t.for(\"javascript/dynamic\")\n\t\t\t\t\t.tap(\"NodeStuffPlugin\", handler);\n\t\t\t}\n\t\t);\n\t}\n}\nmodule.exports = NodeStuffPlugin;\n"]},"metadata":{},"sourceType":"script"}