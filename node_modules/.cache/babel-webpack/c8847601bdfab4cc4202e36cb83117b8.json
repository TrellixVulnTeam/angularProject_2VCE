{"ast":null,"code":"'use strict';\n\nvar mm = require('minimatch');\n\nvar braces = require('braces');\n\nvar PatternUtils = require('./utils/pattern-utils');\n\nvar helper = require('./helper');\n\nvar log = require('./logger').create('watcher');\n\nvar DIR_SEP = require('path').sep;\n\nfunction watchPatterns(patterns, watcher) {\n  var expandedPatterns = [];\n  patterns.map(function (pattern) {\n    // expand ['a/{b,c}'] to ['a/b', 'a/c']\n    expandedPatterns = expandedPatterns.concat(braces.expand(pattern, {\n      keepEscaping: true\n    }));\n  });\n  expandedPatterns.map(PatternUtils.getBaseDir).filter(function (path, index, paths) {\n    return paths.indexOf(path) === index;\n  }) // filter unique values\n  .forEach(function (path, index, paths) {\n    if (!paths.some(function (p) {\n      return path.startsWith(p + DIR_SEP);\n    })) {\n      watcher.add(path);\n      log.debug(\"Watching \\\"\".concat(path, \"\\\"\"));\n    }\n  });\n}\n\nfunction checkAnyPathMatch(patterns, path) {\n  return patterns.some(function (pattern) {\n    return mm(path, pattern, {\n      dot: true\n    });\n  });\n}\n\nfunction createIgnore(patterns, excludes) {\n  return function (path, stat) {\n    if (stat && !stat.isDirectory()) {\n      return !checkAnyPathMatch(patterns, path) || checkAnyPathMatch(excludes, path);\n    } else {\n      return false;\n    }\n  };\n}\n\nfunction getWatchedPatterns(patterns) {\n  return patterns.filter(function (pattern) {\n    return pattern.watched;\n  }).map(function (pattern) {\n    return pattern.pattern;\n  });\n}\n\nfunction watch(patterns, excludes, fileList, usePolling, emitter) {\n  var watchedPatterns = getWatchedPatterns(patterns); // Lazy-load 'chokidar' to make the dependency optional. This is desired when\n  // third-party watchers are in use.\n\n  var chokidar = require('chokidar');\n\n  var watcher = new chokidar.FSWatcher({\n    usePolling: usePolling,\n    ignorePermissionErrors: true,\n    ignoreInitial: true,\n    ignored: createIgnore(watchedPatterns, excludes)\n  });\n  watchPatterns(watchedPatterns, watcher);\n  watcher.on('add', function (path) {\n    return fileList.addFile(helper.normalizeWinPath(path));\n  }).on('change', function (path) {\n    return fileList.changeFile(helper.normalizeWinPath(path));\n  }).on('unlink', function (path) {\n    return fileList.removeFile(helper.normalizeWinPath(path));\n  }).on('error', log.debug.bind(log));\n  emitter.on('exit', function (done) {\n    watcher.close();\n    done();\n  });\n  return watcher;\n}\n\nwatch.$inject = ['config.files', 'config.exclude', 'fileList', 'config.usePolling', 'emitter'];\nmodule.exports = watch;","map":{"version":3,"sources":["/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/karma/lib/watcher.js"],"names":["mm","require","braces","PatternUtils","helper","log","create","DIR_SEP","sep","watchPatterns","patterns","watcher","expandedPatterns","map","pattern","concat","expand","keepEscaping","getBaseDir","filter","path","index","paths","indexOf","forEach","some","p","startsWith","add","debug","checkAnyPathMatch","dot","createIgnore","excludes","stat","isDirectory","getWatchedPatterns","watched","watch","fileList","usePolling","emitter","watchedPatterns","chokidar","FSWatcher","ignorePermissionErrors","ignoreInitial","ignored","on","addFile","normalizeWinPath","changeFile","removeFile","bind","done","close","$inject","module","exports"],"mappings":"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","sourcesContent":["'use strict'\n\nconst mm = require('minimatch')\nconst braces = require('braces')\nconst PatternUtils = require('./utils/pattern-utils')\n\nconst helper = require('./helper')\nconst log = require('./logger').create('watcher')\n\nconst DIR_SEP = require('path').sep\n\nfunction watchPatterns (patterns, watcher) {\n  let expandedPatterns = []\n  patterns.map((pattern) => {\n    // expand ['a/{b,c}'] to ['a/b', 'a/c']\n    expandedPatterns = expandedPatterns.concat(braces.expand(pattern, { keepEscaping: true }))\n  })\n  expandedPatterns\n    .map(PatternUtils.getBaseDir)\n    .filter((path, index, paths) => paths.indexOf(path) === index) // filter unique values\n    .forEach((path, index, paths) => {\n      if (!paths.some((p) => path.startsWith(p + DIR_SEP))) {\n        watcher.add(path)\n        log.debug(`Watching \"${path}\"`)\n      }\n    })\n}\n\nfunction checkAnyPathMatch (patterns, path) {\n  return patterns.some((pattern) => mm(path, pattern, { dot: true }))\n}\n\nfunction createIgnore (patterns, excludes) {\n  return function (path, stat) {\n    if (stat && !stat.isDirectory()) {\n      return !checkAnyPathMatch(patterns, path) || checkAnyPathMatch(excludes, path)\n    } else {\n      return false\n    }\n  }\n}\n\nfunction getWatchedPatterns (patterns) {\n  return patterns\n    .filter((pattern) => pattern.watched)\n    .map((pattern) => pattern.pattern)\n}\n\nfunction watch (patterns, excludes, fileList, usePolling, emitter) {\n  const watchedPatterns = getWatchedPatterns(patterns)\n  // Lazy-load 'chokidar' to make the dependency optional. This is desired when\n  // third-party watchers are in use.\n  const chokidar = require('chokidar')\n  const watcher = new chokidar.FSWatcher({\n    usePolling: usePolling,\n    ignorePermissionErrors: true,\n    ignoreInitial: true,\n    ignored: createIgnore(watchedPatterns, excludes)\n  })\n\n  watchPatterns(watchedPatterns, watcher)\n\n  watcher\n    .on('add', (path) => fileList.addFile(helper.normalizeWinPath(path)))\n    .on('change', (path) => fileList.changeFile(helper.normalizeWinPath(path)))\n    .on('unlink', (path) => fileList.removeFile(helper.normalizeWinPath(path)))\n    .on('error', log.debug.bind(log))\n\n  emitter.on('exit', (done) => {\n    watcher.close()\n    done()\n  })\n\n  return watcher\n}\n\nwatch.$inject = [\n  'config.files',\n  'config.exclude',\n  'fileList',\n  'config.usePolling',\n  'emitter'\n]\n\nmodule.exports = watch\n"]},"metadata":{},"sourceType":"script"}