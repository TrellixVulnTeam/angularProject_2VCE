{"ast":null,"code":"/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n(function (factory) {\n  if (typeof module === \"object\" && typeof module.exports === \"object\") {\n    var v = factory(require, exports);\n    if (v !== undefined) module.exports = v;\n  } else if (typeof define === \"function\" && define.amd) {\n    define(\"@angular/compiler-cli/src/ngtsc/indexer/src/transform\", [\"require\", \"exports\", \"@angular/compiler\", \"@angular/compiler-cli/src/ngtsc/indexer/src/template\"], factory);\n  }\n})(function (require, exports) {\n  \"use strict\";\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.generateAnalysis = void 0;\n\n  var compiler_1 = require(\"@angular/compiler\");\n\n  var template_1 = require(\"@angular/compiler-cli/src/ngtsc/indexer/src/template\");\n  /**\n   * Generates `IndexedComponent` entries from a `IndexingContext`, which has information\n   * about components discovered in the program registered in it.\n   *\n   * The context must be populated before `generateAnalysis` is called.\n   */\n\n\n  function generateAnalysis(context) {\n    var analysis = new Map();\n    context.components.forEach(function (_a) {\n      var declaration = _a.declaration,\n          selector = _a.selector,\n          boundTemplate = _a.boundTemplate,\n          templateMeta = _a.templateMeta;\n      var name = declaration.name.getText();\n      var usedComponents = new Set();\n      var usedDirs = boundTemplate.getUsedDirectives();\n      usedDirs.forEach(function (dir) {\n        if (dir.isComponent) {\n          usedComponents.add(dir.ref.node);\n        }\n      }); // Get source files for the component and the template. If the template is inline, its source\n      // file is the component's.\n\n      var componentFile = new compiler_1.ParseSourceFile(declaration.getSourceFile().getFullText(), declaration.getSourceFile().fileName);\n      var templateFile;\n\n      if (templateMeta.isInline) {\n        templateFile = componentFile;\n      } else {\n        templateFile = templateMeta.file;\n      }\n\n      analysis.set(declaration, {\n        name: name,\n        selector: selector,\n        file: componentFile,\n        template: {\n          identifiers: template_1.getTemplateIdentifiers(boundTemplate),\n          usedComponents: usedComponents,\n          isInline: templateMeta.isInline,\n          file: templateFile\n        }\n      });\n    });\n    return analysis;\n  }\n\n  exports.generateAnalysis = generateAnalysis;\n});","map":{"version":3,"sources":["../../../../../../../../../packages/compiler-cli/src/ngtsc/indexer/src/transform.ts"],"names":[],"mappings":"AAAA;;;;;;AAMG;;;;;;;;;;;;;;;;AAEH,MAAA,UAAA,GAAA,OAAA,CAAA,mBAAA,CAAA;;AAIA,MAAA,UAAA,GAAA,OAAA,CAAA,sDAAA,CAAA;AAEA;;;;;AAKG;;;AACH,WAAgB,gBAAhB,CAAiC,OAAjC,EAAyD;AACvD,QAAM,QAAQ,GAAG,IAAI,GAAJ,EAAjB;AAEA,IAAA,OAAO,CAAC,UAAR,CAAmB,OAAnB,CAA2B,UAAC,EAAD,EAAqD;UAAnD,WAAW,GAAA,EAAA,CAAA,W;UAAE,QAAQ,GAAA,EAAA,CAAA,Q;UAAE,aAAa,GAAA,EAAA,CAAA,a;UAAE,YAAY,GAAA,EAAA,CAAA,Y;AAC7E,UAAM,IAAI,GAAG,WAAW,CAAC,IAAZ,CAAiB,OAAjB,EAAb;AAEA,UAAM,cAAc,GAAG,IAAI,GAAJ,EAAvB;AACA,UAAM,QAAQ,GAAG,aAAa,CAAC,iBAAd,EAAjB;AACA,MAAA,QAAQ,CAAC,OAAT,CAAiB,UAAA,GAAA,EAAG;AAClB,YAAI,GAAG,CAAC,WAAR,EAAqB;AACnB,UAAA,cAAc,CAAC,GAAf,CAAmB,GAAG,CAAC,GAAJ,CAAQ,IAA3B;AACD;AACF,OAJD,EAL8E,CAW9E;AACA;;AACA,UAAM,aAAa,GAAG,IAAI,UAAA,CAAA,eAAJ,CAClB,WAAW,CAAC,aAAZ,GAA4B,WAA5B,EADkB,EACyB,WAAW,CAAC,aAAZ,GAA4B,QADrD,CAAtB;AAEA,UAAI,YAAJ;;AACA,UAAI,YAAY,CAAC,QAAjB,EAA2B;AACzB,QAAA,YAAY,GAAG,aAAf;AACD,OAFD,MAEO;AACL,QAAA,YAAY,GAAG,YAAY,CAAC,IAA5B;AACD;;AAED,MAAA,QAAQ,CAAC,GAAT,CAAa,WAAb,EAA0B;AACxB,QAAA,IAAI,EAAA,IADoB;AAExB,QAAA,QAAQ,EAAA,QAFgB;AAGxB,QAAA,IAAI,EAAE,aAHkB;AAIxB,QAAA,QAAQ,EAAE;AACR,UAAA,WAAW,EAAE,UAAA,CAAA,sBAAA,CAAuB,aAAvB,CADL;AAER,UAAA,cAAc,EAAA,cAFN;AAGR,UAAA,QAAQ,EAAE,YAAY,CAAC,QAHf;AAIR,UAAA,IAAI,EAAE;AAJE;AAJc,OAA1B;AAWD,KAjCD;AAmCA,WAAO,QAAP;AACD;;AAvCD,EAAA,OAAA,CAAA,gBAAA,GAAA,gBAAA","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ParseSourceFile} from '@angular/compiler';\nimport {DeclarationNode} from '../../reflection';\nimport {IndexedComponent} from './api';\nimport {IndexingContext} from './context';\nimport {getTemplateIdentifiers} from './template';\n\n/**\n * Generates `IndexedComponent` entries from a `IndexingContext`, which has information\n * about components discovered in the program registered in it.\n *\n * The context must be populated before `generateAnalysis` is called.\n */\nexport function generateAnalysis(context: IndexingContext): Map<DeclarationNode, IndexedComponent> {\n  const analysis = new Map<DeclarationNode, IndexedComponent>();\n\n  context.components.forEach(({declaration, selector, boundTemplate, templateMeta}) => {\n    const name = declaration.name.getText();\n\n    const usedComponents = new Set<DeclarationNode>();\n    const usedDirs = boundTemplate.getUsedDirectives();\n    usedDirs.forEach(dir => {\n      if (dir.isComponent) {\n        usedComponents.add(dir.ref.node);\n      }\n    });\n\n    // Get source files for the component and the template. If the template is inline, its source\n    // file is the component's.\n    const componentFile = new ParseSourceFile(\n        declaration.getSourceFile().getFullText(), declaration.getSourceFile().fileName);\n    let templateFile: ParseSourceFile;\n    if (templateMeta.isInline) {\n      templateFile = componentFile;\n    } else {\n      templateFile = templateMeta.file;\n    }\n\n    analysis.set(declaration, {\n      name,\n      selector,\n      file: componentFile,\n      template: {\n        identifiers: getTemplateIdentifiers(boundTemplate),\n        usedComponents,\n        isInline: templateMeta.isInline,\n        file: templateFile,\n      },\n    });\n  });\n\n  return analysis;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}