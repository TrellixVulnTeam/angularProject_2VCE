{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nvar _classCallCheck = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _toConsumableArray = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/toConsumableArray\");\n\nvar _slicedToArray = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nvar _createForOfIteratorHelper = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar Template = require(\"../Template\");\n\nvar WebAssemblyUtils = require(\"./WebAssemblyUtils\");\n/** @typedef {import(\"../Module\")} Module */\n\n/** @typedef {import(\"../MainTemplate\")} MainTemplate */\n// Get all wasm modules\n\n\nvar getAllWasmModules = function getAllWasmModules(chunk) {\n  var wasmModules = chunk.getAllAsyncChunks();\n  var array = [];\n\n  var _iterator = _createForOfIteratorHelper(wasmModules),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var _chunk = _step.value;\n\n      var _iterator2 = _createForOfIteratorHelper(_chunk.modulesIterable),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var m = _step2.value;\n\n          if (m.type.startsWith(\"webassembly\")) {\n            array.push(m);\n          }\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  return array;\n};\n/**\n * generates the import object function for a module\n * @param {Module} module the module\n * @param {boolean} mangle mangle imports\n * @returns {string} source code\n */\n\n\nvar generateImportObject = function generateImportObject(module, mangle) {\n  var waitForInstances = new Map();\n  var properties = [];\n  var usedWasmDependencies = WebAssemblyUtils.getUsedDependencies(module, mangle);\n\n  var _iterator3 = _createForOfIteratorHelper(usedWasmDependencies),\n      _step3;\n\n  try {\n    for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n      var usedDep = _step3.value;\n      var dep = usedDep.dependency;\n      var importedModule = dep.module;\n      var exportName = dep.name;\n      var usedName = importedModule && importedModule.isUsed(exportName);\n      var description = dep.description;\n      var direct = dep.onlyDirectImport;\n      var _module = usedDep.module;\n      var name = usedDep.name;\n\n      if (direct) {\n        var instanceVar = \"m\".concat(waitForInstances.size);\n        waitForInstances.set(instanceVar, importedModule.id);\n        properties.push({\n          module: _module,\n          name: name,\n          value: \"\".concat(instanceVar, \"[\").concat(JSON.stringify(usedName), \"]\")\n        });\n      } else {\n        var params = description.signature.params.map(function (param, k) {\n          return \"p\" + k + param.valtype;\n        });\n        var mod = \"installedModules[\".concat(JSON.stringify(importedModule.id), \"]\");\n        var func = \"\".concat(mod, \".exports[\").concat(JSON.stringify(usedName), \"]\");\n        properties.push({\n          module: _module,\n          name: name,\n          value: Template.asString([(importedModule.type.startsWith(\"webassembly\") ? \"\".concat(mod, \" ? \").concat(func, \" : \") : \"\") + \"function(\".concat(params, \") {\"), Template.indent([\"return \".concat(func, \"(\").concat(params, \");\")]), \"}\"])\n        });\n      }\n    }\n  } catch (err) {\n    _iterator3.e(err);\n  } finally {\n    _iterator3.f();\n  }\n\n  var importObject;\n\n  if (mangle) {\n    importObject = [\"return {\", Template.indent([properties.map(function (p) {\n      return \"\".concat(JSON.stringify(p.name), \": \").concat(p.value);\n    }).join(\",\\n\")]), \"};\"];\n  } else {\n    var propertiesByModule = new Map();\n\n    var _iterator4 = _createForOfIteratorHelper(properties),\n        _step4;\n\n    try {\n      for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n        var p = _step4.value;\n        var list = propertiesByModule.get(p.module);\n\n        if (list === undefined) {\n          propertiesByModule.set(p.module, list = []);\n        }\n\n        list.push(p);\n      }\n    } catch (err) {\n      _iterator4.e(err);\n    } finally {\n      _iterator4.f();\n    }\n\n    importObject = [\"return {\", Template.indent([Array.from(propertiesByModule, function (_ref) {\n      var _ref2 = _slicedToArray(_ref, 2),\n          module = _ref2[0],\n          list = _ref2[1];\n\n      return Template.asString([\"\".concat(JSON.stringify(module), \": {\"), Template.indent([list.map(function (p) {\n        return \"\".concat(JSON.stringify(p.name), \": \").concat(p.value);\n      }).join(\",\\n\")]), \"}\"]);\n    }).join(\",\\n\")]), \"};\"];\n  }\n\n  if (waitForInstances.size === 1) {\n    var moduleId = Array.from(waitForInstances.values())[0];\n    var promise = \"installedWasmModules[\".concat(JSON.stringify(moduleId), \"]\");\n    var variable = Array.from(waitForInstances.keys())[0];\n    return Template.asString([\"\".concat(JSON.stringify(module.id), \": function() {\"), Template.indent([\"return promiseResolve().then(function() { return \".concat(promise, \"; }).then(function(\").concat(variable, \") {\"), Template.indent(importObject), \"});\"]), \"},\"]);\n  } else if (waitForInstances.size > 0) {\n    var promises = Array.from(waitForInstances.values(), function (id) {\n      return \"installedWasmModules[\".concat(JSON.stringify(id), \"]\");\n    }).join(\", \");\n    var variables = Array.from(waitForInstances.keys(), function (name, i) {\n      return \"\".concat(name, \" = array[\").concat(i, \"]\");\n    }).join(\", \");\n    return Template.asString([\"\".concat(JSON.stringify(module.id), \": function() {\"), Template.indent([\"return promiseResolve().then(function() { return Promise.all([\".concat(promises, \"]); }).then(function(array) {\"), Template.indent([\"var \".concat(variables, \";\")].concat(_toConsumableArray(importObject))), \"});\"]), \"},\"]);\n  } else {\n    return Template.asString([\"\".concat(JSON.stringify(module.id), \": function() {\"), Template.indent(importObject), \"},\"]);\n  }\n};\n\nvar WasmMainTemplatePlugin = /*#__PURE__*/function () {\n  function WasmMainTemplatePlugin(_ref3) {\n    var generateLoadBinaryCode = _ref3.generateLoadBinaryCode,\n        supportsStreaming = _ref3.supportsStreaming,\n        mangleImports = _ref3.mangleImports;\n\n    _classCallCheck(this, WasmMainTemplatePlugin);\n\n    this.generateLoadBinaryCode = generateLoadBinaryCode;\n    this.supportsStreaming = supportsStreaming;\n    this.mangleImports = mangleImports;\n  }\n  /**\n   * @param {MainTemplate} mainTemplate main template\n   * @returns {void}\n   */\n\n\n  _createClass(WasmMainTemplatePlugin, [{\n    key: \"apply\",\n    value: function apply(mainTemplate) {\n      var _this = this;\n\n      mainTemplate.hooks.localVars.tap(\"WasmMainTemplatePlugin\", function (source, chunk) {\n        var wasmModules = getAllWasmModules(chunk);\n        if (wasmModules.length === 0) return source;\n        var importObjects = wasmModules.map(function (module) {\n          return generateImportObject(module, _this.mangleImports);\n        });\n        return Template.asString([source, \"\", \"// object to store loaded and loading wasm modules\", \"var installedWasmModules = {};\", \"\", // This function is used to delay reading the installed wasm module promises\n        // by a microtask. Sorting them doesn't help because there are egdecases where\n        // sorting is not possible (modules splitted into different chunks).\n        // So we not even trying and solve this by a microtask delay.\n        \"function promiseResolve() { return Promise.resolve(); }\", \"\", \"var wasmImportObjects = {\", Template.indent(importObjects), \"};\"]);\n      });\n      mainTemplate.hooks.requireEnsure.tap(\"WasmMainTemplatePlugin\", function (source, chunk, hash) {\n        var webassemblyModuleFilename = mainTemplate.outputOptions.webassemblyModuleFilename;\n        var chunkModuleMaps = chunk.getChunkModuleMaps(function (m) {\n          return m.type.startsWith(\"webassembly\");\n        });\n        if (Object.keys(chunkModuleMaps.id).length === 0) return source;\n        var wasmModuleSrcPath = mainTemplate.getAssetPath(JSON.stringify(webassemblyModuleFilename), {\n          hash: \"\\\" + \".concat(mainTemplate.renderCurrentHashCode(hash), \" + \\\"\"),\n          hashWithLength: function hashWithLength(length) {\n            return \"\\\" + \".concat(mainTemplate.renderCurrentHashCode(hash, length), \" + \\\"\");\n          },\n          module: {\n            id: '\" + wasmModuleId + \"',\n            hash: \"\\\" + \".concat(JSON.stringify(chunkModuleMaps.hash), \"[wasmModuleId] + \\\"\"),\n            hashWithLength: function hashWithLength(length) {\n              var shortChunkHashMap = Object.create(null);\n\n              for (var _i = 0, _Object$keys = Object.keys(chunkModuleMaps.hash); _i < _Object$keys.length; _i++) {\n                var wasmModuleId = _Object$keys[_i];\n\n                if (typeof chunkModuleMaps.hash[wasmModuleId] === \"string\") {\n                  shortChunkHashMap[wasmModuleId] = chunkModuleMaps.hash[wasmModuleId].substr(0, length);\n                }\n              }\n\n              return \"\\\" + \".concat(JSON.stringify(shortChunkHashMap), \"[wasmModuleId] + \\\"\");\n            }\n          }\n        });\n\n        var createImportObject = function createImportObject(content) {\n          return _this.mangleImports ? \"{ \".concat(JSON.stringify(WebAssemblyUtils.MANGLED_MODULE), \": \").concat(content, \" }\") : content;\n        };\n\n        return Template.asString([source, \"\", \"// Fetch + compile chunk loading for webassembly\", \"\", \"var wasmModules = \".concat(JSON.stringify(chunkModuleMaps.id), \"[chunkId] || [];\"), \"\", \"wasmModules.forEach(function(wasmModuleId) {\", Template.indent([\"var installedWasmModuleData = installedWasmModules[wasmModuleId];\", \"\", '// a Promise means \"currently loading\" or \"already loaded\".', \"if(installedWasmModuleData)\", Template.indent([\"promises.push(installedWasmModuleData);\"]), \"else {\", Template.indent([\"var importObject = wasmImportObjects[wasmModuleId]();\", \"var req = \".concat(_this.generateLoadBinaryCode(wasmModuleSrcPath), \";\"), \"var promise;\", _this.supportsStreaming ? Template.asString([\"if(importObject instanceof Promise && typeof WebAssembly.compileStreaming === 'function') {\", Template.indent([\"promise = Promise.all([WebAssembly.compileStreaming(req), importObject]).then(function(items) {\", Template.indent([\"return WebAssembly.instantiate(items[0], \".concat(createImportObject(\"items[1]\"), \");\")]), \"});\"]), \"} else if(typeof WebAssembly.instantiateStreaming === 'function') {\", Template.indent([\"promise = WebAssembly.instantiateStreaming(req, \".concat(createImportObject(\"importObject\"), \");\")])]) : Template.asString([\"if(importObject instanceof Promise) {\", Template.indent([\"var bytesPromise = req.then(function(x) { return x.arrayBuffer(); });\", \"promise = Promise.all([\", Template.indent([\"bytesPromise.then(function(bytes) { return WebAssembly.compile(bytes); }),\", \"importObject\"]), \"]).then(function(items) {\", Template.indent([\"return WebAssembly.instantiate(items[0], \".concat(createImportObject(\"items[1]\"), \");\")]), \"});\"])]), \"} else {\", Template.indent([\"var bytesPromise = req.then(function(x) { return x.arrayBuffer(); });\", \"promise = bytesPromise.then(function(bytes) {\", Template.indent([\"return WebAssembly.instantiate(bytes, \".concat(createImportObject(\"importObject\"), \");\")]), \"});\"]), \"}\", \"promises.push(installedWasmModules[wasmModuleId] = promise.then(function(res) {\", Template.indent([\"return \".concat(mainTemplate.requireFn, \".w[wasmModuleId] = (res.instance || res).exports;\")]), \"}));\"]), \"}\"]), \"});\"]);\n      });\n      mainTemplate.hooks.requireExtensions.tap(\"WasmMainTemplatePlugin\", function (source, chunk) {\n        if (!chunk.hasModuleInGraph(function (m) {\n          return m.type.startsWith(\"webassembly\");\n        })) {\n          return source;\n        }\n\n        return Template.asString([source, \"\", \"// object with all WebAssembly.instance exports\", \"\".concat(mainTemplate.requireFn, \".w = {};\")]);\n      });\n      mainTemplate.hooks.hash.tap(\"WasmMainTemplatePlugin\", function (hash) {\n        hash.update(\"WasmMainTemplatePlugin\");\n        hash.update(\"2\");\n      });\n    }\n  }]);\n\n  return WasmMainTemplatePlugin;\n}();\n\nmodule.exports = WasmMainTemplatePlugin;","map":{"version":3,"sources":["/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/webpack/lib/wasm/WasmMainTemplatePlugin.js"],"names":["Template","require","WebAssemblyUtils","getAllWasmModules","chunk","wasmModules","getAllAsyncChunks","array","modulesIterable","m","type","startsWith","push","generateImportObject","module","mangle","waitForInstances","Map","properties","usedWasmDependencies","getUsedDependencies","usedDep","dep","dependency","importedModule","exportName","name","usedName","isUsed","description","direct","onlyDirectImport","instanceVar","size","set","id","value","JSON","stringify","params","signature","map","param","k","valtype","mod","func","asString","indent","importObject","p","join","propertiesByModule","list","get","undefined","Array","from","moduleId","values","promise","variable","keys","promises","variables","i","WasmMainTemplatePlugin","generateLoadBinaryCode","supportsStreaming","mangleImports","mainTemplate","hooks","localVars","tap","source","length","importObjects","requireEnsure","hash","webassemblyModuleFilename","outputOptions","chunkModuleMaps","getChunkModuleMaps","Object","wasmModuleSrcPath","getAssetPath","renderCurrentHashCode","hashWithLength","shortChunkHashMap","create","wasmModuleId","substr","createImportObject","content","MANGLED_MODULE","requireFn","requireExtensions","hasModuleInGraph","update","exports"],"mappings":"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","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst Template = require(\"../Template\");\nconst WebAssemblyUtils = require(\"./WebAssemblyUtils\");\n\n/** @typedef {import(\"../Module\")} Module */\n/** @typedef {import(\"../MainTemplate\")} MainTemplate */\n\n// Get all wasm modules\nconst getAllWasmModules = chunk => {\n\tconst wasmModules = chunk.getAllAsyncChunks();\n\tconst array = [];\n\tfor (const chunk of wasmModules) {\n\t\tfor (const m of chunk.modulesIterable) {\n\t\t\tif (m.type.startsWith(\"webassembly\")) {\n\t\t\t\tarray.push(m);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn array;\n};\n\n/**\n * generates the import object function for a module\n * @param {Module} module the module\n * @param {boolean} mangle mangle imports\n * @returns {string} source code\n */\nconst generateImportObject = (module, mangle) => {\n\tconst waitForInstances = new Map();\n\tconst properties = [];\n\tconst usedWasmDependencies = WebAssemblyUtils.getUsedDependencies(\n\t\tmodule,\n\t\tmangle\n\t);\n\tfor (const usedDep of usedWasmDependencies) {\n\t\tconst dep = usedDep.dependency;\n\t\tconst importedModule = dep.module;\n\t\tconst exportName = dep.name;\n\t\tconst usedName = importedModule && importedModule.isUsed(exportName);\n\t\tconst description = dep.description;\n\t\tconst direct = dep.onlyDirectImport;\n\n\t\tconst module = usedDep.module;\n\t\tconst name = usedDep.name;\n\n\t\tif (direct) {\n\t\t\tconst instanceVar = `m${waitForInstances.size}`;\n\t\t\twaitForInstances.set(instanceVar, importedModule.id);\n\t\t\tproperties.push({\n\t\t\t\tmodule,\n\t\t\t\tname,\n\t\t\t\tvalue: `${instanceVar}[${JSON.stringify(usedName)}]`\n\t\t\t});\n\t\t} else {\n\t\t\tconst params = description.signature.params.map(\n\t\t\t\t(param, k) => \"p\" + k + param.valtype\n\t\t\t);\n\n\t\t\tconst mod = `installedModules[${JSON.stringify(importedModule.id)}]`;\n\t\t\tconst func = `${mod}.exports[${JSON.stringify(usedName)}]`;\n\n\t\t\tproperties.push({\n\t\t\t\tmodule,\n\t\t\t\tname,\n\t\t\t\tvalue: Template.asString([\n\t\t\t\t\t(importedModule.type.startsWith(\"webassembly\")\n\t\t\t\t\t\t? `${mod} ? ${func} : `\n\t\t\t\t\t\t: \"\") + `function(${params}) {`,\n\t\t\t\t\tTemplate.indent([`return ${func}(${params});`]),\n\t\t\t\t\t\"}\"\n\t\t\t\t])\n\t\t\t});\n\t\t}\n\t}\n\n\tlet importObject;\n\tif (mangle) {\n\t\timportObject = [\n\t\t\t\"return {\",\n\t\t\tTemplate.indent([\n\t\t\t\tproperties.map(p => `${JSON.stringify(p.name)}: ${p.value}`).join(\",\\n\")\n\t\t\t]),\n\t\t\t\"};\"\n\t\t];\n\t} else {\n\t\tconst propertiesByModule = new Map();\n\t\tfor (const p of properties) {\n\t\t\tlet list = propertiesByModule.get(p.module);\n\t\t\tif (list === undefined) {\n\t\t\t\tpropertiesByModule.set(p.module, (list = []));\n\t\t\t}\n\t\t\tlist.push(p);\n\t\t}\n\t\timportObject = [\n\t\t\t\"return {\",\n\t\t\tTemplate.indent([\n\t\t\t\tArray.from(propertiesByModule, ([module, list]) => {\n\t\t\t\t\treturn Template.asString([\n\t\t\t\t\t\t`${JSON.stringify(module)}: {`,\n\t\t\t\t\t\tTemplate.indent([\n\t\t\t\t\t\t\tlist.map(p => `${JSON.stringify(p.name)}: ${p.value}`).join(\",\\n\")\n\t\t\t\t\t\t]),\n\t\t\t\t\t\t\"}\"\n\t\t\t\t\t]);\n\t\t\t\t}).join(\",\\n\")\n\t\t\t]),\n\t\t\t\"};\"\n\t\t];\n\t}\n\n\tif (waitForInstances.size === 1) {\n\t\tconst moduleId = Array.from(waitForInstances.values())[0];\n\t\tconst promise = `installedWasmModules[${JSON.stringify(moduleId)}]`;\n\t\tconst variable = Array.from(waitForInstances.keys())[0];\n\t\treturn Template.asString([\n\t\t\t`${JSON.stringify(module.id)}: function() {`,\n\t\t\tTemplate.indent([\n\t\t\t\t`return promiseResolve().then(function() { return ${promise}; }).then(function(${variable}) {`,\n\t\t\t\tTemplate.indent(importObject),\n\t\t\t\t\"});\"\n\t\t\t]),\n\t\t\t\"},\"\n\t\t]);\n\t} else if (waitForInstances.size > 0) {\n\t\tconst promises = Array.from(\n\t\t\twaitForInstances.values(),\n\t\t\tid => `installedWasmModules[${JSON.stringify(id)}]`\n\t\t).join(\", \");\n\t\tconst variables = Array.from(\n\t\t\twaitForInstances.keys(),\n\t\t\t(name, i) => `${name} = array[${i}]`\n\t\t).join(\", \");\n\t\treturn Template.asString([\n\t\t\t`${JSON.stringify(module.id)}: function() {`,\n\t\t\tTemplate.indent([\n\t\t\t\t`return promiseResolve().then(function() { return Promise.all([${promises}]); }).then(function(array) {`,\n\t\t\t\tTemplate.indent([`var ${variables};`, ...importObject]),\n\t\t\t\t\"});\"\n\t\t\t]),\n\t\t\t\"},\"\n\t\t]);\n\t} else {\n\t\treturn Template.asString([\n\t\t\t`${JSON.stringify(module.id)}: function() {`,\n\t\t\tTemplate.indent(importObject),\n\t\t\t\"},\"\n\t\t]);\n\t}\n};\n\nclass WasmMainTemplatePlugin {\n\tconstructor({ generateLoadBinaryCode, supportsStreaming, mangleImports }) {\n\t\tthis.generateLoadBinaryCode = generateLoadBinaryCode;\n\t\tthis.supportsStreaming = supportsStreaming;\n\t\tthis.mangleImports = mangleImports;\n\t}\n\n\t/**\n\t * @param {MainTemplate} mainTemplate main template\n\t * @returns {void}\n\t */\n\tapply(mainTemplate) {\n\t\tmainTemplate.hooks.localVars.tap(\n\t\t\t\"WasmMainTemplatePlugin\",\n\t\t\t(source, chunk) => {\n\t\t\t\tconst wasmModules = getAllWasmModules(chunk);\n\t\t\t\tif (wasmModules.length === 0) return source;\n\t\t\t\tconst importObjects = wasmModules.map(module => {\n\t\t\t\t\treturn generateImportObject(module, this.mangleImports);\n\t\t\t\t});\n\t\t\t\treturn Template.asString([\n\t\t\t\t\tsource,\n\t\t\t\t\t\"\",\n\t\t\t\t\t\"// object to store loaded and loading wasm modules\",\n\t\t\t\t\t\"var installedWasmModules = {};\",\n\t\t\t\t\t\"\",\n\t\t\t\t\t// This function is used to delay reading the installed wasm module promises\n\t\t\t\t\t// by a microtask. Sorting them doesn't help because there are egdecases where\n\t\t\t\t\t// sorting is not possible (modules splitted into different chunks).\n\t\t\t\t\t// So we not even trying and solve this by a microtask delay.\n\t\t\t\t\t\"function promiseResolve() { return Promise.resolve(); }\",\n\t\t\t\t\t\"\",\n\t\t\t\t\t\"var wasmImportObjects = {\",\n\t\t\t\t\tTemplate.indent(importObjects),\n\t\t\t\t\t\"};\"\n\t\t\t\t]);\n\t\t\t}\n\t\t);\n\t\tmainTemplate.hooks.requireEnsure.tap(\n\t\t\t\"WasmMainTemplatePlugin\",\n\t\t\t(source, chunk, hash) => {\n\t\t\t\tconst webassemblyModuleFilename =\n\t\t\t\t\tmainTemplate.outputOptions.webassemblyModuleFilename;\n\n\t\t\t\tconst chunkModuleMaps = chunk.getChunkModuleMaps(m =>\n\t\t\t\t\tm.type.startsWith(\"webassembly\")\n\t\t\t\t);\n\t\t\t\tif (Object.keys(chunkModuleMaps.id).length === 0) return source;\n\t\t\t\tconst wasmModuleSrcPath = mainTemplate.getAssetPath(\n\t\t\t\t\tJSON.stringify(webassemblyModuleFilename),\n\t\t\t\t\t{\n\t\t\t\t\t\thash: `\" + ${mainTemplate.renderCurrentHashCode(hash)} + \"`,\n\t\t\t\t\t\thashWithLength: length =>\n\t\t\t\t\t\t\t`\" + ${mainTemplate.renderCurrentHashCode(hash, length)} + \"`,\n\t\t\t\t\t\tmodule: {\n\t\t\t\t\t\t\tid: '\" + wasmModuleId + \"',\n\t\t\t\t\t\t\thash: `\" + ${JSON.stringify(\n\t\t\t\t\t\t\t\tchunkModuleMaps.hash\n\t\t\t\t\t\t\t)}[wasmModuleId] + \"`,\n\t\t\t\t\t\t\thashWithLength(length) {\n\t\t\t\t\t\t\t\tconst shortChunkHashMap = Object.create(null);\n\t\t\t\t\t\t\t\tfor (const wasmModuleId of Object.keys(chunkModuleMaps.hash)) {\n\t\t\t\t\t\t\t\t\tif (typeof chunkModuleMaps.hash[wasmModuleId] === \"string\") {\n\t\t\t\t\t\t\t\t\t\tshortChunkHashMap[wasmModuleId] = chunkModuleMaps.hash[\n\t\t\t\t\t\t\t\t\t\t\twasmModuleId\n\t\t\t\t\t\t\t\t\t\t].substr(0, length);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\treturn `\" + ${JSON.stringify(\n\t\t\t\t\t\t\t\t\tshortChunkHashMap\n\t\t\t\t\t\t\t\t)}[wasmModuleId] + \"`;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t\tconst createImportObject = content =>\n\t\t\t\t\tthis.mangleImports\n\t\t\t\t\t\t? `{ ${JSON.stringify(\n\t\t\t\t\t\t\t\tWebAssemblyUtils.MANGLED_MODULE\n\t\t\t\t\t\t  )}: ${content} }`\n\t\t\t\t\t\t: content;\n\t\t\t\treturn Template.asString([\n\t\t\t\t\tsource,\n\t\t\t\t\t\"\",\n\t\t\t\t\t\"// Fetch + compile chunk loading for webassembly\",\n\t\t\t\t\t\"\",\n\t\t\t\t\t`var wasmModules = ${JSON.stringify(\n\t\t\t\t\t\tchunkModuleMaps.id\n\t\t\t\t\t)}[chunkId] || [];`,\n\t\t\t\t\t\"\",\n\t\t\t\t\t\"wasmModules.forEach(function(wasmModuleId) {\",\n\t\t\t\t\tTemplate.indent([\n\t\t\t\t\t\t\"var installedWasmModuleData = installedWasmModules[wasmModuleId];\",\n\t\t\t\t\t\t\"\",\n\t\t\t\t\t\t'// a Promise means \"currently loading\" or \"already loaded\".',\n\t\t\t\t\t\t\"if(installedWasmModuleData)\",\n\t\t\t\t\t\tTemplate.indent([\"promises.push(installedWasmModuleData);\"]),\n\t\t\t\t\t\t\"else {\",\n\t\t\t\t\t\tTemplate.indent([\n\t\t\t\t\t\t\t`var importObject = wasmImportObjects[wasmModuleId]();`,\n\t\t\t\t\t\t\t`var req = ${this.generateLoadBinaryCode(wasmModuleSrcPath)};`,\n\t\t\t\t\t\t\t\"var promise;\",\n\t\t\t\t\t\t\tthis.supportsStreaming\n\t\t\t\t\t\t\t\t? Template.asString([\n\t\t\t\t\t\t\t\t\t\t\"if(importObject instanceof Promise && typeof WebAssembly.compileStreaming === 'function') {\",\n\t\t\t\t\t\t\t\t\t\tTemplate.indent([\n\t\t\t\t\t\t\t\t\t\t\t\"promise = Promise.all([WebAssembly.compileStreaming(req), importObject]).then(function(items) {\",\n\t\t\t\t\t\t\t\t\t\t\tTemplate.indent([\n\t\t\t\t\t\t\t\t\t\t\t\t`return WebAssembly.instantiate(items[0], ${createImportObject(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"items[1]\"\n\t\t\t\t\t\t\t\t\t\t\t\t)});`\n\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t\"});\"\n\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\"} else if(typeof WebAssembly.instantiateStreaming === 'function') {\",\n\t\t\t\t\t\t\t\t\t\tTemplate.indent([\n\t\t\t\t\t\t\t\t\t\t\t`promise = WebAssembly.instantiateStreaming(req, ${createImportObject(\n\t\t\t\t\t\t\t\t\t\t\t\t\"importObject\"\n\t\t\t\t\t\t\t\t\t\t\t)});`\n\t\t\t\t\t\t\t\t\t\t])\n\t\t\t\t\t\t\t\t  ])\n\t\t\t\t\t\t\t\t: Template.asString([\n\t\t\t\t\t\t\t\t\t\t\"if(importObject instanceof Promise) {\",\n\t\t\t\t\t\t\t\t\t\tTemplate.indent([\n\t\t\t\t\t\t\t\t\t\t\t\"var bytesPromise = req.then(function(x) { return x.arrayBuffer(); });\",\n\t\t\t\t\t\t\t\t\t\t\t\"promise = Promise.all([\",\n\t\t\t\t\t\t\t\t\t\t\tTemplate.indent([\n\t\t\t\t\t\t\t\t\t\t\t\t\"bytesPromise.then(function(bytes) { return WebAssembly.compile(bytes); }),\",\n\t\t\t\t\t\t\t\t\t\t\t\t\"importObject\"\n\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t\"]).then(function(items) {\",\n\t\t\t\t\t\t\t\t\t\t\tTemplate.indent([\n\t\t\t\t\t\t\t\t\t\t\t\t`return WebAssembly.instantiate(items[0], ${createImportObject(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"items[1]\"\n\t\t\t\t\t\t\t\t\t\t\t\t)});`\n\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t\"});\"\n\t\t\t\t\t\t\t\t\t\t])\n\t\t\t\t\t\t\t\t  ]),\n\t\t\t\t\t\t\t\"} else {\",\n\t\t\t\t\t\t\tTemplate.indent([\n\t\t\t\t\t\t\t\t\"var bytesPromise = req.then(function(x) { return x.arrayBuffer(); });\",\n\t\t\t\t\t\t\t\t\"promise = bytesPromise.then(function(bytes) {\",\n\t\t\t\t\t\t\t\tTemplate.indent([\n\t\t\t\t\t\t\t\t\t`return WebAssembly.instantiate(bytes, ${createImportObject(\n\t\t\t\t\t\t\t\t\t\t\"importObject\"\n\t\t\t\t\t\t\t\t\t)});`\n\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\"});\"\n\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\"}\",\n\t\t\t\t\t\t\t\"promises.push(installedWasmModules[wasmModuleId] = promise.then(function(res) {\",\n\t\t\t\t\t\t\tTemplate.indent([\n\t\t\t\t\t\t\t\t`return ${mainTemplate.requireFn}.w[wasmModuleId] = (res.instance || res).exports;`\n\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\"}));\"\n\t\t\t\t\t\t]),\n\t\t\t\t\t\t\"}\"\n\t\t\t\t\t]),\n\t\t\t\t\t\"});\"\n\t\t\t\t]);\n\t\t\t}\n\t\t);\n\t\tmainTemplate.hooks.requireExtensions.tap(\n\t\t\t\"WasmMainTemplatePlugin\",\n\t\t\t(source, chunk) => {\n\t\t\t\tif (!chunk.hasModuleInGraph(m => m.type.startsWith(\"webassembly\"))) {\n\t\t\t\t\treturn source;\n\t\t\t\t}\n\t\t\t\treturn Template.asString([\n\t\t\t\t\tsource,\n\t\t\t\t\t\"\",\n\t\t\t\t\t\"// object with all WebAssembly.instance exports\",\n\t\t\t\t\t`${mainTemplate.requireFn}.w = {};`\n\t\t\t\t]);\n\t\t\t}\n\t\t);\n\t\tmainTemplate.hooks.hash.tap(\"WasmMainTemplatePlugin\", hash => {\n\t\t\thash.update(\"WasmMainTemplatePlugin\");\n\t\t\thash.update(\"2\");\n\t\t});\n\t}\n}\n\nmodule.exports = WasmMainTemplatePlugin;\n"]},"metadata":{},"sourceType":"script"}