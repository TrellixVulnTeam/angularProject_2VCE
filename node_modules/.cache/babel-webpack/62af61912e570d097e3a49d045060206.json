{"ast":null,"code":"\"use strict\"; // builtin tooling\n\nvar path = require(\"path\"); // external tooling\n\n\nvar postcss = require(\"postcss\"); // placeholder tooling\n\n\nvar sugarss;\n\nmodule.exports = function processContent(result, content, filename, options) {\n  var plugins = options.plugins;\n  var ext = path.extname(filename);\n  var parserList = []; // SugarSS support:\n\n  if (ext === \".sss\") {\n    if (!sugarss) {\n      try {\n        sugarss = require(\"sugarss\");\n      } catch (e) {// Ignore\n      }\n    }\n\n    if (sugarss) return runPostcss(content, filename, plugins, [sugarss]);\n  } // Syntax support:\n\n\n  if (result.opts.syntax && result.opts.syntax.parse) {\n    parserList.push(result.opts.syntax.parse);\n  } // Parser support:\n\n\n  if (result.opts.parser) parserList.push(result.opts.parser); // Try the default as a last resort:\n\n  parserList.push(null);\n  return runPostcss(content, filename, plugins, parserList);\n};\n\nfunction runPostcss(content, filename, plugins, parsers, index) {\n  if (!index) index = 0;\n  return postcss(plugins).process(content, {\n    from: filename,\n    parser: parsers[index]\n  }).catch(function (err) {\n    // If there's an error, try the next parser\n    index++; // If there are no parsers left, throw it\n\n    if (index === parsers.length) throw err;\n    return runPostcss(content, filename, plugins, parsers, index);\n  });\n}","map":{"version":3,"sources":["/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/postcss-import/lib/process-content.js"],"names":["path","require","postcss","sugarss","module","exports","processContent","result","content","filename","options","plugins","ext","extname","parserList","e","runPostcss","opts","syntax","parse","push","parser","parsers","index","process","from","catch","err","length"],"mappings":"AAAA,a,CAEA;;AACA,IAAMA,IAAI,GAAGC,OAAO,CAAC,MAAD,CAApB,C,CAEA;;;AACA,IAAMC,OAAO,GAAGD,OAAO,CAAC,SAAD,CAAvB,C,CAEA;;;AACA,IAAIE,OAAJ;;AAEAC,MAAM,CAACC,OAAP,GAAiB,SAASC,cAAT,CAAwBC,MAAxB,EAAgCC,OAAhC,EAAyCC,QAAzC,EAAmDC,OAAnD,EAA4D;AAC3E,MAAMC,OAAO,GAAGD,OAAO,CAACC,OAAxB;AACA,MAAMC,GAAG,GAAGZ,IAAI,CAACa,OAAL,CAAaJ,QAAb,CAAZ;AAEA,MAAMK,UAAU,GAAG,EAAnB,CAJ2E,CAM3E;;AACA,MAAIF,GAAG,KAAK,MAAZ,EAAoB;AAClB,QAAI,CAACT,OAAL,EAAc;AACZ,UAAI;AACFA,QAAAA,OAAO,GAAGF,OAAO,CAAC,SAAD,CAAjB;AACD,OAFD,CAEE,OAAOc,CAAP,EAAU,CACV;AACD;AACF;;AACD,QAAIZ,OAAJ,EAAa,OAAOa,UAAU,CAACR,OAAD,EAAUC,QAAV,EAAoBE,OAApB,EAA6B,CAACR,OAAD,CAA7B,CAAjB;AACd,GAhB0E,CAkB3E;;;AACA,MAAII,MAAM,CAACU,IAAP,CAAYC,MAAZ,IAAsBX,MAAM,CAACU,IAAP,CAAYC,MAAZ,CAAmBC,KAA7C,EAAoD;AAClDL,IAAAA,UAAU,CAACM,IAAX,CAAgBb,MAAM,CAACU,IAAP,CAAYC,MAAZ,CAAmBC,KAAnC;AACD,GArB0E,CAuB3E;;;AACA,MAAIZ,MAAM,CAACU,IAAP,CAAYI,MAAhB,EAAwBP,UAAU,CAACM,IAAX,CAAgBb,MAAM,CAACU,IAAP,CAAYI,MAA5B,EAxBmD,CAyB3E;;AACAP,EAAAA,UAAU,CAACM,IAAX,CAAgB,IAAhB;AAEA,SAAOJ,UAAU,CAACR,OAAD,EAAUC,QAAV,EAAoBE,OAApB,EAA6BG,UAA7B,CAAjB;AACD,CA7BD;;AA+BA,SAASE,UAAT,CAAoBR,OAApB,EAA6BC,QAA7B,EAAuCE,OAAvC,EAAgDW,OAAhD,EAAyDC,KAAzD,EAAgE;AAC9D,MAAI,CAACA,KAAL,EAAYA,KAAK,GAAG,CAAR;AACZ,SAAOrB,OAAO,CAACS,OAAD,CAAP,CACJa,OADI,CACIhB,OADJ,EACa;AAChBiB,IAAAA,IAAI,EAAEhB,QADU;AAEhBY,IAAAA,MAAM,EAAEC,OAAO,CAACC,KAAD;AAFC,GADb,EAKJG,KALI,CAKE,UAAAC,GAAG,EAAI;AACZ;AACAJ,IAAAA,KAAK,GAFO,CAGZ;;AACA,QAAIA,KAAK,KAAKD,OAAO,CAACM,MAAtB,EAA8B,MAAMD,GAAN;AAC9B,WAAOX,UAAU,CAACR,OAAD,EAAUC,QAAV,EAAoBE,OAApB,EAA6BW,OAA7B,EAAsCC,KAAtC,CAAjB;AACD,GAXI,CAAP;AAYD","sourcesContent":["\"use strict\"\n\n// builtin tooling\nconst path = require(\"path\")\n\n// external tooling\nconst postcss = require(\"postcss\")\n\n// placeholder tooling\nlet sugarss\n\nmodule.exports = function processContent(result, content, filename, options) {\n  const plugins = options.plugins\n  const ext = path.extname(filename)\n\n  const parserList = []\n\n  // SugarSS support:\n  if (ext === \".sss\") {\n    if (!sugarss) {\n      try {\n        sugarss = require(\"sugarss\")\n      } catch (e) {\n        // Ignore\n      }\n    }\n    if (sugarss) return runPostcss(content, filename, plugins, [sugarss])\n  }\n\n  // Syntax support:\n  if (result.opts.syntax && result.opts.syntax.parse) {\n    parserList.push(result.opts.syntax.parse)\n  }\n\n  // Parser support:\n  if (result.opts.parser) parserList.push(result.opts.parser)\n  // Try the default as a last resort:\n  parserList.push(null)\n\n  return runPostcss(content, filename, plugins, parserList)\n}\n\nfunction runPostcss(content, filename, plugins, parsers, index) {\n  if (!index) index = 0\n  return postcss(plugins)\n    .process(content, {\n      from: filename,\n      parser: parsers[index],\n    })\n    .catch(err => {\n      // If there's an error, try the next parser\n      index++\n      // If there are no parsers left, throw it\n      if (index === parsers.length) throw err\n      return runPostcss(content, filename, plugins, parsers, index)\n    })\n}\n"]},"metadata":{},"sourceType":"script"}