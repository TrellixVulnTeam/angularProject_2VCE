{"ast":null,"code":"/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n(function (factory) {\n  if (typeof module === \"object\" && typeof module.exports === \"object\") {\n    var v = factory(require, exports);\n    if (v !== undefined) module.exports = v;\n  } else if (typeof define === \"function\" && define.amd) {\n    define(\"@angular/compiler-cli/src/ngtsc/partial_evaluator/src/known_declaration\", [\"require\", \"exports\", \"@angular/compiler-cli/src/ngtsc/reflection/src/host\", \"@angular/compiler-cli/src/ngtsc/partial_evaluator/src/builtin\", \"@angular/compiler-cli/src/ngtsc/partial_evaluator/src/ts_helpers\"], factory);\n  }\n})(function (require, exports) {\n  \"use strict\";\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.resolveKnownDeclaration = exports.jsGlobalObjectValue = void 0;\n\n  var host_1 = require(\"@angular/compiler-cli/src/ngtsc/reflection/src/host\");\n\n  var builtin_1 = require(\"@angular/compiler-cli/src/ngtsc/partial_evaluator/src/builtin\");\n\n  var ts_helpers_1 = require(\"@angular/compiler-cli/src/ngtsc/partial_evaluator/src/ts_helpers\");\n  /** Resolved value for the JavaScript global `Object` declaration. */\n\n\n  exports.jsGlobalObjectValue = new Map([['assign', new builtin_1.ObjectAssignBuiltinFn()]]);\n  /** Resolved value for the `__assign()` TypeScript helper declaration. */\n\n  var assignTsHelperFn = new ts_helpers_1.AssignHelperFn();\n  /** Resolved value for the `__spread()` and `__spreadArrays()` TypeScript helper declarations. */\n\n  var spreadTsHelperFn = new ts_helpers_1.SpreadHelperFn();\n  /**\n   * Resolves the specified known declaration to a resolved value. For example,\n   * the known JavaScript global `Object` will resolve to a `Map` that provides the\n   * `assign` method with a built-in function. This enables evaluation of `Object.assign`.\n   */\n\n  function resolveKnownDeclaration(decl) {\n    switch (decl) {\n      case host_1.KnownDeclaration.JsGlobalObject:\n        return exports.jsGlobalObjectValue;\n\n      case host_1.KnownDeclaration.TsHelperAssign:\n        return assignTsHelperFn;\n\n      case host_1.KnownDeclaration.TsHelperSpread:\n      case host_1.KnownDeclaration.TsHelperSpreadArrays:\n        return spreadTsHelperFn;\n\n      default:\n        throw new Error(\"Cannot resolve known declaration. Received: \" + host_1.KnownDeclaration[decl] + \".\");\n    }\n  }\n\n  exports.resolveKnownDeclaration = resolveKnownDeclaration;\n});","map":{"version":3,"sources":["../../../../../../../../../packages/compiler-cli/src/ngtsc/partial_evaluator/src/known_declaration.ts"],"names":[],"mappings":"AAAA;;;;;;AAMG;;;;;;;;;;;;;;;;AAEH,MAAA,MAAA,GAAA,OAAA,CAAA,qDAAA,CAAA;;AAEA,MAAA,SAAA,GAAA,OAAA,CAAA,+DAAA,CAAA;;AAEA,MAAA,YAAA,GAAA,OAAA,CAAA,kEAAA,CAAA;AAEA;;;AACa,EAAA,OAAA,CAAA,mBAAA,GAAsB,IAAI,GAAJ,CAAQ,CAAC,CAAC,QAAD,EAAW,IAAI,SAAA,CAAA,qBAAJ,EAAX,CAAD,CAAR,CAAtB;AAEb;;AACA,MAAM,gBAAgB,GAAG,IAAI,YAAA,CAAA,cAAJ,EAAzB;AAEA;;AACA,MAAM,gBAAgB,GAAG,IAAI,YAAA,CAAA,cAAJ,EAAzB;AAEA;;;;AAIG;;AACH,WAAgB,uBAAhB,CAAwC,IAAxC,EAA8D;AAC5D,YAAQ,IAAR;AACE,WAAK,MAAA,CAAA,gBAAA,CAAiB,cAAtB;AACE,eAAO,OAAA,CAAA,mBAAP;;AACF,WAAK,MAAA,CAAA,gBAAA,CAAiB,cAAtB;AACE,eAAO,gBAAP;;AACF,WAAK,MAAA,CAAA,gBAAA,CAAiB,cAAtB;AACA,WAAK,MAAA,CAAA,gBAAA,CAAiB,oBAAtB;AACE,eAAO,gBAAP;;AACF;AACE,cAAM,IAAI,KAAJ,CAAU,iDAA+C,MAAA,CAAA,gBAAA,CAAiB,IAAjB,CAA/C,GAAqE,GAA/E,CAAN;AATJ;AAWD;;AAZD,EAAA,OAAA,CAAA,uBAAA,GAAA,uBAAA","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {KnownDeclaration} from '../../reflection/src/host';\n\nimport {ObjectAssignBuiltinFn} from './builtin';\nimport {ResolvedValue} from './result';\nimport {AssignHelperFn, SpreadHelperFn} from './ts_helpers';\n\n/** Resolved value for the JavaScript global `Object` declaration. */\nexport const jsGlobalObjectValue = new Map([['assign', new ObjectAssignBuiltinFn()]]);\n\n/** Resolved value for the `__assign()` TypeScript helper declaration. */\nconst assignTsHelperFn = new AssignHelperFn();\n\n/** Resolved value for the `__spread()` and `__spreadArrays()` TypeScript helper declarations. */\nconst spreadTsHelperFn = new SpreadHelperFn();\n\n/**\n * Resolves the specified known declaration to a resolved value. For example,\n * the known JavaScript global `Object` will resolve to a `Map` that provides the\n * `assign` method with a built-in function. This enables evaluation of `Object.assign`.\n */\nexport function resolveKnownDeclaration(decl: KnownDeclaration): ResolvedValue {\n  switch (decl) {\n    case KnownDeclaration.JsGlobalObject:\n      return jsGlobalObjectValue;\n    case KnownDeclaration.TsHelperAssign:\n      return assignTsHelperFn;\n    case KnownDeclaration.TsHelperSpread:\n    case KnownDeclaration.TsHelperSpreadArrays:\n      return spreadTsHelperFn;\n    default:\n      throw new Error(`Cannot resolve known declaration. Received: ${KnownDeclaration[decl]}.`);\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}