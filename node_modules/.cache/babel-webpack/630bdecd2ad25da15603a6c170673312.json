{"ast":null,"code":"\"use strict\";\n\nvar net = require(\"net\");\n\nvar os = require(\"os\");\n\nvar execa = require(\"execa\");\n\nvar args = {\n  v4: [\"-4\", \"r\"],\n  v6: [\"-6\", \"r\"]\n};\n\nvar parse = function parse(stdout, family) {\n  var result;\n  (stdout || \"\").trim().split(\"\\n\").some(function (line) {\n    var results = /default( via .+?)?( dev .+?)( |$)/.exec(line) || [];\n    var gateway = (results[1] || \"\").substring(5);\n    var iface = (results[2] || \"\").substring(5);\n\n    if (gateway && net.isIP(gateway)) {\n      // default via 1.2.3.4 dev en0\n      result = {\n        gateway: gateway,\n        interface: iface ? iface : null\n      };\n      return true;\n    } else if (iface && !gateway) {\n      // default via dev en0\n      var interfaces = os.networkInterfaces();\n      var addresses = interfaces[iface];\n      if (!addresses || !addresses.length) return;\n      addresses.some(function (addr) {\n        if (addr.family.substring(2) === family && net.isIP(addr.address)) {\n          result = {\n            gateway: addr.address,\n            interface: iface ? iface : null\n          };\n          return true;\n        }\n      });\n    }\n  });\n\n  if (!result) {\n    throw new Error(\"Unable to determine default gateway\");\n  }\n\n  return result;\n};\n\nvar promise = function promise(family) {\n  return execa.stdout(\"ip\", args[family]).then(function (stdout) {\n    return parse(stdout, family);\n  });\n};\n\nvar sync = function sync(family) {\n  var result = execa.sync(\"ip\", args[family]);\n  return parse(result.stdout, family);\n};\n\nmodule.exports.v4 = function () {\n  return promise(\"v4\");\n};\n\nmodule.exports.v6 = function () {\n  return promise(\"v6\");\n};\n\nmodule.exports.v4.sync = function () {\n  return sync(\"v4\");\n};\n\nmodule.exports.v6.sync = function () {\n  return sync(\"v6\");\n};","map":{"version":3,"sources":["/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/default-gateway/linux.js"],"names":["net","require","os","execa","args","v4","v6","parse","stdout","family","result","trim","split","some","line","results","exec","gateway","substring","iface","isIP","interface","interfaces","networkInterfaces","addresses","length","addr","address","Error","promise","then","sync","module","exports"],"mappings":"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","sourcesContent":["\"use strict\";\n\nconst net = require(\"net\");\nconst os = require(\"os\");\nconst execa = require(\"execa\");\n\nconst args = {\n  v4: [\"-4\", \"r\"],\n  v6: [\"-6\", \"r\"],\n};\n\nconst parse = (stdout, family) => {\n  let result;\n\n  (stdout || \"\").trim().split(\"\\n\").some(line => {\n    const results = /default( via .+?)?( dev .+?)( |$)/.exec(line) || [];\n    const gateway = (results[1] || \"\").substring(5);\n    const iface = (results[2] || \"\").substring(5);\n    if (gateway && net.isIP(gateway)) { // default via 1.2.3.4 dev en0\n      result = {gateway, interface: (iface ? iface : null)};\n      return true;\n    } else if (iface && !gateway) { // default via dev en0\n      const interfaces = os.networkInterfaces();\n      const addresses = interfaces[iface];\n      if (!addresses || !addresses.length) return;\n\n      addresses.some(addr => {\n        if (addr.family.substring(2) === family && net.isIP(addr.address)) {\n          result = {gateway: addr.address, interface: (iface ? iface : null)};\n          return true;\n        }\n      });\n    }\n  });\n\n  if (!result) {\n    throw new Error(\"Unable to determine default gateway\");\n  }\n\n  return result;\n};\n\nconst promise = family => {\n  return execa.stdout(\"ip\", args[family]).then(stdout => {\n    return parse(stdout, family);\n  });\n};\n\nconst sync = family => {\n  const result = execa.sync(\"ip\", args[family]);\n  return parse(result.stdout, family);\n};\n\nmodule.exports.v4 = () => promise(\"v4\");\nmodule.exports.v6 = () => promise(\"v6\");\n\nmodule.exports.v4.sync = () => sync(\"v4\");\nmodule.exports.v6.sync = () => sync(\"v6\");\n"]},"metadata":{},"sourceType":"script"}