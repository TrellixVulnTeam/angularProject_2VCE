{"ast":null,"code":"/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n(function (factory) {\n  if (typeof module === \"object\" && typeof module.exports === \"object\") {\n    var v = factory(require, exports);\n    if (v !== undefined) module.exports = v;\n  } else if (typeof define === \"function\" && define.amd) {\n    define(\"@angular/compiler-cli/src/ngtsc/perf/src/clock\", [\"require\", \"exports\"], factory);\n  }\n})(function (require, exports) {\n  \"use strict\";\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.timeSinceInMicros = exports.mark = void 0;\n\n  function mark() {\n    return process.hrtime();\n  }\n\n  exports.mark = mark;\n\n  function timeSinceInMicros(mark) {\n    var delta = process.hrtime(mark);\n    return delta[0] * 1000000 + Math.floor(delta[1] / 1000);\n  }\n\n  exports.timeSinceInMicros = timeSinceInMicros;\n});","map":{"version":3,"sources":["../../../../../../../../../packages/compiler-cli/src/ngtsc/perf/src/clock.ts"],"names":[],"mappings":"AAAA;;;;;;AAMG;;;;;;;;;;;;;;;;AAOH,WAAgB,IAAhB,GAAoB;AAClB,WAAO,OAAO,CAAC,MAAR,EAAP;AACD;;AAFD,EAAA,OAAA,CAAA,IAAA,GAAA,IAAA;;AAIA,WAAgB,iBAAhB,CAAkC,IAAlC,EAA8C;AAC5C,QAAM,KAAK,GAAG,OAAO,CAAC,MAAR,CAAe,IAAf,CAAd;AACA,WAAQ,KAAK,CAAC,CAAD,CAAL,GAAW,OAAZ,GAAuB,IAAI,CAAC,KAAL,CAAW,KAAK,CAAC,CAAD,CAAL,GAAW,IAAtB,CAA9B;AACD;;AAHD,EAAA,OAAA,CAAA,iBAAA,GAAA,iBAAA","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n// This file uses 'process'\n/// <reference types=\"node\" />\n\nexport type HrTime = [number, number];\n\nexport function mark(): HrTime {\n  return process.hrtime();\n}\n\nexport function timeSinceInMicros(mark: HrTime): number {\n  const delta = process.hrtime(mark);\n  return (delta[0] * 1000000) + Math.floor(delta[1] / 1000);\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}