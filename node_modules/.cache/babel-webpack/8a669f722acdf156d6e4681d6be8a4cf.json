{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nvar _inherits = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar _classCallCheck = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/createClass\");\n\nvar AbstractMethodError = require(\"../AbstractMethodError\");\n\nvar BULK_SIZE = 1000;\n\nvar Hash = /*#__PURE__*/function () {\n  function Hash() {\n    _classCallCheck(this, Hash);\n  }\n\n  _createClass(Hash, [{\n    key: \"update\",\n    value:\n    /**\n     * Update hash {@link https://nodejs.org/api/crypto.html#crypto_hash_update_data_inputencoding}\n     * @param {string|Buffer} data data\n     * @param {string=} inputEncoding data encoding\n     * @returns {this} updated hash\n     */\n    function update(data, inputEncoding) {\n      throw new AbstractMethodError();\n    }\n    /**\n     * Calculates the digest {@link https://nodejs.org/api/crypto.html#crypto_hash_digest_encoding}\n     * @param {string=} encoding encoding of the return value\n     * @returns {string|Buffer} digest\n     */\n\n  }, {\n    key: \"digest\",\n    value: function digest(encoding) {\n      throw new AbstractMethodError();\n    }\n  }]);\n\n  return Hash;\n}();\n\nexports.Hash = Hash;\n/** @typedef {typeof Hash} HashConstructor */\n\nvar BulkUpdateDecorator = /*#__PURE__*/function (_Hash) {\n  _inherits(BulkUpdateDecorator, _Hash);\n\n  var _super = _createSuper(BulkUpdateDecorator);\n\n  /**\n   * @param {Hash} hash hash\n   */\n  function BulkUpdateDecorator(hash) {\n    var _this;\n\n    _classCallCheck(this, BulkUpdateDecorator);\n\n    _this = _super.call(this);\n    _this.hash = hash;\n    _this.buffer = \"\";\n    return _this;\n  }\n  /**\n   * Update hash {@link https://nodejs.org/api/crypto.html#crypto_hash_update_data_inputencoding}\n   * @param {string|Buffer} data data\n   * @param {string=} inputEncoding data encoding\n   * @returns {this} updated hash\n   */\n\n\n  _createClass(BulkUpdateDecorator, [{\n    key: \"update\",\n    value: function update(data, inputEncoding) {\n      if (inputEncoding !== undefined || typeof data !== \"string\" || data.length > BULK_SIZE) {\n        if (this.buffer.length > 0) {\n          this.hash.update(this.buffer);\n          this.buffer = \"\";\n        }\n\n        this.hash.update(data, inputEncoding);\n      } else {\n        this.buffer += data;\n\n        if (this.buffer.length > BULK_SIZE) {\n          this.hash.update(this.buffer);\n          this.buffer = \"\";\n        }\n      }\n\n      return this;\n    }\n    /**\n     * Calculates the digest {@link https://nodejs.org/api/crypto.html#crypto_hash_digest_encoding}\n     * @param {string=} encoding encoding of the return value\n     * @returns {string|Buffer} digest\n     */\n\n  }, {\n    key: \"digest\",\n    value: function digest(encoding) {\n      if (this.buffer.length > 0) {\n        this.hash.update(this.buffer);\n      }\n\n      var digestResult = this.hash.digest(encoding);\n      return typeof digestResult === \"string\" ? digestResult : digestResult.toString();\n    }\n  }]);\n\n  return BulkUpdateDecorator;\n}(Hash);\n/**\n * istanbul ignore next\n */\n\n\nvar DebugHash = /*#__PURE__*/function (_Hash2) {\n  _inherits(DebugHash, _Hash2);\n\n  var _super2 = _createSuper(DebugHash);\n\n  function DebugHash() {\n    var _this2;\n\n    _classCallCheck(this, DebugHash);\n\n    _this2 = _super2.call(this);\n    _this2.string = \"\";\n    return _this2;\n  }\n  /**\n   * Update hash {@link https://nodejs.org/api/crypto.html#crypto_hash_update_data_inputencoding}\n   * @param {string|Buffer} data data\n   * @param {string=} inputEncoding data encoding\n   * @returns {this} updated hash\n   */\n\n\n  _createClass(DebugHash, [{\n    key: \"update\",\n    value: function update(data, inputEncoding) {\n      if (typeof data !== \"string\") data = data.toString(\"utf-8\");\n      this.string += data;\n      return this;\n    }\n    /**\n     * Calculates the digest {@link https://nodejs.org/api/crypto.html#crypto_hash_digest_encoding}\n     * @param {string=} encoding encoding of the return value\n     * @returns {string|Buffer} digest\n     */\n\n  }, {\n    key: \"digest\",\n    value: function digest(encoding) {\n      return this.string.replace(/[^a-z0-9]+/gi, function (m) {\n        return Buffer.from(m).toString(\"hex\");\n      });\n    }\n  }]);\n\n  return DebugHash;\n}(Hash);\n/**\n * Creates a hash by name or function\n * @param {string | HashConstructor} algorithm the algorithm name or a constructor creating a hash\n * @returns {Hash} the hash\n */\n\n\nmodule.exports = function (algorithm) {\n  if (typeof algorithm === \"function\") {\n    return new BulkUpdateDecorator(new algorithm());\n  }\n\n  switch (algorithm) {\n    // TODO add non-cryptographic algorithm here\n    case \"debug\":\n      return new DebugHash();\n\n    default:\n      return new BulkUpdateDecorator(require(\"crypto\").createHash(algorithm));\n  }\n};","map":{"version":3,"sources":["/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/webpack/lib/util/createHash.js"],"names":["AbstractMethodError","require","BULK_SIZE","Hash","data","inputEncoding","encoding","exports","BulkUpdateDecorator","hash","buffer","undefined","length","update","digestResult","digest","toString","DebugHash","string","replace","m","Buffer","from","module","algorithm","createHash"],"mappings":"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","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst AbstractMethodError = require(\"../AbstractMethodError\");\n\nconst BULK_SIZE = 1000;\n\nclass Hash {\n\t/**\n\t * Update hash {@link https://nodejs.org/api/crypto.html#crypto_hash_update_data_inputencoding}\n\t * @param {string|Buffer} data data\n\t * @param {string=} inputEncoding data encoding\n\t * @returns {this} updated hash\n\t */\n\tupdate(data, inputEncoding) {\n\t\tthrow new AbstractMethodError();\n\t}\n\n\t/**\n\t * Calculates the digest {@link https://nodejs.org/api/crypto.html#crypto_hash_digest_encoding}\n\t * @param {string=} encoding encoding of the return value\n\t * @returns {string|Buffer} digest\n\t */\n\tdigest(encoding) {\n\t\tthrow new AbstractMethodError();\n\t}\n}\n\nexports.Hash = Hash;\n/** @typedef {typeof Hash} HashConstructor */\n\nclass BulkUpdateDecorator extends Hash {\n\t/**\n\t * @param {Hash} hash hash\n\t */\n\tconstructor(hash) {\n\t\tsuper();\n\t\tthis.hash = hash;\n\t\tthis.buffer = \"\";\n\t}\n\n\t/**\n\t * Update hash {@link https://nodejs.org/api/crypto.html#crypto_hash_update_data_inputencoding}\n\t * @param {string|Buffer} data data\n\t * @param {string=} inputEncoding data encoding\n\t * @returns {this} updated hash\n\t */\n\tupdate(data, inputEncoding) {\n\t\tif (\n\t\t\tinputEncoding !== undefined ||\n\t\t\ttypeof data !== \"string\" ||\n\t\t\tdata.length > BULK_SIZE\n\t\t) {\n\t\t\tif (this.buffer.length > 0) {\n\t\t\t\tthis.hash.update(this.buffer);\n\t\t\t\tthis.buffer = \"\";\n\t\t\t}\n\t\t\tthis.hash.update(data, inputEncoding);\n\t\t} else {\n\t\t\tthis.buffer += data;\n\t\t\tif (this.buffer.length > BULK_SIZE) {\n\t\t\t\tthis.hash.update(this.buffer);\n\t\t\t\tthis.buffer = \"\";\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Calculates the digest {@link https://nodejs.org/api/crypto.html#crypto_hash_digest_encoding}\n\t * @param {string=} encoding encoding of the return value\n\t * @returns {string|Buffer} digest\n\t */\n\tdigest(encoding) {\n\t\tif (this.buffer.length > 0) {\n\t\t\tthis.hash.update(this.buffer);\n\t\t}\n\t\tvar digestResult = this.hash.digest(encoding);\n\t\treturn typeof digestResult === \"string\"\n\t\t\t? digestResult\n\t\t\t: digestResult.toString();\n\t}\n}\n\n/**\n * istanbul ignore next\n */\nclass DebugHash extends Hash {\n\tconstructor() {\n\t\tsuper();\n\t\tthis.string = \"\";\n\t}\n\n\t/**\n\t * Update hash {@link https://nodejs.org/api/crypto.html#crypto_hash_update_data_inputencoding}\n\t * @param {string|Buffer} data data\n\t * @param {string=} inputEncoding data encoding\n\t * @returns {this} updated hash\n\t */\n\tupdate(data, inputEncoding) {\n\t\tif (typeof data !== \"string\") data = data.toString(\"utf-8\");\n\t\tthis.string += data;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Calculates the digest {@link https://nodejs.org/api/crypto.html#crypto_hash_digest_encoding}\n\t * @param {string=} encoding encoding of the return value\n\t * @returns {string|Buffer} digest\n\t */\n\tdigest(encoding) {\n\t\treturn this.string.replace(/[^a-z0-9]+/gi, m =>\n\t\t\tBuffer.from(m).toString(\"hex\")\n\t\t);\n\t}\n}\n\n/**\n * Creates a hash by name or function\n * @param {string | HashConstructor} algorithm the algorithm name or a constructor creating a hash\n * @returns {Hash} the hash\n */\nmodule.exports = algorithm => {\n\tif (typeof algorithm === \"function\") {\n\t\treturn new BulkUpdateDecorator(new algorithm());\n\t}\n\tswitch (algorithm) {\n\t\t// TODO add non-cryptographic algorithm here\n\t\tcase \"debug\":\n\t\t\treturn new DebugHash();\n\t\tdefault:\n\t\t\treturn new BulkUpdateDecorator(require(\"crypto\").createHash(algorithm));\n\t}\n};\n"]},"metadata":{},"sourceType":"script"}