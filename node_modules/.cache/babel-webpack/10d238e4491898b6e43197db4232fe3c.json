{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n/** @typedef {import(\"./NormalModule\")} NormalModule */\n\n/** @typedef {import(\"./RuntimeTemplate\")} RuntimeTemplate */\n\n/** @typedef {import(\"webpack-sources\").Source} Source */\n\n/** @typedef {import(\"./Dependency\").DependencyTemplate} DependencyTemplate */\n\n/**\n *\n */\n\nvar _inherits = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar _classCallCheck = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/createClass\");\n\nvar Generator = /*#__PURE__*/function () {\n  function Generator() {\n    _classCallCheck(this, Generator);\n  }\n\n  _createClass(Generator, [{\n    key: \"generate\",\n    value:\n    /**\n     * @abstract\n     * @param {NormalModule} module module for which the code should be generated\n     * @param {Map<Function, DependencyTemplate>} dependencyTemplates mapping from dependencies to templates\n     * @param {RuntimeTemplate} runtimeTemplate the runtime template\n     * @param {string} type which kind of code should be generated\n     * @returns {Source} generated code\n     */\n    function generate(module, dependencyTemplates, runtimeTemplate, type) {\n      throw new Error(\"Generator.generate: must be overridden\");\n    }\n  }], [{\n    key: \"byType\",\n    value: function byType(map) {\n      return new ByTypeGenerator(map);\n    }\n  }]);\n\n  return Generator;\n}();\n\nvar ByTypeGenerator = /*#__PURE__*/function (_Generator) {\n  _inherits(ByTypeGenerator, _Generator);\n\n  var _super = _createSuper(ByTypeGenerator);\n\n  function ByTypeGenerator(map) {\n    var _this;\n\n    _classCallCheck(this, ByTypeGenerator);\n\n    _this = _super.call(this);\n    _this.map = map;\n    return _this;\n  }\n  /**\n   * @param {NormalModule} module module for which the code should be generated\n   * @param {Map<Function, DependencyTemplate>} dependencyTemplates mapping from dependencies to templates\n   * @param {RuntimeTemplate} runtimeTemplate the runtime template\n   * @param {string} type which kind of code should be generated\n   * @returns {Source} generated code\n   */\n\n\n  _createClass(ByTypeGenerator, [{\n    key: \"generate\",\n    value: function generate(module, dependencyTemplates, runtimeTemplate, type) {\n      var generator = this.map[type];\n\n      if (!generator) {\n        throw new Error(\"Generator.byType: no generator specified for \".concat(type));\n      }\n\n      return generator.generate(module, dependencyTemplates, runtimeTemplate, type);\n    }\n  }]);\n\n  return ByTypeGenerator;\n}(Generator);\n\nmodule.exports = Generator;","map":{"version":3,"sources":["/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/webpack/lib/Generator.js"],"names":["Generator","module","dependencyTemplates","runtimeTemplate","type","Error","map","ByTypeGenerator","generator","generate","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AAEA;;AACA;;AACA;;AACA;;AAEA;AACA;AACA;;;;;;;;;;IACMA,S;;;;;;;;AAKL;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACC,sBAASC,MAAT,EAAiBC,mBAAjB,EAAsCC,eAAtC,EAAuDC,IAAvD,EAA6D;AAC5D,YAAM,IAAIC,KAAJ,CAAU,wCAAV,CAAN;AACA;;;WAdD,gBAAcC,GAAd,EAAmB;AAClB,aAAO,IAAIC,eAAJ,CAAoBD,GAApB,CAAP;AACA;;;;;;IAeIC,e;;;;;AACL,2BAAYD,GAAZ,EAAiB;AAAA;;AAAA;;AAChB;AACA,UAAKA,GAAL,GAAWA,GAAX;AAFgB;AAGhB;AAED;AACD;AACA;AACA;AACA;AACA;AACA;;;;;WACC,kBAASL,MAAT,EAAiBC,mBAAjB,EAAsCC,eAAtC,EAAuDC,IAAvD,EAA6D;AAC5D,UAAMI,SAAS,GAAG,KAAKF,GAAL,CAASF,IAAT,CAAlB;;AACA,UAAI,CAACI,SAAL,EAAgB;AACf,cAAM,IAAIH,KAAJ,wDAA0DD,IAA1D,EAAN;AACA;;AACD,aAAOI,SAAS,CAACC,QAAV,CACNR,MADM,EAENC,mBAFM,EAGNC,eAHM,EAINC,IAJM,CAAP;AAMA;;;;EAxB4BJ,S;;AA2B9BC,MAAM,CAACS,OAAP,GAAiBV,SAAjB","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\n/** @typedef {import(\"./NormalModule\")} NormalModule */\n/** @typedef {import(\"./RuntimeTemplate\")} RuntimeTemplate */\n/** @typedef {import(\"webpack-sources\").Source} Source */\n/** @typedef {import(\"./Dependency\").DependencyTemplate} DependencyTemplate */\n\n/**\n *\n */\nclass Generator {\n\tstatic byType(map) {\n\t\treturn new ByTypeGenerator(map);\n\t}\n\n\t/**\n\t * @abstract\n\t * @param {NormalModule} module module for which the code should be generated\n\t * @param {Map<Function, DependencyTemplate>} dependencyTemplates mapping from dependencies to templates\n\t * @param {RuntimeTemplate} runtimeTemplate the runtime template\n\t * @param {string} type which kind of code should be generated\n\t * @returns {Source} generated code\n\t */\n\tgenerate(module, dependencyTemplates, runtimeTemplate, type) {\n\t\tthrow new Error(\"Generator.generate: must be overridden\");\n\t}\n}\n\nclass ByTypeGenerator extends Generator {\n\tconstructor(map) {\n\t\tsuper();\n\t\tthis.map = map;\n\t}\n\n\t/**\n\t * @param {NormalModule} module module for which the code should be generated\n\t * @param {Map<Function, DependencyTemplate>} dependencyTemplates mapping from dependencies to templates\n\t * @param {RuntimeTemplate} runtimeTemplate the runtime template\n\t * @param {string} type which kind of code should be generated\n\t * @returns {Source} generated code\n\t */\n\tgenerate(module, dependencyTemplates, runtimeTemplate, type) {\n\t\tconst generator = this.map[type];\n\t\tif (!generator) {\n\t\t\tthrow new Error(`Generator.byType: no generator specified for ${type}`);\n\t\t}\n\t\treturn generator.generate(\n\t\t\tmodule,\n\t\t\tdependencyTemplates,\n\t\t\truntimeTemplate,\n\t\t\ttype\n\t\t);\n\t}\n}\n\nmodule.exports = Generator;\n"]},"metadata":{},"sourceType":"script"}