{"ast":null,"code":"/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n(function (factory) {\n  if (typeof module === \"object\" && typeof module.exports === \"object\") {\n    var v = factory(require, exports);\n    if (v !== undefined) module.exports = v;\n  } else if (typeof define === \"function\" && define.amd) {\n    define(\"@angular/compiler/src/identifiers\", [\"require\", \"exports\"], factory);\n  }\n})(function (require, exports) {\n  \"use strict\";\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.createTokenForExternalReference = exports.createTokenForReference = exports.Identifiers = void 0;\n  var CORE = '@angular/core';\n\n  var Identifiers =\n  /** @class */\n  function () {\n    function Identifiers() {}\n\n    Identifiers.ANALYZE_FOR_ENTRY_COMPONENTS = {\n      name: 'ANALYZE_FOR_ENTRY_COMPONENTS',\n      moduleName: CORE\n    };\n    Identifiers.ElementRef = {\n      name: 'ElementRef',\n      moduleName: CORE\n    };\n    Identifiers.NgModuleRef = {\n      name: 'NgModuleRef',\n      moduleName: CORE\n    };\n    Identifiers.ViewContainerRef = {\n      name: 'ViewContainerRef',\n      moduleName: CORE\n    };\n    Identifiers.ChangeDetectorRef = {\n      name: 'ChangeDetectorRef',\n      moduleName: CORE\n    };\n    Identifiers.QueryList = {\n      name: 'QueryList',\n      moduleName: CORE\n    };\n    Identifiers.TemplateRef = {\n      name: 'TemplateRef',\n      moduleName: CORE\n    };\n    Identifiers.Renderer2 = {\n      name: 'Renderer2',\n      moduleName: CORE\n    };\n    Identifiers.CodegenComponentFactoryResolver = {\n      name: 'ɵCodegenComponentFactoryResolver',\n      moduleName: CORE\n    };\n    Identifiers.ComponentFactoryResolver = {\n      name: 'ComponentFactoryResolver',\n      moduleName: CORE\n    };\n    Identifiers.ComponentFactory = {\n      name: 'ComponentFactory',\n      moduleName: CORE\n    };\n    Identifiers.ComponentRef = {\n      name: 'ComponentRef',\n      moduleName: CORE\n    };\n    Identifiers.NgModuleFactory = {\n      name: 'NgModuleFactory',\n      moduleName: CORE\n    };\n    Identifiers.createModuleFactory = {\n      name: 'ɵcmf',\n      moduleName: CORE\n    };\n    Identifiers.moduleDef = {\n      name: 'ɵmod',\n      moduleName: CORE\n    };\n    Identifiers.moduleProviderDef = {\n      name: 'ɵmpd',\n      moduleName: CORE\n    };\n    Identifiers.RegisterModuleFactoryFn = {\n      name: 'ɵregisterModuleFactory',\n      moduleName: CORE\n    };\n    Identifiers.inject = {\n      name: 'ɵɵinject',\n      moduleName: CORE\n    };\n    Identifiers.directiveInject = {\n      name: 'ɵɵdirectiveInject',\n      moduleName: CORE\n    };\n    Identifiers.INJECTOR = {\n      name: 'INJECTOR',\n      moduleName: CORE\n    };\n    Identifiers.Injector = {\n      name: 'Injector',\n      moduleName: CORE\n    };\n    Identifiers.ɵɵdefineInjectable = {\n      name: 'ɵɵdefineInjectable',\n      moduleName: CORE\n    };\n    Identifiers.InjectableDef = {\n      name: 'ɵɵInjectableDef',\n      moduleName: CORE\n    };\n    Identifiers.ViewEncapsulation = {\n      name: 'ViewEncapsulation',\n      moduleName: CORE\n    };\n    Identifiers.ChangeDetectionStrategy = {\n      name: 'ChangeDetectionStrategy',\n      moduleName: CORE\n    };\n    Identifiers.SecurityContext = {\n      name: 'SecurityContext',\n      moduleName: CORE\n    };\n    Identifiers.LOCALE_ID = {\n      name: 'LOCALE_ID',\n      moduleName: CORE\n    };\n    Identifiers.TRANSLATIONS_FORMAT = {\n      name: 'TRANSLATIONS_FORMAT',\n      moduleName: CORE\n    };\n    Identifiers.inlineInterpolate = {\n      name: 'ɵinlineInterpolate',\n      moduleName: CORE\n    };\n    Identifiers.interpolate = {\n      name: 'ɵinterpolate',\n      moduleName: CORE\n    };\n    Identifiers.EMPTY_ARRAY = {\n      name: 'ɵEMPTY_ARRAY',\n      moduleName: CORE\n    };\n    Identifiers.EMPTY_MAP = {\n      name: 'ɵEMPTY_MAP',\n      moduleName: CORE\n    };\n    Identifiers.Renderer = {\n      name: 'Renderer',\n      moduleName: CORE\n    };\n    Identifiers.viewDef = {\n      name: 'ɵvid',\n      moduleName: CORE\n    };\n    Identifiers.elementDef = {\n      name: 'ɵeld',\n      moduleName: CORE\n    };\n    Identifiers.anchorDef = {\n      name: 'ɵand',\n      moduleName: CORE\n    };\n    Identifiers.textDef = {\n      name: 'ɵted',\n      moduleName: CORE\n    };\n    Identifiers.directiveDef = {\n      name: 'ɵdid',\n      moduleName: CORE\n    };\n    Identifiers.providerDef = {\n      name: 'ɵprd',\n      moduleName: CORE\n    };\n    Identifiers.queryDef = {\n      name: 'ɵqud',\n      moduleName: CORE\n    };\n    Identifiers.pureArrayDef = {\n      name: 'ɵpad',\n      moduleName: CORE\n    };\n    Identifiers.pureObjectDef = {\n      name: 'ɵpod',\n      moduleName: CORE\n    };\n    Identifiers.purePipeDef = {\n      name: 'ɵppd',\n      moduleName: CORE\n    };\n    Identifiers.pipeDef = {\n      name: 'ɵpid',\n      moduleName: CORE\n    };\n    Identifiers.nodeValue = {\n      name: 'ɵnov',\n      moduleName: CORE\n    };\n    Identifiers.ngContentDef = {\n      name: 'ɵncd',\n      moduleName: CORE\n    };\n    Identifiers.unwrapValue = {\n      name: 'ɵunv',\n      moduleName: CORE\n    };\n    Identifiers.createRendererType2 = {\n      name: 'ɵcrt',\n      moduleName: CORE\n    }; // type only\n\n    Identifiers.RendererType2 = {\n      name: 'RendererType2',\n      moduleName: CORE\n    }; // type only\n\n    Identifiers.ViewDefinition = {\n      name: 'ɵViewDefinition',\n      moduleName: CORE\n    };\n    Identifiers.createComponentFactory = {\n      name: 'ɵccf',\n      moduleName: CORE\n    };\n    Identifiers.setClassMetadata = {\n      name: 'ɵsetClassMetadata',\n      moduleName: CORE\n    };\n    return Identifiers;\n  }();\n\n  exports.Identifiers = Identifiers;\n\n  function createTokenForReference(reference) {\n    return {\n      identifier: {\n        reference: reference\n      }\n    };\n  }\n\n  exports.createTokenForReference = createTokenForReference;\n\n  function createTokenForExternalReference(reflector, reference) {\n    return createTokenForReference(reflector.resolveExternalReference(reference));\n  }\n\n  exports.createTokenForExternalReference = createTokenForExternalReference;\n});","map":{"version":3,"sources":["../../../../../../packages/compiler/src/identifiers.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CompileTokenMetadata} from './compile_metadata';\nimport {CompileReflector} from './compile_reflector';\nimport * as o from './output/output_ast';\n\nconst CORE = '@angular/core';\n\nexport class Identifiers {\n  static ANALYZE_FOR_ENTRY_COMPONENTS: o.ExternalReference = {\n    name: 'ANALYZE_FOR_ENTRY_COMPONENTS',\n    moduleName: CORE,\n\n  };\n  static ElementRef: o.ExternalReference = {name: 'ElementRef', moduleName: CORE};\n  static NgModuleRef: o.ExternalReference = {name: 'NgModuleRef', moduleName: CORE};\n  static ViewContainerRef: o.ExternalReference = {name: 'ViewContainerRef', moduleName: CORE};\n  static ChangeDetectorRef: o.ExternalReference = {\n    name: 'ChangeDetectorRef',\n    moduleName: CORE,\n\n  };\n  static QueryList: o.ExternalReference = {name: 'QueryList', moduleName: CORE};\n  static TemplateRef: o.ExternalReference = {name: 'TemplateRef', moduleName: CORE};\n  static Renderer2: o.ExternalReference = {name: 'Renderer2', moduleName: CORE};\n  static CodegenComponentFactoryResolver: o.ExternalReference = {\n    name: 'ɵCodegenComponentFactoryResolver',\n    moduleName: CORE,\n\n  };\n  static ComponentFactoryResolver: o.ExternalReference = {\n    name: 'ComponentFactoryResolver',\n    moduleName: CORE,\n\n  };\n  static ComponentFactory: o.ExternalReference = {name: 'ComponentFactory', moduleName: CORE};\n  static ComponentRef: o.ExternalReference = {name: 'ComponentRef', moduleName: CORE};\n  static NgModuleFactory: o.ExternalReference = {name: 'NgModuleFactory', moduleName: CORE};\n  static createModuleFactory: o.ExternalReference = {\n    name: 'ɵcmf',\n    moduleName: CORE,\n\n  };\n  static moduleDef: o.ExternalReference = {\n    name: 'ɵmod',\n    moduleName: CORE,\n\n  };\n  static moduleProviderDef: o.ExternalReference = {\n    name: 'ɵmpd',\n    moduleName: CORE,\n\n  };\n  static RegisterModuleFactoryFn: o.ExternalReference = {\n    name: 'ɵregisterModuleFactory',\n    moduleName: CORE,\n\n  };\n  static inject: o.ExternalReference = {name: 'ɵɵinject', moduleName: CORE};\n  static directiveInject: o.ExternalReference = {name: 'ɵɵdirectiveInject', moduleName: CORE};\n  static INJECTOR: o.ExternalReference = {name: 'INJECTOR', moduleName: CORE};\n  static Injector: o.ExternalReference = {name: 'Injector', moduleName: CORE};\n  static ɵɵdefineInjectable: o.ExternalReference = {name: 'ɵɵdefineInjectable', moduleName: CORE};\n  static InjectableDef: o.ExternalReference = {name: 'ɵɵInjectableDef', moduleName: CORE};\n  static ViewEncapsulation: o.ExternalReference = {\n    name: 'ViewEncapsulation',\n    moduleName: CORE,\n\n  };\n  static ChangeDetectionStrategy: o.ExternalReference = {\n    name: 'ChangeDetectionStrategy',\n    moduleName: CORE,\n\n  };\n  static SecurityContext: o.ExternalReference = {\n    name: 'SecurityContext',\n    moduleName: CORE,\n\n  };\n  static LOCALE_ID: o.ExternalReference = {name: 'LOCALE_ID', moduleName: CORE};\n  static TRANSLATIONS_FORMAT: o.ExternalReference = {\n    name: 'TRANSLATIONS_FORMAT',\n    moduleName: CORE,\n\n  };\n  static inlineInterpolate: o.ExternalReference = {\n    name: 'ɵinlineInterpolate',\n    moduleName: CORE,\n  };\n  static interpolate: o.ExternalReference = {name: 'ɵinterpolate', moduleName: CORE};\n  static EMPTY_ARRAY: o.ExternalReference = {name: 'ɵEMPTY_ARRAY', moduleName: CORE};\n  static EMPTY_MAP: o.ExternalReference = {name: 'ɵEMPTY_MAP', moduleName: CORE};\n  static Renderer: o.ExternalReference = {name: 'Renderer', moduleName: CORE};\n  static viewDef: o.ExternalReference = {name: 'ɵvid', moduleName: CORE};\n  static elementDef: o.ExternalReference = {name: 'ɵeld', moduleName: CORE};\n  static anchorDef: o.ExternalReference = {name: 'ɵand', moduleName: CORE};\n  static textDef: o.ExternalReference = {name: 'ɵted', moduleName: CORE};\n  static directiveDef: o.ExternalReference = {name: 'ɵdid', moduleName: CORE};\n  static providerDef: o.ExternalReference = {name: 'ɵprd', moduleName: CORE};\n  static queryDef: o.ExternalReference = {name: 'ɵqud', moduleName: CORE};\n  static pureArrayDef: o.ExternalReference = {name: 'ɵpad', moduleName: CORE};\n  static pureObjectDef: o.ExternalReference = {name: 'ɵpod', moduleName: CORE};\n  static purePipeDef: o.ExternalReference = {name: 'ɵppd', moduleName: CORE};\n  static pipeDef: o.ExternalReference = {name: 'ɵpid', moduleName: CORE};\n  static nodeValue: o.ExternalReference = {name: 'ɵnov', moduleName: CORE};\n  static ngContentDef: o.ExternalReference = {name: 'ɵncd', moduleName: CORE};\n  static unwrapValue: o.ExternalReference = {name: 'ɵunv', moduleName: CORE};\n  static createRendererType2: o.ExternalReference = {name: 'ɵcrt', moduleName: CORE};\n  // type only\n  static RendererType2: o.ExternalReference = {\n    name: 'RendererType2',\n    moduleName: CORE,\n\n  };\n  // type only\n  static ViewDefinition: o.ExternalReference = {\n    name: 'ɵViewDefinition',\n    moduleName: CORE,\n  };\n  static createComponentFactory: o.ExternalReference = {name: 'ɵccf', moduleName: CORE};\n  static setClassMetadata: o.ExternalReference = {name: 'ɵsetClassMetadata', moduleName: CORE};\n}\n\nexport function createTokenForReference(reference: any): CompileTokenMetadata {\n  return {identifier: {reference: reference}};\n}\n\nexport function createTokenForExternalReference(\n    reflector: CompileReflector, reference: o.ExternalReference): CompileTokenMetadata {\n  return createTokenForReference(reflector.resolveExternalReference(reference));\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}