{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/createSuper\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.PatternMatchingHost = void 0;\n\nvar resolver_1 = require(\"./resolver\");\n/**\n */\n\n\nvar PatternMatchingHost = /*#__PURE__*/function (_resolver_1$ResolverH) {\n  _inherits(PatternMatchingHost, _resolver_1$ResolverH);\n\n  var _super = _createSuper(PatternMatchingHost);\n\n  function PatternMatchingHost() {\n    var _this;\n\n    _classCallCheck(this, PatternMatchingHost);\n\n    _this = _super.apply(this, arguments);\n    _this._patterns = new Map();\n    return _this;\n  }\n\n  _createClass(PatternMatchingHost, [{\n    key: \"addPattern\",\n    value: function addPattern(pattern, replacementFn) {\n      // Simple GLOB pattern replacement.\n      var reString = '^(' + (Array.isArray(pattern) ? pattern : [pattern]).map(function (ex) {\n        return '(' + ex.split(/[\\/\\\\]/g).map(function (f) {\n          return f.replace(/[\\-\\[\\]{}()+?.^$|]/g, '\\\\$&').replace(/^\\*\\*/g, '(.+?)?').replace(/\\*/g, '[^/\\\\\\\\]*');\n        }).join('[\\/\\\\\\\\]') + ')';\n      }).join('|') + ')($|/|\\\\\\\\)';\n\n      this._patterns.set(new RegExp(reString), replacementFn);\n    }\n  }, {\n    key: \"_resolve\",\n    value: function _resolve(path) {\n      var newPath = path;\n\n      this._patterns.forEach(function (fn, re) {\n        if (re.test(path)) {\n          newPath = fn(newPath);\n        }\n      });\n\n      return newPath;\n    }\n  }]);\n\n  return PatternMatchingHost;\n}(resolver_1.ResolverHost);\n\nexports.PatternMatchingHost = PatternMatchingHost;","map":{"version":3,"sources":["/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@angular-devkit/build-angular/node_modules/@angular-devkit/core/src/virtual-fs/host/pattern.js"],"names":["Object","defineProperty","exports","value","PatternMatchingHost","resolver_1","require","arguments","_patterns","Map","pattern","replacementFn","reString","Array","isArray","map","ex","split","f","replace","join","set","RegExp","path","newPath","forEach","fn","re","test","ResolverHost"],"mappings":"AAAA;;;;;;;;;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,mBAAR,GAA8B,KAAK,CAAnC;;AACA,IAAMC,UAAU,GAAGC,OAAO,CAAC,YAAD,CAA1B;AACA;AACA;;;IACMF,mB;;;;;AACF,iCAAc;AAAA;;AAAA;;AACV,+BAASG,SAAT;AACA,UAAKC,SAAL,GAAiB,IAAIC,GAAJ,EAAjB;AAFU;AAGb;;;;WACD,oBAAWC,OAAX,EAAoBC,aAApB,EAAmC;AAC/B;AACA,UAAMC,QAAQ,GAAG,OACX,CAACC,KAAK,CAACC,OAAN,CAAcJ,OAAd,IAAyBA,OAAzB,GAAmC,CAACA,OAAD,CAApC,EACGK,GADH,CACO,UAAAC,EAAE;AAAA,eAAI,MACTA,EAAE,CAACC,KAAH,CAAS,SAAT,EAAoBF,GAApB,CAAwB,UAAAG,CAAC;AAAA,iBAAIA,CAAC,CAC3BC,OAD0B,CAClB,qBADkB,EACK,MADL,EAE1BA,OAF0B,CAElB,QAFkB,EAER,QAFQ,EAG1BA,OAH0B,CAGlB,KAHkB,EAGX,WAHW,CAAJ;AAAA,SAAzB,EAIGC,IAJH,CAIQ,UAJR,CADS,GAMT,GANK;AAAA,OADT,EAQGA,IARH,CAQQ,GARR,CADW,GAUX,aAVN;;AAWA,WAAKZ,SAAL,CAAea,GAAf,CAAmB,IAAIC,MAAJ,CAAWV,QAAX,CAAnB,EAAyCD,aAAzC;AACH;;;WACD,kBAASY,IAAT,EAAe;AACX,UAAIC,OAAO,GAAGD,IAAd;;AACA,WAAKf,SAAL,CAAeiB,OAAf,CAAuB,UAACC,EAAD,EAAKC,EAAL,EAAY;AAC/B,YAAIA,EAAE,CAACC,IAAH,CAAQL,IAAR,CAAJ,EAAmB;AACfC,UAAAA,OAAO,GAAGE,EAAE,CAACF,OAAD,CAAZ;AACH;AACJ,OAJD;;AAKA,aAAOA,OAAP;AACH;;;;EA5B6BnB,UAAU,CAACwB,Y;;AA8B7C3B,OAAO,CAACE,mBAAR,GAA8BA,mBAA9B","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.PatternMatchingHost = void 0;\nconst resolver_1 = require(\"./resolver\");\n/**\n */\nclass PatternMatchingHost extends resolver_1.ResolverHost {\n    constructor() {\n        super(...arguments);\n        this._patterns = new Map();\n    }\n    addPattern(pattern, replacementFn) {\n        // Simple GLOB pattern replacement.\n        const reString = '^('\n            + (Array.isArray(pattern) ? pattern : [pattern])\n                .map(ex => '('\n                + ex.split(/[\\/\\\\]/g).map(f => f\n                    .replace(/[\\-\\[\\]{}()+?.^$|]/g, '\\\\$&')\n                    .replace(/^\\*\\*/g, '(.+?)?')\n                    .replace(/\\*/g, '[^/\\\\\\\\]*'))\n                    .join('[\\/\\\\\\\\]')\n                + ')')\n                .join('|')\n            + ')($|/|\\\\\\\\)';\n        this._patterns.set(new RegExp(reString), replacementFn);\n    }\n    _resolve(path) {\n        let newPath = path;\n        this._patterns.forEach((fn, re) => {\n            if (re.test(path)) {\n                newPath = fn(newPath);\n            }\n        });\n        return newPath;\n    }\n}\nexports.PatternMatchingHost = PatternMatchingHost;\n"]},"metadata":{},"sourceType":"script"}