{"ast":null,"code":"/**\n * @fileoverview log4js is a library to log in JavaScript in similar manner\n * than in log4j for Java (but not really).\n *\n * <h3>Example:</h3>\n * <pre>\n *  const logging = require('log4js');\n *  const log = logging.getLogger('some-category');\n *\n *  //call the log\n *  log.trace('trace me' );\n * </pre>\n *\n * NOTE: the authors below are the original browser-based log4js authors\n * don't try to contact them about bugs in this version :)\n * @author Stephan Strittmatter - http://jroller.com/page/stritti\n * @author Seth Chisamore - http://www.chisamore.com\n * @since 2005-05-20\n * Website: http://log4js.berlios.de\n */\nvar debug = require(\"debug\")(\"log4js:main\");\n\nvar fs = require(\"fs\");\n\nvar deepClone = require(\"rfdc\")({\n  proto: true\n});\n\nvar configuration = require(\"./configuration\");\n\nvar layouts = require(\"./layouts\");\n\nvar levels = require(\"./levels\");\n\nvar appenders = require(\"./appenders\");\n\nvar categories = require(\"./categories\");\n\nvar Logger = require(\"./logger\");\n\nvar clustering = require(\"./clustering\");\n\nvar connectLogger = require(\"./connect-logger\");\n\nvar enabled = false;\n\nfunction sendLogEventToAppender(logEvent) {\n  if (!enabled) return;\n  debug(\"Received log event \", logEvent);\n  var categoryAppenders = categories.appendersForCategory(logEvent.categoryName);\n  categoryAppenders.forEach(function (appender) {\n    appender(logEvent);\n  });\n}\n\nfunction loadConfigurationFile(filename) {\n  debug(\"Loading configuration from \".concat(filename));\n\n  try {\n    return JSON.parse(fs.readFileSync(filename, \"utf8\"));\n  } catch (e) {\n    throw new Error(\"Problem reading config from file \\\"\".concat(filename, \"\\\". Error was \").concat(e.message), e);\n  }\n}\n\nfunction configure(configurationFileOrObject) {\n  var configObject = configurationFileOrObject;\n\n  if (typeof configObject === \"string\") {\n    configObject = loadConfigurationFile(configurationFileOrObject);\n  }\n\n  debug(\"Configuration is \".concat(configObject));\n  configuration.configure(deepClone(configObject));\n  clustering.onMessage(sendLogEventToAppender);\n  enabled = true; // eslint-disable-next-line no-use-before-define\n\n  return log4js;\n}\n/**\n * Shutdown all log appenders. This will first disable all writing to appenders\n * and then call the shutdown function each appender.\n *\n * @params {Function} cb - The callback to be invoked once all appenders have\n *  shutdown. If an error occurs, the callback will be given the error object\n *  as the first argument.\n */\n\n\nfunction shutdown(cb) {\n  debug(\"Shutdown called. Disabling all log writing.\"); // First, disable all writing to appenders. This prevents appenders from\n  // not being able to be drained because of run-away log writes.\n\n  enabled = false; // Call each of the shutdown functions in parallel\n\n  var appendersToCheck = Array.from(appenders.values());\n  var shutdownFunctions = appendersToCheck.reduceRight(function (accum, next) {\n    return next.shutdown ? accum + 1 : accum;\n  }, 0);\n  var completed = 0;\n  var error;\n  debug(\"Found \".concat(shutdownFunctions, \" appenders with shutdown functions.\"));\n\n  function complete(err) {\n    error = error || err;\n    completed += 1;\n    debug(\"Appender shutdowns complete: \".concat(completed, \" / \").concat(shutdownFunctions));\n\n    if (completed >= shutdownFunctions) {\n      debug(\"All shutdown functions completed.\");\n\n      if (cb) {\n        cb(error);\n      }\n    }\n  }\n\n  if (shutdownFunctions === 0) {\n    debug(\"No appenders with shutdown functions found.\");\n    return cb !== undefined && cb();\n  }\n\n  appendersToCheck.filter(function (a) {\n    return a.shutdown;\n  }).forEach(function (a) {\n    return a.shutdown(complete);\n  });\n  return null;\n}\n/**\n * Get a logger instance.\n * @static\n * @param loggerCategoryName\n * @return {Logger} instance of logger for the category\n */\n\n\nfunction getLogger(category) {\n  if (!enabled) {\n    configure(process.env.LOG4JS_CONFIG || {\n      appenders: {\n        out: {\n          type: \"stdout\"\n        }\n      },\n      categories: {\n        default: {\n          appenders: [\"out\"],\n          level: \"OFF\"\n        }\n      }\n    });\n  }\n\n  return new Logger(category || \"default\");\n}\n/**\n * @name log4js\n * @namespace Log4js\n * @property getLogger\n * @property configure\n * @property shutdown\n */\n\n\nvar log4js = {\n  getLogger: getLogger,\n  configure: configure,\n  shutdown: shutdown,\n  connectLogger: connectLogger,\n  levels: levels,\n  addLayout: layouts.addLayout\n};\nmodule.exports = log4js;","map":{"version":3,"sources":["/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/log4js/lib/log4js.js"],"names":["debug","require","fs","deepClone","proto","configuration","layouts","levels","appenders","categories","Logger","clustering","connectLogger","enabled","sendLogEventToAppender","logEvent","categoryAppenders","appendersForCategory","categoryName","forEach","appender","loadConfigurationFile","filename","JSON","parse","readFileSync","e","Error","message","configure","configurationFileOrObject","configObject","onMessage","log4js","shutdown","cb","appendersToCheck","Array","from","values","shutdownFunctions","reduceRight","accum","next","completed","error","complete","err","undefined","filter","a","getLogger","category","process","env","LOG4JS_CONFIG","out","type","default","level","addLayout","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAMA,KAAK,GAAGC,OAAO,CAAC,OAAD,CAAP,CAAiB,aAAjB,CAAd;;AACA,IAAMC,EAAE,GAAGD,OAAO,CAAC,IAAD,CAAlB;;AACA,IAAME,SAAS,GAAGF,OAAO,CAAC,MAAD,CAAP,CAAgB;AAAEG,EAAAA,KAAK,EAAE;AAAT,CAAhB,CAAlB;;AACA,IAAMC,aAAa,GAAGJ,OAAO,CAAC,iBAAD,CAA7B;;AACA,IAAMK,OAAO,GAAGL,OAAO,CAAC,WAAD,CAAvB;;AACA,IAAMM,MAAM,GAAGN,OAAO,CAAC,UAAD,CAAtB;;AACA,IAAMO,SAAS,GAAGP,OAAO,CAAC,aAAD,CAAzB;;AACA,IAAMQ,UAAU,GAAGR,OAAO,CAAC,cAAD,CAA1B;;AACA,IAAMS,MAAM,GAAGT,OAAO,CAAC,UAAD,CAAtB;;AACA,IAAMU,UAAU,GAAGV,OAAO,CAAC,cAAD,CAA1B;;AACA,IAAMW,aAAa,GAAGX,OAAO,CAAC,kBAAD,CAA7B;;AAEA,IAAIY,OAAO,GAAG,KAAd;;AAEA,SAASC,sBAAT,CAAgCC,QAAhC,EAA0C;AACxC,MAAI,CAACF,OAAL,EAAc;AACdb,EAAAA,KAAK,CAAC,qBAAD,EAAwBe,QAAxB,CAAL;AACA,MAAMC,iBAAiB,GAAGP,UAAU,CAACQ,oBAAX,CACxBF,QAAQ,CAACG,YADe,CAA1B;AAGAF,EAAAA,iBAAiB,CAACG,OAAlB,CAA0B,UAAAC,QAAQ,EAAI;AACpCA,IAAAA,QAAQ,CAACL,QAAD,CAAR;AACD,GAFD;AAGD;;AAED,SAASM,qBAAT,CAA+BC,QAA/B,EAAyC;AACvCtB,EAAAA,KAAK,sCAA+BsB,QAA/B,EAAL;;AACA,MAAI;AACF,WAAOC,IAAI,CAACC,KAAL,CAAWtB,EAAE,CAACuB,YAAH,CAAgBH,QAAhB,EAA0B,MAA1B,CAAX,CAAP;AACD,GAFD,CAEE,OAAOI,CAAP,EAAU;AACV,UAAM,IAAIC,KAAJ,8CACiCL,QADjC,2BACyDI,CAAC,CAACE,OAD3D,GAEJF,CAFI,CAAN;AAID;AACF;;AAED,SAASG,SAAT,CAAmBC,yBAAnB,EAA8C;AAC5C,MAAIC,YAAY,GAAGD,yBAAnB;;AAEA,MAAI,OAAOC,YAAP,KAAwB,QAA5B,EAAsC;AACpCA,IAAAA,YAAY,GAAGV,qBAAqB,CAACS,yBAAD,CAApC;AACD;;AACD9B,EAAAA,KAAK,4BAAqB+B,YAArB,EAAL;AAEA1B,EAAAA,aAAa,CAACwB,SAAd,CAAwB1B,SAAS,CAAC4B,YAAD,CAAjC;AAEApB,EAAAA,UAAU,CAACqB,SAAX,CAAqBlB,sBAArB;AAEAD,EAAAA,OAAO,GAAG,IAAV,CAZ4C,CAc5C;;AACA,SAAOoB,MAAP;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,QAAT,CAAkBC,EAAlB,EAAsB;AACpBnC,EAAAA,KAAK,CAAC,6CAAD,CAAL,CADoB,CAEpB;AACA;;AACAa,EAAAA,OAAO,GAAG,KAAV,CAJoB,CAMpB;;AACA,MAAMuB,gBAAgB,GAAGC,KAAK,CAACC,IAAN,CAAW9B,SAAS,CAAC+B,MAAV,EAAX,CAAzB;AACA,MAAMC,iBAAiB,GAAGJ,gBAAgB,CAACK,WAAjB,CACxB,UAACC,KAAD,EAAQC,IAAR;AAAA,WAAkBA,IAAI,CAACT,QAAL,GAAgBQ,KAAK,GAAG,CAAxB,GAA4BA,KAA9C;AAAA,GADwB,EAExB,CAFwB,CAA1B;AAIA,MAAIE,SAAS,GAAG,CAAhB;AACA,MAAIC,KAAJ;AAEA7C,EAAAA,KAAK,iBAAUwC,iBAAV,yCAAL;;AACA,WAASM,QAAT,CAAkBC,GAAlB,EAAuB;AACrBF,IAAAA,KAAK,GAAGA,KAAK,IAAIE,GAAjB;AACAH,IAAAA,SAAS,IAAI,CAAb;AACA5C,IAAAA,KAAK,wCAAiC4C,SAAjC,gBAAgDJ,iBAAhD,EAAL;;AACA,QAAII,SAAS,IAAIJ,iBAAjB,EAAoC;AAClCxC,MAAAA,KAAK,CAAC,mCAAD,CAAL;;AACA,UAAImC,EAAJ,EAAQ;AACNA,QAAAA,EAAE,CAACU,KAAD,CAAF;AACD;AACF;AACF;;AAED,MAAIL,iBAAiB,KAAK,CAA1B,EAA6B;AAC3BxC,IAAAA,KAAK,CAAC,6CAAD,CAAL;AACA,WAAOmC,EAAE,KAAKa,SAAP,IAAoBb,EAAE,EAA7B;AACD;;AAEDC,EAAAA,gBAAgB,CAACa,MAAjB,CAAwB,UAAAC,CAAC;AAAA,WAAIA,CAAC,CAAChB,QAAN;AAAA,GAAzB,EAAyCf,OAAzC,CAAiD,UAAA+B,CAAC;AAAA,WAAIA,CAAC,CAAChB,QAAF,CAAWY,QAAX,CAAJ;AAAA,GAAlD;AAEA,SAAO,IAAP;AACD;AAED;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASK,SAAT,CAAmBC,QAAnB,EAA6B;AAC3B,MAAI,CAACvC,OAAL,EAAc;AACZgB,IAAAA,SAAS,CACPwB,OAAO,CAACC,GAAR,CAAYC,aAAZ,IAA6B;AAC3B/C,MAAAA,SAAS,EAAE;AAAEgD,QAAAA,GAAG,EAAE;AAAEC,UAAAA,IAAI,EAAE;AAAR;AAAP,OADgB;AAE3BhD,MAAAA,UAAU,EAAE;AAAEiD,QAAAA,OAAO,EAAE;AAAElD,UAAAA,SAAS,EAAE,CAAC,KAAD,CAAb;AAAsBmD,UAAAA,KAAK,EAAE;AAA7B;AAAX;AAFe,KADtB,CAAT;AAMD;;AACD,SAAO,IAAIjD,MAAJ,CAAW0C,QAAQ,IAAI,SAAvB,CAAP;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,IAAMnB,MAAM,GAAG;AACbkB,EAAAA,SAAS,EAATA,SADa;AAEbtB,EAAAA,SAAS,EAATA,SAFa;AAGbK,EAAAA,QAAQ,EAARA,QAHa;AAIbtB,EAAAA,aAAa,EAAbA,aAJa;AAKbL,EAAAA,MAAM,EAANA,MALa;AAMbqD,EAAAA,SAAS,EAAEtD,OAAO,CAACsD;AANN,CAAf;AASAC,MAAM,CAACC,OAAP,GAAiB7B,MAAjB","sourcesContent":["/**\n * @fileoverview log4js is a library to log in JavaScript in similar manner\n * than in log4j for Java (but not really).\n *\n * <h3>Example:</h3>\n * <pre>\n *  const logging = require('log4js');\n *  const log = logging.getLogger('some-category');\n *\n *  //call the log\n *  log.trace('trace me' );\n * </pre>\n *\n * NOTE: the authors below are the original browser-based log4js authors\n * don't try to contact them about bugs in this version :)\n * @author Stephan Strittmatter - http://jroller.com/page/stritti\n * @author Seth Chisamore - http://www.chisamore.com\n * @since 2005-05-20\n * Website: http://log4js.berlios.de\n */\nconst debug = require(\"debug\")(\"log4js:main\");\nconst fs = require(\"fs\");\nconst deepClone = require(\"rfdc\")({ proto: true });\nconst configuration = require(\"./configuration\");\nconst layouts = require(\"./layouts\");\nconst levels = require(\"./levels\");\nconst appenders = require(\"./appenders\");\nconst categories = require(\"./categories\");\nconst Logger = require(\"./logger\");\nconst clustering = require(\"./clustering\");\nconst connectLogger = require(\"./connect-logger\");\n\nlet enabled = false;\n\nfunction sendLogEventToAppender(logEvent) {\n  if (!enabled) return;\n  debug(\"Received log event \", logEvent);\n  const categoryAppenders = categories.appendersForCategory(\n    logEvent.categoryName\n  );\n  categoryAppenders.forEach(appender => {\n    appender(logEvent);\n  });\n}\n\nfunction loadConfigurationFile(filename) {\n  debug(`Loading configuration from ${filename}`);\n  try {\n    return JSON.parse(fs.readFileSync(filename, \"utf8\"));\n  } catch (e) {\n    throw new Error(\n      `Problem reading config from file \"${filename}\". Error was ${e.message}`,\n      e\n    );\n  }\n}\n\nfunction configure(configurationFileOrObject) {\n  let configObject = configurationFileOrObject;\n\n  if (typeof configObject === \"string\") {\n    configObject = loadConfigurationFile(configurationFileOrObject);\n  }\n  debug(`Configuration is ${configObject}`);\n\n  configuration.configure(deepClone(configObject));\n\n  clustering.onMessage(sendLogEventToAppender);\n\n  enabled = true;\n\n  // eslint-disable-next-line no-use-before-define\n  return log4js;\n}\n\n/**\n * Shutdown all log appenders. This will first disable all writing to appenders\n * and then call the shutdown function each appender.\n *\n * @params {Function} cb - The callback to be invoked once all appenders have\n *  shutdown. If an error occurs, the callback will be given the error object\n *  as the first argument.\n */\nfunction shutdown(cb) {\n  debug(\"Shutdown called. Disabling all log writing.\");\n  // First, disable all writing to appenders. This prevents appenders from\n  // not being able to be drained because of run-away log writes.\n  enabled = false;\n\n  // Call each of the shutdown functions in parallel\n  const appendersToCheck = Array.from(appenders.values());\n  const shutdownFunctions = appendersToCheck.reduceRight(\n    (accum, next) => (next.shutdown ? accum + 1 : accum),\n    0\n  );\n  let completed = 0;\n  let error;\n\n  debug(`Found ${shutdownFunctions} appenders with shutdown functions.`);\n  function complete(err) {\n    error = error || err;\n    completed += 1;\n    debug(`Appender shutdowns complete: ${completed} / ${shutdownFunctions}`);\n    if (completed >= shutdownFunctions) {\n      debug(\"All shutdown functions completed.\");\n      if (cb) {\n        cb(error);\n      }\n    }\n  }\n\n  if (shutdownFunctions === 0) {\n    debug(\"No appenders with shutdown functions found.\");\n    return cb !== undefined && cb();\n  }\n\n  appendersToCheck.filter(a => a.shutdown).forEach(a => a.shutdown(complete));\n\n  return null;\n}\n\n/**\n * Get a logger instance.\n * @static\n * @param loggerCategoryName\n * @return {Logger} instance of logger for the category\n */\nfunction getLogger(category) {\n  if (!enabled) {\n    configure(\n      process.env.LOG4JS_CONFIG || {\n        appenders: { out: { type: \"stdout\" } },\n        categories: { default: { appenders: [\"out\"], level: \"OFF\" } }\n      }\n    );\n  }\n  return new Logger(category || \"default\");\n}\n\n/**\n * @name log4js\n * @namespace Log4js\n * @property getLogger\n * @property configure\n * @property shutdown\n */\nconst log4js = {\n  getLogger,\n  configure,\n  shutdown,\n  connectLogger,\n  levels,\n  addLayout: layouts.addLayout\n};\n\nmodule.exports = log4js;\n"]},"metadata":{},"sourceType":"script"}