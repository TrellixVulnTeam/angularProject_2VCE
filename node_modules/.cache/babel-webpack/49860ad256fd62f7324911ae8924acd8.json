{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nvar _classCallCheck = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/createClass\");\n\nvar MultiEntryDependency = require(\"./dependencies/MultiEntryDependency\");\n\nvar SingleEntryDependency = require(\"./dependencies/SingleEntryDependency\");\n\nvar MultiModuleFactory = require(\"./MultiModuleFactory\");\n/** @typedef {import(\"./Compiler\")} Compiler */\n\n\nvar MultiEntryPlugin = /*#__PURE__*/function () {\n  /**\n   * The MultiEntryPlugin is invoked whenever this.options.entry value is an array of paths\n   * @param {string} context context path\n   * @param {string[]} entries array of entry paths\n   * @param {string} name entry key name\n   */\n  function MultiEntryPlugin(context, entries, name) {\n    _classCallCheck(this, MultiEntryPlugin);\n\n    this.context = context;\n    this.entries = entries;\n    this.name = name;\n  }\n  /**\n   * @param {Compiler} compiler the compiler instance\n   * @returns {void}\n   */\n\n\n  _createClass(MultiEntryPlugin, [{\n    key: \"apply\",\n    value: function apply(compiler) {\n      var _this = this;\n\n      compiler.hooks.compilation.tap(\"MultiEntryPlugin\", function (compilation, _ref) {\n        var normalModuleFactory = _ref.normalModuleFactory;\n        var multiModuleFactory = new MultiModuleFactory();\n        compilation.dependencyFactories.set(MultiEntryDependency, multiModuleFactory);\n        compilation.dependencyFactories.set(SingleEntryDependency, normalModuleFactory);\n      });\n      compiler.hooks.make.tapAsync(\"MultiEntryPlugin\", function (compilation, callback) {\n        var context = _this.context,\n            entries = _this.entries,\n            name = _this.name;\n        var dep = MultiEntryPlugin.createDependency(entries, name);\n        compilation.addEntry(context, dep, name, callback);\n      });\n    }\n    /**\n     * @param {string[]} entries each entry path string\n     * @param {string} name name of the entry\n     * @returns {MultiEntryDependency} returns a constructed Dependency\n     */\n\n  }], [{\n    key: \"createDependency\",\n    value: function createDependency(entries, name) {\n      return new MultiEntryDependency(entries.map(function (e, idx) {\n        var dep = new SingleEntryDependency(e); // Because entrypoints are not dependencies found in an\n        // existing module, we give it a synthetic id\n\n        dep.loc = {\n          name: name,\n          index: idx\n        };\n        return dep;\n      }), name);\n    }\n  }]);\n\n  return MultiEntryPlugin;\n}();\n\nmodule.exports = MultiEntryPlugin;","map":{"version":3,"sources":["/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/webpack/lib/MultiEntryPlugin.js"],"names":["MultiEntryDependency","require","SingleEntryDependency","MultiModuleFactory","MultiEntryPlugin","context","entries","name","compiler","hooks","compilation","tap","normalModuleFactory","multiModuleFactory","dependencyFactories","set","make","tapAsync","callback","dep","createDependency","addEntry","map","e","idx","loc","index","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;;;;;AAEA,IAAMA,oBAAoB,GAAGC,OAAO,CAAC,qCAAD,CAApC;;AACA,IAAMC,qBAAqB,GAAGD,OAAO,CAAC,sCAAD,CAArC;;AACA,IAAME,kBAAkB,GAAGF,OAAO,CAAC,sBAAD,CAAlC;AAEA;;;IAEMG,gB;AACL;AACD;AACA;AACA;AACA;AACA;AACC,4BAAYC,OAAZ,EAAqBC,OAArB,EAA8BC,IAA9B,EAAoC;AAAA;;AACnC,SAAKF,OAAL,GAAeA,OAAf;AACA,SAAKC,OAAL,GAAeA,OAAf;AACA,SAAKC,IAAL,GAAYA,IAAZ;AACA;AAED;AACD;AACA;AACA;;;;;WACC,eAAMC,QAAN,EAAgB;AAAA;;AACfA,MAAAA,QAAQ,CAACC,KAAT,CAAeC,WAAf,CAA2BC,GAA3B,CACC,kBADD,EAEC,UAACD,WAAD,QAA0C;AAAA,YAA1BE,mBAA0B,QAA1BA,mBAA0B;AACzC,YAAMC,kBAAkB,GAAG,IAAIV,kBAAJ,EAA3B;AAEAO,QAAAA,WAAW,CAACI,mBAAZ,CAAgCC,GAAhC,CACCf,oBADD,EAECa,kBAFD;AAIAH,QAAAA,WAAW,CAACI,mBAAZ,CAAgCC,GAAhC,CACCb,qBADD,EAECU,mBAFD;AAIA,OAbF;AAgBAJ,MAAAA,QAAQ,CAACC,KAAT,CAAeO,IAAf,CAAoBC,QAApB,CACC,kBADD,EAEC,UAACP,WAAD,EAAcQ,QAAd,EAA2B;AAC1B,YAAQb,OAAR,GAAmC,KAAnC,CAAQA,OAAR;AAAA,YAAiBC,OAAjB,GAAmC,KAAnC,CAAiBA,OAAjB;AAAA,YAA0BC,IAA1B,GAAmC,KAAnC,CAA0BA,IAA1B;AAEA,YAAMY,GAAG,GAAGf,gBAAgB,CAACgB,gBAAjB,CAAkCd,OAAlC,EAA2CC,IAA3C,CAAZ;AACAG,QAAAA,WAAW,CAACW,QAAZ,CAAqBhB,OAArB,EAA8Bc,GAA9B,EAAmCZ,IAAnC,EAAyCW,QAAzC;AACA,OAPF;AASA;AAED;AACD;AACA;AACA;AACA;;;;WACC,0BAAwBZ,OAAxB,EAAiCC,IAAjC,EAAuC;AACtC,aAAO,IAAIP,oBAAJ,CACNM,OAAO,CAACgB,GAAR,CAAY,UAACC,CAAD,EAAIC,GAAJ,EAAY;AACvB,YAAML,GAAG,GAAG,IAAIjB,qBAAJ,CAA0BqB,CAA1B,CAAZ,CADuB,CAEvB;AACA;;AACAJ,QAAAA,GAAG,CAACM,GAAJ,GAAU;AACTlB,UAAAA,IAAI,EAAJA,IADS;AAETmB,UAAAA,KAAK,EAAEF;AAFE,SAAV;AAIA,eAAOL,GAAP;AACA,OATD,CADM,EAWNZ,IAXM,CAAP;AAaA;;;;;;AAGFoB,MAAM,CAACC,OAAP,GAAiBxB,gBAAjB","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst MultiEntryDependency = require(\"./dependencies/MultiEntryDependency\");\nconst SingleEntryDependency = require(\"./dependencies/SingleEntryDependency\");\nconst MultiModuleFactory = require(\"./MultiModuleFactory\");\n\n/** @typedef {import(\"./Compiler\")} Compiler */\n\nclass MultiEntryPlugin {\n\t/**\n\t * The MultiEntryPlugin is invoked whenever this.options.entry value is an array of paths\n\t * @param {string} context context path\n\t * @param {string[]} entries array of entry paths\n\t * @param {string} name entry key name\n\t */\n\tconstructor(context, entries, name) {\n\t\tthis.context = context;\n\t\tthis.entries = entries;\n\t\tthis.name = name;\n\t}\n\n\t/**\n\t * @param {Compiler} compiler the compiler instance\n\t * @returns {void}\n\t */\n\tapply(compiler) {\n\t\tcompiler.hooks.compilation.tap(\n\t\t\t\"MultiEntryPlugin\",\n\t\t\t(compilation, { normalModuleFactory }) => {\n\t\t\t\tconst multiModuleFactory = new MultiModuleFactory();\n\n\t\t\t\tcompilation.dependencyFactories.set(\n\t\t\t\t\tMultiEntryDependency,\n\t\t\t\t\tmultiModuleFactory\n\t\t\t\t);\n\t\t\t\tcompilation.dependencyFactories.set(\n\t\t\t\t\tSingleEntryDependency,\n\t\t\t\t\tnormalModuleFactory\n\t\t\t\t);\n\t\t\t}\n\t\t);\n\n\t\tcompiler.hooks.make.tapAsync(\n\t\t\t\"MultiEntryPlugin\",\n\t\t\t(compilation, callback) => {\n\t\t\t\tconst { context, entries, name } = this;\n\n\t\t\t\tconst dep = MultiEntryPlugin.createDependency(entries, name);\n\t\t\t\tcompilation.addEntry(context, dep, name, callback);\n\t\t\t}\n\t\t);\n\t}\n\n\t/**\n\t * @param {string[]} entries each entry path string\n\t * @param {string} name name of the entry\n\t * @returns {MultiEntryDependency} returns a constructed Dependency\n\t */\n\tstatic createDependency(entries, name) {\n\t\treturn new MultiEntryDependency(\n\t\t\tentries.map((e, idx) => {\n\t\t\t\tconst dep = new SingleEntryDependency(e);\n\t\t\t\t// Because entrypoints are not dependencies found in an\n\t\t\t\t// existing module, we give it a synthetic id\n\t\t\t\tdep.loc = {\n\t\t\t\t\tname,\n\t\t\t\t\tindex: idx\n\t\t\t\t};\n\t\t\t\treturn dep;\n\t\t\t}),\n\t\t\tname\n\t\t);\n\t}\n}\n\nmodule.exports = MultiEntryPlugin;\n"]},"metadata":{},"sourceType":"script"}