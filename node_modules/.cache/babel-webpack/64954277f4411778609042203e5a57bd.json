{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nvar _createForOfIteratorHelper = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _classCallCheck = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _require = require(\"webpack-sources\"),\n    ConcatSource = _require.ConcatSource,\n    RawSource = _require.RawSource;\n\nvar stringifySafe = function stringifySafe(data) {\n  var stringified = JSON.stringify(data);\n\n  if (!stringified) {\n    return undefined; // Invalid JSON\n  }\n\n  return stringified.replace(/\\u2028|\\u2029/g, function (str) {\n    return str === \"\\u2029\" ? \"\\\\u2029\" : \"\\\\u2028\";\n  }); // invalid in JavaScript but valid JSON\n};\n\nvar JsonGenerator = /*#__PURE__*/function () {\n  function JsonGenerator() {\n    _classCallCheck(this, JsonGenerator);\n  }\n\n  _createClass(JsonGenerator, [{\n    key: \"generate\",\n    value: function generate(module, dependencyTemplates, runtimeTemplate) {\n      var source = new ConcatSource();\n      var data = module.buildInfo.jsonData;\n\n      if (data === undefined) {\n        return new RawSource(runtimeTemplate.missingModuleStatement({\n          request: module.rawRequest\n        }));\n      }\n\n      var finalJson;\n\n      if (Array.isArray(module.buildMeta.providedExports) && !module.isUsed(\"default\")) {\n        // Only some exports are used: We can optimize here, by only generating a part of the JSON\n        var reducedJson = {};\n\n        var _iterator = _createForOfIteratorHelper(module.buildMeta.providedExports),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var exportName = _step.value;\n            if (exportName === \"default\") continue;\n            var used = module.isUsed(exportName);\n\n            if (used) {\n              reducedJson[used] = data[exportName];\n            }\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n\n        finalJson = reducedJson;\n      } else {\n        finalJson = data;\n      } // Use JSON because JSON.parse() is much faster than JavaScript evaluation\n\n\n      var jsonSource = JSON.stringify(stringifySafe(finalJson));\n      var jsonExpr = \"JSON.parse(\".concat(jsonSource, \")\");\n      source.add(\"\".concat(module.moduleArgument, \".exports = \").concat(jsonExpr, \";\"));\n      return source;\n    }\n  }]);\n\n  return JsonGenerator;\n}();\n\nmodule.exports = JsonGenerator;","map":{"version":3,"sources":["/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/webpack/lib/JsonGenerator.js"],"names":["require","ConcatSource","RawSource","stringifySafe","data","stringified","JSON","stringify","undefined","replace","str","JsonGenerator","module","dependencyTemplates","runtimeTemplate","source","buildInfo","jsonData","missingModuleStatement","request","rawRequest","finalJson","Array","isArray","buildMeta","providedExports","isUsed","reducedJson","exportName","used","jsonSource","jsonExpr","add","moduleArgument","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;;;;;;;AAEA,eAAoCA,OAAO,CAAC,iBAAD,CAA3C;AAAA,IAAQC,YAAR,YAAQA,YAAR;AAAA,IAAsBC,SAAtB,YAAsBA,SAAtB;;AAEA,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAAAC,IAAI,EAAI;AAC7B,MAAMC,WAAW,GAAGC,IAAI,CAACC,SAAL,CAAeH,IAAf,CAApB;;AACA,MAAI,CAACC,WAAL,EAAkB;AACjB,WAAOG,SAAP,CADiB,CACC;AAClB;;AAED,SAAOH,WAAW,CAACI,OAAZ,CAAoB,gBAApB,EAAsC,UAAAC,GAAG;AAAA,WAC/CA,GAAG,KAAK,QAAR,GAAmB,SAAnB,GAA+B,SADgB;AAAA,GAAzC,CAAP,CAN6B,CAQ1B;AACH,CATD;;IAWMC,a;;;;;;;WACL,kBAASC,MAAT,EAAiBC,mBAAjB,EAAsCC,eAAtC,EAAuD;AACtD,UAAMC,MAAM,GAAG,IAAId,YAAJ,EAAf;AACA,UAAMG,IAAI,GAAGQ,MAAM,CAACI,SAAP,CAAiBC,QAA9B;;AACA,UAAIb,IAAI,KAAKI,SAAb,EAAwB;AACvB,eAAO,IAAIN,SAAJ,CACNY,eAAe,CAACI,sBAAhB,CAAuC;AACtCC,UAAAA,OAAO,EAAEP,MAAM,CAACQ;AADsB,SAAvC,CADM,CAAP;AAKA;;AACD,UAAIC,SAAJ;;AACA,UACCC,KAAK,CAACC,OAAN,CAAcX,MAAM,CAACY,SAAP,CAAiBC,eAA/B,KACA,CAACb,MAAM,CAACc,MAAP,CAAc,SAAd,CAFF,EAGE;AACD;AACA,YAAMC,WAAW,GAAG,EAApB;;AAFC,mDAGwBf,MAAM,CAACY,SAAP,CAAiBC,eAHzC;AAAA;;AAAA;AAGD,8DAA2D;AAAA,gBAAhDG,UAAgD;AAC1D,gBAAIA,UAAU,KAAK,SAAnB,EAA8B;AAC9B,gBAAMC,IAAI,GAAGjB,MAAM,CAACc,MAAP,CAAcE,UAAd,CAAb;;AACA,gBAAIC,IAAJ,EAAU;AACTF,cAAAA,WAAW,CAACE,IAAD,CAAX,GAAoBzB,IAAI,CAACwB,UAAD,CAAxB;AACA;AACD;AATA;AAAA;AAAA;AAAA;AAAA;;AAUDP,QAAAA,SAAS,GAAGM,WAAZ;AACA,OAdD,MAcO;AACNN,QAAAA,SAAS,GAAGjB,IAAZ;AACA,OA3BqD,CA4BtD;;;AACA,UAAM0B,UAAU,GAAGxB,IAAI,CAACC,SAAL,CAAeJ,aAAa,CAACkB,SAAD,CAA5B,CAAnB;AACA,UAAMU,QAAQ,wBAAiBD,UAAjB,MAAd;AACAf,MAAAA,MAAM,CAACiB,GAAP,WAAcpB,MAAM,CAACqB,cAArB,wBAAiDF,QAAjD;AACA,aAAOhB,MAAP;AACA;;;;;;AAGFH,MAAM,CAACsB,OAAP,GAAiBvB,aAAjB","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst { ConcatSource, RawSource } = require(\"webpack-sources\");\n\nconst stringifySafe = data => {\n\tconst stringified = JSON.stringify(data);\n\tif (!stringified) {\n\t\treturn undefined; // Invalid JSON\n\t}\n\n\treturn stringified.replace(/\\u2028|\\u2029/g, str =>\n\t\tstr === \"\\u2029\" ? \"\\\\u2029\" : \"\\\\u2028\"\n\t); // invalid in JavaScript but valid JSON\n};\n\nclass JsonGenerator {\n\tgenerate(module, dependencyTemplates, runtimeTemplate) {\n\t\tconst source = new ConcatSource();\n\t\tconst data = module.buildInfo.jsonData;\n\t\tif (data === undefined) {\n\t\t\treturn new RawSource(\n\t\t\t\truntimeTemplate.missingModuleStatement({\n\t\t\t\t\trequest: module.rawRequest\n\t\t\t\t})\n\t\t\t);\n\t\t}\n\t\tlet finalJson;\n\t\tif (\n\t\t\tArray.isArray(module.buildMeta.providedExports) &&\n\t\t\t!module.isUsed(\"default\")\n\t\t) {\n\t\t\t// Only some exports are used: We can optimize here, by only generating a part of the JSON\n\t\t\tconst reducedJson = {};\n\t\t\tfor (const exportName of module.buildMeta.providedExports) {\n\t\t\t\tif (exportName === \"default\") continue;\n\t\t\t\tconst used = module.isUsed(exportName);\n\t\t\t\tif (used) {\n\t\t\t\t\treducedJson[used] = data[exportName];\n\t\t\t\t}\n\t\t\t}\n\t\t\tfinalJson = reducedJson;\n\t\t} else {\n\t\t\tfinalJson = data;\n\t\t}\n\t\t// Use JSON because JSON.parse() is much faster than JavaScript evaluation\n\t\tconst jsonSource = JSON.stringify(stringifySafe(finalJson));\n\t\tconst jsonExpr = `JSON.parse(${jsonSource})`;\n\t\tsource.add(`${module.moduleArgument}.exports = ${jsonExpr};`);\n\t\treturn source;\n\t}\n}\n\nmodule.exports = JsonGenerator;\n"]},"metadata":{},"sourceType":"script"}