{"ast":null,"code":"import _regeneratorRuntime from \"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { minify, _default_options } from \"../main.js\";\nimport { parse } from \"./parse.js\";\nimport { AST_Assign, AST_Array, AST_Constant, AST_Node, AST_PropAccess, AST_RegExp, AST_Sequence, AST_Symbol, AST_Token, walk } from \"./ast.js\";\nimport { OutputStream } from \"./output.js\";\nexport function run_cli(_x) {\n  return _run_cli.apply(this, arguments);\n}\n\nfunction _run_cli() {\n  _run_cli = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(_ref) {\n    var program, packageJson, fs, path, skip_keys, files, options, default_options, ecma, expr, convert_path, filesList, convert_ast, run_cli, _run_cli2, fatal, simple_glob, read_file, parse_js, symdef, collect_from_map, format_object, print_error, describe_ast;\n\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            describe_ast = function _describe_ast() {\n              var out = OutputStream({\n                beautify: true\n              });\n\n              function doitem(ctor) {\n                out.print(\"AST_\" + ctor.TYPE);\n                var props = ctor.SELF_PROPS.filter(function (prop) {\n                  return !/^\\$/.test(prop);\n                });\n\n                if (props.length > 0) {\n                  out.space();\n                  out.with_parens(function () {\n                    props.forEach(function (prop, i) {\n                      if (i) out.space();\n                      out.print(prop);\n                    });\n                  });\n                }\n\n                if (ctor.documentation) {\n                  out.space();\n                  out.print_string(ctor.documentation);\n                }\n\n                if (ctor.SUBCLASSES.length > 0) {\n                  out.space();\n                  out.with_block(function () {\n                    ctor.SUBCLASSES.forEach(function (ctor) {\n                      out.indent();\n                      doitem(ctor);\n                      out.newline();\n                    });\n                  });\n                }\n              }\n\n              doitem(AST_Node);\n              return out + \"\\n\";\n            };\n\n            print_error = function _print_error(msg) {\n              process.stderr.write(msg);\n              process.stderr.write(\"\\n\");\n            };\n\n            format_object = function _format_object(obj) {\n              var lines = [];\n              var padding = \"\";\n              Object.keys(obj).map(function (name) {\n                if (padding.length < name.length) padding = Array(name.length + 1).join(\" \");\n                return [name, JSON.stringify(obj[name])];\n              }).forEach(function (tokens) {\n                lines.push(\"  \" + tokens[0] + padding.slice(tokens[0].length - 2) + tokens[1]);\n              });\n              return lines.join(\"\\n\");\n            };\n\n            collect_from_map = function _collect_from_map(map, callback) {\n              var result = [];\n              map.forEach(function (def) {\n                result.push(callback(def));\n              });\n              return result;\n            };\n\n            symdef = function _symdef(def) {\n              var ret = 1e6 + def.id + \" \" + def.name;\n              if (def.mangled_name) ret += \" \" + def.mangled_name;\n              return ret;\n            };\n\n            parse_js = function _parse_js(flag) {\n              return function (value, options) {\n                options = options || {};\n\n                try {\n                  walk(parse(value, {\n                    expression: true\n                  }), function (node) {\n                    if (node instanceof AST_Assign) {\n                      var name = node.left.print_to_string();\n                      var value = node.right;\n\n                      if (flag) {\n                        options[name] = value;\n                      } else if (value instanceof AST_Array) {\n                        options[name] = value.elements.map(to_string);\n                      } else if (value instanceof AST_RegExp) {\n                        value = value.value;\n                        options[name] = new RegExp(value.source, value.flags);\n                      } else {\n                        options[name] = to_string(value);\n                      }\n\n                      return true;\n                    }\n\n                    if (node instanceof AST_Symbol || node instanceof AST_PropAccess) {\n                      var name = node.print_to_string();\n                      options[name] = true;\n                      return true;\n                    }\n\n                    if (!(node instanceof AST_Sequence)) throw node;\n\n                    function to_string(value) {\n                      return value instanceof AST_Constant ? value.getValue() : value.print_to_string({\n                        quote_keys: true\n                      });\n                    }\n                  });\n                } catch (ex) {\n                  if (flag) {\n                    fatal(\"Error parsing arguments for '\" + flag + \"': \" + value);\n                  } else {\n                    options[value] = null;\n                  }\n                }\n\n                return options;\n              };\n            };\n\n            read_file = function _read_file(path, default_value) {\n              try {\n                return fs.readFileSync(path, \"utf8\");\n              } catch (ex) {\n                if ((ex.code == \"ENOENT\" || ex.code == \"ENAMETOOLONG\") && default_value != null) return default_value;\n                fatal(ex);\n              }\n            };\n\n            simple_glob = function _simple_glob(glob) {\n              if (Array.isArray(glob)) {\n                return [].concat.apply([], glob.map(simple_glob));\n              }\n\n              if (glob && glob.match(/[*?]/)) {\n                var dir = path.dirname(glob);\n\n                try {\n                  var entries = fs.readdirSync(dir);\n                } catch (ex) {}\n\n                if (entries) {\n                  var pattern = \"^\" + path.basename(glob).replace(/[.+^$[\\]\\\\(){}]/g, \"\\\\$&\").replace(/\\*/g, \"[^/\\\\\\\\]*\").replace(/\\?/g, \"[^/\\\\\\\\]\") + \"$\";\n                  var mod = process.platform === \"win32\" ? \"i\" : \"\";\n                  var rx = new RegExp(pattern, mod);\n                  var results = entries.filter(function (name) {\n                    return rx.test(name);\n                  }).map(function (name) {\n                    return path.join(dir, name);\n                  });\n                  if (results.length) return results;\n                }\n              }\n\n              return [glob];\n            };\n\n            fatal = function _fatal(message) {\n              if (message instanceof Error) message = message.stack.replace(/^\\S*?Error:/, \"ERROR:\");\n              print_error(message);\n              process.exit(1);\n            };\n\n            _run_cli2 = function _run_cli4() {\n              _run_cli2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n                var content, result, col, lines, line, limit, minified, phase;\n                return _regeneratorRuntime.wrap(function _callee$(_context) {\n                  while (1) {\n                    switch (_context.prev = _context.next) {\n                      case 0:\n                        content = program.sourceMap && program.sourceMap.content;\n\n                        if (content && content !== \"inline\") {\n                          options.sourceMap.content = read_file(content, content);\n                        }\n\n                        if (program.timings) options.timings = true;\n\n                        try {\n                          if (program.parse) {\n                            if (program.parse.acorn) {\n                              files = convert_ast(function (toplevel, name) {\n                                return require(\"acorn\").parse(files[name], {\n                                  ecmaVersion: 2018,\n                                  locations: true,\n                                  program: toplevel,\n                                  sourceFile: name,\n                                  sourceType: options.module || program.parse.module ? \"module\" : \"script\"\n                                });\n                              });\n                            } else if (program.parse.spidermonkey) {\n                              files = convert_ast(function (toplevel, name) {\n                                var obj = JSON.parse(files[name]);\n                                if (!toplevel) return obj;\n                                toplevel.body = toplevel.body.concat(obj.body);\n                                return toplevel;\n                              });\n                            }\n                          }\n                        } catch (ex) {\n                          fatal(ex);\n                        }\n\n                        _context.prev = 4;\n                        _context.next = 7;\n                        return minify(files, options);\n\n                      case 7:\n                        result = _context.sent;\n                        _context.next = 16;\n                        break;\n\n                      case 10:\n                        _context.prev = 10;\n                        _context.t0 = _context[\"catch\"](4);\n\n                        if (_context.t0.name == \"SyntaxError\") {\n                          print_error(\"Parse error at \" + _context.t0.filename + \":\" + _context.t0.line + \",\" + _context.t0.col);\n                          col = _context.t0.col;\n                          lines = files[_context.t0.filename].split(/\\r?\\n/);\n                          line = lines[_context.t0.line - 1];\n\n                          if (!line && !col) {\n                            line = lines[_context.t0.line - 2];\n                            col = line.length;\n                          }\n\n                          if (line) {\n                            limit = 70;\n\n                            if (col > limit) {\n                              line = line.slice(col - limit);\n                              col = limit;\n                            }\n\n                            print_error(line.slice(0, 80));\n                            print_error(line.slice(0, col).replace(/\\S/g, \" \") + \"^\");\n                          }\n                        }\n\n                        if (_context.t0.defs) {\n                          print_error(\"Supported options:\");\n                          print_error(format_object(_context.t0.defs));\n                        }\n\n                        fatal(_context.t0);\n                        return _context.abrupt(\"return\");\n\n                      case 16:\n                        if (!(program.output == \"ast\")) {\n                          _context.next = 21;\n                          break;\n                        }\n\n                        if (!options.compress && !options.mangle) {\n                          result.ast.figure_out_scope({});\n                        }\n\n                        console.log(JSON.stringify(result.ast, function (key, value) {\n                          if (value) switch (key) {\n                            case \"thedef\":\n                              return symdef(value);\n\n                            case \"enclosed\":\n                              return value.length ? value.map(symdef) : undefined;\n\n                            case \"variables\":\n                            case \"functions\":\n                            case \"globals\":\n                              return value.size ? collect_from_map(value, symdef) : undefined;\n                          }\n                          if (skip_keys.has(key)) return;\n                          if (value instanceof AST_Token) return;\n                          if (value instanceof Map) return;\n\n                          if (value instanceof AST_Node) {\n                            var result = {\n                              _class: \"AST_\" + value.TYPE\n                            };\n\n                            if (value.block_scope) {\n                              result.variables = value.block_scope.variables;\n                              result.functions = value.block_scope.functions;\n                              result.enclosed = value.block_scope.enclosed;\n                            }\n\n                            value.CTOR.PROPS.forEach(function (prop) {\n                              result[prop] = value[prop];\n                            });\n                            return result;\n                          }\n\n                          return value;\n                        }, 2));\n                        _context.next = 36;\n                        break;\n\n                      case 21:\n                        if (!(program.output == \"spidermonkey\")) {\n                          _context.next = 35;\n                          break;\n                        }\n\n                        _context.prev = 22;\n                        _context.next = 25;\n                        return minify(result.code, {\n                          compress: false,\n                          mangle: false,\n                          format: {\n                            ast: true,\n                            code: false\n                          }\n                        });\n\n                      case 25:\n                        minified = _context.sent;\n                        console.log(JSON.stringify(minified.ast.to_mozilla_ast(), null, 2));\n                        _context.next = 33;\n                        break;\n\n                      case 29:\n                        _context.prev = 29;\n                        _context.t1 = _context[\"catch\"](22);\n                        fatal(_context.t1);\n                        return _context.abrupt(\"return\");\n\n                      case 33:\n                        _context.next = 36;\n                        break;\n\n                      case 35:\n                        if (program.output) {\n                          fs.writeFileSync(program.output, result.code);\n\n                          if (options.sourceMap && options.sourceMap.url !== \"inline\" && result.map) {\n                            fs.writeFileSync(program.output + \".map\", result.map);\n                          }\n                        } else {\n                          console.log(result.code);\n                        }\n\n                      case 36:\n                        if (program.nameCache) {\n                          fs.writeFileSync(program.nameCache, JSON.stringify(options.nameCache));\n                        }\n\n                        if (result.timings) for (phase in result.timings) {\n                          print_error(\"- \" + phase + \": \" + result.timings[phase].toFixed(3) + \"s\");\n                        }\n\n                      case 38:\n                      case \"end\":\n                        return _context.stop();\n                    }\n                  }\n                }, _callee, null, [[4, 10], [22, 29]]);\n              }));\n              return _run_cli2.apply(this, arguments);\n            };\n\n            run_cli = function _run_cli3() {\n              return _run_cli2.apply(this, arguments);\n            };\n\n            convert_ast = function _convert_ast(fn) {\n              return AST_Node.from_mozilla_ast(Object.keys(files).reduce(fn, null));\n            };\n\n            program = _ref.program, packageJson = _ref.packageJson, fs = _ref.fs, path = _ref.path;\n            skip_keys = new Set([\"cname\", \"parent_scope\", \"scope\", \"uses_eval\", \"uses_with\"]);\n            files = {};\n            options = {\n              compress: false,\n              mangle: false\n            };\n            _context2.next = 18;\n            return _default_options();\n\n          case 18:\n            default_options = _context2.sent;\n            program.version(packageJson.name + \" \" + packageJson.version);\n            program.parseArgv = program.parse;\n            program.parse = undefined;\n            if (process.argv.includes(\"ast\")) program.helpInformation = describe_ast;else if (process.argv.includes(\"options\")) program.helpInformation = function () {\n              var text = [];\n\n              for (var option in default_options) {\n                text.push(\"--\" + (option === \"sourceMap\" ? \"source-map\" : option) + \" options:\");\n                text.push(format_object(default_options[option]));\n                text.push(\"\");\n              }\n\n              return text.join(\"\\n\");\n            };\n            program.option(\"-p, --parse <options>\", \"Specify parser options.\", parse_js());\n            program.option(\"-c, --compress [options]\", \"Enable compressor/specify compressor options.\", parse_js());\n            program.option(\"-m, --mangle [options]\", \"Mangle names/specify mangler options.\", parse_js());\n            program.option(\"--mangle-props [options]\", \"Mangle properties/specify mangler options.\", parse_js());\n            program.option(\"-f, --format [options]\", \"Format options.\", parse_js());\n            program.option(\"-b, --beautify [options]\", \"Alias for --format beautify=true.\", parse_js());\n            program.option(\"-o, --output <file>\", \"Output file (default STDOUT).\");\n            program.option(\"--comments [filter]\", \"Preserve copyright comments in the output.\");\n            program.option(\"--config-file <file>\", \"Read minify() options from JSON file.\");\n            program.option(\"-d, --define <expr>[=value]\", \"Global definitions.\", parse_js(\"define\"));\n            program.option(\"--ecma <version>\", \"Specify ECMAScript release: 5, 2015, 2016 or 2017...\");\n            program.option(\"-e, --enclose [arg[,...][:value[,...]]]\", \"Embed output in a big function with configurable arguments and values.\");\n            program.option(\"--ie8\", \"Support non-standard Internet Explorer 8.\");\n            program.option(\"--keep-classnames\", \"Do not mangle/drop class names.\");\n            program.option(\"--keep-fnames\", \"Do not mangle/drop function names. Useful for code relying on Function.prototype.name.\");\n            program.option(\"--module\", \"Input is an ES6 module\");\n            program.option(\"--name-cache <file>\", \"File to hold mangled name mappings.\");\n            program.option(\"--rename\", \"Force symbol expansion.\");\n            program.option(\"--no-rename\", \"Disable symbol expansion.\");\n            program.option(\"--safari10\", \"Support non-standard Safari 10.\");\n            program.option(\"--source-map [options]\", \"Enable source map/specify source map options.\", parse_js());\n            program.option(\"--timings\", \"Display operations run time on STDERR.\");\n            program.option(\"--toplevel\", \"Compress and/or mangle variables in toplevel scope.\");\n            program.option(\"--wrap <name>\", \"Embed everything as a function with “exports” corresponding to “name” globally.\");\n            program.arguments(\"[files...]\").parseArgv(process.argv);\n\n            if (program.configFile) {\n              options = JSON.parse(read_file(program.configFile));\n            }\n\n            if (!program.output && program.sourceMap && program.sourceMap.url != \"inline\") {\n              fatal(\"ERROR: cannot write source map to STDOUT\");\n            }\n\n            [\"compress\", \"enclose\", \"ie8\", \"mangle\", \"module\", \"safari10\", \"sourceMap\", \"toplevel\", \"wrap\"].forEach(function (name) {\n              if (name in program) {\n                options[name] = program[name];\n              }\n            });\n\n            if (\"ecma\" in program) {\n              if (program.ecma != (program.ecma | 0)) fatal(\"ERROR: ecma must be an integer\");\n              ecma = program.ecma | 0;\n              if (ecma > 5 && ecma < 2015) options.ecma = ecma + 2009;else options.ecma = ecma;\n            }\n\n            if (program.beautify || program.format) {\n              if (program.beautify && program.format) {\n                fatal(\"Please only specify one of --beautify or --format\");\n              }\n\n              if (program.beautify) {\n                options.format = typeof program.beautify == \"object\" ? program.beautify : {};\n\n                if (!(\"beautify\" in options.format)) {\n                  options.format.beautify = true;\n                }\n              }\n\n              if (program.format) {\n                options.format = typeof program.format == \"object\" ? program.format : {};\n              }\n            }\n\n            if (program.comments) {\n              if (typeof options.format != \"object\") options.format = {};\n              options.format.comments = typeof program.comments == \"string\" ? program.comments == \"false\" ? false : program.comments : \"some\";\n            }\n\n            if (program.define) {\n              if (typeof options.compress != \"object\") options.compress = {};\n              if (typeof options.compress.global_defs != \"object\") options.compress.global_defs = {};\n\n              for (expr in program.define) {\n                options.compress.global_defs[expr] = program.define[expr];\n              }\n            }\n\n            if (program.keepClassnames) {\n              options.keep_classnames = true;\n            }\n\n            if (program.keepFnames) {\n              options.keep_fnames = true;\n            }\n\n            if (program.mangleProps) {\n              if (program.mangleProps.domprops) {\n                delete program.mangleProps.domprops;\n              } else {\n                if (typeof program.mangleProps != \"object\") program.mangleProps = {};\n                if (!Array.isArray(program.mangleProps.reserved)) program.mangleProps.reserved = [];\n              }\n\n              if (typeof options.mangle != \"object\") options.mangle = {};\n              options.mangle.properties = program.mangleProps;\n            }\n\n            if (program.nameCache) {\n              options.nameCache = JSON.parse(read_file(program.nameCache, \"{}\"));\n            }\n\n            if (program.output == \"ast\") {\n              options.format = {\n                ast: true,\n                code: false\n              };\n            }\n\n            if (program.parse) {\n              if (!program.parse.acorn && !program.parse.spidermonkey) {\n                options.parse = program.parse;\n              } else if (program.sourceMap && program.sourceMap.content == \"inline\") {\n                fatal(\"ERROR: inline source map only works with built-in parser\");\n              }\n            }\n\n            if (~program.rawArgs.indexOf(\"--rename\")) {\n              options.rename = true;\n            } else if (!program.rename) {\n              options.rename = false;\n            }\n\n            convert_path = function convert_path(name) {\n              return name;\n            };\n\n            if (typeof program.sourceMap == \"object\" && \"base\" in program.sourceMap) {\n              convert_path = function () {\n                var base = program.sourceMap.base;\n                delete options.sourceMap.base;\n                return function (name) {\n                  return path.relative(base, name);\n                };\n              }();\n            }\n\n            if (options.files && options.files.length) {\n              filesList = options.files;\n              delete options.files;\n            } else if (program.args.length) {\n              filesList = program.args;\n            }\n\n            if (!filesList) {\n              _context2.next = 69;\n              break;\n            }\n\n            simple_glob(filesList).forEach(function (name) {\n              files[convert_path(name)] = read_file(name);\n            });\n            _context2.next = 71;\n            break;\n\n          case 69:\n            _context2.next = 71;\n            return new Promise(function (resolve) {\n              var chunks = [];\n              process.stdin.setEncoding(\"utf8\");\n              process.stdin.on(\"data\", function (chunk) {\n                chunks.push(chunk);\n              }).on(\"end\", function () {\n                files = [chunks.join(\"\")];\n                resolve();\n              });\n              process.stdin.resume();\n            });\n\n          case 71:\n            _context2.next = 73;\n            return run_cli();\n\n          case 73:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _run_cli.apply(this, arguments);\n}","map":{"version":3,"sources":["/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/terser/lib/cli.js"],"names":["minify","_default_options","parse","AST_Assign","AST_Array","AST_Constant","AST_Node","AST_PropAccess","AST_RegExp","AST_Sequence","AST_Symbol","AST_Token","walk","OutputStream","run_cli","convert_ast","fatal","simple_glob","read_file","parse_js","symdef","collect_from_map","format_object","print_error","describe_ast","out","beautify","doitem","ctor","print","TYPE","props","SELF_PROPS","filter","prop","test","length","space","with_parens","forEach","i","documentation","print_string","SUBCLASSES","with_block","indent","newline","msg","process","stderr","write","obj","lines","padding","Object","keys","map","name","Array","join","JSON","stringify","tokens","push","slice","callback","result","def","ret","id","mangled_name","flag","value","options","expression","node","left","print_to_string","right","elements","to_string","RegExp","source","flags","getValue","quote_keys","ex","path","default_value","fs","readFileSync","code","glob","isArray","concat","apply","match","dir","dirname","entries","readdirSync","pattern","basename","replace","mod","platform","rx","results","message","Error","stack","exit","content","program","sourceMap","timings","acorn","files","toplevel","require","ecmaVersion","locations","sourceFile","sourceType","module","spidermonkey","body","filename","line","col","split","limit","defs","output","compress","mangle","ast","figure_out_scope","console","log","key","undefined","size","skip_keys","has","Map","_class","block_scope","variables","functions","enclosed","CTOR","PROPS","format","minified","to_mozilla_ast","writeFileSync","url","nameCache","phase","toFixed","fn","from_mozilla_ast","reduce","packageJson","Set","default_options","version","parseArgv","argv","includes","helpInformation","text","option","arguments","configFile","ecma","comments","define","global_defs","expr","keepClassnames","keep_classnames","keepFnames","keep_fnames","mangleProps","domprops","reserved","properties","rawArgs","indexOf","rename","convert_path","base","relative","filesList","args","Promise","resolve","chunks","stdin","setEncoding","on","chunk","resume"],"mappings":"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","sourcesContent":["import { minify, _default_options } from \"../main.js\";\nimport { parse } from \"./parse.js\";\nimport {\n    AST_Assign,\n    AST_Array,\n    AST_Constant,\n    AST_Node,\n    AST_PropAccess,\n    AST_RegExp,\n    AST_Sequence,\n    AST_Symbol,\n    AST_Token,\n    walk\n} from \"./ast.js\";\nimport { OutputStream } from \"./output.js\";\n\nexport async function run_cli({ program, packageJson, fs, path }) {\n    const skip_keys = new Set([ \"cname\", \"parent_scope\", \"scope\", \"uses_eval\", \"uses_with\" ]);\n    var files = {};\n    var options = {\n        compress: false,\n        mangle: false\n    };\n    const default_options = await _default_options();\n    program.version(packageJson.name + \" \" + packageJson.version);\n    program.parseArgv = program.parse;\n    program.parse = undefined;\n\n    if (process.argv.includes(\"ast\")) program.helpInformation = describe_ast;\n    else if (process.argv.includes(\"options\")) program.helpInformation = function() {\n        var text = [];\n        for (var option in default_options) {\n            text.push(\"--\" + (option === \"sourceMap\" ? \"source-map\" : option) + \" options:\");\n            text.push(format_object(default_options[option]));\n            text.push(\"\");\n        }\n        return text.join(\"\\n\");\n    };\n\n    program.option(\"-p, --parse <options>\", \"Specify parser options.\", parse_js());\n    program.option(\"-c, --compress [options]\", \"Enable compressor/specify compressor options.\", parse_js());\n    program.option(\"-m, --mangle [options]\", \"Mangle names/specify mangler options.\", parse_js());\n    program.option(\"--mangle-props [options]\", \"Mangle properties/specify mangler options.\", parse_js());\n    program.option(\"-f, --format [options]\", \"Format options.\", parse_js());\n    program.option(\"-b, --beautify [options]\", \"Alias for --format beautify=true.\", parse_js());\n    program.option(\"-o, --output <file>\", \"Output file (default STDOUT).\");\n    program.option(\"--comments [filter]\", \"Preserve copyright comments in the output.\");\n    program.option(\"--config-file <file>\", \"Read minify() options from JSON file.\");\n    program.option(\"-d, --define <expr>[=value]\", \"Global definitions.\", parse_js(\"define\"));\n    program.option(\"--ecma <version>\", \"Specify ECMAScript release: 5, 2015, 2016 or 2017...\");\n    program.option(\"-e, --enclose [arg[,...][:value[,...]]]\", \"Embed output in a big function with configurable arguments and values.\");\n    program.option(\"--ie8\", \"Support non-standard Internet Explorer 8.\");\n    program.option(\"--keep-classnames\", \"Do not mangle/drop class names.\");\n    program.option(\"--keep-fnames\", \"Do not mangle/drop function names. Useful for code relying on Function.prototype.name.\");\n    program.option(\"--module\", \"Input is an ES6 module\");\n    program.option(\"--name-cache <file>\", \"File to hold mangled name mappings.\");\n    program.option(\"--rename\", \"Force symbol expansion.\");\n    program.option(\"--no-rename\", \"Disable symbol expansion.\");\n    program.option(\"--safari10\", \"Support non-standard Safari 10.\");\n    program.option(\"--source-map [options]\", \"Enable source map/specify source map options.\", parse_js());\n    program.option(\"--timings\", \"Display operations run time on STDERR.\");\n    program.option(\"--toplevel\", \"Compress and/or mangle variables in toplevel scope.\");\n    program.option(\"--wrap <name>\", \"Embed everything as a function with “exports” corresponding to “name” globally.\");\n    program.arguments(\"[files...]\").parseArgv(process.argv);\n    if (program.configFile) {\n        options = JSON.parse(read_file(program.configFile));\n    }\n    if (!program.output && program.sourceMap && program.sourceMap.url != \"inline\") {\n        fatal(\"ERROR: cannot write source map to STDOUT\");\n    }\n\n    [\n        \"compress\",\n        \"enclose\",\n        \"ie8\",\n        \"mangle\",\n        \"module\",\n        \"safari10\",\n        \"sourceMap\",\n        \"toplevel\",\n        \"wrap\"\n    ].forEach(function(name) {\n        if (name in program) {\n            options[name] = program[name];\n        }\n    });\n\n    if (\"ecma\" in program) {\n        if (program.ecma != (program.ecma | 0)) fatal(\"ERROR: ecma must be an integer\");\n        const ecma = program.ecma | 0;\n        if (ecma > 5 && ecma < 2015)\n            options.ecma = ecma + 2009;\n        else\n            options.ecma = ecma;\n    }\n    if (program.beautify || program.format) {\n        if (program.beautify && program.format) {\n            fatal(\"Please only specify one of --beautify or --format\");\n        }\n        if (program.beautify) {\n            options.format = typeof program.beautify == \"object\" ? program.beautify : {};\n            if (!(\"beautify\" in options.format)) {\n                options.format.beautify = true;\n            }\n        }\n        if (program.format) {\n            options.format = typeof program.format == \"object\" ? program.format : {};\n        }\n    }\n    if (program.comments) {\n        if (typeof options.format != \"object\") options.format = {};\n        options.format.comments = typeof program.comments == \"string\" ? (program.comments == \"false\" ? false : program.comments) : \"some\";\n    }\n    if (program.define) {\n        if (typeof options.compress != \"object\") options.compress = {};\n        if (typeof options.compress.global_defs != \"object\") options.compress.global_defs = {};\n        for (var expr in program.define) {\n            options.compress.global_defs[expr] = program.define[expr];\n        }\n    }\n    if (program.keepClassnames) {\n        options.keep_classnames = true;\n    }\n    if (program.keepFnames) {\n        options.keep_fnames = true;\n    }\n    if (program.mangleProps) {\n        if (program.mangleProps.domprops) {\n            delete program.mangleProps.domprops;\n        } else {\n            if (typeof program.mangleProps != \"object\") program.mangleProps = {};\n            if (!Array.isArray(program.mangleProps.reserved)) program.mangleProps.reserved = [];\n        }\n        if (typeof options.mangle != \"object\") options.mangle = {};\n        options.mangle.properties = program.mangleProps;\n    }\n    if (program.nameCache) {\n        options.nameCache = JSON.parse(read_file(program.nameCache, \"{}\"));\n    }\n    if (program.output == \"ast\") {\n        options.format = {\n            ast: true,\n            code: false\n        };\n    }\n    if (program.parse) {\n        if (!program.parse.acorn && !program.parse.spidermonkey) {\n            options.parse = program.parse;\n        } else if (program.sourceMap && program.sourceMap.content == \"inline\") {\n            fatal(\"ERROR: inline source map only works with built-in parser\");\n        }\n    }\n    if (~program.rawArgs.indexOf(\"--rename\")) {\n        options.rename = true;\n    } else if (!program.rename) {\n        options.rename = false;\n    }\n\n    let convert_path = name => name;\n    if (typeof program.sourceMap == \"object\" && \"base\" in program.sourceMap) {\n        convert_path = function() {\n            var base = program.sourceMap.base;\n            delete options.sourceMap.base;\n            return function(name) {\n                return path.relative(base, name);\n            };\n        }();\n    }\n\n    let filesList;\n    if (options.files && options.files.length) {\n        filesList = options.files;\n\n        delete options.files;\n    } else if (program.args.length) {\n        filesList = program.args;\n    }\n\n    if (filesList) {\n        simple_glob(filesList).forEach(function(name) {\n            files[convert_path(name)] = read_file(name);\n        });\n    } else {\n        await new Promise((resolve) => {\n            var chunks = [];\n            process.stdin.setEncoding(\"utf8\");\n            process.stdin.on(\"data\", function(chunk) {\n                chunks.push(chunk);\n            }).on(\"end\", function() {\n                files = [ chunks.join(\"\") ];\n                resolve();\n            });\n            process.stdin.resume();\n        });\n    }\n\n    await run_cli();\n\n    function convert_ast(fn) {\n        return AST_Node.from_mozilla_ast(Object.keys(files).reduce(fn, null));\n    }\n\n    async function run_cli() {\n        var content = program.sourceMap && program.sourceMap.content;\n        if (content && content !== \"inline\") {\n            options.sourceMap.content = read_file(content, content);\n        }\n        if (program.timings) options.timings = true;\n\n        try {\n            if (program.parse) {\n                if (program.parse.acorn) {\n                    files = convert_ast(function(toplevel, name) {\n                        return require(\"acorn\").parse(files[name], {\n                            ecmaVersion: 2018,\n                            locations: true,\n                            program: toplevel,\n                            sourceFile: name,\n                            sourceType: options.module || program.parse.module ? \"module\" : \"script\"\n                        });\n                    });\n                } else if (program.parse.spidermonkey) {\n                    files = convert_ast(function(toplevel, name) {\n                        var obj = JSON.parse(files[name]);\n                        if (!toplevel) return obj;\n                        toplevel.body = toplevel.body.concat(obj.body);\n                        return toplevel;\n                    });\n                }\n            }\n        } catch (ex) {\n            fatal(ex);\n        }\n\n        let result;\n        try {\n            result = await minify(files, options);\n        } catch (ex) {\n            if (ex.name == \"SyntaxError\") {\n                print_error(\"Parse error at \" + ex.filename + \":\" + ex.line + \",\" + ex.col);\n                var col = ex.col;\n                var lines = files[ex.filename].split(/\\r?\\n/);\n                var line = lines[ex.line - 1];\n                if (!line && !col) {\n                    line = lines[ex.line - 2];\n                    col = line.length;\n                }\n                if (line) {\n                    var limit = 70;\n                    if (col > limit) {\n                        line = line.slice(col - limit);\n                        col = limit;\n                    }\n                    print_error(line.slice(0, 80));\n                    print_error(line.slice(0, col).replace(/\\S/g, \" \") + \"^\");\n                }\n            }\n            if (ex.defs) {\n                print_error(\"Supported options:\");\n                print_error(format_object(ex.defs));\n            }\n            fatal(ex);\n            return;\n        }\n\n        if (program.output == \"ast\") {\n            if (!options.compress && !options.mangle) {\n                result.ast.figure_out_scope({});\n            }\n            console.log(JSON.stringify(result.ast, function(key, value) {\n                if (value) switch (key) {\n                  case \"thedef\":\n                    return symdef(value);\n                  case \"enclosed\":\n                    return value.length ? value.map(symdef) : undefined;\n                  case \"variables\":\n                  case \"functions\":\n                  case \"globals\":\n                    return value.size ? collect_from_map(value, symdef) : undefined;\n                }\n                if (skip_keys.has(key)) return;\n                if (value instanceof AST_Token) return;\n                if (value instanceof Map) return;\n                if (value instanceof AST_Node) {\n                    var result = {\n                        _class: \"AST_\" + value.TYPE\n                    };\n                    if (value.block_scope) {\n                        result.variables = value.block_scope.variables;\n                        result.functions = value.block_scope.functions;\n                        result.enclosed = value.block_scope.enclosed;\n                    }\n                    value.CTOR.PROPS.forEach(function(prop) {\n                        result[prop] = value[prop];\n                    });\n                    return result;\n                }\n                return value;\n            }, 2));\n        } else if (program.output == \"spidermonkey\") {\n            try {\n                const minified = await minify(result.code, {\n                    compress: false,\n                    mangle: false,\n                    format: {\n                        ast: true,\n                        code: false\n                    }\n                });\n                console.log(JSON.stringify(minified.ast.to_mozilla_ast(), null, 2));\n            } catch (ex) {\n                fatal(ex);\n                return;\n            }\n        } else if (program.output) {\n            fs.writeFileSync(program.output, result.code);\n            if (options.sourceMap && options.sourceMap.url !== \"inline\" && result.map) {\n                fs.writeFileSync(program.output + \".map\", result.map);\n            }\n        } else {\n            console.log(result.code);\n        }\n        if (program.nameCache) {\n            fs.writeFileSync(program.nameCache, JSON.stringify(options.nameCache));\n        }\n        if (result.timings) for (var phase in result.timings) {\n            print_error(\"- \" + phase + \": \" + result.timings[phase].toFixed(3) + \"s\");\n        }\n    }\n\n    function fatal(message) {\n        if (message instanceof Error) message = message.stack.replace(/^\\S*?Error:/, \"ERROR:\");\n        print_error(message);\n        process.exit(1);\n    }\n\n    // A file glob function that only supports \"*\" and \"?\" wildcards in the basename.\n    // Example: \"foo/bar/*baz??.*.js\"\n    // Argument `glob` may be a string or an array of strings.\n    // Returns an array of strings. Garbage in, garbage out.\n    function simple_glob(glob) {\n        if (Array.isArray(glob)) {\n            return [].concat.apply([], glob.map(simple_glob));\n        }\n        if (glob && glob.match(/[*?]/)) {\n            var dir = path.dirname(glob);\n            try {\n                var entries = fs.readdirSync(dir);\n            } catch (ex) {}\n            if (entries) {\n                var pattern = \"^\" + path.basename(glob)\n                    .replace(/[.+^$[\\]\\\\(){}]/g, \"\\\\$&\")\n                    .replace(/\\*/g, \"[^/\\\\\\\\]*\")\n                    .replace(/\\?/g, \"[^/\\\\\\\\]\") + \"$\";\n                var mod = process.platform === \"win32\" ? \"i\" : \"\";\n                var rx = new RegExp(pattern, mod);\n                var results = entries.filter(function(name) {\n                    return rx.test(name);\n                }).map(function(name) {\n                    return path.join(dir, name);\n                });\n                if (results.length) return results;\n            }\n        }\n        return [ glob ];\n    }\n\n    function read_file(path, default_value) {\n        try {\n            return fs.readFileSync(path, \"utf8\");\n        } catch (ex) {\n            if ((ex.code == \"ENOENT\" || ex.code == \"ENAMETOOLONG\") && default_value != null) return default_value;\n            fatal(ex);\n        }\n    }\n\n    function parse_js(flag) {\n        return function(value, options) {\n            options = options || {};\n            try {\n                walk(parse(value, { expression: true }), node => {\n                    if (node instanceof AST_Assign) {\n                        var name = node.left.print_to_string();\n                        var value = node.right;\n                        if (flag) {\n                            options[name] = value;\n                        } else if (value instanceof AST_Array) {\n                            options[name] = value.elements.map(to_string);\n                        } else if (value instanceof AST_RegExp) {\n                            value = value.value;\n                            options[name] = new RegExp(value.source, value.flags);\n                        } else {\n                            options[name] = to_string(value);\n                        }\n                        return true;\n                    }\n                    if (node instanceof AST_Symbol || node instanceof AST_PropAccess) {\n                        var name = node.print_to_string();\n                        options[name] = true;\n                        return true;\n                    }\n                    if (!(node instanceof AST_Sequence)) throw node;\n\n                    function to_string(value) {\n                        return value instanceof AST_Constant ? value.getValue() : value.print_to_string({\n                            quote_keys: true\n                        });\n                    }\n                });\n            } catch(ex) {\n                if (flag) {\n                    fatal(\"Error parsing arguments for '\" + flag + \"': \" + value);\n                } else {\n                    options[value] = null;\n                }\n            }\n            return options;\n        };\n    }\n\n    function symdef(def) {\n        var ret = (1e6 + def.id) + \" \" + def.name;\n        if (def.mangled_name) ret += \" \" + def.mangled_name;\n        return ret;\n    }\n\n    function collect_from_map(map, callback) {\n        var result = [];\n        map.forEach(function (def) {\n            result.push(callback(def));\n        });\n        return result;\n    }\n\n    function format_object(obj) {\n        var lines = [];\n        var padding = \"\";\n        Object.keys(obj).map(function(name) {\n            if (padding.length < name.length) padding = Array(name.length + 1).join(\" \");\n            return [ name, JSON.stringify(obj[name]) ];\n        }).forEach(function(tokens) {\n            lines.push(\"  \" + tokens[0] + padding.slice(tokens[0].length - 2) + tokens[1]);\n        });\n        return lines.join(\"\\n\");\n    }\n\n    function print_error(msg) {\n        process.stderr.write(msg);\n        process.stderr.write(\"\\n\");\n    }\n\n    function describe_ast() {\n        var out = OutputStream({ beautify: true });\n        function doitem(ctor) {\n            out.print(\"AST_\" + ctor.TYPE);\n            const props = ctor.SELF_PROPS.filter(prop => !/^\\$/.test(prop));\n\n            if (props.length > 0) {\n                out.space();\n                out.with_parens(function() {\n                    props.forEach(function(prop, i) {\n                        if (i) out.space();\n                        out.print(prop);\n                    });\n                });\n            }\n\n            if (ctor.documentation) {\n                out.space();\n                out.print_string(ctor.documentation);\n            }\n\n            if (ctor.SUBCLASSES.length > 0) {\n                out.space();\n                out.with_block(function() {\n                    ctor.SUBCLASSES.forEach(function(ctor) {\n                        out.indent();\n                        doitem(ctor);\n                        out.newline();\n                    });\n                });\n            }\n        }\n        doitem(AST_Node);\n        return out + \"\\n\";\n    }\n}\n"]},"metadata":{},"sourceType":"module"}