{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar _ = {\n  isPlainObject: require('lodash/isPlainObject'),\n  clone: require('lodash/clone'),\n  isArray: require('lodash/isArray'),\n  set: require('lodash/set'),\n  isFunction: require('lodash/isFunction')\n};\n\nvar _require = require('rxjs'),\n    defer = _require.defer,\n    empty = _require.empty,\n    from = _require.from,\n    of = _require.of;\n\nvar _require2 = require('rxjs/operators'),\n    concatMap = _require2.concatMap,\n    filter = _require2.filter,\n    publish = _require2.publish,\n    reduce = _require2.reduce;\n\nvar runAsync = require('run-async');\n\nvar utils = require('../utils/utils');\n\nvar Base = require('./baseUI');\n/**\n * Base interface class other can inherits from\n */\n\n\nvar PromptUI = /*#__PURE__*/function (_Base) {\n  _inherits(PromptUI, _Base);\n\n  var _super = _createSuper(PromptUI);\n\n  function PromptUI(prompts, opt) {\n    var _this;\n\n    _classCallCheck(this, PromptUI);\n\n    _this = _super.call(this, opt);\n    _this.prompts = prompts;\n    return _this;\n  }\n\n  _createClass(PromptUI, [{\n    key: \"run\",\n    value: function run(questions, answers) {\n      // Keep global reference to the answers\n      if (_.isPlainObject(answers)) {\n        this.answers = _.clone(answers);\n      } else {\n        this.answers = {};\n      } // Make sure questions is an array.\n\n\n      if (_.isPlainObject(questions)) {\n        questions = [questions];\n      } // Create an observable, unless we received one as parameter.\n      // Note: As this is a public interface, we cannot do an instanceof check as we won't\n      // be using the exact same object in memory.\n\n\n      var obs = _.isArray(questions) ? from(questions) : questions;\n      this.process = obs.pipe(concatMap(this.processQuestion.bind(this)), publish() // Creates a hot Observable. It prevents duplicating prompts.\n      );\n      this.process.connect();\n      return this.process.pipe(reduce(function (answers, answer) {\n        _.set(answers, answer.name, answer.answer);\n\n        return answers;\n      }, this.answers)).toPromise(Promise).then(this.onCompletion.bind(this), this.onError.bind(this));\n    }\n    /**\n     * Once all prompt are over\n     */\n\n  }, {\n    key: \"onCompletion\",\n    value: function onCompletion() {\n      this.close();\n      return this.answers;\n    }\n  }, {\n    key: \"onError\",\n    value: function onError(error) {\n      this.close();\n      return Promise.reject(error);\n    }\n  }, {\n    key: \"processQuestion\",\n    value: function processQuestion(question) {\n      var _this2 = this;\n\n      question = _.clone(question);\n      return defer(function () {\n        var obs = of(question);\n        return obs.pipe(concatMap(_this2.setDefaultType.bind(_this2)), concatMap(_this2.filterIfRunnable.bind(_this2)), concatMap(function () {\n          return utils.fetchAsyncQuestionProperty(question, 'message', _this2.answers);\n        }), concatMap(function () {\n          return utils.fetchAsyncQuestionProperty(question, 'default', _this2.answers);\n        }), concatMap(function () {\n          return utils.fetchAsyncQuestionProperty(question, 'choices', _this2.answers);\n        }), concatMap(_this2.fetchAnswer.bind(_this2)));\n      });\n    }\n  }, {\n    key: \"fetchAnswer\",\n    value: function fetchAnswer(question) {\n      var _this3 = this;\n\n      var Prompt = this.prompts[question.type];\n      this.activePrompt = new Prompt(question, this.rl, this.answers);\n      return defer(function () {\n        return from(_this3.activePrompt.run().then(function (answer) {\n          return {\n            name: question.name,\n            answer: answer\n          };\n        }));\n      });\n    }\n  }, {\n    key: \"setDefaultType\",\n    value: function setDefaultType(question) {\n      // Default type to input\n      if (!this.prompts[question.type]) {\n        question.type = 'input';\n      }\n\n      return defer(function () {\n        return of(question);\n      });\n    }\n  }, {\n    key: \"filterIfRunnable\",\n    value: function filterIfRunnable(question) {\n      if (question.askAnswered !== true && this.answers[question.name] !== undefined) {\n        return empty();\n      }\n\n      if (question.when === false) {\n        return empty();\n      }\n\n      if (!_.isFunction(question.when)) {\n        return of(question);\n      }\n\n      var answers = this.answers;\n      return defer(function () {\n        return from(runAsync(question.when)(answers).then(function (shouldRun) {\n          if (shouldRun) {\n            return question;\n          }\n        })).pipe(filter(function (val) {\n          return val != null;\n        }));\n      });\n    }\n  }]);\n\n  return PromptUI;\n}(Base);\n\nmodule.exports = PromptUI;","map":{"version":3,"sources":["/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/inquirer/lib/ui/prompt.js"],"names":["_","isPlainObject","require","clone","isArray","set","isFunction","defer","empty","from","of","concatMap","filter","publish","reduce","runAsync","utils","Base","PromptUI","prompts","opt","questions","answers","obs","process","pipe","processQuestion","bind","connect","answer","name","toPromise","Promise","then","onCompletion","onError","close","error","reject","question","setDefaultType","filterIfRunnable","fetchAsyncQuestionProperty","fetchAnswer","Prompt","type","activePrompt","rl","run","askAnswered","undefined","when","shouldRun","val","module","exports"],"mappings":"AAAA;;;;;;;;;;AACA,IAAIA,CAAC,GAAG;AACNC,EAAAA,aAAa,EAAEC,OAAO,CAAC,sBAAD,CADhB;AAENC,EAAAA,KAAK,EAAED,OAAO,CAAC,cAAD,CAFR;AAGNE,EAAAA,OAAO,EAAEF,OAAO,CAAC,gBAAD,CAHV;AAING,EAAAA,GAAG,EAAEH,OAAO,CAAC,YAAD,CAJN;AAKNI,EAAAA,UAAU,EAAEJ,OAAO,CAAC,mBAAD;AALb,CAAR;;AAOA,eAAiCA,OAAO,CAAC,MAAD,CAAxC;AAAA,IAAMK,KAAN,YAAMA,KAAN;AAAA,IAAaC,KAAb,YAAaA,KAAb;AAAA,IAAoBC,IAApB,YAAoBA,IAApB;AAAA,IAA0BC,EAA1B,YAA0BA,EAA1B;;AACA,gBAA6CR,OAAO,CAAC,gBAAD,CAApD;AAAA,IAAMS,SAAN,aAAMA,SAAN;AAAA,IAAiBC,MAAjB,aAAiBA,MAAjB;AAAA,IAAyBC,OAAzB,aAAyBA,OAAzB;AAAA,IAAkCC,MAAlC,aAAkCA,MAAlC;;AACA,IAAIC,QAAQ,GAAGb,OAAO,CAAC,WAAD,CAAtB;;AACA,IAAIc,KAAK,GAAGd,OAAO,CAAC,gBAAD,CAAnB;;AACA,IAAIe,IAAI,GAAGf,OAAO,CAAC,UAAD,CAAlB;AAEA;AACA;AACA;;;IAEMgB,Q;;;;;AACJ,oBAAYC,OAAZ,EAAqBC,GAArB,EAA0B;AAAA;;AAAA;;AACxB,8BAAMA,GAAN;AACA,UAAKD,OAAL,GAAeA,OAAf;AAFwB;AAGzB;;;;WAED,aAAIE,SAAJ,EAAeC,OAAf,EAAwB;AACtB;AACA,UAAItB,CAAC,CAACC,aAAF,CAAgBqB,OAAhB,CAAJ,EAA8B;AAC5B,aAAKA,OAAL,GAAetB,CAAC,CAACG,KAAF,CAAQmB,OAAR,CAAf;AACD,OAFD,MAEO;AACL,aAAKA,OAAL,GAAe,EAAf;AACD,OANqB,CAQtB;;;AACA,UAAItB,CAAC,CAACC,aAAF,CAAgBoB,SAAhB,CAAJ,EAAgC;AAC9BA,QAAAA,SAAS,GAAG,CAACA,SAAD,CAAZ;AACD,OAXqB,CAatB;AACA;AACA;;;AACA,UAAIE,GAAG,GAAGvB,CAAC,CAACI,OAAF,CAAUiB,SAAV,IAAuBZ,IAAI,CAACY,SAAD,CAA3B,GAAyCA,SAAnD;AAEA,WAAKG,OAAL,GAAeD,GAAG,CAACE,IAAJ,CACbd,SAAS,CAAC,KAAKe,eAAL,CAAqBC,IAArB,CAA0B,IAA1B,CAAD,CADI,EAEbd,OAAO,EAFM,CAEH;AAFG,OAAf;AAKA,WAAKW,OAAL,CAAaI,OAAb;AAEA,aAAO,KAAKJ,OAAL,CACJC,IADI,CAEHX,MAAM,CAAC,UAACQ,OAAD,EAAUO,MAAV,EAAqB;AAC1B7B,QAAAA,CAAC,CAACK,GAAF,CAAMiB,OAAN,EAAeO,MAAM,CAACC,IAAtB,EAA4BD,MAAM,CAACA,MAAnC;;AACA,eAAOP,OAAP;AACD,OAHK,EAGH,KAAKA,OAHF,CAFH,EAOJS,SAPI,CAOMC,OAPN,EAQJC,IARI,CAQC,KAAKC,YAAL,CAAkBP,IAAlB,CAAuB,IAAvB,CARD,EAQ+B,KAAKQ,OAAL,CAAaR,IAAb,CAAkB,IAAlB,CAR/B,CAAP;AASD;AAED;AACF;AACA;;;;WAEE,wBAAe;AACb,WAAKS,KAAL;AAEA,aAAO,KAAKd,OAAZ;AACD;;;WAED,iBAAQe,KAAR,EAAe;AACb,WAAKD,KAAL;AACA,aAAOJ,OAAO,CAACM,MAAR,CAAeD,KAAf,CAAP;AACD;;;WAED,yBAAgBE,QAAhB,EAA0B;AAAA;;AACxBA,MAAAA,QAAQ,GAAGvC,CAAC,CAACG,KAAF,CAAQoC,QAAR,CAAX;AACA,aAAOhC,KAAK,CAAC,YAAM;AACjB,YAAIgB,GAAG,GAAGb,EAAE,CAAC6B,QAAD,CAAZ;AAEA,eAAOhB,GAAG,CAACE,IAAJ,CACLd,SAAS,CAAC,MAAI,CAAC6B,cAAL,CAAoBb,IAApB,CAAyB,MAAzB,CAAD,CADJ,EAELhB,SAAS,CAAC,MAAI,CAAC8B,gBAAL,CAAsBd,IAAtB,CAA2B,MAA3B,CAAD,CAFJ,EAGLhB,SAAS,CAAC;AAAA,iBACRK,KAAK,CAAC0B,0BAAN,CAAiCH,QAAjC,EAA2C,SAA3C,EAAsD,MAAI,CAACjB,OAA3D,CADQ;AAAA,SAAD,CAHJ,EAMLX,SAAS,CAAC;AAAA,iBACRK,KAAK,CAAC0B,0BAAN,CAAiCH,QAAjC,EAA2C,SAA3C,EAAsD,MAAI,CAACjB,OAA3D,CADQ;AAAA,SAAD,CANJ,EASLX,SAAS,CAAC;AAAA,iBACRK,KAAK,CAAC0B,0BAAN,CAAiCH,QAAjC,EAA2C,SAA3C,EAAsD,MAAI,CAACjB,OAA3D,CADQ;AAAA,SAAD,CATJ,EAYLX,SAAS,CAAC,MAAI,CAACgC,WAAL,CAAiBhB,IAAjB,CAAsB,MAAtB,CAAD,CAZJ,CAAP;AAcD,OAjBW,CAAZ;AAkBD;;;WAED,qBAAYY,QAAZ,EAAsB;AAAA;;AACpB,UAAIK,MAAM,GAAG,KAAKzB,OAAL,CAAaoB,QAAQ,CAACM,IAAtB,CAAb;AACA,WAAKC,YAAL,GAAoB,IAAIF,MAAJ,CAAWL,QAAX,EAAqB,KAAKQ,EAA1B,EAA8B,KAAKzB,OAAnC,CAApB;AACA,aAAOf,KAAK,CAAC;AAAA,eACXE,IAAI,CACF,MAAI,CAACqC,YAAL,CACGE,GADH,GAEGf,IAFH,CAEQ,UAACJ,MAAD;AAAA,iBAAa;AAAEC,YAAAA,IAAI,EAAES,QAAQ,CAACT,IAAjB;AAAuBD,YAAAA,MAAM,EAAEA;AAA/B,WAAb;AAAA,SAFR,CADE,CADO;AAAA,OAAD,CAAZ;AAOD;;;WAED,wBAAeU,QAAf,EAAyB;AACvB;AACA,UAAI,CAAC,KAAKpB,OAAL,CAAaoB,QAAQ,CAACM,IAAtB,CAAL,EAAkC;AAChCN,QAAAA,QAAQ,CAACM,IAAT,GAAgB,OAAhB;AACD;;AAED,aAAOtC,KAAK,CAAC;AAAA,eAAMG,EAAE,CAAC6B,QAAD,CAAR;AAAA,OAAD,CAAZ;AACD;;;WAED,0BAAiBA,QAAjB,EAA2B;AACzB,UAAIA,QAAQ,CAACU,WAAT,KAAyB,IAAzB,IAAiC,KAAK3B,OAAL,CAAaiB,QAAQ,CAACT,IAAtB,MAAgCoB,SAArE,EAAgF;AAC9E,eAAO1C,KAAK,EAAZ;AACD;;AAED,UAAI+B,QAAQ,CAACY,IAAT,KAAkB,KAAtB,EAA6B;AAC3B,eAAO3C,KAAK,EAAZ;AACD;;AAED,UAAI,CAACR,CAAC,CAACM,UAAF,CAAaiC,QAAQ,CAACY,IAAtB,CAAL,EAAkC;AAChC,eAAOzC,EAAE,CAAC6B,QAAD,CAAT;AACD;;AAED,UAAIjB,OAAO,GAAG,KAAKA,OAAnB;AACA,aAAOf,KAAK,CAAC;AAAA,eACXE,IAAI,CACFM,QAAQ,CAACwB,QAAQ,CAACY,IAAV,CAAR,CAAwB7B,OAAxB,EAAiCW,IAAjC,CAAsC,UAACmB,SAAD,EAAe;AACnD,cAAIA,SAAJ,EAAe;AACb,mBAAOb,QAAP;AACD;AACF,SAJD,CADE,CAAJ,CAMEd,IANF,CAMOb,MAAM,CAAC,UAACyC,GAAD;AAAA,iBAASA,GAAG,IAAI,IAAhB;AAAA,SAAD,CANb,CADW;AAAA,OAAD,CAAZ;AASD;;;;EA3HoBpC,I;;AA8HvBqC,MAAM,CAACC,OAAP,GAAiBrC,QAAjB","sourcesContent":["'use strict';\nvar _ = {\n  isPlainObject: require('lodash/isPlainObject'),\n  clone: require('lodash/clone'),\n  isArray: require('lodash/isArray'),\n  set: require('lodash/set'),\n  isFunction: require('lodash/isFunction'),\n};\nvar { defer, empty, from, of } = require('rxjs');\nvar { concatMap, filter, publish, reduce } = require('rxjs/operators');\nvar runAsync = require('run-async');\nvar utils = require('../utils/utils');\nvar Base = require('./baseUI');\n\n/**\n * Base interface class other can inherits from\n */\n\nclass PromptUI extends Base {\n  constructor(prompts, opt) {\n    super(opt);\n    this.prompts = prompts;\n  }\n\n  run(questions, answers) {\n    // Keep global reference to the answers\n    if (_.isPlainObject(answers)) {\n      this.answers = _.clone(answers);\n    } else {\n      this.answers = {};\n    }\n\n    // Make sure questions is an array.\n    if (_.isPlainObject(questions)) {\n      questions = [questions];\n    }\n\n    // Create an observable, unless we received one as parameter.\n    // Note: As this is a public interface, we cannot do an instanceof check as we won't\n    // be using the exact same object in memory.\n    var obs = _.isArray(questions) ? from(questions) : questions;\n\n    this.process = obs.pipe(\n      concatMap(this.processQuestion.bind(this)),\n      publish() // Creates a hot Observable. It prevents duplicating prompts.\n    );\n\n    this.process.connect();\n\n    return this.process\n      .pipe(\n        reduce((answers, answer) => {\n          _.set(answers, answer.name, answer.answer);\n          return answers;\n        }, this.answers)\n      )\n      .toPromise(Promise)\n      .then(this.onCompletion.bind(this), this.onError.bind(this));\n  }\n\n  /**\n   * Once all prompt are over\n   */\n\n  onCompletion() {\n    this.close();\n\n    return this.answers;\n  }\n\n  onError(error) {\n    this.close();\n    return Promise.reject(error);\n  }\n\n  processQuestion(question) {\n    question = _.clone(question);\n    return defer(() => {\n      var obs = of(question);\n\n      return obs.pipe(\n        concatMap(this.setDefaultType.bind(this)),\n        concatMap(this.filterIfRunnable.bind(this)),\n        concatMap(() =>\n          utils.fetchAsyncQuestionProperty(question, 'message', this.answers)\n        ),\n        concatMap(() =>\n          utils.fetchAsyncQuestionProperty(question, 'default', this.answers)\n        ),\n        concatMap(() =>\n          utils.fetchAsyncQuestionProperty(question, 'choices', this.answers)\n        ),\n        concatMap(this.fetchAnswer.bind(this))\n      );\n    });\n  }\n\n  fetchAnswer(question) {\n    var Prompt = this.prompts[question.type];\n    this.activePrompt = new Prompt(question, this.rl, this.answers);\n    return defer(() =>\n      from(\n        this.activePrompt\n          .run()\n          .then((answer) => ({ name: question.name, answer: answer }))\n      )\n    );\n  }\n\n  setDefaultType(question) {\n    // Default type to input\n    if (!this.prompts[question.type]) {\n      question.type = 'input';\n    }\n\n    return defer(() => of(question));\n  }\n\n  filterIfRunnable(question) {\n    if (question.askAnswered !== true && this.answers[question.name] !== undefined) {\n      return empty();\n    }\n\n    if (question.when === false) {\n      return empty();\n    }\n\n    if (!_.isFunction(question.when)) {\n      return of(question);\n    }\n\n    var answers = this.answers;\n    return defer(() =>\n      from(\n        runAsync(question.when)(answers).then((shouldRun) => {\n          if (shouldRun) {\n            return question;\n          }\n        })\n      ).pipe(filter((val) => val != null))\n    );\n  }\n}\n\nmodule.exports = PromptUI;\n"]},"metadata":{},"sourceType":"script"}