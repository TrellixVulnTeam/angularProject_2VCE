{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n/** @typedef {import(\"./Resolver\")} Resolver */\n\n/** @typedef {import(\"./Resolver\").ResolveRequest} ResolveRequest */\n\n/** @typedef {import(\"./Resolver\").ResolveStepHook} ResolveStepHook */\n\nvar _createForOfIteratorHelper = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _classCallCheck = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/createClass\");\n\nmodule.exports = /*#__PURE__*/function () {\n  /**\n   * @param {string | ResolveStepHook} source source\n   * @param {Partial<ResolveRequest>} test compare object\n   * @param {string | null} message log message\n   * @param {boolean} allowAlternatives when false, do not continue with the current step when \"test\" matches\n   * @param {string | ResolveStepHook} target target\n   */\n  function ConditionalPlugin(source, test, message, allowAlternatives, target) {\n    _classCallCheck(this, ConditionalPlugin);\n\n    this.source = source;\n    this.test = test;\n    this.message = message;\n    this.allowAlternatives = allowAlternatives;\n    this.target = target;\n  }\n  /**\n   * @param {Resolver} resolver the resolver\n   * @returns {void}\n   */\n\n\n  _createClass(ConditionalPlugin, [{\n    key: \"apply\",\n    value: function apply(resolver) {\n      var target = resolver.ensureHook(this.target);\n      var test = this.test,\n          message = this.message,\n          allowAlternatives = this.allowAlternatives;\n      var keys = Object.keys(test);\n      resolver.getHook(this.source).tapAsync(\"ConditionalPlugin\", function (request, resolveContext, callback) {\n        var _iterator = _createForOfIteratorHelper(keys),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var prop = _step.value;\n            if (request[prop] !== test[prop]) return callback();\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n\n        resolver.doResolve(target, request, message, resolveContext, allowAlternatives ? callback : function (err, result) {\n          if (err) return callback(err); // Don't allow other alternatives\n\n          if (result === undefined) return callback(null, null);\n          callback(null, result);\n        });\n      });\n    }\n  }]);\n\n  return ConditionalPlugin;\n}();","map":{"version":3,"sources":["/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/enhanced-resolve/lib/ConditionalPlugin.js"],"names":["module","exports","source","test","message","allowAlternatives","target","resolver","ensureHook","keys","Object","getHook","tapAsync","request","resolveContext","callback","prop","doResolve","err","result","undefined"],"mappings":"AAAA;AACA;AACA;AACA;AAEA;AAEA;;AACA;;AACA;;;;;;;;AAEAA,MAAM,CAACC,OAAP;AACC;AACD;AACA;AACA;AACA;AACA;AACA;AACC,6BAAYC,MAAZ,EAAoBC,IAApB,EAA0BC,OAA1B,EAAmCC,iBAAnC,EAAsDC,MAAtD,EAA8D;AAAA;;AAC7D,SAAKJ,MAAL,GAAcA,MAAd;AACA,SAAKC,IAAL,GAAYA,IAAZ;AACA,SAAKC,OAAL,GAAeA,OAAf;AACA,SAAKC,iBAAL,GAAyBA,iBAAzB;AACA,SAAKC,MAAL,GAAcA,MAAd;AACA;AAED;AACD;AACA;AACA;;;AAnBA;AAAA;AAAA,WAoBC,eAAMC,QAAN,EAAgB;AACf,UAAMD,MAAM,GAAGC,QAAQ,CAACC,UAAT,CAAoB,KAAKF,MAAzB,CAAf;AACA,UAAQH,IAAR,GAA6C,IAA7C,CAAQA,IAAR;AAAA,UAAcC,OAAd,GAA6C,IAA7C,CAAcA,OAAd;AAAA,UAAuBC,iBAAvB,GAA6C,IAA7C,CAAuBA,iBAAvB;AACA,UAAMI,IAAI,GAAGC,MAAM,CAACD,IAAP,CAAYN,IAAZ,CAAb;AACAI,MAAAA,QAAQ,CACNI,OADF,CACU,KAAKT,MADf,EAEEU,QAFF,CAEW,mBAFX,EAEgC,UAACC,OAAD,EAAUC,cAAV,EAA0BC,QAA1B,EAAuC;AAAA,mDAClDN,IADkD;AAAA;;AAAA;AACrE,8DAAyB;AAAA,gBAAdO,IAAc;AACxB,gBAAIH,OAAO,CAACG,IAAD,CAAP,KAAkBb,IAAI,CAACa,IAAD,CAA1B,EAAkC,OAAOD,QAAQ,EAAf;AAClC;AAHoE;AAAA;AAAA;AAAA;AAAA;;AAIrER,QAAAA,QAAQ,CAACU,SAAT,CACCX,MADD,EAECO,OAFD,EAGCT,OAHD,EAICU,cAJD,EAKCT,iBAAiB,GACdU,QADc,GAEd,UAACG,GAAD,EAAMC,MAAN,EAAiB;AACjB,cAAID,GAAJ,EAAS,OAAOH,QAAQ,CAACG,GAAD,CAAf,CADQ,CAGjB;;AACA,cAAIC,MAAM,KAAKC,SAAf,EAA0B,OAAOL,QAAQ,CAAC,IAAD,EAAO,IAAP,CAAf;AAC1BA,UAAAA,QAAQ,CAAC,IAAD,EAAOI,MAAP,CAAR;AACC,SAbL;AAeA,OArBF;AAsBA;AA9CF;;AAAA;AAAA","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\n/** @typedef {import(\"./Resolver\")} Resolver */\n/** @typedef {import(\"./Resolver\").ResolveRequest} ResolveRequest */\n/** @typedef {import(\"./Resolver\").ResolveStepHook} ResolveStepHook */\n\nmodule.exports = class ConditionalPlugin {\n\t/**\n\t * @param {string | ResolveStepHook} source source\n\t * @param {Partial<ResolveRequest>} test compare object\n\t * @param {string | null} message log message\n\t * @param {boolean} allowAlternatives when false, do not continue with the current step when \"test\" matches\n\t * @param {string | ResolveStepHook} target target\n\t */\n\tconstructor(source, test, message, allowAlternatives, target) {\n\t\tthis.source = source;\n\t\tthis.test = test;\n\t\tthis.message = message;\n\t\tthis.allowAlternatives = allowAlternatives;\n\t\tthis.target = target;\n\t}\n\n\t/**\n\t * @param {Resolver} resolver the resolver\n\t * @returns {void}\n\t */\n\tapply(resolver) {\n\t\tconst target = resolver.ensureHook(this.target);\n\t\tconst { test, message, allowAlternatives } = this;\n\t\tconst keys = Object.keys(test);\n\t\tresolver\n\t\t\t.getHook(this.source)\n\t\t\t.tapAsync(\"ConditionalPlugin\", (request, resolveContext, callback) => {\n\t\t\t\tfor (const prop of keys) {\n\t\t\t\t\tif (request[prop] !== test[prop]) return callback();\n\t\t\t\t}\n\t\t\t\tresolver.doResolve(\n\t\t\t\t\ttarget,\n\t\t\t\t\trequest,\n\t\t\t\t\tmessage,\n\t\t\t\t\tresolveContext,\n\t\t\t\t\tallowAlternatives\n\t\t\t\t\t\t? callback\n\t\t\t\t\t\t: (err, result) => {\n\t\t\t\t\t\t\t\tif (err) return callback(err);\n\n\t\t\t\t\t\t\t\t// Don't allow other alternatives\n\t\t\t\t\t\t\t\tif (result === undefined) return callback(null, null);\n\t\t\t\t\t\t\t\tcallback(null, result);\n\t\t\t\t\t\t  }\n\t\t\t\t);\n\t\t\t});\n\t}\n};\n"]},"metadata":{},"sourceType":"script"}