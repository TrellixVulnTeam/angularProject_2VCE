{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nvar _classCallCheck = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar Hook = require(\"./Hook\");\n\nvar HookCodeFactory = require(\"./HookCodeFactory\");\n\nvar SyncBailHookCodeFactory = /*#__PURE__*/function (_HookCodeFactory) {\n  _inherits(SyncBailHookCodeFactory, _HookCodeFactory);\n\n  var _super = _createSuper(SyncBailHookCodeFactory);\n\n  function SyncBailHookCodeFactory() {\n    _classCallCheck(this, SyncBailHookCodeFactory);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(SyncBailHookCodeFactory, [{\n    key: \"content\",\n    value: function content(_ref) {\n      var _onError = _ref.onError,\n          _onResult = _ref.onResult,\n          resultReturns = _ref.resultReturns,\n          onDone = _ref.onDone,\n          rethrowIfPossible = _ref.rethrowIfPossible;\n      return this.callTapsSeries({\n        onError: function onError(i, err) {\n          return _onError(err);\n        },\n        onResult: function onResult(i, result, next) {\n          return \"if(\".concat(result, \" !== undefined) {\\n\").concat(_onResult(result), \";\\n} else {\\n\").concat(next(), \"}\\n\");\n        },\n        resultReturns: resultReturns,\n        onDone: onDone,\n        rethrowIfPossible: rethrowIfPossible\n      });\n    }\n  }]);\n\n  return SyncBailHookCodeFactory;\n}(HookCodeFactory);\n\nvar factory = new SyncBailHookCodeFactory();\n\nvar SyncBailHook = /*#__PURE__*/function (_Hook) {\n  _inherits(SyncBailHook, _Hook);\n\n  var _super2 = _createSuper(SyncBailHook);\n\n  function SyncBailHook() {\n    _classCallCheck(this, SyncBailHook);\n\n    return _super2.apply(this, arguments);\n  }\n\n  _createClass(SyncBailHook, [{\n    key: \"tapAsync\",\n    value: function tapAsync() {\n      throw new Error(\"tapAsync is not supported on a SyncBailHook\");\n    }\n  }, {\n    key: \"tapPromise\",\n    value: function tapPromise() {\n      throw new Error(\"tapPromise is not supported on a SyncBailHook\");\n    }\n  }, {\n    key: \"compile\",\n    value: function compile(options) {\n      factory.setup(this, options);\n      return factory.create(options);\n    }\n  }]);\n\n  return SyncBailHook;\n}(Hook);\n\nmodule.exports = SyncBailHook;","map":{"version":3,"sources":["/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/tapable/lib/SyncBailHook.js"],"names":["Hook","require","HookCodeFactory","SyncBailHookCodeFactory","onError","onResult","resultReturns","onDone","rethrowIfPossible","callTapsSeries","i","err","result","next","factory","SyncBailHook","Error","options","setup","create","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;;;;;;;;;AAEA,IAAMA,IAAI,GAAGC,OAAO,CAAC,QAAD,CAApB;;AACA,IAAMC,eAAe,GAAGD,OAAO,CAAC,mBAAD,CAA/B;;IAEME,uB;;;;;;;;;;;;;WACL,uBAAyE;AAAA,UAA/DC,QAA+D,QAA/DA,OAA+D;AAAA,UAAtDC,SAAsD,QAAtDA,QAAsD;AAAA,UAA5CC,aAA4C,QAA5CA,aAA4C;AAAA,UAA7BC,MAA6B,QAA7BA,MAA6B;AAAA,UAArBC,iBAAqB,QAArBA,iBAAqB;AACxE,aAAO,KAAKC,cAAL,CAAoB;AAC1BL,QAAAA,OAAO,EAAE,iBAACM,CAAD,EAAIC,GAAJ;AAAA,iBAAYP,QAAO,CAACO,GAAD,CAAnB;AAAA,SADiB;AAE1BN,QAAAA,QAAQ,EAAE,kBAACK,CAAD,EAAIE,MAAJ,EAAYC,IAAZ;AAAA,8BACHD,MADG,gCACyBP,SAAQ,CACzCO,MADyC,CADjC,0BAGQC,IAAI,EAHZ;AAAA,SAFgB;AAM1BP,QAAAA,aAAa,EAAbA,aAN0B;AAO1BC,QAAAA,MAAM,EAANA,MAP0B;AAQ1BC,QAAAA,iBAAiB,EAAjBA;AAR0B,OAApB,CAAP;AAUA;;;;EAZoCN,e;;AAetC,IAAMY,OAAO,GAAG,IAAIX,uBAAJ,EAAhB;;IAEMY,Y;;;;;;;;;;;;;WACL,oBAAW;AACV,YAAM,IAAIC,KAAJ,CAAU,6CAAV,CAAN;AACA;;;WAED,sBAAa;AACZ,YAAM,IAAIA,KAAJ,CAAU,+CAAV,CAAN;AACA;;;WAED,iBAAQC,OAAR,EAAiB;AAChBH,MAAAA,OAAO,CAACI,KAAR,CAAc,IAAd,EAAoBD,OAApB;AACA,aAAOH,OAAO,CAACK,MAAR,CAAeF,OAAf,CAAP;AACA;;;;EAZyBjB,I;;AAe3BoB,MAAM,CAACC,OAAP,GAAiBN,YAAjB","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst Hook = require(\"./Hook\");\nconst HookCodeFactory = require(\"./HookCodeFactory\");\n\nclass SyncBailHookCodeFactory extends HookCodeFactory {\n\tcontent({ onError, onResult, resultReturns, onDone, rethrowIfPossible }) {\n\t\treturn this.callTapsSeries({\n\t\t\tonError: (i, err) => onError(err),\n\t\t\tonResult: (i, result, next) =>\n\t\t\t\t`if(${result} !== undefined) {\\n${onResult(\n\t\t\t\t\tresult\n\t\t\t\t)};\\n} else {\\n${next()}}\\n`,\n\t\t\tresultReturns,\n\t\t\tonDone,\n\t\t\trethrowIfPossible\n\t\t});\n\t}\n}\n\nconst factory = new SyncBailHookCodeFactory();\n\nclass SyncBailHook extends Hook {\n\ttapAsync() {\n\t\tthrow new Error(\"tapAsync is not supported on a SyncBailHook\");\n\t}\n\n\ttapPromise() {\n\t\tthrow new Error(\"tapPromise is not supported on a SyncBailHook\");\n\t}\n\n\tcompile(options) {\n\t\tfactory.setup(this, options);\n\t\treturn factory.create(options);\n\t}\n}\n\nmodule.exports = SyncBailHook;\n"]},"metadata":{},"sourceType":"script"}