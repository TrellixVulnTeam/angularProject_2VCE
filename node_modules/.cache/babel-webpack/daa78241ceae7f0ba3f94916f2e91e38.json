{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nvar _createForOfIteratorHelper = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _classCallCheck = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/createClass\");\n\nmodule.exports = /*#__PURE__*/function () {\n  function RuntimeChunkPlugin(options) {\n    _classCallCheck(this, RuntimeChunkPlugin);\n\n    this.options = Object.assign({\n      name: function name(entrypoint) {\n        return \"runtime~\".concat(entrypoint.name);\n      }\n    }, options);\n  }\n\n  _createClass(RuntimeChunkPlugin, [{\n    key: \"apply\",\n    value: function apply(compiler) {\n      var _this = this;\n\n      compiler.hooks.thisCompilation.tap(\"RuntimeChunkPlugin\", function (compilation) {\n        compilation.hooks.optimizeChunksAdvanced.tap(\"RuntimeChunkPlugin\", function () {\n          var _iterator = _createForOfIteratorHelper(compilation.entrypoints.values()),\n              _step;\n\n          try {\n            for (_iterator.s(); !(_step = _iterator.n()).done;) {\n              var entrypoint = _step.value;\n              var chunk = entrypoint.getRuntimeChunk();\n              var name = _this.options.name;\n\n              if (typeof name === \"function\") {\n                name = name(entrypoint);\n              }\n\n              if (chunk.getNumberOfModules() > 0 || !chunk.preventIntegration || chunk.name !== name) {\n                var newChunk = compilation.addChunk(name);\n                newChunk.preventIntegration = true;\n                entrypoint.unshiftChunk(newChunk);\n                newChunk.addGroup(entrypoint);\n                entrypoint.setRuntimeChunk(newChunk);\n              }\n            }\n          } catch (err) {\n            _iterator.e(err);\n          } finally {\n            _iterator.f();\n          }\n        });\n      });\n    }\n  }]);\n\n  return RuntimeChunkPlugin;\n}();","map":{"version":3,"sources":["/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/webpack/lib/optimize/RuntimeChunkPlugin.js"],"names":["module","exports","options","Object","assign","name","entrypoint","compiler","hooks","thisCompilation","tap","compilation","optimizeChunksAdvanced","entrypoints","values","chunk","getRuntimeChunk","getNumberOfModules","preventIntegration","newChunk","addChunk","unshiftChunk","addGroup","setRuntimeChunk"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;;;;;;;AAEAA,MAAM,CAACC,OAAP;AACC,8BAAYC,OAAZ,EAAqB;AAAA;;AACpB,SAAKA,OAAL,GAAeC,MAAM,CAACC,MAAP,CACd;AACCC,MAAAA,IAAI,EAAE,cAAAC,UAAU;AAAA,iCAAeA,UAAU,CAACD,IAA1B;AAAA;AADjB,KADc,EAIdH,OAJc,CAAf;AAMA;;AARF;AAAA;AAAA,WAUC,eAAMK,QAAN,EAAgB;AAAA;;AACfA,MAAAA,QAAQ,CAACC,KAAT,CAAeC,eAAf,CAA+BC,GAA/B,CAAmC,oBAAnC,EAAyD,UAAAC,WAAW,EAAI;AACvEA,QAAAA,WAAW,CAACH,KAAZ,CAAkBI,sBAAlB,CAAyCF,GAAzC,CAA6C,oBAA7C,EAAmE,YAAM;AAAA,qDAC/CC,WAAW,CAACE,WAAZ,CAAwBC,MAAxB,EAD+C;AAAA;;AAAA;AACxE,gEAA2D;AAAA,kBAAhDR,UAAgD;AAC1D,kBAAMS,KAAK,GAAGT,UAAU,CAACU,eAAX,EAAd;AACA,kBAAIX,IAAI,GAAG,KAAI,CAACH,OAAL,CAAaG,IAAxB;;AACA,kBAAI,OAAOA,IAAP,KAAgB,UAApB,EAAgC;AAC/BA,gBAAAA,IAAI,GAAGA,IAAI,CAACC,UAAD,CAAX;AACA;;AACD,kBACCS,KAAK,CAACE,kBAAN,KAA6B,CAA7B,IACA,CAACF,KAAK,CAACG,kBADP,IAEAH,KAAK,CAACV,IAAN,KAAeA,IAHhB,EAIE;AACD,oBAAMc,QAAQ,GAAGR,WAAW,CAACS,QAAZ,CAAqBf,IAArB,CAAjB;AACAc,gBAAAA,QAAQ,CAACD,kBAAT,GAA8B,IAA9B;AACAZ,gBAAAA,UAAU,CAACe,YAAX,CAAwBF,QAAxB;AACAA,gBAAAA,QAAQ,CAACG,QAAT,CAAkBhB,UAAlB;AACAA,gBAAAA,UAAU,CAACiB,eAAX,CAA2BJ,QAA3B;AACA;AACD;AAlBuE;AAAA;AAAA;AAAA;AAAA;AAmBxE,SAnBD;AAoBA,OArBD;AAsBA;AAjCF;;AAAA;AAAA","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nmodule.exports = class RuntimeChunkPlugin {\n\tconstructor(options) {\n\t\tthis.options = Object.assign(\n\t\t\t{\n\t\t\t\tname: entrypoint => `runtime~${entrypoint.name}`\n\t\t\t},\n\t\t\toptions\n\t\t);\n\t}\n\n\tapply(compiler) {\n\t\tcompiler.hooks.thisCompilation.tap(\"RuntimeChunkPlugin\", compilation => {\n\t\t\tcompilation.hooks.optimizeChunksAdvanced.tap(\"RuntimeChunkPlugin\", () => {\n\t\t\t\tfor (const entrypoint of compilation.entrypoints.values()) {\n\t\t\t\t\tconst chunk = entrypoint.getRuntimeChunk();\n\t\t\t\t\tlet name = this.options.name;\n\t\t\t\t\tif (typeof name === \"function\") {\n\t\t\t\t\t\tname = name(entrypoint);\n\t\t\t\t\t}\n\t\t\t\t\tif (\n\t\t\t\t\t\tchunk.getNumberOfModules() > 0 ||\n\t\t\t\t\t\t!chunk.preventIntegration ||\n\t\t\t\t\t\tchunk.name !== name\n\t\t\t\t\t) {\n\t\t\t\t\t\tconst newChunk = compilation.addChunk(name);\n\t\t\t\t\t\tnewChunk.preventIntegration = true;\n\t\t\t\t\t\tentrypoint.unshiftChunk(newChunk);\n\t\t\t\t\t\tnewChunk.addGroup(entrypoint);\n\t\t\t\t\t\tentrypoint.setRuntimeChunk(newChunk);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}\n};\n"]},"metadata":{},"sourceType":"script"}