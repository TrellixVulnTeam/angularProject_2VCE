{"ast":null,"code":"\"use strict\";\n\nvar _toConsumableArray = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/toConsumableArray\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.registerLocaleData = void 0;\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nvar ts = require(\"typescript\");\n\nvar ast_helpers_1 = require(\"./ast_helpers\");\n\nvar insert_import_1 = require(\"./insert_import\");\n\nvar interfaces_1 = require(\"./interfaces\");\n\nvar make_transform_1 = require(\"./make_transform\");\n\nfunction registerLocaleData(shouldTransform, getEntryModule, locale) {\n  var standardTransform = function standardTransform(sourceFile) {\n    var ops = [];\n    var entryModule = getEntryModule();\n\n    if (!shouldTransform(sourceFile.fileName) || !entryModule || !locale) {\n      return ops;\n    } // Find all identifiers using the entry module class name.\n\n\n    var entryModuleIdentifiers = ast_helpers_1.collectDeepNodes(sourceFile, ts.SyntaxKind.Identifier).filter(function (identifier) {\n      return identifier.text === entryModule.className;\n    });\n\n    if (entryModuleIdentifiers.length === 0) {\n      return [];\n    } // Find the bootstrap call\n\n\n    entryModuleIdentifiers.forEach(function (entryModuleIdentifier) {\n      // Figure out if it's a `platformBrowserDynamic().bootstrapModule(AppModule)` call.\n      if (!(entryModuleIdentifier.parent && entryModuleIdentifier.parent.kind === ts.SyntaxKind.CallExpression)) {\n        return;\n      }\n\n      var callExpr = entryModuleIdentifier.parent;\n\n      if (callExpr.expression.kind !== ts.SyntaxKind.PropertyAccessExpression) {\n        return;\n      }\n\n      var propAccessExpr = callExpr.expression;\n\n      if (propAccessExpr.name.text !== 'bootstrapModule' || propAccessExpr.expression.kind !== ts.SyntaxKind.CallExpression) {\n        return;\n      }\n\n      var firstNode = ast_helpers_1.getFirstNode(sourceFile);\n\n      if (!firstNode) {\n        return;\n      } // Create the import node for the locale.\n\n\n      var localeNamespaceId = ts.createUniqueName('__NgCli_locale_');\n      ops.push.apply(ops, _toConsumableArray(insert_import_1.insertStarImport(sourceFile, localeNamespaceId, \"@angular/common/locales/\".concat(locale), firstNode, true))); // Create the import node for the registerLocaleData function.\n\n      var regIdentifier = ts.createIdentifier(\"registerLocaleData\");\n      var regNamespaceId = ts.createUniqueName('__NgCli_locale_');\n      ops.push.apply(ops, _toConsumableArray(insert_import_1.insertStarImport(sourceFile, regNamespaceId, '@angular/common', firstNode, true))); // Create the register function call\n\n      var registerFunctionCall = ts.createCall(ts.createPropertyAccess(regNamespaceId, regIdentifier), undefined, [ts.createPropertyAccess(localeNamespaceId, 'default')]);\n      var registerFunctionStatement = ts.createStatement(registerFunctionCall);\n      ops.push(new interfaces_1.AddNodeOperation(sourceFile, firstNode, registerFunctionStatement));\n    });\n    return ops;\n  };\n\n  return make_transform_1.makeTransform(standardTransform);\n}\n\nexports.registerLocaleData = registerLocaleData;","map":{"version":3,"sources":["/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@ngtools/webpack/src/transformers/register_locale_data.js"],"names":["Object","defineProperty","exports","value","registerLocaleData","ts","require","ast_helpers_1","insert_import_1","interfaces_1","make_transform_1","shouldTransform","getEntryModule","locale","standardTransform","sourceFile","ops","entryModule","fileName","entryModuleIdentifiers","collectDeepNodes","SyntaxKind","Identifier","filter","identifier","text","className","length","forEach","entryModuleIdentifier","parent","kind","CallExpression","callExpr","expression","PropertyAccessExpression","propAccessExpr","name","firstNode","getFirstNode","localeNamespaceId","createUniqueName","push","insertStarImport","regIdentifier","createIdentifier","regNamespaceId","registerFunctionCall","createCall","createPropertyAccess","undefined","registerFunctionStatement","createStatement","AddNodeOperation","makeTransform"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.registerLocaleData = void 0;\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst ts = require(\"typescript\");\nconst ast_helpers_1 = require(\"./ast_helpers\");\nconst insert_import_1 = require(\"./insert_import\");\nconst interfaces_1 = require(\"./interfaces\");\nconst make_transform_1 = require(\"./make_transform\");\nfunction registerLocaleData(shouldTransform, getEntryModule, locale) {\n    const standardTransform = function (sourceFile) {\n        const ops = [];\n        const entryModule = getEntryModule();\n        if (!shouldTransform(sourceFile.fileName) || !entryModule || !locale) {\n            return ops;\n        }\n        // Find all identifiers using the entry module class name.\n        const entryModuleIdentifiers = ast_helpers_1.collectDeepNodes(sourceFile, ts.SyntaxKind.Identifier)\n            .filter(identifier => identifier.text === entryModule.className);\n        if (entryModuleIdentifiers.length === 0) {\n            return [];\n        }\n        // Find the bootstrap call\n        entryModuleIdentifiers.forEach(entryModuleIdentifier => {\n            // Figure out if it's a `platformBrowserDynamic().bootstrapModule(AppModule)` call.\n            if (!(entryModuleIdentifier.parent\n                && entryModuleIdentifier.parent.kind === ts.SyntaxKind.CallExpression)) {\n                return;\n            }\n            const callExpr = entryModuleIdentifier.parent;\n            if (callExpr.expression.kind !== ts.SyntaxKind.PropertyAccessExpression) {\n                return;\n            }\n            const propAccessExpr = callExpr.expression;\n            if (propAccessExpr.name.text !== 'bootstrapModule'\n                || propAccessExpr.expression.kind !== ts.SyntaxKind.CallExpression) {\n                return;\n            }\n            const firstNode = ast_helpers_1.getFirstNode(sourceFile);\n            if (!firstNode) {\n                return;\n            }\n            // Create the import node for the locale.\n            const localeNamespaceId = ts.createUniqueName('__NgCli_locale_');\n            ops.push(...insert_import_1.insertStarImport(sourceFile, localeNamespaceId, `@angular/common/locales/${locale}`, firstNode, true));\n            // Create the import node for the registerLocaleData function.\n            const regIdentifier = ts.createIdentifier(`registerLocaleData`);\n            const regNamespaceId = ts.createUniqueName('__NgCli_locale_');\n            ops.push(...insert_import_1.insertStarImport(sourceFile, regNamespaceId, '@angular/common', firstNode, true));\n            // Create the register function call\n            const registerFunctionCall = ts.createCall(ts.createPropertyAccess(regNamespaceId, regIdentifier), undefined, [ts.createPropertyAccess(localeNamespaceId, 'default')]);\n            const registerFunctionStatement = ts.createStatement(registerFunctionCall);\n            ops.push(new interfaces_1.AddNodeOperation(sourceFile, firstNode, registerFunctionStatement));\n        });\n        return ops;\n    };\n    return make_transform_1.makeTransform(standardTransform);\n}\nexports.registerLocaleData = registerLocaleData;\n"]},"metadata":{},"sourceType":"script"}