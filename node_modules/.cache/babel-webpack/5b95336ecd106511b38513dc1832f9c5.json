{"ast":null,"code":"var _classCallCheck = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/createClass\");\n\nvar configuration = require('./configuration');\n\nvar validColours = ['white', 'grey', 'black', 'blue', 'cyan', 'green', 'magenta', 'red', 'yellow'];\n\nvar Level = /*#__PURE__*/function () {\n  \"use strict\";\n\n  function Level(level, levelStr, colour) {\n    _classCallCheck(this, Level);\n\n    this.level = level;\n    this.levelStr = levelStr;\n    this.colour = colour;\n  }\n\n  _createClass(Level, [{\n    key: \"toString\",\n    value: function toString() {\n      return this.levelStr;\n    }\n    /**\n     * converts given String to corresponding Level\n     * @param {(Level|string)} sArg -- String value of Level OR Log4js.Level\n     * @param {Level} [defaultLevel] -- default Level, if no String representation\n     * @return {Level}\n     */\n\n  }, {\n    key: \"isLessThanOrEqualTo\",\n    value: function isLessThanOrEqualTo(otherLevel) {\n      if (typeof otherLevel === 'string') {\n        otherLevel = Level.getLevel(otherLevel);\n      }\n\n      return this.level <= otherLevel.level;\n    }\n  }, {\n    key: \"isGreaterThanOrEqualTo\",\n    value: function isGreaterThanOrEqualTo(otherLevel) {\n      if (typeof otherLevel === 'string') {\n        otherLevel = Level.getLevel(otherLevel);\n      }\n\n      return this.level >= otherLevel.level;\n    }\n  }, {\n    key: \"isEqualTo\",\n    value: function isEqualTo(otherLevel) {\n      if (typeof otherLevel === 'string') {\n        otherLevel = Level.getLevel(otherLevel);\n      }\n\n      return this.level === otherLevel.level;\n    }\n  }], [{\n    key: \"getLevel\",\n    value: function getLevel(sArg, defaultLevel) {\n      if (!sArg) {\n        return defaultLevel;\n      }\n\n      if (sArg instanceof Level) {\n        return sArg;\n      } // a json-serialised level won't be an instance of Level (see issue #768)\n\n\n      if (sArg instanceof Object && sArg.levelStr) {\n        sArg = sArg.levelStr;\n      }\n\n      return Level[sArg.toString().toUpperCase()] || defaultLevel;\n    }\n  }, {\n    key: \"addLevels\",\n    value: function addLevels(customLevels) {\n      if (customLevels) {\n        var levels = Object.keys(customLevels);\n        levels.forEach(function (l) {\n          var levelStr = l.toUpperCase();\n          Level[levelStr] = new Level(customLevels[l].value, levelStr, customLevels[l].colour);\n          var existingLevelIndex = Level.levels.findIndex(function (lvl) {\n            return lvl.levelStr === levelStr;\n          });\n\n          if (existingLevelIndex > -1) {\n            Level.levels[existingLevelIndex] = Level[levelStr];\n          } else {\n            Level.levels.push(Level[levelStr]);\n          }\n        });\n        Level.levels.sort(function (a, b) {\n          return a.level - b.level;\n        });\n      }\n    }\n  }]);\n\n  return Level;\n}();\n\nLevel.levels = [];\nLevel.addLevels({\n  ALL: {\n    value: Number.MIN_VALUE,\n    colour: 'grey'\n  },\n  TRACE: {\n    value: 5000,\n    colour: 'blue'\n  },\n  DEBUG: {\n    value: 10000,\n    colour: 'cyan'\n  },\n  INFO: {\n    value: 20000,\n    colour: 'green'\n  },\n  WARN: {\n    value: 30000,\n    colour: 'yellow'\n  },\n  ERROR: {\n    value: 40000,\n    colour: 'red'\n  },\n  FATAL: {\n    value: 50000,\n    colour: 'magenta'\n  },\n  MARK: {\n    value: 9007199254740992,\n    colour: 'grey'\n  },\n  // 2^53\n  OFF: {\n    value: Number.MAX_VALUE,\n    colour: 'grey'\n  }\n});\nconfiguration.addListener(function (config) {\n  var levelConfig = config.levels;\n\n  if (levelConfig) {\n    configuration.throwExceptionIf(config, configuration.not(configuration.anObject(levelConfig)), 'levels must be an object');\n    var newLevels = Object.keys(levelConfig);\n    newLevels.forEach(function (l) {\n      configuration.throwExceptionIf(config, configuration.not(configuration.validIdentifier(l)), \"level name \\\"\".concat(l, \"\\\" is not a valid identifier (must start with a letter, only contain A-Z,a-z,0-9,_)\"));\n      configuration.throwExceptionIf(config, configuration.not(configuration.anObject(levelConfig[l])), \"level \\\"\".concat(l, \"\\\" must be an object\"));\n      configuration.throwExceptionIf(config, configuration.not(levelConfig[l].value), \"level \\\"\".concat(l, \"\\\" must have a 'value' property\"));\n      configuration.throwExceptionIf(config, configuration.not(configuration.anInteger(levelConfig[l].value)), \"level \\\"\".concat(l, \"\\\".value must have an integer value\"));\n      configuration.throwExceptionIf(config, configuration.not(levelConfig[l].colour), \"level \\\"\".concat(l, \"\\\" must have a 'colour' property\"));\n      configuration.throwExceptionIf(config, configuration.not(validColours.indexOf(levelConfig[l].colour) > -1), \"level \\\"\".concat(l, \"\\\".colour must be one of \").concat(validColours.join(', ')));\n    });\n  }\n});\nconfiguration.addListener(function (config) {\n  Level.addLevels(config.levels);\n});\nmodule.exports = Level;","map":{"version":3,"sources":["/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/log4js/lib/levels.js"],"names":["configuration","require","validColours","Level","level","levelStr","colour","otherLevel","getLevel","sArg","defaultLevel","Object","toString","toUpperCase","customLevels","levels","keys","forEach","l","value","existingLevelIndex","findIndex","lvl","push","sort","a","b","addLevels","ALL","Number","MIN_VALUE","TRACE","DEBUG","INFO","WARN","ERROR","FATAL","MARK","OFF","MAX_VALUE","addListener","config","levelConfig","throwExceptionIf","not","anObject","newLevels","validIdentifier","anInteger","indexOf","join","module","exports"],"mappings":"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","sourcesContent":["\n\nconst configuration = require('./configuration');\n\nconst validColours = [\n  'white', 'grey', 'black',\n  'blue', 'cyan', 'green',\n  'magenta', 'red', 'yellow'\n];\n\nclass Level {\n  constructor(level, levelStr, colour) {\n    this.level = level;\n    this.levelStr = levelStr;\n    this.colour = colour;\n  }\n\n  toString() {\n    return this.levelStr;\n  }\n\n  /**\n   * converts given String to corresponding Level\n   * @param {(Level|string)} sArg -- String value of Level OR Log4js.Level\n   * @param {Level} [defaultLevel] -- default Level, if no String representation\n   * @return {Level}\n   */\n  static getLevel(sArg, defaultLevel) {\n    if (!sArg) {\n      return defaultLevel;\n    }\n\n    if (sArg instanceof Level) {\n      return sArg;\n    }\n\n    // a json-serialised level won't be an instance of Level (see issue #768)\n    if (sArg instanceof Object && sArg.levelStr) {\n      sArg = sArg.levelStr;\n    }\n\n    return Level[sArg.toString().toUpperCase()] || defaultLevel;\n  }\n\n  static addLevels(customLevels) {\n    if (customLevels) {\n      const levels = Object.keys(customLevels);\n      levels.forEach((l) => {\n        const levelStr = l.toUpperCase();\n        Level[levelStr] = new Level(\n          customLevels[l].value,\n          levelStr,\n          customLevels[l].colour\n        );\n        const existingLevelIndex = Level.levels.findIndex(lvl => lvl.levelStr === levelStr);\n        if (existingLevelIndex > -1) {\n          Level.levels[existingLevelIndex] = Level[levelStr];\n        } else {\n          Level.levels.push(Level[levelStr]);\n        }\n      });\n      Level.levels.sort((a, b) => a.level - b.level);\n    }\n  }\n\n\n  isLessThanOrEqualTo(otherLevel) {\n    if (typeof otherLevel === 'string') {\n      otherLevel = Level.getLevel(otherLevel);\n    }\n    return this.level <= otherLevel.level;\n  }\n\n  isGreaterThanOrEqualTo(otherLevel) {\n    if (typeof otherLevel === 'string') {\n      otherLevel = Level.getLevel(otherLevel);\n    }\n    return this.level >= otherLevel.level;\n  }\n\n  isEqualTo(otherLevel) {\n    if (typeof otherLevel === 'string') {\n      otherLevel = Level.getLevel(otherLevel);\n    }\n    return this.level === otherLevel.level;\n  }\n}\n\nLevel.levels = [];\nLevel.addLevels({\n  ALL: { value: Number.MIN_VALUE, colour: 'grey' },\n  TRACE: { value: 5000, colour: 'blue' },\n  DEBUG: { value: 10000, colour: 'cyan' },\n  INFO: { value: 20000, colour: 'green' },\n  WARN: { value: 30000, colour: 'yellow' },\n  ERROR: { value: 40000, colour: 'red' },\n  FATAL: { value: 50000, colour: 'magenta' },\n  MARK: { value: 9007199254740992, colour: 'grey' }, // 2^53\n  OFF: { value: Number.MAX_VALUE, colour: 'grey' }\n});\n\nconfiguration.addListener((config) => {\n  const levelConfig = config.levels;\n  if (levelConfig) {\n    configuration.throwExceptionIf(\n      config,\n      configuration.not(configuration.anObject(levelConfig)),\n      'levels must be an object'\n    );\n    const newLevels = Object.keys(levelConfig);\n    newLevels.forEach((l) => {\n      configuration.throwExceptionIf(\n        config,\n        configuration.not(configuration.validIdentifier(l)),\n        `level name \"${l}\" is not a valid identifier (must start with a letter, only contain A-Z,a-z,0-9,_)`\n      );\n      configuration.throwExceptionIf(\n        config,\n        configuration.not(configuration.anObject(levelConfig[l])),\n        `level \"${l}\" must be an object`\n      );\n      configuration.throwExceptionIf(\n        config,\n        configuration.not(levelConfig[l].value),\n        `level \"${l}\" must have a 'value' property`\n      );\n      configuration.throwExceptionIf(\n        config,\n        configuration.not(configuration.anInteger(levelConfig[l].value)),\n        `level \"${l}\".value must have an integer value`\n      );\n      configuration.throwExceptionIf(\n        config,\n        configuration.not(levelConfig[l].colour),\n        `level \"${l}\" must have a 'colour' property`\n      );\n      configuration.throwExceptionIf(\n        config,\n        configuration.not(validColours.indexOf(levelConfig[l].colour) > -1),\n        `level \"${l}\".colour must be one of ${validColours.join(', ')}`\n      );\n    });\n  }\n});\n\nconfiguration.addListener((config) => {\n  Level.addLevels(config.levels);\n});\n\nmodule.exports = Level;\n"]},"metadata":{},"sourceType":"script"}