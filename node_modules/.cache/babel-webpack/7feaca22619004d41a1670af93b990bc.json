{"ast":null,"code":"var streams = require('streamroller');\n\nvar os = require('os');\n\nvar eol = os.EOL;\n/**\n * File appender that rolls files according to a date pattern.\n * @filename base filename.\n * @pattern the format that will be added to the end of filename when rolling,\n *          also used to check when to roll files - defaults to '.yyyy-MM-dd'\n * @layout layout function for log messages - defaults to basicLayout\n * @timezoneOffset optional timezone offset in minutes - defaults to system local\n */\n\nfunction appender(filename, pattern, layout, options, timezoneOffset) {\n  // the options for file appender use maxLogSize, but the docs say any file appender\n  // options should work for dateFile as well.\n  options.maxSize = options.maxLogSize;\n  var logFile = new streams.DateRollingFileStream(filename, pattern, options);\n  logFile.on(\"drain\", function () {\n    process.emit(\"log4js:pause\", false);\n  });\n\n  var app = function app(logEvent) {\n    if (!logFile.write(layout(logEvent, timezoneOffset) + eol, \"utf8\")) {\n      process.emit(\"log4js:pause\", true);\n    }\n  };\n\n  app.shutdown = function (complete) {\n    logFile.write('', 'utf-8', function () {\n      logFile.end(complete);\n    });\n  };\n\n  return app;\n}\n\nfunction configure(config, layouts) {\n  var layout = layouts.basicLayout;\n\n  if (config.layout) {\n    layout = layouts.layout(config.layout.type, config.layout);\n  }\n\n  if (!config.alwaysIncludePattern) {\n    config.alwaysIncludePattern = false;\n  }\n\n  return appender(config.filename, config.pattern, layout, config, config.timezoneOffset);\n}\n\nmodule.exports.configure = configure;","map":{"version":3,"sources":["/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/log4js/lib/appenders/dateFile.js"],"names":["streams","require","os","eol","EOL","appender","filename","pattern","layout","options","timezoneOffset","maxSize","maxLogSize","logFile","DateRollingFileStream","on","process","emit","app","logEvent","write","shutdown","complete","end","configure","config","layouts","basicLayout","type","alwaysIncludePattern","module","exports"],"mappings":"AAAA,IAAMA,OAAO,GAAGC,OAAO,CAAC,cAAD,CAAvB;;AACA,IAAMC,EAAE,GAAGD,OAAO,CAAC,IAAD,CAAlB;;AAEA,IAAME,GAAG,GAAGD,EAAE,CAACE,GAAf;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,QAAT,CACEC,QADF,EAEEC,OAFF,EAGEC,MAHF,EAIEC,OAJF,EAKEC,cALF,EAME;AACA;AACA;AACAD,EAAAA,OAAO,CAACE,OAAR,GAAkBF,OAAO,CAACG,UAA1B;AAEA,MAAMC,OAAO,GAAG,IAAIb,OAAO,CAACc,qBAAZ,CACdR,QADc,EAEdC,OAFc,EAGdE,OAHc,CAAhB;AAMAI,EAAAA,OAAO,CAACE,EAAR,CAAW,OAAX,EAAoB,YAAM;AACxBC,IAAAA,OAAO,CAACC,IAAR,CAAa,cAAb,EAA6B,KAA7B;AACD,GAFD;;AAIA,MAAMC,GAAG,GAAG,SAANA,GAAM,CAAUC,QAAV,EAAoB;AAC9B,QAAI,CAACN,OAAO,CAACO,KAAR,CAAcZ,MAAM,CAACW,QAAD,EAAWT,cAAX,CAAN,GAAmCP,GAAjD,EAAsD,MAAtD,CAAL,EAAoE;AAClEa,MAAAA,OAAO,CAACC,IAAR,CAAa,cAAb,EAA6B,IAA7B;AACD;AACF,GAJD;;AAMAC,EAAAA,GAAG,CAACG,QAAJ,GAAe,UAAUC,QAAV,EAAoB;AACjCT,IAAAA,OAAO,CAACO,KAAR,CAAc,EAAd,EAAkB,OAAlB,EAA2B,YAAM;AAC/BP,MAAAA,OAAO,CAACU,GAAR,CAAYD,QAAZ;AACD,KAFD;AAGD,GAJD;;AAMA,SAAOJ,GAAP;AACD;;AAED,SAASM,SAAT,CAAmBC,MAAnB,EAA2BC,OAA3B,EAAoC;AAClC,MAAIlB,MAAM,GAAGkB,OAAO,CAACC,WAArB;;AAEA,MAAIF,MAAM,CAACjB,MAAX,EAAmB;AACjBA,IAAAA,MAAM,GAAGkB,OAAO,CAAClB,MAAR,CAAeiB,MAAM,CAACjB,MAAP,CAAcoB,IAA7B,EAAmCH,MAAM,CAACjB,MAA1C,CAAT;AACD;;AAED,MAAI,CAACiB,MAAM,CAACI,oBAAZ,EAAkC;AAChCJ,IAAAA,MAAM,CAACI,oBAAP,GAA8B,KAA9B;AACD;;AAED,SAAOxB,QAAQ,CACboB,MAAM,CAACnB,QADM,EAEbmB,MAAM,CAAClB,OAFM,EAGbC,MAHa,EAIbiB,MAJa,EAKbA,MAAM,CAACf,cALM,CAAf;AAOD;;AAEDoB,MAAM,CAACC,OAAP,CAAeP,SAAf,GAA2BA,SAA3B","sourcesContent":["const streams = require('streamroller');\nconst os = require('os');\n\nconst eol = os.EOL;\n\n/**\n * File appender that rolls files according to a date pattern.\n * @filename base filename.\n * @pattern the format that will be added to the end of filename when rolling,\n *          also used to check when to roll files - defaults to '.yyyy-MM-dd'\n * @layout layout function for log messages - defaults to basicLayout\n * @timezoneOffset optional timezone offset in minutes - defaults to system local\n */\nfunction appender(\n  filename,\n  pattern,\n  layout,\n  options,\n  timezoneOffset\n) {\n  // the options for file appender use maxLogSize, but the docs say any file appender\n  // options should work for dateFile as well.\n  options.maxSize = options.maxLogSize;\n\n  const logFile = new streams.DateRollingFileStream(\n    filename,\n    pattern,\n    options\n  );\n\n  logFile.on(\"drain\", () => {\n    process.emit(\"log4js:pause\", false);\n  });\n\n  const app = function (logEvent) {\n    if (!logFile.write(layout(logEvent, timezoneOffset) + eol, \"utf8\")) {\n      process.emit(\"log4js:pause\", true);\n    }\n  };\n\n  app.shutdown = function (complete) {\n    logFile.write('', 'utf-8', () => {\n      logFile.end(complete);\n    });\n  };\n\n  return app;\n}\n\nfunction configure(config, layouts) {\n  let layout = layouts.basicLayout;\n\n  if (config.layout) {\n    layout = layouts.layout(config.layout.type, config.layout);\n  }\n\n  if (!config.alwaysIncludePattern) {\n    config.alwaysIncludePattern = false;\n  }\n\n  return appender(\n    config.filename,\n    config.pattern,\n    layout,\n    config,\n    config.timezoneOffset\n  );\n}\n\nmodule.exports.configure = configure;\n"]},"metadata":{},"sourceType":"script"}