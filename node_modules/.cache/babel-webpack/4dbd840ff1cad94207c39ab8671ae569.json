{"ast":null,"code":"\"use strict\";\n\nvar path = require(\"path\");\n/**\n * @param {string} context context for relative path\n * @param {string} relativePath path\n * @returns {string} absolute path\n */\n\n\nvar requestToAbsolute = function requestToAbsolute(context, relativePath) {\n  if (relativePath.startsWith(\"./\") || relativePath.startsWith(\"../\")) return path.join(context, relativePath);\n  return relativePath;\n};\n/**\n * @typedef {Object} MakeRelativePathsCache\n * @property {Map<string, Map<string, string>>=} relativePaths\n */\n\n/**\n *\n * @param {string} maybeAbsolutePath path to check\n * @returns {boolean} returns true if path is \"Absolute Path\"-like\n */\n\n\nvar looksLikeAbsolutePath = function looksLikeAbsolutePath(maybeAbsolutePath) {\n  if (/^\\/.*\\/$/.test(maybeAbsolutePath)) {\n    // this 'path' is actually a regexp generated by dynamic requires.\n    // Don't treat it as an absolute path.\n    return false;\n  }\n\n  return /^(?:[a-z]:\\\\|\\/)/i.test(maybeAbsolutePath);\n};\n/**\n *\n * @param {string} p path to normalize\n * @returns {string} normalized version of path\n */\n\n\nvar normalizePathSeparator = function normalizePathSeparator(p) {\n  return p.replace(/\\\\/g, \"/\");\n};\n/**\n *\n * @param {string} context context for relative path\n * @param {string} identifier identifier for path\n * @returns {string} a converted relative path\n */\n\n\nvar _makePathsRelative = function _makePathsRelative(context, identifier) {\n  return identifier.split(/([|! ])/).map(function (str) {\n    return looksLikeAbsolutePath(str) ? normalizePathSeparator(path.relative(context, str)) : str;\n  }).join(\"\");\n};\n/**\n *\n * @param {string} context context used to create relative path\n * @param {string} identifier identifier used to create relative path\n * @param {MakeRelativePathsCache=} cache the cache object being set\n * @returns {string} the returned relative path\n */\n\n\nexports.makePathsRelative = function (context, identifier, cache) {\n  if (!cache) return _makePathsRelative(context, identifier);\n  var relativePaths = cache.relativePaths || (cache.relativePaths = new Map());\n  var cachedResult;\n  var contextCache = relativePaths.get(context);\n\n  if (contextCache === undefined) {\n    relativePaths.set(context, contextCache = new Map());\n  } else {\n    cachedResult = contextCache.get(identifier);\n  }\n\n  if (cachedResult !== undefined) {\n    return cachedResult;\n  } else {\n    var relativePath = _makePathsRelative(context, identifier);\n\n    contextCache.set(identifier, relativePath);\n    return relativePath;\n  }\n};\n/**\n * @param {string} context absolute context path\n * @param {string} request any request string may containing absolute paths, query string, etc.\n * @returns {string} a new request string avoiding absolute paths when possible\n */\n\n\nexports.contextify = function (context, request) {\n  return request.split(\"!\").map(function (r) {\n    var splitPath = r.split(\"?\", 2);\n\n    if (/^[a-zA-Z]:\\\\/.test(splitPath[0])) {\n      splitPath[0] = path.win32.relative(context, splitPath[0]);\n\n      if (!/^[a-zA-Z]:\\\\/.test(splitPath[0])) {\n        splitPath[0] = splitPath[0].replace(/\\\\/g, \"/\");\n      }\n    }\n\n    if (/^\\//.test(splitPath[0])) {\n      splitPath[0] = path.posix.relative(context, splitPath[0]);\n    }\n\n    if (!/^(\\.\\.\\/|\\/|[a-zA-Z]:\\\\)/.test(splitPath[0])) {\n      splitPath[0] = \"./\" + splitPath[0];\n    }\n\n    return splitPath.join(\"?\");\n  }).join(\"!\");\n};\n/**\n * @param {string} context absolute context path\n * @param {string} request any request string\n * @returns {string} a new request string using absolute paths when possible\n */\n\n\nvar _absolutify = function _absolutify(context, request) {\n  return request.split(\"!\").map(function (r) {\n    return requestToAbsolute(context, r);\n  }).join(\"!\");\n};\n\nexports.absolutify = _absolutify;","map":{"version":3,"sources":["/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/webpack/lib/util/identifier.js"],"names":["path","require","requestToAbsolute","context","relativePath","startsWith","join","looksLikeAbsolutePath","maybeAbsolutePath","test","normalizePathSeparator","p","replace","_makePathsRelative","identifier","split","map","str","relative","exports","makePathsRelative","cache","relativePaths","Map","cachedResult","contextCache","get","undefined","set","contextify","request","r","splitPath","win32","posix","_absolutify","absolutify"],"mappings":"AAAA;;AACA,IAAMA,IAAI,GAAGC,OAAO,CAAC,MAAD,CAApB;AAEA;AACA;AACA;AACA;AACA;;;AACA,IAAMC,iBAAiB,GAAG,SAApBA,iBAAoB,CAACC,OAAD,EAAUC,YAAV,EAA2B;AACpD,MAAIA,YAAY,CAACC,UAAb,CAAwB,IAAxB,KAAiCD,YAAY,CAACC,UAAb,CAAwB,KAAxB,CAArC,EACC,OAAOL,IAAI,CAACM,IAAL,CAAUH,OAAV,EAAmBC,YAAnB,CAAP;AACD,SAAOA,YAAP;AACA,CAJD;AAMA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;AACA,IAAMG,qBAAqB,GAAG,SAAxBA,qBAAwB,CAAAC,iBAAiB,EAAI;AAClD,MAAI,WAAWC,IAAX,CAAgBD,iBAAhB,CAAJ,EAAwC;AACvC;AACA;AACA,WAAO,KAAP;AACA;;AACD,SAAO,oBAAoBC,IAApB,CAAyBD,iBAAzB,CAAP;AACA,CAPD;AASA;AACA;AACA;AACA;AACA;;;AACA,IAAME,sBAAsB,GAAG,SAAzBA,sBAAyB,CAAAC,CAAC;AAAA,SAAIA,CAAC,CAACC,OAAF,CAAU,KAAV,EAAiB,GAAjB,CAAJ;AAAA,CAAhC;AAEA;AACA;AACA;AACA;AACA;AACA;;;AACA,IAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,CAACV,OAAD,EAAUW,UAAV,EAAyB;AACnD,SAAOA,UAAU,CACfC,KADK,CACC,SADD,EAELC,GAFK,CAED,UAAAC,GAAG;AAAA,WACPV,qBAAqB,CAACU,GAAD,CAArB,GACGP,sBAAsB,CAACV,IAAI,CAACkB,QAAL,CAAcf,OAAd,EAAuBc,GAAvB,CAAD,CADzB,GAEGA,GAHI;AAAA,GAFF,EAOLX,IAPK,CAOA,EAPA,CAAP;AAQA,CATD;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAa,OAAO,CAACC,iBAAR,GAA4B,UAACjB,OAAD,EAAUW,UAAV,EAAsBO,KAAtB,EAAgC;AAC3D,MAAI,CAACA,KAAL,EAAY,OAAOR,kBAAkB,CAACV,OAAD,EAAUW,UAAV,CAAzB;AAEZ,MAAMQ,aAAa,GAClBD,KAAK,CAACC,aAAN,KAAwBD,KAAK,CAACC,aAAN,GAAsB,IAAIC,GAAJ,EAA9C,CADD;AAGA,MAAIC,YAAJ;AACA,MAAIC,YAAY,GAAGH,aAAa,CAACI,GAAd,CAAkBvB,OAAlB,CAAnB;;AACA,MAAIsB,YAAY,KAAKE,SAArB,EAAgC;AAC/BL,IAAAA,aAAa,CAACM,GAAd,CAAkBzB,OAAlB,EAA4BsB,YAAY,GAAG,IAAIF,GAAJ,EAA3C;AACA,GAFD,MAEO;AACNC,IAAAA,YAAY,GAAGC,YAAY,CAACC,GAAb,CAAiBZ,UAAjB,CAAf;AACA;;AAED,MAAIU,YAAY,KAAKG,SAArB,EAAgC;AAC/B,WAAOH,YAAP;AACA,GAFD,MAEO;AACN,QAAMpB,YAAY,GAAGS,kBAAkB,CAACV,OAAD,EAAUW,UAAV,CAAvC;;AACAW,IAAAA,YAAY,CAACG,GAAb,CAAiBd,UAAjB,EAA6BV,YAA7B;AACA,WAAOA,YAAP;AACA;AACD,CArBD;AAuBA;AACA;AACA;AACA;AACA;;;AACAe,OAAO,CAACU,UAAR,GAAqB,UAAC1B,OAAD,EAAU2B,OAAV,EAAsB;AAC1C,SAAOA,OAAO,CACZf,KADK,CACC,GADD,EAELC,GAFK,CAED,UAAAe,CAAC,EAAI;AACT,QAAMC,SAAS,GAAGD,CAAC,CAAChB,KAAF,CAAQ,GAAR,EAAa,CAAb,CAAlB;;AACA,QAAI,eAAeN,IAAf,CAAoBuB,SAAS,CAAC,CAAD,CAA7B,CAAJ,EAAuC;AACtCA,MAAAA,SAAS,CAAC,CAAD,CAAT,GAAehC,IAAI,CAACiC,KAAL,CAAWf,QAAX,CAAoBf,OAApB,EAA6B6B,SAAS,CAAC,CAAD,CAAtC,CAAf;;AACA,UAAI,CAAC,eAAevB,IAAf,CAAoBuB,SAAS,CAAC,CAAD,CAA7B,CAAL,EAAwC;AACvCA,QAAAA,SAAS,CAAC,CAAD,CAAT,GAAeA,SAAS,CAAC,CAAD,CAAT,CAAapB,OAAb,CAAqB,KAArB,EAA4B,GAA5B,CAAf;AACA;AACD;;AACD,QAAI,MAAMH,IAAN,CAAWuB,SAAS,CAAC,CAAD,CAApB,CAAJ,EAA8B;AAC7BA,MAAAA,SAAS,CAAC,CAAD,CAAT,GAAehC,IAAI,CAACkC,KAAL,CAAWhB,QAAX,CAAoBf,OAApB,EAA6B6B,SAAS,CAAC,CAAD,CAAtC,CAAf;AACA;;AACD,QAAI,CAAC,2BAA2BvB,IAA3B,CAAgCuB,SAAS,CAAC,CAAD,CAAzC,CAAL,EAAoD;AACnDA,MAAAA,SAAS,CAAC,CAAD,CAAT,GAAe,OAAOA,SAAS,CAAC,CAAD,CAA/B;AACA;;AACD,WAAOA,SAAS,CAAC1B,IAAV,CAAe,GAAf,CAAP;AACA,GAjBK,EAkBLA,IAlBK,CAkBA,GAlBA,CAAP;AAmBA,CApBD;AAsBA;AACA;AACA;AACA;AACA;;;AACA,IAAM6B,WAAW,GAAG,SAAdA,WAAc,CAAChC,OAAD,EAAU2B,OAAV,EAAsB;AACzC,SAAOA,OAAO,CACZf,KADK,CACC,GADD,EAELC,GAFK,CAED,UAAAe,CAAC;AAAA,WAAI7B,iBAAiB,CAACC,OAAD,EAAU4B,CAAV,CAArB;AAAA,GAFA,EAGLzB,IAHK,CAGA,GAHA,CAAP;AAIA,CALD;;AAOAa,OAAO,CAACiB,UAAR,GAAqBD,WAArB","sourcesContent":["\"use strict\";\nconst path = require(\"path\");\n\n/**\n * @param {string} context context for relative path\n * @param {string} relativePath path\n * @returns {string} absolute path\n */\nconst requestToAbsolute = (context, relativePath) => {\n\tif (relativePath.startsWith(\"./\") || relativePath.startsWith(\"../\"))\n\t\treturn path.join(context, relativePath);\n\treturn relativePath;\n};\n\n/**\n * @typedef {Object} MakeRelativePathsCache\n * @property {Map<string, Map<string, string>>=} relativePaths\n */\n\n/**\n *\n * @param {string} maybeAbsolutePath path to check\n * @returns {boolean} returns true if path is \"Absolute Path\"-like\n */\nconst looksLikeAbsolutePath = maybeAbsolutePath => {\n\tif (/^\\/.*\\/$/.test(maybeAbsolutePath)) {\n\t\t// this 'path' is actually a regexp generated by dynamic requires.\n\t\t// Don't treat it as an absolute path.\n\t\treturn false;\n\t}\n\treturn /^(?:[a-z]:\\\\|\\/)/i.test(maybeAbsolutePath);\n};\n\n/**\n *\n * @param {string} p path to normalize\n * @returns {string} normalized version of path\n */\nconst normalizePathSeparator = p => p.replace(/\\\\/g, \"/\");\n\n/**\n *\n * @param {string} context context for relative path\n * @param {string} identifier identifier for path\n * @returns {string} a converted relative path\n */\nconst _makePathsRelative = (context, identifier) => {\n\treturn identifier\n\t\t.split(/([|! ])/)\n\t\t.map(str =>\n\t\t\tlooksLikeAbsolutePath(str)\n\t\t\t\t? normalizePathSeparator(path.relative(context, str))\n\t\t\t\t: str\n\t\t)\n\t\t.join(\"\");\n};\n\n/**\n *\n * @param {string} context context used to create relative path\n * @param {string} identifier identifier used to create relative path\n * @param {MakeRelativePathsCache=} cache the cache object being set\n * @returns {string} the returned relative path\n */\nexports.makePathsRelative = (context, identifier, cache) => {\n\tif (!cache) return _makePathsRelative(context, identifier);\n\n\tconst relativePaths =\n\t\tcache.relativePaths || (cache.relativePaths = new Map());\n\n\tlet cachedResult;\n\tlet contextCache = relativePaths.get(context);\n\tif (contextCache === undefined) {\n\t\trelativePaths.set(context, (contextCache = new Map()));\n\t} else {\n\t\tcachedResult = contextCache.get(identifier);\n\t}\n\n\tif (cachedResult !== undefined) {\n\t\treturn cachedResult;\n\t} else {\n\t\tconst relativePath = _makePathsRelative(context, identifier);\n\t\tcontextCache.set(identifier, relativePath);\n\t\treturn relativePath;\n\t}\n};\n\n/**\n * @param {string} context absolute context path\n * @param {string} request any request string may containing absolute paths, query string, etc.\n * @returns {string} a new request string avoiding absolute paths when possible\n */\nexports.contextify = (context, request) => {\n\treturn request\n\t\t.split(\"!\")\n\t\t.map(r => {\n\t\t\tconst splitPath = r.split(\"?\", 2);\n\t\t\tif (/^[a-zA-Z]:\\\\/.test(splitPath[0])) {\n\t\t\t\tsplitPath[0] = path.win32.relative(context, splitPath[0]);\n\t\t\t\tif (!/^[a-zA-Z]:\\\\/.test(splitPath[0])) {\n\t\t\t\t\tsplitPath[0] = splitPath[0].replace(/\\\\/g, \"/\");\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (/^\\//.test(splitPath[0])) {\n\t\t\t\tsplitPath[0] = path.posix.relative(context, splitPath[0]);\n\t\t\t}\n\t\t\tif (!/^(\\.\\.\\/|\\/|[a-zA-Z]:\\\\)/.test(splitPath[0])) {\n\t\t\t\tsplitPath[0] = \"./\" + splitPath[0];\n\t\t\t}\n\t\t\treturn splitPath.join(\"?\");\n\t\t})\n\t\t.join(\"!\");\n};\n\n/**\n * @param {string} context absolute context path\n * @param {string} request any request string\n * @returns {string} a new request string using absolute paths when possible\n */\nconst _absolutify = (context, request) => {\n\treturn request\n\t\t.split(\"!\")\n\t\t.map(r => requestToAbsolute(context, r))\n\t\t.join(\"!\");\n};\n\nexports.absolutify = _absolutify;\n"]},"metadata":{},"sourceType":"script"}