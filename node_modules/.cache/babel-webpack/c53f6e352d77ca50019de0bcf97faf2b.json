{"ast":null,"code":"'use strict';\n\nvar webpack = require('webpack');\n\nvar createDomain = require('./createDomain');\n/**\n * A Entry, it can be of type string or string[] or Object<string | string[],string>\n * @typedef {(string[] | string | Object<string | string[],string>)} Entry\n */\n\n/**\n * Add entries Method\n * @param {?Object} config - Webpack config\n * @param {?Object} options - Dev-Server options\n * @param {?Object} server\n * @returns {void}\n */\n\n\nfunction addEntries(config, options, server) {\n  if (options.inline !== false) {\n    // we're stubbing the app in this method as it's static and doesn't require\n    // a server to be supplied. createDomain requires an app with the\n    // address() signature.\n    var app = server || {\n      address: function address() {\n        return {\n          port: options.port\n        };\n      }\n    };\n    /** @type {string} */\n\n    var domain = createDomain(options, app);\n    /** @type {string} */\n\n    var sockHost = options.sockHost ? \"&sockHost=\".concat(options.sockHost) : '';\n    /** @type {string} */\n\n    var sockPath = options.sockPath ? \"&sockPath=\".concat(options.sockPath) : '';\n    /** @type {string} */\n\n    var sockPort = options.sockPort ? \"&sockPort=\".concat(options.sockPort) : '';\n    /** @type {string} */\n\n    var clientEntry = \"\".concat(require.resolve('../../client/'), \"?\").concat(domain).concat(sockHost).concat(sockPath).concat(sockPort);\n    /** @type {(string[] | string)} */\n\n    var hotEntry;\n\n    if (options.hotOnly) {\n      hotEntry = require.resolve('webpack/hot/only-dev-server');\n    } else if (options.hot) {\n      hotEntry = require.resolve('webpack/hot/dev-server');\n    }\n    /**\n     * prependEntry Method\n     * @param {Entry} originalEntry\n     * @param {Entry} additionalEntries\n     * @returns {Entry}\n     */\n\n\n    var prependEntry = function prependEntry(originalEntry, additionalEntries) {\n      if (typeof originalEntry === 'function') {\n        return function () {\n          return Promise.resolve(originalEntry()).then(function (entry) {\n            return prependEntry(entry, additionalEntries);\n          });\n        };\n      }\n\n      if (typeof originalEntry === 'object' && !Array.isArray(originalEntry)) {\n        /** @type {Object<string,string>} */\n        var clone = {};\n        Object.keys(originalEntry).forEach(function (key) {\n          // entry[key] should be a string here\n          var entryDescription = originalEntry[key];\n\n          if (typeof entryDescription === 'object' && entryDescription.import) {\n            clone[key] = Object.assign({}, entryDescription, {\n              import: prependEntry(entryDescription.import, additionalEntries)\n            });\n          } else {\n            clone[key] = prependEntry(entryDescription, additionalEntries);\n          }\n        });\n        return clone;\n      } // in this case, entry is a string or an array.\n      // make sure that we do not add duplicates.\n\n      /** @type {Entry} */\n\n\n      var entriesClone = additionalEntries.slice(0);\n      [].concat(originalEntry).forEach(function (newEntry) {\n        if (!entriesClone.includes(newEntry)) {\n          entriesClone.push(newEntry);\n        }\n      });\n      return entriesClone;\n    };\n    /**\n     *\n     * Description of the option for checkInject method\n     * @typedef {Function} checkInjectOptionsParam\n     * @param {Object} _config - compilerConfig\n     * @return {Boolean}\n     */\n\n    /**\n     *\n     * @param {Boolean | checkInjectOptionsParam} option - inject(Hot|Client) it is Boolean | fn => Boolean\n     * @param {Object} _config\n     * @param {Boolean} defaultValue\n     * @return {Boolean}\n     */\n    // eslint-disable-next-line no-shadow\n\n\n    var checkInject = function checkInject(option, _config, defaultValue) {\n      if (typeof option === 'boolean') return option;\n      if (typeof option === 'function') return option(_config);\n      return defaultValue;\n    }; // eslint-disable-next-line no-shadow\n\n\n    [].concat(config).forEach(function (config) {\n      /** @type {Boolean} */\n      var webTarget = ['web', 'webworker', 'electron-renderer', 'node-webkit', undefined, // eslint-disable-line\n      null].includes(config.target);\n      /** @type {Entry} */\n\n      var additionalEntries = checkInject(options.injectClient, config, webTarget) ? [clientEntry] : [];\n\n      if (hotEntry && checkInject(options.injectHot, config, true)) {\n        additionalEntries.push(hotEntry);\n      }\n\n      config.entry = prependEntry(config.entry || './src', additionalEntries);\n\n      if (options.hot || options.hotOnly) {\n        config.plugins = config.plugins || [];\n\n        if (!config.plugins.find( // Check for the name rather than the constructor reference in case\n        // there are multiple copies of webpack installed\n        function (plugin) {\n          return plugin.constructor.name === 'HotModuleReplacementPlugin';\n        })) {\n          config.plugins.push(new webpack.HotModuleReplacementPlugin());\n        }\n      }\n    });\n  }\n}\n\nmodule.exports = addEntries;","map":{"version":3,"sources":["/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/webpack-dev-server/lib/utils/addEntries.js"],"names":["webpack","require","createDomain","addEntries","config","options","server","inline","app","address","port","domain","sockHost","sockPath","sockPort","clientEntry","resolve","hotEntry","hotOnly","hot","prependEntry","originalEntry","additionalEntries","Promise","then","entry","Array","isArray","clone","Object","keys","forEach","key","entryDescription","import","assign","entriesClone","slice","concat","newEntry","includes","push","checkInject","option","_config","defaultValue","webTarget","undefined","target","injectClient","injectHot","plugins","find","plugin","constructor","name","HotModuleReplacementPlugin","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nconst webpack = require('webpack');\nconst createDomain = require('./createDomain');\n\n/**\n * A Entry, it can be of type string or string[] or Object<string | string[],string>\n * @typedef {(string[] | string | Object<string | string[],string>)} Entry\n */\n\n/**\n * Add entries Method\n * @param {?Object} config - Webpack config\n * @param {?Object} options - Dev-Server options\n * @param {?Object} server\n * @returns {void}\n */\nfunction addEntries(config, options, server) {\n  if (options.inline !== false) {\n    // we're stubbing the app in this method as it's static and doesn't require\n    // a server to be supplied. createDomain requires an app with the\n    // address() signature.\n\n    const app = server || {\n      address() {\n        return { port: options.port };\n      },\n    };\n\n    /** @type {string} */\n    const domain = createDomain(options, app);\n    /** @type {string} */\n    const sockHost = options.sockHost ? `&sockHost=${options.sockHost}` : '';\n    /** @type {string} */\n    const sockPath = options.sockPath ? `&sockPath=${options.sockPath}` : '';\n    /** @type {string} */\n    const sockPort = options.sockPort ? `&sockPort=${options.sockPort}` : '';\n    /** @type {string} */\n    const clientEntry = `${require.resolve(\n      '../../client/'\n    )}?${domain}${sockHost}${sockPath}${sockPort}`;\n\n    /** @type {(string[] | string)} */\n    let hotEntry;\n\n    if (options.hotOnly) {\n      hotEntry = require.resolve('webpack/hot/only-dev-server');\n    } else if (options.hot) {\n      hotEntry = require.resolve('webpack/hot/dev-server');\n    }\n    /**\n     * prependEntry Method\n     * @param {Entry} originalEntry\n     * @param {Entry} additionalEntries\n     * @returns {Entry}\n     */\n    const prependEntry = (originalEntry, additionalEntries) => {\n      if (typeof originalEntry === 'function') {\n        return () =>\n          Promise.resolve(originalEntry()).then((entry) =>\n            prependEntry(entry, additionalEntries)\n          );\n      }\n\n      if (typeof originalEntry === 'object' && !Array.isArray(originalEntry)) {\n        /** @type {Object<string,string>} */\n        const clone = {};\n\n        Object.keys(originalEntry).forEach((key) => {\n          // entry[key] should be a string here\n          const entryDescription = originalEntry[key];\n          if (typeof entryDescription === 'object' && entryDescription.import) {\n            clone[key] = Object.assign({}, entryDescription, {\n              import: prependEntry(entryDescription.import, additionalEntries),\n            });\n          } else {\n            clone[key] = prependEntry(entryDescription, additionalEntries);\n          }\n        });\n\n        return clone;\n      }\n\n      // in this case, entry is a string or an array.\n      // make sure that we do not add duplicates.\n      /** @type {Entry} */\n      const entriesClone = additionalEntries.slice(0);\n      [].concat(originalEntry).forEach((newEntry) => {\n        if (!entriesClone.includes(newEntry)) {\n          entriesClone.push(newEntry);\n        }\n      });\n      return entriesClone;\n    };\n\n    /**\n     *\n     * Description of the option for checkInject method\n     * @typedef {Function} checkInjectOptionsParam\n     * @param {Object} _config - compilerConfig\n     * @return {Boolean}\n     */\n\n    /**\n     *\n     * @param {Boolean | checkInjectOptionsParam} option - inject(Hot|Client) it is Boolean | fn => Boolean\n     * @param {Object} _config\n     * @param {Boolean} defaultValue\n     * @return {Boolean}\n     */\n    // eslint-disable-next-line no-shadow\n    const checkInject = (option, _config, defaultValue) => {\n      if (typeof option === 'boolean') return option;\n      if (typeof option === 'function') return option(_config);\n      return defaultValue;\n    };\n\n    // eslint-disable-next-line no-shadow\n    [].concat(config).forEach((config) => {\n      /** @type {Boolean} */\n      const webTarget = [\n        'web',\n        'webworker',\n        'electron-renderer',\n        'node-webkit',\n        undefined, // eslint-disable-line\n        null,\n      ].includes(config.target);\n      /** @type {Entry} */\n      const additionalEntries = checkInject(\n        options.injectClient,\n        config,\n        webTarget\n      )\n        ? [clientEntry]\n        : [];\n\n      if (hotEntry && checkInject(options.injectHot, config, true)) {\n        additionalEntries.push(hotEntry);\n      }\n\n      config.entry = prependEntry(config.entry || './src', additionalEntries);\n\n      if (options.hot || options.hotOnly) {\n        config.plugins = config.plugins || [];\n        if (\n          !config.plugins.find(\n            // Check for the name rather than the constructor reference in case\n            // there are multiple copies of webpack installed\n            (plugin) => plugin.constructor.name === 'HotModuleReplacementPlugin'\n          )\n        ) {\n          config.plugins.push(new webpack.HotModuleReplacementPlugin());\n        }\n      }\n    });\n  }\n}\n\nmodule.exports = addEntries;\n"]},"metadata":{},"sourceType":"script"}