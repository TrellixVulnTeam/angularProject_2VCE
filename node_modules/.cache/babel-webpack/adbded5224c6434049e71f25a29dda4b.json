{"ast":null,"code":"\"use strict\";\n\nvar _toConsumableArray = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/toConsumableArray\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.fileBufferToString = exports.fileBuffer = exports.stringToFileBuffer = void 0;\n\nfunction stringToFileBuffer(str) {\n  // If we're in Node...\n  if (typeof Buffer !== 'undefined' && typeof Buffer.from === 'function') {\n    var buf = Buffer.from(str);\n    var ab = new ArrayBuffer(buf.length);\n    var view = new Uint8Array(ab);\n\n    for (var i = 0; i < buf.length; ++i) {\n      view[i] = buf[i];\n    }\n\n    return ab;\n  } else if (typeof TextEncoder !== 'undefined') {\n    // Modern browsers implement TextEncode.\n    return new TextEncoder('utf-8').encode(str).buffer;\n  } else {\n    // Slowest method but sure to be compatible with every platform.\n    var _buf = new ArrayBuffer(str.length * 2); // 2 bytes for each char\n\n\n    var bufView = new Uint16Array(_buf);\n\n    for (var _i = 0, strLen = str.length; _i < strLen; _i++) {\n      bufView[_i] = str.charCodeAt(_i);\n    }\n\n    return _buf;\n  }\n}\n\nexports.stringToFileBuffer = stringToFileBuffer;\n\nexports.fileBuffer = function (strings) {\n  for (var _len = arguments.length, values = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    values[_key - 1] = arguments[_key];\n  }\n\n  return stringToFileBuffer(String.raw.apply(String, [strings].concat(values)));\n};\n\nfunction fileBufferToString(fileBuffer) {\n  if (fileBuffer.toString.length == 1) {\n    return fileBuffer.toString('utf-8');\n  } else if (typeof Buffer !== 'undefined') {\n    return Buffer.from(fileBuffer).toString('utf-8');\n  } else if (typeof TextDecoder !== 'undefined') {\n    // Modern browsers implement TextEncode.\n    return new TextDecoder('utf-8').decode(new Uint8Array(fileBuffer));\n  } else {\n    // Slowest method but sure to be compatible with every platform.\n    var bufView = new Uint8Array(fileBuffer);\n    var bufLength = bufView.length;\n    var result = '';\n    var chunkLength = Math.pow(2, 16) - 1; // We have to chunk it because String.fromCharCode.apply will throw\n    // `Maximum call stack size exceeded` on big inputs.\n\n    for (var i = 0; i < bufLength; i += chunkLength) {\n      if (i + chunkLength > bufLength) {\n        chunkLength = bufLength - i;\n      }\n\n      result += String.fromCharCode.apply(null, _toConsumableArray(bufView.subarray(i, i + chunkLength)));\n    }\n\n    return result;\n  }\n}\n\nexports.fileBufferToString = fileBufferToString;","map":{"version":3,"sources":["/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@angular-devkit/build-angular/node_modules/@angular-devkit/core/src/virtual-fs/host/buffer.js"],"names":["Object","defineProperty","exports","value","fileBufferToString","fileBuffer","stringToFileBuffer","str","Buffer","from","buf","ab","ArrayBuffer","length","view","Uint8Array","i","TextEncoder","encode","buffer","bufView","Uint16Array","strLen","charCodeAt","strings","values","String","raw","toString","TextDecoder","decode","bufLength","result","chunkLength","Math","pow","fromCharCode","apply","subarray"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.fileBufferToString = exports.fileBuffer = exports.stringToFileBuffer = void 0;\nfunction stringToFileBuffer(str) {\n    // If we're in Node...\n    if (typeof Buffer !== 'undefined' && typeof Buffer.from === 'function') {\n        const buf = Buffer.from(str);\n        const ab = new ArrayBuffer(buf.length);\n        const view = new Uint8Array(ab);\n        for (let i = 0; i < buf.length; ++i) {\n            view[i] = buf[i];\n        }\n        return ab;\n    }\n    else if (typeof TextEncoder !== 'undefined') {\n        // Modern browsers implement TextEncode.\n        return new TextEncoder('utf-8').encode(str).buffer;\n    }\n    else {\n        // Slowest method but sure to be compatible with every platform.\n        const buf = new ArrayBuffer(str.length * 2); // 2 bytes for each char\n        const bufView = new Uint16Array(buf);\n        for (let i = 0, strLen = str.length; i < strLen; i++) {\n            bufView[i] = str.charCodeAt(i);\n        }\n        return buf;\n    }\n}\nexports.stringToFileBuffer = stringToFileBuffer;\nexports.fileBuffer = (strings, ...values) => {\n    return stringToFileBuffer(String.raw(strings, ...values));\n};\nfunction fileBufferToString(fileBuffer) {\n    if (fileBuffer.toString.length == 1) {\n        return fileBuffer.toString('utf-8');\n    }\n    else if (typeof Buffer !== 'undefined') {\n        return Buffer.from(fileBuffer).toString('utf-8');\n    }\n    else if (typeof TextDecoder !== 'undefined') {\n        // Modern browsers implement TextEncode.\n        return new TextDecoder('utf-8').decode(new Uint8Array(fileBuffer));\n    }\n    else {\n        // Slowest method but sure to be compatible with every platform.\n        const bufView = new Uint8Array(fileBuffer);\n        const bufLength = bufView.length;\n        let result = '';\n        let chunkLength = Math.pow(2, 16) - 1;\n        // We have to chunk it because String.fromCharCode.apply will throw\n        // `Maximum call stack size exceeded` on big inputs.\n        for (let i = 0; i < bufLength; i += chunkLength) {\n            if (i + chunkLength > bufLength) {\n                chunkLength = bufLength - i;\n            }\n            result += String.fromCharCode.apply(null, [...bufView.subarray(i, i + chunkLength)]);\n        }\n        return result;\n    }\n}\nexports.fileBufferToString = fileBufferToString;\n"]},"metadata":{},"sourceType":"script"}