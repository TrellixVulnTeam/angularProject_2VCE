{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nvar _objectSpread = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/objectSpread2\");\n\nvar _classCallCheck = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/createClass\");\n\nvar forEachBail = require(\"./forEachBail\");\n\nvar getPaths = require(\"./getPaths\");\n\nvar _require = require(\"./util/path\"),\n    getType = _require.getType,\n    PathType = _require.PathType;\n/** @typedef {import(\"./Resolver\")} Resolver */\n\n/** @typedef {import(\"./Resolver\").ResolveStepHook} ResolveStepHook */\n\n\nmodule.exports = /*#__PURE__*/function () {\n  /**\n   * @param {string | ResolveStepHook} source source\n   * @param {string | ResolveStepHook} target target\n   */\n  function SymlinkPlugin(source, target) {\n    _classCallCheck(this, SymlinkPlugin);\n\n    this.source = source;\n    this.target = target;\n  }\n  /**\n   * @param {Resolver} resolver the resolver\n   * @returns {void}\n   */\n\n\n  _createClass(SymlinkPlugin, [{\n    key: \"apply\",\n    value: function apply(resolver) {\n      var target = resolver.ensureHook(this.target);\n      var fs = resolver.fileSystem;\n      resolver.getHook(this.source).tapAsync(\"SymlinkPlugin\", function (request, resolveContext, callback) {\n        if (request.ignoreSymlinks) return callback();\n        var pathsResult = getPaths(request.path);\n        var pathSeqments = pathsResult.seqments;\n        var paths = pathsResult.paths;\n        var containsSymlink = false;\n        var idx = -1;\n        forEachBail(paths, function (path, callback) {\n          idx++;\n          if (resolveContext.fileDependencies) resolveContext.fileDependencies.add(path);\n          fs.readlink(path, function (err, result) {\n            if (!err && result) {\n              pathSeqments[idx] = result;\n              containsSymlink = true; // Shortcut when absolute symlink found\n\n              var resultType = getType(result.toString());\n\n              if (resultType === PathType.AbsoluteWin || resultType === PathType.AbsolutePosix) {\n                return callback(null, idx);\n              }\n            }\n\n            callback();\n          });\n        }, function (err, idx) {\n          if (!containsSymlink) return callback();\n          var resultSeqments = typeof idx === \"number\" ? pathSeqments.slice(0, idx + 1) : pathSeqments.slice();\n          var result = resultSeqments.reduceRight(function (a, b) {\n            return resolver.join(a, b);\n          });\n\n          var obj = _objectSpread(_objectSpread({}, request), {}, {\n            path: result\n          });\n\n          resolver.doResolve(target, obj, \"resolved symlink to \" + result, resolveContext, callback);\n        });\n      });\n    }\n  }]);\n\n  return SymlinkPlugin;\n}();","map":{"version":3,"sources":["/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/enhanced-resolve/lib/SymlinkPlugin.js"],"names":["forEachBail","require","getPaths","getType","PathType","module","exports","source","target","resolver","ensureHook","fs","fileSystem","getHook","tapAsync","request","resolveContext","callback","ignoreSymlinks","pathsResult","path","pathSeqments","seqments","paths","containsSymlink","idx","fileDependencies","add","readlink","err","result","resultType","toString","AbsoluteWin","AbsolutePosix","resultSeqments","slice","reduceRight","a","b","join","obj","doResolve"],"mappings":"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","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst forEachBail = require(\"./forEachBail\");\nconst getPaths = require(\"./getPaths\");\nconst { getType, PathType } = require(\"./util/path\");\n\n/** @typedef {import(\"./Resolver\")} Resolver */\n/** @typedef {import(\"./Resolver\").ResolveStepHook} ResolveStepHook */\n\nmodule.exports = class SymlinkPlugin {\n\t/**\n\t * @param {string | ResolveStepHook} source source\n\t * @param {string | ResolveStepHook} target target\n\t */\n\tconstructor(source, target) {\n\t\tthis.source = source;\n\t\tthis.target = target;\n\t}\n\n\t/**\n\t * @param {Resolver} resolver the resolver\n\t * @returns {void}\n\t */\n\tapply(resolver) {\n\t\tconst target = resolver.ensureHook(this.target);\n\t\tconst fs = resolver.fileSystem;\n\t\tresolver\n\t\t\t.getHook(this.source)\n\t\t\t.tapAsync(\"SymlinkPlugin\", (request, resolveContext, callback) => {\n\t\t\t\tif (request.ignoreSymlinks) return callback();\n\t\t\t\tconst pathsResult = getPaths(request.path);\n\t\t\t\tconst pathSeqments = pathsResult.seqments;\n\t\t\t\tconst paths = pathsResult.paths;\n\n\t\t\t\tlet containsSymlink = false;\n\t\t\t\tlet idx = -1;\n\t\t\t\tforEachBail(\n\t\t\t\t\tpaths,\n\t\t\t\t\t(path, callback) => {\n\t\t\t\t\t\tidx++;\n\t\t\t\t\t\tif (resolveContext.fileDependencies)\n\t\t\t\t\t\t\tresolveContext.fileDependencies.add(path);\n\t\t\t\t\t\tfs.readlink(path, (err, result) => {\n\t\t\t\t\t\t\tif (!err && result) {\n\t\t\t\t\t\t\t\tpathSeqments[idx] = result;\n\t\t\t\t\t\t\t\tcontainsSymlink = true;\n\t\t\t\t\t\t\t\t// Shortcut when absolute symlink found\n\t\t\t\t\t\t\t\tconst resultType = getType(result.toString());\n\t\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t\tresultType === PathType.AbsoluteWin ||\n\t\t\t\t\t\t\t\t\tresultType === PathType.AbsolutePosix\n\t\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\t\treturn callback(null, idx);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tcallback();\n\t\t\t\t\t\t});\n\t\t\t\t\t},\n\t\t\t\t\t(err, idx) => {\n\t\t\t\t\t\tif (!containsSymlink) return callback();\n\t\t\t\t\t\tconst resultSeqments =\n\t\t\t\t\t\t\ttypeof idx === \"number\"\n\t\t\t\t\t\t\t\t? pathSeqments.slice(0, idx + 1)\n\t\t\t\t\t\t\t\t: pathSeqments.slice();\n\t\t\t\t\t\tconst result = resultSeqments.reduceRight((a, b) => {\n\t\t\t\t\t\t\treturn resolver.join(a, b);\n\t\t\t\t\t\t});\n\t\t\t\t\t\tconst obj = {\n\t\t\t\t\t\t\t...request,\n\t\t\t\t\t\t\tpath: result\n\t\t\t\t\t\t};\n\t\t\t\t\t\tresolver.doResolve(\n\t\t\t\t\t\t\ttarget,\n\t\t\t\t\t\t\tobj,\n\t\t\t\t\t\t\t\"resolved symlink to \" + result,\n\t\t\t\t\t\t\tresolveContext,\n\t\t\t\t\t\t\tcallback\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t});\n\t}\n};\n"]},"metadata":{},"sourceType":"script"}