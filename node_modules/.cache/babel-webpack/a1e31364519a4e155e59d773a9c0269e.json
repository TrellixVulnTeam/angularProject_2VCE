{"ast":null,"code":"\"use strict\";\n\nvar _createForOfIteratorHelper = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _classCallCheck = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/createSuper\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar matcher_1 = require(\"./matcher\");\n\nvar PartialMatcher = /*#__PURE__*/function (_matcher_1$default) {\n  _inherits(PartialMatcher, _matcher_1$default);\n\n  var _super = _createSuper(PartialMatcher);\n\n  function PartialMatcher() {\n    _classCallCheck(this, PartialMatcher);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(PartialMatcher, [{\n    key: \"match\",\n    value: function match(filepath) {\n      var parts = filepath.split('/');\n      var levels = parts.length;\n\n      var patterns = this._storage.filter(function (info) {\n        return !info.complete || info.segments.length > levels;\n      });\n\n      var _iterator = _createForOfIteratorHelper(patterns),\n          _step;\n\n      try {\n        var _loop = function _loop() {\n          var pattern = _step.value;\n          var section = pattern.sections[0];\n          /**\r\n           * In this case, the pattern has a globstar and we must read all directories unconditionally,\r\n           * but only if the level has reached the end of the first group.\r\n           *\r\n           * fixtures/{a,b}/**\r\n           *  ^ true/false  ^ always true\r\n          */\n\n          if (!pattern.complete && levels > section.length) {\n            return {\n              v: true\n            };\n          }\n\n          var match = parts.every(function (part, index) {\n            var segment = pattern.segments[index];\n\n            if (segment.dynamic && segment.patternRe.test(part)) {\n              return true;\n            }\n\n            if (!segment.dynamic && segment.pattern === part) {\n              return true;\n            }\n\n            return false;\n          });\n\n          if (match) {\n            return {\n              v: true\n            };\n          }\n        };\n\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var _ret = _loop();\n\n          if (typeof _ret === \"object\") return _ret.v;\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      return false;\n    }\n  }]);\n\n  return PartialMatcher;\n}(matcher_1.default);\n\nexports.default = PartialMatcher;","map":{"version":3,"sources":["/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/fast-glob/out/providers/matchers/partial.js"],"names":["Object","defineProperty","exports","value","matcher_1","require","PartialMatcher","filepath","parts","split","levels","length","patterns","_storage","filter","info","complete","segments","pattern","section","sections","match","every","part","index","segment","dynamic","patternRe","test","default"],"mappings":"AAAA;;;;;;;;;;;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AACA,IAAMC,SAAS,GAAGC,OAAO,CAAC,WAAD,CAAzB;;IACMC,c;;;;;;;;;;;;;WACF,eAAMC,QAAN,EAAgB;AACZ,UAAMC,KAAK,GAAGD,QAAQ,CAACE,KAAT,CAAe,GAAf,CAAd;AACA,UAAMC,MAAM,GAAGF,KAAK,CAACG,MAArB;;AACA,UAAMC,QAAQ,GAAG,KAAKC,QAAL,CAAcC,MAAd,CAAqB,UAACC,IAAD;AAAA,eAAU,CAACA,IAAI,CAACC,QAAN,IAAkBD,IAAI,CAACE,QAAL,CAAcN,MAAd,GAAuBD,MAAnD;AAAA,OAArB,CAAjB;;AAHY,iDAIUE,QAJV;AAAA;;AAAA;AAAA;AAAA,cAIDM,OAJC;AAKR,cAAMC,OAAO,GAAGD,OAAO,CAACE,QAAR,CAAiB,CAAjB,CAAhB;AACA;AACZ;AACA;AACA;AACA;AACA;AACA;;AACY,cAAI,CAACF,OAAO,CAACF,QAAT,IAAqBN,MAAM,GAAGS,OAAO,CAACR,MAA1C,EAAkD;AAC9C;AAAA,iBAAO;AAAP;AACH;;AACD,cAAMU,KAAK,GAAGb,KAAK,CAACc,KAAN,CAAY,UAACC,IAAD,EAAOC,KAAP,EAAiB;AACvC,gBAAMC,OAAO,GAAGP,OAAO,CAACD,QAAR,CAAiBO,KAAjB,CAAhB;;AACA,gBAAIC,OAAO,CAACC,OAAR,IAAmBD,OAAO,CAACE,SAAR,CAAkBC,IAAlB,CAAuBL,IAAvB,CAAvB,EAAqD;AACjD,qBAAO,IAAP;AACH;;AACD,gBAAI,CAACE,OAAO,CAACC,OAAT,IAAoBD,OAAO,CAACP,OAAR,KAAoBK,IAA5C,EAAkD;AAC9C,qBAAO,IAAP;AACH;;AACD,mBAAO,KAAP;AACH,WATa,CAAd;;AAUA,cAAIF,KAAJ,EAAW;AACP;AAAA,iBAAO;AAAP;AACH;AA5BO;;AAIZ,4DAAgC;AAAA;;AAAA;AAyB/B;AA7BW;AAAA;AAAA;AAAA;AAAA;;AA8BZ,aAAO,KAAP;AACH;;;;EAhCwBjB,SAAS,CAACyB,O;;AAkCvC3B,OAAO,CAAC2B,OAAR,GAAkBvB,cAAlB","sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst matcher_1 = require(\"./matcher\");\r\nclass PartialMatcher extends matcher_1.default {\r\n    match(filepath) {\r\n        const parts = filepath.split('/');\r\n        const levels = parts.length;\r\n        const patterns = this._storage.filter((info) => !info.complete || info.segments.length > levels);\r\n        for (const pattern of patterns) {\r\n            const section = pattern.sections[0];\r\n            /**\r\n             * In this case, the pattern has a globstar and we must read all directories unconditionally,\r\n             * but only if the level has reached the end of the first group.\r\n             *\r\n             * fixtures/{a,b}/**\r\n             *  ^ true/false  ^ always true\r\n            */\r\n            if (!pattern.complete && levels > section.length) {\r\n                return true;\r\n            }\r\n            const match = parts.every((part, index) => {\r\n                const segment = pattern.segments[index];\r\n                if (segment.dynamic && segment.patternRe.test(part)) {\r\n                    return true;\r\n                }\r\n                if (!segment.dynamic && segment.pattern === part) {\r\n                    return true;\r\n                }\r\n                return false;\r\n            });\r\n            if (match) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n}\r\nexports.default = PartialMatcher;\r\n"]},"metadata":{},"sourceType":"script"}