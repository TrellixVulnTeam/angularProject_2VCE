{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nvar _classCallCheck = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/createClass\");\n\nvar path = require(\"path\");\n\nvar NormalModuleReplacementPlugin = /*#__PURE__*/function () {\n  function NormalModuleReplacementPlugin(resourceRegExp, newResource) {\n    _classCallCheck(this, NormalModuleReplacementPlugin);\n\n    this.resourceRegExp = resourceRegExp;\n    this.newResource = newResource;\n  }\n\n  _createClass(NormalModuleReplacementPlugin, [{\n    key: \"apply\",\n    value: function apply(compiler) {\n      var resourceRegExp = this.resourceRegExp;\n      var newResource = this.newResource;\n      compiler.hooks.normalModuleFactory.tap(\"NormalModuleReplacementPlugin\", function (nmf) {\n        nmf.hooks.beforeResolve.tap(\"NormalModuleReplacementPlugin\", function (result) {\n          if (!result) return;\n\n          if (resourceRegExp.test(result.request)) {\n            if (typeof newResource === \"function\") {\n              newResource(result);\n            } else {\n              result.request = newResource;\n            }\n          }\n\n          return result;\n        });\n        nmf.hooks.afterResolve.tap(\"NormalModuleReplacementPlugin\", function (result) {\n          if (!result) return;\n\n          if (resourceRegExp.test(result.resource)) {\n            if (typeof newResource === \"function\") {\n              newResource(result);\n            } else {\n              result.resource = path.resolve(path.dirname(result.resource), newResource);\n            }\n          }\n\n          return result;\n        });\n      });\n    }\n  }]);\n\n  return NormalModuleReplacementPlugin;\n}();\n\nmodule.exports = NormalModuleReplacementPlugin;","map":{"version":3,"sources":["/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/webpack/lib/NormalModuleReplacementPlugin.js"],"names":["path","require","NormalModuleReplacementPlugin","resourceRegExp","newResource","compiler","hooks","normalModuleFactory","tap","nmf","beforeResolve","result","test","request","afterResolve","resource","resolve","dirname","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;;;;;AAEA,IAAMA,IAAI,GAAGC,OAAO,CAAC,MAAD,CAApB;;IAEMC,6B;AACL,yCAAYC,cAAZ,EAA4BC,WAA5B,EAAyC;AAAA;;AACxC,SAAKD,cAAL,GAAsBA,cAAtB;AACA,SAAKC,WAAL,GAAmBA,WAAnB;AACA;;;;WAED,eAAMC,QAAN,EAAgB;AACf,UAAMF,cAAc,GAAG,KAAKA,cAA5B;AACA,UAAMC,WAAW,GAAG,KAAKA,WAAzB;AACAC,MAAAA,QAAQ,CAACC,KAAT,CAAeC,mBAAf,CAAmCC,GAAnC,CACC,+BADD,EAEC,UAAAC,GAAG,EAAI;AACNA,QAAAA,GAAG,CAACH,KAAJ,CAAUI,aAAV,CAAwBF,GAAxB,CAA4B,+BAA5B,EAA6D,UAAAG,MAAM,EAAI;AACtE,cAAI,CAACA,MAAL,EAAa;;AACb,cAAIR,cAAc,CAACS,IAAf,CAAoBD,MAAM,CAACE,OAA3B,CAAJ,EAAyC;AACxC,gBAAI,OAAOT,WAAP,KAAuB,UAA3B,EAAuC;AACtCA,cAAAA,WAAW,CAACO,MAAD,CAAX;AACA,aAFD,MAEO;AACNA,cAAAA,MAAM,CAACE,OAAP,GAAiBT,WAAjB;AACA;AACD;;AACD,iBAAOO,MAAP;AACA,SAVD;AAWAF,QAAAA,GAAG,CAACH,KAAJ,CAAUQ,YAAV,CAAuBN,GAAvB,CAA2B,+BAA3B,EAA4D,UAAAG,MAAM,EAAI;AACrE,cAAI,CAACA,MAAL,EAAa;;AACb,cAAIR,cAAc,CAACS,IAAf,CAAoBD,MAAM,CAACI,QAA3B,CAAJ,EAA0C;AACzC,gBAAI,OAAOX,WAAP,KAAuB,UAA3B,EAAuC;AACtCA,cAAAA,WAAW,CAACO,MAAD,CAAX;AACA,aAFD,MAEO;AACNA,cAAAA,MAAM,CAACI,QAAP,GAAkBf,IAAI,CAACgB,OAAL,CACjBhB,IAAI,CAACiB,OAAL,CAAaN,MAAM,CAACI,QAApB,CADiB,EAEjBX,WAFiB,CAAlB;AAIA;AACD;;AACD,iBAAOO,MAAP;AACA,SAbD;AAcA,OA5BF;AA8BA;;;;;;AAGFO,MAAM,CAACC,OAAP,GAAiBjB,6BAAjB","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst path = require(\"path\");\n\nclass NormalModuleReplacementPlugin {\n\tconstructor(resourceRegExp, newResource) {\n\t\tthis.resourceRegExp = resourceRegExp;\n\t\tthis.newResource = newResource;\n\t}\n\n\tapply(compiler) {\n\t\tconst resourceRegExp = this.resourceRegExp;\n\t\tconst newResource = this.newResource;\n\t\tcompiler.hooks.normalModuleFactory.tap(\n\t\t\t\"NormalModuleReplacementPlugin\",\n\t\t\tnmf => {\n\t\t\t\tnmf.hooks.beforeResolve.tap(\"NormalModuleReplacementPlugin\", result => {\n\t\t\t\t\tif (!result) return;\n\t\t\t\t\tif (resourceRegExp.test(result.request)) {\n\t\t\t\t\t\tif (typeof newResource === \"function\") {\n\t\t\t\t\t\t\tnewResource(result);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tresult.request = newResource;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\treturn result;\n\t\t\t\t});\n\t\t\t\tnmf.hooks.afterResolve.tap(\"NormalModuleReplacementPlugin\", result => {\n\t\t\t\t\tif (!result) return;\n\t\t\t\t\tif (resourceRegExp.test(result.resource)) {\n\t\t\t\t\t\tif (typeof newResource === \"function\") {\n\t\t\t\t\t\t\tnewResource(result);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tresult.resource = path.resolve(\n\t\t\t\t\t\t\t\tpath.dirname(result.resource),\n\t\t\t\t\t\t\t\tnewResource\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\treturn result;\n\t\t\t\t});\n\t\t\t}\n\t\t);\n\t}\n}\n\nmodule.exports = NormalModuleReplacementPlugin;\n"]},"metadata":{},"sourceType":"script"}