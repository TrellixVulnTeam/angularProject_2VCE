{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.levenshtein = exports.capitalize = exports.underscore = exports.classify = exports.camelize = exports.dasherize = exports.decamelize = void 0;\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nvar STRING_DASHERIZE_REGEXP = /[ _]/g;\nvar STRING_DECAMELIZE_REGEXP = /([a-z\\d])([A-Z])/g;\nvar STRING_CAMELIZE_REGEXP = /(-|_|\\.|\\s)+(.)?/g;\nvar STRING_UNDERSCORE_REGEXP_1 = /([a-z\\d])([A-Z]+)/g;\nvar STRING_UNDERSCORE_REGEXP_2 = /-|\\s+/g;\n/**\n * Converts a camelized string into all lower case separated by underscores.\n *\n ```javascript\n decamelize('innerHTML');         // 'inner_html'\n decamelize('action_name');       // 'action_name'\n decamelize('css-class-name');    // 'css-class-name'\n decamelize('my favorite items'); // 'my favorite items'\n ```\n\n @method decamelize\n @param {String} str The string to decamelize.\n @return {String} the decamelized string.\n */\n\nfunction decamelize(str) {\n  return str.replace(STRING_DECAMELIZE_REGEXP, '$1_$2').toLowerCase();\n}\n\nexports.decamelize = decamelize;\n/**\n Replaces underscores, spaces, or camelCase with dashes.\n\n ```javascript\n dasherize('innerHTML');         // 'inner-html'\n dasherize('action_name');       // 'action-name'\n dasherize('css-class-name');    // 'css-class-name'\n dasherize('my favorite items'); // 'my-favorite-items'\n ```\n\n @method dasherize\n @param {String} str The string to dasherize.\n @return {String} the dasherized string.\n */\n\nfunction dasherize(str) {\n  return decamelize(str).replace(STRING_DASHERIZE_REGEXP, '-');\n}\n\nexports.dasherize = dasherize;\n/**\n Returns the lowerCamelCase form of a string.\n\n ```javascript\n camelize('innerHTML');          // 'innerHTML'\n camelize('action_name');        // 'actionName'\n camelize('css-class-name');     // 'cssClassName'\n camelize('my favorite items');  // 'myFavoriteItems'\n camelize('My Favorite Items');  // 'myFavoriteItems'\n ```\n\n @method camelize\n @param {String} str The string to camelize.\n @return {String} the camelized string.\n */\n\nfunction camelize(str) {\n  return str.replace(STRING_CAMELIZE_REGEXP, function (_match, _separator, chr) {\n    return chr ? chr.toUpperCase() : '';\n  }).replace(/^([A-Z])/, function (match) {\n    return match.toLowerCase();\n  });\n}\n\nexports.camelize = camelize;\n/**\n Returns the UpperCamelCase form of a string.\n\n ```javascript\n 'innerHTML'.classify();          // 'InnerHTML'\n 'action_name'.classify();        // 'ActionName'\n 'css-class-name'.classify();     // 'CssClassName'\n 'my favorite items'.classify();  // 'MyFavoriteItems'\n ```\n\n @method classify\n @param {String} str the string to classify\n @return {String} the classified string\n */\n\nfunction classify(str) {\n  return str.split('.').map(function (part) {\n    return capitalize(camelize(part));\n  }).join('.');\n}\n\nexports.classify = classify;\n/**\n More general than decamelize. Returns the lower\\_case\\_and\\_underscored\n form of a string.\n\n ```javascript\n 'innerHTML'.underscore();          // 'inner_html'\n 'action_name'.underscore();        // 'action_name'\n 'css-class-name'.underscore();     // 'css_class_name'\n 'my favorite items'.underscore();  // 'my_favorite_items'\n ```\n\n @method underscore\n @param {String} str The string to underscore.\n @return {String} the underscored string.\n */\n\nfunction underscore(str) {\n  return str.replace(STRING_UNDERSCORE_REGEXP_1, '$1_$2').replace(STRING_UNDERSCORE_REGEXP_2, '_').toLowerCase();\n}\n\nexports.underscore = underscore;\n/**\n Returns the Capitalized form of a string\n\n ```javascript\n 'innerHTML'.capitalize()         // 'InnerHTML'\n 'action_name'.capitalize()       // 'Action_name'\n 'css-class-name'.capitalize()    // 'Css-class-name'\n 'my favorite items'.capitalize() // 'My favorite items'\n ```\n\n @method capitalize\n @param {String} str The string to capitalize.\n @return {String} The capitalized string.\n */\n\nfunction capitalize(str) {\n  return str.charAt(0).toUpperCase() + str.substr(1);\n}\n\nexports.capitalize = capitalize;\n/**\n * Calculate the levenshtein distance of two strings.\n * See https://en.wikipedia.org/wiki/Levenshtein_distance.\n * Based off https://gist.github.com/andrei-m/982927 (for using the faster dynamic programming\n * version).\n *\n * @param a String a.\n * @param b String b.\n * @returns A number that represents the distance between the two strings. The greater the number\n *   the more distant the strings are from each others.\n */\n\nfunction levenshtein(a, b) {\n  if (a.length == 0) {\n    return b.length;\n  }\n\n  if (b.length == 0) {\n    return a.length;\n  }\n\n  var matrix = []; // increment along the first column of each row\n\n  for (var i = 0; i <= b.length; i++) {\n    matrix[i] = [i];\n  } // increment each column in the first row\n\n\n  for (var j = 0; j <= a.length; j++) {\n    matrix[0][j] = j;\n  } // Fill in the rest of the matrix\n\n\n  for (var _i = 1; _i <= b.length; _i++) {\n    for (var _j = 1; _j <= a.length; _j++) {\n      if (b.charAt(_i - 1) == a.charAt(_j - 1)) {\n        matrix[_i][_j] = matrix[_i - 1][_j - 1];\n      } else {\n        matrix[_i][_j] = Math.min(matrix[_i - 1][_j - 1] + 1, // substitution\n        matrix[_i][_j - 1] + 1, // insertion\n        matrix[_i - 1][_j] + 1);\n      }\n    }\n  }\n\n  return matrix[b.length][a.length];\n}\n\nexports.levenshtein = levenshtein;","map":{"version":3,"sources":["/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@angular-devkit/build-angular/node_modules/@angular-devkit/core/src/utils/strings.js"],"names":["Object","defineProperty","exports","value","levenshtein","capitalize","underscore","classify","camelize","dasherize","decamelize","STRING_DASHERIZE_REGEXP","STRING_DECAMELIZE_REGEXP","STRING_CAMELIZE_REGEXP","STRING_UNDERSCORE_REGEXP_1","STRING_UNDERSCORE_REGEXP_2","str","replace","toLowerCase","_match","_separator","chr","toUpperCase","match","split","map","part","join","charAt","substr","a","b","length","matrix","i","j","Math","min"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.levenshtein = exports.capitalize = exports.underscore = exports.classify = exports.camelize = exports.dasherize = exports.decamelize = void 0;\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst STRING_DASHERIZE_REGEXP = (/[ _]/g);\nconst STRING_DECAMELIZE_REGEXP = (/([a-z\\d])([A-Z])/g);\nconst STRING_CAMELIZE_REGEXP = (/(-|_|\\.|\\s)+(.)?/g);\nconst STRING_UNDERSCORE_REGEXP_1 = (/([a-z\\d])([A-Z]+)/g);\nconst STRING_UNDERSCORE_REGEXP_2 = (/-|\\s+/g);\n/**\n * Converts a camelized string into all lower case separated by underscores.\n *\n ```javascript\n decamelize('innerHTML');         // 'inner_html'\n decamelize('action_name');       // 'action_name'\n decamelize('css-class-name');    // 'css-class-name'\n decamelize('my favorite items'); // 'my favorite items'\n ```\n\n @method decamelize\n @param {String} str The string to decamelize.\n @return {String} the decamelized string.\n */\nfunction decamelize(str) {\n    return str.replace(STRING_DECAMELIZE_REGEXP, '$1_$2').toLowerCase();\n}\nexports.decamelize = decamelize;\n/**\n Replaces underscores, spaces, or camelCase with dashes.\n\n ```javascript\n dasherize('innerHTML');         // 'inner-html'\n dasherize('action_name');       // 'action-name'\n dasherize('css-class-name');    // 'css-class-name'\n dasherize('my favorite items'); // 'my-favorite-items'\n ```\n\n @method dasherize\n @param {String} str The string to dasherize.\n @return {String} the dasherized string.\n */\nfunction dasherize(str) {\n    return decamelize(str).replace(STRING_DASHERIZE_REGEXP, '-');\n}\nexports.dasherize = dasherize;\n/**\n Returns the lowerCamelCase form of a string.\n\n ```javascript\n camelize('innerHTML');          // 'innerHTML'\n camelize('action_name');        // 'actionName'\n camelize('css-class-name');     // 'cssClassName'\n camelize('my favorite items');  // 'myFavoriteItems'\n camelize('My Favorite Items');  // 'myFavoriteItems'\n ```\n\n @method camelize\n @param {String} str The string to camelize.\n @return {String} the camelized string.\n */\nfunction camelize(str) {\n    return str\n        .replace(STRING_CAMELIZE_REGEXP, (_match, _separator, chr) => {\n        return chr ? chr.toUpperCase() : '';\n    })\n        .replace(/^([A-Z])/, (match) => match.toLowerCase());\n}\nexports.camelize = camelize;\n/**\n Returns the UpperCamelCase form of a string.\n\n ```javascript\n 'innerHTML'.classify();          // 'InnerHTML'\n 'action_name'.classify();        // 'ActionName'\n 'css-class-name'.classify();     // 'CssClassName'\n 'my favorite items'.classify();  // 'MyFavoriteItems'\n ```\n\n @method classify\n @param {String} str the string to classify\n @return {String} the classified string\n */\nfunction classify(str) {\n    return str.split('.').map(part => capitalize(camelize(part))).join('.');\n}\nexports.classify = classify;\n/**\n More general than decamelize. Returns the lower\\_case\\_and\\_underscored\n form of a string.\n\n ```javascript\n 'innerHTML'.underscore();          // 'inner_html'\n 'action_name'.underscore();        // 'action_name'\n 'css-class-name'.underscore();     // 'css_class_name'\n 'my favorite items'.underscore();  // 'my_favorite_items'\n ```\n\n @method underscore\n @param {String} str The string to underscore.\n @return {String} the underscored string.\n */\nfunction underscore(str) {\n    return str\n        .replace(STRING_UNDERSCORE_REGEXP_1, '$1_$2')\n        .replace(STRING_UNDERSCORE_REGEXP_2, '_')\n        .toLowerCase();\n}\nexports.underscore = underscore;\n/**\n Returns the Capitalized form of a string\n\n ```javascript\n 'innerHTML'.capitalize()         // 'InnerHTML'\n 'action_name'.capitalize()       // 'Action_name'\n 'css-class-name'.capitalize()    // 'Css-class-name'\n 'my favorite items'.capitalize() // 'My favorite items'\n ```\n\n @method capitalize\n @param {String} str The string to capitalize.\n @return {String} The capitalized string.\n */\nfunction capitalize(str) {\n    return str.charAt(0).toUpperCase() + str.substr(1);\n}\nexports.capitalize = capitalize;\n/**\n * Calculate the levenshtein distance of two strings.\n * See https://en.wikipedia.org/wiki/Levenshtein_distance.\n * Based off https://gist.github.com/andrei-m/982927 (for using the faster dynamic programming\n * version).\n *\n * @param a String a.\n * @param b String b.\n * @returns A number that represents the distance between the two strings. The greater the number\n *   the more distant the strings are from each others.\n */\nfunction levenshtein(a, b) {\n    if (a.length == 0) {\n        return b.length;\n    }\n    if (b.length == 0) {\n        return a.length;\n    }\n    const matrix = [];\n    // increment along the first column of each row\n    for (let i = 0; i <= b.length; i++) {\n        matrix[i] = [i];\n    }\n    // increment each column in the first row\n    for (let j = 0; j <= a.length; j++) {\n        matrix[0][j] = j;\n    }\n    // Fill in the rest of the matrix\n    for (let i = 1; i <= b.length; i++) {\n        for (let j = 1; j <= a.length; j++) {\n            if (b.charAt(i - 1) == a.charAt(j - 1)) {\n                matrix[i][j] = matrix[i - 1][j - 1];\n            }\n            else {\n                matrix[i][j] = Math.min(matrix[i - 1][j - 1] + 1, // substitution\n                matrix[i][j - 1] + 1, // insertion\n                matrix[i - 1][j] + 1);\n            }\n        }\n    }\n    return matrix[b.length][a.length];\n}\nexports.levenshtein = levenshtein;\n"]},"metadata":{},"sourceType":"script"}