{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createDispatcher = void 0;\n\nvar api_1 = require(\"./api\");\n\nvar exception_1 = require(\"./exception\");\n/**\n * OnReady a dispatcher that can dispatch to a sub job, depending on conditions.\n * @param options\n */\n\n\nfunction createDispatcher() {\n  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var defaultDelegate = null;\n  var conditionalDelegateList = [];\n  var job = Object.assign(function (argument, context) {\n    var maybeDelegate = conditionalDelegateList.find(function (_ref) {\n      var _ref2 = _slicedToArray(_ref, 1),\n          predicate = _ref2[0];\n\n      return predicate(argument);\n    });\n    var delegate = null;\n\n    if (maybeDelegate) {\n      delegate = context.scheduler.schedule(maybeDelegate[1], argument);\n    } else if (defaultDelegate) {\n      delegate = context.scheduler.schedule(defaultDelegate, argument);\n    } else {\n      throw new exception_1.JobDoesNotExistException('<null>');\n    }\n\n    context.inboundBus.subscribe(delegate.inboundBus);\n    return delegate.outboundBus;\n  }, {\n    jobDescription: options\n  });\n  return Object.assign(job, {\n    setDefaultJob: function setDefaultJob(name) {\n      if (api_1.isJobHandler(name)) {\n        name = name.jobDescription.name === undefined ? null : name.jobDescription.name;\n      }\n\n      defaultDelegate = name;\n    },\n    addConditionalJob: function addConditionalJob(predicate, name) {\n      conditionalDelegateList.push([predicate, name]);\n    }\n  });\n}\n\nexports.createDispatcher = createDispatcher;","map":{"version":3,"sources":["/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@angular-devkit/build-angular/node_modules/@angular-devkit/core/src/experimental/jobs/dispatcher.js"],"names":["Object","defineProperty","exports","value","createDispatcher","api_1","require","exception_1","options","defaultDelegate","conditionalDelegateList","job","assign","argument","context","maybeDelegate","find","predicate","delegate","scheduler","schedule","JobDoesNotExistException","inboundBus","subscribe","outboundBus","jobDescription","setDefaultJob","name","isJobHandler","undefined","addConditionalJob","push"],"mappings":"AAAA;;;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,gBAAR,GAA2B,KAAK,CAAhC;;AACA,IAAMC,KAAK,GAAGC,OAAO,CAAC,OAAD,CAArB;;AACA,IAAMC,WAAW,GAAGD,OAAO,CAAC,aAAD,CAA3B;AACA;AACA;AACA;AACA;;;AACA,SAASF,gBAAT,GAAwC;AAAA,MAAdI,OAAc,uEAAJ,EAAI;AACpC,MAAIC,eAAe,GAAG,IAAtB;AACA,MAAMC,uBAAuB,GAAG,EAAhC;AACA,MAAMC,GAAG,GAAGX,MAAM,CAACY,MAAP,CAAc,UAACC,QAAD,EAAWC,OAAX,EAAuB;AAC7C,QAAMC,aAAa,GAAGL,uBAAuB,CAACM,IAAxB,CAA6B;AAAA;AAAA,UAAEC,SAAF;;AAAA,aAAiBA,SAAS,CAACJ,QAAD,CAA1B;AAAA,KAA7B,CAAtB;AACA,QAAIK,QAAQ,GAAG,IAAf;;AACA,QAAIH,aAAJ,EAAmB;AACfG,MAAAA,QAAQ,GAAGJ,OAAO,CAACK,SAAR,CAAkBC,QAAlB,CAA2BL,aAAa,CAAC,CAAD,CAAxC,EAA6CF,QAA7C,CAAX;AACH,KAFD,MAGK,IAAIJ,eAAJ,EAAqB;AACtBS,MAAAA,QAAQ,GAAGJ,OAAO,CAACK,SAAR,CAAkBC,QAAlB,CAA2BX,eAA3B,EAA4CI,QAA5C,CAAX;AACH,KAFI,MAGA;AACD,YAAM,IAAIN,WAAW,CAACc,wBAAhB,CAAyC,QAAzC,CAAN;AACH;;AACDP,IAAAA,OAAO,CAACQ,UAAR,CAAmBC,SAAnB,CAA6BL,QAAQ,CAACI,UAAtC;AACA,WAAOJ,QAAQ,CAACM,WAAhB;AACH,GAdW,EAcT;AACCC,IAAAA,cAAc,EAAEjB;AADjB,GAdS,CAAZ;AAiBA,SAAOR,MAAM,CAACY,MAAP,CAAcD,GAAd,EAAmB;AACtBe,IAAAA,aADsB,yBACRC,IADQ,EACF;AAChB,UAAItB,KAAK,CAACuB,YAAN,CAAmBD,IAAnB,CAAJ,EAA8B;AAC1BA,QAAAA,IAAI,GAAGA,IAAI,CAACF,cAAL,CAAoBE,IAApB,KAA6BE,SAA7B,GAAyC,IAAzC,GAAgDF,IAAI,CAACF,cAAL,CAAoBE,IAA3E;AACH;;AACDlB,MAAAA,eAAe,GAAGkB,IAAlB;AACH,KANqB;AAOtBG,IAAAA,iBAPsB,6BAOJb,SAPI,EAOOU,IAPP,EAOa;AAC/BjB,MAAAA,uBAAuB,CAACqB,IAAxB,CAA6B,CAACd,SAAD,EAAYU,IAAZ,CAA7B;AACH;AATqB,GAAnB,CAAP;AAWH;;AACDzB,OAAO,CAACE,gBAAR,GAA2BA,gBAA3B","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.createDispatcher = void 0;\nconst api_1 = require(\"./api\");\nconst exception_1 = require(\"./exception\");\n/**\n * OnReady a dispatcher that can dispatch to a sub job, depending on conditions.\n * @param options\n */\nfunction createDispatcher(options = {}) {\n    let defaultDelegate = null;\n    const conditionalDelegateList = [];\n    const job = Object.assign((argument, context) => {\n        const maybeDelegate = conditionalDelegateList.find(([predicate]) => predicate(argument));\n        let delegate = null;\n        if (maybeDelegate) {\n            delegate = context.scheduler.schedule(maybeDelegate[1], argument);\n        }\n        else if (defaultDelegate) {\n            delegate = context.scheduler.schedule(defaultDelegate, argument);\n        }\n        else {\n            throw new exception_1.JobDoesNotExistException('<null>');\n        }\n        context.inboundBus.subscribe(delegate.inboundBus);\n        return delegate.outboundBus;\n    }, {\n        jobDescription: options,\n    });\n    return Object.assign(job, {\n        setDefaultJob(name) {\n            if (api_1.isJobHandler(name)) {\n                name = name.jobDescription.name === undefined ? null : name.jobDescription.name;\n            }\n            defaultDelegate = name;\n        },\n        addConditionalJob(predicate, name) {\n            conditionalDelegateList.push([predicate, name]);\n        },\n    });\n}\nexports.createDispatcher = createDispatcher;\n"]},"metadata":{},"sourceType":"script"}