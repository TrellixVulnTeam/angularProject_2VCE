{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nvar _createForOfIteratorHelper = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _classCallCheck = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/createClass\");\n\nvar RequireResolveDependency = require(\"./RequireResolveDependency\");\n\nvar RequireResolveContextDependency = require(\"./RequireResolveContextDependency\");\n\nvar RequireResolveHeaderDependency = require(\"./RequireResolveHeaderDependency\");\n\nvar ContextDependencyHelpers = require(\"./ContextDependencyHelpers\");\n\nvar RequireResolveDependencyParserPlugin = /*#__PURE__*/function () {\n  function RequireResolveDependencyParserPlugin(options) {\n    _classCallCheck(this, RequireResolveDependencyParserPlugin);\n\n    this.options = options;\n  }\n\n  _createClass(RequireResolveDependencyParserPlugin, [{\n    key: \"apply\",\n    value: function apply(parser) {\n      var options = this.options;\n\n      var process = function process(expr, weak) {\n        if (expr.arguments.length !== 1) return;\n        var param = parser.evaluateExpression(expr.arguments[0]);\n\n        if (param.isConditional()) {\n          var _iterator = _createForOfIteratorHelper(param.options),\n              _step;\n\n          try {\n            for (_iterator.s(); !(_step = _iterator.n()).done;) {\n              var option = _step.value;\n              var result = processItem(expr, option, weak);\n\n              if (result === undefined) {\n                processContext(expr, option, weak);\n              }\n            }\n          } catch (err) {\n            _iterator.e(err);\n          } finally {\n            _iterator.f();\n          }\n\n          var dep = new RequireResolveHeaderDependency(expr.callee.range);\n          dep.loc = expr.loc;\n          parser.state.current.addDependency(dep);\n          return true;\n        } else {\n          var _result = processItem(expr, param, weak);\n\n          if (_result === undefined) {\n            processContext(expr, param, weak);\n          }\n\n          var _dep = new RequireResolveHeaderDependency(expr.callee.range);\n\n          _dep.loc = expr.loc;\n          parser.state.current.addDependency(_dep);\n          return true;\n        }\n      };\n\n      var processItem = function processItem(expr, param, weak) {\n        if (param.isString()) {\n          var dep = new RequireResolveDependency(param.string, param.range);\n          dep.loc = expr.loc;\n          dep.optional = !!parser.scope.inTry;\n          dep.weak = weak;\n          parser.state.current.addDependency(dep);\n          return true;\n        }\n      };\n\n      var processContext = function processContext(expr, param, weak) {\n        var dep = ContextDependencyHelpers.create(RequireResolveContextDependency, param.range, param, expr, options, {\n          mode: weak ? \"weak\" : \"sync\"\n        }, parser);\n        if (!dep) return;\n        dep.loc = expr.loc;\n        dep.optional = !!parser.scope.inTry;\n        parser.state.current.addDependency(dep);\n        return true;\n      };\n\n      parser.hooks.call.for(\"require.resolve\").tap(\"RequireResolveDependencyParserPlugin\", function (expr) {\n        return process(expr, false);\n      });\n      parser.hooks.call.for(\"require.resolveWeak\").tap(\"RequireResolveDependencyParserPlugin\", function (expr) {\n        return process(expr, true);\n      });\n    }\n  }]);\n\n  return RequireResolveDependencyParserPlugin;\n}();\n\nmodule.exports = RequireResolveDependencyParserPlugin;","map":{"version":3,"sources":["/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/webpack/lib/dependencies/RequireResolveDependencyParserPlugin.js"],"names":["RequireResolveDependency","require","RequireResolveContextDependency","RequireResolveHeaderDependency","ContextDependencyHelpers","RequireResolveDependencyParserPlugin","options","parser","process","expr","weak","arguments","length","param","evaluateExpression","isConditional","option","result","processItem","undefined","processContext","dep","callee","range","loc","state","current","addDependency","isString","string","optional","scope","inTry","create","mode","hooks","call","for","tap","module","exports"],"mappings":"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","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst RequireResolveDependency = require(\"./RequireResolveDependency\");\nconst RequireResolveContextDependency = require(\"./RequireResolveContextDependency\");\nconst RequireResolveHeaderDependency = require(\"./RequireResolveHeaderDependency\");\nconst ContextDependencyHelpers = require(\"./ContextDependencyHelpers\");\n\nclass RequireResolveDependencyParserPlugin {\n\tconstructor(options) {\n\t\tthis.options = options;\n\t}\n\n\tapply(parser) {\n\t\tconst options = this.options;\n\n\t\tconst process = (expr, weak) => {\n\t\t\tif (expr.arguments.length !== 1) return;\n\t\t\tconst param = parser.evaluateExpression(expr.arguments[0]);\n\t\t\tif (param.isConditional()) {\n\t\t\t\tfor (const option of param.options) {\n\t\t\t\t\tconst result = processItem(expr, option, weak);\n\t\t\t\t\tif (result === undefined) {\n\t\t\t\t\t\tprocessContext(expr, option, weak);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tconst dep = new RequireResolveHeaderDependency(expr.callee.range);\n\t\t\t\tdep.loc = expr.loc;\n\t\t\t\tparser.state.current.addDependency(dep);\n\t\t\t\treturn true;\n\t\t\t} else {\n\t\t\t\tconst result = processItem(expr, param, weak);\n\t\t\t\tif (result === undefined) {\n\t\t\t\t\tprocessContext(expr, param, weak);\n\t\t\t\t}\n\t\t\t\tconst dep = new RequireResolveHeaderDependency(expr.callee.range);\n\t\t\t\tdep.loc = expr.loc;\n\t\t\t\tparser.state.current.addDependency(dep);\n\t\t\t\treturn true;\n\t\t\t}\n\t\t};\n\t\tconst processItem = (expr, param, weak) => {\n\t\t\tif (param.isString()) {\n\t\t\t\tconst dep = new RequireResolveDependency(param.string, param.range);\n\t\t\t\tdep.loc = expr.loc;\n\t\t\t\tdep.optional = !!parser.scope.inTry;\n\t\t\t\tdep.weak = weak;\n\t\t\t\tparser.state.current.addDependency(dep);\n\t\t\t\treturn true;\n\t\t\t}\n\t\t};\n\t\tconst processContext = (expr, param, weak) => {\n\t\t\tconst dep = ContextDependencyHelpers.create(\n\t\t\t\tRequireResolveContextDependency,\n\t\t\t\tparam.range,\n\t\t\t\tparam,\n\t\t\t\texpr,\n\t\t\t\toptions,\n\t\t\t\t{\n\t\t\t\t\tmode: weak ? \"weak\" : \"sync\"\n\t\t\t\t},\n\t\t\t\tparser\n\t\t\t);\n\t\t\tif (!dep) return;\n\t\t\tdep.loc = expr.loc;\n\t\t\tdep.optional = !!parser.scope.inTry;\n\t\t\tparser.state.current.addDependency(dep);\n\t\t\treturn true;\n\t\t};\n\n\t\tparser.hooks.call\n\t\t\t.for(\"require.resolve\")\n\t\t\t.tap(\"RequireResolveDependencyParserPlugin\", expr => {\n\t\t\t\treturn process(expr, false);\n\t\t\t});\n\t\tparser.hooks.call\n\t\t\t.for(\"require.resolveWeak\")\n\t\t\t.tap(\"RequireResolveDependencyParserPlugin\", expr => {\n\t\t\t\treturn process(expr, true);\n\t\t\t});\n\t}\n}\nmodule.exports = RequireResolveDependencyParserPlugin;\n"]},"metadata":{},"sourceType":"script"}