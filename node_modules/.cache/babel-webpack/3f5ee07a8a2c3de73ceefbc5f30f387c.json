{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nvar _createForOfIteratorHelper = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _classCallCheck = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar Source = require(\"./Source\");\n\nvar RawSource = require(\"./RawSource\");\n\nvar _require = require(\"source-map\"),\n    SourceNode = _require.SourceNode,\n    SourceMapConsumer = _require.SourceMapConsumer;\n\nvar _require2 = require(\"source-list-map\"),\n    SourceListMap = _require2.SourceListMap,\n    fromStringWithSourceMap = _require2.fromStringWithSourceMap;\n\nvar _require3 = require(\"./helpers\"),\n    getSourceAndMap = _require3.getSourceAndMap,\n    getMap = _require3.getMap;\n\nvar stringsAsRawSources = new WeakSet();\n\nvar ConcatSource = /*#__PURE__*/function (_Source) {\n  _inherits(ConcatSource, _Source);\n\n  var _super = _createSuper(ConcatSource);\n\n  function ConcatSource() {\n    var _this;\n\n    _classCallCheck(this, ConcatSource);\n\n    _this = _super.call(this);\n    _this._children = [];\n\n    for (var i = 0; i < arguments.length; i++) {\n      var item = arguments[i];\n\n      if (item instanceof ConcatSource) {\n        var _iterator = _createForOfIteratorHelper(item._children),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var child = _step.value;\n\n            _this._children.push(child);\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n      } else {\n        _this._children.push(item);\n      }\n    }\n\n    _this._isOptimized = arguments.length === 0;\n    return _this;\n  }\n\n  _createClass(ConcatSource, [{\n    key: \"getChildren\",\n    value: function getChildren() {\n      if (!this._isOptimized) this._optimize();\n      return this._children;\n    }\n  }, {\n    key: \"add\",\n    value: function add(item) {\n      if (item instanceof ConcatSource) {\n        var _iterator2 = _createForOfIteratorHelper(item._children),\n            _step2;\n\n        try {\n          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n            var child = _step2.value;\n\n            this._children.push(child);\n          }\n        } catch (err) {\n          _iterator2.e(err);\n        } finally {\n          _iterator2.f();\n        }\n      } else {\n        this._children.push(item);\n      }\n\n      this._isOptimized = false;\n    }\n  }, {\n    key: \"addAllSkipOptimizing\",\n    value: function addAllSkipOptimizing(items) {\n      var _iterator3 = _createForOfIteratorHelper(items),\n          _step3;\n\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var item = _step3.value;\n\n          this._children.push(item);\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n    }\n  }, {\n    key: \"buffer\",\n    value: function buffer() {\n      if (!this._isOptimized) this._optimize();\n      var buffers = [];\n\n      var _iterator4 = _createForOfIteratorHelper(this._children),\n          _step4;\n\n      try {\n        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n          var child = _step4.value;\n\n          if (typeof child.buffer === \"function\") {\n            buffers.push(child.buffer());\n          } else {\n            var bufferOrString = child.source();\n\n            if (Buffer.isBuffer(bufferOrString)) {\n              buffers.push(bufferOrString);\n            } else {\n              buffers.push(Buffer.from(bufferOrString, \"utf-8\"));\n            }\n          }\n        }\n      } catch (err) {\n        _iterator4.e(err);\n      } finally {\n        _iterator4.f();\n      }\n\n      return Buffer.concat(buffers);\n    }\n  }, {\n    key: \"source\",\n    value: function source() {\n      if (!this._isOptimized) this._optimize();\n      var source = \"\";\n\n      var _iterator5 = _createForOfIteratorHelper(this._children),\n          _step5;\n\n      try {\n        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n          var child = _step5.value;\n          source += child.source();\n        }\n      } catch (err) {\n        _iterator5.e(err);\n      } finally {\n        _iterator5.f();\n      }\n\n      return source;\n    }\n  }, {\n    key: \"size\",\n    value: function size() {\n      if (!this._isOptimized) this._optimize();\n      var size = 0;\n\n      var _iterator6 = _createForOfIteratorHelper(this._children),\n          _step6;\n\n      try {\n        for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n          var child = _step6.value;\n          size += child.size();\n        }\n      } catch (err) {\n        _iterator6.e(err);\n      } finally {\n        _iterator6.f();\n      }\n\n      return size;\n    }\n  }, {\n    key: \"map\",\n    value: function map(options) {\n      return getMap(this, options);\n    }\n  }, {\n    key: \"sourceAndMap\",\n    value: function sourceAndMap(options) {\n      return getSourceAndMap(this, options);\n    }\n  }, {\n    key: \"node\",\n    value: function node(options) {\n      if (!this._isOptimized) this._optimize();\n      var node = new SourceNode(null, null, null, this._children.map(function (item) {\n        if (typeof item.node === \"function\") return item.node(options);\n        var sourceAndMap = item.sourceAndMap(options);\n\n        if (sourceAndMap.map) {\n          return SourceNode.fromStringWithSourceMap(sourceAndMap.source, new SourceMapConsumer(sourceAndMap.map));\n        } else {\n          return sourceAndMap.source;\n        }\n      }));\n      return node;\n    }\n  }, {\n    key: \"listMap\",\n    value: function listMap(options) {\n      if (!this._isOptimized) this._optimize();\n      var map = new SourceListMap();\n\n      var _iterator7 = _createForOfIteratorHelper(this._children),\n          _step7;\n\n      try {\n        for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n          var item = _step7.value;\n\n          if (typeof item === \"string\") {\n            map.add(item);\n          } else if (typeof item.listMap === \"function\") {\n            map.add(item.listMap(options));\n          } else {\n            var sourceAndMap = item.sourceAndMap(options);\n\n            if (sourceAndMap.map) {\n              map.add(fromStringWithSourceMap(sourceAndMap.source, sourceAndMap.map));\n            } else {\n              map.add(sourceAndMap.source);\n            }\n          }\n        }\n      } catch (err) {\n        _iterator7.e(err);\n      } finally {\n        _iterator7.f();\n      }\n\n      return map;\n    }\n  }, {\n    key: \"updateHash\",\n    value: function updateHash(hash) {\n      if (!this._isOptimized) this._optimize();\n      hash.update(\"ConcatSource\");\n\n      var _iterator8 = _createForOfIteratorHelper(this._children),\n          _step8;\n\n      try {\n        for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {\n          var item = _step8.value;\n          item.updateHash(hash);\n        }\n      } catch (err) {\n        _iterator8.e(err);\n      } finally {\n        _iterator8.f();\n      }\n    }\n  }, {\n    key: \"_optimize\",\n    value: function _optimize() {\n      var newChildren = [];\n      var currentString = undefined;\n      var currentRawSources = undefined;\n\n      var addStringToRawSources = function addStringToRawSources(string) {\n        if (currentRawSources === undefined) {\n          currentRawSources = string;\n        } else if (Array.isArray(currentRawSources)) {\n          currentRawSources.push(string);\n        } else {\n          currentRawSources = [typeof currentRawSources === \"string\" ? currentRawSources : currentRawSources.source(), string];\n        }\n      };\n\n      var addSourceToRawSources = function addSourceToRawSources(source) {\n        if (currentRawSources === undefined) {\n          currentRawSources = source;\n        } else if (Array.isArray(currentRawSources)) {\n          currentRawSources.push(source.source());\n        } else {\n          currentRawSources = [typeof currentRawSources === \"string\" ? currentRawSources : currentRawSources.source(), source.source()];\n        }\n      };\n\n      var mergeRawSources = function mergeRawSources() {\n        if (Array.isArray(currentRawSources)) {\n          var rawSource = new RawSource(currentRawSources.join(\"\"));\n          stringsAsRawSources.add(rawSource);\n          newChildren.push(rawSource);\n        } else if (typeof currentRawSources === \"string\") {\n          var _rawSource = new RawSource(currentRawSources);\n\n          stringsAsRawSources.add(_rawSource);\n          newChildren.push(_rawSource);\n        } else {\n          newChildren.push(currentRawSources);\n        }\n      };\n\n      var _iterator9 = _createForOfIteratorHelper(this._children),\n          _step9;\n\n      try {\n        for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {\n          var child = _step9.value;\n\n          if (typeof child === \"string\") {\n            if (currentString === undefined) {\n              currentString = child;\n            } else {\n              currentString += child;\n            }\n          } else {\n            if (currentString !== undefined) {\n              addStringToRawSources(currentString);\n              currentString = undefined;\n            }\n\n            if (stringsAsRawSources.has(child)) {\n              addSourceToRawSources(child);\n            } else {\n              if (currentRawSources !== undefined) {\n                mergeRawSources();\n                currentRawSources = undefined;\n              }\n\n              newChildren.push(child);\n            }\n          }\n        }\n      } catch (err) {\n        _iterator9.e(err);\n      } finally {\n        _iterator9.f();\n      }\n\n      if (currentString !== undefined) {\n        addStringToRawSources(currentString);\n      }\n\n      if (currentRawSources !== undefined) {\n        mergeRawSources();\n      }\n\n      this._children = newChildren;\n      this._isOptimized = true;\n    }\n  }]);\n\n  return ConcatSource;\n}(Source);\n\nmodule.exports = ConcatSource;","map":{"version":3,"sources":["/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@angular-devkit/build-angular/node_modules/webpack-sources/lib/ConcatSource.js"],"names":["Source","require","RawSource","SourceNode","SourceMapConsumer","SourceListMap","fromStringWithSourceMap","getSourceAndMap","getMap","stringsAsRawSources","WeakSet","ConcatSource","_children","i","arguments","length","item","child","push","_isOptimized","_optimize","items","buffers","buffer","bufferOrString","source","Buffer","isBuffer","from","concat","size","options","node","map","sourceAndMap","add","listMap","hash","update","updateHash","newChildren","currentString","undefined","currentRawSources","addStringToRawSources","string","Array","isArray","addSourceToRawSources","mergeRawSources","rawSource","join","has","module","exports"],"mappings":"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","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst Source = require(\"./Source\");\nconst RawSource = require(\"./RawSource\");\nconst { SourceNode, SourceMapConsumer } = require(\"source-map\");\nconst { SourceListMap, fromStringWithSourceMap } = require(\"source-list-map\");\nconst { getSourceAndMap, getMap } = require(\"./helpers\");\n\nconst stringsAsRawSources = new WeakSet();\n\nclass ConcatSource extends Source {\n\tconstructor() {\n\t\tsuper();\n\t\tthis._children = [];\n\t\tfor (let i = 0; i < arguments.length; i++) {\n\t\t\tconst item = arguments[i];\n\t\t\tif (item instanceof ConcatSource) {\n\t\t\t\tfor (const child of item._children) {\n\t\t\t\t\tthis._children.push(child);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis._children.push(item);\n\t\t\t}\n\t\t}\n\t\tthis._isOptimized = arguments.length === 0;\n\t}\n\n\tgetChildren() {\n\t\tif (!this._isOptimized) this._optimize();\n\t\treturn this._children;\n\t}\n\n\tadd(item) {\n\t\tif (item instanceof ConcatSource) {\n\t\t\tfor (const child of item._children) {\n\t\t\t\tthis._children.push(child);\n\t\t\t}\n\t\t} else {\n\t\t\tthis._children.push(item);\n\t\t}\n\t\tthis._isOptimized = false;\n\t}\n\n\taddAllSkipOptimizing(items) {\n\t\tfor (const item of items) {\n\t\t\tthis._children.push(item);\n\t\t}\n\t}\n\n\tbuffer() {\n\t\tif (!this._isOptimized) this._optimize();\n\t\tconst buffers = [];\n\t\tfor (const child of this._children) {\n\t\t\tif (typeof child.buffer === \"function\") {\n\t\t\t\tbuffers.push(child.buffer());\n\t\t\t} else {\n\t\t\t\tconst bufferOrString = child.source();\n\t\t\t\tif (Buffer.isBuffer(bufferOrString)) {\n\t\t\t\t\tbuffers.push(bufferOrString);\n\t\t\t\t} else {\n\t\t\t\t\tbuffers.push(Buffer.from(bufferOrString, \"utf-8\"));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn Buffer.concat(buffers);\n\t}\n\n\tsource() {\n\t\tif (!this._isOptimized) this._optimize();\n\t\tlet source = \"\";\n\t\tfor (const child of this._children) {\n\t\t\tsource += child.source();\n\t\t}\n\t\treturn source;\n\t}\n\n\tsize() {\n\t\tif (!this._isOptimized) this._optimize();\n\t\tlet size = 0;\n\t\tfor (const child of this._children) {\n\t\t\tsize += child.size();\n\t\t}\n\t\treturn size;\n\t}\n\n\tmap(options) {\n\t\treturn getMap(this, options);\n\t}\n\n\tsourceAndMap(options) {\n\t\treturn getSourceAndMap(this, options);\n\t}\n\n\tnode(options) {\n\t\tif (!this._isOptimized) this._optimize();\n\t\tconst node = new SourceNode(\n\t\t\tnull,\n\t\t\tnull,\n\t\t\tnull,\n\t\t\tthis._children.map(function (item) {\n\t\t\t\tif (typeof item.node === \"function\") return item.node(options);\n\t\t\t\tconst sourceAndMap = item.sourceAndMap(options);\n\t\t\t\tif (sourceAndMap.map) {\n\t\t\t\t\treturn SourceNode.fromStringWithSourceMap(\n\t\t\t\t\t\tsourceAndMap.source,\n\t\t\t\t\t\tnew SourceMapConsumer(sourceAndMap.map)\n\t\t\t\t\t);\n\t\t\t\t} else {\n\t\t\t\t\treturn sourceAndMap.source;\n\t\t\t\t}\n\t\t\t})\n\t\t);\n\t\treturn node;\n\t}\n\n\tlistMap(options) {\n\t\tif (!this._isOptimized) this._optimize();\n\t\tconst map = new SourceListMap();\n\t\tfor (const item of this._children) {\n\t\t\tif (typeof item === \"string\") {\n\t\t\t\tmap.add(item);\n\t\t\t} else if (typeof item.listMap === \"function\") {\n\t\t\t\tmap.add(item.listMap(options));\n\t\t\t} else {\n\t\t\t\tconst sourceAndMap = item.sourceAndMap(options);\n\t\t\t\tif (sourceAndMap.map) {\n\t\t\t\t\tmap.add(\n\t\t\t\t\t\tfromStringWithSourceMap(sourceAndMap.source, sourceAndMap.map)\n\t\t\t\t\t);\n\t\t\t\t} else {\n\t\t\t\t\tmap.add(sourceAndMap.source);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn map;\n\t}\n\n\tupdateHash(hash) {\n\t\tif (!this._isOptimized) this._optimize();\n\t\thash.update(\"ConcatSource\");\n\t\tfor (const item of this._children) {\n\t\t\titem.updateHash(hash);\n\t\t}\n\t}\n\n\t_optimize() {\n\t\tconst newChildren = [];\n\t\tlet currentString = undefined;\n\t\tlet currentRawSources = undefined;\n\t\tconst addStringToRawSources = string => {\n\t\t\tif (currentRawSources === undefined) {\n\t\t\t\tcurrentRawSources = string;\n\t\t\t} else if (Array.isArray(currentRawSources)) {\n\t\t\t\tcurrentRawSources.push(string);\n\t\t\t} else {\n\t\t\t\tcurrentRawSources = [\n\t\t\t\t\ttypeof currentRawSources === \"string\"\n\t\t\t\t\t\t? currentRawSources\n\t\t\t\t\t\t: currentRawSources.source(),\n\t\t\t\t\tstring\n\t\t\t\t];\n\t\t\t}\n\t\t};\n\t\tconst addSourceToRawSources = source => {\n\t\t\tif (currentRawSources === undefined) {\n\t\t\t\tcurrentRawSources = source;\n\t\t\t} else if (Array.isArray(currentRawSources)) {\n\t\t\t\tcurrentRawSources.push(source.source());\n\t\t\t} else {\n\t\t\t\tcurrentRawSources = [\n\t\t\t\t\ttypeof currentRawSources === \"string\"\n\t\t\t\t\t\t? currentRawSources\n\t\t\t\t\t\t: currentRawSources.source(),\n\t\t\t\t\tsource.source()\n\t\t\t\t];\n\t\t\t}\n\t\t};\n\t\tconst mergeRawSources = () => {\n\t\t\tif (Array.isArray(currentRawSources)) {\n\t\t\t\tconst rawSource = new RawSource(currentRawSources.join(\"\"));\n\t\t\t\tstringsAsRawSources.add(rawSource);\n\t\t\t\tnewChildren.push(rawSource);\n\t\t\t} else if (typeof currentRawSources === \"string\") {\n\t\t\t\tconst rawSource = new RawSource(currentRawSources);\n\t\t\t\tstringsAsRawSources.add(rawSource);\n\t\t\t\tnewChildren.push(rawSource);\n\t\t\t} else {\n\t\t\t\tnewChildren.push(currentRawSources);\n\t\t\t}\n\t\t};\n\t\tfor (const child of this._children) {\n\t\t\tif (typeof child === \"string\") {\n\t\t\t\tif (currentString === undefined) {\n\t\t\t\t\tcurrentString = child;\n\t\t\t\t} else {\n\t\t\t\t\tcurrentString += child;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (currentString !== undefined) {\n\t\t\t\t\taddStringToRawSources(currentString);\n\t\t\t\t\tcurrentString = undefined;\n\t\t\t\t}\n\t\t\t\tif (stringsAsRawSources.has(child)) {\n\t\t\t\t\taddSourceToRawSources(child);\n\t\t\t\t} else {\n\t\t\t\t\tif (currentRawSources !== undefined) {\n\t\t\t\t\t\tmergeRawSources();\n\t\t\t\t\t\tcurrentRawSources = undefined;\n\t\t\t\t\t}\n\t\t\t\t\tnewChildren.push(child);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (currentString !== undefined) {\n\t\t\taddStringToRawSources(currentString);\n\t\t}\n\t\tif (currentRawSources !== undefined) {\n\t\t\tmergeRawSources();\n\t\t}\n\t\tthis._children = newChildren;\n\t\tthis._isOptimized = true;\n\t}\n}\n\nmodule.exports = ConcatSource;\n"]},"metadata":{},"sourceType":"script"}