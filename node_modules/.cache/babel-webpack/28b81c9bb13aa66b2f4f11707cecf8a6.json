{"ast":null,"code":"'use strict';\n/**\n * `password` type prompt\n */\n\nvar _classCallCheck = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar chalk = require('chalk');\n\nvar _require = require('rxjs/operators'),\n    map = _require.map,\n    takeUntil = _require.takeUntil;\n\nvar Base = require('./base');\n\nvar observe = require('../utils/events');\n\nfunction mask(input, maskChar) {\n  input = String(input);\n  maskChar = typeof maskChar === 'string' ? maskChar : '*';\n\n  if (input.length === 0) {\n    return '';\n  }\n\n  return new Array(input.length + 1).join(maskChar);\n}\n\nvar PasswordPrompt = /*#__PURE__*/function (_Base) {\n  _inherits(PasswordPrompt, _Base);\n\n  var _super = _createSuper(PasswordPrompt);\n\n  function PasswordPrompt() {\n    _classCallCheck(this, PasswordPrompt);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(PasswordPrompt, [{\n    key: \"_run\",\n    value:\n    /**\n     * Start the Inquiry session\n     * @param  {Function} cb      Callback when prompt is done\n     * @return {this}\n     */\n    function _run(cb) {\n      this.done = cb;\n      var events = observe(this.rl); // Once user confirm (enter key)\n\n      var submit = events.line.pipe(map(this.filterInput.bind(this)));\n      var validation = this.handleSubmitEvents(submit);\n      validation.success.forEach(this.onEnd.bind(this));\n      validation.error.forEach(this.onError.bind(this));\n      events.keypress.pipe(takeUntil(validation.success)).forEach(this.onKeypress.bind(this)); // Init\n\n      this.render();\n      return this;\n    }\n    /**\n     * Render the prompt to screen\n     * @return {PasswordPrompt} self\n     */\n\n  }, {\n    key: \"render\",\n    value: function render(error) {\n      var message = this.getQuestion();\n      var bottomContent = '';\n\n      if (this.status === 'answered') {\n        message += this.opt.mask ? chalk.cyan(mask(this.answer, this.opt.mask)) : chalk.italic.dim('[hidden]');\n      } else if (this.opt.mask) {\n        message += mask(this.rl.line || '', this.opt.mask);\n      } else {\n        message += chalk.italic.dim('[input is hidden] ');\n      }\n\n      if (error) {\n        bottomContent = '\\n' + chalk.red('>> ') + error;\n      }\n\n      this.screen.render(message, bottomContent);\n    }\n    /**\n     * When user press `enter` key\n     */\n\n  }, {\n    key: \"filterInput\",\n    value: function filterInput(input) {\n      if (!input) {\n        return this.opt.default == null ? '' : this.opt.default;\n      }\n\n      return input;\n    }\n  }, {\n    key: \"onEnd\",\n    value: function onEnd(state) {\n      this.status = 'answered';\n      this.answer = state.value; // Re-render prompt\n\n      this.render();\n      this.screen.done();\n      this.done(state.value);\n    }\n  }, {\n    key: \"onError\",\n    value: function onError(state) {\n      this.render(state.isValid);\n    }\n  }, {\n    key: \"onKeypress\",\n    value: function onKeypress() {\n      // If user press a key, just clear the default value\n      if (this.opt.default) {\n        this.opt.default = undefined;\n      }\n\n      this.render();\n    }\n  }]);\n\n  return PasswordPrompt;\n}(Base);\n\nmodule.exports = PasswordPrompt;","map":{"version":3,"sources":["/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/inquirer/lib/prompts/password.js"],"names":["chalk","require","map","takeUntil","Base","observe","mask","input","maskChar","String","length","Array","join","PasswordPrompt","cb","done","events","rl","submit","line","pipe","filterInput","bind","validation","handleSubmitEvents","success","forEach","onEnd","error","onError","keypress","onKeypress","render","message","getQuestion","bottomContent","status","opt","cyan","answer","italic","dim","red","screen","default","state","value","isValid","undefined","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n/**\n * `password` type prompt\n */\n\nvar chalk = require('chalk');\nvar { map, takeUntil } = require('rxjs/operators');\nvar Base = require('./base');\nvar observe = require('../utils/events');\n\nfunction mask(input, maskChar) {\n  input = String(input);\n  maskChar = typeof maskChar === 'string' ? maskChar : '*';\n  if (input.length === 0) {\n    return '';\n  }\n\n  return new Array(input.length + 1).join(maskChar);\n}\n\nclass PasswordPrompt extends Base {\n  /**\n   * Start the Inquiry session\n   * @param  {Function} cb      Callback when prompt is done\n   * @return {this}\n   */\n\n  _run(cb) {\n    this.done = cb;\n\n    var events = observe(this.rl);\n\n    // Once user confirm (enter key)\n    var submit = events.line.pipe(map(this.filterInput.bind(this)));\n\n    var validation = this.handleSubmitEvents(submit);\n    validation.success.forEach(this.onEnd.bind(this));\n    validation.error.forEach(this.onError.bind(this));\n\n    events.keypress\n      .pipe(takeUntil(validation.success))\n      .forEach(this.onKeypress.bind(this));\n\n    // Init\n    this.render();\n\n    return this;\n  }\n\n  /**\n   * Render the prompt to screen\n   * @return {PasswordPrompt} self\n   */\n\n  render(error) {\n    var message = this.getQuestion();\n    var bottomContent = '';\n\n    if (this.status === 'answered') {\n      message += this.opt.mask\n        ? chalk.cyan(mask(this.answer, this.opt.mask))\n        : chalk.italic.dim('[hidden]');\n    } else if (this.opt.mask) {\n      message += mask(this.rl.line || '', this.opt.mask);\n    } else {\n      message += chalk.italic.dim('[input is hidden] ');\n    }\n\n    if (error) {\n      bottomContent = '\\n' + chalk.red('>> ') + error;\n    }\n\n    this.screen.render(message, bottomContent);\n  }\n\n  /**\n   * When user press `enter` key\n   */\n\n  filterInput(input) {\n    if (!input) {\n      return this.opt.default == null ? '' : this.opt.default;\n    }\n\n    return input;\n  }\n\n  onEnd(state) {\n    this.status = 'answered';\n    this.answer = state.value;\n\n    // Re-render prompt\n    this.render();\n\n    this.screen.done();\n    this.done(state.value);\n  }\n\n  onError(state) {\n    this.render(state.isValid);\n  }\n\n  onKeypress() {\n    // If user press a key, just clear the default value\n    if (this.opt.default) {\n      this.opt.default = undefined;\n    }\n\n    this.render();\n  }\n}\n\nmodule.exports = PasswordPrompt;\n"]},"metadata":{},"sourceType":"script"}