{"ast":null,"code":"/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n(function (factory) {\n  if (typeof module === \"object\" && typeof module.exports === \"object\") {\n    var v = factory(require, exports);\n    if (v !== undefined) module.exports = v;\n  } else if (typeof define === \"function\" && define.amd) {\n    define(\"@angular/compiler/src/ml_parser/html_whitespaces\", [\"require\", \"exports\", \"@angular/compiler/src/ml_parser/ast\", \"@angular/compiler/src/ml_parser/parser\", \"@angular/compiler/src/ml_parser/tags\"], factory);\n  }\n})(function (require, exports) {\n  \"use strict\";\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.removeWhitespaces = exports.WhitespaceVisitor = exports.replaceNgsp = exports.PRESERVE_WS_ATTR_NAME = void 0;\n\n  var html = require(\"@angular/compiler/src/ml_parser/ast\");\n\n  var parser_1 = require(\"@angular/compiler/src/ml_parser/parser\");\n\n  var tags_1 = require(\"@angular/compiler/src/ml_parser/tags\");\n\n  exports.PRESERVE_WS_ATTR_NAME = 'ngPreserveWhitespaces';\n  var SKIP_WS_TRIM_TAGS = new Set(['pre', 'template', 'textarea', 'script', 'style']); // Equivalent to \\s with \\u00a0 (non-breaking space) excluded.\n  // Based on https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp\n\n  var WS_CHARS = \" \\f\\n\\r\\t\\x0B\\u1680\\u180E\\u2000-\\u200A\\u2028\\u2029\\u202F\\u205F\\u3000\\uFEFF\";\n  var NO_WS_REGEXP = new RegExp(\"[^\" + WS_CHARS + \"]\");\n  var WS_REPLACE_REGEXP = new RegExp(\"[\" + WS_CHARS + \"]{2,}\", 'g');\n\n  function hasPreserveWhitespacesAttr(attrs) {\n    return attrs.some(function (attr) {\n      return attr.name === exports.PRESERVE_WS_ATTR_NAME;\n    });\n  }\n  /**\n   * Angular Dart introduced &ngsp; as a placeholder for non-removable space, see:\n   * https://github.com/dart-lang/angular/blob/0bb611387d29d65b5af7f9d2515ab571fd3fbee4/_tests/test/compiler/preserve_whitespace_test.dart#L25-L32\n   * In Angular Dart &ngsp; is converted to the 0xE500 PUA (Private Use Areas) unicode character\n   * and later on replaced by a space. We are re-implementing the same idea here.\n   */\n\n\n  function replaceNgsp(value) {\n    // lexer is replacing the &ngsp; pseudo-entity with NGSP_UNICODE\n    return value.replace(new RegExp(tags_1.NGSP_UNICODE, 'g'), ' ');\n  }\n\n  exports.replaceNgsp = replaceNgsp;\n  /**\n   * This visitor can walk HTML parse tree and remove / trim text nodes using the following rules:\n   * - consider spaces, tabs and new lines as whitespace characters;\n   * - drop text nodes consisting of whitespace characters only;\n   * - for all other text nodes replace consecutive whitespace characters with one space;\n   * - convert &ngsp; pseudo-entity to a single space;\n   *\n   * Removal and trimming of whitespaces have positive performance impact (less code to generate\n   * while compiling templates, faster view creation). At the same time it can be \"destructive\"\n   * in some cases (whitespaces can influence layout). Because of the potential of breaking layout\n   * this visitor is not activated by default in Angular 5 and people need to explicitly opt-in for\n   * whitespace removal. The default option for whitespace removal will be revisited in Angular 6\n   * and might be changed to \"on\" by default.\n   */\n\n  var WhitespaceVisitor =\n  /** @class */\n  function () {\n    function WhitespaceVisitor() {}\n\n    WhitespaceVisitor.prototype.visitElement = function (element, context) {\n      if (SKIP_WS_TRIM_TAGS.has(element.name) || hasPreserveWhitespacesAttr(element.attrs)) {\n        // don't descent into elements where we need to preserve whitespaces\n        // but still visit all attributes to eliminate one used as a market to preserve WS\n        return new html.Element(element.name, html.visitAll(this, element.attrs), element.children, element.sourceSpan, element.startSourceSpan, element.endSourceSpan, element.i18n);\n      }\n\n      return new html.Element(element.name, element.attrs, visitAllWithSiblings(this, element.children), element.sourceSpan, element.startSourceSpan, element.endSourceSpan, element.i18n);\n    };\n\n    WhitespaceVisitor.prototype.visitAttribute = function (attribute, context) {\n      return attribute.name !== exports.PRESERVE_WS_ATTR_NAME ? attribute : null;\n    };\n\n    WhitespaceVisitor.prototype.visitText = function (text, context) {\n      var isNotBlank = text.value.match(NO_WS_REGEXP);\n      var hasExpansionSibling = context && (context.prev instanceof html.Expansion || context.next instanceof html.Expansion);\n\n      if (isNotBlank || hasExpansionSibling) {\n        return new html.Text(replaceNgsp(text.value).replace(WS_REPLACE_REGEXP, ' '), text.sourceSpan, text.i18n);\n      }\n\n      return null;\n    };\n\n    WhitespaceVisitor.prototype.visitComment = function (comment, context) {\n      return comment;\n    };\n\n    WhitespaceVisitor.prototype.visitExpansion = function (expansion, context) {\n      return expansion;\n    };\n\n    WhitespaceVisitor.prototype.visitExpansionCase = function (expansionCase, context) {\n      return expansionCase;\n    };\n\n    return WhitespaceVisitor;\n  }();\n\n  exports.WhitespaceVisitor = WhitespaceVisitor;\n\n  function removeWhitespaces(htmlAstWithErrors) {\n    return new parser_1.ParseTreeResult(html.visitAll(new WhitespaceVisitor(), htmlAstWithErrors.rootNodes), htmlAstWithErrors.errors);\n  }\n\n  exports.removeWhitespaces = removeWhitespaces;\n\n  function visitAllWithSiblings(visitor, nodes) {\n    var result = [];\n    nodes.forEach(function (ast, i) {\n      var context = {\n        prev: nodes[i - 1],\n        next: nodes[i + 1]\n      };\n      var astResult = ast.visit(visitor, context);\n\n      if (astResult) {\n        result.push(astResult);\n      }\n    });\n    return result;\n  }\n});","map":{"version":3,"sources":["../../../../../../../packages/compiler/src/ml_parser/html_whitespaces.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport * as html from './ast';\nimport {ParseTreeResult} from './parser';\nimport {NGSP_UNICODE} from './tags';\n\nexport const PRESERVE_WS_ATTR_NAME = 'ngPreserveWhitespaces';\n\nconst SKIP_WS_TRIM_TAGS = new Set(['pre', 'template', 'textarea', 'script', 'style']);\n\n// Equivalent to \\s with \\u00a0 (non-breaking space) excluded.\n// Based on https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp\nconst WS_CHARS = ' \\f\\n\\r\\t\\v\\u1680\\u180e\\u2000-\\u200a\\u2028\\u2029\\u202f\\u205f\\u3000\\ufeff';\nconst NO_WS_REGEXP = new RegExp(`[^${WS_CHARS}]`);\nconst WS_REPLACE_REGEXP = new RegExp(`[${WS_CHARS}]{2,}`, 'g');\n\nfunction hasPreserveWhitespacesAttr(attrs: html.Attribute[]): boolean {\n  return attrs.some((attr: html.Attribute) => attr.name === PRESERVE_WS_ATTR_NAME);\n}\n\n/**\n * Angular Dart introduced &ngsp; as a placeholder for non-removable space, see:\n * https://github.com/dart-lang/angular/blob/0bb611387d29d65b5af7f9d2515ab571fd3fbee4/_tests/test/compiler/preserve_whitespace_test.dart#L25-L32\n * In Angular Dart &ngsp; is converted to the 0xE500 PUA (Private Use Areas) unicode character\n * and later on replaced by a space. We are re-implementing the same idea here.\n */\nexport function replaceNgsp(value: string): string {\n  // lexer is replacing the &ngsp; pseudo-entity with NGSP_UNICODE\n  return value.replace(new RegExp(NGSP_UNICODE, 'g'), ' ');\n}\n\n/**\n * This visitor can walk HTML parse tree and remove / trim text nodes using the following rules:\n * - consider spaces, tabs and new lines as whitespace characters;\n * - drop text nodes consisting of whitespace characters only;\n * - for all other text nodes replace consecutive whitespace characters with one space;\n * - convert &ngsp; pseudo-entity to a single space;\n *\n * Removal and trimming of whitespaces have positive performance impact (less code to generate\n * while compiling templates, faster view creation). At the same time it can be \"destructive\"\n * in some cases (whitespaces can influence layout). Because of the potential of breaking layout\n * this visitor is not activated by default in Angular 5 and people need to explicitly opt-in for\n * whitespace removal. The default option for whitespace removal will be revisited in Angular 6\n * and might be changed to \"on\" by default.\n */\nexport class WhitespaceVisitor implements html.Visitor {\n  visitElement(element: html.Element, context: any): any {\n    if (SKIP_WS_TRIM_TAGS.has(element.name) || hasPreserveWhitespacesAttr(element.attrs)) {\n      // don't descent into elements where we need to preserve whitespaces\n      // but still visit all attributes to eliminate one used as a market to preserve WS\n      return new html.Element(\n          element.name, html.visitAll(this, element.attrs), element.children, element.sourceSpan,\n          element.startSourceSpan, element.endSourceSpan, element.i18n);\n    }\n\n    return new html.Element(\n        element.name, element.attrs, visitAllWithSiblings(this, element.children),\n        element.sourceSpan, element.startSourceSpan, element.endSourceSpan, element.i18n);\n  }\n\n  visitAttribute(attribute: html.Attribute, context: any): any {\n    return attribute.name !== PRESERVE_WS_ATTR_NAME ? attribute : null;\n  }\n\n  visitText(text: html.Text, context: SiblingVisitorContext|null): any {\n    const isNotBlank = text.value.match(NO_WS_REGEXP);\n    const hasExpansionSibling = context &&\n        (context.prev instanceof html.Expansion || context.next instanceof html.Expansion);\n\n    if (isNotBlank || hasExpansionSibling) {\n      return new html.Text(\n          replaceNgsp(text.value).replace(WS_REPLACE_REGEXP, ' '), text.sourceSpan, text.i18n);\n    }\n\n    return null;\n  }\n\n  visitComment(comment: html.Comment, context: any): any {\n    return comment;\n  }\n\n  visitExpansion(expansion: html.Expansion, context: any): any {\n    return expansion;\n  }\n\n  visitExpansionCase(expansionCase: html.ExpansionCase, context: any): any {\n    return expansionCase;\n  }\n}\n\nexport function removeWhitespaces(htmlAstWithErrors: ParseTreeResult): ParseTreeResult {\n  return new ParseTreeResult(\n      html.visitAll(new WhitespaceVisitor(), htmlAstWithErrors.rootNodes),\n      htmlAstWithErrors.errors);\n}\n\ninterface SiblingVisitorContext {\n  prev: html.Node|undefined;\n  next: html.Node|undefined;\n}\n\nfunction visitAllWithSiblings(visitor: WhitespaceVisitor, nodes: html.Node[]): any[] {\n  const result: any[] = [];\n\n  nodes.forEach((ast, i) => {\n    const context: SiblingVisitorContext = {prev: nodes[i - 1], next: nodes[i + 1]};\n    const astResult = ast.visit(visitor, context);\n    if (astResult) {\n      result.push(astResult);\n    }\n  });\n  return result;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}