{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/regenerator\");\n\nvar _createForOfIteratorHelper = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _asyncToGenerator = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.copyAssets = void 0;\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nvar fs = require(\"fs\");\n\nvar glob = require(\"glob\");\n\nvar path = require(\"path\");\n\nvar copy_file_1 = require(\"./copy-file\");\n\nfunction globAsync(pattern, options) {\n  return new Promise(function (resolve, reject) {\n    return glob(pattern, options, function (e, m) {\n      return e ? reject(e) : resolve(m);\n    });\n  });\n}\n\nfunction copyAssets(_x, _x2, _x3, _x4) {\n  return _copyAssets.apply(this, arguments);\n}\n\nfunction _copyAssets() {\n  _copyAssets = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(entries, basePaths, root, changed) {\n    var defaultIgnore, _iterator, _step, entry, cwd, files, directoryExists, _iterator2, _step2, file, src, filePath, _iterator3, _step3, base, dest, dir;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            defaultIgnore = ['.gitkeep', '**/.DS_Store', '**/Thumbs.db'];\n            _iterator = _createForOfIteratorHelper(entries);\n            _context.prev = 2;\n\n            _iterator.s();\n\n          case 4:\n            if ((_step = _iterator.n()).done) {\n              _context.next = 34;\n              break;\n            }\n\n            entry = _step.value;\n            cwd = path.resolve(root, entry.input);\n            _context.next = 9;\n            return globAsync(entry.glob, {\n              cwd: cwd,\n              dot: true,\n              nodir: true,\n              ignore: entry.ignore ? defaultIgnore.concat(entry.ignore) : defaultIgnore\n            });\n\n          case 9:\n            files = _context.sent;\n            directoryExists = new Set();\n            _iterator2 = _createForOfIteratorHelper(files);\n            _context.prev = 12;\n\n            _iterator2.s();\n\n          case 14:\n            if ((_step2 = _iterator2.n()).done) {\n              _context.next = 24;\n              break;\n            }\n\n            file = _step2.value;\n            src = path.join(cwd, file);\n\n            if (!(changed && !changed.has(src))) {\n              _context.next = 19;\n              break;\n            }\n\n            return _context.abrupt(\"continue\", 22);\n\n          case 19:\n            filePath = entry.flatten ? path.basename(file) : file;\n            _iterator3 = _createForOfIteratorHelper(basePaths);\n\n            try {\n              for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n                base = _step3.value;\n                dest = path.join(base, entry.output, filePath);\n                dir = path.dirname(dest);\n\n                if (!directoryExists.has(dir)) {\n                  if (!fs.existsSync(dir)) {\n                    fs.mkdirSync(dir, {\n                      recursive: true\n                    });\n                  }\n\n                  directoryExists.add(dir);\n                }\n\n                copy_file_1.copyFile(src, dest);\n              }\n            } catch (err) {\n              _iterator3.e(err);\n            } finally {\n              _iterator3.f();\n            }\n\n          case 22:\n            _context.next = 14;\n            break;\n\n          case 24:\n            _context.next = 29;\n            break;\n\n          case 26:\n            _context.prev = 26;\n            _context.t0 = _context[\"catch\"](12);\n\n            _iterator2.e(_context.t0);\n\n          case 29:\n            _context.prev = 29;\n\n            _iterator2.f();\n\n            return _context.finish(29);\n\n          case 32:\n            _context.next = 4;\n            break;\n\n          case 34:\n            _context.next = 39;\n            break;\n\n          case 36:\n            _context.prev = 36;\n            _context.t1 = _context[\"catch\"](2);\n\n            _iterator.e(_context.t1);\n\n          case 39:\n            _context.prev = 39;\n\n            _iterator.f();\n\n            return _context.finish(39);\n\n          case 42:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[2, 36, 39, 42], [12, 26, 29, 32]]);\n  }));\n  return _copyAssets.apply(this, arguments);\n}\n\nexports.copyAssets = copyAssets;","map":{"version":3,"sources":["/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@angular-devkit/build-angular/src/utils/copy-assets.js"],"names":["Object","defineProperty","exports","value","copyAssets","fs","require","glob","path","copy_file_1","globAsync","pattern","options","Promise","resolve","reject","e","m","entries","basePaths","root","changed","defaultIgnore","entry","cwd","input","dot","nodir","ignore","concat","files","directoryExists","Set","file","src","join","has","filePath","flatten","basename","base","dest","output","dir","dirname","existsSync","mkdirSync","recursive","add","copyFile"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.copyAssets = void 0;\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst fs = require(\"fs\");\nconst glob = require(\"glob\");\nconst path = require(\"path\");\nconst copy_file_1 = require(\"./copy-file\");\nfunction globAsync(pattern, options) {\n    return new Promise((resolve, reject) => glob(pattern, options, (e, m) => (e ? reject(e) : resolve(m))));\n}\nasync function copyAssets(entries, basePaths, root, changed) {\n    const defaultIgnore = ['.gitkeep', '**/.DS_Store', '**/Thumbs.db'];\n    for (const entry of entries) {\n        const cwd = path.resolve(root, entry.input);\n        const files = await globAsync(entry.glob, {\n            cwd,\n            dot: true,\n            nodir: true,\n            ignore: entry.ignore ? defaultIgnore.concat(entry.ignore) : defaultIgnore,\n        });\n        const directoryExists = new Set();\n        for (const file of files) {\n            const src = path.join(cwd, file);\n            if (changed && !changed.has(src)) {\n                continue;\n            }\n            const filePath = entry.flatten ? path.basename(file) : file;\n            for (const base of basePaths) {\n                const dest = path.join(base, entry.output, filePath);\n                const dir = path.dirname(dest);\n                if (!directoryExists.has(dir)) {\n                    if (!fs.existsSync(dir)) {\n                        fs.mkdirSync(dir, { recursive: true });\n                    }\n                    directoryExists.add(dir);\n                }\n                copy_file_1.copyFile(src, dest);\n            }\n        }\n    }\n}\nexports.copyAssets = copyAssets;\n"]},"metadata":{},"sourceType":"script"}