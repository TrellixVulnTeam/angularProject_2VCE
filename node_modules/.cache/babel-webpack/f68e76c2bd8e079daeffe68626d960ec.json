{"ast":null,"code":"/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n(function (factory) {\n  if (typeof module === \"object\" && typeof module.exports === \"object\") {\n    var v = factory(require, exports);\n    if (v !== undefined) module.exports = v;\n  } else if (typeof define === \"function\" && define.amd) {\n    define(\"@angular/compiler-cli/src/ngtsc/entry_point/src/logic\", [\"require\", \"exports\", \"tslib\", \"@angular/compiler-cli/src/ngtsc/file_system\", \"@angular/compiler-cli/src/ngtsc/util/src/typescript\"], factory);\n  }\n})(function (require, exports) {\n  \"use strict\";\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.findFlatIndexEntryPoint = void 0;\n\n  var tslib_1 = require(\"tslib\");\n\n  var file_system_1 = require(\"@angular/compiler-cli/src/ngtsc/file_system\");\n\n  var typescript_1 = require(\"@angular/compiler-cli/src/ngtsc/util/src/typescript\");\n\n  function findFlatIndexEntryPoint(rootFiles) {\n    var e_1, _a; // There are two ways for a file to be recognized as the flat module index:\n    // 1) if it's the only file!!!!!!\n    // 2) (deprecated) if it's named 'index.ts' and has the shortest path of all such files.\n\n\n    var tsFiles = rootFiles.filter(function (file) {\n      return typescript_1.isNonDeclarationTsPath(file);\n    });\n    var resolvedEntryPoint = null;\n\n    if (tsFiles.length === 1) {\n      // There's only one file - this is the flat module index.\n      resolvedEntryPoint = tsFiles[0];\n    } else {\n      try {\n        // In the event there's more than one TS file, one of them can still be selected as the\n        // flat module index if it's named 'index.ts'. If there's more than one 'index.ts', the one\n        // with the shortest path wins.\n        //\n        // This behavior is DEPRECATED and only exists to support existing usages.\n        for (var tsFiles_1 = tslib_1.__values(tsFiles), tsFiles_1_1 = tsFiles_1.next(); !tsFiles_1_1.done; tsFiles_1_1 = tsFiles_1.next()) {\n          var tsFile = tsFiles_1_1.value;\n\n          if (file_system_1.getFileSystem().basename(tsFile) === 'index.ts' && (resolvedEntryPoint === null || tsFile.length <= resolvedEntryPoint.length)) {\n            resolvedEntryPoint = tsFile;\n          }\n        }\n      } catch (e_1_1) {\n        e_1 = {\n          error: e_1_1\n        };\n      } finally {\n        try {\n          if (tsFiles_1_1 && !tsFiles_1_1.done && (_a = tsFiles_1.return)) _a.call(tsFiles_1);\n        } finally {\n          if (e_1) throw e_1.error;\n        }\n      }\n    }\n\n    return resolvedEntryPoint;\n  }\n\n  exports.findFlatIndexEntryPoint = findFlatIndexEntryPoint;\n});","map":{"version":3,"sources":["../../../../../../../../../packages/compiler-cli/src/ngtsc/entry_point/src/logic.ts"],"names":[],"mappings":"AAAA;;;;;;AAMG;;;;;;;;;;;;;;;;;;AAEH,MAAA,aAAA,GAAA,OAAA,CAAA,6CAAA,CAAA;;AACA,MAAA,YAAA,GAAA,OAAA,CAAA,qDAAA,CAAA;;AAEA,WAAgB,uBAAhB,CAAwC,SAAxC,EAAgF;gBAAA,CAE9E;AACA;AACA;;;AACA,QAAM,OAAO,GAAG,SAAS,CAAC,MAAV,CAAiB,UAAA,IAAA,EAAI;AAAI,aAAA,YAAA,CAAA,sBAAA,CAAA,IAAA,CAAA;AAA4B,KAArD,CAAhB;AACA,QAAI,kBAAkB,GAAwB,IAA9C;;AAEA,QAAI,OAAO,CAAC,MAAR,KAAmB,CAAvB,EAA0B;AACxB;AACA,MAAA,kBAAkB,GAAG,OAAO,CAAC,CAAD,CAA5B;AACD,KAHD,MAGO;;AACL;AACA;AACA;AACA;AACA;AACA,aAAqB,IAAA,SAAA,GAAA,OAAA,CAAA,QAAA,CAAA,OAAA,CAAA,EAAO,WAAA,GAAA,SAAA,CAAA,IAAA,EAA5B,EAA4B,CAAA,WAAA,CAAA,IAA5B,EAA4B,WAAA,GAAA,SAAA,CAAA,IAAA,EAA5B,EAA8B;AAAzB,cAAM,MAAM,GAAA,WAAA,CAAA,KAAZ;;AACH,cAAI,aAAA,CAAA,aAAA,GAAgB,QAAhB,CAAyB,MAAzB,MAAqC,UAArC,KACC,kBAAkB,KAAK,IAAvB,IAA+B,MAAM,CAAC,MAAP,IAAiB,kBAAkB,CAAC,MADpE,CAAJ,EACiF;AAC/E,YAAA,kBAAkB,GAAG,MAArB;AACD;AACF;;;;;;;;;;;;AACF;;AAED,WAAO,kBAAP;AACD;;AA1BD,EAAA,OAAA,CAAA,uBAAA,GAAA,uBAAA","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AbsoluteFsPath, getFileSystem} from '../../file_system';\nimport {isNonDeclarationTsPath} from '../../util/src/typescript';\n\nexport function findFlatIndexEntryPoint(rootFiles: ReadonlyArray<AbsoluteFsPath>): AbsoluteFsPath|\n    null {\n  // There are two ways for a file to be recognized as the flat module index:\n  // 1) if it's the only file!!!!!!\n  // 2) (deprecated) if it's named 'index.ts' and has the shortest path of all such files.\n  const tsFiles = rootFiles.filter(file => isNonDeclarationTsPath(file));\n  let resolvedEntryPoint: AbsoluteFsPath|null = null;\n\n  if (tsFiles.length === 1) {\n    // There's only one file - this is the flat module index.\n    resolvedEntryPoint = tsFiles[0];\n  } else {\n    // In the event there's more than one TS file, one of them can still be selected as the\n    // flat module index if it's named 'index.ts'. If there's more than one 'index.ts', the one\n    // with the shortest path wins.\n    //\n    // This behavior is DEPRECATED and only exists to support existing usages.\n    for (const tsFile of tsFiles) {\n      if (getFileSystem().basename(tsFile) === 'index.ts' &&\n          (resolvedEntryPoint === null || tsFile.length <= resolvedEntryPoint.length)) {\n        resolvedEntryPoint = tsFile;\n      }\n    }\n  }\n\n  return resolvedEntryPoint;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}