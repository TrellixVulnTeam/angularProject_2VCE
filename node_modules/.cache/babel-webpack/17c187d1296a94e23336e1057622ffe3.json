{"ast":null,"code":"'use strict';\n\nvar http = require('http');\n\nvar constant = require('./constants');\n\nvar EventEmitter = require('events').EventEmitter;\n\nvar helper = require('./helper');\n\nvar cfg = require('./config');\n\nvar logger = require('./logger');\n\nvar log = logger.create('runner');\n\nfunction parseExitCode(buffer, defaultExitCode, failOnEmptyTestSuite) {\n  var tailPos = buffer.length - Buffer.byteLength(constant.EXIT_CODE) - 2;\n\n  if (tailPos < 0) {\n    return {\n      exitCode: defaultExitCode,\n      buffer: buffer\n    };\n  }\n\n  var tail = buffer.slice(tailPos);\n  var tailStr = tail.toString();\n\n  if (tailStr.substr(0, tailStr.length - 2) === constant.EXIT_CODE) {\n    var emptyInt = parseInt(tailStr.substr(-2, 1), 10);\n    var exitCode = parseInt(tailStr.substr(-1), 10);\n\n    if (failOnEmptyTestSuite === false && emptyInt === 0) {\n      log.warn('Test suite was empty.');\n      exitCode = 0;\n    }\n\n    return {\n      exitCode: exitCode,\n      buffer: buffer.slice(0, tailPos)\n    };\n  }\n\n  return {\n    exitCode: defaultExitCode,\n    buffer: buffer\n  };\n} // TODO(vojta): read config file (port, host, urlRoot)\n\n\nfunction run(config, done) {\n  config = config || {};\n  logger.setupFromConfig(config);\n  done = helper.isFunction(done) ? done : process.exit;\n  config = cfg.parseConfig(config.configFile, config);\n  var exitCode = 1;\n  var emitter = new EventEmitter();\n  var options = {\n    hostname: config.hostname,\n    path: config.urlRoot + 'run',\n    port: config.port,\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  var request = http.request(options, function (response) {\n    response.on('data', function (buffer) {\n      var parsedResult = parseExitCode(buffer, exitCode, config.failOnEmptyTestSuite);\n      exitCode = parsedResult.exitCode;\n      emitter.emit('progress', parsedResult.buffer);\n    });\n    response.on('end', function () {\n      return done(exitCode);\n    });\n  });\n  request.on('error', function (e) {\n    if (e.code === 'ECONNREFUSED') {\n      log.error('There is no server listening on port %d', options.port);\n      done(1, e.code);\n    } else {\n      throw e;\n    }\n  });\n  request.end(JSON.stringify({\n    args: config.clientArgs,\n    removedFiles: config.removedFiles,\n    changedFiles: config.changedFiles,\n    addedFiles: config.addedFiles,\n    refresh: config.refresh,\n    colors: config.colors\n  }));\n  return emitter;\n}\n\nexports.run = run;","map":{"version":3,"sources":["/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/karma/lib/runner.js"],"names":["http","require","constant","EventEmitter","helper","cfg","logger","log","create","parseExitCode","buffer","defaultExitCode","failOnEmptyTestSuite","tailPos","length","Buffer","byteLength","EXIT_CODE","exitCode","tail","slice","tailStr","toString","substr","emptyInt","parseInt","warn","run","config","done","setupFromConfig","isFunction","process","exit","parseConfig","configFile","emitter","options","hostname","path","urlRoot","port","method","headers","request","response","on","parsedResult","emit","e","code","error","end","JSON","stringify","args","clientArgs","removedFiles","changedFiles","addedFiles","refresh","colors","exports"],"mappings":"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","sourcesContent":["'use strict'\n\nconst http = require('http')\n\nconst constant = require('./constants')\nconst EventEmitter = require('events').EventEmitter\nconst helper = require('./helper')\nconst cfg = require('./config')\nconst logger = require('./logger')\nconst log = logger.create('runner')\n\nfunction parseExitCode (buffer, defaultExitCode, failOnEmptyTestSuite) {\n  const tailPos = buffer.length - Buffer.byteLength(constant.EXIT_CODE) - 2\n\n  if (tailPos < 0) {\n    return { exitCode: defaultExitCode, buffer }\n  }\n\n  const tail = buffer.slice(tailPos)\n  const tailStr = tail.toString()\n  if (tailStr.substr(0, tailStr.length - 2) === constant.EXIT_CODE) {\n    const emptyInt = parseInt(tailStr.substr(-2, 1), 10)\n    let exitCode = parseInt(tailStr.substr(-1), 10)\n    if (failOnEmptyTestSuite === false && emptyInt === 0) {\n      log.warn('Test suite was empty.')\n      exitCode = 0\n    }\n    return { exitCode, buffer: buffer.slice(0, tailPos) }\n  }\n\n  return { exitCode: defaultExitCode, buffer }\n}\n\n// TODO(vojta): read config file (port, host, urlRoot)\nfunction run (config, done) {\n  config = config || {}\n\n  logger.setupFromConfig(config)\n\n  done = helper.isFunction(done) ? done : process.exit\n  config = cfg.parseConfig(config.configFile, config)\n\n  let exitCode = 1\n  const emitter = new EventEmitter()\n  const options = {\n    hostname: config.hostname,\n    path: config.urlRoot + 'run',\n    port: config.port,\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  }\n\n  const request = http.request(options, function (response) {\n    response.on('data', function (buffer) {\n      const parsedResult = parseExitCode(buffer, exitCode, config.failOnEmptyTestSuite)\n      exitCode = parsedResult.exitCode\n      emitter.emit('progress', parsedResult.buffer)\n    })\n\n    response.on('end', () => done(exitCode))\n  })\n\n  request.on('error', function (e) {\n    if (e.code === 'ECONNREFUSED') {\n      log.error('There is no server listening on port %d', options.port)\n      done(1, e.code)\n    } else {\n      throw e\n    }\n  })\n\n  request.end(JSON.stringify({\n    args: config.clientArgs,\n    removedFiles: config.removedFiles,\n    changedFiles: config.changedFiles,\n    addedFiles: config.addedFiles,\n    refresh: config.refresh,\n    colors: config.colors\n  }))\n\n  return emitter\n}\n\nexports.run = run\n"]},"metadata":{},"sourceType":"script"}