{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nvar _createForOfIteratorHelper = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar mergeCache = new WeakMap();\n/**\n * Merges two given objects and caches the result to avoid computation if same objects passed as arguments again.\n * @example\n * // performs cleverMerge(first, second), stores the result in WeakMap and returns result\n * cachedCleverMerge({a: 1}, {a: 2})\n * {a: 2}\n *  // when same arguments passed, gets the result from WeakMap and returns it.\n * cachedCleverMerge({a: 1}, {a: 2})\n * {a: 2}\n * @param {object} first first object\n * @param {object} second second object\n * @returns {object} merged object of first and second object\n */\n\nvar cachedCleverMerge = function cachedCleverMerge(first, second) {\n  var innerCache = mergeCache.get(first);\n\n  if (innerCache === undefined) {\n    innerCache = new WeakMap();\n    mergeCache.set(first, innerCache);\n  }\n\n  var prevMerge = innerCache.get(second);\n  if (prevMerge !== undefined) return prevMerge;\n  var newMerge = cleverMerge(first, second);\n  innerCache.set(second, newMerge);\n  return newMerge;\n};\n/**\n * Merges two objects. Objects are not deeply merged.\n * TODO webpack 5: merge objects deeply clever.\n * Arrays might reference the old value with \"...\"\n * @param {object} first first object\n * @param {object} second second object\n * @returns {object} merged object of first and second object\n */\n\n\nvar cleverMerge = function cleverMerge(first, second) {\n  var newObject = Object.assign({}, first);\n\n  for (var _i = 0, _Object$keys = Object.keys(second); _i < _Object$keys.length; _i++) {\n    var key = _Object$keys[_i];\n\n    if (!(key in newObject)) {\n      newObject[key] = second[key];\n      continue;\n    }\n\n    var secondValue = second[key];\n\n    if (!Array.isArray(secondValue)) {\n      newObject[key] = secondValue;\n      continue;\n    }\n\n    var firstValue = newObject[key];\n\n    if (Array.isArray(firstValue)) {\n      var newArray = [];\n\n      var _iterator = _createForOfIteratorHelper(secondValue),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var item = _step.value;\n\n          if (item === \"...\") {\n            var _iterator2 = _createForOfIteratorHelper(firstValue),\n                _step2;\n\n            try {\n              for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n                var _item = _step2.value;\n                newArray.push(_item);\n              }\n            } catch (err) {\n              _iterator2.e(err);\n            } finally {\n              _iterator2.f();\n            }\n          } else {\n            newArray.push(item);\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      newObject[key] = newArray;\n    } else {\n      newObject[key] = secondValue;\n    }\n  }\n\n  return newObject;\n};\n\nexports.cachedCleverMerge = cachedCleverMerge;\nexports.cleverMerge = cleverMerge;","map":{"version":3,"sources":["/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/webpack/lib/util/cleverMerge.js"],"names":["mergeCache","WeakMap","cachedCleverMerge","first","second","innerCache","get","undefined","set","prevMerge","newMerge","cleverMerge","newObject","Object","assign","keys","key","secondValue","Array","isArray","firstValue","newArray","item","push","exports"],"mappings":"AAAA;AACA;AACA;AACA;AAEA;;;;AAEA,IAAMA,UAAU,GAAG,IAAIC,OAAJ,EAAnB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAMC,iBAAiB,GAAG,SAApBA,iBAAoB,CAACC,KAAD,EAAQC,MAAR,EAAmB;AAC5C,MAAIC,UAAU,GAAGL,UAAU,CAACM,GAAX,CAAeH,KAAf,CAAjB;;AACA,MAAIE,UAAU,KAAKE,SAAnB,EAA8B;AAC7BF,IAAAA,UAAU,GAAG,IAAIJ,OAAJ,EAAb;AACAD,IAAAA,UAAU,CAACQ,GAAX,CAAeL,KAAf,EAAsBE,UAAtB;AACA;;AACD,MAAMI,SAAS,GAAGJ,UAAU,CAACC,GAAX,CAAeF,MAAf,CAAlB;AACA,MAAIK,SAAS,KAAKF,SAAlB,EAA6B,OAAOE,SAAP;AAC7B,MAAMC,QAAQ,GAAGC,WAAW,CAACR,KAAD,EAAQC,MAAR,CAA5B;AACAC,EAAAA,UAAU,CAACG,GAAX,CAAeJ,MAAf,EAAuBM,QAAvB;AACA,SAAOA,QAAP;AACA,CAXD;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAACR,KAAD,EAAQC,MAAR,EAAmB;AACtC,MAAMQ,SAAS,GAAGC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBX,KAAlB,CAAlB;;AACA,kCAAkBU,MAAM,CAACE,IAAP,CAAYX,MAAZ,CAAlB,kCAAuC;AAAlC,QAAMY,GAAG,mBAAT;;AACJ,QAAI,EAAEA,GAAG,IAAIJ,SAAT,CAAJ,EAAyB;AACxBA,MAAAA,SAAS,CAACI,GAAD,CAAT,GAAiBZ,MAAM,CAACY,GAAD,CAAvB;AACA;AACA;;AACD,QAAMC,WAAW,GAAGb,MAAM,CAACY,GAAD,CAA1B;;AACA,QAAI,CAACE,KAAK,CAACC,OAAN,CAAcF,WAAd,CAAL,EAAiC;AAChCL,MAAAA,SAAS,CAACI,GAAD,CAAT,GAAiBC,WAAjB;AACA;AACA;;AACD,QAAMG,UAAU,GAAGR,SAAS,CAACI,GAAD,CAA5B;;AACA,QAAIE,KAAK,CAACC,OAAN,CAAcC,UAAd,CAAJ,EAA+B;AAC9B,UAAMC,QAAQ,GAAG,EAAjB;;AAD8B,iDAEXJ,WAFW;AAAA;;AAAA;AAE9B,4DAAgC;AAAA,cAArBK,IAAqB;;AAC/B,cAAIA,IAAI,KAAK,KAAb,EAAoB;AAAA,wDACAF,UADA;AAAA;;AAAA;AACnB,qEAA+B;AAAA,oBAApBE,KAAoB;AAC9BD,gBAAAA,QAAQ,CAACE,IAAT,CAAcD,KAAd;AACA;AAHkB;AAAA;AAAA;AAAA;AAAA;AAInB,WAJD,MAIO;AACND,YAAAA,QAAQ,CAACE,IAAT,CAAcD,IAAd;AACA;AACD;AAV6B;AAAA;AAAA;AAAA;AAAA;;AAW9BV,MAAAA,SAAS,CAACI,GAAD,CAAT,GAAiBK,QAAjB;AACA,KAZD,MAYO;AACNT,MAAAA,SAAS,CAACI,GAAD,CAAT,GAAiBC,WAAjB;AACA;AACD;;AACD,SAAOL,SAAP;AACA,CA9BD;;AAgCAY,OAAO,CAACtB,iBAAR,GAA4BA,iBAA5B;AACAsB,OAAO,CAACb,WAAR,GAAsBA,WAAtB","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst mergeCache = new WeakMap();\n\n/**\n * Merges two given objects and caches the result to avoid computation if same objects passed as arguments again.\n * @example\n * // performs cleverMerge(first, second), stores the result in WeakMap and returns result\n * cachedCleverMerge({a: 1}, {a: 2})\n * {a: 2}\n *  // when same arguments passed, gets the result from WeakMap and returns it.\n * cachedCleverMerge({a: 1}, {a: 2})\n * {a: 2}\n * @param {object} first first object\n * @param {object} second second object\n * @returns {object} merged object of first and second object\n */\nconst cachedCleverMerge = (first, second) => {\n\tlet innerCache = mergeCache.get(first);\n\tif (innerCache === undefined) {\n\t\tinnerCache = new WeakMap();\n\t\tmergeCache.set(first, innerCache);\n\t}\n\tconst prevMerge = innerCache.get(second);\n\tif (prevMerge !== undefined) return prevMerge;\n\tconst newMerge = cleverMerge(first, second);\n\tinnerCache.set(second, newMerge);\n\treturn newMerge;\n};\n\n/**\n * Merges two objects. Objects are not deeply merged.\n * TODO webpack 5: merge objects deeply clever.\n * Arrays might reference the old value with \"...\"\n * @param {object} first first object\n * @param {object} second second object\n * @returns {object} merged object of first and second object\n */\nconst cleverMerge = (first, second) => {\n\tconst newObject = Object.assign({}, first);\n\tfor (const key of Object.keys(second)) {\n\t\tif (!(key in newObject)) {\n\t\t\tnewObject[key] = second[key];\n\t\t\tcontinue;\n\t\t}\n\t\tconst secondValue = second[key];\n\t\tif (!Array.isArray(secondValue)) {\n\t\t\tnewObject[key] = secondValue;\n\t\t\tcontinue;\n\t\t}\n\t\tconst firstValue = newObject[key];\n\t\tif (Array.isArray(firstValue)) {\n\t\t\tconst newArray = [];\n\t\t\tfor (const item of secondValue) {\n\t\t\t\tif (item === \"...\") {\n\t\t\t\t\tfor (const item of firstValue) {\n\t\t\t\t\t\tnewArray.push(item);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tnewArray.push(item);\n\t\t\t\t}\n\t\t\t}\n\t\t\tnewObject[key] = newArray;\n\t\t} else {\n\t\t\tnewObject[key] = secondValue;\n\t\t}\n\t}\n\treturn newObject;\n};\n\nexports.cachedCleverMerge = cachedCleverMerge;\nexports.cleverMerge = cleverMerge;\n"]},"metadata":{},"sourceType":"script"}