{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _require = require('util'),\n    promisify = _require.promisify;\n\nvar fs = require('fs');\n\nfunction isType(_x, _x2, _x3) {\n  return _isType.apply(this, arguments);\n}\n\nfunction _isType() {\n  _isType = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(fsStatType, statsMethodName, filePath) {\n    var stats;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!(typeof filePath !== 'string')) {\n              _context.next = 2;\n              break;\n            }\n\n            throw new TypeError(\"Expected a string, got \".concat(typeof filePath));\n\n          case 2:\n            _context.prev = 2;\n            _context.next = 5;\n            return promisify(fs[fsStatType])(filePath);\n\n          case 5:\n            stats = _context.sent;\n            return _context.abrupt(\"return\", stats[statsMethodName]());\n\n          case 9:\n            _context.prev = 9;\n            _context.t0 = _context[\"catch\"](2);\n\n            if (!(_context.t0.code === 'ENOENT')) {\n              _context.next = 13;\n              break;\n            }\n\n            return _context.abrupt(\"return\", false);\n\n          case 13:\n            throw _context.t0;\n\n          case 14:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[2, 9]]);\n  }));\n  return _isType.apply(this, arguments);\n}\n\nfunction isTypeSync(fsStatType, statsMethodName, filePath) {\n  if (typeof filePath !== 'string') {\n    throw new TypeError(\"Expected a string, got \".concat(typeof filePath));\n  }\n\n  try {\n    return fs[fsStatType](filePath)[statsMethodName]();\n  } catch (error) {\n    if (error.code === 'ENOENT') {\n      return false;\n    }\n\n    throw error;\n  }\n}\n\nexports.isFile = isType.bind(null, 'stat', 'isFile');\nexports.isDirectory = isType.bind(null, 'stat', 'isDirectory');\nexports.isSymlink = isType.bind(null, 'lstat', 'isSymbolicLink');\nexports.isFileSync = isTypeSync.bind(null, 'statSync', 'isFile');\nexports.isDirectorySync = isTypeSync.bind(null, 'statSync', 'isDirectory');\nexports.isSymlinkSync = isTypeSync.bind(null, 'lstatSync', 'isSymbolicLink');","map":{"version":3,"sources":["/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/path-type/index.js"],"names":["require","promisify","fs","isType","fsStatType","statsMethodName","filePath","TypeError","stats","code","isTypeSync","error","exports","isFile","bind","isDirectory","isSymlink","isFileSync","isDirectorySync","isSymlinkSync"],"mappings":"AAAA;;;;;;AACA,eAAoBA,OAAO,CAAC,MAAD,CAA3B;AAAA,IAAOC,SAAP,YAAOA,SAAP;;AACA,IAAMC,EAAE,GAAGF,OAAO,CAAC,IAAD,CAAlB;;SAEeG,M;;;;;qEAAf,iBAAsBC,UAAtB,EAAkCC,eAAlC,EAAmDC,QAAnD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACK,OAAOA,QAAP,KAAoB,QADzB;AAAA;AAAA;AAAA;;AAAA,kBAEQ,IAAIC,SAAJ,kCAAwC,OAAOD,QAA/C,EAFR;;AAAA;AAAA;AAAA;AAAA,mBAMsBL,SAAS,CAACC,EAAE,CAACE,UAAD,CAAH,CAAT,CAA0BE,QAA1B,CANtB;;AAAA;AAMQE,YAAAA,KANR;AAAA,6CAOSA,KAAK,CAACH,eAAD,CAAL,EAPT;;AAAA;AAAA;AAAA;;AAAA,kBASM,YAAMI,IAAN,KAAe,QATrB;AAAA;AAAA;AAAA;;AAAA,6CAUU,KAVV;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAiBA,SAASC,UAAT,CAAoBN,UAApB,EAAgCC,eAAhC,EAAiDC,QAAjD,EAA2D;AAC1D,MAAI,OAAOA,QAAP,KAAoB,QAAxB,EAAkC;AACjC,UAAM,IAAIC,SAAJ,kCAAwC,OAAOD,QAA/C,EAAN;AACA;;AAED,MAAI;AACH,WAAOJ,EAAE,CAACE,UAAD,CAAF,CAAeE,QAAf,EAAyBD,eAAzB,GAAP;AACA,GAFD,CAEE,OAAOM,KAAP,EAAc;AACf,QAAIA,KAAK,CAACF,IAAN,KAAe,QAAnB,EAA6B;AAC5B,aAAO,KAAP;AACA;;AAED,UAAME,KAAN;AACA;AACD;;AAEDC,OAAO,CAACC,MAAR,GAAiBV,MAAM,CAACW,IAAP,CAAY,IAAZ,EAAkB,MAAlB,EAA0B,QAA1B,CAAjB;AACAF,OAAO,CAACG,WAAR,GAAsBZ,MAAM,CAACW,IAAP,CAAY,IAAZ,EAAkB,MAAlB,EAA0B,aAA1B,CAAtB;AACAF,OAAO,CAACI,SAAR,GAAoBb,MAAM,CAACW,IAAP,CAAY,IAAZ,EAAkB,OAAlB,EAA2B,gBAA3B,CAApB;AACAF,OAAO,CAACK,UAAR,GAAqBP,UAAU,CAACI,IAAX,CAAgB,IAAhB,EAAsB,UAAtB,EAAkC,QAAlC,CAArB;AACAF,OAAO,CAACM,eAAR,GAA0BR,UAAU,CAACI,IAAX,CAAgB,IAAhB,EAAsB,UAAtB,EAAkC,aAAlC,CAA1B;AACAF,OAAO,CAACO,aAAR,GAAwBT,UAAU,CAACI,IAAX,CAAgB,IAAhB,EAAsB,WAAtB,EAAmC,gBAAnC,CAAxB","sourcesContent":["'use strict';\nconst {promisify} = require('util');\nconst fs = require('fs');\n\nasync function isType(fsStatType, statsMethodName, filePath) {\n\tif (typeof filePath !== 'string') {\n\t\tthrow new TypeError(`Expected a string, got ${typeof filePath}`);\n\t}\n\n\ttry {\n\t\tconst stats = await promisify(fs[fsStatType])(filePath);\n\t\treturn stats[statsMethodName]();\n\t} catch (error) {\n\t\tif (error.code === 'ENOENT') {\n\t\t\treturn false;\n\t\t}\n\n\t\tthrow error;\n\t}\n}\n\nfunction isTypeSync(fsStatType, statsMethodName, filePath) {\n\tif (typeof filePath !== 'string') {\n\t\tthrow new TypeError(`Expected a string, got ${typeof filePath}`);\n\t}\n\n\ttry {\n\t\treturn fs[fsStatType](filePath)[statsMethodName]();\n\t} catch (error) {\n\t\tif (error.code === 'ENOENT') {\n\t\t\treturn false;\n\t\t}\n\n\t\tthrow error;\n\t}\n}\n\nexports.isFile = isType.bind(null, 'stat', 'isFile');\nexports.isDirectory = isType.bind(null, 'stat', 'isDirectory');\nexports.isSymlink = isType.bind(null, 'lstat', 'isSymbolicLink');\nexports.isFileSync = isTypeSync.bind(null, 'statSync', 'isFile');\nexports.isDirectorySync = isTypeSync.bind(null, 'statSync', 'isDirectory');\nexports.isSymlinkSync = isTypeSync.bind(null, 'lstatSync', 'isSymbolicLink');\n"]},"metadata":{},"sourceType":"script"}