{"ast":null,"code":"/*\n MIT License http://www.opensource.org/licenses/mit-license.php\n Author Tobias Koppers @sokra\n */\n\"use strict\";\n\nvar _createForOfIteratorHelper = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _classCallCheck = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/createClass\");\n\nvar DependenciesBlockVariable = require(\"./DependenciesBlockVariable\");\n/** @typedef {import(\"./ChunkGroup\")} ChunkGroup */\n\n/** @typedef {import(\"./Dependency\")} Dependency */\n\n/** @typedef {import(\"./AsyncDependenciesBlock\")} AsyncDependenciesBlock */\n\n/** @typedef {import(\"./DependenciesBlockVariable\")} DependenciesBlockVariable */\n\n/** @typedef {(d: Dependency) => boolean} DependencyFilterFunction */\n\n/** @typedef {import(\"./util/createHash\").Hash} Hash */\n\n\nvar DependenciesBlock = /*#__PURE__*/function () {\n  function DependenciesBlock() {\n    _classCallCheck(this, DependenciesBlock);\n\n    /** @type {Dependency[]} */\n    this.dependencies = [];\n    /** @type {AsyncDependenciesBlock[]} */\n\n    this.blocks = [];\n    /** @type {DependenciesBlockVariable[]} */\n\n    this.variables = [];\n  }\n  /**\n   * Adds a DependencyBlock to DependencyBlock relationship.\n   * This is used for when a Module has a AsyncDependencyBlock tie (for code-splitting)\n   *\n   * @param {AsyncDependenciesBlock} block block being added\n   * @returns {void}\n   */\n\n\n  _createClass(DependenciesBlock, [{\n    key: \"addBlock\",\n    value: function addBlock(block) {\n      this.blocks.push(block);\n      block.parent = this;\n    }\n    /**\n     * @param {string} name name of dependency\n     * @param {string} expression expression string for variable\n     * @param {Dependency[]} dependencies dependency instances tied to variable\n     * @returns {void}\n     */\n\n  }, {\n    key: \"addVariable\",\n    value: function addVariable(name, expression, dependencies) {\n      var _iterator = _createForOfIteratorHelper(this.variables),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var v = _step.value;\n\n          if (v.name === name && v.expression === expression) {\n            return;\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      this.variables.push(new DependenciesBlockVariable(name, expression, dependencies));\n    }\n    /**\n     * @param {Dependency} dependency dependency being tied to block.\n     * This is an \"edge\" pointing to another \"node\" on module graph.\n     * @returns {void}\n     */\n\n  }, {\n    key: \"addDependency\",\n    value: function addDependency(dependency) {\n      this.dependencies.push(dependency);\n    }\n    /**\n     * @param {Dependency} dependency dependency being removed\n     * @returns {void}\n     */\n\n  }, {\n    key: \"removeDependency\",\n    value: function removeDependency(dependency) {\n      var idx = this.dependencies.indexOf(dependency);\n\n      if (idx >= 0) {\n        this.dependencies.splice(idx, 1);\n      }\n    }\n    /**\n     * @param {Hash} hash the hash used to track dependencies\n     * @returns {void}\n     */\n\n  }, {\n    key: \"updateHash\",\n    value: function updateHash(hash) {\n      var _iterator2 = _createForOfIteratorHelper(this.dependencies),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var dep = _step2.value;\n          dep.updateHash(hash);\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n\n      var _iterator3 = _createForOfIteratorHelper(this.blocks),\n          _step3;\n\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var block = _step3.value;\n          block.updateHash(hash);\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n\n      var _iterator4 = _createForOfIteratorHelper(this.variables),\n          _step4;\n\n      try {\n        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n          var variable = _step4.value;\n          variable.updateHash(hash);\n        }\n      } catch (err) {\n        _iterator4.e(err);\n      } finally {\n        _iterator4.f();\n      }\n    }\n  }, {\n    key: \"disconnect\",\n    value: function disconnect() {\n      var _iterator5 = _createForOfIteratorHelper(this.dependencies),\n          _step5;\n\n      try {\n        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n          var dep = _step5.value;\n          dep.disconnect();\n        }\n      } catch (err) {\n        _iterator5.e(err);\n      } finally {\n        _iterator5.f();\n      }\n\n      var _iterator6 = _createForOfIteratorHelper(this.blocks),\n          _step6;\n\n      try {\n        for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n          var block = _step6.value;\n          block.disconnect();\n        }\n      } catch (err) {\n        _iterator6.e(err);\n      } finally {\n        _iterator6.f();\n      }\n\n      var _iterator7 = _createForOfIteratorHelper(this.variables),\n          _step7;\n\n      try {\n        for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n          var variable = _step7.value;\n          variable.disconnect();\n        }\n      } catch (err) {\n        _iterator7.e(err);\n      } finally {\n        _iterator7.f();\n      }\n    }\n  }, {\n    key: \"unseal\",\n    value: function unseal() {\n      var _iterator8 = _createForOfIteratorHelper(this.blocks),\n          _step8;\n\n      try {\n        for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {\n          var block = _step8.value;\n          block.unseal();\n        }\n      } catch (err) {\n        _iterator8.e(err);\n      } finally {\n        _iterator8.f();\n      }\n    }\n    /**\n     * @param {DependencyFilterFunction} filter filter function for dependencies, gets passed all dependency ties from current instance\n     * @returns {boolean} returns boolean for filter\n     */\n\n  }, {\n    key: \"hasDependencies\",\n    value: function hasDependencies(filter) {\n      if (filter) {\n        var _iterator9 = _createForOfIteratorHelper(this.dependencies),\n            _step9;\n\n        try {\n          for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {\n            var dep = _step9.value;\n            if (filter(dep)) return true;\n          }\n        } catch (err) {\n          _iterator9.e(err);\n        } finally {\n          _iterator9.f();\n        }\n      } else {\n        if (this.dependencies.length > 0) {\n          return true;\n        }\n      }\n\n      var _iterator10 = _createForOfIteratorHelper(this.blocks),\n          _step10;\n\n      try {\n        for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {\n          var block = _step10.value;\n          if (block.hasDependencies(filter)) return true;\n        }\n      } catch (err) {\n        _iterator10.e(err);\n      } finally {\n        _iterator10.f();\n      }\n\n      var _iterator11 = _createForOfIteratorHelper(this.variables),\n          _step11;\n\n      try {\n        for (_iterator11.s(); !(_step11 = _iterator11.n()).done;) {\n          var variable = _step11.value;\n          if (variable.hasDependencies(filter)) return true;\n        }\n      } catch (err) {\n        _iterator11.e(err);\n      } finally {\n        _iterator11.f();\n      }\n\n      return false;\n    }\n  }, {\n    key: \"sortItems\",\n    value: function sortItems() {\n      var _iterator12 = _createForOfIteratorHelper(this.blocks),\n          _step12;\n\n      try {\n        for (_iterator12.s(); !(_step12 = _iterator12.n()).done;) {\n          var block = _step12.value;\n          block.sortItems();\n        }\n      } catch (err) {\n        _iterator12.e(err);\n      } finally {\n        _iterator12.f();\n      }\n    }\n  }]);\n\n  return DependenciesBlock;\n}();\n\nmodule.exports = DependenciesBlock;","map":{"version":3,"sources":["/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/webpack/lib/DependenciesBlock.js"],"names":["DependenciesBlockVariable","require","DependenciesBlock","dependencies","blocks","variables","block","push","parent","name","expression","v","dependency","idx","indexOf","splice","hash","dep","updateHash","variable","disconnect","unseal","filter","length","hasDependencies","sortItems","module","exports"],"mappings":"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","sourcesContent":["/*\n MIT License http://www.opensource.org/licenses/mit-license.php\n Author Tobias Koppers @sokra\n */\n\"use strict\";\n\nconst DependenciesBlockVariable = require(\"./DependenciesBlockVariable\");\n\n/** @typedef {import(\"./ChunkGroup\")} ChunkGroup */\n/** @typedef {import(\"./Dependency\")} Dependency */\n/** @typedef {import(\"./AsyncDependenciesBlock\")} AsyncDependenciesBlock */\n/** @typedef {import(\"./DependenciesBlockVariable\")} DependenciesBlockVariable */\n/** @typedef {(d: Dependency) => boolean} DependencyFilterFunction */\n/** @typedef {import(\"./util/createHash\").Hash} Hash */\n\nclass DependenciesBlock {\n\tconstructor() {\n\t\t/** @type {Dependency[]} */\n\t\tthis.dependencies = [];\n\t\t/** @type {AsyncDependenciesBlock[]} */\n\t\tthis.blocks = [];\n\t\t/** @type {DependenciesBlockVariable[]} */\n\t\tthis.variables = [];\n\t}\n\n\t/**\n\t * Adds a DependencyBlock to DependencyBlock relationship.\n\t * This is used for when a Module has a AsyncDependencyBlock tie (for code-splitting)\n\t *\n\t * @param {AsyncDependenciesBlock} block block being added\n\t * @returns {void}\n\t */\n\taddBlock(block) {\n\t\tthis.blocks.push(block);\n\t\tblock.parent = this;\n\t}\n\n\t/**\n\t * @param {string} name name of dependency\n\t * @param {string} expression expression string for variable\n\t * @param {Dependency[]} dependencies dependency instances tied to variable\n\t * @returns {void}\n\t */\n\taddVariable(name, expression, dependencies) {\n\t\tfor (let v of this.variables) {\n\t\t\tif (v.name === name && v.expression === expression) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tthis.variables.push(\n\t\t\tnew DependenciesBlockVariable(name, expression, dependencies)\n\t\t);\n\t}\n\n\t/**\n\t * @param {Dependency} dependency dependency being tied to block.\n\t * This is an \"edge\" pointing to another \"node\" on module graph.\n\t * @returns {void}\n\t */\n\taddDependency(dependency) {\n\t\tthis.dependencies.push(dependency);\n\t}\n\n\t/**\n\t * @param {Dependency} dependency dependency being removed\n\t * @returns {void}\n\t */\n\tremoveDependency(dependency) {\n\t\tconst idx = this.dependencies.indexOf(dependency);\n\t\tif (idx >= 0) {\n\t\t\tthis.dependencies.splice(idx, 1);\n\t\t}\n\t}\n\n\t/**\n\t * @param {Hash} hash the hash used to track dependencies\n\t * @returns {void}\n\t */\n\tupdateHash(hash) {\n\t\tfor (const dep of this.dependencies) dep.updateHash(hash);\n\t\tfor (const block of this.blocks) block.updateHash(hash);\n\t\tfor (const variable of this.variables) variable.updateHash(hash);\n\t}\n\n\tdisconnect() {\n\t\tfor (const dep of this.dependencies) dep.disconnect();\n\t\tfor (const block of this.blocks) block.disconnect();\n\t\tfor (const variable of this.variables) variable.disconnect();\n\t}\n\n\tunseal() {\n\t\tfor (const block of this.blocks) block.unseal();\n\t}\n\n\t/**\n\t * @param {DependencyFilterFunction} filter filter function for dependencies, gets passed all dependency ties from current instance\n\t * @returns {boolean} returns boolean for filter\n\t */\n\thasDependencies(filter) {\n\t\tif (filter) {\n\t\t\tfor (const dep of this.dependencies) {\n\t\t\t\tif (filter(dep)) return true;\n\t\t\t}\n\t\t} else {\n\t\t\tif (this.dependencies.length > 0) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\tfor (const block of this.blocks) {\n\t\t\tif (block.hasDependencies(filter)) return true;\n\t\t}\n\t\tfor (const variable of this.variables) {\n\t\t\tif (variable.hasDependencies(filter)) return true;\n\t\t}\n\t\treturn false;\n\t}\n\n\tsortItems() {\n\t\tfor (const block of this.blocks) block.sortItems();\n\t}\n}\n\nmodule.exports = DependenciesBlock;\n"]},"metadata":{},"sourceType":"script"}