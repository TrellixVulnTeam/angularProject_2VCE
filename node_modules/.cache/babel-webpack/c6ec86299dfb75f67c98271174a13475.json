{"ast":null,"code":"\"use strict\";\n\nvar _objectSpread = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/objectSpread2\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.strategy = void 0;\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nvar rxjs_1 = require(\"rxjs\");\n\nvar operators_1 = require(\"rxjs/operators\");\n\nvar api_1 = require(\"./api\");\n\nvar stableStringify = require(\"fast-json-stable-stringify\");\n\nvar strategy;\n\n(function (strategy) {\n  /**\n   * Creates a JobStrategy that serializes every call. This strategy can be mixed between jobs.\n   */\n  function serialize() {\n    var latest = rxjs_1.of();\n    return function (handler, options) {\n      var newHandler = function newHandler(argument, context) {\n        var previous = latest;\n        latest = rxjs_1.concat(previous.pipe(operators_1.ignoreElements()), new rxjs_1.Observable(function (o) {\n          return handler(argument, context).subscribe(o);\n        })).pipe(operators_1.shareReplay(0));\n        return latest;\n      };\n\n      return Object.assign(newHandler, {\n        jobDescription: Object.assign({}, handler.jobDescription, options)\n      });\n    };\n  }\n\n  strategy.serialize = serialize;\n  /**\n   * Creates a JobStrategy that will always reuse a running job, and restart it if the job ended.\n   * @param replayMessages Replay ALL messages if a job is reused, otherwise just hook up where it\n   *        is.\n   */\n\n  function reuse() {\n    var replayMessages = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    var inboundBus = new rxjs_1.Subject();\n    var run = null;\n    var state = null;\n    return function (handler, options) {\n      var newHandler = function newHandler(argument, context) {\n        // Forward inputs.\n        var subscription = context.inboundBus.subscribe(inboundBus);\n\n        if (run) {\n          return rxjs_1.concat( // Update state.\n          rxjs_1.of(state), run).pipe(operators_1.finalize(function () {\n            return subscription.unsubscribe();\n          }));\n        }\n\n        run = handler(argument, _objectSpread(_objectSpread({}, context), {}, {\n          inboundBus: inboundBus.asObservable()\n        })).pipe(operators_1.tap(function (message) {\n          if (message.kind == api_1.JobOutboundMessageKind.Start || message.kind == api_1.JobOutboundMessageKind.OnReady || message.kind == api_1.JobOutboundMessageKind.End) {\n            state = message;\n          }\n        }, undefined, function () {\n          subscription.unsubscribe();\n          inboundBus = new rxjs_1.Subject();\n          run = null;\n        }), replayMessages ? operators_1.shareReplay() : operators_1.share());\n        return run;\n      };\n\n      return Object.assign(newHandler, handler, options || {});\n    };\n  }\n\n  strategy.reuse = reuse;\n  /**\n   * Creates a JobStrategy that will reuse a running job if the argument matches.\n   * @param replayMessages Replay ALL messages if a job is reused, otherwise just hook up where it\n   *        is.\n   */\n\n  function memoize() {\n    var replayMessages = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    var runs = new Map();\n    return function (handler, options) {\n      var newHandler = function newHandler(argument, context) {\n        var argumentJson = stableStringify(argument);\n        var maybeJob = runs.get(argumentJson);\n\n        if (maybeJob) {\n          return maybeJob;\n        }\n\n        var run = handler(argument, context).pipe(replayMessages ? operators_1.shareReplay() : operators_1.share());\n        runs.set(argumentJson, run);\n        return run;\n      };\n\n      return Object.assign(newHandler, handler, options || {});\n    };\n  }\n\n  strategy.memoize = memoize;\n})(strategy = exports.strategy || (exports.strategy = {}));","map":{"version":3,"sources":["/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@angular-devkit/build-angular/node_modules/@angular-devkit/core/src/experimental/jobs/strategy.js"],"names":["Object","defineProperty","exports","value","strategy","rxjs_1","require","operators_1","api_1","stableStringify","serialize","latest","of","handler","options","newHandler","argument","context","previous","concat","pipe","ignoreElements","Observable","o","subscribe","shareReplay","assign","jobDescription","reuse","replayMessages","inboundBus","Subject","run","state","subscription","finalize","unsubscribe","asObservable","tap","message","kind","JobOutboundMessageKind","Start","OnReady","End","undefined","share","memoize","runs","Map","argumentJson","maybeJob","get","set"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.strategy = void 0;\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst rxjs_1 = require(\"rxjs\");\nconst operators_1 = require(\"rxjs/operators\");\nconst api_1 = require(\"./api\");\nconst stableStringify = require(\"fast-json-stable-stringify\");\nvar strategy;\n(function (strategy) {\n    /**\n     * Creates a JobStrategy that serializes every call. This strategy can be mixed between jobs.\n     */\n    function serialize() {\n        let latest = rxjs_1.of();\n        return (handler, options) => {\n            const newHandler = (argument, context) => {\n                const previous = latest;\n                latest = rxjs_1.concat(previous.pipe(operators_1.ignoreElements()), new rxjs_1.Observable(o => handler(argument, context).subscribe(o))).pipe(operators_1.shareReplay(0));\n                return latest;\n            };\n            return Object.assign(newHandler, {\n                jobDescription: Object.assign({}, handler.jobDescription, options),\n            });\n        };\n    }\n    strategy.serialize = serialize;\n    /**\n     * Creates a JobStrategy that will always reuse a running job, and restart it if the job ended.\n     * @param replayMessages Replay ALL messages if a job is reused, otherwise just hook up where it\n     *        is.\n     */\n    function reuse(replayMessages = false) {\n        let inboundBus = new rxjs_1.Subject();\n        let run = null;\n        let state = null;\n        return (handler, options) => {\n            const newHandler = (argument, context) => {\n                // Forward inputs.\n                const subscription = context.inboundBus.subscribe(inboundBus);\n                if (run) {\n                    return rxjs_1.concat(\n                    // Update state.\n                    rxjs_1.of(state), run).pipe(operators_1.finalize(() => subscription.unsubscribe()));\n                }\n                run = handler(argument, { ...context, inboundBus: inboundBus.asObservable() }).pipe(operators_1.tap(message => {\n                    if (message.kind == api_1.JobOutboundMessageKind.Start\n                        || message.kind == api_1.JobOutboundMessageKind.OnReady\n                        || message.kind == api_1.JobOutboundMessageKind.End) {\n                        state = message;\n                    }\n                }, undefined, () => {\n                    subscription.unsubscribe();\n                    inboundBus = new rxjs_1.Subject();\n                    run = null;\n                }), replayMessages ? operators_1.shareReplay() : operators_1.share());\n                return run;\n            };\n            return Object.assign(newHandler, handler, options || {});\n        };\n    }\n    strategy.reuse = reuse;\n    /**\n     * Creates a JobStrategy that will reuse a running job if the argument matches.\n     * @param replayMessages Replay ALL messages if a job is reused, otherwise just hook up where it\n     *        is.\n     */\n    function memoize(replayMessages = false) {\n        const runs = new Map();\n        return (handler, options) => {\n            const newHandler = (argument, context) => {\n                const argumentJson = stableStringify(argument);\n                const maybeJob = runs.get(argumentJson);\n                if (maybeJob) {\n                    return maybeJob;\n                }\n                const run = handler(argument, context).pipe(replayMessages ? operators_1.shareReplay() : operators_1.share());\n                runs.set(argumentJson, run);\n                return run;\n            };\n            return Object.assign(newHandler, handler, options || {});\n        };\n    }\n    strategy.memoize = memoize;\n})(strategy = exports.strategy || (exports.strategy = {}));\n"]},"metadata":{},"sourceType":"script"}