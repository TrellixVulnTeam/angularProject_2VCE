{"ast":null,"code":"var sourceMap = require('source-map');\n\nvar SourceMapConsumer = sourceMap.SourceMapConsumer;\nvar SourceMapGenerator = sourceMap.SourceMapGenerator;\nmodule.exports = merge;\n/**\n * Merge old source map and new source map and return merged.\n * If old or new source map value is falsy, return another one as it is.\n *\n * @param {object|string} [oldMap] old source map object\n * @param {object|string} [newmap] new source map object\n * @return {object|undefined} merged source map object, or undefined when both old and new source map are undefined\n */\n\nfunction merge(oldMap, newMap) {\n  if (!oldMap) return newMap;\n  if (!newMap) return oldMap;\n  var oldMapConsumer = new SourceMapConsumer(oldMap);\n  var newMapConsumer = new SourceMapConsumer(newMap);\n  var mergedMapGenerator = new SourceMapGenerator(); // iterate on new map and overwrite original position of new map with one of old map\n\n  newMapConsumer.eachMapping(function (m) {\n    // pass when `originalLine` is null.\n    // It occurs in case that the node does not have origin in original code.\n    if (m.originalLine == null) return;\n    var origPosInOldMap = oldMapConsumer.originalPositionFor({\n      line: m.originalLine,\n      column: m.originalColumn\n    });\n    if (origPosInOldMap.source == null) return;\n    mergedMapGenerator.addMapping({\n      original: {\n        line: origPosInOldMap.line,\n        column: origPosInOldMap.column\n      },\n      generated: {\n        line: m.generatedLine,\n        column: m.generatedColumn\n      },\n      source: origPosInOldMap.source,\n      name: origPosInOldMap.name\n    });\n  });\n  var consumers = [oldMapConsumer, newMapConsumer];\n  consumers.forEach(function (consumer) {\n    consumer.sources.forEach(function (sourceFile) {\n      mergedMapGenerator._sources.add(sourceFile);\n\n      var sourceContent = consumer.sourceContentFor(sourceFile);\n\n      if (sourceContent != null) {\n        mergedMapGenerator.setSourceContent(sourceFile, sourceContent);\n      }\n    });\n  });\n  mergedMapGenerator._sourceRoot = oldMap.sourceRoot;\n  mergedMapGenerator._file = oldMap.file;\n  return JSON.parse(mergedMapGenerator.toString());\n}","map":{"version":3,"sources":["/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/merge-source-map/index.js"],"names":["sourceMap","require","SourceMapConsumer","SourceMapGenerator","module","exports","merge","oldMap","newMap","oldMapConsumer","newMapConsumer","mergedMapGenerator","eachMapping","m","originalLine","origPosInOldMap","originalPositionFor","line","column","originalColumn","source","addMapping","original","generated","generatedLine","generatedColumn","name","consumers","forEach","consumer","sources","sourceFile","_sources","add","sourceContent","sourceContentFor","setSourceContent","_sourceRoot","sourceRoot","_file","file","JSON","parse","toString"],"mappings":"AAAA,IAAIA,SAAS,GAAGC,OAAO,CAAC,YAAD,CAAvB;;AACA,IAAIC,iBAAiB,GAAGF,SAAS,CAACE,iBAAlC;AACA,IAAIC,kBAAkB,GAAGH,SAAS,CAACG,kBAAnC;AAEAC,MAAM,CAACC,OAAP,GAAiBC,KAAjB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASA,KAAT,CAAeC,MAAf,EAAuBC,MAAvB,EAA+B;AAC7B,MAAI,CAACD,MAAL,EAAa,OAAOC,MAAP;AACb,MAAI,CAACA,MAAL,EAAa,OAAOD,MAAP;AAEb,MAAIE,cAAc,GAAG,IAAIP,iBAAJ,CAAsBK,MAAtB,CAArB;AACA,MAAIG,cAAc,GAAG,IAAIR,iBAAJ,CAAsBM,MAAtB,CAArB;AACA,MAAIG,kBAAkB,GAAG,IAAIR,kBAAJ,EAAzB,CAN6B,CAQ7B;;AACAO,EAAAA,cAAc,CAACE,WAAf,CAA2B,UAASC,CAAT,EAAY;AACrC;AACA;AACA,QAAIA,CAAC,CAACC,YAAF,IAAkB,IAAtB,EAA4B;AAE5B,QAAIC,eAAe,GAAGN,cAAc,CAACO,mBAAf,CAAmC;AACvDC,MAAAA,IAAI,EAAEJ,CAAC,CAACC,YAD+C;AAEvDI,MAAAA,MAAM,EAAEL,CAAC,CAACM;AAF6C,KAAnC,CAAtB;AAKA,QAAIJ,eAAe,CAACK,MAAhB,IAA0B,IAA9B,EAAoC;AAEpCT,IAAAA,kBAAkB,CAACU,UAAnB,CAA8B;AAC5BC,MAAAA,QAAQ,EAAE;AACRL,QAAAA,IAAI,EAAEF,eAAe,CAACE,IADd;AAERC,QAAAA,MAAM,EAAEH,eAAe,CAACG;AAFhB,OADkB;AAK5BK,MAAAA,SAAS,EAAE;AACTN,QAAAA,IAAI,EAAEJ,CAAC,CAACW,aADC;AAETN,QAAAA,MAAM,EAAEL,CAAC,CAACY;AAFD,OALiB;AAS5BL,MAAAA,MAAM,EAAEL,eAAe,CAACK,MATI;AAU5BM,MAAAA,IAAI,EAAEX,eAAe,CAACW;AAVM,KAA9B;AAYD,GAxBD;AA0BA,MAAIC,SAAS,GAAG,CAAClB,cAAD,EAAiBC,cAAjB,CAAhB;AACAiB,EAAAA,SAAS,CAACC,OAAV,CAAkB,UAASC,QAAT,EAAmB;AACnCA,IAAAA,QAAQ,CAACC,OAAT,CAAiBF,OAAjB,CAAyB,UAASG,UAAT,EAAqB;AAC5CpB,MAAAA,kBAAkB,CAACqB,QAAnB,CAA4BC,GAA5B,CAAgCF,UAAhC;;AACA,UAAIG,aAAa,GAAGL,QAAQ,CAACM,gBAAT,CAA0BJ,UAA1B,CAApB;;AACA,UAAIG,aAAa,IAAI,IAArB,EAA2B;AACzBvB,QAAAA,kBAAkB,CAACyB,gBAAnB,CAAoCL,UAApC,EAAgDG,aAAhD;AACD;AACF,KAND;AAOD,GARD;AAUAvB,EAAAA,kBAAkB,CAAC0B,WAAnB,GAAiC9B,MAAM,CAAC+B,UAAxC;AACA3B,EAAAA,kBAAkB,CAAC4B,KAAnB,GAA2BhC,MAAM,CAACiC,IAAlC;AAEA,SAAOC,IAAI,CAACC,KAAL,CAAW/B,kBAAkB,CAACgC,QAAnB,EAAX,CAAP;AACD","sourcesContent":["var sourceMap = require('source-map')\nvar SourceMapConsumer = sourceMap.SourceMapConsumer\nvar SourceMapGenerator = sourceMap.SourceMapGenerator\n\nmodule.exports = merge\n\n/**\n * Merge old source map and new source map and return merged.\n * If old or new source map value is falsy, return another one as it is.\n *\n * @param {object|string} [oldMap] old source map object\n * @param {object|string} [newmap] new source map object\n * @return {object|undefined} merged source map object, or undefined when both old and new source map are undefined\n */\nfunction merge(oldMap, newMap) {\n  if (!oldMap) return newMap\n  if (!newMap) return oldMap\n\n  var oldMapConsumer = new SourceMapConsumer(oldMap)\n  var newMapConsumer = new SourceMapConsumer(newMap)\n  var mergedMapGenerator = new SourceMapGenerator()\n\n  // iterate on new map and overwrite original position of new map with one of old map\n  newMapConsumer.eachMapping(function(m) {\n    // pass when `originalLine` is null.\n    // It occurs in case that the node does not have origin in original code.\n    if (m.originalLine == null) return\n\n    var origPosInOldMap = oldMapConsumer.originalPositionFor({\n      line: m.originalLine,\n      column: m.originalColumn\n    })\n\n    if (origPosInOldMap.source == null) return\n\n    mergedMapGenerator.addMapping({\n      original: {\n        line: origPosInOldMap.line,\n        column: origPosInOldMap.column\n      },\n      generated: {\n        line: m.generatedLine,\n        column: m.generatedColumn\n      },\n      source: origPosInOldMap.source,\n      name: origPosInOldMap.name\n    })\n  })\n\n  var consumers = [oldMapConsumer, newMapConsumer]\n  consumers.forEach(function(consumer) {\n    consumer.sources.forEach(function(sourceFile) {\n      mergedMapGenerator._sources.add(sourceFile)\n      var sourceContent = consumer.sourceContentFor(sourceFile)\n      if (sourceContent != null) {\n        mergedMapGenerator.setSourceContent(sourceFile, sourceContent)\n      }\n    })\n  })\n\n  mergedMapGenerator._sourceRoot = oldMap.sourceRoot\n  mergedMapGenerator._file = oldMap.file\n\n  return JSON.parse(mergedMapGenerator.toString())\n}\n"]},"metadata":{},"sourceType":"script"}