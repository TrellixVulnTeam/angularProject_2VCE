{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.loaders = void 0;\n/* eslint-disable @typescript-eslint/no-require-imports */\n\nvar importFresh;\n\nvar loadJs = function loadJs(filepath) {\n  if (importFresh === undefined) {\n    importFresh = require('import-fresh');\n  }\n\n  var result = importFresh(filepath);\n  return result;\n};\n\nvar parseJson;\n\nvar loadJson = function loadJson(filepath, content) {\n  if (parseJson === undefined) {\n    parseJson = require('parse-json');\n  }\n\n  try {\n    var result = parseJson(content);\n    return result;\n  } catch (error) {\n    error.message = \"JSON Error in \".concat(filepath, \":\\n\").concat(error.message);\n    throw error;\n  }\n};\n\nvar yaml;\n\nvar loadYaml = function loadYaml(filepath, content) {\n  if (yaml === undefined) {\n    yaml = require('yaml');\n  }\n\n  try {\n    var result = yaml.parse(content, {\n      prettyErrors: true\n    });\n    return result;\n  } catch (error) {\n    error.message = \"YAML Error in \".concat(filepath, \":\\n\").concat(error.message);\n    throw error;\n  }\n};\n\nvar loaders = {\n  loadJs: loadJs,\n  loadJson: loadJson,\n  loadYaml: loadYaml\n};\nexports.loaders = loaders;","map":{"version":3,"sources":["../src/loaders.ts"],"names":["loadJs","importFresh","require","result","loadJson","parseJson","error","filepath","loadYaml","yaml","prettyErrors","loaders"],"mappings":";;;;;;AAAA;;AAQA,IAAA,WAAA;;AACA,IAAMA,MAAkB,GAAG,SAAA,MAAA,CAAA,QAAA,EAA0B;AACnD,MAAIC,WAAW,KAAf,SAAA,EAA+B;AAC7BA,IAAAA,WAAW,GAAGC,OAAO,CAArBD,cAAqB,CAArBA;AACD;;AAED,MAAME,MAAM,GAAGF,WAAW,CAA1B,QAA0B,CAA1B;AACA,SAAA,MAAA;AANF,CAAA;;AASA,IAAA,SAAA;;AACA,IAAMG,QAAoB,GAAG,SAAA,QAAA,CAAA,QAAA,EAAA,OAAA,EAAqC;AAChE,MAAIC,SAAS,KAAb,SAAA,EAA6B;AAC3BA,IAAAA,SAAS,GAAGH,OAAO,CAAnBG,YAAmB,CAAnBA;AACD;;AAED,MAAI;AACF,QAAMF,MAAM,GAAGE,SAAS,CAAxB,OAAwB,CAAxB;AACA,WAAA,MAAA;AAFF,GAAA,CAGE,OAAA,KAAA,EAAc;AACdC,IAAAA,KAAK,CAALA,OAAAA,2BAAiCC,QAAjCD,gBAA+CA,KAAK,CAApDA,OAAAA;AACA,UAAA,KAAA;AACD;AAXH,CAAA;;AAcA,IAAA,IAAA;;AACA,IAAME,QAAoB,GAAG,SAAA,QAAA,CAAA,QAAA,EAAA,OAAA,EAAqC;AAChE,MAAIC,IAAI,KAAR,SAAA,EAAwB;AACtBA,IAAAA,IAAI,GAAGP,OAAO,CAAdO,MAAc,CAAdA;AACD;;AAED,MAAI;AACF,QAAMN,MAAM,GAAG,IAAI,CAAJ,KAAA,CAAA,OAAA,EAAoB;AAAEO,MAAAA,YAAY,EAAE;AAAhB,KAApB,CAAf;AACA,WAAA,MAAA;AAFF,GAAA,CAGE,OAAA,KAAA,EAAc;AACdJ,IAAAA,KAAK,CAALA,OAAAA,2BAAiCC,QAAjCD,gBAA+CA,KAAK,CAApDA,OAAAA;AACA,UAAA,KAAA;AACD;AAXH,CAAA;;AAcA,IAAMK,OAAoB,GAAG;AAAEX,EAAAA,MAAF,EAAEA,MAAF;AAAUI,EAAAA,QAAV,EAAUA,QAAV;AAAoBI,EAAAA,QAAAA,EAAAA;AAApB,CAA7B","sourcesContent":["/* eslint-disable @typescript-eslint/no-require-imports */\n\nimport parseJsonType from 'parse-json';\nimport yamlType from 'yaml';\nimport importFreshType from 'import-fresh';\nimport { LoaderSync } from './index';\nimport { LoadersSync } from './types';\n\nlet importFresh: typeof importFreshType;\nconst loadJs: LoaderSync = function loadJs(filepath) {\n  if (importFresh === undefined) {\n    importFresh = require('import-fresh');\n  }\n\n  const result = importFresh(filepath);\n  return result;\n};\n\nlet parseJson: typeof parseJsonType;\nconst loadJson: LoaderSync = function loadJson(filepath, content) {\n  if (parseJson === undefined) {\n    parseJson = require('parse-json');\n  }\n\n  try {\n    const result = parseJson(content);\n    return result;\n  } catch (error) {\n    error.message = `JSON Error in ${filepath}:\\n${error.message}`;\n    throw error;\n  }\n};\n\nlet yaml: typeof yamlType;\nconst loadYaml: LoaderSync = function loadYaml(filepath, content) {\n  if (yaml === undefined) {\n    yaml = require('yaml');\n  }\n\n  try {\n    const result = yaml.parse(content, { prettyErrors: true });\n    return result;\n  } catch (error) {\n    error.message = `YAML Error in ${filepath}:\\n${error.message}`;\n    throw error;\n  }\n};\n\nconst loaders: LoadersSync = { loadJs, loadJson, loadYaml };\n\nexport { loaders };\n"]},"metadata":{},"sourceType":"script"}