{"ast":null,"code":"/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n(function (factory) {\n  if (typeof module === \"object\" && typeof module.exports === \"object\") {\n    var v = factory(require, exports);\n    if (v !== undefined) module.exports = v;\n  } else if (typeof define === \"function\" && define.amd) {\n    define(\"@angular/compiler-cli/src/transformers/node_emitter_transform\", [\"require\", \"exports\", \"tslib\", \"typescript\", \"@angular/compiler-cli/src/transformers/node_emitter\", \"@angular/compiler-cli/src/transformers/util\"], factory);\n  }\n})(function (require, exports) {\n  \"use strict\";\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.getAngularEmitterTransformFactory = void 0;\n\n  var tslib_1 = require(\"tslib\");\n\n  var ts = require(\"typescript\");\n\n  var node_emitter_1 = require(\"@angular/compiler-cli/src/transformers/node_emitter\");\n\n  var util_1 = require(\"@angular/compiler-cli/src/transformers/util\");\n\n  function getPreamble(original) {\n    return \"*\\n * @fileoverview This file was generated by the Angular template compiler. Do not edit.\\n * \" + original + \"\\n * @suppress {suspiciousCode,uselessCode,missingProperties,missingOverride,checkTypes,extraRequire}\\n * tslint:disable\\n \";\n  }\n  /**\n   * Returns a transformer that does two things for generated files (ngfactory etc):\n   * - adds a fileoverview JSDoc comment containing Closure Compiler specific \"suppress\"ions in JSDoc.\n   *   The new comment will contain any fileoverview comment text from the original source file this\n   *   file was generated from.\n   * - updates generated files that are not in the given map of generatedFiles to have an empty\n   *   list of statements as their body.\n   */\n\n\n  function getAngularEmitterTransformFactory(generatedFiles, program, annotateForClosureCompiler) {\n    return function () {\n      var emitter = new node_emitter_1.TypeScriptNodeEmitter(annotateForClosureCompiler);\n      return function (sourceFile) {\n        var g = generatedFiles.get(sourceFile.fileName);\n        var orig = g && program.getSourceFile(g.srcFileUrl);\n        var originalComment = '';\n        if (orig) originalComment = getFileoverviewComment(orig);\n        var preamble = getPreamble(originalComment);\n\n        if (g && g.stmts) {\n          var _a = tslib_1.__read(emitter.updateSourceFile(sourceFile, g.stmts, preamble), 1),\n              newSourceFile = _a[0];\n\n          return newSourceFile;\n        } else if (util_1.GENERATED_FILES.test(sourceFile.fileName)) {\n          // The file should be empty, but emitter.updateSourceFile would still add imports\n          // and various minutiae.\n          // Clear out the source file entirely, only including the preamble comment, so that\n          // ngc produces an empty .js file.\n          var commentStmt = ts.createNotEmittedStatement(sourceFile);\n          ts.addSyntheticLeadingComment(commentStmt, ts.SyntaxKind.MultiLineCommentTrivia, preamble,\n          /* hasTrailingNewline */\n          true);\n          return ts.updateSourceFileNode(sourceFile, [commentStmt]);\n        }\n\n        return sourceFile;\n      };\n    };\n  }\n\n  exports.getAngularEmitterTransformFactory = getAngularEmitterTransformFactory;\n  /**\n   * Parses and returns the comment text (without start and end markers) of a \\@fileoverview comment\n   * in the given source file. Returns the empty string if no such comment can be found.\n   */\n\n  function getFileoverviewComment(sourceFile) {\n    var trivia = sourceFile.getFullText().substring(0, sourceFile.getStart());\n    var leadingComments = ts.getLeadingCommentRanges(trivia, 0);\n    if (!leadingComments || leadingComments.length === 0) return '';\n    var comment = leadingComments[0];\n    if (comment.kind !== ts.SyntaxKind.MultiLineCommentTrivia) return ''; // Only comments separated with a \\n\\n from the file contents are considered file-level comments\n    // in TypeScript.\n\n    if (sourceFile.getFullText().substring(comment.end, comment.end + 2) !== '\\n\\n') return '';\n    var commentText = sourceFile.getFullText().substring(comment.pos, comment.end); // Closure Compiler ignores @suppress and similar if the comment contains @license.\n\n    if (commentText.indexOf('@license') !== -1) return ''; // Also remove any leading `* ` from the first line in case it was a JSDOC comment\n\n    return util_1.stripComment(commentText).replace(/^\\*\\s+/, '');\n  }\n});","map":{"version":3,"sources":["../../../../../../../packages/compiler-cli/src/transformers/node_emitter_transform.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {GeneratedFile} from '@angular/compiler';\nimport * as ts from 'typescript';\n\nimport {TypeScriptNodeEmitter} from './node_emitter';\nimport {GENERATED_FILES, stripComment} from './util';\n\nfunction getPreamble(original: string) {\n  return `*\n * @fileoverview This file was generated by the Angular template compiler. Do not edit.\n * ${original}\n * @suppress {suspiciousCode,uselessCode,missingProperties,missingOverride,checkTypes,extraRequire}\n * tslint:disable\n `;\n}\n\n/**\n * Returns a transformer that does two things for generated files (ngfactory etc):\n * - adds a fileoverview JSDoc comment containing Closure Compiler specific \"suppress\"ions in JSDoc.\n *   The new comment will contain any fileoverview comment text from the original source file this\n *   file was generated from.\n * - updates generated files that are not in the given map of generatedFiles to have an empty\n *   list of statements as their body.\n */\nexport function getAngularEmitterTransformFactory(\n    generatedFiles: Map<string, GeneratedFile>, program: ts.Program,\n    annotateForClosureCompiler: boolean): () => (sourceFile: ts.SourceFile) => ts.SourceFile {\n  return function() {\n    const emitter = new TypeScriptNodeEmitter(annotateForClosureCompiler);\n    return function(sourceFile: ts.SourceFile): ts.SourceFile {\n      const g = generatedFiles.get(sourceFile.fileName);\n      const orig = g && program.getSourceFile(g.srcFileUrl);\n      let originalComment = '';\n      if (orig) originalComment = getFileoverviewComment(orig);\n      const preamble = getPreamble(originalComment);\n      if (g && g.stmts) {\n        const [newSourceFile] = emitter.updateSourceFile(sourceFile, g.stmts, preamble);\n        return newSourceFile;\n      } else if (GENERATED_FILES.test(sourceFile.fileName)) {\n        // The file should be empty, but emitter.updateSourceFile would still add imports\n        // and various minutiae.\n        // Clear out the source file entirely, only including the preamble comment, so that\n        // ngc produces an empty .js file.\n        const commentStmt = ts.createNotEmittedStatement(sourceFile);\n        ts.addSyntheticLeadingComment(\n            commentStmt, ts.SyntaxKind.MultiLineCommentTrivia, preamble,\n            /* hasTrailingNewline */ true);\n        return ts.updateSourceFileNode(sourceFile, [commentStmt]);\n      }\n      return sourceFile;\n    };\n  };\n}\n\n/**\n * Parses and returns the comment text (without start and end markers) of a \\@fileoverview comment\n * in the given source file. Returns the empty string if no such comment can be found.\n */\nfunction getFileoverviewComment(sourceFile: ts.SourceFile): string {\n  const trivia = sourceFile.getFullText().substring(0, sourceFile.getStart());\n  const leadingComments = ts.getLeadingCommentRanges(trivia, 0);\n  if (!leadingComments || leadingComments.length === 0) return '';\n  const comment = leadingComments[0];\n  if (comment.kind !== ts.SyntaxKind.MultiLineCommentTrivia) return '';\n  // Only comments separated with a \\n\\n from the file contents are considered file-level comments\n  // in TypeScript.\n  if (sourceFile.getFullText().substring(comment.end, comment.end + 2) !== '\\n\\n') return '';\n  const commentText = sourceFile.getFullText().substring(comment.pos, comment.end);\n  // Closure Compiler ignores @suppress and similar if the comment contains @license.\n  if (commentText.indexOf('@license') !== -1) return '';\n  // Also remove any leading `* ` from the first line in case it was a JSDOC comment\n  return stripComment(commentText).replace(/^\\*\\s+/, '');\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}