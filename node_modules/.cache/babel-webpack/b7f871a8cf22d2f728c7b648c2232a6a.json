{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nvar _createForOfIteratorHelper = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _classCallCheck = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/createClass\");\n\nvar asyncLib = require(\"neo-async\");\n\nvar MultiWatching = /*#__PURE__*/function () {\n  function MultiWatching(watchings, compiler) {\n    _classCallCheck(this, MultiWatching);\n\n    this.watchings = watchings;\n    this.compiler = compiler;\n  }\n\n  _createClass(MultiWatching, [{\n    key: \"invalidate\",\n    value: function invalidate() {\n      var _iterator = _createForOfIteratorHelper(this.watchings),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var watching = _step.value;\n          watching.invalidate();\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n  }, {\n    key: \"suspend\",\n    value: function suspend() {\n      var _iterator2 = _createForOfIteratorHelper(this.watchings),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var watching = _step2.value;\n          watching.suspend();\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n    }\n  }, {\n    key: \"resume\",\n    value: function resume() {\n      var _iterator3 = _createForOfIteratorHelper(this.watchings),\n          _step3;\n\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var watching = _step3.value;\n          watching.resume();\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n    }\n  }, {\n    key: \"close\",\n    value: function close(callback) {\n      var _this = this;\n\n      asyncLib.forEach(this.watchings, function (watching, finishedCallback) {\n        watching.close(finishedCallback);\n      }, function (err) {\n        _this.compiler.hooks.watchClose.call();\n\n        if (typeof callback === \"function\") {\n          _this.compiler.running = false;\n          callback(err);\n        }\n      });\n    }\n  }]);\n\n  return MultiWatching;\n}();\n\nmodule.exports = MultiWatching;","map":{"version":3,"sources":["/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/webpack/lib/MultiWatching.js"],"names":["asyncLib","require","MultiWatching","watchings","compiler","watching","invalidate","suspend","resume","callback","forEach","finishedCallback","close","err","hooks","watchClose","call","running","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;;;;;;;AAEA,IAAMA,QAAQ,GAAGC,OAAO,CAAC,WAAD,CAAxB;;IAEMC,a;AACL,yBAAYC,SAAZ,EAAuBC,QAAvB,EAAiC;AAAA;;AAChC,SAAKD,SAAL,GAAiBA,SAAjB;AACA,SAAKC,QAAL,GAAgBA,QAAhB;AACA;;;;WAED,sBAAa;AAAA,iDACW,KAAKD,SADhB;AAAA;;AAAA;AACZ,4DAAuC;AAAA,cAA5BE,QAA4B;AACtCA,UAAAA,QAAQ,CAACC,UAAT;AACA;AAHW;AAAA;AAAA;AAAA;AAAA;AAIZ;;;WAED,mBAAU;AAAA,kDACc,KAAKH,SADnB;AAAA;;AAAA;AACT,+DAAuC;AAAA,cAA5BE,QAA4B;AACtCA,UAAAA,QAAQ,CAACE,OAAT;AACA;AAHQ;AAAA;AAAA;AAAA;AAAA;AAIT;;;WAED,kBAAS;AAAA,kDACe,KAAKJ,SADpB;AAAA;;AAAA;AACR,+DAAuC;AAAA,cAA5BE,QAA4B;AACtCA,UAAAA,QAAQ,CAACG,MAAT;AACA;AAHO;AAAA;AAAA;AAAA;AAAA;AAIR;;;WAED,eAAMC,QAAN,EAAgB;AAAA;;AACfT,MAAAA,QAAQ,CAACU,OAAT,CACC,KAAKP,SADN,EAEC,UAACE,QAAD,EAAWM,gBAAX,EAAgC;AAC/BN,QAAAA,QAAQ,CAACO,KAAT,CAAeD,gBAAf;AACA,OAJF,EAKC,UAAAE,GAAG,EAAI;AACN,QAAA,KAAI,CAACT,QAAL,CAAcU,KAAd,CAAoBC,UAApB,CAA+BC,IAA/B;;AACA,YAAI,OAAOP,QAAP,KAAoB,UAAxB,EAAoC;AACnC,UAAA,KAAI,CAACL,QAAL,CAAca,OAAd,GAAwB,KAAxB;AACAR,UAAAA,QAAQ,CAACI,GAAD,CAAR;AACA;AACD,OAXF;AAaA;;;;;;AAGFK,MAAM,CAACC,OAAP,GAAiBjB,aAAjB","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst asyncLib = require(\"neo-async\");\n\nclass MultiWatching {\n\tconstructor(watchings, compiler) {\n\t\tthis.watchings = watchings;\n\t\tthis.compiler = compiler;\n\t}\n\n\tinvalidate() {\n\t\tfor (const watching of this.watchings) {\n\t\t\twatching.invalidate();\n\t\t}\n\t}\n\n\tsuspend() {\n\t\tfor (const watching of this.watchings) {\n\t\t\twatching.suspend();\n\t\t}\n\t}\n\n\tresume() {\n\t\tfor (const watching of this.watchings) {\n\t\t\twatching.resume();\n\t\t}\n\t}\n\n\tclose(callback) {\n\t\tasyncLib.forEach(\n\t\t\tthis.watchings,\n\t\t\t(watching, finishedCallback) => {\n\t\t\t\twatching.close(finishedCallback);\n\t\t\t},\n\t\t\terr => {\n\t\t\t\tthis.compiler.hooks.watchClose.call();\n\t\t\t\tif (typeof callback === \"function\") {\n\t\t\t\t\tthis.compiler.running = false;\n\t\t\t\t\tcallback(err);\n\t\t\t\t}\n\t\t\t}\n\t\t);\n\t}\n}\n\nmodule.exports = MultiWatching;\n"]},"metadata":{},"sourceType":"script"}