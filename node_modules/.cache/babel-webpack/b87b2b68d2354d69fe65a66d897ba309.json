{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nvar _classCallCheck = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/createClass\");\n\nvar SingleEntryPlugin = require(\"./SingleEntryPlugin\");\n\nvar MultiEntryPlugin = require(\"./MultiEntryPlugin\");\n\nvar DynamicEntryPlugin = require(\"./DynamicEntryPlugin\");\n/** @typedef {import(\"../declarations/WebpackOptions\").EntryItem} EntryItem */\n\n/** @typedef {import(\"./Compiler\")} Compiler */\n\n/**\n * @param {string} context context path\n * @param {EntryItem} item entry array or single path\n * @param {string} name entry key name\n * @returns {SingleEntryPlugin | MultiEntryPlugin} returns either a single or multi entry plugin\n */\n\n\nvar itemToPlugin = function itemToPlugin(context, item, name) {\n  if (Array.isArray(item)) {\n    return new MultiEntryPlugin(context, item, name);\n  }\n\n  return new SingleEntryPlugin(context, item, name);\n};\n\nmodule.exports = /*#__PURE__*/function () {\n  function EntryOptionPlugin() {\n    _classCallCheck(this, EntryOptionPlugin);\n  }\n\n  _createClass(EntryOptionPlugin, [{\n    key: \"apply\",\n    value:\n    /**\n     * @param {Compiler} compiler the compiler instance one is tapping into\n     * @returns {void}\n     */\n    function apply(compiler) {\n      compiler.hooks.entryOption.tap(\"EntryOptionPlugin\", function (context, entry) {\n        if (typeof entry === \"string\" || Array.isArray(entry)) {\n          itemToPlugin(context, entry, \"main\").apply(compiler);\n        } else if (typeof entry === \"object\") {\n          for (var _i = 0, _Object$keys = Object.keys(entry); _i < _Object$keys.length; _i++) {\n            var name = _Object$keys[_i];\n            itemToPlugin(context, entry[name], name).apply(compiler);\n          }\n        } else if (typeof entry === \"function\") {\n          new DynamicEntryPlugin(context, entry).apply(compiler);\n        }\n\n        return true;\n      });\n    }\n  }]);\n\n  return EntryOptionPlugin;\n}();","map":{"version":3,"sources":["/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/webpack/lib/EntryOptionPlugin.js"],"names":["SingleEntryPlugin","require","MultiEntryPlugin","DynamicEntryPlugin","itemToPlugin","context","item","name","Array","isArray","module","exports","compiler","hooks","entryOption","tap","entry","apply","Object","keys"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;;;;;AAEA,IAAMA,iBAAiB,GAAGC,OAAO,CAAC,qBAAD,CAAjC;;AACA,IAAMC,gBAAgB,GAAGD,OAAO,CAAC,oBAAD,CAAhC;;AACA,IAAME,kBAAkB,GAAGF,OAAO,CAAC,sBAAD,CAAlC;AAEA;;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;AACA,IAAMG,YAAY,GAAG,SAAfA,YAAe,CAACC,OAAD,EAAUC,IAAV,EAAgBC,IAAhB,EAAyB;AAC7C,MAAIC,KAAK,CAACC,OAAN,CAAcH,IAAd,CAAJ,EAAyB;AACxB,WAAO,IAAIJ,gBAAJ,CAAqBG,OAArB,EAA8BC,IAA9B,EAAoCC,IAApC,CAAP;AACA;;AACD,SAAO,IAAIP,iBAAJ,CAAsBK,OAAtB,EAA+BC,IAA/B,EAAqCC,IAArC,CAAP;AACA,CALD;;AAOAG,MAAM,CAACC,OAAP;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AACC;AACD;AACA;AACA;AACC,mBAAMC,QAAN,EAAgB;AACfA,MAAAA,QAAQ,CAACC,KAAT,CAAeC,WAAf,CAA2BC,GAA3B,CAA+B,mBAA/B,EAAoD,UAACV,OAAD,EAAUW,KAAV,EAAoB;AACvE,YAAI,OAAOA,KAAP,KAAiB,QAAjB,IAA6BR,KAAK,CAACC,OAAN,CAAcO,KAAd,CAAjC,EAAuD;AACtDZ,UAAAA,YAAY,CAACC,OAAD,EAAUW,KAAV,EAAiB,MAAjB,CAAZ,CAAqCC,KAArC,CAA2CL,QAA3C;AACA,SAFD,MAEO,IAAI,OAAOI,KAAP,KAAiB,QAArB,EAA+B;AACrC,0CAAmBE,MAAM,CAACC,IAAP,CAAYH,KAAZ,CAAnB,kCAAuC;AAAlC,gBAAMT,IAAI,mBAAV;AACJH,YAAAA,YAAY,CAACC,OAAD,EAAUW,KAAK,CAACT,IAAD,CAAf,EAAuBA,IAAvB,CAAZ,CAAyCU,KAAzC,CAA+CL,QAA/C;AACA;AACD,SAJM,MAIA,IAAI,OAAOI,KAAP,KAAiB,UAArB,EAAiC;AACvC,cAAIb,kBAAJ,CAAuBE,OAAvB,EAAgCW,KAAhC,EAAuCC,KAAvC,CAA6CL,QAA7C;AACA;;AACD,eAAO,IAAP;AACA,OAXD;AAYA;AAlBF;;AAAA;AAAA","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst SingleEntryPlugin = require(\"./SingleEntryPlugin\");\nconst MultiEntryPlugin = require(\"./MultiEntryPlugin\");\nconst DynamicEntryPlugin = require(\"./DynamicEntryPlugin\");\n\n/** @typedef {import(\"../declarations/WebpackOptions\").EntryItem} EntryItem */\n/** @typedef {import(\"./Compiler\")} Compiler */\n\n/**\n * @param {string} context context path\n * @param {EntryItem} item entry array or single path\n * @param {string} name entry key name\n * @returns {SingleEntryPlugin | MultiEntryPlugin} returns either a single or multi entry plugin\n */\nconst itemToPlugin = (context, item, name) => {\n\tif (Array.isArray(item)) {\n\t\treturn new MultiEntryPlugin(context, item, name);\n\t}\n\treturn new SingleEntryPlugin(context, item, name);\n};\n\nmodule.exports = class EntryOptionPlugin {\n\t/**\n\t * @param {Compiler} compiler the compiler instance one is tapping into\n\t * @returns {void}\n\t */\n\tapply(compiler) {\n\t\tcompiler.hooks.entryOption.tap(\"EntryOptionPlugin\", (context, entry) => {\n\t\t\tif (typeof entry === \"string\" || Array.isArray(entry)) {\n\t\t\t\titemToPlugin(context, entry, \"main\").apply(compiler);\n\t\t\t} else if (typeof entry === \"object\") {\n\t\t\t\tfor (const name of Object.keys(entry)) {\n\t\t\t\t\titemToPlugin(context, entry[name], name).apply(compiler);\n\t\t\t\t}\n\t\t\t} else if (typeof entry === \"function\") {\n\t\t\t\tnew DynamicEntryPlugin(context, entry).apply(compiler);\n\t\t\t}\n\t\t\treturn true;\n\t\t});\n\t}\n};\n"]},"metadata":{},"sourceType":"script"}