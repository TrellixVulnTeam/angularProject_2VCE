{"ast":null,"code":"(function (factory) {\n  if (typeof module === \"object\" && typeof module.exports === \"object\") {\n    var v = factory(require, exports);\n    if (v !== undefined) module.exports = v;\n  } else if (typeof define === \"function\" && define.amd) {\n    define(\"@angular/compiler/src/summary_resolver\", [\"require\", \"exports\"], factory);\n  }\n})(function (require, exports) {\n  \"use strict\";\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.JitSummaryResolver = exports.SummaryResolver = void 0;\n\n  var SummaryResolver =\n  /** @class */\n  function () {\n    function SummaryResolver() {}\n\n    return SummaryResolver;\n  }();\n\n  exports.SummaryResolver = SummaryResolver;\n\n  var JitSummaryResolver =\n  /** @class */\n  function () {\n    function JitSummaryResolver() {\n      this._summaries = new Map();\n    }\n\n    JitSummaryResolver.prototype.isLibraryFile = function () {\n      return false;\n    };\n\n    JitSummaryResolver.prototype.toSummaryFileName = function (fileName) {\n      return fileName;\n    };\n\n    JitSummaryResolver.prototype.fromSummaryFileName = function (fileName) {\n      return fileName;\n    };\n\n    JitSummaryResolver.prototype.resolveSummary = function (reference) {\n      return this._summaries.get(reference) || null;\n    };\n\n    JitSummaryResolver.prototype.getSymbolsOf = function () {\n      return [];\n    };\n\n    JitSummaryResolver.prototype.getImportAs = function (reference) {\n      return reference;\n    };\n\n    JitSummaryResolver.prototype.getKnownModuleName = function (fileName) {\n      return null;\n    };\n\n    JitSummaryResolver.prototype.addSummary = function (summary) {\n      this._summaries.set(summary.symbol, summary);\n    };\n\n    return JitSummaryResolver;\n  }();\n\n  exports.JitSummaryResolver = JitSummaryResolver;\n});","map":{"version":3,"sources":["../../../../../../packages/compiler/src/summary_resolver.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;AAgBA,MAAA,eAAA;AAAA;AAAA,cAAA;AAAA,aAAA,eAAA,GAAA,CASC;;AAAD,WAAA,eAAA;AAAC,GATD,EAAA;;AAAsB,EAAA,OAAA,CAAA,eAAA,GAAA,eAAA;;AAWtB,MAAA,kBAAA;AAAA;AAAA,cAAA;AAAA,aAAA,kBAAA,GAAA;AACU,WAAA,UAAA,GAAa,IAAI,GAAJ,EAAb;AA0BT;;AAxBC,IAAA,kBAAA,CAAA,SAAA,CAAA,aAAA,GAAA,YAAA;AACE,aAAO,KAAP;AACD,KAFD;;AAGA,IAAA,kBAAA,CAAA,SAAA,CAAA,iBAAA,GAAA,UAAkB,QAAlB,EAAkC;AAChC,aAAO,QAAP;AACD,KAFD;;AAGA,IAAA,kBAAA,CAAA,SAAA,CAAA,mBAAA,GAAA,UAAoB,QAApB,EAAoC;AAClC,aAAO,QAAP;AACD,KAFD;;AAGA,IAAA,kBAAA,CAAA,SAAA,CAAA,cAAA,GAAA,UAAe,SAAf,EAA8B;AAC5B,aAAO,KAAK,UAAL,CAAgB,GAAhB,CAAoB,SAApB,KAAkC,IAAzC;AACD,KAFD;;AAGA,IAAA,kBAAA,CAAA,SAAA,CAAA,YAAA,GAAA,YAAA;AACE,aAAO,EAAP;AACD,KAFD;;AAGA,IAAA,kBAAA,CAAA,SAAA,CAAA,WAAA,GAAA,UAAY,SAAZ,EAA2B;AACzB,aAAO,SAAP;AACD,KAFD;;AAGA,IAAA,kBAAA,CAAA,SAAA,CAAA,kBAAA,GAAA,UAAmB,QAAnB,EAAmC;AACjC,aAAO,IAAP;AACD,KAFD;;AAGA,IAAA,kBAAA,CAAA,SAAA,CAAA,UAAA,GAAA,UAAW,OAAX,EAAiC;AAC/B,WAAK,UAAL,CAAgB,GAAhB,CAAoB,OAAO,CAAC,MAA5B,EAAoC,OAApC;AACD,KAFD;;AAGF,WAAA,kBAAA;AAAC,GA3BD,EAAA;;AAAa,EAAA,OAAA,CAAA,kBAAA,GAAA,kBAAA","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {CompileTypeSummary} from './compile_metadata';\nimport {Type} from './core';\n\nexport interface Summary<T> {\n  symbol: T;\n  metadata: any;\n  type?: CompileTypeSummary;\n}\n\nexport abstract class SummaryResolver<T> {\n  abstract isLibraryFile(fileName: string): boolean;\n  abstract toSummaryFileName(fileName: string, referringSrcFileName: string): string;\n  abstract fromSummaryFileName(fileName: string, referringLibFileName: string): string;\n  abstract resolveSummary(reference: T): Summary<T>|null;\n  abstract getSymbolsOf(filePath: string): T[]|null;\n  abstract getImportAs(reference: T): T;\n  abstract getKnownModuleName(fileName: string): string|null;\n  abstract addSummary(summary: Summary<T>): void;\n}\n\nexport class JitSummaryResolver implements SummaryResolver<Type> {\n  private _summaries = new Map<Type, Summary<Type>>();\n\n  isLibraryFile(): boolean {\n    return false;\n  }\n  toSummaryFileName(fileName: string): string {\n    return fileName;\n  }\n  fromSummaryFileName(fileName: string): string {\n    return fileName;\n  }\n  resolveSummary(reference: Type): Summary<Type>|null {\n    return this._summaries.get(reference) || null;\n  }\n  getSymbolsOf(): Type[] {\n    return [];\n  }\n  getImportAs(reference: Type): Type {\n    return reference;\n  }\n  getKnownModuleName(fileName: string) {\n    return null;\n  }\n  addSummary(summary: Summary<Type>) {\n    this._summaries.set(summary.symbol, summary);\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}