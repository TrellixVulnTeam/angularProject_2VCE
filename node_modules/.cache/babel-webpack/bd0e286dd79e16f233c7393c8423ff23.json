{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Sean Larkin @thelarkinn\n*/\n\"use strict\";\n\nvar _slicedToArray = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nvar _createForOfIteratorHelper = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _classCallCheck = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/createClass\");\n\nvar EntrypointsOverSizeLimitWarning = require(\"./EntrypointsOverSizeLimitWarning\");\n\nvar AssetsOverSizeLimitWarning = require(\"./AssetsOverSizeLimitWarning\");\n\nvar NoAsyncChunksWarning = require(\"./NoAsyncChunksWarning\");\n/** @typedef {import(\"../Compiler\")} Compiler */\n\n/** @typedef {import(\"../Entrypoint\")} Entrypoint */\n\n\nmodule.exports = /*#__PURE__*/function () {\n  function SizeLimitsPlugin(options) {\n    _classCallCheck(this, SizeLimitsPlugin);\n\n    this.hints = options.hints;\n    this.maxAssetSize = options.maxAssetSize;\n    this.maxEntrypointSize = options.maxEntrypointSize;\n    this.assetFilter = options.assetFilter;\n  }\n  /**\n   * @param {Compiler} compiler webpack compiler\n   * @returns {void}\n   */\n\n\n  _createClass(SizeLimitsPlugin, [{\n    key: \"apply\",\n    value: function apply(compiler) {\n      var entrypointSizeLimit = this.maxEntrypointSize;\n      var assetSizeLimit = this.maxAssetSize;\n      var hints = this.hints;\n\n      var assetFilter = this.assetFilter || function (name, source, info) {\n        return !info.development;\n      };\n\n      compiler.hooks.afterEmit.tap(\"SizeLimitsPlugin\", function (compilation) {\n        var warnings = [];\n        /**\n         * @param {Entrypoint} entrypoint an entrypoint\n         * @returns {number} the size of the entrypoint\n         */\n\n        var getEntrypointSize = function getEntrypointSize(entrypoint) {\n          return entrypoint.getFiles().reduce(function (currentSize, file) {\n            var asset = compilation.getAsset(file);\n\n            if (asset && assetFilter(asset.name, asset.source, asset.info) && asset.source) {\n              return currentSize + (asset.info.size || asset.source.size());\n            }\n\n            return currentSize;\n          }, 0);\n        };\n\n        var assetsOverSizeLimit = [];\n\n        var _iterator = _createForOfIteratorHelper(compilation.getAssets()),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var _step$value = _step.value,\n                name = _step$value.name,\n                source = _step$value.source,\n                info = _step$value.info;\n\n            if (!assetFilter(name, source, info) || !source) {\n              continue;\n            }\n\n            var size = info.size || source.size();\n\n            if (size > assetSizeLimit) {\n              assetsOverSizeLimit.push({\n                name: name,\n                size: size\n              });\n              /** @type {any} */\n\n              source.isOverSizeLimit = true;\n            }\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n\n        var fileFilter = function fileFilter(name) {\n          var asset = compilation.getAsset(name);\n          return asset && assetFilter(asset.name, asset.source, asset.info);\n        };\n\n        var entrypointsOverLimit = [];\n\n        var _iterator2 = _createForOfIteratorHelper(compilation.entrypoints),\n            _step2;\n\n        try {\n          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n            var _step2$value = _slicedToArray(_step2.value, 2),\n                _name = _step2$value[0],\n                entry = _step2$value[1];\n\n            var _size = getEntrypointSize(entry);\n\n            if (_size > entrypointSizeLimit) {\n              entrypointsOverLimit.push({\n                name: _name,\n                size: _size,\n                files: entry.getFiles().filter(fileFilter)\n              });\n              /** @type {any} */\n\n              entry.isOverSizeLimit = true;\n            }\n          }\n        } catch (err) {\n          _iterator2.e(err);\n        } finally {\n          _iterator2.f();\n        }\n\n        if (hints) {\n          // 1. Individual Chunk: Size < 250kb\n          // 2. Collective Initial Chunks [entrypoint] (Each Set?): Size < 250kb\n          // 3. No Async Chunks\n          // if !1, then 2, if !2 return\n          if (assetsOverSizeLimit.length > 0) {\n            warnings.push(new AssetsOverSizeLimitWarning(assetsOverSizeLimit, assetSizeLimit));\n          }\n\n          if (entrypointsOverLimit.length > 0) {\n            warnings.push(new EntrypointsOverSizeLimitWarning(entrypointsOverLimit, entrypointSizeLimit));\n          }\n\n          if (warnings.length > 0) {\n            var hasAsyncChunks = compilation.chunks.filter(function (chunk) {\n              return !chunk.canBeInitial();\n            }).length > 0;\n\n            if (!hasAsyncChunks) {\n              warnings.push(new NoAsyncChunksWarning());\n            }\n\n            if (hints === \"error\") {\n              var _compilation$errors;\n\n              (_compilation$errors = compilation.errors).push.apply(_compilation$errors, warnings);\n            } else {\n              var _compilation$warnings;\n\n              (_compilation$warnings = compilation.warnings).push.apply(_compilation$warnings, warnings);\n            }\n          }\n        }\n      });\n    }\n  }]);\n\n  return SizeLimitsPlugin;\n}();","map":{"version":3,"sources":["/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/webpack/lib/performance/SizeLimitsPlugin.js"],"names":["EntrypointsOverSizeLimitWarning","require","AssetsOverSizeLimitWarning","NoAsyncChunksWarning","module","exports","options","hints","maxAssetSize","maxEntrypointSize","assetFilter","compiler","entrypointSizeLimit","assetSizeLimit","name","source","info","development","hooks","afterEmit","tap","compilation","warnings","getEntrypointSize","entrypoint","getFiles","reduce","currentSize","file","asset","getAsset","size","assetsOverSizeLimit","getAssets","push","isOverSizeLimit","fileFilter","entrypointsOverLimit","entrypoints","entry","files","filter","length","hasAsyncChunks","chunks","chunk","canBeInitial","errors"],"mappings":"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","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Sean Larkin @thelarkinn\n*/\n\"use strict\";\nconst EntrypointsOverSizeLimitWarning = require(\"./EntrypointsOverSizeLimitWarning\");\nconst AssetsOverSizeLimitWarning = require(\"./AssetsOverSizeLimitWarning\");\nconst NoAsyncChunksWarning = require(\"./NoAsyncChunksWarning\");\n\n/** @typedef {import(\"../Compiler\")} Compiler */\n/** @typedef {import(\"../Entrypoint\")} Entrypoint */\n\nmodule.exports = class SizeLimitsPlugin {\n\tconstructor(options) {\n\t\tthis.hints = options.hints;\n\t\tthis.maxAssetSize = options.maxAssetSize;\n\t\tthis.maxEntrypointSize = options.maxEntrypointSize;\n\t\tthis.assetFilter = options.assetFilter;\n\t}\n\n\t/**\n\t * @param {Compiler} compiler webpack compiler\n\t * @returns {void}\n\t */\n\tapply(compiler) {\n\t\tconst entrypointSizeLimit = this.maxEntrypointSize;\n\t\tconst assetSizeLimit = this.maxAssetSize;\n\t\tconst hints = this.hints;\n\t\tconst assetFilter =\n\t\t\tthis.assetFilter || ((name, source, info) => !info.development);\n\n\t\tcompiler.hooks.afterEmit.tap(\"SizeLimitsPlugin\", compilation => {\n\t\t\tconst warnings = [];\n\n\t\t\t/**\n\t\t\t * @param {Entrypoint} entrypoint an entrypoint\n\t\t\t * @returns {number} the size of the entrypoint\n\t\t\t */\n\t\t\tconst getEntrypointSize = entrypoint =>\n\t\t\t\tentrypoint.getFiles().reduce((currentSize, file) => {\n\t\t\t\t\tconst asset = compilation.getAsset(file);\n\t\t\t\t\tif (\n\t\t\t\t\t\tasset &&\n\t\t\t\t\t\tassetFilter(asset.name, asset.source, asset.info) &&\n\t\t\t\t\t\tasset.source\n\t\t\t\t\t) {\n\t\t\t\t\t\treturn currentSize + (asset.info.size || asset.source.size());\n\t\t\t\t\t}\n\n\t\t\t\t\treturn currentSize;\n\t\t\t\t}, 0);\n\n\t\t\tconst assetsOverSizeLimit = [];\n\t\t\tfor (const { name, source, info } of compilation.getAssets()) {\n\t\t\t\tif (!assetFilter(name, source, info) || !source) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tconst size = info.size || source.size();\n\t\t\t\tif (size > assetSizeLimit) {\n\t\t\t\t\tassetsOverSizeLimit.push({\n\t\t\t\t\t\tname,\n\t\t\t\t\t\tsize\n\t\t\t\t\t});\n\t\t\t\t\t/** @type {any} */ (source).isOverSizeLimit = true;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst fileFilter = name => {\n\t\t\t\tconst asset = compilation.getAsset(name);\n\t\t\t\treturn asset && assetFilter(asset.name, asset.source, asset.info);\n\t\t\t};\n\n\t\t\tconst entrypointsOverLimit = [];\n\t\t\tfor (const [name, entry] of compilation.entrypoints) {\n\t\t\t\tconst size = getEntrypointSize(entry);\n\n\t\t\t\tif (size > entrypointSizeLimit) {\n\t\t\t\t\tentrypointsOverLimit.push({\n\t\t\t\t\t\tname: name,\n\t\t\t\t\t\tsize: size,\n\t\t\t\t\t\tfiles: entry.getFiles().filter(fileFilter)\n\t\t\t\t\t});\n\t\t\t\t\t/** @type {any} */ (entry).isOverSizeLimit = true;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (hints) {\n\t\t\t\t// 1. Individual Chunk: Size < 250kb\n\t\t\t\t// 2. Collective Initial Chunks [entrypoint] (Each Set?): Size < 250kb\n\t\t\t\t// 3. No Async Chunks\n\t\t\t\t// if !1, then 2, if !2 return\n\t\t\t\tif (assetsOverSizeLimit.length > 0) {\n\t\t\t\t\twarnings.push(\n\t\t\t\t\t\tnew AssetsOverSizeLimitWarning(assetsOverSizeLimit, assetSizeLimit)\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\tif (entrypointsOverLimit.length > 0) {\n\t\t\t\t\twarnings.push(\n\t\t\t\t\t\tnew EntrypointsOverSizeLimitWarning(\n\t\t\t\t\t\t\tentrypointsOverLimit,\n\t\t\t\t\t\t\tentrypointSizeLimit\n\t\t\t\t\t\t)\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\tif (warnings.length > 0) {\n\t\t\t\t\tconst hasAsyncChunks =\n\t\t\t\t\t\tcompilation.chunks.filter(chunk => !chunk.canBeInitial()).length >\n\t\t\t\t\t\t0;\n\n\t\t\t\t\tif (!hasAsyncChunks) {\n\t\t\t\t\t\twarnings.push(new NoAsyncChunksWarning());\n\t\t\t\t\t}\n\n\t\t\t\t\tif (hints === \"error\") {\n\t\t\t\t\t\tcompilation.errors.push(...warnings);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcompilation.warnings.push(...warnings);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n};\n"]},"metadata":{},"sourceType":"script"}