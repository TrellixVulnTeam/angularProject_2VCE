{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nvar _createForOfIteratorHelper = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _classCallCheck = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar _require = require(\"tapable\"),\n    Tapable = _require.Tapable,\n    SyncHook = _require.SyncHook,\n    MultiHook = _require.MultiHook;\n\nvar asyncLib = require(\"neo-async\");\n\nvar MultiWatching = require(\"./MultiWatching\");\n\nvar MultiStats = require(\"./MultiStats\");\n\nvar ConcurrentCompilationError = require(\"./ConcurrentCompilationError\");\n\nmodule.exports = /*#__PURE__*/function (_Tapable) {\n  _inherits(MultiCompiler, _Tapable);\n\n  var _super = _createSuper(MultiCompiler);\n\n  function MultiCompiler(compilers) {\n    var _this;\n\n    _classCallCheck(this, MultiCompiler);\n\n    _this = _super.call(this);\n    _this.hooks = {\n      done: new SyncHook([\"stats\"]),\n      invalid: new MultiHook(compilers.map(function (c) {\n        return c.hooks.invalid;\n      })),\n      run: new MultiHook(compilers.map(function (c) {\n        return c.hooks.run;\n      })),\n      watchClose: new SyncHook([]),\n      watchRun: new MultiHook(compilers.map(function (c) {\n        return c.hooks.watchRun;\n      })),\n      infrastructureLog: new MultiHook(compilers.map(function (c) {\n        return c.hooks.infrastructureLog;\n      }))\n    };\n\n    if (!Array.isArray(compilers)) {\n      compilers = Object.keys(compilers).map(function (name) {\n        compilers[name].name = name;\n        return compilers[name];\n      });\n    }\n\n    _this.compilers = compilers;\n    var doneCompilers = 0;\n    var compilerStats = [];\n    var index = 0;\n\n    var _iterator = _createForOfIteratorHelper(_this.compilers),\n        _step;\n\n    try {\n      var _loop = function _loop() {\n        var compiler = _step.value;\n        var compilerDone = false;\n        var compilerIndex = index++; // eslint-disable-next-line no-loop-func\n\n        compiler.hooks.done.tap(\"MultiCompiler\", function (stats) {\n          if (!compilerDone) {\n            compilerDone = true;\n            doneCompilers++;\n          }\n\n          compilerStats[compilerIndex] = stats;\n\n          if (doneCompilers === _this.compilers.length) {\n            _this.hooks.done.call(new MultiStats(compilerStats));\n          }\n        }); // eslint-disable-next-line no-loop-func\n\n        compiler.hooks.invalid.tap(\"MultiCompiler\", function () {\n          if (compilerDone) {\n            compilerDone = false;\n            doneCompilers--;\n          }\n        });\n      };\n\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        _loop();\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n\n    _this.running = false;\n    return _this;\n  }\n\n  _createClass(MultiCompiler, [{\n    key: \"outputPath\",\n    get: function get() {\n      var commonPath = this.compilers[0].outputPath;\n\n      var _iterator2 = _createForOfIteratorHelper(this.compilers),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var compiler = _step2.value;\n\n          while (compiler.outputPath.indexOf(commonPath) !== 0 && /[/\\\\]/.test(commonPath)) {\n            commonPath = commonPath.replace(/[/\\\\][^/\\\\]*$/, \"\");\n          }\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n\n      if (!commonPath && this.compilers[0].outputPath[0] === \"/\") return \"/\";\n      return commonPath;\n    }\n  }, {\n    key: \"inputFileSystem\",\n    get: function get() {\n      throw new Error(\"Cannot read inputFileSystem of a MultiCompiler\");\n    },\n    set: function set(value) {\n      var _iterator3 = _createForOfIteratorHelper(this.compilers),\n          _step3;\n\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var compiler = _step3.value;\n          compiler.inputFileSystem = value;\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n    }\n  }, {\n    key: \"outputFileSystem\",\n    get: function get() {\n      throw new Error(\"Cannot read outputFileSystem of a MultiCompiler\");\n    },\n    set: function set(value) {\n      var _iterator4 = _createForOfIteratorHelper(this.compilers),\n          _step4;\n\n      try {\n        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n          var compiler = _step4.value;\n          compiler.outputFileSystem = value;\n        }\n      } catch (err) {\n        _iterator4.e(err);\n      } finally {\n        _iterator4.f();\n      }\n    }\n  }, {\n    key: \"getInfrastructureLogger\",\n    value: function getInfrastructureLogger(name) {\n      return this.compilers[0].getInfrastructureLogger(name);\n    }\n  }, {\n    key: \"validateDependencies\",\n    value: function validateDependencies(callback) {\n      var _this2 = this;\n\n      var edges = new Set();\n      var missing = [];\n\n      var targetFound = function targetFound(compiler) {\n        var _iterator5 = _createForOfIteratorHelper(edges),\n            _step5;\n\n        try {\n          for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n            var edge = _step5.value;\n\n            if (edge.target === compiler) {\n              return true;\n            }\n          }\n        } catch (err) {\n          _iterator5.e(err);\n        } finally {\n          _iterator5.f();\n        }\n\n        return false;\n      };\n\n      var sortEdges = function sortEdges(e1, e2) {\n        return e1.source.name.localeCompare(e2.source.name) || e1.target.name.localeCompare(e2.target.name);\n      };\n\n      var _iterator6 = _createForOfIteratorHelper(this.compilers),\n          _step6;\n\n      try {\n        for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n          var source = _step6.value;\n\n          if (source.dependencies) {\n            var _iterator8 = _createForOfIteratorHelper(source.dependencies),\n                _step8;\n\n            try {\n              var _loop2 = function _loop2() {\n                var dep = _step8.value;\n\n                var target = _this2.compilers.find(function (c) {\n                  return c.name === dep;\n                });\n\n                if (!target) {\n                  missing.push(dep);\n                } else {\n                  edges.add({\n                    source: source,\n                    target: target\n                  });\n                }\n              };\n\n              for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {\n                _loop2();\n              }\n            } catch (err) {\n              _iterator8.e(err);\n            } finally {\n              _iterator8.f();\n            }\n          }\n        }\n      } catch (err) {\n        _iterator6.e(err);\n      } finally {\n        _iterator6.f();\n      }\n\n      var errors = missing.map(function (m) {\n        return \"Compiler dependency `\".concat(m, \"` not found.\");\n      });\n      var stack = this.compilers.filter(function (c) {\n        return !targetFound(c);\n      });\n\n      while (stack.length > 0) {\n        var current = stack.pop();\n\n        var _iterator7 = _createForOfIteratorHelper(edges),\n            _step7;\n\n        try {\n          for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n            var edge = _step7.value;\n\n            if (edge.source === current) {\n              edges.delete(edge);\n              var target = edge.target;\n\n              if (!targetFound(target)) {\n                stack.push(target);\n              }\n            }\n          }\n        } catch (err) {\n          _iterator7.e(err);\n        } finally {\n          _iterator7.f();\n        }\n      }\n\n      if (edges.size > 0) {\n        var lines = Array.from(edges).sort(sortEdges).map(function (edge) {\n          return \"\".concat(edge.source.name, \" -> \").concat(edge.target.name);\n        });\n        lines.unshift(\"Circular dependency found in compiler dependencies.\");\n        errors.unshift(lines.join(\"\\n\"));\n      }\n\n      if (errors.length > 0) {\n        var message = errors.join(\"\\n\");\n        callback(new Error(message));\n        return false;\n      }\n\n      return true;\n    }\n  }, {\n    key: \"runWithDependencies\",\n    value: function runWithDependencies(compilers, fn, callback) {\n      var fulfilledNames = new Set();\n      var remainingCompilers = compilers;\n\n      var isDependencyFulfilled = function isDependencyFulfilled(d) {\n        return fulfilledNames.has(d);\n      };\n\n      var getReadyCompilers = function getReadyCompilers() {\n        var readyCompilers = [];\n        var list = remainingCompilers;\n        remainingCompilers = [];\n\n        var _iterator9 = _createForOfIteratorHelper(list),\n            _step9;\n\n        try {\n          for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {\n            var c = _step9.value;\n            var ready = !c.dependencies || c.dependencies.every(isDependencyFulfilled);\n\n            if (ready) {\n              readyCompilers.push(c);\n            } else {\n              remainingCompilers.push(c);\n            }\n          }\n        } catch (err) {\n          _iterator9.e(err);\n        } finally {\n          _iterator9.f();\n        }\n\n        return readyCompilers;\n      };\n\n      var runCompilers = function runCompilers(callback) {\n        if (remainingCompilers.length === 0) return callback();\n        asyncLib.map(getReadyCompilers(), function (compiler, callback) {\n          fn(compiler, function (err) {\n            if (err) return callback(err);\n            fulfilledNames.add(compiler.name);\n            runCompilers(callback);\n          });\n        }, callback);\n      };\n\n      runCompilers(callback);\n    }\n  }, {\n    key: \"watch\",\n    value: function watch(watchOptions, handler) {\n      var _this3 = this;\n\n      if (this.running) return handler(new ConcurrentCompilationError());\n      var watchings = [];\n      var allStats = this.compilers.map(function () {\n        return null;\n      });\n      var compilerStatus = this.compilers.map(function () {\n        return false;\n      });\n\n      if (this.validateDependencies(handler)) {\n        this.running = true;\n        this.runWithDependencies(this.compilers, function (compiler, callback) {\n          var compilerIdx = _this3.compilers.indexOf(compiler);\n\n          var firstRun = true;\n          var watching = compiler.watch(Array.isArray(watchOptions) ? watchOptions[compilerIdx] : watchOptions, function (err, stats) {\n            if (err) handler(err);\n\n            if (stats) {\n              allStats[compilerIdx] = stats;\n              compilerStatus[compilerIdx] = \"new\";\n\n              if (compilerStatus.every(Boolean)) {\n                var freshStats = allStats.filter(function (s, idx) {\n                  return compilerStatus[idx] === \"new\";\n                });\n                compilerStatus.fill(true);\n                var multiStats = new MultiStats(freshStats);\n                handler(null, multiStats);\n              }\n            }\n\n            if (firstRun && !err) {\n              firstRun = false;\n              callback();\n            }\n          });\n          watchings.push(watching);\n        }, function () {// ignore\n        });\n      }\n\n      return new MultiWatching(watchings, this);\n    }\n  }, {\n    key: \"run\",\n    value: function run(callback) {\n      var _this4 = this;\n\n      if (this.running) {\n        return callback(new ConcurrentCompilationError());\n      }\n\n      var finalCallback = function finalCallback(err, stats) {\n        _this4.running = false;\n\n        if (callback !== undefined) {\n          return callback(err, stats);\n        }\n      };\n\n      var allStats = this.compilers.map(function () {\n        return null;\n      });\n\n      if (this.validateDependencies(callback)) {\n        this.running = true;\n        this.runWithDependencies(this.compilers, function (compiler, callback) {\n          var compilerIdx = _this4.compilers.indexOf(compiler);\n\n          compiler.run(function (err, stats) {\n            if (err) {\n              return callback(err);\n            }\n\n            allStats[compilerIdx] = stats;\n            callback();\n          });\n        }, function (err) {\n          if (err) {\n            return finalCallback(err);\n          }\n\n          finalCallback(null, new MultiStats(allStats));\n        });\n      }\n    }\n  }, {\n    key: \"purgeInputFileSystem\",\n    value: function purgeInputFileSystem() {\n      var _iterator10 = _createForOfIteratorHelper(this.compilers),\n          _step10;\n\n      try {\n        for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {\n          var compiler = _step10.value;\n\n          if (compiler.inputFileSystem && compiler.inputFileSystem.purge) {\n            compiler.inputFileSystem.purge();\n          }\n        }\n      } catch (err) {\n        _iterator10.e(err);\n      } finally {\n        _iterator10.f();\n      }\n    }\n  }]);\n\n  return MultiCompiler;\n}(Tapable);","map":{"version":3,"sources":["/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/webpack/lib/MultiCompiler.js"],"names":["require","Tapable","SyncHook","MultiHook","asyncLib","MultiWatching","MultiStats","ConcurrentCompilationError","module","exports","compilers","hooks","done","invalid","map","c","run","watchClose","watchRun","infrastructureLog","Array","isArray","Object","keys","name","doneCompilers","compilerStats","index","compiler","compilerDone","compilerIndex","tap","stats","length","call","running","commonPath","outputPath","indexOf","test","replace","Error","value","inputFileSystem","outputFileSystem","getInfrastructureLogger","callback","edges","Set","missing","targetFound","edge","target","sortEdges","e1","e2","source","localeCompare","dependencies","dep","find","push","add","errors","m","stack","filter","current","pop","delete","size","lines","from","sort","unshift","join","message","fn","fulfilledNames","remainingCompilers","isDependencyFulfilled","d","has","getReadyCompilers","readyCompilers","list","ready","every","runCompilers","err","watchOptions","handler","watchings","allStats","compilerStatus","validateDependencies","runWithDependencies","compilerIdx","firstRun","watching","watch","Boolean","freshStats","s","idx","fill","multiStats","finalCallback","undefined","purge"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;;;;;;;;;;;AAEA,eAAyCA,OAAO,CAAC,SAAD,CAAhD;AAAA,IAAQC,OAAR,YAAQA,OAAR;AAAA,IAAiBC,QAAjB,YAAiBA,QAAjB;AAAA,IAA2BC,SAA3B,YAA2BA,SAA3B;;AACA,IAAMC,QAAQ,GAAGJ,OAAO,CAAC,WAAD,CAAxB;;AACA,IAAMK,aAAa,GAAGL,OAAO,CAAC,iBAAD,CAA7B;;AACA,IAAMM,UAAU,GAAGN,OAAO,CAAC,cAAD,CAA1B;;AACA,IAAMO,0BAA0B,GAAGP,OAAO,CAAC,8BAAD,CAA1C;;AAEAQ,MAAM,CAACC,OAAP;AAAA;;AAAA;;AACC,yBAAYC,SAAZ,EAAuB;AAAA;;AAAA;;AACtB;AACA,UAAKC,KAAL,GAAa;AACZC,MAAAA,IAAI,EAAE,IAAIV,QAAJ,CAAa,CAAC,OAAD,CAAb,CADM;AAEZW,MAAAA,OAAO,EAAE,IAAIV,SAAJ,CAAcO,SAAS,CAACI,GAAV,CAAc,UAAAC,CAAC;AAAA,eAAIA,CAAC,CAACJ,KAAF,CAAQE,OAAZ;AAAA,OAAf,CAAd,CAFG;AAGZG,MAAAA,GAAG,EAAE,IAAIb,SAAJ,CAAcO,SAAS,CAACI,GAAV,CAAc,UAAAC,CAAC;AAAA,eAAIA,CAAC,CAACJ,KAAF,CAAQK,GAAZ;AAAA,OAAf,CAAd,CAHO;AAIZC,MAAAA,UAAU,EAAE,IAAIf,QAAJ,CAAa,EAAb,CAJA;AAKZgB,MAAAA,QAAQ,EAAE,IAAIf,SAAJ,CAAcO,SAAS,CAACI,GAAV,CAAc,UAAAC,CAAC;AAAA,eAAIA,CAAC,CAACJ,KAAF,CAAQO,QAAZ;AAAA,OAAf,CAAd,CALE;AAMZC,MAAAA,iBAAiB,EAAE,IAAIhB,SAAJ,CAClBO,SAAS,CAACI,GAAV,CAAc,UAAAC,CAAC;AAAA,eAAIA,CAAC,CAACJ,KAAF,CAAQQ,iBAAZ;AAAA,OAAf,CADkB;AANP,KAAb;;AAUA,QAAI,CAACC,KAAK,CAACC,OAAN,CAAcX,SAAd,CAAL,EAA+B;AAC9BA,MAAAA,SAAS,GAAGY,MAAM,CAACC,IAAP,CAAYb,SAAZ,EAAuBI,GAAvB,CAA2B,UAAAU,IAAI,EAAI;AAC9Cd,QAAAA,SAAS,CAACc,IAAD,CAAT,CAAgBA,IAAhB,GAAuBA,IAAvB;AACA,eAAOd,SAAS,CAACc,IAAD,CAAhB;AACA,OAHW,CAAZ;AAIA;;AACD,UAAKd,SAAL,GAAiBA,SAAjB;AACA,QAAIe,aAAa,GAAG,CAApB;AACA,QAAIC,aAAa,GAAG,EAApB;AACA,QAAIC,KAAK,GAAG,CAAZ;;AArBsB,+CAsBC,MAAKjB,SAtBN;AAAA;;AAAA;AAAA;AAAA,YAsBXkB,QAtBW;AAuBrB,YAAIC,YAAY,GAAG,KAAnB;AACA,YAAMC,aAAa,GAAGH,KAAK,EAA3B,CAxBqB,CAyBrB;;AACAC,QAAAA,QAAQ,CAACjB,KAAT,CAAeC,IAAf,CAAoBmB,GAApB,CAAwB,eAAxB,EAAyC,UAAAC,KAAK,EAAI;AACjD,cAAI,CAACH,YAAL,EAAmB;AAClBA,YAAAA,YAAY,GAAG,IAAf;AACAJ,YAAAA,aAAa;AACb;;AACDC,UAAAA,aAAa,CAACI,aAAD,CAAb,GAA+BE,KAA/B;;AACA,cAAIP,aAAa,KAAK,MAAKf,SAAL,CAAeuB,MAArC,EAA6C;AAC5C,kBAAKtB,KAAL,CAAWC,IAAX,CAAgBsB,IAAhB,CAAqB,IAAI5B,UAAJ,CAAeoB,aAAf,CAArB;AACA;AACD,SATD,EA1BqB,CAoCrB;;AACAE,QAAAA,QAAQ,CAACjB,KAAT,CAAeE,OAAf,CAAuBkB,GAAvB,CAA2B,eAA3B,EAA4C,YAAM;AACjD,cAAIF,YAAJ,EAAkB;AACjBA,YAAAA,YAAY,GAAG,KAAf;AACAJ,YAAAA,aAAa;AACb;AACD,SALD;AArCqB;;AAsBtB,0DAAuC;AAAA;AAqBtC;AA3CqB;AAAA;AAAA;AAAA;AAAA;;AA4CtB,UAAKU,OAAL,GAAe,KAAf;AA5CsB;AA6CtB;;AA9CF;AAAA;AAAA,SAgDC,eAAiB;AAChB,UAAIC,UAAU,GAAG,KAAK1B,SAAL,CAAe,CAAf,EAAkB2B,UAAnC;;AADgB,kDAEO,KAAK3B,SAFZ;AAAA;;AAAA;AAEhB,+DAAuC;AAAA,cAA5BkB,QAA4B;;AACtC,iBACCA,QAAQ,CAACS,UAAT,CAAoBC,OAApB,CAA4BF,UAA5B,MAA4C,CAA5C,IACA,QAAQG,IAAR,CAAaH,UAAb,CAFD,EAGE;AACDA,YAAAA,UAAU,GAAGA,UAAU,CAACI,OAAX,CAAmB,eAAnB,EAAoC,EAApC,CAAb;AACA;AACD;AATe;AAAA;AAAA;AAAA;AAAA;;AAWhB,UAAI,CAACJ,UAAD,IAAe,KAAK1B,SAAL,CAAe,CAAf,EAAkB2B,UAAlB,CAA6B,CAA7B,MAAoC,GAAvD,EAA4D,OAAO,GAAP;AAC5D,aAAOD,UAAP;AACA;AA7DF;AAAA;AAAA,SA+DC,eAAsB;AACrB,YAAM,IAAIK,KAAJ,CAAU,gDAAV,CAAN;AACA,KAjEF;AAAA,SAuEC,aAAoBC,KAApB,EAA2B;AAAA,kDACH,KAAKhC,SADF;AAAA;;AAAA;AAC1B,+DAAuC;AAAA,cAA5BkB,QAA4B;AACtCA,UAAAA,QAAQ,CAACe,eAAT,GAA2BD,KAA3B;AACA;AAHyB;AAAA;AAAA;AAAA;AAAA;AAI1B;AA3EF;AAAA;AAAA,SAmEC,eAAuB;AACtB,YAAM,IAAID,KAAJ,CAAU,iDAAV,CAAN;AACA,KArEF;AAAA,SA6EC,aAAqBC,KAArB,EAA4B;AAAA,kDACJ,KAAKhC,SADD;AAAA;;AAAA;AAC3B,+DAAuC;AAAA,cAA5BkB,QAA4B;AACtCA,UAAAA,QAAQ,CAACgB,gBAAT,GAA4BF,KAA5B;AACA;AAH0B;AAAA;AAAA;AAAA;AAAA;AAI3B;AAjFF;AAAA;AAAA,WAmFC,iCAAwBlB,IAAxB,EAA8B;AAC7B,aAAO,KAAKd,SAAL,CAAe,CAAf,EAAkBmC,uBAAlB,CAA0CrB,IAA1C,CAAP;AACA;AArFF;AAAA;AAAA,WAuFC,8BAAqBsB,QAArB,EAA+B;AAAA;;AAC9B,UAAMC,KAAK,GAAG,IAAIC,GAAJ,EAAd;AACA,UAAMC,OAAO,GAAG,EAAhB;;AACA,UAAMC,WAAW,GAAG,SAAdA,WAAc,CAAAtB,QAAQ,EAAI;AAAA,oDACZmB,KADY;AAAA;;AAAA;AAC/B,iEAA0B;AAAA,gBAAfI,IAAe;;AACzB,gBAAIA,IAAI,CAACC,MAAL,KAAgBxB,QAApB,EAA8B;AAC7B,qBAAO,IAAP;AACA;AACD;AAL8B;AAAA;AAAA;AAAA;AAAA;;AAM/B,eAAO,KAAP;AACA,OAPD;;AAQA,UAAMyB,SAAS,GAAG,SAAZA,SAAY,CAACC,EAAD,EAAKC,EAAL,EAAY;AAC7B,eACCD,EAAE,CAACE,MAAH,CAAUhC,IAAV,CAAeiC,aAAf,CAA6BF,EAAE,CAACC,MAAH,CAAUhC,IAAvC,KACA8B,EAAE,CAACF,MAAH,CAAU5B,IAAV,CAAeiC,aAAf,CAA6BF,EAAE,CAACH,MAAH,CAAU5B,IAAvC,CAFD;AAIA,OALD;;AAX8B,kDAiBT,KAAKd,SAjBI;AAAA;;AAAA;AAiB9B,+DAAqC;AAAA,cAA1B8C,MAA0B;;AACpC,cAAIA,MAAM,CAACE,YAAX,EAAyB;AAAA,wDACNF,MAAM,CAACE,YADD;AAAA;;AAAA;AAAA;AAAA,oBACbC,GADa;;AAEvB,oBAAMP,MAAM,GAAG,MAAI,CAAC1C,SAAL,CAAekD,IAAf,CAAoB,UAAA7C,CAAC;AAAA,yBAAIA,CAAC,CAACS,IAAF,KAAWmC,GAAf;AAAA,iBAArB,CAAf;;AACA,oBAAI,CAACP,MAAL,EAAa;AACZH,kBAAAA,OAAO,CAACY,IAAR,CAAaF,GAAb;AACA,iBAFD,MAEO;AACNZ,kBAAAA,KAAK,CAACe,GAAN,CAAU;AACTN,oBAAAA,MAAM,EAANA,MADS;AAETJ,oBAAAA,MAAM,EAANA;AAFS,mBAAV;AAIA;AAVsB;;AACxB,qEAAuC;AAAA;AAUtC;AAXuB;AAAA;AAAA;AAAA;AAAA;AAYxB;AACD;AA/B6B;AAAA;AAAA;AAAA;AAAA;;AAgC9B,UAAMW,MAAM,GAAGd,OAAO,CAACnC,GAAR,CAAY,UAAAkD,CAAC;AAAA,8CAA6BA,CAA7B;AAAA,OAAb,CAAf;AACA,UAAMC,KAAK,GAAG,KAAKvD,SAAL,CAAewD,MAAf,CAAsB,UAAAnD,CAAC;AAAA,eAAI,CAACmC,WAAW,CAACnC,CAAD,CAAhB;AAAA,OAAvB,CAAd;;AACA,aAAOkD,KAAK,CAAChC,MAAN,GAAe,CAAtB,EAAyB;AACxB,YAAMkC,OAAO,GAAGF,KAAK,CAACG,GAAN,EAAhB;;AADwB,oDAELrB,KAFK;AAAA;;AAAA;AAExB,iEAA0B;AAAA,gBAAfI,IAAe;;AACzB,gBAAIA,IAAI,CAACK,MAAL,KAAgBW,OAApB,EAA6B;AAC5BpB,cAAAA,KAAK,CAACsB,MAAN,CAAalB,IAAb;AACA,kBAAMC,MAAM,GAAGD,IAAI,CAACC,MAApB;;AACA,kBAAI,CAACF,WAAW,CAACE,MAAD,CAAhB,EAA0B;AACzBa,gBAAAA,KAAK,CAACJ,IAAN,CAAWT,MAAX;AACA;AACD;AACD;AAVuB;AAAA;AAAA;AAAA;AAAA;AAWxB;;AACD,UAAIL,KAAK,CAACuB,IAAN,GAAa,CAAjB,EAAoB;AACnB,YAAMC,KAAK,GAAGnD,KAAK,CAACoD,IAAN,CAAWzB,KAAX,EACZ0B,IADY,CACPpB,SADO,EAEZvC,GAFY,CAER,UAAAqC,IAAI;AAAA,2BAAOA,IAAI,CAACK,MAAL,CAAYhC,IAAnB,iBAA8B2B,IAAI,CAACC,MAAL,CAAY5B,IAA1C;AAAA,SAFI,CAAd;AAGA+C,QAAAA,KAAK,CAACG,OAAN,CAAc,qDAAd;AACAX,QAAAA,MAAM,CAACW,OAAP,CAAeH,KAAK,CAACI,IAAN,CAAW,IAAX,CAAf;AACA;;AACD,UAAIZ,MAAM,CAAC9B,MAAP,GAAgB,CAApB,EAAuB;AACtB,YAAM2C,OAAO,GAAGb,MAAM,CAACY,IAAP,CAAY,IAAZ,CAAhB;AACA7B,QAAAA,QAAQ,CAAC,IAAIL,KAAJ,CAAUmC,OAAV,CAAD,CAAR;AACA,eAAO,KAAP;AACA;;AACD,aAAO,IAAP;AACA;AAlJF;AAAA;AAAA,WAoJC,6BAAoBlE,SAApB,EAA+BmE,EAA/B,EAAmC/B,QAAnC,EAA6C;AAC5C,UAAMgC,cAAc,GAAG,IAAI9B,GAAJ,EAAvB;AACA,UAAI+B,kBAAkB,GAAGrE,SAAzB;;AACA,UAAMsE,qBAAqB,GAAG,SAAxBA,qBAAwB,CAAAC,CAAC;AAAA,eAAIH,cAAc,CAACI,GAAf,CAAmBD,CAAnB,CAAJ;AAAA,OAA/B;;AACA,UAAME,iBAAiB,GAAG,SAApBA,iBAAoB,GAAM;AAC/B,YAAIC,cAAc,GAAG,EAArB;AACA,YAAIC,IAAI,GAAGN,kBAAX;AACAA,QAAAA,kBAAkB,GAAG,EAArB;;AAH+B,oDAIfM,IAJe;AAAA;;AAAA;AAI/B,iEAAsB;AAAA,gBAAXtE,CAAW;AACrB,gBAAMuE,KAAK,GACV,CAACvE,CAAC,CAAC2C,YAAH,IAAmB3C,CAAC,CAAC2C,YAAF,CAAe6B,KAAf,CAAqBP,qBAArB,CADpB;;AAEA,gBAAIM,KAAJ,EAAW;AACVF,cAAAA,cAAc,CAACvB,IAAf,CAAoB9C,CAApB;AACA,aAFD,MAEO;AACNgE,cAAAA,kBAAkB,CAAClB,IAAnB,CAAwB9C,CAAxB;AACA;AACD;AAZ8B;AAAA;AAAA;AAAA;AAAA;;AAa/B,eAAOqE,cAAP;AACA,OAdD;;AAeA,UAAMI,YAAY,GAAG,SAAfA,YAAe,CAAA1C,QAAQ,EAAI;AAChC,YAAIiC,kBAAkB,CAAC9C,MAAnB,KAA8B,CAAlC,EAAqC,OAAOa,QAAQ,EAAf;AACrC1C,QAAAA,QAAQ,CAACU,GAAT,CACCqE,iBAAiB,EADlB,EAEC,UAACvD,QAAD,EAAWkB,QAAX,EAAwB;AACvB+B,UAAAA,EAAE,CAACjD,QAAD,EAAW,UAAA6D,GAAG,EAAI;AACnB,gBAAIA,GAAJ,EAAS,OAAO3C,QAAQ,CAAC2C,GAAD,CAAf;AACTX,YAAAA,cAAc,CAAChB,GAAf,CAAmBlC,QAAQ,CAACJ,IAA5B;AACAgE,YAAAA,YAAY,CAAC1C,QAAD,CAAZ;AACA,WAJC,CAAF;AAKA,SARF,EASCA,QATD;AAWA,OAbD;;AAcA0C,MAAAA,YAAY,CAAC1C,QAAD,CAAZ;AACA;AAtLF;AAAA;AAAA,WAwLC,eAAM4C,YAAN,EAAoBC,OAApB,EAA6B;AAAA;;AAC5B,UAAI,KAAKxD,OAAT,EAAkB,OAAOwD,OAAO,CAAC,IAAIpF,0BAAJ,EAAD,CAAd;AAElB,UAAIqF,SAAS,GAAG,EAAhB;AACA,UAAIC,QAAQ,GAAG,KAAKnF,SAAL,CAAeI,GAAf,CAAmB;AAAA,eAAM,IAAN;AAAA,OAAnB,CAAf;AACA,UAAIgF,cAAc,GAAG,KAAKpF,SAAL,CAAeI,GAAf,CAAmB;AAAA,eAAM,KAAN;AAAA,OAAnB,CAArB;;AACA,UAAI,KAAKiF,oBAAL,CAA0BJ,OAA1B,CAAJ,EAAwC;AACvC,aAAKxD,OAAL,GAAe,IAAf;AACA,aAAK6D,mBAAL,CACC,KAAKtF,SADN,EAEC,UAACkB,QAAD,EAAWkB,QAAX,EAAwB;AACvB,cAAMmD,WAAW,GAAG,MAAI,CAACvF,SAAL,CAAe4B,OAAf,CAAuBV,QAAvB,CAApB;;AACA,cAAIsE,QAAQ,GAAG,IAAf;AACA,cAAIC,QAAQ,GAAGvE,QAAQ,CAACwE,KAAT,CACdhF,KAAK,CAACC,OAAN,CAAcqE,YAAd,IACGA,YAAY,CAACO,WAAD,CADf,GAEGP,YAHW,EAId,UAACD,GAAD,EAAMzD,KAAN,EAAgB;AACf,gBAAIyD,GAAJ,EAASE,OAAO,CAACF,GAAD,CAAP;;AACT,gBAAIzD,KAAJ,EAAW;AACV6D,cAAAA,QAAQ,CAACI,WAAD,CAAR,GAAwBjE,KAAxB;AACA8D,cAAAA,cAAc,CAACG,WAAD,CAAd,GAA8B,KAA9B;;AACA,kBAAIH,cAAc,CAACP,KAAf,CAAqBc,OAArB,CAAJ,EAAmC;AAClC,oBAAMC,UAAU,GAAGT,QAAQ,CAAC3B,MAAT,CAAgB,UAACqC,CAAD,EAAIC,GAAJ,EAAY;AAC9C,yBAAOV,cAAc,CAACU,GAAD,CAAd,KAAwB,KAA/B;AACA,iBAFkB,CAAnB;AAGAV,gBAAAA,cAAc,CAACW,IAAf,CAAoB,IAApB;AACA,oBAAMC,UAAU,GAAG,IAAIpG,UAAJ,CAAegG,UAAf,CAAnB;AACAX,gBAAAA,OAAO,CAAC,IAAD,EAAOe,UAAP,CAAP;AACA;AACD;;AACD,gBAAIR,QAAQ,IAAI,CAACT,GAAjB,EAAsB;AACrBS,cAAAA,QAAQ,GAAG,KAAX;AACApD,cAAAA,QAAQ;AACR;AACD,WAtBa,CAAf;AAwBA8C,UAAAA,SAAS,CAAC/B,IAAV,CAAesC,QAAf;AACA,SA9BF,EA+BC,YAAM,CACL;AACA,SAjCF;AAmCA;;AAED,aAAO,IAAI9F,aAAJ,CAAkBuF,SAAlB,EAA6B,IAA7B,CAAP;AACA;AAtOF;AAAA;AAAA,WAwOC,aAAI9C,QAAJ,EAAc;AAAA;;AACb,UAAI,KAAKX,OAAT,EAAkB;AACjB,eAAOW,QAAQ,CAAC,IAAIvC,0BAAJ,EAAD,CAAf;AACA;;AAED,UAAMoG,aAAa,GAAG,SAAhBA,aAAgB,CAAClB,GAAD,EAAMzD,KAAN,EAAgB;AACrC,QAAA,MAAI,CAACG,OAAL,GAAe,KAAf;;AAEA,YAAIW,QAAQ,KAAK8D,SAAjB,EAA4B;AAC3B,iBAAO9D,QAAQ,CAAC2C,GAAD,EAAMzD,KAAN,CAAf;AACA;AACD,OAND;;AAQA,UAAM6D,QAAQ,GAAG,KAAKnF,SAAL,CAAeI,GAAf,CAAmB;AAAA,eAAM,IAAN;AAAA,OAAnB,CAAjB;;AACA,UAAI,KAAKiF,oBAAL,CAA0BjD,QAA1B,CAAJ,EAAyC;AACxC,aAAKX,OAAL,GAAe,IAAf;AACA,aAAK6D,mBAAL,CACC,KAAKtF,SADN,EAEC,UAACkB,QAAD,EAAWkB,QAAX,EAAwB;AACvB,cAAMmD,WAAW,GAAG,MAAI,CAACvF,SAAL,CAAe4B,OAAf,CAAuBV,QAAvB,CAApB;;AACAA,UAAAA,QAAQ,CAACZ,GAAT,CAAa,UAACyE,GAAD,EAAMzD,KAAN,EAAgB;AAC5B,gBAAIyD,GAAJ,EAAS;AACR,qBAAO3C,QAAQ,CAAC2C,GAAD,CAAf;AACA;;AACDI,YAAAA,QAAQ,CAACI,WAAD,CAAR,GAAwBjE,KAAxB;AACAc,YAAAA,QAAQ;AACR,WAND;AAOA,SAXF,EAYC,UAAA2C,GAAG,EAAI;AACN,cAAIA,GAAJ,EAAS;AACR,mBAAOkB,aAAa,CAAClB,GAAD,CAApB;AACA;;AACDkB,UAAAA,aAAa,CAAC,IAAD,EAAO,IAAIrG,UAAJ,CAAeuF,QAAf,CAAP,CAAb;AACA,SAjBF;AAmBA;AACD;AA5QF;AAAA;AAAA,WA8QC,gCAAuB;AAAA,mDACC,KAAKnF,SADN;AAAA;;AAAA;AACtB,kEAAuC;AAAA,cAA5BkB,QAA4B;;AACtC,cAAIA,QAAQ,CAACe,eAAT,IAA4Bf,QAAQ,CAACe,eAAT,CAAyBkE,KAAzD,EAAgE;AAC/DjF,YAAAA,QAAQ,CAACe,eAAT,CAAyBkE,KAAzB;AACA;AACD;AALqB;AAAA;AAAA;AAAA;AAAA;AAMtB;AApRF;;AAAA;AAAA,EAA6C5G,OAA7C","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst { Tapable, SyncHook, MultiHook } = require(\"tapable\");\nconst asyncLib = require(\"neo-async\");\nconst MultiWatching = require(\"./MultiWatching\");\nconst MultiStats = require(\"./MultiStats\");\nconst ConcurrentCompilationError = require(\"./ConcurrentCompilationError\");\n\nmodule.exports = class MultiCompiler extends Tapable {\n\tconstructor(compilers) {\n\t\tsuper();\n\t\tthis.hooks = {\n\t\t\tdone: new SyncHook([\"stats\"]),\n\t\t\tinvalid: new MultiHook(compilers.map(c => c.hooks.invalid)),\n\t\t\trun: new MultiHook(compilers.map(c => c.hooks.run)),\n\t\t\twatchClose: new SyncHook([]),\n\t\t\twatchRun: new MultiHook(compilers.map(c => c.hooks.watchRun)),\n\t\t\tinfrastructureLog: new MultiHook(\n\t\t\t\tcompilers.map(c => c.hooks.infrastructureLog)\n\t\t\t)\n\t\t};\n\t\tif (!Array.isArray(compilers)) {\n\t\t\tcompilers = Object.keys(compilers).map(name => {\n\t\t\t\tcompilers[name].name = name;\n\t\t\t\treturn compilers[name];\n\t\t\t});\n\t\t}\n\t\tthis.compilers = compilers;\n\t\tlet doneCompilers = 0;\n\t\tlet compilerStats = [];\n\t\tlet index = 0;\n\t\tfor (const compiler of this.compilers) {\n\t\t\tlet compilerDone = false;\n\t\t\tconst compilerIndex = index++;\n\t\t\t// eslint-disable-next-line no-loop-func\n\t\t\tcompiler.hooks.done.tap(\"MultiCompiler\", stats => {\n\t\t\t\tif (!compilerDone) {\n\t\t\t\t\tcompilerDone = true;\n\t\t\t\t\tdoneCompilers++;\n\t\t\t\t}\n\t\t\t\tcompilerStats[compilerIndex] = stats;\n\t\t\t\tif (doneCompilers === this.compilers.length) {\n\t\t\t\t\tthis.hooks.done.call(new MultiStats(compilerStats));\n\t\t\t\t}\n\t\t\t});\n\t\t\t// eslint-disable-next-line no-loop-func\n\t\t\tcompiler.hooks.invalid.tap(\"MultiCompiler\", () => {\n\t\t\t\tif (compilerDone) {\n\t\t\t\t\tcompilerDone = false;\n\t\t\t\t\tdoneCompilers--;\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\tthis.running = false;\n\t}\n\n\tget outputPath() {\n\t\tlet commonPath = this.compilers[0].outputPath;\n\t\tfor (const compiler of this.compilers) {\n\t\t\twhile (\n\t\t\t\tcompiler.outputPath.indexOf(commonPath) !== 0 &&\n\t\t\t\t/[/\\\\]/.test(commonPath)\n\t\t\t) {\n\t\t\t\tcommonPath = commonPath.replace(/[/\\\\][^/\\\\]*$/, \"\");\n\t\t\t}\n\t\t}\n\n\t\tif (!commonPath && this.compilers[0].outputPath[0] === \"/\") return \"/\";\n\t\treturn commonPath;\n\t}\n\n\tget inputFileSystem() {\n\t\tthrow new Error(\"Cannot read inputFileSystem of a MultiCompiler\");\n\t}\n\n\tget outputFileSystem() {\n\t\tthrow new Error(\"Cannot read outputFileSystem of a MultiCompiler\");\n\t}\n\n\tset inputFileSystem(value) {\n\t\tfor (const compiler of this.compilers) {\n\t\t\tcompiler.inputFileSystem = value;\n\t\t}\n\t}\n\n\tset outputFileSystem(value) {\n\t\tfor (const compiler of this.compilers) {\n\t\t\tcompiler.outputFileSystem = value;\n\t\t}\n\t}\n\n\tgetInfrastructureLogger(name) {\n\t\treturn this.compilers[0].getInfrastructureLogger(name);\n\t}\n\n\tvalidateDependencies(callback) {\n\t\tconst edges = new Set();\n\t\tconst missing = [];\n\t\tconst targetFound = compiler => {\n\t\t\tfor (const edge of edges) {\n\t\t\t\tif (edge.target === compiler) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t};\n\t\tconst sortEdges = (e1, e2) => {\n\t\t\treturn (\n\t\t\t\te1.source.name.localeCompare(e2.source.name) ||\n\t\t\t\te1.target.name.localeCompare(e2.target.name)\n\t\t\t);\n\t\t};\n\t\tfor (const source of this.compilers) {\n\t\t\tif (source.dependencies) {\n\t\t\t\tfor (const dep of source.dependencies) {\n\t\t\t\t\tconst target = this.compilers.find(c => c.name === dep);\n\t\t\t\t\tif (!target) {\n\t\t\t\t\t\tmissing.push(dep);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tedges.add({\n\t\t\t\t\t\t\tsource,\n\t\t\t\t\t\t\ttarget\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tconst errors = missing.map(m => `Compiler dependency \\`${m}\\` not found.`);\n\t\tconst stack = this.compilers.filter(c => !targetFound(c));\n\t\twhile (stack.length > 0) {\n\t\t\tconst current = stack.pop();\n\t\t\tfor (const edge of edges) {\n\t\t\t\tif (edge.source === current) {\n\t\t\t\t\tedges.delete(edge);\n\t\t\t\t\tconst target = edge.target;\n\t\t\t\t\tif (!targetFound(target)) {\n\t\t\t\t\t\tstack.push(target);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (edges.size > 0) {\n\t\t\tconst lines = Array.from(edges)\n\t\t\t\t.sort(sortEdges)\n\t\t\t\t.map(edge => `${edge.source.name} -> ${edge.target.name}`);\n\t\t\tlines.unshift(\"Circular dependency found in compiler dependencies.\");\n\t\t\terrors.unshift(lines.join(\"\\n\"));\n\t\t}\n\t\tif (errors.length > 0) {\n\t\t\tconst message = errors.join(\"\\n\");\n\t\t\tcallback(new Error(message));\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n\n\trunWithDependencies(compilers, fn, callback) {\n\t\tconst fulfilledNames = new Set();\n\t\tlet remainingCompilers = compilers;\n\t\tconst isDependencyFulfilled = d => fulfilledNames.has(d);\n\t\tconst getReadyCompilers = () => {\n\t\t\tlet readyCompilers = [];\n\t\t\tlet list = remainingCompilers;\n\t\t\tremainingCompilers = [];\n\t\t\tfor (const c of list) {\n\t\t\t\tconst ready =\n\t\t\t\t\t!c.dependencies || c.dependencies.every(isDependencyFulfilled);\n\t\t\t\tif (ready) {\n\t\t\t\t\treadyCompilers.push(c);\n\t\t\t\t} else {\n\t\t\t\t\tremainingCompilers.push(c);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn readyCompilers;\n\t\t};\n\t\tconst runCompilers = callback => {\n\t\t\tif (remainingCompilers.length === 0) return callback();\n\t\t\tasyncLib.map(\n\t\t\t\tgetReadyCompilers(),\n\t\t\t\t(compiler, callback) => {\n\t\t\t\t\tfn(compiler, err => {\n\t\t\t\t\t\tif (err) return callback(err);\n\t\t\t\t\t\tfulfilledNames.add(compiler.name);\n\t\t\t\t\t\trunCompilers(callback);\n\t\t\t\t\t});\n\t\t\t\t},\n\t\t\t\tcallback\n\t\t\t);\n\t\t};\n\t\trunCompilers(callback);\n\t}\n\n\twatch(watchOptions, handler) {\n\t\tif (this.running) return handler(new ConcurrentCompilationError());\n\n\t\tlet watchings = [];\n\t\tlet allStats = this.compilers.map(() => null);\n\t\tlet compilerStatus = this.compilers.map(() => false);\n\t\tif (this.validateDependencies(handler)) {\n\t\t\tthis.running = true;\n\t\t\tthis.runWithDependencies(\n\t\t\t\tthis.compilers,\n\t\t\t\t(compiler, callback) => {\n\t\t\t\t\tconst compilerIdx = this.compilers.indexOf(compiler);\n\t\t\t\t\tlet firstRun = true;\n\t\t\t\t\tlet watching = compiler.watch(\n\t\t\t\t\t\tArray.isArray(watchOptions)\n\t\t\t\t\t\t\t? watchOptions[compilerIdx]\n\t\t\t\t\t\t\t: watchOptions,\n\t\t\t\t\t\t(err, stats) => {\n\t\t\t\t\t\t\tif (err) handler(err);\n\t\t\t\t\t\t\tif (stats) {\n\t\t\t\t\t\t\t\tallStats[compilerIdx] = stats;\n\t\t\t\t\t\t\t\tcompilerStatus[compilerIdx] = \"new\";\n\t\t\t\t\t\t\t\tif (compilerStatus.every(Boolean)) {\n\t\t\t\t\t\t\t\t\tconst freshStats = allStats.filter((s, idx) => {\n\t\t\t\t\t\t\t\t\t\treturn compilerStatus[idx] === \"new\";\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\tcompilerStatus.fill(true);\n\t\t\t\t\t\t\t\t\tconst multiStats = new MultiStats(freshStats);\n\t\t\t\t\t\t\t\t\thandler(null, multiStats);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (firstRun && !err) {\n\t\t\t\t\t\t\t\tfirstRun = false;\n\t\t\t\t\t\t\t\tcallback();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t);\n\t\t\t\t\twatchings.push(watching);\n\t\t\t\t},\n\t\t\t\t() => {\n\t\t\t\t\t// ignore\n\t\t\t\t}\n\t\t\t);\n\t\t}\n\n\t\treturn new MultiWatching(watchings, this);\n\t}\n\n\trun(callback) {\n\t\tif (this.running) {\n\t\t\treturn callback(new ConcurrentCompilationError());\n\t\t}\n\n\t\tconst finalCallback = (err, stats) => {\n\t\t\tthis.running = false;\n\n\t\t\tif (callback !== undefined) {\n\t\t\t\treturn callback(err, stats);\n\t\t\t}\n\t\t};\n\n\t\tconst allStats = this.compilers.map(() => null);\n\t\tif (this.validateDependencies(callback)) {\n\t\t\tthis.running = true;\n\t\t\tthis.runWithDependencies(\n\t\t\t\tthis.compilers,\n\t\t\t\t(compiler, callback) => {\n\t\t\t\t\tconst compilerIdx = this.compilers.indexOf(compiler);\n\t\t\t\t\tcompiler.run((err, stats) => {\n\t\t\t\t\t\tif (err) {\n\t\t\t\t\t\t\treturn callback(err);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tallStats[compilerIdx] = stats;\n\t\t\t\t\t\tcallback();\n\t\t\t\t\t});\n\t\t\t\t},\n\t\t\t\terr => {\n\t\t\t\t\tif (err) {\n\t\t\t\t\t\treturn finalCallback(err);\n\t\t\t\t\t}\n\t\t\t\t\tfinalCallback(null, new MultiStats(allStats));\n\t\t\t\t}\n\t\t\t);\n\t\t}\n\t}\n\n\tpurgeInputFileSystem() {\n\t\tfor (const compiler of this.compilers) {\n\t\t\tif (compiler.inputFileSystem && compiler.inputFileSystem.purge) {\n\t\t\t\tcompiler.inputFileSystem.purge();\n\t\t\t}\n\t\t}\n\t}\n};\n"]},"metadata":{},"sourceType":"script"}