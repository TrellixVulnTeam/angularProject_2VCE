{"ast":null,"code":"(function (factory) {\n  if (typeof module === \"object\" && typeof module.exports === \"object\") {\n    var v = factory(require, exports);\n    if (v !== undefined) module.exports = v;\n  } else if (typeof define === \"function\" && define.amd) {\n    define(\"@angular/compiler-cli/ngcc/src/path_mappings\", [\"require\", \"exports\"], factory);\n  }\n})(function (require, exports) {\n  \"use strict\";\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.getPathMappingsFromTsConfig = void 0;\n  /**\n   * If `pathMappings` is not provided directly, then try getting it from `tsConfig`, if available.\n   */\n\n  function getPathMappingsFromTsConfig(fs, tsConfig, projectPath) {\n    if (tsConfig !== null && tsConfig.options.baseUrl !== undefined && tsConfig.options.paths !== undefined) {\n      return {\n        baseUrl: fs.resolve(projectPath, tsConfig.options.baseUrl),\n        paths: tsConfig.options.paths\n      };\n    }\n  }\n\n  exports.getPathMappingsFromTsConfig = getPathMappingsFromTsConfig;\n});","map":{"version":3,"sources":["../../../../../../../packages/compiler-cli/ngcc/src/path_mappings.ts"],"names":[],"mappings":";;;;;;;;;;;;;;AAeA;;AAEG;;AACH,WAAgB,2BAAhB,CACI,EADJ,EAC0B,QAD1B,EAEI,WAFJ,EAE+B;AAC7B,QAAI,QAAQ,KAAK,IAAb,IAAqB,QAAQ,CAAC,OAAT,CAAiB,OAAjB,KAA6B,SAAlD,IACA,QAAQ,CAAC,OAAT,CAAiB,KAAjB,KAA2B,SAD/B,EAC0C;AACxC,aAAO;AACL,QAAA,OAAO,EAAE,EAAE,CAAC,OAAH,CAAW,WAAX,EAAwB,QAAQ,CAAC,OAAT,CAAiB,OAAzC,CADJ;AAEL,QAAA,KAAK,EAAE,QAAQ,CAAC,OAAT,CAAiB;AAFnB,OAAP;AAID;AACF;;AAVD,EAAA,OAAA,CAAA,2BAAA,GAAA,2BAAA","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AbsoluteFsPath, PathManipulation} from '../../src/ngtsc/file_system';\nimport {ParsedConfiguration} from '../../src/perform_compile';\n\nexport type PathMappings = {\n  baseUrl: string,\n  paths: {[key: string]: string[]}\n};\n\n/**\n * If `pathMappings` is not provided directly, then try getting it from `tsConfig`, if available.\n */\nexport function getPathMappingsFromTsConfig(\n    fs: PathManipulation, tsConfig: ParsedConfiguration|null,\n    projectPath: AbsoluteFsPath): PathMappings|undefined {\n  if (tsConfig !== null && tsConfig.options.baseUrl !== undefined &&\n      tsConfig.options.paths !== undefined) {\n    return {\n      baseUrl: fs.resolve(projectPath, tsConfig.options.baseUrl),\n      paths: tsConfig.options.paths,\n    };\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}