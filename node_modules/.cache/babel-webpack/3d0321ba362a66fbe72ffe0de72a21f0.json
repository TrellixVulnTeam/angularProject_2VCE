{"ast":null,"code":"\"use strict\";\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nvar _createForOfIteratorHelper = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _classCallCheck = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _inherits = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/createSuper\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.normalizeFileReplacements = exports.MissingFileReplacementException = void 0;\n\nvar core_1 = require(\"@angular-devkit/core\");\n\nvar MissingFileReplacementException = /*#__PURE__*/function (_core_1$BaseException) {\n  _inherits(MissingFileReplacementException, _core_1$BaseException);\n\n  var _super = _createSuper(MissingFileReplacementException);\n\n  function MissingFileReplacementException(path) {\n    _classCallCheck(this, MissingFileReplacementException);\n\n    return _super.call(this, \"The \".concat(path, \" path in file replacements does not exist.\"));\n  }\n\n  return MissingFileReplacementException;\n}(core_1.BaseException);\n\nexports.MissingFileReplacementException = MissingFileReplacementException;\n\nfunction normalizeFileReplacements(fileReplacements, host, root) {\n  if (fileReplacements.length === 0) {\n    return [];\n  }\n\n  var normalizedReplacement = fileReplacements.map(function (replacement) {\n    return normalizeFileReplacement(replacement, root);\n  });\n\n  var _iterator = _createForOfIteratorHelper(normalizedReplacement),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var _step$value = _step.value,\n          replace = _step$value.replace,\n          replacementWith = _step$value.with;\n\n      if (!host.exists(replacementWith)) {\n        throw new MissingFileReplacementException(core_1.getSystemPath(replacementWith));\n      }\n\n      if (!host.exists(replace)) {\n        throw new MissingFileReplacementException(core_1.getSystemPath(replace));\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  return normalizedReplacement;\n}\n\nexports.normalizeFileReplacements = normalizeFileReplacements;\n\nfunction normalizeFileReplacement(fileReplacement, root) {\n  var replacePath;\n  var withPath;\n\n  if (fileReplacement.src && fileReplacement.replaceWith) {\n    replacePath = core_1.normalize(fileReplacement.src);\n    withPath = core_1.normalize(fileReplacement.replaceWith);\n  } else if (fileReplacement.replace && fileReplacement.with) {\n    replacePath = core_1.normalize(fileReplacement.replace);\n    withPath = core_1.normalize(fileReplacement.with);\n  } else {\n    throw new Error(\"Invalid file replacement: \".concat(JSON.stringify(fileReplacement)));\n  } // TODO: For 7.x should this only happen if not absolute?\n\n\n  if (root) {\n    replacePath = core_1.join(root, replacePath);\n  }\n\n  if (root) {\n    withPath = core_1.join(root, withPath);\n  }\n\n  return {\n    replace: replacePath,\n    with: withPath\n  };\n}","map":{"version":3,"sources":["/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@angular-devkit/build-angular/src/utils/normalize-file-replacements.js"],"names":["Object","defineProperty","exports","value","normalizeFileReplacements","MissingFileReplacementException","core_1","require","path","BaseException","fileReplacements","host","root","length","normalizedReplacement","map","replacement","normalizeFileReplacement","replace","replacementWith","with","exists","getSystemPath","fileReplacement","replacePath","withPath","src","replaceWith","normalize","Error","JSON","stringify","join"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,yBAAR,GAAoCF,OAAO,CAACG,+BAAR,GAA0C,KAAK,CAAnF;;AACA,IAAMC,MAAM,GAAGC,OAAO,CAAC,sBAAD,CAAtB;;IACMF,+B;;;;;AACF,2CAAYG,IAAZ,EAAkB;AAAA;;AAAA,2CACDA,IADC;AAEjB;;;EAHyCF,MAAM,CAACG,a;;AAKrDP,OAAO,CAACG,+BAAR,GAA0CA,+BAA1C;;AACA,SAASD,yBAAT,CAAmCM,gBAAnC,EAAqDC,IAArD,EAA2DC,IAA3D,EAAiE;AAC7D,MAAIF,gBAAgB,CAACG,MAAjB,KAA4B,CAAhC,EAAmC;AAC/B,WAAO,EAAP;AACH;;AACD,MAAMC,qBAAqB,GAAGJ,gBAAgB,CACzCK,GADyB,CACrB,UAAAC,WAAW;AAAA,WAAIC,wBAAwB,CAACD,WAAD,EAAcJ,IAAd,CAA5B;AAAA,GADU,CAA9B;;AAJ6D,6CAMZE,qBANY;AAAA;;AAAA;AAM7D,wDAAwE;AAAA;AAAA,UAA3DI,OAA2D,eAA3DA,OAA2D;AAAA,UAA5CC,eAA4C,eAAlDC,IAAkD;;AACpE,UAAI,CAACT,IAAI,CAACU,MAAL,CAAYF,eAAZ,CAAL,EAAmC;AAC/B,cAAM,IAAId,+BAAJ,CAAoCC,MAAM,CAACgB,aAAP,CAAqBH,eAArB,CAApC,CAAN;AACH;;AACD,UAAI,CAACR,IAAI,CAACU,MAAL,CAAYH,OAAZ,CAAL,EAA2B;AACvB,cAAM,IAAIb,+BAAJ,CAAoCC,MAAM,CAACgB,aAAP,CAAqBJ,OAArB,CAApC,CAAN;AACH;AACJ;AAb4D;AAAA;AAAA;AAAA;AAAA;;AAc7D,SAAOJ,qBAAP;AACH;;AACDZ,OAAO,CAACE,yBAAR,GAAoCA,yBAApC;;AACA,SAASa,wBAAT,CAAkCM,eAAlC,EAAmDX,IAAnD,EAAyD;AACrD,MAAIY,WAAJ;AACA,MAAIC,QAAJ;;AACA,MAAIF,eAAe,CAACG,GAAhB,IAAuBH,eAAe,CAACI,WAA3C,EAAwD;AACpDH,IAAAA,WAAW,GAAGlB,MAAM,CAACsB,SAAP,CAAiBL,eAAe,CAACG,GAAjC,CAAd;AACAD,IAAAA,QAAQ,GAAGnB,MAAM,CAACsB,SAAP,CAAiBL,eAAe,CAACI,WAAjC,CAAX;AACH,GAHD,MAIK,IAAIJ,eAAe,CAACL,OAAhB,IAA2BK,eAAe,CAACH,IAA/C,EAAqD;AACtDI,IAAAA,WAAW,GAAGlB,MAAM,CAACsB,SAAP,CAAiBL,eAAe,CAACL,OAAjC,CAAd;AACAO,IAAAA,QAAQ,GAAGnB,MAAM,CAACsB,SAAP,CAAiBL,eAAe,CAACH,IAAjC,CAAX;AACH,GAHI,MAIA;AACD,UAAM,IAAIS,KAAJ,qCAAuCC,IAAI,CAACC,SAAL,CAAeR,eAAf,CAAvC,EAAN;AACH,GAboD,CAcrD;;;AACA,MAAIX,IAAJ,EAAU;AACNY,IAAAA,WAAW,GAAGlB,MAAM,CAAC0B,IAAP,CAAYpB,IAAZ,EAAkBY,WAAlB,CAAd;AACH;;AACD,MAAIZ,IAAJ,EAAU;AACNa,IAAAA,QAAQ,GAAGnB,MAAM,CAAC0B,IAAP,CAAYpB,IAAZ,EAAkBa,QAAlB,CAAX;AACH;;AACD,SAAO;AAAEP,IAAAA,OAAO,EAAEM,WAAX;AAAwBJ,IAAAA,IAAI,EAAEK;AAA9B,GAAP;AACH","sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.normalizeFileReplacements = exports.MissingFileReplacementException = void 0;\nconst core_1 = require(\"@angular-devkit/core\");\nclass MissingFileReplacementException extends core_1.BaseException {\n    constructor(path) {\n        super(`The ${path} path in file replacements does not exist.`);\n    }\n}\nexports.MissingFileReplacementException = MissingFileReplacementException;\nfunction normalizeFileReplacements(fileReplacements, host, root) {\n    if (fileReplacements.length === 0) {\n        return [];\n    }\n    const normalizedReplacement = fileReplacements\n        .map(replacement => normalizeFileReplacement(replacement, root));\n    for (const { replace, with: replacementWith } of normalizedReplacement) {\n        if (!host.exists(replacementWith)) {\n            throw new MissingFileReplacementException(core_1.getSystemPath(replacementWith));\n        }\n        if (!host.exists(replace)) {\n            throw new MissingFileReplacementException(core_1.getSystemPath(replace));\n        }\n    }\n    return normalizedReplacement;\n}\nexports.normalizeFileReplacements = normalizeFileReplacements;\nfunction normalizeFileReplacement(fileReplacement, root) {\n    let replacePath;\n    let withPath;\n    if (fileReplacement.src && fileReplacement.replaceWith) {\n        replacePath = core_1.normalize(fileReplacement.src);\n        withPath = core_1.normalize(fileReplacement.replaceWith);\n    }\n    else if (fileReplacement.replace && fileReplacement.with) {\n        replacePath = core_1.normalize(fileReplacement.replace);\n        withPath = core_1.normalize(fileReplacement.with);\n    }\n    else {\n        throw new Error(`Invalid file replacement: ${JSON.stringify(fileReplacement)}`);\n    }\n    // TODO: For 7.x should this only happen if not absolute?\n    if (root) {\n        replacePath = core_1.join(root, replacePath);\n    }\n    if (root) {\n        withPath = core_1.join(root, withPath);\n    }\n    return { replace: replacePath, with: withPath };\n}\n"]},"metadata":{},"sourceType":"script"}