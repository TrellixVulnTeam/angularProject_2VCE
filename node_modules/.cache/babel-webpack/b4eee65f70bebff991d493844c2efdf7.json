{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nvar _classCallCheck = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/createClass\");\n\nvar CodeNode = require(\"./CodeNode\");\n\nvar SourceNode = require(\"./SourceNode\");\n\nvar MappingsContext = require(\"./MappingsContext\");\n\nvar getNumberOfLines = require(\"./helpers\").getNumberOfLines;\n\nvar SourceListMap = /*#__PURE__*/function () {\n  function SourceListMap(generatedCode, source, originalSource) {\n    _classCallCheck(this, SourceListMap);\n\n    if (Array.isArray(generatedCode)) {\n      this.children = generatedCode;\n    } else {\n      this.children = [];\n      if (generatedCode || source) this.add(generatedCode, source, originalSource);\n    }\n  }\n\n  _createClass(SourceListMap, [{\n    key: \"add\",\n    value: function add(generatedCode, source, originalSource) {\n      if (typeof generatedCode === \"string\") {\n        if (source) {\n          this.children.push(new SourceNode(generatedCode, source, originalSource));\n        } else if (this.children.length > 0 && this.children[this.children.length - 1] instanceof CodeNode) {\n          this.children[this.children.length - 1].addGeneratedCode(generatedCode);\n        } else {\n          this.children.push(new CodeNode(generatedCode));\n        }\n      } else if (generatedCode.getMappings && generatedCode.getGeneratedCode) {\n        this.children.push(generatedCode);\n      } else if (generatedCode.children) {\n        generatedCode.children.forEach(function (sln) {\n          this.children.push(sln);\n        }, this);\n      } else {\n        throw new Error(\"Invalid arguments to SourceListMap.protfotype.add: Expected string, Node or SourceListMap\");\n      }\n    }\n  }, {\n    key: \"preprend\",\n    value: function preprend(generatedCode, source, originalSource) {\n      if (typeof generatedCode === \"string\") {\n        if (source) {\n          this.children.unshift(new SourceNode(generatedCode, source, originalSource));\n        } else if (this.children.length > 0 && this.children[this.children.length - 1].preprendGeneratedCode) {\n          this.children[this.children.length - 1].preprendGeneratedCode(generatedCode);\n        } else {\n          this.children.unshift(new CodeNode(generatedCode));\n        }\n      } else if (generatedCode.getMappings && generatedCode.getGeneratedCode) {\n        this.children.unshift(generatedCode);\n      } else if (generatedCode.children) {\n        generatedCode.children.slice().reverse().forEach(function (sln) {\n          this.children.unshift(sln);\n        }, this);\n      } else {\n        throw new Error(\"Invalid arguments to SourceListMap.protfotype.prerend: Expected string, Node or SourceListMap\");\n      }\n    }\n  }, {\n    key: \"mapGeneratedCode\",\n    value: function mapGeneratedCode(fn) {\n      var normalizedNodes = [];\n      this.children.forEach(function (sln) {\n        sln.getNormalizedNodes().forEach(function (newNode) {\n          normalizedNodes.push(newNode);\n        });\n      });\n      var optimizedNodes = [];\n      normalizedNodes.forEach(function (sln) {\n        sln = sln.mapGeneratedCode(fn);\n\n        if (optimizedNodes.length === 0) {\n          optimizedNodes.push(sln);\n        } else {\n          var last = optimizedNodes[optimizedNodes.length - 1];\n          var mergedNode = last.merge(sln);\n\n          if (mergedNode) {\n            optimizedNodes[optimizedNodes.length - 1] = mergedNode;\n          } else {\n            optimizedNodes.push(sln);\n          }\n        }\n      });\n      return new SourceListMap(optimizedNodes);\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return this.children.map(function (sln) {\n        return sln.getGeneratedCode();\n      }).join(\"\");\n    }\n  }, {\n    key: \"toStringWithSourceMap\",\n    value: function toStringWithSourceMap(options) {\n      var mappingsContext = new MappingsContext();\n      var source = this.children.map(function (sln) {\n        return sln.getGeneratedCode();\n      }).join(\"\");\n      var mappings = this.children.map(function (sln) {\n        return sln.getMappings(mappingsContext);\n      }).join(\"\");\n      var arrays = mappingsContext.getArrays();\n      return {\n        source: source,\n        map: {\n          version: 3,\n          file: options && options.file,\n          sources: arrays.sources,\n          sourcesContent: mappingsContext.hasSourceContent ? arrays.sourcesContent : undefined,\n          mappings: mappings\n        }\n      };\n    }\n  }]);\n\n  return SourceListMap;\n}();\n\nmodule.exports = SourceListMap;","map":{"version":3,"sources":["/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/source-list-map/lib/SourceListMap.js"],"names":["CodeNode","require","SourceNode","MappingsContext","getNumberOfLines","SourceListMap","generatedCode","source","originalSource","Array","isArray","children","add","push","length","addGeneratedCode","getMappings","getGeneratedCode","forEach","sln","Error","unshift","preprendGeneratedCode","slice","reverse","fn","normalizedNodes","getNormalizedNodes","newNode","optimizedNodes","mapGeneratedCode","last","mergedNode","merge","map","join","options","mappingsContext","mappings","arrays","getArrays","version","file","sources","sourcesContent","hasSourceContent","undefined","module","exports"],"mappings":"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","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst CodeNode = require(\"./CodeNode\");\nconst SourceNode = require(\"./SourceNode\");\nconst MappingsContext = require(\"./MappingsContext\");\nconst getNumberOfLines = require(\"./helpers\").getNumberOfLines;\n\nclass SourceListMap {\n\n\tconstructor(generatedCode, source, originalSource) {\n\t\tif(Array.isArray(generatedCode)) {\n\t\t\tthis.children = generatedCode;\n\t\t} else {\n\t\t\tthis.children = [];\n\t\t\tif(generatedCode || source)\n\t\t\t\tthis.add(generatedCode, source, originalSource);\n\t\t}\n\t}\n\n\tadd(generatedCode, source, originalSource) {\n\t\tif(typeof generatedCode === \"string\") {\n\t\t\tif(source) {\n\t\t\t\tthis.children.push(new SourceNode(generatedCode, source, originalSource));\n\t\t\t} else if(this.children.length > 0 && this.children[this.children.length - 1] instanceof CodeNode) {\n\t\t\t\tthis.children[this.children.length - 1].addGeneratedCode(generatedCode);\n\t\t\t} else {\n\t\t\t\tthis.children.push(new CodeNode(generatedCode));\n\t\t\t}\n\t\t} else if(generatedCode.getMappings && generatedCode.getGeneratedCode) {\n\t\t\tthis.children.push(generatedCode);\n\t\t} else if(generatedCode.children) {\n\t\t\tgeneratedCode.children.forEach(function(sln) {\n\t\t\t\tthis.children.push(sln);\n\t\t\t}, this);\n\t\t} else {\n\t\t\tthrow new Error(\"Invalid arguments to SourceListMap.protfotype.add: Expected string, Node or SourceListMap\");\n\t\t}\n\t};\n\n\tpreprend(generatedCode, source, originalSource) {\n\t\tif(typeof generatedCode === \"string\") {\n\t\t\tif(source) {\n\t\t\t\tthis.children.unshift(new SourceNode(generatedCode, source, originalSource));\n\t\t\t} else if(this.children.length > 0 && this.children[this.children.length - 1].preprendGeneratedCode) {\n\t\t\t\tthis.children[this.children.length - 1].preprendGeneratedCode(generatedCode);\n\t\t\t} else {\n\t\t\t\tthis.children.unshift(new CodeNode(generatedCode));\n\t\t\t}\n\t\t} else if(generatedCode.getMappings && generatedCode.getGeneratedCode) {\n\t\t\tthis.children.unshift(generatedCode);\n\t\t} else if(generatedCode.children) {\n\t\t\tgeneratedCode.children.slice().reverse().forEach(function(sln) {\n\t\t\t\tthis.children.unshift(sln);\n\t\t\t}, this);\n\t\t} else {\n\t\t\tthrow new Error(\"Invalid arguments to SourceListMap.protfotype.prerend: Expected string, Node or SourceListMap\");\n\t\t}\n\t};\n\n\tmapGeneratedCode(fn) {\n\t\tconst normalizedNodes = [];\n\t\tthis.children.forEach(function(sln) {\n\t\t\tsln.getNormalizedNodes().forEach(function(newNode) {\n\t\t\t\tnormalizedNodes.push(newNode);\n\t\t\t});\n\t\t});\n\t\tconst optimizedNodes = [];\n\t\tnormalizedNodes.forEach(function(sln) {\n\t\t\tsln = sln.mapGeneratedCode(fn);\n\t\t\tif(optimizedNodes.length === 0) {\n\t\t\t\toptimizedNodes.push(sln);\n\t\t\t} else {\n\t\t\t\tconst last = optimizedNodes[optimizedNodes.length - 1];\n\t\t\t\tconst mergedNode = last.merge(sln);\n\t\t\t\tif(mergedNode) {\n\t\t\t\t\toptimizedNodes[optimizedNodes.length - 1] = mergedNode;\n\t\t\t\t} else {\n\t\t\t\t\toptimizedNodes.push(sln);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\treturn new SourceListMap(optimizedNodes);\n\t};\n\n\ttoString() {\n\t\treturn this.children.map(function(sln) {\n\t\t\treturn sln.getGeneratedCode();\n\t\t}).join(\"\");\n\t};\n\n\ttoStringWithSourceMap(options) {\n\t\tconst mappingsContext = new MappingsContext();\n\t\tconst source = this.children.map(function(sln) {\n\t\t\treturn sln.getGeneratedCode();\n\t\t}).join(\"\");\n\t\tconst mappings = this.children.map(function(sln) {\n\t\t\treturn sln.getMappings(mappingsContext);\n\t\t}).join(\"\");\n\t\tconst arrays = mappingsContext.getArrays();\n\t\treturn {\n\t\t\tsource,\n\t\t\tmap: {\n\t\t\t\tversion: 3,\n\t\t\t\tfile: options && options.file,\n\t\t\t\tsources: arrays.sources,\n\t\t\t\tsourcesContent: mappingsContext.hasSourceContent ? arrays.sourcesContent : undefined,\n\t\t\t\tmappings: mappings\n\t\t\t}\n\t\t};\n\t}\n}\n\nmodule.exports = SourceListMap;\n"]},"metadata":{},"sourceType":"script"}