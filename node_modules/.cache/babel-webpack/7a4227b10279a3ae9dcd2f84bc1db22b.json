{"ast":null,"code":"/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n(function (factory) {\n  if (typeof module === \"object\" && typeof module.exports === \"object\") {\n    var v = factory(require, exports);\n    if (v !== undefined) module.exports = v;\n  } else if (typeof define === \"function\" && define.amd) {\n    define(\"@angular/compiler/src/i18n/message_bundle\", [\"require\", \"exports\", \"tslib\", \"@angular/compiler/src/i18n/extractor_merger\", \"@angular/compiler/src/i18n/i18n_ast\"], factory);\n  }\n})(function (require, exports) {\n  \"use strict\";\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.MessageBundle = void 0;\n\n  var tslib_1 = require(\"tslib\");\n\n  var extractor_merger_1 = require(\"@angular/compiler/src/i18n/extractor_merger\");\n\n  var i18n = require(\"@angular/compiler/src/i18n/i18n_ast\");\n  /**\n   * A container for message extracted from the templates.\n   */\n\n\n  var MessageBundle =\n  /** @class */\n  function () {\n    function MessageBundle(_htmlParser, _implicitTags, _implicitAttrs, _locale) {\n      if (_locale === void 0) {\n        _locale = null;\n      }\n\n      this._htmlParser = _htmlParser;\n      this._implicitTags = _implicitTags;\n      this._implicitAttrs = _implicitAttrs;\n      this._locale = _locale;\n      this._messages = [];\n    }\n\n    MessageBundle.prototype.updateFromTemplate = function (html, url, interpolationConfig) {\n      var _a;\n\n      var htmlParserResult = this._htmlParser.parse(html, url, {\n        tokenizeExpansionForms: true,\n        interpolationConfig: interpolationConfig\n      });\n\n      if (htmlParserResult.errors.length) {\n        return htmlParserResult.errors;\n      }\n\n      var i18nParserResult = extractor_merger_1.extractMessages(htmlParserResult.rootNodes, interpolationConfig, this._implicitTags, this._implicitAttrs);\n\n      if (i18nParserResult.errors.length) {\n        return i18nParserResult.errors;\n      }\n\n      (_a = this._messages).push.apply(_a, tslib_1.__spread(i18nParserResult.messages));\n\n      return [];\n    }; // Return the message in the internal format\n    // The public (serialized) format might be different, see the `write` method.\n\n\n    MessageBundle.prototype.getMessages = function () {\n      return this._messages;\n    };\n\n    MessageBundle.prototype.write = function (serializer, filterSources) {\n      var messages = {};\n      var mapperVisitor = new MapPlaceholderNames(); // Deduplicate messages based on their ID\n\n      this._messages.forEach(function (message) {\n        var _a;\n\n        var id = serializer.digest(message);\n\n        if (!messages.hasOwnProperty(id)) {\n          messages[id] = message;\n        } else {\n          (_a = messages[id].sources).push.apply(_a, tslib_1.__spread(message.sources));\n        }\n      }); // Transform placeholder names using the serializer mapping\n\n\n      var msgList = Object.keys(messages).map(function (id) {\n        var mapper = serializer.createNameMapper(messages[id]);\n        var src = messages[id];\n        var nodes = mapper ? mapperVisitor.convert(src.nodes, mapper) : src.nodes;\n        var transformedMessage = new i18n.Message(nodes, {}, {}, src.meaning, src.description, id);\n        transformedMessage.sources = src.sources;\n\n        if (filterSources) {\n          transformedMessage.sources.forEach(function (source) {\n            return source.filePath = filterSources(source.filePath);\n          });\n        }\n\n        return transformedMessage;\n      });\n      return serializer.write(msgList, this._locale);\n    };\n\n    return MessageBundle;\n  }();\n\n  exports.MessageBundle = MessageBundle; // Transform an i18n AST by renaming the placeholder nodes with the given mapper\n\n  var MapPlaceholderNames =\n  /** @class */\n  function (_super) {\n    tslib_1.__extends(MapPlaceholderNames, _super);\n\n    function MapPlaceholderNames() {\n      return _super !== null && _super.apply(this, arguments) || this;\n    }\n\n    MapPlaceholderNames.prototype.convert = function (nodes, mapper) {\n      var _this = this;\n\n      return mapper ? nodes.map(function (n) {\n        return n.visit(_this, mapper);\n      }) : nodes;\n    };\n\n    MapPlaceholderNames.prototype.visitTagPlaceholder = function (ph, mapper) {\n      var _this = this;\n\n      var startName = mapper.toPublicName(ph.startName);\n      var closeName = ph.closeName ? mapper.toPublicName(ph.closeName) : ph.closeName;\n      var children = ph.children.map(function (n) {\n        return n.visit(_this, mapper);\n      });\n      return new i18n.TagPlaceholder(ph.tag, ph.attrs, startName, closeName, children, ph.isVoid, ph.sourceSpan, ph.startSourceSpan, ph.endSourceSpan);\n    };\n\n    MapPlaceholderNames.prototype.visitPlaceholder = function (ph, mapper) {\n      return new i18n.Placeholder(ph.value, mapper.toPublicName(ph.name), ph.sourceSpan);\n    };\n\n    MapPlaceholderNames.prototype.visitIcuPlaceholder = function (ph, mapper) {\n      return new i18n.IcuPlaceholder(ph.value, mapper.toPublicName(ph.name), ph.sourceSpan);\n    };\n\n    return MapPlaceholderNames;\n  }(i18n.CloneVisitor);\n});","map":{"version":3,"sources":["../../../../../../../packages/compiler/src/i18n/message_bundle.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {HtmlParser} from '../ml_parser/html_parser';\nimport {InterpolationConfig} from '../ml_parser/interpolation_config';\nimport {ParseError} from '../parse_util';\n\nimport {extractMessages} from './extractor_merger';\nimport * as i18n from './i18n_ast';\nimport {PlaceholderMapper, Serializer} from './serializers/serializer';\n\n\n/**\n * A container for message extracted from the templates.\n */\nexport class MessageBundle {\n  private _messages: i18n.Message[] = [];\n\n  constructor(\n      private _htmlParser: HtmlParser, private _implicitTags: string[],\n      private _implicitAttrs: {[k: string]: string[]}, private _locale: string|null = null) {}\n\n  updateFromTemplate(html: string, url: string, interpolationConfig: InterpolationConfig):\n      ParseError[] {\n    const htmlParserResult =\n        this._htmlParser.parse(html, url, {tokenizeExpansionForms: true, interpolationConfig});\n\n    if (htmlParserResult.errors.length) {\n      return htmlParserResult.errors;\n    }\n\n    const i18nParserResult = extractMessages(\n        htmlParserResult.rootNodes, interpolationConfig, this._implicitTags, this._implicitAttrs);\n\n    if (i18nParserResult.errors.length) {\n      return i18nParserResult.errors;\n    }\n\n    this._messages.push(...i18nParserResult.messages);\n    return [];\n  }\n\n  // Return the message in the internal format\n  // The public (serialized) format might be different, see the `write` method.\n  getMessages(): i18n.Message[] {\n    return this._messages;\n  }\n\n  write(serializer: Serializer, filterSources?: (path: string) => string): string {\n    const messages: {[id: string]: i18n.Message} = {};\n    const mapperVisitor = new MapPlaceholderNames();\n\n    // Deduplicate messages based on their ID\n    this._messages.forEach(message => {\n      const id = serializer.digest(message);\n      if (!messages.hasOwnProperty(id)) {\n        messages[id] = message;\n      } else {\n        messages[id].sources.push(...message.sources);\n      }\n    });\n\n    // Transform placeholder names using the serializer mapping\n    const msgList = Object.keys(messages).map(id => {\n      const mapper = serializer.createNameMapper(messages[id]);\n      const src = messages[id];\n      const nodes = mapper ? mapperVisitor.convert(src.nodes, mapper) : src.nodes;\n      let transformedMessage = new i18n.Message(nodes, {}, {}, src.meaning, src.description, id);\n      transformedMessage.sources = src.sources;\n      if (filterSources) {\n        transformedMessage.sources.forEach(\n            (source: i18n.MessageSpan) => source.filePath = filterSources(source.filePath));\n      }\n      return transformedMessage;\n    });\n\n    return serializer.write(msgList, this._locale);\n  }\n}\n\n// Transform an i18n AST by renaming the placeholder nodes with the given mapper\nclass MapPlaceholderNames extends i18n.CloneVisitor {\n  convert(nodes: i18n.Node[], mapper: PlaceholderMapper): i18n.Node[] {\n    return mapper ? nodes.map(n => n.visit(this, mapper)) : nodes;\n  }\n\n  visitTagPlaceholder(ph: i18n.TagPlaceholder, mapper: PlaceholderMapper): i18n.TagPlaceholder {\n    const startName = mapper.toPublicName(ph.startName)!;\n    const closeName = ph.closeName ? mapper.toPublicName(ph.closeName)! : ph.closeName;\n    const children = ph.children.map(n => n.visit(this, mapper));\n    return new i18n.TagPlaceholder(\n        ph.tag, ph.attrs, startName, closeName, children, ph.isVoid, ph.sourceSpan,\n        ph.startSourceSpan, ph.endSourceSpan);\n  }\n\n  visitPlaceholder(ph: i18n.Placeholder, mapper: PlaceholderMapper): i18n.Placeholder {\n    return new i18n.Placeholder(ph.value, mapper.toPublicName(ph.name)!, ph.sourceSpan);\n  }\n\n  visitIcuPlaceholder(ph: i18n.IcuPlaceholder, mapper: PlaceholderMapper): i18n.IcuPlaceholder {\n    return new i18n.IcuPlaceholder(ph.value, mapper.toPublicName(ph.name)!, ph.sourceSpan);\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}