{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/regenerator\");\n\nvar _toConsumableArray = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/toConsumableArray\");\n\nvar _objectSpread = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/objectSpread2\");\n\nvar _asyncToGenerator = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _createForOfIteratorHelper = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _slicedToArray = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.configureI18nBuild = exports.createI18nOptions = void 0;\n\nvar core_1 = require(\"@angular-devkit/core\");\n\nvar fs = require(\"fs\");\n\nvar os = require(\"os\");\n\nvar path = require(\"path\");\n\nvar rimraf = require(\"rimraf\");\n\nvar read_tsconfig_1 = require(\"../utils/read-tsconfig\");\n\nvar load_translations_1 = require(\"./load-translations\");\n\nfunction normalizeTranslationFileOption(option, locale, expectObjectInError) {\n  if (typeof option === 'string') {\n    return [option];\n  }\n\n  if (Array.isArray(option) && option.every(function (element) {\n    return typeof element === 'string';\n  })) {\n    return option;\n  }\n\n  var errorMessage = \"Project i18n locales translation field value for '\".concat(locale, \"' is malformed. \");\n\n  if (expectObjectInError) {\n    errorMessage += 'Expected a string, array of strings, or object.';\n  } else {\n    errorMessage += 'Expected a string or array of strings.';\n  }\n\n  throw new Error(errorMessage);\n}\n\nfunction createI18nOptions(metadata, inline) {\n  if (metadata.i18n !== undefined && !core_1.json.isJsonObject(metadata.i18n)) {\n    throw new Error('Project i18n field is malformed. Expected an object.');\n  }\n\n  metadata = metadata.i18n || {};\n  var i18n = {\n    inlineLocales: new Set(),\n    // en-US is the default locale added to Angular applications (https://angular.io/guide/i18n#i18n-pipes)\n    sourceLocale: 'en-US',\n    locales: {},\n\n    get shouldInline() {\n      return this.inlineLocales.size > 0;\n    }\n\n  };\n  var rawSourceLocale;\n  var rawSourceLocaleBaseHref;\n\n  if (core_1.json.isJsonObject(metadata.sourceLocale)) {\n    rawSourceLocale = metadata.sourceLocale.code;\n\n    if (metadata.sourceLocale.baseHref !== undefined && typeof metadata.sourceLocale.baseHref !== 'string') {\n      throw new Error('Project i18n sourceLocale baseHref field is malformed. Expected a string.');\n    }\n\n    rawSourceLocaleBaseHref = metadata.sourceLocale.baseHref;\n  } else {\n    rawSourceLocale = metadata.sourceLocale;\n  }\n\n  if (rawSourceLocale !== undefined) {\n    if (typeof rawSourceLocale !== 'string') {\n      throw new Error('Project i18n sourceLocale field is malformed. Expected a string.');\n    }\n\n    i18n.sourceLocale = rawSourceLocale;\n  }\n\n  i18n.locales[i18n.sourceLocale] = {\n    files: [],\n    baseHref: rawSourceLocaleBaseHref\n  };\n\n  if (metadata.locales !== undefined && !core_1.json.isJsonObject(metadata.locales)) {\n    throw new Error('Project i18n locales field is malformed. Expected an object.');\n  } else if (metadata.locales) {\n    for (var _i = 0, _Object$entries = Object.entries(metadata.locales); _i < _Object$entries.length; _i++) {\n      var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),\n          locale = _Object$entries$_i[0],\n          options = _Object$entries$_i[1];\n\n      var translationFiles = void 0;\n      var baseHref = void 0;\n\n      if (core_1.json.isJsonObject(options)) {\n        translationFiles = normalizeTranslationFileOption(options.translation, locale, false);\n\n        if (typeof options.baseHref === 'string') {\n          baseHref = options.baseHref;\n        }\n      } else {\n        translationFiles = normalizeTranslationFileOption(options, locale, true);\n      }\n\n      if (locale === i18n.sourceLocale) {\n        throw new Error(\"An i18n locale ('\".concat(locale, \"') cannot both be a source locale and provide a translation.\"));\n      }\n\n      i18n.locales[locale] = {\n        files: translationFiles.map(function (file) {\n          return {\n            path: file\n          };\n        }),\n        baseHref: baseHref\n      };\n    }\n  }\n\n  if (inline === true) {\n    i18n.inlineLocales.add(i18n.sourceLocale);\n    Object.keys(i18n.locales).forEach(function (locale) {\n      return i18n.inlineLocales.add(locale);\n    });\n  } else if (inline) {\n    var _iterator = _createForOfIteratorHelper(inline),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var _locale = _step.value;\n\n        if (!i18n.locales[_locale] && i18n.sourceLocale !== _locale) {\n          throw new Error(\"Requested locale '\".concat(_locale, \"' is not defined for the project.\"));\n        }\n\n        i18n.inlineLocales.add(_locale);\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n  }\n\n  return i18n;\n}\n\nexports.createI18nOptions = createI18nOptions;\n\nfunction configureI18nBuild(_x, _x2) {\n  return _configureI18nBuild.apply(this, arguments);\n}\n\nfunction _configureI18nBuild() {\n  _configureI18nBuild = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(context, options) {\n    var buildOptions, tsConfig, usingIvy, metadata, i18n, _i2, _arr, deprecatedOption, projectRoot, localeDataBasePath, loader, usedFormats, _i3, _Object$entries2, _Object$entries2$_i, locale, desc, localeDataPath, _locale$split, _locale$split2, first, _iterator2, _step2, file, loadResult, _iterator3, _step3, diagnostics, _i4, _Object$entries3, _Object$entries3$_i, id, message, tempPath;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (context.target) {\n              _context.next = 2;\n              break;\n            }\n\n            throw new Error('The builder requires a target.');\n\n          case 2:\n            buildOptions = _objectSpread({}, options);\n            tsConfig = read_tsconfig_1.readTsconfig(buildOptions.tsConfig, context.workspaceRoot);\n            usingIvy = tsConfig.options.enableIvy !== false;\n            _context.next = 7;\n            return context.getProjectMetadata(context.target);\n\n          case 7:\n            metadata = _context.sent;\n            i18n = createI18nOptions(metadata, buildOptions.localize); // Until 11.0, support deprecated i18n options when not using new localize option\n            // i18nFormat is automatically calculated\n\n            if (!(buildOptions.localize === undefined && usingIvy)) {\n              _context.next = 13;\n              break;\n            }\n\n            mergeDeprecatedI18nOptions(i18n, buildOptions.i18nLocale, buildOptions.i18nFile);\n            _context.next = 18;\n            break;\n\n          case 13:\n            if (!(buildOptions.localize !== undefined && !usingIvy)) {\n              _context.next = 18;\n              break;\n            }\n\n            if (!(buildOptions.localize === true || Array.isArray(buildOptions.localize) && buildOptions.localize.length > 1)) {\n              _context.next = 16;\n              break;\n            }\n\n            throw new Error(\"Localization with multiple locales in one build is not supported with View Engine.\");\n\n          case 16:\n            for (_i2 = 0, _arr = ['i18nLocale', 'i18nFormat', 'i18nFile']; _i2 < _arr.length; _i2++) {\n              deprecatedOption = _arr[_i2];\n\n              // tslint:disable-next-line: no-any\n              if (typeof buildOptions[deprecatedOption] !== 'undefined') {\n                context.logger.warn(\"Option 'localize' and deprecated '\".concat(deprecatedOption, \"' found.  Using 'localize'.\"));\n              }\n            }\n\n            if (buildOptions.localize === false || Array.isArray(buildOptions.localize) && buildOptions.localize.length === 0) {\n              buildOptions.i18nFile = undefined;\n              buildOptions.i18nLocale = undefined;\n              buildOptions.i18nFormat = undefined;\n            }\n\n          case 18:\n            // Clear deprecated options when using Ivy to prevent unintended behavior\n            if (usingIvy) {\n              buildOptions.i18nFile = undefined;\n              buildOptions.i18nFormat = undefined;\n              buildOptions.i18nLocale = undefined;\n            }\n\n            if (!(i18n.inlineLocales.size > 0)) {\n              _context.next = 93;\n              break;\n            }\n\n            projectRoot = path.join(context.workspaceRoot, metadata.root || '');\n            localeDataBasePath = findLocaleDataBasePath(projectRoot);\n\n            if (localeDataBasePath) {\n              _context.next = 24;\n              break;\n            }\n\n            throw new Error(\"Unable to find locale data within '@angular/common'. Please ensure '@angular/common' is installed.\");\n\n          case 24:\n            _context.next = 26;\n            return load_translations_1.createTranslationLoader();\n\n          case 26:\n            loader = _context.sent;\n            usedFormats = new Set();\n            _i3 = 0, _Object$entries2 = Object.entries(i18n.locales);\n\n          case 29:\n            if (!(_i3 < _Object$entries2.length)) {\n              _context.next = 84;\n              break;\n            }\n\n            _Object$entries2$_i = _slicedToArray(_Object$entries2[_i3], 2), locale = _Object$entries2$_i[0], desc = _Object$entries2$_i[1];\n\n            if (i18n.inlineLocales.has(locale)) {\n              _context.next = 33;\n              break;\n            }\n\n            return _context.abrupt(\"continue\", 81);\n\n          case 33:\n            localeDataPath = findLocaleDataPath(locale, localeDataBasePath);\n\n            if (!localeDataPath) {\n              _locale$split = locale.split('-'), _locale$split2 = _slicedToArray(_locale$split, 1), first = _locale$split2[0];\n\n              if (first) {\n                localeDataPath = findLocaleDataPath(first.toLowerCase(), localeDataBasePath);\n\n                if (localeDataPath) {\n                  context.logger.warn(\"Locale data for '\".concat(locale, \"' cannot be found.  Using locale data for '\").concat(first, \"'.\"));\n                }\n              }\n            }\n\n            if (!localeDataPath) {\n              context.logger.warn(\"Locale data for '\".concat(locale, \"' cannot be found.  No locale data will be included for this locale.\"));\n            } else {\n              desc.dataPath = localeDataPath;\n            }\n\n            if (desc.files.length) {\n              _context.next = 38;\n              break;\n            }\n\n            return _context.abrupt(\"continue\", 81);\n\n          case 38:\n            _iterator2 = _createForOfIteratorHelper(desc.files);\n            _context.prev = 39;\n\n            _iterator2.s();\n\n          case 41:\n            if ((_step2 = _iterator2.n()).done) {\n              _context.next = 73;\n              break;\n            }\n\n            file = _step2.value;\n            loadResult = loader(path.join(context.workspaceRoot, file.path));\n            _iterator3 = _createForOfIteratorHelper(loadResult.diagnostics.messages);\n            _context.prev = 45;\n\n            _iterator3.s();\n\n          case 47:\n            if ((_step3 = _iterator3.n()).done) {\n              _context.next = 56;\n              break;\n            }\n\n            diagnostics = _step3.value;\n\n            if (!(diagnostics.type === 'error')) {\n              _context.next = 53;\n              break;\n            }\n\n            throw new Error(\"Error parsing translation file '\".concat(file.path, \"': \").concat(diagnostics.message));\n\n          case 53:\n            context.logger.warn(\"WARNING [\".concat(file.path, \"]: \").concat(diagnostics.message));\n\n          case 54:\n            _context.next = 47;\n            break;\n\n          case 56:\n            _context.next = 61;\n            break;\n\n          case 58:\n            _context.prev = 58;\n            _context.t0 = _context[\"catch\"](45);\n\n            _iterator3.e(_context.t0);\n\n          case 61:\n            _context.prev = 61;\n\n            _iterator3.f();\n\n            return _context.finish(61);\n\n          case 64:\n            if (loadResult.locale !== undefined && loadResult.locale !== locale) {\n              context.logger.warn(\"WARNING [\".concat(file.path, \"]: File target locale ('\").concat(loadResult.locale, \"') does not match configured locale ('\").concat(locale, \"')\"));\n            }\n\n            usedFormats.add(loadResult.format);\n\n            if (!(usedFormats.size > 1 && tsConfig.options.enableI18nLegacyMessageIdFormat !== false)) {\n              _context.next = 68;\n              break;\n            }\n\n            throw new Error('Localization currently only supports using one type of translation file format for the entire application.');\n\n          case 68:\n            file.format = loadResult.format;\n            file.integrity = loadResult.integrity;\n\n            if (desc.translation) {\n              // Merge translations\n              for (_i4 = 0, _Object$entries3 = Object.entries(loadResult.translations); _i4 < _Object$entries3.length; _i4++) {\n                _Object$entries3$_i = _slicedToArray(_Object$entries3[_i4], 2), id = _Object$entries3$_i[0], message = _Object$entries3$_i[1];\n\n                if (desc.translation[id] !== undefined) {\n                  context.logger.warn(\"WARNING [\".concat(file.path, \"]: Duplicate translations for message '\").concat(id, \"' when merging\"));\n                }\n\n                desc.translation[id] = message;\n              }\n            } else {\n              // First or only translation file\n              desc.translation = loadResult.translations;\n            }\n\n          case 71:\n            _context.next = 41;\n            break;\n\n          case 73:\n            _context.next = 78;\n            break;\n\n          case 75:\n            _context.prev = 75;\n            _context.t1 = _context[\"catch\"](39);\n\n            _iterator2.e(_context.t1);\n\n          case 78:\n            _context.prev = 78;\n\n            _iterator2.f();\n\n            return _context.finish(78);\n\n          case 81:\n            _i3++;\n            _context.next = 29;\n            break;\n\n          case 84:\n            // Legacy message id's require the format of the translations\n            if (usedFormats.size > 0) {\n              buildOptions.i18nFormat = _toConsumableArray(usedFormats)[0];\n            } // Provide support for using the Ivy i18n options with VE\n\n\n            if (usingIvy) {\n              _context.next = 93;\n              break;\n            }\n\n            i18n.veCompatLocale = buildOptions.i18nLocale = _toConsumableArray(i18n.inlineLocales)[0];\n\n            if (!(buildOptions.i18nLocale !== i18n.sourceLocale)) {\n              _context.next = 91;\n              break;\n            }\n\n            if (!(i18n.locales[buildOptions.i18nLocale].files.length > 1)) {\n              _context.next = 90;\n              break;\n            }\n\n            throw new Error('Localization with View Engine only supports using a single translation file per locale.');\n\n          case 90:\n            buildOptions.i18nFile = i18n.locales[buildOptions.i18nLocale].files[0].path;\n\n          case 91:\n            // Clear inline locales to prevent any new i18n related processing\n            i18n.inlineLocales.clear(); // Update the output path to include the locale to mimic Ivy localize behavior\n\n            buildOptions.outputPath = path.join(buildOptions.outputPath, buildOptions.i18nLocale);\n\n          case 93:\n            // If inlining store the output in a temporary location to facilitate post-processing\n            if (i18n.shouldInline) {\n              tempPath = fs.mkdtempSync(path.join(fs.realpathSync(os.tmpdir()), 'angular-cli-i18n-'));\n              buildOptions.outputPath = tempPath; // Remove temporary directory used for i18n processing\n\n              process.on('exit', function () {\n                try {\n                  rimraf.sync(tempPath);\n                } catch (_a) {}\n              });\n            }\n\n            return _context.abrupt(\"return\", {\n              buildOptions: buildOptions,\n              i18n: i18n\n            });\n\n          case 95:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[39, 75, 78, 81], [45, 58, 61, 64]]);\n  }));\n  return _configureI18nBuild.apply(this, arguments);\n}\n\nexports.configureI18nBuild = configureI18nBuild;\n\nfunction mergeDeprecatedI18nOptions(i18n, i18nLocale, i18nFile) {\n  if (i18nFile !== undefined && i18nLocale === undefined) {\n    throw new Error(\"Option 'i18nFile' cannot be used without the 'i18nLocale' option.\");\n  }\n\n  if (i18nLocale !== undefined) {\n    i18n.inlineLocales.clear();\n    i18n.inlineLocales.add(i18nLocale);\n\n    if (i18nFile !== undefined) {\n      i18n.locales[i18nLocale] = {\n        files: [{\n          path: i18nFile\n        }],\n        baseHref: ''\n      };\n    } else {\n      // If no file, treat the locale as the source locale\n      // This mimics deprecated behavior\n      i18n.sourceLocale = i18nLocale;\n      i18n.locales[i18nLocale] = {\n        files: [],\n        baseHref: ''\n      };\n    }\n\n    i18n.flatOutput = true;\n  }\n\n  return i18n;\n}\n\nfunction findLocaleDataBasePath(projectRoot) {\n  try {\n    var commonPath = path.dirname(require.resolve('@angular/common/package.json', {\n      paths: [projectRoot]\n    }));\n    var localesPath = path.join(commonPath, 'locales/global');\n\n    if (!fs.existsSync(localesPath)) {\n      return null;\n    }\n\n    return localesPath;\n  } catch (_a) {\n    return null;\n  }\n}\n\nfunction findLocaleDataPath(locale, basePath) {\n  // Remove private use subtags\n  var scrubbedLocale = locale.replace(/-x(-[a-zA-Z0-9]{1,8})+$/, '');\n  var localeDataPath = path.join(basePath, scrubbedLocale + '.js');\n\n  if (!fs.existsSync(localeDataPath)) {\n    if (scrubbedLocale === 'en-US') {\n      // fallback to known existing en-US locale data as of 9.0\n      return findLocaleDataPath('en-US-POSIX', basePath);\n    }\n\n    return null;\n  }\n\n  return localeDataPath;\n}","map":{"version":3,"sources":["/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@angular-devkit/build-angular/src/utils/i18n-options.js"],"names":["Object","defineProperty","exports","value","configureI18nBuild","createI18nOptions","core_1","require","fs","os","path","rimraf","read_tsconfig_1","load_translations_1","normalizeTranslationFileOption","option","locale","expectObjectInError","Array","isArray","every","element","errorMessage","Error","metadata","inline","i18n","undefined","json","isJsonObject","inlineLocales","Set","sourceLocale","locales","shouldInline","size","rawSourceLocale","rawSourceLocaleBaseHref","code","baseHref","files","entries","options","translationFiles","translation","map","file","add","keys","forEach","context","target","buildOptions","tsConfig","readTsconfig","workspaceRoot","usingIvy","enableIvy","getProjectMetadata","localize","mergeDeprecatedI18nOptions","i18nLocale","i18nFile","length","deprecatedOption","logger","warn","i18nFormat","projectRoot","join","root","localeDataBasePath","findLocaleDataBasePath","createTranslationLoader","loader","usedFormats","desc","has","localeDataPath","findLocaleDataPath","split","first","toLowerCase","dataPath","loadResult","diagnostics","messages","type","message","format","enableI18nLegacyMessageIdFormat","integrity","translations","id","veCompatLocale","clear","outputPath","tempPath","mkdtempSync","realpathSync","tmpdir","process","on","sync","_a","flatOutput","commonPath","dirname","resolve","paths","localesPath","existsSync","basePath","scrubbedLocale","replace"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.configureI18nBuild = exports.createI18nOptions = void 0;\nconst core_1 = require(\"@angular-devkit/core\");\nconst fs = require(\"fs\");\nconst os = require(\"os\");\nconst path = require(\"path\");\nconst rimraf = require(\"rimraf\");\nconst read_tsconfig_1 = require(\"../utils/read-tsconfig\");\nconst load_translations_1 = require(\"./load-translations\");\nfunction normalizeTranslationFileOption(option, locale, expectObjectInError) {\n    if (typeof option === 'string') {\n        return [option];\n    }\n    if (Array.isArray(option) && option.every((element) => typeof element === 'string')) {\n        return option;\n    }\n    let errorMessage = `Project i18n locales translation field value for '${locale}' is malformed. `;\n    if (expectObjectInError) {\n        errorMessage += 'Expected a string, array of strings, or object.';\n    }\n    else {\n        errorMessage += 'Expected a string or array of strings.';\n    }\n    throw new Error(errorMessage);\n}\nfunction createI18nOptions(metadata, inline) {\n    if (metadata.i18n !== undefined && !core_1.json.isJsonObject(metadata.i18n)) {\n        throw new Error('Project i18n field is malformed. Expected an object.');\n    }\n    metadata = metadata.i18n || {};\n    const i18n = {\n        inlineLocales: new Set(),\n        // en-US is the default locale added to Angular applications (https://angular.io/guide/i18n#i18n-pipes)\n        sourceLocale: 'en-US',\n        locales: {},\n        get shouldInline() {\n            return this.inlineLocales.size > 0;\n        },\n    };\n    let rawSourceLocale;\n    let rawSourceLocaleBaseHref;\n    if (core_1.json.isJsonObject(metadata.sourceLocale)) {\n        rawSourceLocale = metadata.sourceLocale.code;\n        if (metadata.sourceLocale.baseHref !== undefined && typeof metadata.sourceLocale.baseHref !== 'string') {\n            throw new Error('Project i18n sourceLocale baseHref field is malformed. Expected a string.');\n        }\n        rawSourceLocaleBaseHref = metadata.sourceLocale.baseHref;\n    }\n    else {\n        rawSourceLocale = metadata.sourceLocale;\n    }\n    if (rawSourceLocale !== undefined) {\n        if (typeof rawSourceLocale !== 'string') {\n            throw new Error('Project i18n sourceLocale field is malformed. Expected a string.');\n        }\n        i18n.sourceLocale = rawSourceLocale;\n    }\n    i18n.locales[i18n.sourceLocale] = {\n        files: [],\n        baseHref: rawSourceLocaleBaseHref,\n    };\n    if (metadata.locales !== undefined && !core_1.json.isJsonObject(metadata.locales)) {\n        throw new Error('Project i18n locales field is malformed. Expected an object.');\n    }\n    else if (metadata.locales) {\n        for (const [locale, options] of Object.entries(metadata.locales)) {\n            let translationFiles;\n            let baseHref;\n            if (core_1.json.isJsonObject(options)) {\n                translationFiles = normalizeTranslationFileOption(options.translation, locale, false);\n                if (typeof options.baseHref === 'string') {\n                    baseHref = options.baseHref;\n                }\n            }\n            else {\n                translationFiles = normalizeTranslationFileOption(options, locale, true);\n            }\n            if (locale === i18n.sourceLocale) {\n                throw new Error(`An i18n locale ('${locale}') cannot both be a source locale and provide a translation.`);\n            }\n            i18n.locales[locale] = {\n                files: translationFiles.map((file) => ({ path: file })),\n                baseHref,\n            };\n        }\n    }\n    if (inline === true) {\n        i18n.inlineLocales.add(i18n.sourceLocale);\n        Object.keys(i18n.locales).forEach(locale => i18n.inlineLocales.add(locale));\n    }\n    else if (inline) {\n        for (const locale of inline) {\n            if (!i18n.locales[locale] && i18n.sourceLocale !== locale) {\n                throw new Error(`Requested locale '${locale}' is not defined for the project.`);\n            }\n            i18n.inlineLocales.add(locale);\n        }\n    }\n    return i18n;\n}\nexports.createI18nOptions = createI18nOptions;\nasync function configureI18nBuild(context, options) {\n    if (!context.target) {\n        throw new Error('The builder requires a target.');\n    }\n    const buildOptions = { ...options };\n    const tsConfig = read_tsconfig_1.readTsconfig(buildOptions.tsConfig, context.workspaceRoot);\n    const usingIvy = tsConfig.options.enableIvy !== false;\n    const metadata = await context.getProjectMetadata(context.target);\n    const i18n = createI18nOptions(metadata, buildOptions.localize);\n    // Until 11.0, support deprecated i18n options when not using new localize option\n    // i18nFormat is automatically calculated\n    if (buildOptions.localize === undefined && usingIvy) {\n        mergeDeprecatedI18nOptions(i18n, buildOptions.i18nLocale, buildOptions.i18nFile);\n    }\n    else if (buildOptions.localize !== undefined && !usingIvy) {\n        if (buildOptions.localize === true ||\n            (Array.isArray(buildOptions.localize) && buildOptions.localize.length > 1)) {\n            throw new Error(`Localization with multiple locales in one build is not supported with View Engine.`);\n        }\n        for (const deprecatedOption of ['i18nLocale', 'i18nFormat', 'i18nFile']) {\n            // tslint:disable-next-line: no-any\n            if (typeof buildOptions[deprecatedOption] !== 'undefined') {\n                context.logger.warn(`Option 'localize' and deprecated '${deprecatedOption}' found.  Using 'localize'.`);\n            }\n        }\n        if (buildOptions.localize === false ||\n            (Array.isArray(buildOptions.localize) && buildOptions.localize.length === 0)) {\n            buildOptions.i18nFile = undefined;\n            buildOptions.i18nLocale = undefined;\n            buildOptions.i18nFormat = undefined;\n        }\n    }\n    // Clear deprecated options when using Ivy to prevent unintended behavior\n    if (usingIvy) {\n        buildOptions.i18nFile = undefined;\n        buildOptions.i18nFormat = undefined;\n        buildOptions.i18nLocale = undefined;\n    }\n    if (i18n.inlineLocales.size > 0) {\n        const projectRoot = path.join(context.workspaceRoot, metadata.root || '');\n        const localeDataBasePath = findLocaleDataBasePath(projectRoot);\n        if (!localeDataBasePath) {\n            throw new Error(`Unable to find locale data within '@angular/common'. Please ensure '@angular/common' is installed.`);\n        }\n        // Load locales\n        const loader = await load_translations_1.createTranslationLoader();\n        const usedFormats = new Set();\n        for (const [locale, desc] of Object.entries(i18n.locales)) {\n            if (!i18n.inlineLocales.has(locale)) {\n                continue;\n            }\n            let localeDataPath = findLocaleDataPath(locale, localeDataBasePath);\n            if (!localeDataPath) {\n                const [first] = locale.split('-');\n                if (first) {\n                    localeDataPath = findLocaleDataPath(first.toLowerCase(), localeDataBasePath);\n                    if (localeDataPath) {\n                        context.logger.warn(`Locale data for '${locale}' cannot be found.  Using locale data for '${first}'.`);\n                    }\n                }\n            }\n            if (!localeDataPath) {\n                context.logger.warn(`Locale data for '${locale}' cannot be found.  No locale data will be included for this locale.`);\n            }\n            else {\n                desc.dataPath = localeDataPath;\n            }\n            if (!desc.files.length) {\n                continue;\n            }\n            for (const file of desc.files) {\n                const loadResult = loader(path.join(context.workspaceRoot, file.path));\n                for (const diagnostics of loadResult.diagnostics.messages) {\n                    if (diagnostics.type === 'error') {\n                        throw new Error(`Error parsing translation file '${file.path}': ${diagnostics.message}`);\n                    }\n                    else {\n                        context.logger.warn(`WARNING [${file.path}]: ${diagnostics.message}`);\n                    }\n                }\n                if (loadResult.locale !== undefined && loadResult.locale !== locale) {\n                    context.logger.warn(`WARNING [${file.path}]: File target locale ('${loadResult.locale}') does not match configured locale ('${locale}')`);\n                }\n                usedFormats.add(loadResult.format);\n                if (usedFormats.size > 1 && tsConfig.options.enableI18nLegacyMessageIdFormat !== false) {\n                    // This limitation is only for legacy message id support (defaults to true as of 9.0)\n                    throw new Error('Localization currently only supports using one type of translation file format for the entire application.');\n                }\n                file.format = loadResult.format;\n                file.integrity = loadResult.integrity;\n                if (desc.translation) {\n                    // Merge translations\n                    for (const [id, message] of Object.entries(loadResult.translations)) {\n                        if (desc.translation[id] !== undefined) {\n                            context.logger.warn(`WARNING [${file.path}]: Duplicate translations for message '${id}' when merging`);\n                        }\n                        desc.translation[id] = message;\n                    }\n                }\n                else {\n                    // First or only translation file\n                    desc.translation = loadResult.translations;\n                }\n            }\n        }\n        // Legacy message id's require the format of the translations\n        if (usedFormats.size > 0) {\n            buildOptions.i18nFormat = [...usedFormats][0];\n        }\n        // Provide support for using the Ivy i18n options with VE\n        if (!usingIvy) {\n            i18n.veCompatLocale = buildOptions.i18nLocale = [...i18n.inlineLocales][0];\n            if (buildOptions.i18nLocale !== i18n.sourceLocale) {\n                if (i18n.locales[buildOptions.i18nLocale].files.length > 1) {\n                    throw new Error('Localization with View Engine only supports using a single translation file per locale.');\n                }\n                buildOptions.i18nFile = i18n.locales[buildOptions.i18nLocale].files[0].path;\n            }\n            // Clear inline locales to prevent any new i18n related processing\n            i18n.inlineLocales.clear();\n            // Update the output path to include the locale to mimic Ivy localize behavior\n            buildOptions.outputPath = path.join(buildOptions.outputPath, buildOptions.i18nLocale);\n        }\n    }\n    // If inlining store the output in a temporary location to facilitate post-processing\n    if (i18n.shouldInline) {\n        const tempPath = fs.mkdtempSync(path.join(fs.realpathSync(os.tmpdir()), 'angular-cli-i18n-'));\n        buildOptions.outputPath = tempPath;\n        // Remove temporary directory used for i18n processing\n        process.on('exit', () => {\n            try {\n                rimraf.sync(tempPath);\n            }\n            catch (_a) { }\n        });\n    }\n    return { buildOptions, i18n };\n}\nexports.configureI18nBuild = configureI18nBuild;\nfunction mergeDeprecatedI18nOptions(i18n, i18nLocale, i18nFile) {\n    if (i18nFile !== undefined && i18nLocale === undefined) {\n        throw new Error(`Option 'i18nFile' cannot be used without the 'i18nLocale' option.`);\n    }\n    if (i18nLocale !== undefined) {\n        i18n.inlineLocales.clear();\n        i18n.inlineLocales.add(i18nLocale);\n        if (i18nFile !== undefined) {\n            i18n.locales[i18nLocale] = { files: [{ path: i18nFile }], baseHref: '' };\n        }\n        else {\n            // If no file, treat the locale as the source locale\n            // This mimics deprecated behavior\n            i18n.sourceLocale = i18nLocale;\n            i18n.locales[i18nLocale] = { files: [], baseHref: '' };\n        }\n        i18n.flatOutput = true;\n    }\n    return i18n;\n}\nfunction findLocaleDataBasePath(projectRoot) {\n    try {\n        const commonPath = path.dirname(require.resolve('@angular/common/package.json', { paths: [projectRoot] }));\n        const localesPath = path.join(commonPath, 'locales/global');\n        if (!fs.existsSync(localesPath)) {\n            return null;\n        }\n        return localesPath;\n    }\n    catch (_a) {\n        return null;\n    }\n}\nfunction findLocaleDataPath(locale, basePath) {\n    // Remove private use subtags\n    const scrubbedLocale = locale.replace(/-x(-[a-zA-Z0-9]{1,8})+$/, '');\n    const localeDataPath = path.join(basePath, scrubbedLocale + '.js');\n    if (!fs.existsSync(localeDataPath)) {\n        if (scrubbedLocale === 'en-US') {\n            // fallback to known existing en-US locale data as of 9.0\n            return findLocaleDataPath('en-US-POSIX', basePath);\n        }\n        return null;\n    }\n    return localeDataPath;\n}\n"]},"metadata":{},"sourceType":"script"}