{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nvar _classCallCheck = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/createClass\");\n\nfunction getCacheId(request, withContext) {\n  return JSON.stringify({\n    context: withContext ? request.context : \"\",\n    path: request.path,\n    query: request.query,\n    request: request.request\n  });\n}\n\nmodule.exports = /*#__PURE__*/function () {\n  function UnsafeCachePlugin(source, filterPredicate, cache, withContext, target) {\n    _classCallCheck(this, UnsafeCachePlugin);\n\n    this.source = source;\n    this.filterPredicate = filterPredicate;\n    this.withContext = withContext;\n    this.cache = cache || {};\n    this.target = target;\n  }\n\n  _createClass(UnsafeCachePlugin, [{\n    key: \"apply\",\n    value: function apply(resolver) {\n      var _this = this;\n\n      var target = resolver.ensureHook(this.target);\n      resolver.getHook(this.source).tapAsync(\"UnsafeCachePlugin\", function (request, resolveContext, callback) {\n        if (!_this.filterPredicate(request)) return callback();\n        var cacheId = getCacheId(request, _this.withContext);\n        var cacheEntry = _this.cache[cacheId];\n\n        if (cacheEntry) {\n          return callback(null, cacheEntry);\n        }\n\n        resolver.doResolve(target, request, null, resolveContext, function (err, result) {\n          if (err) return callback(err);\n          if (result) return callback(null, _this.cache[cacheId] = result);\n          callback();\n        });\n      });\n    }\n  }]);\n\n  return UnsafeCachePlugin;\n}();","map":{"version":3,"sources":["/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/webpack/node_modules/enhanced-resolve/lib/UnsafeCachePlugin.js"],"names":["getCacheId","request","withContext","JSON","stringify","context","path","query","module","exports","source","filterPredicate","cache","target","resolver","ensureHook","getHook","tapAsync","resolveContext","callback","cacheId","cacheEntry","doResolve","err","result"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;;;;;AAEA,SAASA,UAAT,CAAoBC,OAApB,EAA6BC,WAA7B,EAA0C;AACzC,SAAOC,IAAI,CAACC,SAAL,CAAe;AACrBC,IAAAA,OAAO,EAAEH,WAAW,GAAGD,OAAO,CAACI,OAAX,GAAqB,EADpB;AAErBC,IAAAA,IAAI,EAAEL,OAAO,CAACK,IAFO;AAGrBC,IAAAA,KAAK,EAAEN,OAAO,CAACM,KAHM;AAIrBN,IAAAA,OAAO,EAAEA,OAAO,CAACA;AAJI,GAAf,CAAP;AAMA;;AAEDO,MAAM,CAACC,OAAP;AACC,6BAAYC,MAAZ,EAAoBC,eAApB,EAAqCC,KAArC,EAA4CV,WAA5C,EAAyDW,MAAzD,EAAiE;AAAA;;AAChE,SAAKH,MAAL,GAAcA,MAAd;AACA,SAAKC,eAAL,GAAuBA,eAAvB;AACA,SAAKT,WAAL,GAAmBA,WAAnB;AACA,SAAKU,KAAL,GAAaA,KAAK,IAAI,EAAtB;AACA,SAAKC,MAAL,GAAcA,MAAd;AACA;;AAPF;AAAA;AAAA,WASC,eAAMC,QAAN,EAAgB;AAAA;;AACf,UAAMD,MAAM,GAAGC,QAAQ,CAACC,UAAT,CAAoB,KAAKF,MAAzB,CAAf;AACAC,MAAAA,QAAQ,CACNE,OADF,CACU,KAAKN,MADf,EAEEO,QAFF,CAEW,mBAFX,EAEgC,UAAChB,OAAD,EAAUiB,cAAV,EAA0BC,QAA1B,EAAuC;AACrE,YAAI,CAAC,KAAI,CAACR,eAAL,CAAqBV,OAArB,CAAL,EAAoC,OAAOkB,QAAQ,EAAf;AACpC,YAAMC,OAAO,GAAGpB,UAAU,CAACC,OAAD,EAAU,KAAI,CAACC,WAAf,CAA1B;AACA,YAAMmB,UAAU,GAAG,KAAI,CAACT,KAAL,CAAWQ,OAAX,CAAnB;;AACA,YAAIC,UAAJ,EAAgB;AACf,iBAAOF,QAAQ,CAAC,IAAD,EAAOE,UAAP,CAAf;AACA;;AACDP,QAAAA,QAAQ,CAACQ,SAAT,CACCT,MADD,EAECZ,OAFD,EAGC,IAHD,EAICiB,cAJD,EAKC,UAACK,GAAD,EAAMC,MAAN,EAAiB;AAChB,cAAID,GAAJ,EAAS,OAAOJ,QAAQ,CAACI,GAAD,CAAf;AACT,cAAIC,MAAJ,EAAY,OAAOL,QAAQ,CAAC,IAAD,EAAQ,KAAI,CAACP,KAAL,CAAWQ,OAAX,IAAsBI,MAA9B,CAAf;AACZL,UAAAA,QAAQ;AACR,SATF;AAWA,OApBF;AAqBA;AAhCF;;AAAA;AAAA","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nfunction getCacheId(request, withContext) {\n\treturn JSON.stringify({\n\t\tcontext: withContext ? request.context : \"\",\n\t\tpath: request.path,\n\t\tquery: request.query,\n\t\trequest: request.request\n\t});\n}\n\nmodule.exports = class UnsafeCachePlugin {\n\tconstructor(source, filterPredicate, cache, withContext, target) {\n\t\tthis.source = source;\n\t\tthis.filterPredicate = filterPredicate;\n\t\tthis.withContext = withContext;\n\t\tthis.cache = cache || {};\n\t\tthis.target = target;\n\t}\n\n\tapply(resolver) {\n\t\tconst target = resolver.ensureHook(this.target);\n\t\tresolver\n\t\t\t.getHook(this.source)\n\t\t\t.tapAsync(\"UnsafeCachePlugin\", (request, resolveContext, callback) => {\n\t\t\t\tif (!this.filterPredicate(request)) return callback();\n\t\t\t\tconst cacheId = getCacheId(request, this.withContext);\n\t\t\t\tconst cacheEntry = this.cache[cacheId];\n\t\t\t\tif (cacheEntry) {\n\t\t\t\t\treturn callback(null, cacheEntry);\n\t\t\t\t}\n\t\t\t\tresolver.doResolve(\n\t\t\t\t\ttarget,\n\t\t\t\t\trequest,\n\t\t\t\t\tnull,\n\t\t\t\t\tresolveContext,\n\t\t\t\t\t(err, result) => {\n\t\t\t\t\t\tif (err) return callback(err);\n\t\t\t\t\t\tif (result) return callback(null, (this.cache[cacheId] = result));\n\t\t\t\t\t\tcallback();\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t});\n\t}\n};\n"]},"metadata":{},"sourceType":"script"}