{"ast":null,"code":"var log = require('../logger').create('launcher');\n\nfunction RetryLauncher(retryLimit) {\n  var _this = this;\n\n  this._retryLimit = retryLimit;\n  this.on('done', function () {\n    if (!_this.error) {\n      return;\n    }\n\n    if (_this._retryLimit > 0) {\n      log.info(\"Trying to start \".concat(_this.name, \" again (\").concat(retryLimit - _this._retryLimit + 1, \"/\").concat(retryLimit, \").\"));\n\n      _this.restart();\n\n      _this._retryLimit--;\n    } else if (_this._retryLimit === 0) {\n      log.error(\"\".concat(_this.name, \" failed \").concat(retryLimit, \" times (\").concat(_this.error, \"). Giving up.\"));\n    } else {\n      log.debug(\"\".concat(_this.name, \" failed (\").concat(_this.error, \"). Not restarting.\"));\n    }\n  });\n}\n\nRetryLauncher.decoratorFactory = function (retryLimit) {\n  return function (launcher) {\n    RetryLauncher.call(launcher, retryLimit);\n  };\n};\n\nRetryLauncher.decoratorFactory.$inject = ['config.retryLimit'];\nmodule.exports = RetryLauncher;","map":{"version":3,"sources":["/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/karma/lib/launchers/retry.js"],"names":["log","require","create","RetryLauncher","retryLimit","_retryLimit","on","error","info","name","restart","debug","decoratorFactory","launcher","call","$inject","module","exports"],"mappings":"AAAA,IAAMA,GAAG,GAAGC,OAAO,CAAC,WAAD,CAAP,CAAqBC,MAArB,CAA4B,UAA5B,CAAZ;;AAEA,SAASC,aAAT,CAAwBC,UAAxB,EAAoC;AAAA;;AAClC,OAAKC,WAAL,GAAmBD,UAAnB;AAEA,OAAKE,EAAL,CAAQ,MAAR,EAAgB,YAAM;AACpB,QAAI,CAAC,KAAI,CAACC,KAAV,EAAiB;AACf;AACD;;AAED,QAAI,KAAI,CAACF,WAAL,GAAmB,CAAvB,EAA0B;AACxBL,MAAAA,GAAG,CAACQ,IAAJ,2BAA4B,KAAI,CAACC,IAAjC,qBAAgDL,UAAU,GAAG,KAAI,CAACC,WAAlB,GAAgC,CAAhF,cAAqFD,UAArF;;AACA,MAAA,KAAI,CAACM,OAAL;;AACA,MAAA,KAAI,CAACL,WAAL;AACD,KAJD,MAIO,IAAI,KAAI,CAACA,WAAL,KAAqB,CAAzB,EAA4B;AACjCL,MAAAA,GAAG,CAACO,KAAJ,WAAa,KAAI,CAACE,IAAlB,qBAAiCL,UAAjC,qBAAsD,KAAI,CAACG,KAA3D;AACD,KAFM,MAEA;AACLP,MAAAA,GAAG,CAACW,KAAJ,WAAa,KAAI,CAACF,IAAlB,sBAAkC,KAAI,CAACF,KAAvC;AACD;AACF,GAdD;AAeD;;AAEDJ,aAAa,CAACS,gBAAd,GAAiC,UAAUR,UAAV,EAAsB;AACrD,SAAO,UAAUS,QAAV,EAAoB;AACzBV,IAAAA,aAAa,CAACW,IAAd,CAAmBD,QAAnB,EAA6BT,UAA7B;AACD,GAFD;AAGD,CAJD;;AAMAD,aAAa,CAACS,gBAAd,CAA+BG,OAA/B,GAAyC,CAAC,mBAAD,CAAzC;AAEAC,MAAM,CAACC,OAAP,GAAiBd,aAAjB","sourcesContent":["const log = require('../logger').create('launcher')\n\nfunction RetryLauncher (retryLimit) {\n  this._retryLimit = retryLimit\n\n  this.on('done', () => {\n    if (!this.error) {\n      return\n    }\n\n    if (this._retryLimit > 0) {\n      log.info(`Trying to start ${this.name} again (${retryLimit - this._retryLimit + 1}/${retryLimit}).`)\n      this.restart()\n      this._retryLimit--\n    } else if (this._retryLimit === 0) {\n      log.error(`${this.name} failed ${retryLimit} times (${this.error}). Giving up.`)\n    } else {\n      log.debug(`${this.name} failed (${this.error}). Not restarting.`)\n    }\n  })\n}\n\nRetryLauncher.decoratorFactory = function (retryLimit) {\n  return function (launcher) {\n    RetryLauncher.call(launcher, retryLimit)\n  }\n}\n\nRetryLauncher.decoratorFactory.$inject = ['config.retryLimit']\n\nmodule.exports = RetryLauncher\n"]},"metadata":{},"sourceType":"script"}