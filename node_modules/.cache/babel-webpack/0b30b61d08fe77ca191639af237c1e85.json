{"ast":null,"code":"/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n(function (factory) {\n  if (typeof module === \"object\" && typeof module.exports === \"object\") {\n    var v = factory(require, exports);\n    if (v !== undefined) module.exports = v;\n  } else if (typeof define === \"function\" && define.amd) {\n    define(\"@angular/compiler/src/style_compiler\", [\"require\", \"exports\", \"@angular/compiler/src/compile_metadata\", \"@angular/compiler/src/core\", \"@angular/compiler/src/output/output_ast\", \"@angular/compiler/src/shadow_css\"], factory);\n  }\n})(function (require, exports) {\n  \"use strict\";\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.StyleCompiler = exports.CompiledStylesheet = exports.StylesCompileDependency = exports.CONTENT_ATTR = exports.HOST_ATTR = void 0;\n\n  var compile_metadata_1 = require(\"@angular/compiler/src/compile_metadata\");\n\n  var core_1 = require(\"@angular/compiler/src/core\");\n\n  var o = require(\"@angular/compiler/src/output/output_ast\");\n\n  var shadow_css_1 = require(\"@angular/compiler/src/shadow_css\");\n\n  var COMPONENT_VARIABLE = '%COMP%';\n  exports.HOST_ATTR = \"_nghost-\" + COMPONENT_VARIABLE;\n  exports.CONTENT_ATTR = \"_ngcontent-\" + COMPONENT_VARIABLE;\n\n  var StylesCompileDependency =\n  /** @class */\n  function () {\n    function StylesCompileDependency(name, moduleUrl, setValue) {\n      this.name = name;\n      this.moduleUrl = moduleUrl;\n      this.setValue = setValue;\n    }\n\n    return StylesCompileDependency;\n  }();\n\n  exports.StylesCompileDependency = StylesCompileDependency;\n\n  var CompiledStylesheet =\n  /** @class */\n  function () {\n    function CompiledStylesheet(outputCtx, stylesVar, dependencies, isShimmed, meta) {\n      this.outputCtx = outputCtx;\n      this.stylesVar = stylesVar;\n      this.dependencies = dependencies;\n      this.isShimmed = isShimmed;\n      this.meta = meta;\n    }\n\n    return CompiledStylesheet;\n  }();\n\n  exports.CompiledStylesheet = CompiledStylesheet;\n\n  var StyleCompiler =\n  /** @class */\n  function () {\n    function StyleCompiler(_urlResolver) {\n      this._urlResolver = _urlResolver;\n      this._shadowCss = new shadow_css_1.ShadowCss();\n    }\n\n    StyleCompiler.prototype.compileComponent = function (outputCtx, comp) {\n      var template = comp.template;\n      return this._compileStyles(outputCtx, comp, new compile_metadata_1.CompileStylesheetMetadata({\n        styles: template.styles,\n        styleUrls: template.styleUrls,\n        moduleUrl: compile_metadata_1.identifierModuleUrl(comp.type)\n      }), this.needsStyleShim(comp), true);\n    };\n\n    StyleCompiler.prototype.compileStyles = function (outputCtx, comp, stylesheet, shim) {\n      if (shim === void 0) {\n        shim = this.needsStyleShim(comp);\n      }\n\n      return this._compileStyles(outputCtx, comp, stylesheet, shim, false);\n    };\n\n    StyleCompiler.prototype.needsStyleShim = function (comp) {\n      return comp.template.encapsulation === core_1.ViewEncapsulation.Emulated;\n    };\n\n    StyleCompiler.prototype._compileStyles = function (outputCtx, comp, stylesheet, shim, isComponentStylesheet) {\n      var _this = this;\n\n      var styleExpressions = stylesheet.styles.map(function (plainStyle) {\n        return o.literal(_this._shimIfNeeded(plainStyle, shim));\n      });\n      var dependencies = [];\n      stylesheet.styleUrls.forEach(function (styleUrl) {\n        var exprIndex = styleExpressions.length; // Note: This placeholder will be filled later.\n\n        styleExpressions.push(null);\n        dependencies.push(new StylesCompileDependency(getStylesVarName(null), styleUrl, function (value) {\n          return styleExpressions[exprIndex] = outputCtx.importExpr(value);\n        }));\n      }); // styles variable contains plain strings and arrays of other styles arrays (recursive),\n      // so we set its type to dynamic.\n\n      var stylesVar = getStylesVarName(isComponentStylesheet ? comp : null);\n      var stmt = o.variable(stylesVar).set(o.literalArr(styleExpressions, new o.ArrayType(o.DYNAMIC_TYPE, [o.TypeModifier.Const]))).toDeclStmt(null, isComponentStylesheet ? [o.StmtModifier.Final] : [o.StmtModifier.Final, o.StmtModifier.Exported]);\n      outputCtx.statements.push(stmt);\n      return new CompiledStylesheet(outputCtx, stylesVar, dependencies, shim, stylesheet);\n    };\n\n    StyleCompiler.prototype._shimIfNeeded = function (style, shim) {\n      return shim ? this._shadowCss.shimCssText(style, exports.CONTENT_ATTR, exports.HOST_ATTR) : style;\n    };\n\n    return StyleCompiler;\n  }();\n\n  exports.StyleCompiler = StyleCompiler;\n\n  function getStylesVarName(component) {\n    var result = \"styles\";\n\n    if (component) {\n      result += \"_\" + compile_metadata_1.identifierName(component.type);\n    }\n\n    return result;\n  }\n});","map":{"version":3,"sources":["../../../../../../packages/compiler/src/style_compiler.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CompileDirectiveMetadata, CompileIdentifierMetadata, CompileStylesheetMetadata, identifierModuleUrl, identifierName} from './compile_metadata';\nimport {ViewEncapsulation} from './core';\nimport * as o from './output/output_ast';\nimport {ShadowCss} from './shadow_css';\nimport {UrlResolver} from './url_resolver';\nimport {OutputContext} from './util';\n\nconst COMPONENT_VARIABLE = '%COMP%';\nexport const HOST_ATTR = `_nghost-${COMPONENT_VARIABLE}`;\nexport const CONTENT_ATTR = `_ngcontent-${COMPONENT_VARIABLE}`;\n\nexport class StylesCompileDependency {\n  constructor(\n      public name: string, public moduleUrl: string, public setValue: (value: any) => void) {}\n}\n\nexport class CompiledStylesheet {\n  constructor(\n      public outputCtx: OutputContext, public stylesVar: string,\n      public dependencies: StylesCompileDependency[], public isShimmed: boolean,\n      public meta: CompileStylesheetMetadata) {}\n}\n\nexport class StyleCompiler {\n  private _shadowCss: ShadowCss = new ShadowCss();\n\n  constructor(private _urlResolver: UrlResolver) {}\n\n  compileComponent(outputCtx: OutputContext, comp: CompileDirectiveMetadata): CompiledStylesheet {\n    const template = comp.template !;\n    return this._compileStyles(\n        outputCtx, comp, new CompileStylesheetMetadata({\n          styles: template.styles,\n          styleUrls: template.styleUrls,\n          moduleUrl: identifierModuleUrl(comp.type)\n        }),\n        this.needsStyleShim(comp), true);\n  }\n\n  compileStyles(\n      outputCtx: OutputContext, comp: CompileDirectiveMetadata,\n      stylesheet: CompileStylesheetMetadata,\n      shim: boolean = this.needsStyleShim(comp)): CompiledStylesheet {\n    return this._compileStyles(outputCtx, comp, stylesheet, shim, false);\n  }\n\n  needsStyleShim(comp: CompileDirectiveMetadata): boolean {\n    return comp.template !.encapsulation === ViewEncapsulation.Emulated;\n  }\n\n  private _compileStyles(\n      outputCtx: OutputContext, comp: CompileDirectiveMetadata,\n      stylesheet: CompileStylesheetMetadata, shim: boolean,\n      isComponentStylesheet: boolean): CompiledStylesheet {\n    const styleExpressions: o.Expression[] =\n        stylesheet.styles.map(plainStyle => o.literal(this._shimIfNeeded(plainStyle, shim)));\n    const dependencies: StylesCompileDependency[] = [];\n    stylesheet.styleUrls.forEach((styleUrl) => {\n      const exprIndex = styleExpressions.length;\n      // Note: This placeholder will be filled later.\n      styleExpressions.push(null!);\n      dependencies.push(new StylesCompileDependency(\n          getStylesVarName(null), styleUrl,\n          (value) => styleExpressions[exprIndex] = outputCtx.importExpr(value)));\n    });\n    // styles variable contains plain strings and arrays of other styles arrays (recursive),\n    // so we set its type to dynamic.\n    const stylesVar = getStylesVarName(isComponentStylesheet ? comp : null);\n    const stmt = o.variable(stylesVar)\n                     .set(o.literalArr(\n                         styleExpressions, new o.ArrayType(o.DYNAMIC_TYPE, [o.TypeModifier.Const])))\n                     .toDeclStmt(null, isComponentStylesheet ? [o.StmtModifier.Final] : [\n                       o.StmtModifier.Final, o.StmtModifier.Exported\n                     ]);\n    outputCtx.statements.push(stmt);\n    return new CompiledStylesheet(outputCtx, stylesVar, dependencies, shim, stylesheet);\n  }\n\n  private _shimIfNeeded(style: string, shim: boolean): string {\n    return shim ? this._shadowCss.shimCssText(style, CONTENT_ATTR, HOST_ATTR) : style;\n  }\n}\n\nfunction getStylesVarName(component: CompileDirectiveMetadata|null): string {\n  let result = `styles`;\n  if (component) {\n    result += `_${identifierName(component.type)}`;\n  }\n  return result;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}