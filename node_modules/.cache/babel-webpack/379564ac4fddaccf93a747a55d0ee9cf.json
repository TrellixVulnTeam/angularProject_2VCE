{"ast":null,"code":"'use strict';\n\nvar _require = require('rxjs'),\n    fromEvent = _require.fromEvent;\n\nvar _require2 = require('rxjs/operators'),\n    filter = _require2.filter,\n    map = _require2.map,\n    share = _require2.share,\n    takeUntil = _require2.takeUntil;\n\nfunction normalizeKeypressEvents(value, key) {\n  return {\n    value: value,\n    key: key || {}\n  };\n}\n\nmodule.exports = function (rl) {\n  var keypress = fromEvent(rl.input, 'keypress', normalizeKeypressEvents).pipe(takeUntil(fromEvent(rl, 'close'))) // Ignore `enter` key. On the readline, we only care about the `line` event.\n  .pipe(filter(function (_ref) {\n    var key = _ref.key;\n    return key.name !== 'enter' && key.name !== 'return';\n  }));\n  return {\n    line: fromEvent(rl, 'line'),\n    keypress: keypress,\n    normalizedUpKey: keypress.pipe(filter(function (_ref2) {\n      var key = _ref2.key;\n      return key.name === 'up' || key.name === 'k' || key.name === 'p' && key.ctrl;\n    }), share()),\n    normalizedDownKey: keypress.pipe(filter(function (_ref3) {\n      var key = _ref3.key;\n      return key.name === 'down' || key.name === 'j' || key.name === 'n' && key.ctrl;\n    }), share()),\n    numberKey: keypress.pipe(filter(function (e) {\n      return e.value && '123456789'.indexOf(e.value) >= 0;\n    }), map(function (e) {\n      return Number(e.value);\n    }), share()),\n    spaceKey: keypress.pipe(filter(function (_ref4) {\n      var key = _ref4.key;\n      return key && key.name === 'space';\n    }), share()),\n    aKey: keypress.pipe(filter(function (_ref5) {\n      var key = _ref5.key;\n      return key && key.name === 'a';\n    }), share()),\n    iKey: keypress.pipe(filter(function (_ref6) {\n      var key = _ref6.key;\n      return key && key.name === 'i';\n    }), share())\n  };\n};","map":{"version":3,"sources":["/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/inquirer/lib/utils/events.js"],"names":["require","fromEvent","filter","map","share","takeUntil","normalizeKeypressEvents","value","key","module","exports","rl","keypress","input","pipe","name","line","normalizedUpKey","ctrl","normalizedDownKey","numberKey","e","indexOf","Number","spaceKey","aKey","iKey"],"mappings":"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","sourcesContent":["'use strict';\nvar { fromEvent } = require('rxjs');\nvar { filter, map, share, takeUntil } = require('rxjs/operators');\n\nfunction normalizeKeypressEvents(value, key) {\n  return { value: value, key: key || {} };\n}\n\nmodule.exports = function (rl) {\n  var keypress = fromEvent(rl.input, 'keypress', normalizeKeypressEvents)\n    .pipe(takeUntil(fromEvent(rl, 'close')))\n    // Ignore `enter` key. On the readline, we only care about the `line` event.\n    .pipe(filter(({ key }) => key.name !== 'enter' && key.name !== 'return'));\n\n  return {\n    line: fromEvent(rl, 'line'),\n    keypress: keypress,\n\n    normalizedUpKey: keypress.pipe(\n      filter(\n        ({ key }) =>\n          key.name === 'up' || key.name === 'k' || (key.name === 'p' && key.ctrl)\n      ),\n      share()\n    ),\n\n    normalizedDownKey: keypress.pipe(\n      filter(\n        ({ key }) =>\n          key.name === 'down' || key.name === 'j' || (key.name === 'n' && key.ctrl)\n      ),\n      share()\n    ),\n\n    numberKey: keypress.pipe(\n      filter((e) => e.value && '123456789'.indexOf(e.value) >= 0),\n      map((e) => Number(e.value)),\n      share()\n    ),\n\n    spaceKey: keypress.pipe(\n      filter(({ key }) => key && key.name === 'space'),\n      share()\n    ),\n    aKey: keypress.pipe(\n      filter(({ key }) => key && key.name === 'a'),\n      share()\n    ),\n    iKey: keypress.pipe(\n      filter(({ key }) => key && key.name === 'i'),\n      share()\n    ),\n  };\n};\n"]},"metadata":{},"sourceType":"script"}