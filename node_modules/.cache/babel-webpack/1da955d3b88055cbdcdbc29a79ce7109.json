{"ast":null,"code":"\"use strict\";\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nvar _classCallCheck = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Spinner = void 0;\n\nvar ora = require(\"ora\");\n\nvar color_1 = require(\"./color\");\n\nvar Spinner = /*#__PURE__*/function () {\n  function Spinner(text) {\n    _classCallCheck(this, Spinner);\n\n    /** When false, only fail messages will be displayed. */\n    this.enabled = true;\n    this.spinner = ora({\n      text: text,\n      // The below 2 options are needed because otherwise CTRL+C will be delayed\n      // when the underlying process is sync.\n      hideCursor: false,\n      discardStdin: false\n    });\n  }\n\n  _createClass(Spinner, [{\n    key: \"text\",\n    set: function set(text) {\n      this.spinner.text = text;\n    }\n  }, {\n    key: \"succeed\",\n    value: function succeed(text) {\n      if (this.enabled) {\n        this.spinner.succeed(text);\n      }\n    }\n  }, {\n    key: \"fail\",\n    value: function fail(text) {\n      this.spinner.fail(text && color_1.colors.redBright(text));\n    }\n  }, {\n    key: \"stop\",\n    value: function stop() {\n      this.spinner.stop();\n    }\n  }, {\n    key: \"start\",\n    value: function start(text) {\n      if (this.enabled) {\n        this.spinner.start(text);\n      }\n    }\n  }]);\n\n  return Spinner;\n}();\n\nexports.Spinner = Spinner;","map":{"version":3,"sources":["/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@angular-devkit/build-angular/src/utils/spinner.js"],"names":["Object","defineProperty","exports","value","Spinner","ora","require","color_1","text","enabled","spinner","hideCursor","discardStdin","succeed","fail","colors","redBright","stop","start"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,OAAR,GAAkB,KAAK,CAAvB;;AACA,IAAMC,GAAG,GAAGC,OAAO,CAAC,KAAD,CAAnB;;AACA,IAAMC,OAAO,GAAGD,OAAO,CAAC,SAAD,CAAvB;;IACMF,O;AACF,mBAAYI,IAAZ,EAAkB;AAAA;;AACd;AACA,SAAKC,OAAL,GAAe,IAAf;AACA,SAAKC,OAAL,GAAeL,GAAG,CAAC;AACfG,MAAAA,IAAI,EAAJA,IADe;AAEf;AACA;AACAG,MAAAA,UAAU,EAAE,KAJG;AAKfC,MAAAA,YAAY,EAAE;AALC,KAAD,CAAlB;AAOH;;;;SACD,aAASJ,IAAT,EAAe;AACX,WAAKE,OAAL,CAAaF,IAAb,GAAoBA,IAApB;AACH;;;WACD,iBAAQA,IAAR,EAAc;AACV,UAAI,KAAKC,OAAT,EAAkB;AACd,aAAKC,OAAL,CAAaG,OAAb,CAAqBL,IAArB;AACH;AACJ;;;WACD,cAAKA,IAAL,EAAW;AACP,WAAKE,OAAL,CAAaI,IAAb,CAAkBN,IAAI,IAAID,OAAO,CAACQ,MAAR,CAAeC,SAAf,CAAyBR,IAAzB,CAA1B;AACH;;;WACD,gBAAO;AACH,WAAKE,OAAL,CAAaO,IAAb;AACH;;;WACD,eAAMT,IAAN,EAAY;AACR,UAAI,KAAKC,OAAT,EAAkB;AACd,aAAKC,OAAL,CAAaQ,KAAb,CAAmBV,IAAnB;AACH;AACJ;;;;;;AAELN,OAAO,CAACE,OAAR,GAAkBA,OAAlB","sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Spinner = void 0;\nconst ora = require(\"ora\");\nconst color_1 = require(\"./color\");\nclass Spinner {\n    constructor(text) {\n        /** When false, only fail messages will be displayed. */\n        this.enabled = true;\n        this.spinner = ora({\n            text,\n            // The below 2 options are needed because otherwise CTRL+C will be delayed\n            // when the underlying process is sync.\n            hideCursor: false,\n            discardStdin: false,\n        });\n    }\n    set text(text) {\n        this.spinner.text = text;\n    }\n    succeed(text) {\n        if (this.enabled) {\n            this.spinner.succeed(text);\n        }\n    }\n    fail(text) {\n        this.spinner.fail(text && color_1.colors.redBright(text));\n    }\n    stop() {\n        this.spinner.stop();\n    }\n    start(text) {\n        if (this.enabled) {\n            this.spinner.start(text);\n        }\n    }\n}\nexports.Spinner = Spinner;\n"]},"metadata":{},"sourceType":"script"}