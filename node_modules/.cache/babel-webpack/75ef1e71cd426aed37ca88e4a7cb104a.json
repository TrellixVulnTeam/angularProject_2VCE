{"ast":null,"code":"'use strict';\n\nvar _createForOfIteratorHelper = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar fs = require('fs');\n\nvar path = require('path');\n\nvar MemoryFileSystem = require('memory-fs');\n\nvar mkdirp = require('mkdirp');\n\nvar _require = require('webpack-log'),\n    colors = _require.colors;\n\nvar DevMiddlewareError = require('./DevMiddlewareError');\n\nmodule.exports = {\n  toDisk: function toDisk(context) {\n    var compilers = context.compiler.compilers || [context.compiler];\n\n    var _iterator = _createForOfIteratorHelper(compilers),\n        _step;\n\n    try {\n      var _loop = function _loop() {\n        var compiler = _step.value;\n        compiler.hooks.emit.tap('WebpackDevMiddleware', function (compilation) {\n          if (compiler.hasWebpackDevMiddlewareAssetEmittedCallback) {\n            return;\n          }\n\n          compiler.hooks.assetEmitted.tapAsync('WebpackDevMiddleware', function (file, info, callback) {\n            var targetPath = null;\n            var content = null; // webpack@5\n\n            if (info.compilation) {\n              targetPath = info.targetPath;\n              content = info.content;\n            } else {\n              var targetFile = file;\n              var queryStringIdx = targetFile.indexOf('?');\n\n              if (queryStringIdx >= 0) {\n                targetFile = targetFile.substr(0, queryStringIdx);\n              }\n\n              var outputPath = compiler.outputPath; // TODO Why? Need remove in future major release\n\n              if (outputPath === '/') {\n                outputPath = compiler.context;\n              }\n\n              outputPath = compilation.getPath(outputPath, {});\n              content = info;\n              targetPath = path.join(outputPath, targetFile);\n            }\n\n            var filter = context.options.writeToDisk;\n            var allowWrite = filter && typeof filter === 'function' ? filter(targetPath) : true;\n\n            if (!allowWrite) {\n              return callback();\n            }\n\n            var log = context.log;\n            var dir = path.dirname(targetPath);\n            return mkdirp(dir, function (mkdirpError) {\n              if (mkdirpError) {\n                return callback(mkdirpError);\n              }\n\n              return fs.writeFile(targetPath, content, function (writeFileError) {\n                if (writeFileError) {\n                  return callback(writeFileError);\n                }\n\n                log.debug(colors.cyan(\"Asset written to disk: \".concat(path.relative(process.cwd(), targetPath))));\n                return callback();\n              });\n            });\n          });\n          compiler.hasWebpackDevMiddlewareAssetEmittedCallback = true;\n        });\n      };\n\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        _loop();\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n  },\n  setFs: function setFs(context, compiler) {\n    if (typeof compiler.outputPath === 'string' && !path.posix.isAbsolute(compiler.outputPath) && !path.win32.isAbsolute(compiler.outputPath)) {\n      throw new DevMiddlewareError('`output.path` needs to be an absolute path or `/`.');\n    }\n\n    var fileSystem; // store our files in memory\n\n    var isConfiguredFs = context.options.fs;\n    var isMemoryFs = !isConfiguredFs && !compiler.compilers && compiler.outputFileSystem instanceof MemoryFileSystem;\n\n    if (isConfiguredFs) {\n      // eslint-disable-next-line no-shadow\n      var _fs = context.options.fs;\n\n      if (typeof _fs.join !== 'function') {\n        // very shallow check\n        throw new Error('Invalid options: options.fs.join() method is expected');\n      } // eslint-disable-next-line no-param-reassign\n\n\n      compiler.outputFileSystem = _fs;\n      fileSystem = _fs;\n    } else if (isMemoryFs) {\n      fileSystem = compiler.outputFileSystem;\n    } else {\n      fileSystem = new MemoryFileSystem(); // eslint-disable-next-line no-param-reassign\n\n      compiler.outputFileSystem = fileSystem;\n    } // eslint-disable-next-line no-param-reassign\n\n\n    context.fs = fileSystem;\n  }\n};","map":{"version":3,"sources":["/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/webpack-dev-server/node_modules/webpack-dev-middleware/lib/fs.js"],"names":["fs","require","path","MemoryFileSystem","mkdirp","colors","DevMiddlewareError","module","exports","toDisk","context","compilers","compiler","hooks","emit","tap","compilation","hasWebpackDevMiddlewareAssetEmittedCallback","assetEmitted","tapAsync","file","info","callback","targetPath","content","targetFile","queryStringIdx","indexOf","substr","outputPath","getPath","join","filter","options","writeToDisk","allowWrite","log","dir","dirname","mkdirpError","writeFile","writeFileError","debug","cyan","relative","process","cwd","setFs","posix","isAbsolute","win32","fileSystem","isConfiguredFs","isMemoryFs","outputFileSystem","Error"],"mappings":"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","sourcesContent":["'use strict';\n\nconst fs = require('fs');\nconst path = require('path');\n\nconst MemoryFileSystem = require('memory-fs');\nconst mkdirp = require('mkdirp');\nconst { colors } = require('webpack-log');\n\nconst DevMiddlewareError = require('./DevMiddlewareError');\n\nmodule.exports = {\n  toDisk(context) {\n    const compilers = context.compiler.compilers || [context.compiler];\n\n    for (const compiler of compilers) {\n      compiler.hooks.emit.tap('WebpackDevMiddleware', (compilation) => {\n        if (compiler.hasWebpackDevMiddlewareAssetEmittedCallback) {\n          return;\n        }\n\n        compiler.hooks.assetEmitted.tapAsync(\n          'WebpackDevMiddleware',\n          (file, info, callback) => {\n            let targetPath = null;\n            let content = null;\n\n            // webpack@5\n            if (info.compilation) {\n              ({ targetPath, content } = info);\n            } else {\n              let targetFile = file;\n\n              const queryStringIdx = targetFile.indexOf('?');\n\n              if (queryStringIdx >= 0) {\n                targetFile = targetFile.substr(0, queryStringIdx);\n              }\n\n              let { outputPath } = compiler;\n\n              // TODO Why? Need remove in future major release\n              if (outputPath === '/') {\n                outputPath = compiler.context;\n              }\n\n              outputPath = compilation.getPath(outputPath, {});\n              content = info;\n              targetPath = path.join(outputPath, targetFile);\n            }\n\n            const { writeToDisk: filter } = context.options;\n            const allowWrite =\n              filter && typeof filter === 'function'\n                ? filter(targetPath)\n                : true;\n\n            if (!allowWrite) {\n              return callback();\n            }\n\n            const { log } = context;\n            const dir = path.dirname(targetPath);\n\n            return mkdirp(dir, (mkdirpError) => {\n              if (mkdirpError) {\n                return callback(mkdirpError);\n              }\n\n              return fs.writeFile(targetPath, content, (writeFileError) => {\n                if (writeFileError) {\n                  return callback(writeFileError);\n                }\n\n                log.debug(\n                  colors.cyan(\n                    `Asset written to disk: ${path.relative(\n                      process.cwd(),\n                      targetPath\n                    )}`\n                  )\n                );\n\n                return callback();\n              });\n            });\n          }\n        );\n        compiler.hasWebpackDevMiddlewareAssetEmittedCallback = true;\n      });\n    }\n  },\n\n  setFs(context, compiler) {\n    if (\n      typeof compiler.outputPath === 'string' &&\n      !path.posix.isAbsolute(compiler.outputPath) &&\n      !path.win32.isAbsolute(compiler.outputPath)\n    ) {\n      throw new DevMiddlewareError(\n        '`output.path` needs to be an absolute path or `/`.'\n      );\n    }\n\n    let fileSystem;\n\n    // store our files in memory\n    const isConfiguredFs = context.options.fs;\n    const isMemoryFs =\n      !isConfiguredFs &&\n      !compiler.compilers &&\n      compiler.outputFileSystem instanceof MemoryFileSystem;\n\n    if (isConfiguredFs) {\n      // eslint-disable-next-line no-shadow\n      const { fs } = context.options;\n\n      if (typeof fs.join !== 'function') {\n        // very shallow check\n        throw new Error(\n          'Invalid options: options.fs.join() method is expected'\n        );\n      }\n\n      // eslint-disable-next-line no-param-reassign\n      compiler.outputFileSystem = fs;\n      fileSystem = fs;\n    } else if (isMemoryFs) {\n      fileSystem = compiler.outputFileSystem;\n    } else {\n      fileSystem = new MemoryFileSystem();\n\n      // eslint-disable-next-line no-param-reassign\n      compiler.outputFileSystem = fileSystem;\n    }\n\n    // eslint-disable-next-line no-param-reassign\n    context.fs = fileSystem;\n  },\n};\n"]},"metadata":{},"sourceType":"script"}