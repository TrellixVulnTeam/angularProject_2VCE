{"ast":null,"code":"/***********************************************************************\n\n  A JavaScript tokenizer / parser / beautifier / compressor.\n  https://github.com/mishoo/UglifyJS2\n\n  -------------------------------- (C) ---------------------------------\n\n                           Author: Mihai Bazon\n                         <mihai.bazon@gmail.com>\n                       http://mihai.bazon.net/blog\n\n  Distributed under the BSD license:\n\n    Copyright 2012 (c) Mihai Bazon <mihai.bazon@gmail.com>\n    Parser based on parse-js (http://marijn.haverbeke.nl/parse-js/).\n\n    Redistribution and use in source and binary forms, with or without\n    modification, are permitted provided that the following conditions\n    are met:\n\n        * Redistributions of source code must retain the above\n          copyright notice, this list of conditions and the following\n          disclaimer.\n\n        * Redistributions in binary form must reproduce the above\n          copyright notice, this list of conditions and the following\n          disclaimer in the documentation and/or other materials\n          provided with the distribution.\n\n    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDER “AS IS” AND ANY\n    EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n    PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER BE\n    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,\n    OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n    PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n    PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n    THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR\n    TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF\n    THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n    SUCH DAMAGE.\n\n ***********************************************************************/\n\"use strict\";\n\nimport _toConsumableArray from \"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _inherits from \"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _wrapNativeSuper from \"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/esm/wrapNativeSuper\";\nimport { characters, defaults, makePredicate, set_annotation } from \"./utils/index.js\";\nimport { AST_Accessor, AST_Array, AST_Arrow, AST_Assign, AST_Await, AST_BigInt, AST_Binary, AST_BlockStatement, AST_Break, AST_Call, AST_Case, AST_Catch, AST_Chain, AST_ClassExpression, AST_ClassProperty, AST_ConciseMethod, AST_Conditional, AST_Const, AST_Continue, AST_Debugger, AST_Default, AST_DefaultAssign, AST_DefClass, AST_Definitions, AST_Defun, AST_Destructuring, AST_Directive, AST_Do, AST_Dot, AST_EmptyStatement, AST_Expansion, AST_Export, AST_False, AST_Finally, AST_For, AST_ForIn, AST_ForOf, AST_Function, AST_Hole, AST_If, AST_Import, AST_ImportMeta, AST_IterationStatement, AST_Label, AST_LabeledStatement, AST_LabelRef, AST_Lambda, AST_Let, AST_NameMapping, AST_New, AST_NewTarget, AST_Node, AST_Null, AST_Number, AST_Object, AST_ObjectGetter, AST_ObjectKeyVal, AST_ObjectProperty, AST_ObjectSetter, AST_PrefixedTemplateString, AST_PropAccess, AST_RegExp, AST_Return, AST_Sequence, AST_SimpleStatement, AST_String, AST_Sub, AST_Super, AST_Switch, AST_SymbolCatch, AST_SymbolClass, AST_SymbolClassProperty, AST_SymbolConst, AST_SymbolDeclaration, AST_SymbolDefClass, AST_SymbolDefun, AST_SymbolExport, AST_SymbolExportForeign, AST_SymbolFunarg, AST_SymbolImport, AST_SymbolImportForeign, AST_SymbolLambda, AST_SymbolLet, AST_SymbolMethod, AST_SymbolRef, AST_SymbolVar, AST_TemplateSegment, AST_TemplateString, AST_This, AST_Throw, AST_Token, AST_Toplevel, AST_True, AST_Try, AST_UnaryPostfix, AST_UnaryPrefix, AST_Var, AST_VarDef, AST_While, AST_With, AST_Yield, _INLINE, _NOINLINE, _PURE } from \"./ast.js\";\nvar KEYWORDS = \"break case catch class const continue debugger default delete do else export extends finally for function if in instanceof let new return switch throw try typeof var void while with\";\nvar KEYWORDS_ATOM = \"false null true\";\nvar RESERVED_WORDS = \"enum implements import interface package private protected public static super this \" + KEYWORDS_ATOM + \" \" + KEYWORDS;\nvar KEYWORDS_BEFORE_EXPRESSION = \"return new delete throw else case yield await\";\nKEYWORDS = makePredicate(KEYWORDS);\nRESERVED_WORDS = makePredicate(RESERVED_WORDS);\nKEYWORDS_BEFORE_EXPRESSION = makePredicate(KEYWORDS_BEFORE_EXPRESSION);\nKEYWORDS_ATOM = makePredicate(KEYWORDS_ATOM);\nvar OPERATOR_CHARS = makePredicate(characters(\"+-*&%=<>!?|~^\"));\nvar RE_NUM_LITERAL = /[0-9a-f]/i;\nvar RE_HEX_NUMBER = /^0x[0-9a-f]+$/i;\nvar RE_OCT_NUMBER = /^0[0-7]+$/;\nvar RE_ES6_OCT_NUMBER = /^0o[0-7]+$/i;\nvar RE_BIN_NUMBER = /^0b[01]+$/i;\nvar RE_DEC_NUMBER = /^\\d*\\.?\\d*(?:e[+-]?\\d*(?:\\d\\.?|\\.?\\d)\\d*)?$/i;\nvar RE_BIG_INT = /^(0[xob])?[0-9a-f]+n$/i;\nvar OPERATORS = makePredicate([\"in\", \"instanceof\", \"typeof\", \"new\", \"void\", \"delete\", \"++\", \"--\", \"+\", \"-\", \"!\", \"~\", \"&\", \"|\", \"^\", \"*\", \"**\", \"/\", \"%\", \">>\", \"<<\", \">>>\", \"<\", \">\", \"<=\", \">=\", \"==\", \"===\", \"!=\", \"!==\", \"?\", \"=\", \"+=\", \"-=\", \"/=\", \"*=\", \"**=\", \"%=\", \">>=\", \"<<=\", \">>>=\", \"|=\", \"^=\", \"&=\", \"&&\", \"??\", \"||\"]);\nvar WHITESPACE_CHARS = makePredicate(characters(\" \\xA0\\n\\r\\t\\f\\x0B\\u200B\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200A\\u2028\\u2029\\u202F\\u205F\\u3000\\uFEFF\"));\nvar NEWLINE_CHARS = makePredicate(characters(\"\\n\\r\\u2028\\u2029\"));\nvar PUNC_AFTER_EXPRESSION = makePredicate(characters(\";]),:\"));\nvar PUNC_BEFORE_EXPRESSION = makePredicate(characters(\"[{(,;:\"));\nvar PUNC_CHARS = makePredicate(characters(\"[]{}(),;:\"));\n/* -----[ Tokenizer ]----- */\n// surrogate safe regexps adapted from https://github.com/mathiasbynens/unicode-8.0.0/tree/89b412d8a71ecca9ed593d9e9fa073ab64acfebe/Binary_Property\n\nvar UNICODE = {\n  ID_Start: /[$A-Z_a-z\\xAA\\xB5\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0370-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0620-\\u064A\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06E5\\u06E6\\u06EE\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA\\u07F4\\u07F5\\u07FA\\u0800-\\u0815\\u081A\\u0824\\u0828\\u0840-\\u0858\\u08A0-\\u08B4\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09F0\\u09F1\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0AF9\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D\\u0C58-\\u0C5A\\u0C60\\u0C61\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDE\\u0CE0\\u0CE1\\u0CF1\\u0CF2\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D5F-\\u0D61\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E46\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EDC-\\u0EDF\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u13A0-\\u13F5\\u13F8-\\u13FD\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F8\\u1700-\\u170C\\u170E-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17D7\\u17DC\\u1820-\\u1877\\u1880-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1AA7\\u1B05-\\u1B33\\u1B45-\\u1B4B\\u1B83-\\u1BA0\\u1BAE\\u1BAF\\u1BBA-\\u1BE5\\u1C00-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C7D\\u1CE9-\\u1CEC\\u1CEE-\\u1CF1\\u1CF5\\u1CF6\\u1D00-\\u1DBF\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2071\\u207F\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2118-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2160-\\u2188\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u309B-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FD5\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA61F\\uA62A\\uA62B\\uA640-\\uA66E\\uA67F-\\uA69D\\uA6A0-\\uA6EF\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA7AD\\uA7B0-\\uA7B7\\uA7F7-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA8F2-\\uA8F7\\uA8FB\\uA8FD\\uA90A-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9CF\\uA9E0-\\uA9E4\\uA9E6-\\uA9EF\\uA9FA-\\uA9FE\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA60-\\uAA76\\uAA7A\\uAA7E-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEA\\uAAF2-\\uAAF4\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB65\\uAB70-\\uABE2\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]|\\uD800[\\uDC00-\\uDC0B\\uDC0D-\\uDC26\\uDC28-\\uDC3A\\uDC3C\\uDC3D\\uDC3F-\\uDC4D\\uDC50-\\uDC5D\\uDC80-\\uDCFA\\uDD40-\\uDD74\\uDE80-\\uDE9C\\uDEA0-\\uDED0\\uDF00-\\uDF1F\\uDF30-\\uDF4A\\uDF50-\\uDF75\\uDF80-\\uDF9D\\uDFA0-\\uDFC3\\uDFC8-\\uDFCF\\uDFD1-\\uDFD5]|\\uD801[\\uDC00-\\uDC9D\\uDD00-\\uDD27\\uDD30-\\uDD63\\uDE00-\\uDF36\\uDF40-\\uDF55\\uDF60-\\uDF67]|\\uD802[\\uDC00-\\uDC05\\uDC08\\uDC0A-\\uDC35\\uDC37\\uDC38\\uDC3C\\uDC3F-\\uDC55\\uDC60-\\uDC76\\uDC80-\\uDC9E\\uDCE0-\\uDCF2\\uDCF4\\uDCF5\\uDD00-\\uDD15\\uDD20-\\uDD39\\uDD80-\\uDDB7\\uDDBE\\uDDBF\\uDE00\\uDE10-\\uDE13\\uDE15-\\uDE17\\uDE19-\\uDE33\\uDE60-\\uDE7C\\uDE80-\\uDE9C\\uDEC0-\\uDEC7\\uDEC9-\\uDEE4\\uDF00-\\uDF35\\uDF40-\\uDF55\\uDF60-\\uDF72\\uDF80-\\uDF91]|\\uD803[\\uDC00-\\uDC48\\uDC80-\\uDCB2\\uDCC0-\\uDCF2]|\\uD804[\\uDC03-\\uDC37\\uDC83-\\uDCAF\\uDCD0-\\uDCE8\\uDD03-\\uDD26\\uDD50-\\uDD72\\uDD76\\uDD83-\\uDDB2\\uDDC1-\\uDDC4\\uDDDA\\uDDDC\\uDE00-\\uDE11\\uDE13-\\uDE2B\\uDE80-\\uDE86\\uDE88\\uDE8A-\\uDE8D\\uDE8F-\\uDE9D\\uDE9F-\\uDEA8\\uDEB0-\\uDEDE\\uDF05-\\uDF0C\\uDF0F\\uDF10\\uDF13-\\uDF28\\uDF2A-\\uDF30\\uDF32\\uDF33\\uDF35-\\uDF39\\uDF3D\\uDF50\\uDF5D-\\uDF61]|\\uD805[\\uDC80-\\uDCAF\\uDCC4\\uDCC5\\uDCC7\\uDD80-\\uDDAE\\uDDD8-\\uDDDB\\uDE00-\\uDE2F\\uDE44\\uDE80-\\uDEAA\\uDF00-\\uDF19]|\\uD806[\\uDCA0-\\uDCDF\\uDCFF\\uDEC0-\\uDEF8]|\\uD808[\\uDC00-\\uDF99]|\\uD809[\\uDC00-\\uDC6E\\uDC80-\\uDD43]|[\\uD80C\\uD840-\\uD868\\uD86A-\\uD86C\\uD86F-\\uD872][\\uDC00-\\uDFFF]|\\uD80D[\\uDC00-\\uDC2E]|\\uD811[\\uDC00-\\uDE46]|\\uD81A[\\uDC00-\\uDE38\\uDE40-\\uDE5E\\uDED0-\\uDEED\\uDF00-\\uDF2F\\uDF40-\\uDF43\\uDF63-\\uDF77\\uDF7D-\\uDF8F]|\\uD81B[\\uDF00-\\uDF44\\uDF50\\uDF93-\\uDF9F]|\\uD82C[\\uDC00\\uDC01]|\\uD82F[\\uDC00-\\uDC6A\\uDC70-\\uDC7C\\uDC80-\\uDC88\\uDC90-\\uDC99]|\\uD835[\\uDC00-\\uDC54\\uDC56-\\uDC9C\\uDC9E\\uDC9F\\uDCA2\\uDCA5\\uDCA6\\uDCA9-\\uDCAC\\uDCAE-\\uDCB9\\uDCBB\\uDCBD-\\uDCC3\\uDCC5-\\uDD05\\uDD07-\\uDD0A\\uDD0D-\\uDD14\\uDD16-\\uDD1C\\uDD1E-\\uDD39\\uDD3B-\\uDD3E\\uDD40-\\uDD44\\uDD46\\uDD4A-\\uDD50\\uDD52-\\uDEA5\\uDEA8-\\uDEC0\\uDEC2-\\uDEDA\\uDEDC-\\uDEFA\\uDEFC-\\uDF14\\uDF16-\\uDF34\\uDF36-\\uDF4E\\uDF50-\\uDF6E\\uDF70-\\uDF88\\uDF8A-\\uDFA8\\uDFAA-\\uDFC2\\uDFC4-\\uDFCB]|\\uD83A[\\uDC00-\\uDCC4]|\\uD83B[\\uDE00-\\uDE03\\uDE05-\\uDE1F\\uDE21\\uDE22\\uDE24\\uDE27\\uDE29-\\uDE32\\uDE34-\\uDE37\\uDE39\\uDE3B\\uDE42\\uDE47\\uDE49\\uDE4B\\uDE4D-\\uDE4F\\uDE51\\uDE52\\uDE54\\uDE57\\uDE59\\uDE5B\\uDE5D\\uDE5F\\uDE61\\uDE62\\uDE64\\uDE67-\\uDE6A\\uDE6C-\\uDE72\\uDE74-\\uDE77\\uDE79-\\uDE7C\\uDE7E\\uDE80-\\uDE89\\uDE8B-\\uDE9B\\uDEA1-\\uDEA3\\uDEA5-\\uDEA9\\uDEAB-\\uDEBB]|\\uD869[\\uDC00-\\uDED6\\uDF00-\\uDFFF]|\\uD86D[\\uDC00-\\uDF34\\uDF40-\\uDFFF]|\\uD86E[\\uDC00-\\uDC1D\\uDC20-\\uDFFF]|\\uD873[\\uDC00-\\uDEA1]|\\uD87E[\\uDC00-\\uDE1D]/,\n  ID_Continue: /(?:[$0-9A-Z_a-z\\xAA\\xB5\\xB7\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0300-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u0483-\\u0487\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u0591-\\u05BD\\u05BF\\u05C1\\u05C2\\u05C4\\u05C5\\u05C7\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0610-\\u061A\\u0620-\\u0669\\u066E-\\u06D3\\u06D5-\\u06DC\\u06DF-\\u06E8\\u06EA-\\u06FC\\u06FF\\u0710-\\u074A\\u074D-\\u07B1\\u07C0-\\u07F5\\u07FA\\u0800-\\u082D\\u0840-\\u085B\\u08A0-\\u08B4\\u08E3-\\u0963\\u0966-\\u096F\\u0971-\\u0983\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BC-\\u09C4\\u09C7\\u09C8\\u09CB-\\u09CE\\u09D7\\u09DC\\u09DD\\u09DF-\\u09E3\\u09E6-\\u09F1\\u0A01-\\u0A03\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A3C\\u0A3E-\\u0A42\\u0A47\\u0A48\\u0A4B-\\u0A4D\\u0A51\\u0A59-\\u0A5C\\u0A5E\\u0A66-\\u0A75\\u0A81-\\u0A83\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABC-\\u0AC5\\u0AC7-\\u0AC9\\u0ACB-\\u0ACD\\u0AD0\\u0AE0-\\u0AE3\\u0AE6-\\u0AEF\\u0AF9\\u0B01-\\u0B03\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3C-\\u0B44\\u0B47\\u0B48\\u0B4B-\\u0B4D\\u0B56\\u0B57\\u0B5C\\u0B5D\\u0B5F-\\u0B63\\u0B66-\\u0B6F\\u0B71\\u0B82\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BBE-\\u0BC2\\u0BC6-\\u0BC8\\u0BCA-\\u0BCD\\u0BD0\\u0BD7\\u0BE6-\\u0BEF\\u0C00-\\u0C03\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D-\\u0C44\\u0C46-\\u0C48\\u0C4A-\\u0C4D\\u0C55\\u0C56\\u0C58-\\u0C5A\\u0C60-\\u0C63\\u0C66-\\u0C6F\\u0C81-\\u0C83\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBC-\\u0CC4\\u0CC6-\\u0CC8\\u0CCA-\\u0CCD\\u0CD5\\u0CD6\\u0CDE\\u0CE0-\\u0CE3\\u0CE6-\\u0CEF\\u0CF1\\u0CF2\\u0D01-\\u0D03\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D-\\u0D44\\u0D46-\\u0D48\\u0D4A-\\u0D4E\\u0D57\\u0D5F-\\u0D63\\u0D66-\\u0D6F\\u0D7A-\\u0D7F\\u0D82\\u0D83\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0DCA\\u0DCF-\\u0DD4\\u0DD6\\u0DD8-\\u0DDF\\u0DE6-\\u0DEF\\u0DF2\\u0DF3\\u0E01-\\u0E3A\\u0E40-\\u0E4E\\u0E50-\\u0E59\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB9\\u0EBB-\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EC8-\\u0ECD\\u0ED0-\\u0ED9\\u0EDC-\\u0EDF\\u0F00\\u0F18\\u0F19\\u0F20-\\u0F29\\u0F35\\u0F37\\u0F39\\u0F3E-\\u0F47\\u0F49-\\u0F6C\\u0F71-\\u0F84\\u0F86-\\u0F97\\u0F99-\\u0FBC\\u0FC6\\u1000-\\u1049\\u1050-\\u109D\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u135D-\\u135F\\u1369-\\u1371\\u1380-\\u138F\\u13A0-\\u13F5\\u13F8-\\u13FD\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F8\\u1700-\\u170C\\u170E-\\u1714\\u1720-\\u1734\\u1740-\\u1753\\u1760-\\u176C\\u176E-\\u1770\\u1772\\u1773\\u1780-\\u17D3\\u17D7\\u17DC\\u17DD\\u17E0-\\u17E9\\u180B-\\u180D\\u1810-\\u1819\\u1820-\\u1877\\u1880-\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1920-\\u192B\\u1930-\\u193B\\u1946-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u19D0-\\u19DA\\u1A00-\\u1A1B\\u1A20-\\u1A5E\\u1A60-\\u1A7C\\u1A7F-\\u1A89\\u1A90-\\u1A99\\u1AA7\\u1AB0-\\u1ABD\\u1B00-\\u1B4B\\u1B50-\\u1B59\\u1B6B-\\u1B73\\u1B80-\\u1BF3\\u1C00-\\u1C37\\u1C40-\\u1C49\\u1C4D-\\u1C7D\\u1CD0-\\u1CD2\\u1CD4-\\u1CF6\\u1CF8\\u1CF9\\u1D00-\\u1DF5\\u1DFC-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u200C\\u200D\\u203F\\u2040\\u2054\\u2071\\u207F\\u2090-\\u209C\\u20D0-\\u20DC\\u20E1\\u20E5-\\u20F0\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2118-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2160-\\u2188\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D7F-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2DE0-\\u2DFF\\u3005-\\u3007\\u3021-\\u302F\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u3099-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FD5\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA62B\\uA640-\\uA66F\\uA674-\\uA67D\\uA67F-\\uA6F1\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA7AD\\uA7B0-\\uA7B7\\uA7F7-\\uA827\\uA840-\\uA873\\uA880-\\uA8C4\\uA8D0-\\uA8D9\\uA8E0-\\uA8F7\\uA8FB\\uA8FD\\uA900-\\uA92D\\uA930-\\uA953\\uA960-\\uA97C\\uA980-\\uA9C0\\uA9CF-\\uA9D9\\uA9E0-\\uA9FE\\uAA00-\\uAA36\\uAA40-\\uAA4D\\uAA50-\\uAA59\\uAA60-\\uAA76\\uAA7A-\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEF\\uAAF2-\\uAAF6\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB65\\uAB70-\\uABEA\\uABEC\\uABED\\uABF0-\\uABF9\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE00-\\uFE0F\\uFE20-\\uFE2F\\uFE33\\uFE34\\uFE4D-\\uFE4F\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF10-\\uFF19\\uFF21-\\uFF3A\\uFF3F\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]|\\uD800[\\uDC00-\\uDC0B\\uDC0D-\\uDC26\\uDC28-\\uDC3A\\uDC3C\\uDC3D\\uDC3F-\\uDC4D\\uDC50-\\uDC5D\\uDC80-\\uDCFA\\uDD40-\\uDD74\\uDDFD\\uDE80-\\uDE9C\\uDEA0-\\uDED0\\uDEE0\\uDF00-\\uDF1F\\uDF30-\\uDF4A\\uDF50-\\uDF7A\\uDF80-\\uDF9D\\uDFA0-\\uDFC3\\uDFC8-\\uDFCF\\uDFD1-\\uDFD5]|\\uD801[\\uDC00-\\uDC9D\\uDCA0-\\uDCA9\\uDD00-\\uDD27\\uDD30-\\uDD63\\uDE00-\\uDF36\\uDF40-\\uDF55\\uDF60-\\uDF67]|\\uD802[\\uDC00-\\uDC05\\uDC08\\uDC0A-\\uDC35\\uDC37\\uDC38\\uDC3C\\uDC3F-\\uDC55\\uDC60-\\uDC76\\uDC80-\\uDC9E\\uDCE0-\\uDCF2\\uDCF4\\uDCF5\\uDD00-\\uDD15\\uDD20-\\uDD39\\uDD80-\\uDDB7\\uDDBE\\uDDBF\\uDE00-\\uDE03\\uDE05\\uDE06\\uDE0C-\\uDE13\\uDE15-\\uDE17\\uDE19-\\uDE33\\uDE38-\\uDE3A\\uDE3F\\uDE60-\\uDE7C\\uDE80-\\uDE9C\\uDEC0-\\uDEC7\\uDEC9-\\uDEE6\\uDF00-\\uDF35\\uDF40-\\uDF55\\uDF60-\\uDF72\\uDF80-\\uDF91]|\\uD803[\\uDC00-\\uDC48\\uDC80-\\uDCB2\\uDCC0-\\uDCF2]|\\uD804[\\uDC00-\\uDC46\\uDC66-\\uDC6F\\uDC7F-\\uDCBA\\uDCD0-\\uDCE8\\uDCF0-\\uDCF9\\uDD00-\\uDD34\\uDD36-\\uDD3F\\uDD50-\\uDD73\\uDD76\\uDD80-\\uDDC4\\uDDCA-\\uDDCC\\uDDD0-\\uDDDA\\uDDDC\\uDE00-\\uDE11\\uDE13-\\uDE37\\uDE80-\\uDE86\\uDE88\\uDE8A-\\uDE8D\\uDE8F-\\uDE9D\\uDE9F-\\uDEA8\\uDEB0-\\uDEEA\\uDEF0-\\uDEF9\\uDF00-\\uDF03\\uDF05-\\uDF0C\\uDF0F\\uDF10\\uDF13-\\uDF28\\uDF2A-\\uDF30\\uDF32\\uDF33\\uDF35-\\uDF39\\uDF3C-\\uDF44\\uDF47\\uDF48\\uDF4B-\\uDF4D\\uDF50\\uDF57\\uDF5D-\\uDF63\\uDF66-\\uDF6C\\uDF70-\\uDF74]|\\uD805[\\uDC80-\\uDCC5\\uDCC7\\uDCD0-\\uDCD9\\uDD80-\\uDDB5\\uDDB8-\\uDDC0\\uDDD8-\\uDDDD\\uDE00-\\uDE40\\uDE44\\uDE50-\\uDE59\\uDE80-\\uDEB7\\uDEC0-\\uDEC9\\uDF00-\\uDF19\\uDF1D-\\uDF2B\\uDF30-\\uDF39]|\\uD806[\\uDCA0-\\uDCE9\\uDCFF\\uDEC0-\\uDEF8]|\\uD808[\\uDC00-\\uDF99]|\\uD809[\\uDC00-\\uDC6E\\uDC80-\\uDD43]|[\\uD80C\\uD840-\\uD868\\uD86A-\\uD86C\\uD86F-\\uD872][\\uDC00-\\uDFFF]|\\uD80D[\\uDC00-\\uDC2E]|\\uD811[\\uDC00-\\uDE46]|\\uD81A[\\uDC00-\\uDE38\\uDE40-\\uDE5E\\uDE60-\\uDE69\\uDED0-\\uDEED\\uDEF0-\\uDEF4\\uDF00-\\uDF36\\uDF40-\\uDF43\\uDF50-\\uDF59\\uDF63-\\uDF77\\uDF7D-\\uDF8F]|\\uD81B[\\uDF00-\\uDF44\\uDF50-\\uDF7E\\uDF8F-\\uDF9F]|\\uD82C[\\uDC00\\uDC01]|\\uD82F[\\uDC00-\\uDC6A\\uDC70-\\uDC7C\\uDC80-\\uDC88\\uDC90-\\uDC99\\uDC9D\\uDC9E]|\\uD834[\\uDD65-\\uDD69\\uDD6D-\\uDD72\\uDD7B-\\uDD82\\uDD85-\\uDD8B\\uDDAA-\\uDDAD\\uDE42-\\uDE44]|\\uD835[\\uDC00-\\uDC54\\uDC56-\\uDC9C\\uDC9E\\uDC9F\\uDCA2\\uDCA5\\uDCA6\\uDCA9-\\uDCAC\\uDCAE-\\uDCB9\\uDCBB\\uDCBD-\\uDCC3\\uDCC5-\\uDD05\\uDD07-\\uDD0A\\uDD0D-\\uDD14\\uDD16-\\uDD1C\\uDD1E-\\uDD39\\uDD3B-\\uDD3E\\uDD40-\\uDD44\\uDD46\\uDD4A-\\uDD50\\uDD52-\\uDEA5\\uDEA8-\\uDEC0\\uDEC2-\\uDEDA\\uDEDC-\\uDEFA\\uDEFC-\\uDF14\\uDF16-\\uDF34\\uDF36-\\uDF4E\\uDF50-\\uDF6E\\uDF70-\\uDF88\\uDF8A-\\uDFA8\\uDFAA-\\uDFC2\\uDFC4-\\uDFCB\\uDFCE-\\uDFFF]|\\uD836[\\uDE00-\\uDE36\\uDE3B-\\uDE6C\\uDE75\\uDE84\\uDE9B-\\uDE9F\\uDEA1-\\uDEAF]|\\uD83A[\\uDC00-\\uDCC4\\uDCD0-\\uDCD6]|\\uD83B[\\uDE00-\\uDE03\\uDE05-\\uDE1F\\uDE21\\uDE22\\uDE24\\uDE27\\uDE29-\\uDE32\\uDE34-\\uDE37\\uDE39\\uDE3B\\uDE42\\uDE47\\uDE49\\uDE4B\\uDE4D-\\uDE4F\\uDE51\\uDE52\\uDE54\\uDE57\\uDE59\\uDE5B\\uDE5D\\uDE5F\\uDE61\\uDE62\\uDE64\\uDE67-\\uDE6A\\uDE6C-\\uDE72\\uDE74-\\uDE77\\uDE79-\\uDE7C\\uDE7E\\uDE80-\\uDE89\\uDE8B-\\uDE9B\\uDEA1-\\uDEA3\\uDEA5-\\uDEA9\\uDEAB-\\uDEBB]|\\uD869[\\uDC00-\\uDED6\\uDF00-\\uDFFF]|\\uD86D[\\uDC00-\\uDF34\\uDF40-\\uDFFF]|\\uD86E[\\uDC00-\\uDC1D\\uDC20-\\uDFFF]|\\uD873[\\uDC00-\\uDEA1]|\\uD87E[\\uDC00-\\uDE1D]|\\uDB40[\\uDD00-\\uDDEF])+/\n};\n\nfunction get_full_char(str, pos) {\n  if (is_surrogate_pair_head(str.charCodeAt(pos))) {\n    if (is_surrogate_pair_tail(str.charCodeAt(pos + 1))) {\n      return str.charAt(pos) + str.charAt(pos + 1);\n    }\n  } else if (is_surrogate_pair_tail(str.charCodeAt(pos))) {\n    if (is_surrogate_pair_head(str.charCodeAt(pos - 1))) {\n      return str.charAt(pos - 1) + str.charAt(pos);\n    }\n  }\n\n  return str.charAt(pos);\n}\n\nfunction get_full_char_code(str, pos) {\n  // https://en.wikipedia.org/wiki/Universal_Character_Set_characters#Surrogates\n  if (is_surrogate_pair_head(str.charCodeAt(pos))) {\n    return 0x10000 + (str.charCodeAt(pos) - 0xd800 << 10) + str.charCodeAt(pos + 1) - 0xdc00;\n  }\n\n  return str.charCodeAt(pos);\n}\n\nfunction get_full_char_length(str) {\n  var surrogates = 0;\n\n  for (var i = 0; i < str.length; i++) {\n    if (is_surrogate_pair_head(str.charCodeAt(i)) && is_surrogate_pair_tail(str.charCodeAt(i + 1))) {\n      surrogates++;\n      i++;\n    }\n  }\n\n  return str.length - surrogates;\n}\n\nfunction from_char_code(code) {\n  // Based on https://github.com/mathiasbynens/String.fromCodePoint/blob/master/fromcodepoint.js\n  if (code > 0xFFFF) {\n    code -= 0x10000;\n    return String.fromCharCode((code >> 10) + 0xD800) + String.fromCharCode(code % 0x400 + 0xDC00);\n  }\n\n  return String.fromCharCode(code);\n}\n\nfunction is_surrogate_pair_head(code) {\n  return code >= 0xd800 && code <= 0xdbff;\n}\n\nfunction is_surrogate_pair_tail(code) {\n  return code >= 0xdc00 && code <= 0xdfff;\n}\n\nfunction is_digit(code) {\n  return code >= 48 && code <= 57;\n}\n\nfunction is_identifier_start(ch) {\n  return UNICODE.ID_Start.test(ch);\n}\n\nfunction is_identifier_char(ch) {\n  return UNICODE.ID_Continue.test(ch);\n}\n\nfunction is_basic_identifier_string(str) {\n  return /^[a-z_$][a-z0-9_$]*$/i.test(str);\n}\n\nfunction is_identifier_string(str, allow_surrogates) {\n  if (/^[a-z_$][a-z0-9_$]*$/i.test(str)) {\n    return true;\n  }\n\n  if (!allow_surrogates && /[\\ud800-\\udfff]/.test(str)) {\n    return false;\n  }\n\n  var match = UNICODE.ID_Start.exec(str);\n\n  if (!match || match.index !== 0) {\n    return false;\n  }\n\n  str = str.slice(match[0].length);\n\n  if (!str) {\n    return true;\n  }\n\n  match = UNICODE.ID_Continue.exec(str);\n  return !!match && match[0].length === str.length;\n}\n\nfunction parse_js_number(num) {\n  var allow_e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n  if (!allow_e && num.includes(\"e\")) {\n    return NaN;\n  }\n\n  if (RE_HEX_NUMBER.test(num)) {\n    return parseInt(num.substr(2), 16);\n  } else if (RE_OCT_NUMBER.test(num)) {\n    return parseInt(num.substr(1), 8);\n  } else if (RE_ES6_OCT_NUMBER.test(num)) {\n    return parseInt(num.substr(2), 8);\n  } else if (RE_BIN_NUMBER.test(num)) {\n    return parseInt(num.substr(2), 2);\n  } else if (RE_DEC_NUMBER.test(num)) {\n    return parseFloat(num);\n  } else {\n    var val = parseFloat(num);\n    if (val == num) return val;\n  }\n}\n\nvar JS_Parse_Error = /*#__PURE__*/function (_Error) {\n  _inherits(JS_Parse_Error, _Error);\n\n  var _super = _createSuper(JS_Parse_Error);\n\n  function JS_Parse_Error(message, filename, line, col, pos) {\n    var _this;\n\n    _classCallCheck(this, JS_Parse_Error);\n\n    _this = _super.call(this);\n    _this.name = \"SyntaxError\";\n    _this.message = message;\n    _this.filename = filename;\n    _this.line = line;\n    _this.col = col;\n    _this.pos = pos;\n    return _this;\n  }\n\n  return JS_Parse_Error;\n}( /*#__PURE__*/_wrapNativeSuper(Error));\n\nfunction js_error(message, filename, line, col, pos) {\n  throw new JS_Parse_Error(message, filename, line, col, pos);\n}\n\nfunction is_token(token, type, val) {\n  return token.type == type && (val == null || token.value == val);\n}\n\nvar EX_EOF = {};\n\nfunction tokenizer($TEXT, filename, html5_comments, shebang) {\n  var S = {\n    text: $TEXT,\n    filename: filename,\n    pos: 0,\n    tokpos: 0,\n    line: 1,\n    tokline: 0,\n    col: 0,\n    tokcol: 0,\n    newline_before: false,\n    regex_allowed: false,\n    brace_counter: 0,\n    template_braces: [],\n    comments_before: [],\n    directives: {},\n    directive_stack: []\n  };\n\n  function peek() {\n    return get_full_char(S.text, S.pos);\n  } // Used because parsing ?. involves a lookahead for a digit\n\n\n  function is_option_chain_op() {\n    var must_be_dot = S.text.charCodeAt(S.pos + 1) === 46;\n    if (!must_be_dot) return false;\n    var cannot_be_digit = S.text.charCodeAt(S.pos + 2);\n    return cannot_be_digit < 48 || cannot_be_digit > 57;\n  }\n\n  function next(signal_eof, in_string) {\n    var ch = get_full_char(S.text, S.pos++);\n    if (signal_eof && !ch) throw EX_EOF;\n\n    if (NEWLINE_CHARS.has(ch)) {\n      S.newline_before = S.newline_before || !in_string;\n      ++S.line;\n      S.col = 0;\n\n      if (ch == \"\\r\" && peek() == \"\\n\") {\n        // treat a \\r\\n sequence as a single \\n\n        ++S.pos;\n        ch = \"\\n\";\n      }\n    } else {\n      if (ch.length > 1) {\n        ++S.pos;\n        ++S.col;\n      }\n\n      ++S.col;\n    }\n\n    return ch;\n  }\n\n  function forward(i) {\n    while (i--) {\n      next();\n    }\n  }\n\n  function looking_at(str) {\n    return S.text.substr(S.pos, str.length) == str;\n  }\n\n  function find_eol() {\n    var text = S.text;\n\n    for (var i = S.pos, n = S.text.length; i < n; ++i) {\n      var ch = text[i];\n      if (NEWLINE_CHARS.has(ch)) return i;\n    }\n\n    return -1;\n  }\n\n  function find(what, signal_eof) {\n    var pos = S.text.indexOf(what, S.pos);\n    if (signal_eof && pos == -1) throw EX_EOF;\n    return pos;\n  }\n\n  function start_token() {\n    S.tokline = S.line;\n    S.tokcol = S.col;\n    S.tokpos = S.pos;\n  }\n\n  var prev_was_dot = false;\n  var previous_token = null;\n\n  function token(type, value, is_comment) {\n    S.regex_allowed = type == \"operator\" && !UNARY_POSTFIX.has(value) || type == \"keyword\" && KEYWORDS_BEFORE_EXPRESSION.has(value) || type == \"punc\" && PUNC_BEFORE_EXPRESSION.has(value) || type == \"arrow\";\n\n    if (type == \"punc\" && (value == \".\" || value == \"?.\")) {\n      prev_was_dot = true;\n    } else if (!is_comment) {\n      prev_was_dot = false;\n    }\n\n    var ret = {\n      type: type,\n      value: value,\n      line: S.tokline,\n      col: S.tokcol,\n      pos: S.tokpos,\n      endline: S.line,\n      endcol: S.col,\n      endpos: S.pos,\n      nlb: S.newline_before,\n      file: filename\n    };\n\n    if (/^(?:num|string|regexp)$/i.test(type)) {\n      ret.raw = $TEXT.substring(ret.pos, ret.endpos);\n    }\n\n    if (!is_comment) {\n      ret.comments_before = S.comments_before;\n      ret.comments_after = S.comments_before = [];\n    }\n\n    S.newline_before = false;\n    ret = new AST_Token(ret);\n    if (!is_comment) previous_token = ret;\n    return ret;\n  }\n\n  function skip_whitespace() {\n    while (WHITESPACE_CHARS.has(peek())) {\n      next();\n    }\n  }\n\n  function read_while(pred) {\n    var ret = \"\",\n        ch,\n        i = 0;\n\n    while ((ch = peek()) && pred(ch, i++)) {\n      ret += next();\n    }\n\n    return ret;\n  }\n\n  function parse_error(err) {\n    js_error(err, filename, S.tokline, S.tokcol, S.tokpos);\n  }\n\n  function read_num(prefix) {\n    var has_e = false,\n        after_e = false,\n        has_x = false,\n        has_dot = prefix == \".\",\n        is_big_int = false,\n        numeric_separator = false;\n    var num = read_while(function (ch, i) {\n      if (is_big_int) return false;\n      var code = ch.charCodeAt(0);\n\n      switch (code) {\n        case 95:\n          // _\n          return numeric_separator = true;\n\n        case 98:\n        case 66:\n          // bB\n          return has_x = true;\n        // Can occur in hex sequence, don't return false yet\n\n        case 111:\n        case 79: // oO\n\n        case 120:\n        case 88:\n          // xX\n          return has_x ? false : has_x = true;\n\n        case 101:\n        case 69:\n          // eE\n          return has_x ? true : has_e ? false : has_e = after_e = true;\n\n        case 45:\n          // -\n          return after_e || i == 0 && !prefix;\n\n        case 43:\n          // +\n          return after_e;\n\n        case (after_e = false, 46):\n          // .\n          return !has_dot && !has_x && !has_e ? has_dot = true : false;\n      }\n\n      if (ch === \"n\") {\n        is_big_int = true;\n        return true;\n      }\n\n      return RE_NUM_LITERAL.test(ch);\n    });\n    if (prefix) num = prefix + num;\n\n    if (RE_OCT_NUMBER.test(num) && next_token.has_directive(\"use strict\")) {\n      parse_error(\"Legacy octal literals are not allowed in strict mode\");\n    }\n\n    if (numeric_separator) {\n      if (num.endsWith(\"_\")) {\n        parse_error(\"Numeric separators are not allowed at the end of numeric literals\");\n      } else if (num.includes(\"__\")) {\n        parse_error(\"Only one underscore is allowed as numeric separator\");\n      }\n\n      num = num.replace(/_/g, \"\");\n    }\n\n    if (num.endsWith(\"n\")) {\n      var without_n = num.slice(0, -1);\n      var allow_e = RE_HEX_NUMBER.test(without_n);\n\n      var _valid = parse_js_number(without_n, allow_e);\n\n      if (!has_dot && RE_BIG_INT.test(num) && !isNaN(_valid)) return token(\"big_int\", without_n);\n      parse_error(\"Invalid or unexpected token\");\n    }\n\n    var valid = parse_js_number(num);\n\n    if (!isNaN(valid)) {\n      return token(\"num\", valid);\n    } else {\n      parse_error(\"Invalid syntax: \" + num);\n    }\n  }\n\n  function is_octal(ch) {\n    return ch >= \"0\" && ch <= \"7\";\n  }\n\n  function read_escaped_char(in_string, strict_hex, template_string) {\n    var ch = next(true, in_string);\n\n    switch (ch.charCodeAt(0)) {\n      case 110:\n        return \"\\n\";\n\n      case 114:\n        return \"\\r\";\n\n      case 116:\n        return \"\\t\";\n\n      case 98:\n        return \"\\b\";\n\n      case 118:\n        return \"\\x0B\";\n      // \\v\n\n      case 102:\n        return \"\\f\";\n\n      case 120:\n        return String.fromCharCode(hex_bytes(2, strict_hex));\n      // \\x\n\n      case 117:\n        // \\u\n        if (peek() == \"{\") {\n          next(true);\n          if (peek() === \"}\") parse_error(\"Expecting hex-character between {}\");\n\n          while (peek() == \"0\") {\n            next(true);\n          } // No significance\n\n\n          var result,\n              length = find(\"}\", true) - S.pos; // Avoid 32 bit integer overflow (1 << 32 === 1)\n          // We know first character isn't 0 and thus out of range anyway\n\n          if (length > 6 || (result = hex_bytes(length, strict_hex)) > 0x10FFFF) {\n            parse_error(\"Unicode reference out of bounds\");\n          }\n\n          next(true);\n          return from_char_code(result);\n        }\n\n        return String.fromCharCode(hex_bytes(4, strict_hex));\n\n      case 10:\n        return \"\";\n      // newline\n\n      case 13:\n        // \\r\n        if (peek() == \"\\n\") {\n          // DOS newline\n          next(true, in_string);\n          return \"\";\n        }\n\n    }\n\n    if (is_octal(ch)) {\n      if (template_string && strict_hex) {\n        var represents_null_character = ch === \"0\" && !is_octal(peek());\n\n        if (!represents_null_character) {\n          parse_error(\"Octal escape sequences are not allowed in template strings\");\n        }\n      }\n\n      return read_octal_escape_sequence(ch, strict_hex);\n    }\n\n    return ch;\n  }\n\n  function read_octal_escape_sequence(ch, strict_octal) {\n    // Read\n    var p = peek();\n\n    if (p >= \"0\" && p <= \"7\") {\n      ch += next(true);\n      if (ch[0] <= \"3\" && (p = peek()) >= \"0\" && p <= \"7\") ch += next(true);\n    } // Parse\n\n\n    if (ch === \"0\") return \"\\0\";\n    if (ch.length > 0 && next_token.has_directive(\"use strict\") && strict_octal) parse_error(\"Legacy octal escape sequences are not allowed in strict mode\");\n    return String.fromCharCode(parseInt(ch, 8));\n  }\n\n  function hex_bytes(n, strict_hex) {\n    var num = 0;\n\n    for (; n > 0; --n) {\n      if (!strict_hex && isNaN(parseInt(peek(), 16))) {\n        return parseInt(num, 16) || \"\";\n      }\n\n      var digit = next(true);\n      if (isNaN(parseInt(digit, 16))) parse_error(\"Invalid hex-character pattern in string\");\n      num += digit;\n    }\n\n    return parseInt(num, 16);\n  }\n\n  var read_string = with_eof_error(\"Unterminated string constant\", function () {\n    var quote = next(),\n        ret = \"\";\n\n    for (;;) {\n      var ch = next(true, true);\n      if (ch == \"\\\\\") ch = read_escaped_char(true, true);else if (ch == \"\\r\" || ch == \"\\n\") parse_error(\"Unterminated string constant\");else if (ch == quote) break;\n      ret += ch;\n    }\n\n    var tok = token(\"string\", ret);\n    tok.quote = quote;\n    return tok;\n  });\n  var read_template_characters = with_eof_error(\"Unterminated template\", function (begin) {\n    if (begin) {\n      S.template_braces.push(S.brace_counter);\n    }\n\n    var content = \"\",\n        raw = \"\",\n        ch,\n        tok;\n    next(true, true);\n\n    while ((ch = next(true, true)) != \"`\") {\n      if (ch == \"\\r\") {\n        if (peek() == \"\\n\") ++S.pos;\n        ch = \"\\n\";\n      } else if (ch == \"$\" && peek() == \"{\") {\n        next(true, true);\n        S.brace_counter++;\n        tok = token(begin ? \"template_head\" : \"template_substitution\", content);\n        tok.raw = raw;\n        return tok;\n      }\n\n      raw += ch;\n\n      if (ch == \"\\\\\") {\n        var tmp = S.pos;\n        var prev_is_tag = previous_token && (previous_token.type === \"name\" || previous_token.type === \"punc\" && (previous_token.value === \")\" || previous_token.value === \"]\"));\n        ch = read_escaped_char(true, !prev_is_tag, true);\n        raw += S.text.substr(tmp, S.pos - tmp);\n      }\n\n      content += ch;\n    }\n\n    S.template_braces.pop();\n    tok = token(begin ? \"template_head\" : \"template_substitution\", content);\n    tok.raw = raw;\n    tok.end = true;\n    return tok;\n  });\n\n  function skip_line_comment(type) {\n    var regex_allowed = S.regex_allowed;\n    var i = find_eol(),\n        ret;\n\n    if (i == -1) {\n      ret = S.text.substr(S.pos);\n      S.pos = S.text.length;\n    } else {\n      ret = S.text.substring(S.pos, i);\n      S.pos = i;\n    }\n\n    S.col = S.tokcol + (S.pos - S.tokpos);\n    S.comments_before.push(token(type, ret, true));\n    S.regex_allowed = regex_allowed;\n    return next_token;\n  }\n\n  var skip_multiline_comment = with_eof_error(\"Unterminated multiline comment\", function () {\n    var regex_allowed = S.regex_allowed;\n    var i = find(\"*/\", true);\n    var text = S.text.substring(S.pos, i).replace(/\\r\\n|\\r|\\u2028|\\u2029/g, \"\\n\"); // update stream position\n\n    forward(get_full_char_length(text)\n    /* text length doesn't count \\r\\n as 2 char while S.pos - i does */\n    + 2);\n    S.comments_before.push(token(\"comment2\", text, true));\n    S.newline_before = S.newline_before || text.includes(\"\\n\");\n    S.regex_allowed = regex_allowed;\n    return next_token;\n  });\n  var read_name = with_eof_error(\"Unterminated identifier name\", function () {\n    var name,\n        ch,\n        escaped = false;\n\n    var read_escaped_identifier_char = function read_escaped_identifier_char() {\n      escaped = true;\n      next();\n\n      if (peek() !== \"u\") {\n        parse_error(\"Expecting UnicodeEscapeSequence -- uXXXX or u{XXXX}\");\n      }\n\n      return read_escaped_char(false, true);\n    }; // Read first character (ID_Start)\n\n\n    if ((name = peek()) === \"\\\\\") {\n      name = read_escaped_identifier_char();\n\n      if (!is_identifier_start(name)) {\n        parse_error(\"First identifier char is an invalid identifier char\");\n      }\n    } else if (is_identifier_start(name)) {\n      next();\n    } else {\n      return \"\";\n    } // Read ID_Continue\n\n\n    while ((ch = peek()) != null) {\n      if ((ch = peek()) === \"\\\\\") {\n        ch = read_escaped_identifier_char();\n\n        if (!is_identifier_char(ch)) {\n          parse_error(\"Invalid escaped identifier char\");\n        }\n      } else {\n        if (!is_identifier_char(ch)) {\n          break;\n        }\n\n        next();\n      }\n\n      name += ch;\n    }\n\n    if (RESERVED_WORDS.has(name) && escaped) {\n      parse_error(\"Escaped characters are not allowed in keywords\");\n    }\n\n    return name;\n  });\n  var read_regexp = with_eof_error(\"Unterminated regular expression\", function (source) {\n    var prev_backslash = false,\n        ch,\n        in_class = false;\n\n    while (ch = next(true)) {\n      if (NEWLINE_CHARS.has(ch)) {\n        parse_error(\"Unexpected line terminator\");\n      } else if (prev_backslash) {\n        source += \"\\\\\" + ch;\n        prev_backslash = false;\n      } else if (ch == \"[\") {\n        in_class = true;\n        source += ch;\n      } else if (ch == \"]\" && in_class) {\n        in_class = false;\n        source += ch;\n      } else if (ch == \"/\" && !in_class) {\n        break;\n      } else if (ch == \"\\\\\") {\n        prev_backslash = true;\n      } else {\n        source += ch;\n      }\n    }\n\n    var flags = read_name();\n    return token(\"regexp\", {\n      source: source,\n      flags: flags\n    });\n  });\n\n  function read_operator(prefix) {\n    function grow(op) {\n      if (!peek()) return op;\n      var bigger = op + peek();\n\n      if (OPERATORS.has(bigger)) {\n        next();\n        return grow(bigger);\n      } else {\n        return op;\n      }\n    }\n\n    return token(\"operator\", grow(prefix || next()));\n  }\n\n  function handle_slash() {\n    next();\n\n    switch (peek()) {\n      case \"/\":\n        next();\n        return skip_line_comment(\"comment1\");\n\n      case \"*\":\n        next();\n        return skip_multiline_comment();\n    }\n\n    return S.regex_allowed ? read_regexp(\"\") : read_operator(\"/\");\n  }\n\n  function handle_eq_sign() {\n    next();\n\n    if (peek() === \">\") {\n      next();\n      return token(\"arrow\", \"=>\");\n    } else {\n      return read_operator(\"=\");\n    }\n  }\n\n  function handle_dot() {\n    next();\n\n    if (is_digit(peek().charCodeAt(0))) {\n      return read_num(\".\");\n    }\n\n    if (peek() === \".\") {\n      next(); // Consume second dot\n\n      next(); // Consume third dot\n\n      return token(\"expand\", \"...\");\n    }\n\n    return token(\"punc\", \".\");\n  }\n\n  function read_word() {\n    var word = read_name();\n    if (prev_was_dot) return token(\"name\", word);\n    return KEYWORDS_ATOM.has(word) ? token(\"atom\", word) : !KEYWORDS.has(word) ? token(\"name\", word) : OPERATORS.has(word) ? token(\"operator\", word) : token(\"keyword\", word);\n  }\n\n  function with_eof_error(eof_error, cont) {\n    return function (x) {\n      try {\n        return cont(x);\n      } catch (ex) {\n        if (ex === EX_EOF) parse_error(eof_error);else throw ex;\n      }\n    };\n  }\n\n  function next_token(force_regexp) {\n    if (force_regexp != null) return read_regexp(force_regexp);\n\n    if (shebang && S.pos == 0 && looking_at(\"#!\")) {\n      start_token();\n      forward(2);\n      skip_line_comment(\"comment5\");\n    }\n\n    for (;;) {\n      skip_whitespace();\n      start_token();\n\n      if (html5_comments) {\n        if (looking_at(\"<!--\")) {\n          forward(4);\n          skip_line_comment(\"comment3\");\n          continue;\n        }\n\n        if (looking_at(\"-->\") && S.newline_before) {\n          forward(3);\n          skip_line_comment(\"comment4\");\n          continue;\n        }\n      }\n\n      var ch = peek();\n      if (!ch) return token(\"eof\");\n      var code = ch.charCodeAt(0);\n\n      switch (code) {\n        case 34:\n        case 39:\n          return read_string();\n\n        case 46:\n          return handle_dot();\n\n        case 47:\n          {\n            var tok = handle_slash();\n            if (tok === next_token) continue;\n            return tok;\n          }\n\n        case 61:\n          return handle_eq_sign();\n\n        case 63:\n          {\n            if (!is_option_chain_op()) break; // Handled below\n\n            next(); // ?\n\n            next(); // .\n\n            return token(\"punc\", \"?.\");\n          }\n\n        case 96:\n          return read_template_characters(true);\n\n        case 123:\n          S.brace_counter++;\n          break;\n\n        case 125:\n          S.brace_counter--;\n          if (S.template_braces.length > 0 && S.template_braces[S.template_braces.length - 1] === S.brace_counter) return read_template_characters(false);\n          break;\n      }\n\n      if (is_digit(code)) return read_num();\n      if (PUNC_CHARS.has(ch)) return token(\"punc\", next());\n      if (OPERATOR_CHARS.has(ch)) return read_operator();\n      if (code == 92 || is_identifier_start(ch)) return read_word();\n      break;\n    }\n\n    parse_error(\"Unexpected character '\" + ch + \"'\");\n  }\n\n  next_token.next = next;\n  next_token.peek = peek;\n\n  next_token.context = function (nc) {\n    if (nc) S = nc;\n    return S;\n  };\n\n  next_token.add_directive = function (directive) {\n    S.directive_stack[S.directive_stack.length - 1].push(directive);\n\n    if (S.directives[directive] === undefined) {\n      S.directives[directive] = 1;\n    } else {\n      S.directives[directive]++;\n    }\n  };\n\n  next_token.push_directives_stack = function () {\n    S.directive_stack.push([]);\n  };\n\n  next_token.pop_directives_stack = function () {\n    var directives = S.directive_stack[S.directive_stack.length - 1];\n\n    for (var i = 0; i < directives.length; i++) {\n      S.directives[directives[i]]--;\n    }\n\n    S.directive_stack.pop();\n  };\n\n  next_token.has_directive = function (directive) {\n    return S.directives[directive] > 0;\n  };\n\n  return next_token;\n}\n/* -----[ Parser (constants) ]----- */\n\n\nvar UNARY_PREFIX = makePredicate([\"typeof\", \"void\", \"delete\", \"--\", \"++\", \"!\", \"~\", \"-\", \"+\"]);\nvar UNARY_POSTFIX = makePredicate([\"--\", \"++\"]);\nvar ASSIGNMENT = makePredicate([\"=\", \"+=\", \"-=\", \"/=\", \"*=\", \"**=\", \"%=\", \">>=\", \"<<=\", \">>>=\", \"|=\", \"^=\", \"&=\"]);\n\nvar PRECEDENCE = function (a, ret) {\n  for (var i = 0; i < a.length; ++i) {\n    var b = a[i];\n\n    for (var j = 0; j < b.length; ++j) {\n      ret[b[j]] = i + 1;\n    }\n  }\n\n  return ret;\n}([[\"||\"], [\"??\"], [\"&&\"], [\"|\"], [\"^\"], [\"&\"], [\"==\", \"===\", \"!=\", \"!==\"], [\"<\", \">\", \"<=\", \">=\", \"in\", \"instanceof\"], [\">>\", \"<<\", \">>>\"], [\"+\", \"-\"], [\"*\", \"/\", \"%\"], [\"**\"]], {});\n\nvar ATOMIC_START_TOKEN = makePredicate([\"atom\", \"num\", \"big_int\", \"string\", \"regexp\", \"name\"]);\n/* -----[ Parser ]----- */\n\nfunction parse($TEXT, options) {\n  // maps start tokens to count of comments found outside of their parens\n  // Example: /* I count */ ( /* I don't */ foo() )\n  // Useful because comments_before property of call with parens outside\n  // contains both comments inside and outside these parens. Used to find the\n  // right #__PURE__ comments for an expression\n  var outer_comments_before_counts = new Map();\n  options = defaults(options, {\n    bare_returns: false,\n    ecma: null,\n    // Legacy\n    expression: false,\n    filename: null,\n    html5_comments: true,\n    module: false,\n    shebang: true,\n    strict: false,\n    toplevel: null\n  }, true);\n  var S = {\n    input: typeof $TEXT == \"string\" ? tokenizer($TEXT, options.filename, options.html5_comments, options.shebang) : $TEXT,\n    token: null,\n    prev: null,\n    peeked: null,\n    in_function: 0,\n    in_async: -1,\n    in_generator: -1,\n    in_directives: true,\n    in_loop: 0,\n    labels: []\n  };\n  S.token = next();\n\n  function is(type, value) {\n    return is_token(S.token, type, value);\n  }\n\n  function peek() {\n    return S.peeked || (S.peeked = S.input());\n  }\n\n  function next() {\n    S.prev = S.token;\n    if (!S.peeked) peek();\n    S.token = S.peeked;\n    S.peeked = null;\n    S.in_directives = S.in_directives && (S.token.type == \"string\" || is(\"punc\", \";\"));\n    return S.token;\n  }\n\n  function prev() {\n    return S.prev;\n  }\n\n  function croak(msg, line, col, pos) {\n    var ctx = S.input.context();\n    js_error(msg, ctx.filename, line != null ? line : ctx.tokline, col != null ? col : ctx.tokcol, pos != null ? pos : ctx.tokpos);\n  }\n\n  function token_error(token, msg) {\n    croak(msg, token.line, token.col);\n  }\n\n  function unexpected(token) {\n    if (token == null) token = S.token;\n    token_error(token, \"Unexpected token: \" + token.type + \" (\" + token.value + \")\");\n  }\n\n  function expect_token(type, val) {\n    if (is(type, val)) {\n      return next();\n    }\n\n    token_error(S.token, \"Unexpected token \" + S.token.type + \" «\" + S.token.value + \"»\" + \", expected \" + type + \" «\" + val + \"»\");\n  }\n\n  function expect(punc) {\n    return expect_token(\"punc\", punc);\n  }\n\n  function has_newline_before(token) {\n    return token.nlb || !token.comments_before.every(function (comment) {\n      return !comment.nlb;\n    });\n  }\n\n  function can_insert_semicolon() {\n    return !options.strict && (is(\"eof\") || is(\"punc\", \"}\") || has_newline_before(S.token));\n  }\n\n  function is_in_generator() {\n    return S.in_generator === S.in_function;\n  }\n\n  function is_in_async() {\n    return S.in_async === S.in_function;\n  }\n\n  function semicolon(optional) {\n    if (is(\"punc\", \";\")) next();else if (!optional && !can_insert_semicolon()) unexpected();\n  }\n\n  function parenthesised() {\n    expect(\"(\");\n    var exp = expression(true);\n    expect(\")\");\n    return exp;\n  }\n\n  function embed_tokens(parser) {\n    return function _embed_tokens_wrapper() {\n      var start = S.token;\n      var expr = parser.apply(void 0, arguments);\n      expr.start = start;\n      expr.end = prev();\n      return expr;\n    };\n  }\n\n  function handle_regexp() {\n    if (is(\"operator\", \"/\") || is(\"operator\", \"/=\")) {\n      S.peeked = null;\n      S.token = S.input(S.token.value.substr(1)); // force regexp\n    }\n  }\n\n  var statement = embed_tokens(function statement(is_export_default, is_for_body, is_if_body) {\n    handle_regexp();\n\n    switch (S.token.type) {\n      case \"string\":\n        if (S.in_directives) {\n          var token = peek();\n\n          if (!S.token.raw.includes(\"\\\\\") && (is_token(token, \"punc\", \";\") || is_token(token, \"punc\", \"}\") || has_newline_before(token) || is_token(token, \"eof\"))) {\n            S.input.add_directive(S.token.value);\n          } else {\n            S.in_directives = false;\n          }\n        }\n\n        var dir = S.in_directives,\n            stat = simple_statement();\n        return dir && stat.body instanceof AST_String ? new AST_Directive(stat.body) : stat;\n\n      case \"template_head\":\n      case \"num\":\n      case \"big_int\":\n      case \"regexp\":\n      case \"operator\":\n      case \"atom\":\n        return simple_statement();\n\n      case \"name\":\n        if (S.token.value == \"async\" && is_token(peek(), \"keyword\", \"function\")) {\n          next();\n          next();\n\n          if (is_for_body) {\n            croak(\"functions are not allowed as the body of a loop\");\n          }\n\n          return function_(AST_Defun, false, true, is_export_default);\n        }\n\n        if (S.token.value == \"import\" && !is_token(peek(), \"punc\", \"(\") && !is_token(peek(), \"punc\", \".\")) {\n          next();\n          var node = import_();\n          semicolon();\n          return node;\n        }\n\n        return is_token(peek(), \"punc\", \":\") ? labeled_statement() : simple_statement();\n\n      case \"punc\":\n        switch (S.token.value) {\n          case \"{\":\n            return new AST_BlockStatement({\n              start: S.token,\n              body: block_(),\n              end: prev()\n            });\n\n          case \"[\":\n          case \"(\":\n            return simple_statement();\n\n          case \";\":\n            S.in_directives = false;\n            next();\n            return new AST_EmptyStatement();\n\n          default:\n            unexpected();\n        }\n\n      case \"keyword\":\n        switch (S.token.value) {\n          case \"break\":\n            next();\n            return break_cont(AST_Break);\n\n          case \"continue\":\n            next();\n            return break_cont(AST_Continue);\n\n          case \"debugger\":\n            next();\n            semicolon();\n            return new AST_Debugger();\n\n          case \"do\":\n            next();\n            var body = in_loop(statement);\n            expect_token(\"keyword\", \"while\");\n            var condition = parenthesised();\n            semicolon(true);\n            return new AST_Do({\n              body: body,\n              condition: condition\n            });\n\n          case \"while\":\n            next();\n            return new AST_While({\n              condition: parenthesised(),\n              body: in_loop(function () {\n                return statement(false, true);\n              })\n            });\n\n          case \"for\":\n            next();\n            return for_();\n\n          case \"class\":\n            next();\n\n            if (is_for_body) {\n              croak(\"classes are not allowed as the body of a loop\");\n            }\n\n            if (is_if_body) {\n              croak(\"classes are not allowed as the body of an if\");\n            }\n\n            return class_(AST_DefClass);\n\n          case \"function\":\n            next();\n\n            if (is_for_body) {\n              croak(\"functions are not allowed as the body of a loop\");\n            }\n\n            return function_(AST_Defun, false, false, is_export_default);\n\n          case \"if\":\n            next();\n            return if_();\n\n          case \"return\":\n            if (S.in_function == 0 && !options.bare_returns) croak(\"'return' outside of function\");\n            next();\n            var value = null;\n\n            if (is(\"punc\", \";\")) {\n              next();\n            } else if (!can_insert_semicolon()) {\n              value = expression(true);\n              semicolon();\n            }\n\n            return new AST_Return({\n              value: value\n            });\n\n          case \"switch\":\n            next();\n            return new AST_Switch({\n              expression: parenthesised(),\n              body: in_loop(switch_body_)\n            });\n\n          case \"throw\":\n            next();\n            if (has_newline_before(S.token)) croak(\"Illegal newline after 'throw'\");\n            var value = expression(true);\n            semicolon();\n            return new AST_Throw({\n              value: value\n            });\n\n          case \"try\":\n            next();\n            return try_();\n\n          case \"var\":\n            next();\n            var node = var_();\n            semicolon();\n            return node;\n\n          case \"let\":\n            next();\n            var node = let_();\n            semicolon();\n            return node;\n\n          case \"const\":\n            next();\n            var node = const_();\n            semicolon();\n            return node;\n\n          case \"with\":\n            if (S.input.has_directive(\"use strict\")) {\n              croak(\"Strict mode may not include a with statement\");\n            }\n\n            next();\n            return new AST_With({\n              expression: parenthesised(),\n              body: statement()\n            });\n\n          case \"export\":\n            if (!is_token(peek(), \"punc\", \"(\")) {\n              next();\n              var node = export_();\n              if (is(\"punc\", \";\")) semicolon();\n              return node;\n            }\n\n        }\n\n    }\n\n    unexpected();\n  });\n\n  function labeled_statement() {\n    var label = as_symbol(AST_Label);\n\n    if (label.name === \"await\" && is_in_async()) {\n      token_error(S.prev, \"await cannot be used as label inside async function\");\n    }\n\n    if (S.labels.some(function (l) {\n      return l.name === label.name;\n    })) {\n      // ECMA-262, 12.12: An ECMAScript program is considered\n      // syntactically incorrect if it contains a\n      // LabelledStatement that is enclosed by a\n      // LabelledStatement with the same Identifier as label.\n      croak(\"Label \" + label.name + \" defined twice\");\n    }\n\n    expect(\":\");\n    S.labels.push(label);\n    var stat = statement();\n    S.labels.pop();\n\n    if (!(stat instanceof AST_IterationStatement)) {\n      // check for `continue` that refers to this label.\n      // those should be reported as syntax errors.\n      // https://github.com/mishoo/UglifyJS2/issues/287\n      label.references.forEach(function (ref) {\n        if (ref instanceof AST_Continue) {\n          ref = ref.label.start;\n          croak(\"Continue label `\" + label.name + \"` refers to non-IterationStatement.\", ref.line, ref.col, ref.pos);\n        }\n      });\n    }\n\n    return new AST_LabeledStatement({\n      body: stat,\n      label: label\n    });\n  }\n\n  function simple_statement(tmp) {\n    return new AST_SimpleStatement({\n      body: (tmp = expression(true), semicolon(), tmp)\n    });\n  }\n\n  function break_cont(type) {\n    var label = null,\n        ldef;\n\n    if (!can_insert_semicolon()) {\n      label = as_symbol(AST_LabelRef, true);\n    }\n\n    if (label != null) {\n      ldef = S.labels.find(function (l) {\n        return l.name === label.name;\n      });\n      if (!ldef) croak(\"Undefined label \" + label.name);\n      label.thedef = ldef;\n    } else if (S.in_loop == 0) croak(type.TYPE + \" not inside a loop or switch\");\n\n    semicolon();\n    var stat = new type({\n      label: label\n    });\n    if (ldef) ldef.references.push(stat);\n    return stat;\n  }\n\n  function for_() {\n    var for_await_error = \"`for await` invalid in this context\";\n    var await_tok = S.token;\n\n    if (await_tok.type == \"name\" && await_tok.value == \"await\") {\n      if (!is_in_async()) {\n        token_error(await_tok, for_await_error);\n      }\n\n      next();\n    } else {\n      await_tok = false;\n    }\n\n    expect(\"(\");\n    var init = null;\n\n    if (!is(\"punc\", \";\")) {\n      init = is(\"keyword\", \"var\") ? (next(), var_(true)) : is(\"keyword\", \"let\") ? (next(), let_(true)) : is(\"keyword\", \"const\") ? (next(), const_(true)) : expression(true, true);\n      var is_in = is(\"operator\", \"in\");\n      var is_of = is(\"name\", \"of\");\n\n      if (await_tok && !is_of) {\n        token_error(await_tok, for_await_error);\n      }\n\n      if (is_in || is_of) {\n        if (init instanceof AST_Definitions) {\n          if (init.definitions.length > 1) token_error(init.start, \"Only one variable declaration allowed in for..in loop\");\n        } else if (!(is_assignable(init) || (init = to_destructuring(init)) instanceof AST_Destructuring)) {\n          token_error(init.start, \"Invalid left-hand side in for..in loop\");\n        }\n\n        next();\n\n        if (is_in) {\n          return for_in(init);\n        } else {\n          return for_of(init, !!await_tok);\n        }\n      }\n    } else if (await_tok) {\n      token_error(await_tok, for_await_error);\n    }\n\n    return regular_for(init);\n  }\n\n  function regular_for(init) {\n    expect(\";\");\n    var test = is(\"punc\", \";\") ? null : expression(true);\n    expect(\";\");\n    var step = is(\"punc\", \")\") ? null : expression(true);\n    expect(\")\");\n    return new AST_For({\n      init: init,\n      condition: test,\n      step: step,\n      body: in_loop(function () {\n        return statement(false, true);\n      })\n    });\n  }\n\n  function for_of(init, is_await) {\n    var lhs = init instanceof AST_Definitions ? init.definitions[0].name : null;\n    var obj = expression(true);\n    expect(\")\");\n    return new AST_ForOf({\n      await: is_await,\n      init: init,\n      name: lhs,\n      object: obj,\n      body: in_loop(function () {\n        return statement(false, true);\n      })\n    });\n  }\n\n  function for_in(init) {\n    var obj = expression(true);\n    expect(\")\");\n    return new AST_ForIn({\n      init: init,\n      object: obj,\n      body: in_loop(function () {\n        return statement(false, true);\n      })\n    });\n  }\n\n  var arrow_function = function arrow_function(start, argnames, is_async) {\n    if (has_newline_before(S.token)) {\n      croak(\"Unexpected newline before arrow (=>)\");\n    }\n\n    expect_token(\"arrow\", \"=>\");\n\n    var body = _function_body(is(\"punc\", \"{\"), false, is_async);\n\n    var end = body instanceof Array && body.length ? body[body.length - 1].end : body instanceof Array ? start : body.end;\n    return new AST_Arrow({\n      start: start,\n      end: end,\n      async: is_async,\n      argnames: argnames,\n      body: body\n    });\n  };\n\n  var function_ = function function_(ctor, is_generator_property, is_async, is_export_default) {\n    var in_statement = ctor === AST_Defun;\n    var is_generator = is(\"operator\", \"*\");\n\n    if (is_generator) {\n      next();\n    }\n\n    var name = is(\"name\") ? as_symbol(in_statement ? AST_SymbolDefun : AST_SymbolLambda) : null;\n\n    if (in_statement && !name) {\n      if (is_export_default) {\n        ctor = AST_Function;\n      } else {\n        unexpected();\n      }\n    }\n\n    if (name && ctor !== AST_Accessor && !(name instanceof AST_SymbolDeclaration)) unexpected(prev());\n    var args = [];\n\n    var body = _function_body(true, is_generator || is_generator_property, is_async, name, args);\n\n    return new ctor({\n      start: args.start,\n      end: body.end,\n      is_generator: is_generator,\n      async: is_async,\n      name: name,\n      argnames: args,\n      body: body\n    });\n  };\n\n  function track_used_binding_identifiers(is_parameter, strict) {\n    var parameters = new Set();\n    var duplicate = false;\n    var default_assignment = false;\n    var spread = false;\n    var strict_mode = !!strict;\n    var tracker = {\n      add_parameter: function add_parameter(token) {\n        if (parameters.has(token.value)) {\n          if (duplicate === false) {\n            duplicate = token;\n          }\n\n          tracker.check_strict();\n        } else {\n          parameters.add(token.value);\n\n          if (is_parameter) {\n            switch (token.value) {\n              case \"arguments\":\n              case \"eval\":\n              case \"yield\":\n                if (strict_mode) {\n                  token_error(token, \"Unexpected \" + token.value + \" identifier as parameter inside strict mode\");\n                }\n\n                break;\n\n              default:\n                if (RESERVED_WORDS.has(token.value)) {\n                  unexpected();\n                }\n\n            }\n          }\n        }\n      },\n      mark_default_assignment: function mark_default_assignment(token) {\n        if (default_assignment === false) {\n          default_assignment = token;\n        }\n      },\n      mark_spread: function mark_spread(token) {\n        if (spread === false) {\n          spread = token;\n        }\n      },\n      mark_strict_mode: function mark_strict_mode() {\n        strict_mode = true;\n      },\n      is_strict: function is_strict() {\n        return default_assignment !== false || spread !== false || strict_mode;\n      },\n      check_strict: function check_strict() {\n        if (tracker.is_strict() && duplicate !== false) {\n          token_error(duplicate, \"Parameter \" + duplicate.value + \" was used already\");\n        }\n      }\n    };\n    return tracker;\n  }\n\n  function parameters(params) {\n    var used_parameters = track_used_binding_identifiers(true, S.input.has_directive(\"use strict\"));\n    expect(\"(\");\n\n    while (!is(\"punc\", \")\")) {\n      var param = parameter(used_parameters);\n      params.push(param);\n\n      if (!is(\"punc\", \")\")) {\n        expect(\",\");\n      }\n\n      if (param instanceof AST_Expansion) {\n        break;\n      }\n    }\n\n    next();\n  }\n\n  function parameter(used_parameters, symbol_type) {\n    var param;\n    var expand = false;\n\n    if (used_parameters === undefined) {\n      used_parameters = track_used_binding_identifiers(true, S.input.has_directive(\"use strict\"));\n    }\n\n    if (is(\"expand\", \"...\")) {\n      expand = S.token;\n      used_parameters.mark_spread(S.token);\n      next();\n    }\n\n    param = binding_element(used_parameters, symbol_type);\n\n    if (is(\"operator\", \"=\") && expand === false) {\n      used_parameters.mark_default_assignment(S.token);\n      next();\n      param = new AST_DefaultAssign({\n        start: param.start,\n        left: param,\n        operator: \"=\",\n        right: expression(false),\n        end: S.token\n      });\n    }\n\n    if (expand !== false) {\n      if (!is(\"punc\", \")\")) {\n        unexpected();\n      }\n\n      param = new AST_Expansion({\n        start: expand,\n        expression: param,\n        end: expand\n      });\n    }\n\n    used_parameters.check_strict();\n    return param;\n  }\n\n  function binding_element(used_parameters, symbol_type) {\n    var elements = [];\n    var first = true;\n    var is_expand = false;\n    var expand_token;\n    var first_token = S.token;\n\n    if (used_parameters === undefined) {\n      used_parameters = track_used_binding_identifiers(false, S.input.has_directive(\"use strict\"));\n    }\n\n    symbol_type = symbol_type === undefined ? AST_SymbolFunarg : symbol_type;\n\n    if (is(\"punc\", \"[\")) {\n      next();\n\n      while (!is(\"punc\", \"]\")) {\n        if (first) {\n          first = false;\n        } else {\n          expect(\",\");\n        }\n\n        if (is(\"expand\", \"...\")) {\n          is_expand = true;\n          expand_token = S.token;\n          used_parameters.mark_spread(S.token);\n          next();\n        }\n\n        if (is(\"punc\")) {\n          switch (S.token.value) {\n            case \",\":\n              elements.push(new AST_Hole({\n                start: S.token,\n                end: S.token\n              }));\n              continue;\n\n            case \"]\":\n              // Trailing comma after last element\n              break;\n\n            case \"[\":\n            case \"{\":\n              elements.push(binding_element(used_parameters, symbol_type));\n              break;\n\n            default:\n              unexpected();\n          }\n        } else if (is(\"name\")) {\n          used_parameters.add_parameter(S.token);\n          elements.push(as_symbol(symbol_type));\n        } else {\n          croak(\"Invalid function parameter\");\n        }\n\n        if (is(\"operator\", \"=\") && is_expand === false) {\n          used_parameters.mark_default_assignment(S.token);\n          next();\n          elements[elements.length - 1] = new AST_DefaultAssign({\n            start: elements[elements.length - 1].start,\n            left: elements[elements.length - 1],\n            operator: \"=\",\n            right: expression(false),\n            end: S.token\n          });\n        }\n\n        if (is_expand) {\n          if (!is(\"punc\", \"]\")) {\n            croak(\"Rest element must be last element\");\n          }\n\n          elements[elements.length - 1] = new AST_Expansion({\n            start: expand_token,\n            expression: elements[elements.length - 1],\n            end: expand_token\n          });\n        }\n      }\n\n      expect(\"]\");\n      used_parameters.check_strict();\n      return new AST_Destructuring({\n        start: first_token,\n        names: elements,\n        is_array: true,\n        end: prev()\n      });\n    } else if (is(\"punc\", \"{\")) {\n      next();\n\n      while (!is(\"punc\", \"}\")) {\n        if (first) {\n          first = false;\n        } else {\n          expect(\",\");\n        }\n\n        if (is(\"expand\", \"...\")) {\n          is_expand = true;\n          expand_token = S.token;\n          used_parameters.mark_spread(S.token);\n          next();\n        }\n\n        if (is(\"name\") && (is_token(peek(), \"punc\") || is_token(peek(), \"operator\")) && [\",\", \"}\", \"=\"].includes(peek().value)) {\n          used_parameters.add_parameter(S.token);\n          var start = prev();\n          var value = as_symbol(symbol_type);\n\n          if (is_expand) {\n            elements.push(new AST_Expansion({\n              start: expand_token,\n              expression: value,\n              end: value.end\n            }));\n          } else {\n            elements.push(new AST_ObjectKeyVal({\n              start: start,\n              key: value.name,\n              value: value,\n              end: value.end\n            }));\n          }\n        } else if (is(\"punc\", \"}\")) {\n          continue; // Allow trailing hole\n        } else {\n          var property_token = S.token;\n          var property = as_property_name();\n\n          if (property === null) {\n            unexpected(prev());\n          } else if (prev().type === \"name\" && !is(\"punc\", \":\")) {\n            elements.push(new AST_ObjectKeyVal({\n              start: prev(),\n              key: property,\n              value: new symbol_type({\n                start: prev(),\n                name: property,\n                end: prev()\n              }),\n              end: prev()\n            }));\n          } else {\n            expect(\":\");\n            elements.push(new AST_ObjectKeyVal({\n              start: property_token,\n              quote: property_token.quote,\n              key: property,\n              value: binding_element(used_parameters, symbol_type),\n              end: prev()\n            }));\n          }\n        }\n\n        if (is_expand) {\n          if (!is(\"punc\", \"}\")) {\n            croak(\"Rest element must be last element\");\n          }\n        } else if (is(\"operator\", \"=\")) {\n          used_parameters.mark_default_assignment(S.token);\n          next();\n          elements[elements.length - 1].value = new AST_DefaultAssign({\n            start: elements[elements.length - 1].value.start,\n            left: elements[elements.length - 1].value,\n            operator: \"=\",\n            right: expression(false),\n            end: S.token\n          });\n        }\n      }\n\n      expect(\"}\");\n      used_parameters.check_strict();\n      return new AST_Destructuring({\n        start: first_token,\n        names: elements,\n        is_array: false,\n        end: prev()\n      });\n    } else if (is(\"name\")) {\n      used_parameters.add_parameter(S.token);\n      return as_symbol(symbol_type);\n    } else {\n      croak(\"Invalid function parameter\");\n    }\n  }\n\n  function params_or_seq_(allow_arrows, maybe_sequence) {\n    var spread_token;\n    var invalid_sequence;\n    var trailing_comma;\n    var a = [];\n    expect(\"(\");\n\n    while (!is(\"punc\", \")\")) {\n      if (spread_token) unexpected(spread_token);\n\n      if (is(\"expand\", \"...\")) {\n        spread_token = S.token;\n        if (maybe_sequence) invalid_sequence = S.token;\n        next();\n        a.push(new AST_Expansion({\n          start: prev(),\n          expression: expression(),\n          end: S.token\n        }));\n      } else {\n        a.push(expression());\n      }\n\n      if (!is(\"punc\", \")\")) {\n        expect(\",\");\n\n        if (is(\"punc\", \")\")) {\n          trailing_comma = prev();\n          if (maybe_sequence) invalid_sequence = trailing_comma;\n        }\n      }\n    }\n\n    expect(\")\");\n\n    if (allow_arrows && is(\"arrow\", \"=>\")) {\n      if (spread_token && trailing_comma) unexpected(trailing_comma);\n    } else if (invalid_sequence) {\n      unexpected(invalid_sequence);\n    }\n\n    return a;\n  }\n\n  function _function_body(block, generator, is_async, name, args) {\n    var loop = S.in_loop;\n    var labels = S.labels;\n    var current_generator = S.in_generator;\n    var current_async = S.in_async;\n    ++S.in_function;\n    if (generator) S.in_generator = S.in_function;\n    if (is_async) S.in_async = S.in_function;\n    if (args) parameters(args);\n    if (block) S.in_directives = true;\n    S.in_loop = 0;\n    S.labels = [];\n\n    if (block) {\n      S.input.push_directives_stack();\n      var a = block_();\n      if (name) _verify_symbol(name);\n      if (args) args.forEach(_verify_symbol);\n      S.input.pop_directives_stack();\n    } else {\n      var a = [new AST_Return({\n        start: S.token,\n        value: expression(false),\n        end: S.token\n      })];\n    }\n\n    --S.in_function;\n    S.in_loop = loop;\n    S.labels = labels;\n    S.in_generator = current_generator;\n    S.in_async = current_async;\n    return a;\n  }\n\n  function _await_expression() {\n    // Previous token must be \"await\" and not be interpreted as an identifier\n    if (!is_in_async()) {\n      croak(\"Unexpected await expression outside async function\", S.prev.line, S.prev.col, S.prev.pos);\n    } // the await expression is parsed as a unary expression in Babel\n\n\n    return new AST_Await({\n      start: prev(),\n      end: S.token,\n      expression: maybe_unary(true)\n    });\n  }\n\n  function _yield_expression() {\n    // Previous token must be keyword yield and not be interpret as an identifier\n    if (!is_in_generator()) {\n      croak(\"Unexpected yield expression outside generator function\", S.prev.line, S.prev.col, S.prev.pos);\n    }\n\n    var start = S.token;\n    var star = false;\n    var has_expression = true; // Attempt to get expression or star (and then the mandatory expression)\n    // behind yield on the same line.\n    //\n    // If nothing follows on the same line of the yieldExpression,\n    // it should default to the value `undefined` for yield to return.\n    // In that case, the `undefined` stored as `null` in ast.\n    //\n    // Note 1: It isn't allowed for yield* to close without an expression\n    // Note 2: If there is a nlb between yield and star, it is interpret as\n    //         yield <explicit undefined> <inserted automatic semicolon> *\n\n    if (can_insert_semicolon() || is(\"punc\") && PUNC_AFTER_EXPRESSION.has(S.token.value)) {\n      has_expression = false;\n    } else if (is(\"operator\", \"*\")) {\n      star = true;\n      next();\n    }\n\n    return new AST_Yield({\n      start: start,\n      is_star: star,\n      expression: has_expression ? expression() : null,\n      end: prev()\n    });\n  }\n\n  function if_() {\n    var cond = parenthesised(),\n        body = statement(false, false, true),\n        belse = null;\n\n    if (is(\"keyword\", \"else\")) {\n      next();\n      belse = statement(false, false, true);\n    }\n\n    return new AST_If({\n      condition: cond,\n      body: body,\n      alternative: belse\n    });\n  }\n\n  function block_() {\n    expect(\"{\");\n    var a = [];\n\n    while (!is(\"punc\", \"}\")) {\n      if (is(\"eof\")) unexpected();\n      a.push(statement());\n    }\n\n    next();\n    return a;\n  }\n\n  function switch_body_() {\n    expect(\"{\");\n    var a = [],\n        cur = null,\n        branch = null,\n        tmp;\n\n    while (!is(\"punc\", \"}\")) {\n      if (is(\"eof\")) unexpected();\n\n      if (is(\"keyword\", \"case\")) {\n        if (branch) branch.end = prev();\n        cur = [];\n        branch = new AST_Case({\n          start: (tmp = S.token, next(), tmp),\n          expression: expression(true),\n          body: cur\n        });\n        a.push(branch);\n        expect(\":\");\n      } else if (is(\"keyword\", \"default\")) {\n        if (branch) branch.end = prev();\n        cur = [];\n        branch = new AST_Default({\n          start: (tmp = S.token, next(), expect(\":\"), tmp),\n          body: cur\n        });\n        a.push(branch);\n      } else {\n        if (!cur) unexpected();\n        cur.push(statement());\n      }\n    }\n\n    if (branch) branch.end = prev();\n    next();\n    return a;\n  }\n\n  function try_() {\n    var body = block_(),\n        bcatch = null,\n        bfinally = null;\n\n    if (is(\"keyword\", \"catch\")) {\n      var start = S.token;\n      next();\n\n      if (is(\"punc\", \"{\")) {\n        var name = null;\n      } else {\n        expect(\"(\");\n        var name = parameter(undefined, AST_SymbolCatch);\n        expect(\")\");\n      }\n\n      bcatch = new AST_Catch({\n        start: start,\n        argname: name,\n        body: block_(),\n        end: prev()\n      });\n    }\n\n    if (is(\"keyword\", \"finally\")) {\n      var start = S.token;\n      next();\n      bfinally = new AST_Finally({\n        start: start,\n        body: block_(),\n        end: prev()\n      });\n    }\n\n    if (!bcatch && !bfinally) croak(\"Missing catch/finally blocks\");\n    return new AST_Try({\n      body: body,\n      bcatch: bcatch,\n      bfinally: bfinally\n    });\n  }\n\n  function vardefs(no_in, kind) {\n    var a = [];\n    var def;\n\n    for (;;) {\n      var sym_type = kind === \"var\" ? AST_SymbolVar : kind === \"const\" ? AST_SymbolConst : kind === \"let\" ? AST_SymbolLet : null;\n\n      if (is(\"punc\", \"{\") || is(\"punc\", \"[\")) {\n        def = new AST_VarDef({\n          start: S.token,\n          name: binding_element(undefined, sym_type),\n          value: is(\"operator\", \"=\") ? (expect_token(\"operator\", \"=\"), expression(false, no_in)) : null,\n          end: prev()\n        });\n      } else {\n        def = new AST_VarDef({\n          start: S.token,\n          name: as_symbol(sym_type),\n          value: is(\"operator\", \"=\") ? (next(), expression(false, no_in)) : !no_in && kind === \"const\" ? croak(\"Missing initializer in const declaration\") : null,\n          end: prev()\n        });\n        if (def.name.name == \"import\") croak(\"Unexpected token: import\");\n      }\n\n      a.push(def);\n      if (!is(\"punc\", \",\")) break;\n      next();\n    }\n\n    return a;\n  }\n\n  var var_ = function var_(no_in) {\n    return new AST_Var({\n      start: prev(),\n      definitions: vardefs(no_in, \"var\"),\n      end: prev()\n    });\n  };\n\n  var let_ = function let_(no_in) {\n    return new AST_Let({\n      start: prev(),\n      definitions: vardefs(no_in, \"let\"),\n      end: prev()\n    });\n  };\n\n  var const_ = function const_(no_in) {\n    return new AST_Const({\n      start: prev(),\n      definitions: vardefs(no_in, \"const\"),\n      end: prev()\n    });\n  };\n\n  var new_ = function new_(allow_calls) {\n    var start = S.token;\n    expect_token(\"operator\", \"new\");\n\n    if (is(\"punc\", \".\")) {\n      next();\n      expect_token(\"name\", \"target\");\n      return subscripts(new AST_NewTarget({\n        start: start,\n        end: prev()\n      }), allow_calls);\n    }\n\n    var newexp = expr_atom(false),\n        args;\n\n    if (is(\"punc\", \"(\")) {\n      next();\n      args = expr_list(\")\", true);\n    } else {\n      args = [];\n    }\n\n    var call = new AST_New({\n      start: start,\n      expression: newexp,\n      args: args,\n      end: prev()\n    });\n    annotate(call);\n    return subscripts(call, allow_calls);\n  };\n\n  function as_atom_node() {\n    var tok = S.token,\n        ret;\n\n    switch (tok.type) {\n      case \"name\":\n        ret = _make_symbol(AST_SymbolRef);\n        break;\n\n      case \"num\":\n        ret = new AST_Number({\n          start: tok,\n          end: tok,\n          value: tok.value\n        });\n        break;\n\n      case \"big_int\":\n        ret = new AST_BigInt({\n          start: tok,\n          end: tok,\n          value: tok.value\n        });\n        break;\n\n      case \"string\":\n        ret = new AST_String({\n          start: tok,\n          end: tok,\n          value: tok.value,\n          quote: tok.quote\n        });\n        break;\n\n      case \"regexp\":\n        ret = new AST_RegExp({\n          start: tok,\n          end: tok,\n          value: tok.value\n        });\n        break;\n\n      case \"atom\":\n        switch (tok.value) {\n          case \"false\":\n            ret = new AST_False({\n              start: tok,\n              end: tok\n            });\n            break;\n\n          case \"true\":\n            ret = new AST_True({\n              start: tok,\n              end: tok\n            });\n            break;\n\n          case \"null\":\n            ret = new AST_Null({\n              start: tok,\n              end: tok\n            });\n            break;\n        }\n\n        break;\n    }\n\n    next();\n    return ret;\n  }\n\n  function to_fun_args(ex, default_seen_above) {\n    var insert_default = function insert_default(ex, default_value) {\n      if (default_value) {\n        return new AST_DefaultAssign({\n          start: ex.start,\n          left: ex,\n          operator: \"=\",\n          right: default_value,\n          end: default_value.end\n        });\n      }\n\n      return ex;\n    };\n\n    if (ex instanceof AST_Object) {\n      return insert_default(new AST_Destructuring({\n        start: ex.start,\n        end: ex.end,\n        is_array: false,\n        names: ex.properties.map(function (prop) {\n          return to_fun_args(prop);\n        })\n      }), default_seen_above);\n    } else if (ex instanceof AST_ObjectKeyVal) {\n      ex.value = to_fun_args(ex.value);\n      return insert_default(ex, default_seen_above);\n    } else if (ex instanceof AST_Hole) {\n      return ex;\n    } else if (ex instanceof AST_Destructuring) {\n      ex.names = ex.names.map(function (name) {\n        return to_fun_args(name);\n      });\n      return insert_default(ex, default_seen_above);\n    } else if (ex instanceof AST_SymbolRef) {\n      return insert_default(new AST_SymbolFunarg({\n        name: ex.name,\n        start: ex.start,\n        end: ex.end\n      }), default_seen_above);\n    } else if (ex instanceof AST_Expansion) {\n      ex.expression = to_fun_args(ex.expression);\n      return insert_default(ex, default_seen_above);\n    } else if (ex instanceof AST_Array) {\n      return insert_default(new AST_Destructuring({\n        start: ex.start,\n        end: ex.end,\n        is_array: true,\n        names: ex.elements.map(function (elm) {\n          return to_fun_args(elm);\n        })\n      }), default_seen_above);\n    } else if (ex instanceof AST_Assign) {\n      return insert_default(to_fun_args(ex.left, ex.right), default_seen_above);\n    } else if (ex instanceof AST_DefaultAssign) {\n      ex.left = to_fun_args(ex.left);\n      return ex;\n    } else {\n      croak(\"Invalid function parameter\", ex.start.line, ex.start.col);\n    }\n  }\n\n  var expr_atom = function expr_atom(allow_calls, allow_arrows) {\n    if (is(\"operator\", \"new\")) {\n      return new_(allow_calls);\n    }\n\n    if (is(\"operator\", \"import\")) {\n      return import_meta();\n    }\n\n    var start = S.token;\n    var peeked;\n    var async = is(\"name\", \"async\") && (peeked = peek()).value != \"[\" && peeked.type != \"arrow\" && as_atom_node();\n\n    if (is(\"punc\")) {\n      switch (S.token.value) {\n        case \"(\":\n          if (async && !allow_calls) break;\n          var exprs = params_or_seq_(allow_arrows, !async);\n\n          if (allow_arrows && is(\"arrow\", \"=>\")) {\n            return arrow_function(start, exprs.map(function (e) {\n              return to_fun_args(e);\n            }), !!async);\n          }\n\n          var ex = async ? new AST_Call({\n            expression: async,\n            args: exprs\n          }) : exprs.length == 1 ? exprs[0] : new AST_Sequence({\n            expressions: exprs\n          });\n\n          if (ex.start) {\n            var _ex$start$comments_be;\n\n            var outer_comments_before = start.comments_before.length;\n            outer_comments_before_counts.set(start, outer_comments_before);\n\n            (_ex$start$comments_be = ex.start.comments_before).unshift.apply(_ex$start$comments_be, _toConsumableArray(start.comments_before));\n\n            start.comments_before = ex.start.comments_before;\n\n            if (outer_comments_before == 0 && start.comments_before.length > 0) {\n              var comment = start.comments_before[0];\n\n              if (!comment.nlb) {\n                comment.nlb = start.nlb;\n                start.nlb = false;\n              }\n            }\n\n            start.comments_after = ex.start.comments_after;\n          }\n\n          ex.start = start;\n          var end = prev();\n\n          if (ex.end) {\n            var _ex$end$comments_afte;\n\n            end.comments_before = ex.end.comments_before;\n\n            (_ex$end$comments_afte = ex.end.comments_after).push.apply(_ex$end$comments_afte, _toConsumableArray(end.comments_after));\n\n            end.comments_after = ex.end.comments_after;\n          }\n\n          ex.end = end;\n          if (ex instanceof AST_Call) annotate(ex);\n          return subscripts(ex, allow_calls);\n\n        case \"[\":\n          return subscripts(array_(), allow_calls);\n\n        case \"{\":\n          return subscripts(object_or_destructuring_(), allow_calls);\n      }\n\n      if (!async) unexpected();\n    }\n\n    if (allow_arrows && is(\"name\") && is_token(peek(), \"arrow\")) {\n      var param = new AST_SymbolFunarg({\n        name: S.token.value,\n        start: start,\n        end: start\n      });\n      next();\n      return arrow_function(start, [param], !!async);\n    }\n\n    if (is(\"keyword\", \"function\")) {\n      next();\n      var func = function_(AST_Function, false, !!async);\n      func.start = start;\n      func.end = prev();\n      return subscripts(func, allow_calls);\n    }\n\n    if (async) return subscripts(async, allow_calls);\n\n    if (is(\"keyword\", \"class\")) {\n      next();\n      var cls = class_(AST_ClassExpression);\n      cls.start = start;\n      cls.end = prev();\n      return subscripts(cls, allow_calls);\n    }\n\n    if (is(\"template_head\")) {\n      return subscripts(template_string(false), allow_calls);\n    }\n\n    if (ATOMIC_START_TOKEN.has(S.token.type)) {\n      return subscripts(as_atom_node(), allow_calls);\n    }\n\n    unexpected();\n  };\n\n  function template_string() {\n    var segments = [],\n        start = S.token;\n    segments.push(new AST_TemplateSegment({\n      start: S.token,\n      raw: S.token.raw,\n      value: S.token.value,\n      end: S.token\n    }));\n\n    while (!S.token.end) {\n      next();\n      handle_regexp();\n      segments.push(expression(true));\n\n      if (!is_token(\"template_substitution\")) {\n        unexpected();\n      }\n\n      segments.push(new AST_TemplateSegment({\n        start: S.token,\n        raw: S.token.raw,\n        value: S.token.value,\n        end: S.token\n      }));\n    }\n\n    next();\n    return new AST_TemplateString({\n      start: start,\n      segments: segments,\n      end: S.token\n    });\n  }\n\n  function expr_list(closing, allow_trailing_comma, allow_empty) {\n    var first = true,\n        a = [];\n\n    while (!is(\"punc\", closing)) {\n      if (first) first = false;else expect(\",\");\n      if (allow_trailing_comma && is(\"punc\", closing)) break;\n\n      if (is(\"punc\", \",\") && allow_empty) {\n        a.push(new AST_Hole({\n          start: S.token,\n          end: S.token\n        }));\n      } else if (is(\"expand\", \"...\")) {\n        next();\n        a.push(new AST_Expansion({\n          start: prev(),\n          expression: expression(),\n          end: S.token\n        }));\n      } else {\n        a.push(expression(false));\n      }\n    }\n\n    next();\n    return a;\n  }\n\n  var array_ = embed_tokens(function () {\n    expect(\"[\");\n    return new AST_Array({\n      elements: expr_list(\"]\", !options.strict, true)\n    });\n  });\n  var create_accessor = embed_tokens(function (is_generator, is_async) {\n    return function_(AST_Accessor, is_generator, is_async);\n  });\n  var object_or_destructuring_ = embed_tokens(function object_or_destructuring_() {\n    var start = S.token,\n        first = true,\n        a = [];\n    expect(\"{\");\n\n    while (!is(\"punc\", \"}\")) {\n      if (first) first = false;else expect(\",\");\n      if (!options.strict && is(\"punc\", \"}\")) // allow trailing comma\n        break;\n      start = S.token;\n\n      if (start.type == \"expand\") {\n        next();\n        a.push(new AST_Expansion({\n          start: start,\n          expression: expression(false),\n          end: prev()\n        }));\n        continue;\n      }\n\n      var name = as_property_name();\n      var value; // Check property and fetch value\n\n      if (!is(\"punc\", \":\")) {\n        var concise = concise_method_or_getset(name, start);\n\n        if (concise) {\n          a.push(concise);\n          continue;\n        }\n\n        value = new AST_SymbolRef({\n          start: prev(),\n          name: name,\n          end: prev()\n        });\n      } else if (name === null) {\n        unexpected(prev());\n      } else {\n        next(); // `:` - see first condition\n\n        value = expression(false);\n      } // Check for default value and alter value accordingly if necessary\n\n\n      if (is(\"operator\", \"=\")) {\n        next();\n        value = new AST_Assign({\n          start: start,\n          left: value,\n          operator: \"=\",\n          right: expression(false),\n          end: prev()\n        });\n      } // Create property\n\n\n      a.push(new AST_ObjectKeyVal({\n        start: start,\n        quote: start.quote,\n        key: name instanceof AST_Node ? name : \"\" + name,\n        value: value,\n        end: prev()\n      }));\n    }\n\n    next();\n    return new AST_Object({\n      properties: a\n    });\n  });\n\n  function class_(KindOfClass) {\n    var start,\n        method,\n        class_name,\n        extends_,\n        a = [];\n    S.input.push_directives_stack(); // Push directive stack, but not scope stack\n\n    S.input.add_directive(\"use strict\");\n\n    if (S.token.type == \"name\" && S.token.value != \"extends\") {\n      class_name = as_symbol(KindOfClass === AST_DefClass ? AST_SymbolDefClass : AST_SymbolClass);\n    }\n\n    if (KindOfClass === AST_DefClass && !class_name) {\n      unexpected();\n    }\n\n    if (S.token.value == \"extends\") {\n      next();\n      extends_ = expression(true);\n    }\n\n    expect(\"{\");\n\n    while (is(\"punc\", \";\")) {\n      next();\n    } // Leading semicolons are okay in class bodies.\n\n\n    while (!is(\"punc\", \"}\")) {\n      start = S.token;\n      method = concise_method_or_getset(as_property_name(), start, true);\n\n      if (!method) {\n        unexpected();\n      }\n\n      a.push(method);\n\n      while (is(\"punc\", \";\")) {\n        next();\n      }\n    }\n\n    S.input.pop_directives_stack();\n    next();\n    return new KindOfClass({\n      start: start,\n      name: class_name,\n      extends: extends_,\n      properties: a,\n      end: prev()\n    });\n  }\n\n  function concise_method_or_getset(name, start, is_class) {\n    var get_method_name_ast = function get_method_name_ast(name, start) {\n      if (typeof name === \"string\" || typeof name === \"number\") {\n        return new AST_SymbolMethod({\n          start: start,\n          name: \"\" + name,\n          end: prev()\n        });\n      } else if (name === null) {\n        unexpected();\n      }\n\n      return name;\n    };\n\n    var get_class_property_key_ast = function get_class_property_key_ast(name) {\n      if (typeof name === \"string\" || typeof name === \"number\") {\n        return new AST_SymbolClassProperty({\n          start: property_token,\n          end: property_token,\n          name: \"\" + name\n        });\n      } else if (name === null) {\n        unexpected();\n      }\n\n      return name;\n    };\n\n    var is_async = false;\n    var is_static = false;\n    var is_generator = false;\n    var property_token = start;\n\n    if (is_class && name === \"static\" && !is(\"punc\", \"(\")) {\n      is_static = true;\n      property_token = S.token;\n      name = as_property_name();\n    }\n\n    if (name === \"async\" && !is(\"punc\", \"(\") && !is(\"punc\", \",\") && !is(\"punc\", \"}\") && !is(\"operator\", \"=\")) {\n      is_async = true;\n      property_token = S.token;\n      name = as_property_name();\n    }\n\n    if (name === null) {\n      is_generator = true;\n      property_token = S.token;\n      name = as_property_name();\n\n      if (name === null) {\n        unexpected();\n      }\n    }\n\n    if (is(\"punc\", \"(\")) {\n      name = get_method_name_ast(name, start);\n      var node = new AST_ConciseMethod({\n        start: start,\n        static: is_static,\n        is_generator: is_generator,\n        async: is_async,\n        key: name,\n        quote: name instanceof AST_SymbolMethod ? property_token.quote : undefined,\n        value: create_accessor(is_generator, is_async),\n        end: prev()\n      });\n      return node;\n    }\n\n    var setter_token = S.token;\n\n    if (name == \"get\") {\n      if (!is(\"punc\") || is(\"punc\", \"[\")) {\n        name = get_method_name_ast(as_property_name(), start);\n        return new AST_ObjectGetter({\n          start: start,\n          static: is_static,\n          key: name,\n          quote: name instanceof AST_SymbolMethod ? setter_token.quote : undefined,\n          value: create_accessor(),\n          end: prev()\n        });\n      }\n    } else if (name == \"set\") {\n      if (!is(\"punc\") || is(\"punc\", \"[\")) {\n        name = get_method_name_ast(as_property_name(), start);\n        return new AST_ObjectSetter({\n          start: start,\n          static: is_static,\n          key: name,\n          quote: name instanceof AST_SymbolMethod ? setter_token.quote : undefined,\n          value: create_accessor(),\n          end: prev()\n        });\n      }\n    }\n\n    if (is_class) {\n      var key = get_class_property_key_ast(name, property_token);\n      var quote = key instanceof AST_SymbolClassProperty ? property_token.quote : undefined;\n\n      if (is(\"operator\", \"=\")) {\n        next();\n        return new AST_ClassProperty({\n          start: start,\n          static: is_static,\n          quote: quote,\n          key: key,\n          value: expression(false),\n          end: prev()\n        });\n      } else if (is(\"name\") || is(\"punc\", \";\") || is(\"punc\", \"}\")) {\n        return new AST_ClassProperty({\n          start: start,\n          static: is_static,\n          quote: quote,\n          key: key,\n          end: prev()\n        });\n      }\n    }\n  }\n\n  function import_() {\n    var start = prev();\n    var imported_name;\n    var imported_names;\n\n    if (is(\"name\")) {\n      imported_name = as_symbol(AST_SymbolImport);\n    }\n\n    if (is(\"punc\", \",\")) {\n      next();\n    }\n\n    imported_names = map_names(true);\n\n    if (imported_names || imported_name) {\n      expect_token(\"name\", \"from\");\n    }\n\n    var mod_str = S.token;\n\n    if (mod_str.type !== \"string\") {\n      unexpected();\n    }\n\n    next();\n    return new AST_Import({\n      start: start,\n      imported_name: imported_name,\n      imported_names: imported_names,\n      module_name: new AST_String({\n        start: mod_str,\n        value: mod_str.value,\n        quote: mod_str.quote,\n        end: mod_str\n      }),\n      end: S.token\n    });\n  }\n\n  function import_meta() {\n    var start = S.token;\n    expect_token(\"operator\", \"import\");\n    expect_token(\"punc\", \".\");\n    expect_token(\"name\", \"meta\");\n    return subscripts(new AST_ImportMeta({\n      start: start,\n      end: prev()\n    }), false);\n  }\n\n  function map_name(is_import) {\n    function make_symbol(type) {\n      return new type({\n        name: as_property_name(),\n        start: prev(),\n        end: prev()\n      });\n    }\n\n    var foreign_type = is_import ? AST_SymbolImportForeign : AST_SymbolExportForeign;\n    var type = is_import ? AST_SymbolImport : AST_SymbolExport;\n    var start = S.token;\n    var foreign_name;\n    var name;\n\n    if (is_import) {\n      foreign_name = make_symbol(foreign_type);\n    } else {\n      name = make_symbol(type);\n    }\n\n    if (is(\"name\", \"as\")) {\n      next(); // The \"as\" word\n\n      if (is_import) {\n        name = make_symbol(type);\n      } else {\n        foreign_name = make_symbol(foreign_type);\n      }\n    } else if (is_import) {\n      name = new type(foreign_name);\n    } else {\n      foreign_name = new foreign_type(name);\n    }\n\n    return new AST_NameMapping({\n      start: start,\n      foreign_name: foreign_name,\n      name: name,\n      end: prev()\n    });\n  }\n\n  function map_nameAsterisk(is_import, name) {\n    var foreign_type = is_import ? AST_SymbolImportForeign : AST_SymbolExportForeign;\n    var type = is_import ? AST_SymbolImport : AST_SymbolExport;\n    var start = S.token;\n    var foreign_name;\n    var end = prev();\n    name = name || new type({\n      name: \"*\",\n      start: start,\n      end: end\n    });\n    foreign_name = new foreign_type({\n      name: \"*\",\n      start: start,\n      end: end\n    });\n    return new AST_NameMapping({\n      start: start,\n      foreign_name: foreign_name,\n      name: name,\n      end: end\n    });\n  }\n\n  function map_names(is_import) {\n    var names;\n\n    if (is(\"punc\", \"{\")) {\n      next();\n      names = [];\n\n      while (!is(\"punc\", \"}\")) {\n        names.push(map_name(is_import));\n\n        if (is(\"punc\", \",\")) {\n          next();\n        }\n      }\n\n      next();\n    } else if (is(\"operator\", \"*\")) {\n      var name;\n      next();\n\n      if (is_import && is(\"name\", \"as\")) {\n        next(); // The \"as\" word\n\n        name = as_symbol(is_import ? AST_SymbolImport : AST_SymbolExportForeign);\n      }\n\n      names = [map_nameAsterisk(is_import, name)];\n    }\n\n    return names;\n  }\n\n  function export_() {\n    var start = S.token;\n    var is_default;\n    var exported_names;\n\n    if (is(\"keyword\", \"default\")) {\n      is_default = true;\n      next();\n    } else if (exported_names = map_names(false)) {\n      if (is(\"name\", \"from\")) {\n        next();\n        var mod_str = S.token;\n\n        if (mod_str.type !== \"string\") {\n          unexpected();\n        }\n\n        next();\n        return new AST_Export({\n          start: start,\n          is_default: is_default,\n          exported_names: exported_names,\n          module_name: new AST_String({\n            start: mod_str,\n            value: mod_str.value,\n            quote: mod_str.quote,\n            end: mod_str\n          }),\n          end: prev()\n        });\n      } else {\n        return new AST_Export({\n          start: start,\n          is_default: is_default,\n          exported_names: exported_names,\n          end: prev()\n        });\n      }\n    }\n\n    var node;\n    var exported_value;\n    var exported_definition;\n\n    if (is(\"punc\", \"{\") || is_default && (is(\"keyword\", \"class\") || is(\"keyword\", \"function\")) && is_token(peek(), \"punc\")) {\n      exported_value = expression(false);\n      semicolon();\n    } else if ((node = statement(is_default)) instanceof AST_Definitions && is_default) {\n      unexpected(node.start);\n    } else if (node instanceof AST_Definitions || node instanceof AST_Lambda || node instanceof AST_DefClass) {\n      exported_definition = node;\n    } else if (node instanceof AST_SimpleStatement) {\n      exported_value = node.body;\n    } else {\n      unexpected(node.start);\n    }\n\n    return new AST_Export({\n      start: start,\n      is_default: is_default,\n      exported_value: exported_value,\n      exported_definition: exported_definition,\n      end: prev()\n    });\n  }\n\n  function as_property_name() {\n    var tmp = S.token;\n\n    switch (tmp.type) {\n      case \"punc\":\n        if (tmp.value === \"[\") {\n          next();\n          var ex = expression(false);\n          expect(\"]\");\n          return ex;\n        } else unexpected(tmp);\n\n      case \"operator\":\n        if (tmp.value === \"*\") {\n          next();\n          return null;\n        }\n\n        if (![\"delete\", \"in\", \"instanceof\", \"new\", \"typeof\", \"void\"].includes(tmp.value)) {\n          unexpected(tmp);\n        }\n\n      /* falls through */\n\n      case \"name\":\n      case \"string\":\n      case \"num\":\n      case \"big_int\":\n      case \"keyword\":\n      case \"atom\":\n        next();\n        return tmp.value;\n\n      default:\n        unexpected(tmp);\n    }\n  }\n\n  function as_name() {\n    var tmp = S.token;\n    if (tmp.type != \"name\") unexpected();\n    next();\n    return tmp.value;\n  }\n\n  function _make_symbol(type) {\n    var name = S.token.value;\n    return new (name == \"this\" ? AST_This : name == \"super\" ? AST_Super : type)({\n      name: String(name),\n      start: S.token,\n      end: S.token\n    });\n  }\n\n  function _verify_symbol(sym) {\n    var name = sym.name;\n\n    if (is_in_generator() && name == \"yield\") {\n      token_error(sym.start, \"Yield cannot be used as identifier inside generators\");\n    }\n\n    if (S.input.has_directive(\"use strict\")) {\n      if (name == \"yield\") {\n        token_error(sym.start, \"Unexpected yield identifier inside strict mode\");\n      }\n\n      if (sym instanceof AST_SymbolDeclaration && (name == \"arguments\" || name == \"eval\")) {\n        token_error(sym.start, \"Unexpected \" + name + \" in strict mode\");\n      }\n    }\n  }\n\n  function as_symbol(type, noerror) {\n    if (!is(\"name\")) {\n      if (!noerror) croak(\"Name expected\");\n      return null;\n    }\n\n    var sym = _make_symbol(type);\n\n    _verify_symbol(sym);\n\n    next();\n    return sym;\n  } // Annotate AST_Call, AST_Lambda or AST_New with the special comments\n\n\n  function annotate(node) {\n    var start = node.start;\n    var comments = start.comments_before;\n    var comments_outside_parens = outer_comments_before_counts.get(start);\n    var i = comments_outside_parens != null ? comments_outside_parens : comments.length;\n\n    while (--i >= 0) {\n      var comment = comments[i];\n\n      if (/[@#]__/.test(comment.value)) {\n        if (/[@#]__PURE__/.test(comment.value)) {\n          set_annotation(node, _PURE);\n          break;\n        }\n\n        if (/[@#]__INLINE__/.test(comment.value)) {\n          set_annotation(node, _INLINE);\n          break;\n        }\n\n        if (/[@#]__NOINLINE__/.test(comment.value)) {\n          set_annotation(node, _NOINLINE);\n          break;\n        }\n      }\n    }\n  }\n\n  var subscripts = function subscripts(expr, allow_calls, is_chain) {\n    var start = expr.start;\n\n    if (is(\"punc\", \".\")) {\n      next();\n      return subscripts(new AST_Dot({\n        start: start,\n        expression: expr,\n        optional: false,\n        property: as_name(),\n        end: prev()\n      }), allow_calls, is_chain);\n    }\n\n    if (is(\"punc\", \"[\")) {\n      next();\n      var prop = expression(true);\n      expect(\"]\");\n      return subscripts(new AST_Sub({\n        start: start,\n        expression: expr,\n        optional: false,\n        property: prop,\n        end: prev()\n      }), allow_calls, is_chain);\n    }\n\n    if (allow_calls && is(\"punc\", \"(\")) {\n      next();\n      var call = new AST_Call({\n        start: start,\n        expression: expr,\n        optional: false,\n        args: call_args(),\n        end: prev()\n      });\n      annotate(call);\n      return subscripts(call, true, is_chain);\n    }\n\n    if (is(\"punc\", \"?.\")) {\n      next();\n      var chain_contents;\n\n      if (allow_calls && is(\"punc\", \"(\")) {\n        next();\n\n        var _call = new AST_Call({\n          start: start,\n          optional: true,\n          expression: expr,\n          args: call_args(),\n          end: prev()\n        });\n\n        annotate(_call);\n        chain_contents = subscripts(_call, true, true);\n      } else if (is(\"name\")) {\n        chain_contents = subscripts(new AST_Dot({\n          start: start,\n          expression: expr,\n          optional: true,\n          property: as_name(),\n          end: prev()\n        }), allow_calls, true);\n      } else if (is(\"punc\", \"[\")) {\n        next();\n        var property = expression(true);\n        expect(\"]\");\n        chain_contents = subscripts(new AST_Sub({\n          start: start,\n          expression: expr,\n          optional: true,\n          property: property,\n          end: prev()\n        }), allow_calls, true);\n      }\n\n      if (!chain_contents) unexpected();\n      if (chain_contents instanceof AST_Chain) return chain_contents;\n      return new AST_Chain({\n        start: start,\n        expression: chain_contents,\n        end: prev()\n      });\n    }\n\n    if (is(\"template_head\")) {\n      if (is_chain) {\n        // a?.b`c` is a syntax error\n        unexpected();\n      }\n\n      return subscripts(new AST_PrefixedTemplateString({\n        start: start,\n        prefix: expr,\n        template_string: template_string(true),\n        end: prev()\n      }), allow_calls);\n    }\n\n    return expr;\n  };\n\n  function call_args() {\n    var args = [];\n\n    while (!is(\"punc\", \")\")) {\n      if (is(\"expand\", \"...\")) {\n        next();\n        args.push(new AST_Expansion({\n          start: prev(),\n          expression: expression(false),\n          end: prev()\n        }));\n      } else {\n        args.push(expression(false));\n      }\n\n      if (!is(\"punc\", \")\")) {\n        expect(\",\");\n      }\n    }\n\n    next();\n    return args;\n  }\n\n  var maybe_unary = function maybe_unary(allow_calls, allow_arrows) {\n    var start = S.token;\n\n    if (start.type == \"name\" && start.value == \"await\") {\n      if (is_in_async()) {\n        next();\n        return _await_expression();\n      } else if (S.input.has_directive(\"use strict\")) {\n        token_error(S.token, \"Unexpected await identifier inside strict mode\");\n      }\n    }\n\n    if (is(\"operator\") && UNARY_PREFIX.has(start.value)) {\n      next();\n      handle_regexp();\n      var ex = make_unary(AST_UnaryPrefix, start, maybe_unary(allow_calls));\n      ex.start = start;\n      ex.end = prev();\n      return ex;\n    }\n\n    var val = expr_atom(allow_calls, allow_arrows);\n\n    while (is(\"operator\") && UNARY_POSTFIX.has(S.token.value) && !has_newline_before(S.token)) {\n      if (val instanceof AST_Arrow) unexpected();\n      val = make_unary(AST_UnaryPostfix, S.token, val);\n      val.start = start;\n      val.end = S.token;\n      next();\n    }\n\n    return val;\n  };\n\n  function make_unary(ctor, token, expr) {\n    var op = token.value;\n\n    switch (op) {\n      case \"++\":\n      case \"--\":\n        if (!is_assignable(expr)) croak(\"Invalid use of \" + op + \" operator\", token.line, token.col, token.pos);\n        break;\n\n      case \"delete\":\n        if (expr instanceof AST_SymbolRef && S.input.has_directive(\"use strict\")) croak(\"Calling delete on expression not allowed in strict mode\", expr.start.line, expr.start.col, expr.start.pos);\n        break;\n    }\n\n    return new ctor({\n      operator: op,\n      expression: expr\n    });\n  }\n\n  var expr_op = function expr_op(left, min_prec, no_in) {\n    var op = is(\"operator\") ? S.token.value : null;\n    if (op == \"in\" && no_in) op = null;\n    if (op == \"**\" && left instanceof AST_UnaryPrefix\n    /* unary token in front not allowed - parenthesis required */\n    && !is_token(left.start, \"punc\", \"(\") && left.operator !== \"--\" && left.operator !== \"++\") unexpected(left.start);\n    var prec = op != null ? PRECEDENCE[op] : null;\n\n    if (prec != null && (prec > min_prec || op === \"**\" && min_prec === prec)) {\n      next();\n      var right = expr_op(maybe_unary(true), prec, no_in);\n      return expr_op(new AST_Binary({\n        start: left.start,\n        left: left,\n        operator: op,\n        right: right,\n        end: right.end\n      }), min_prec, no_in);\n    }\n\n    return left;\n  };\n\n  function expr_ops(no_in) {\n    return expr_op(maybe_unary(true, true), 0, no_in);\n  }\n\n  var maybe_conditional = function maybe_conditional(no_in) {\n    var start = S.token;\n    var expr = expr_ops(no_in);\n\n    if (is(\"operator\", \"?\")) {\n      next();\n      var yes = expression(false);\n      expect(\":\");\n      return new AST_Conditional({\n        start: start,\n        condition: expr,\n        consequent: yes,\n        alternative: expression(false, no_in),\n        end: prev()\n      });\n    }\n\n    return expr;\n  };\n\n  function is_assignable(expr) {\n    return expr instanceof AST_PropAccess || expr instanceof AST_SymbolRef;\n  }\n\n  function to_destructuring(node) {\n    if (node instanceof AST_Object) {\n      node = new AST_Destructuring({\n        start: node.start,\n        names: node.properties.map(to_destructuring),\n        is_array: false,\n        end: node.end\n      });\n    } else if (node instanceof AST_Array) {\n      var names = [];\n\n      for (var i = 0; i < node.elements.length; i++) {\n        // Only allow expansion as last element\n        if (node.elements[i] instanceof AST_Expansion) {\n          if (i + 1 !== node.elements.length) {\n            token_error(node.elements[i].start, \"Spread must the be last element in destructuring array\");\n          }\n\n          node.elements[i].expression = to_destructuring(node.elements[i].expression);\n        }\n\n        names.push(to_destructuring(node.elements[i]));\n      }\n\n      node = new AST_Destructuring({\n        start: node.start,\n        names: names,\n        is_array: true,\n        end: node.end\n      });\n    } else if (node instanceof AST_ObjectProperty) {\n      node.value = to_destructuring(node.value);\n    } else if (node instanceof AST_Assign) {\n      node = new AST_DefaultAssign({\n        start: node.start,\n        left: node.left,\n        operator: \"=\",\n        right: node.right,\n        end: node.end\n      });\n    }\n\n    return node;\n  } // In ES6, AssignmentExpression can also be an ArrowFunction\n\n\n  var maybe_assign = function maybe_assign(no_in) {\n    handle_regexp();\n    var start = S.token;\n\n    if (start.type == \"name\" && start.value == \"yield\") {\n      if (is_in_generator()) {\n        next();\n        return _yield_expression();\n      } else if (S.input.has_directive(\"use strict\")) {\n        token_error(S.token, \"Unexpected yield identifier inside strict mode\");\n      }\n    }\n\n    var left = maybe_conditional(no_in);\n    var val = S.token.value;\n\n    if (is(\"operator\") && ASSIGNMENT.has(val)) {\n      if (is_assignable(left) || (left = to_destructuring(left)) instanceof AST_Destructuring) {\n        next();\n        return new AST_Assign({\n          start: start,\n          left: left,\n          operator: val,\n          right: maybe_assign(no_in),\n          end: prev()\n        });\n      }\n\n      croak(\"Invalid assignment\");\n    }\n\n    return left;\n  };\n\n  var expression = function expression(commas, no_in) {\n    var start = S.token;\n    var exprs = [];\n\n    while (true) {\n      exprs.push(maybe_assign(no_in));\n      if (!commas || !is(\"punc\", \",\")) break;\n      next();\n      commas = true;\n    }\n\n    return exprs.length == 1 ? exprs[0] : new AST_Sequence({\n      start: start,\n      expressions: exprs,\n      end: peek()\n    });\n  };\n\n  function in_loop(cont) {\n    ++S.in_loop;\n    var ret = cont();\n    --S.in_loop;\n    return ret;\n  }\n\n  if (options.expression) {\n    return expression(true);\n  }\n\n  return function parse_toplevel() {\n    var start = S.token;\n    var body = [];\n    S.input.push_directives_stack();\n    if (options.module) S.input.add_directive(\"use strict\");\n\n    while (!is(\"eof\")) {\n      body.push(statement());\n    }\n\n    S.input.pop_directives_stack();\n    var end = prev();\n    var toplevel = options.toplevel;\n\n    if (toplevel) {\n      toplevel.body = toplevel.body.concat(body);\n      toplevel.end = end;\n    } else {\n      toplevel = new AST_Toplevel({\n        start: start,\n        body: body,\n        end: end\n      });\n    }\n\n    return toplevel;\n  }();\n}\n\nexport { get_full_char_code, get_full_char, is_identifier_char, is_basic_identifier_string, is_identifier_string, is_surrogate_pair_head, is_surrogate_pair_tail, js_error, JS_Parse_Error, parse, PRECEDENCE, RESERVED_WORDS, tokenizer };","map":{"version":3,"sources":["/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/terser/lib/parse.js"],"names":["characters","defaults","makePredicate","set_annotation","AST_Accessor","AST_Array","AST_Arrow","AST_Assign","AST_Await","AST_BigInt","AST_Binary","AST_BlockStatement","AST_Break","AST_Call","AST_Case","AST_Catch","AST_Chain","AST_ClassExpression","AST_ClassProperty","AST_ConciseMethod","AST_Conditional","AST_Const","AST_Continue","AST_Debugger","AST_Default","AST_DefaultAssign","AST_DefClass","AST_Definitions","AST_Defun","AST_Destructuring","AST_Directive","AST_Do","AST_Dot","AST_EmptyStatement","AST_Expansion","AST_Export","AST_False","AST_Finally","AST_For","AST_ForIn","AST_ForOf","AST_Function","AST_Hole","AST_If","AST_Import","AST_ImportMeta","AST_IterationStatement","AST_Label","AST_LabeledStatement","AST_LabelRef","AST_Lambda","AST_Let","AST_NameMapping","AST_New","AST_NewTarget","AST_Node","AST_Null","AST_Number","AST_Object","AST_ObjectGetter","AST_ObjectKeyVal","AST_ObjectProperty","AST_ObjectSetter","AST_PrefixedTemplateString","AST_PropAccess","AST_RegExp","AST_Return","AST_Sequence","AST_SimpleStatement","AST_String","AST_Sub","AST_Super","AST_Switch","AST_SymbolCatch","AST_SymbolClass","AST_SymbolClassProperty","AST_SymbolConst","AST_SymbolDeclaration","AST_SymbolDefClass","AST_SymbolDefun","AST_SymbolExport","AST_SymbolExportForeign","AST_SymbolFunarg","AST_SymbolImport","AST_SymbolImportForeign","AST_SymbolLambda","AST_SymbolLet","AST_SymbolMethod","AST_SymbolRef","AST_SymbolVar","AST_TemplateSegment","AST_TemplateString","AST_This","AST_Throw","AST_Token","AST_Toplevel","AST_True","AST_Try","AST_UnaryPostfix","AST_UnaryPrefix","AST_Var","AST_VarDef","AST_While","AST_With","AST_Yield","_INLINE","_NOINLINE","_PURE","KEYWORDS","KEYWORDS_ATOM","RESERVED_WORDS","KEYWORDS_BEFORE_EXPRESSION","OPERATOR_CHARS","RE_NUM_LITERAL","RE_HEX_NUMBER","RE_OCT_NUMBER","RE_ES6_OCT_NUMBER","RE_BIN_NUMBER","RE_DEC_NUMBER","RE_BIG_INT","OPERATORS","WHITESPACE_CHARS","NEWLINE_CHARS","PUNC_AFTER_EXPRESSION","PUNC_BEFORE_EXPRESSION","PUNC_CHARS","UNICODE","ID_Start","ID_Continue","get_full_char","str","pos","is_surrogate_pair_head","charCodeAt","is_surrogate_pair_tail","charAt","get_full_char_code","get_full_char_length","surrogates","i","length","from_char_code","code","String","fromCharCode","is_digit","is_identifier_start","ch","test","is_identifier_char","is_basic_identifier_string","is_identifier_string","allow_surrogates","match","exec","index","slice","parse_js_number","num","allow_e","includes","NaN","parseInt","substr","parseFloat","val","JS_Parse_Error","message","filename","line","col","name","Error","js_error","is_token","token","type","value","EX_EOF","tokenizer","$TEXT","html5_comments","shebang","S","text","tokpos","tokline","tokcol","newline_before","regex_allowed","brace_counter","template_braces","comments_before","directives","directive_stack","peek","is_option_chain_op","must_be_dot","cannot_be_digit","next","signal_eof","in_string","has","forward","looking_at","find_eol","n","find","what","indexOf","start_token","prev_was_dot","previous_token","is_comment","UNARY_POSTFIX","ret","endline","endcol","endpos","nlb","file","raw","substring","comments_after","skip_whitespace","read_while","pred","parse_error","err","read_num","prefix","has_e","after_e","has_x","has_dot","is_big_int","numeric_separator","next_token","has_directive","endsWith","replace","without_n","valid","isNaN","is_octal","read_escaped_char","strict_hex","template_string","hex_bytes","result","represents_null_character","read_octal_escape_sequence","strict_octal","p","digit","read_string","with_eof_error","quote","tok","read_template_characters","begin","push","content","tmp","prev_is_tag","pop","end","skip_line_comment","skip_multiline_comment","read_name","escaped","read_escaped_identifier_char","read_regexp","source","prev_backslash","in_class","flags","read_operator","grow","op","bigger","handle_slash","handle_eq_sign","handle_dot","read_word","word","eof_error","cont","x","ex","force_regexp","context","nc","add_directive","directive","undefined","push_directives_stack","pop_directives_stack","UNARY_PREFIX","ASSIGNMENT","PRECEDENCE","a","b","j","ATOMIC_START_TOKEN","parse","options","outer_comments_before_counts","Map","bare_returns","ecma","expression","module","strict","toplevel","input","prev","peeked","in_function","in_async","in_generator","in_directives","in_loop","labels","is","croak","msg","ctx","token_error","unexpected","expect_token","expect","punc","has_newline_before","every","comment","can_insert_semicolon","is_in_generator","is_in_async","semicolon","optional","parenthesised","exp","embed_tokens","parser","_embed_tokens_wrapper","start","expr","handle_regexp","statement","is_export_default","is_for_body","is_if_body","dir","stat","simple_statement","body","function_","node","import_","labeled_statement","block_","break_cont","condition","for_","class_","if_","switch_body_","try_","var_","let_","const_","export_","label","as_symbol","some","l","references","forEach","ref","ldef","thedef","TYPE","for_await_error","await_tok","init","is_in","is_of","definitions","is_assignable","to_destructuring","for_in","for_of","regular_for","step","is_await","lhs","obj","await","object","arrow_function","argnames","is_async","_function_body","Array","async","ctor","is_generator_property","in_statement","is_generator","args","track_used_binding_identifiers","is_parameter","parameters","Set","duplicate","default_assignment","spread","strict_mode","tracker","add_parameter","check_strict","add","mark_default_assignment","mark_spread","mark_strict_mode","is_strict","params","used_parameters","param","parameter","symbol_type","expand","binding_element","left","operator","right","elements","first","is_expand","expand_token","first_token","names","is_array","key","property_token","property","as_property_name","params_or_seq_","allow_arrows","maybe_sequence","spread_token","invalid_sequence","trailing_comma","block","generator","loop","current_generator","current_async","_verify_symbol","_await_expression","maybe_unary","_yield_expression","star","has_expression","is_star","cond","belse","alternative","cur","branch","bcatch","bfinally","argname","vardefs","no_in","kind","def","sym_type","new_","allow_calls","subscripts","newexp","expr_atom","expr_list","call","annotate","as_atom_node","_make_symbol","to_fun_args","default_seen_above","insert_default","default_value","properties","map","prop","elm","import_meta","exprs","e","expressions","outer_comments_before","set","unshift","array_","object_or_destructuring_","func","cls","segments","closing","allow_trailing_comma","allow_empty","create_accessor","concise","concise_method_or_getset","KindOfClass","method","class_name","extends_","extends","is_class","get_method_name_ast","get_class_property_key_ast","is_static","static","setter_token","imported_name","imported_names","map_names","mod_str","module_name","map_name","is_import","make_symbol","foreign_type","foreign_name","map_nameAsterisk","is_default","exported_names","exported_value","exported_definition","as_name","sym","noerror","comments","comments_outside_parens","get","is_chain","call_args","chain_contents","make_unary","expr_op","min_prec","prec","expr_ops","maybe_conditional","yes","consequent","maybe_assign","commas","parse_toplevel","concat"],"mappings":"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","sourcesContent":["/***********************************************************************\n\n  A JavaScript tokenizer / parser / beautifier / compressor.\n  https://github.com/mishoo/UglifyJS2\n\n  -------------------------------- (C) ---------------------------------\n\n                           Author: Mihai Bazon\n                         <mihai.bazon@gmail.com>\n                       http://mihai.bazon.net/blog\n\n  Distributed under the BSD license:\n\n    Copyright 2012 (c) Mihai Bazon <mihai.bazon@gmail.com>\n    Parser based on parse-js (http://marijn.haverbeke.nl/parse-js/).\n\n    Redistribution and use in source and binary forms, with or without\n    modification, are permitted provided that the following conditions\n    are met:\n\n        * Redistributions of source code must retain the above\n          copyright notice, this list of conditions and the following\n          disclaimer.\n\n        * Redistributions in binary form must reproduce the above\n          copyright notice, this list of conditions and the following\n          disclaimer in the documentation and/or other materials\n          provided with the distribution.\n\n    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDER “AS IS” AND ANY\n    EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n    PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER BE\n    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,\n    OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n    PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n    PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n    THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR\n    TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF\n    THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n    SUCH DAMAGE.\n\n ***********************************************************************/\n\n\"use strict\";\n\nimport {\n    characters,\n    defaults,\n    makePredicate,\n    set_annotation,\n} from \"./utils/index.js\";\nimport {\n    AST_Accessor,\n    AST_Array,\n    AST_Arrow,\n    AST_Assign,\n    AST_Await,\n    AST_BigInt,\n    AST_Binary,\n    AST_BlockStatement,\n    AST_Break,\n    AST_Call,\n    AST_Case,\n    AST_Catch,\n    AST_Chain,\n    AST_ClassExpression,\n    AST_ClassProperty,\n    AST_ConciseMethod,\n    AST_Conditional,\n    AST_Const,\n    AST_Continue,\n    AST_Debugger,\n    AST_Default,\n    AST_DefaultAssign,\n    AST_DefClass,\n    AST_Definitions,\n    AST_Defun,\n    AST_Destructuring,\n    AST_Directive,\n    AST_Do,\n    AST_Dot,\n    AST_EmptyStatement,\n    AST_Expansion,\n    AST_Export,\n    AST_False,\n    AST_Finally,\n    AST_For,\n    AST_ForIn,\n    AST_ForOf,\n    AST_Function,\n    AST_Hole,\n    AST_If,\n    AST_Import,\n    AST_ImportMeta,\n    AST_IterationStatement,\n    AST_Label,\n    AST_LabeledStatement,\n    AST_LabelRef,\n    AST_Lambda,\n    AST_Let,\n    AST_NameMapping,\n    AST_New,\n    AST_NewTarget,\n    AST_Node,\n    AST_Null,\n    AST_Number,\n    AST_Object,\n    AST_ObjectGetter,\n    AST_ObjectKeyVal,\n    AST_ObjectProperty,\n    AST_ObjectSetter,\n    AST_PrefixedTemplateString,\n    AST_PropAccess,\n    AST_RegExp,\n    AST_Return,\n    AST_Sequence,\n    AST_SimpleStatement,\n    AST_String,\n    AST_Sub,\n    AST_Super,\n    AST_Switch,\n    AST_SymbolCatch,\n    AST_SymbolClass,\n    AST_SymbolClassProperty,\n    AST_SymbolConst,\n    AST_SymbolDeclaration,\n    AST_SymbolDefClass,\n    AST_SymbolDefun,\n    AST_SymbolExport,\n    AST_SymbolExportForeign,\n    AST_SymbolFunarg,\n    AST_SymbolImport,\n    AST_SymbolImportForeign,\n    AST_SymbolLambda,\n    AST_SymbolLet,\n    AST_SymbolMethod,\n    AST_SymbolRef,\n    AST_SymbolVar,\n    AST_TemplateSegment,\n    AST_TemplateString,\n    AST_This,\n    AST_Throw,\n    AST_Token,\n    AST_Toplevel,\n    AST_True,\n    AST_Try,\n    AST_UnaryPostfix,\n    AST_UnaryPrefix,\n    AST_Var,\n    AST_VarDef,\n    AST_While,\n    AST_With,\n    AST_Yield,\n    _INLINE,\n    _NOINLINE,\n    _PURE\n} from \"./ast.js\";\n\nvar KEYWORDS = \"break case catch class const continue debugger default delete do else export extends finally for function if in instanceof let new return switch throw try typeof var void while with\";\nvar KEYWORDS_ATOM = \"false null true\";\nvar RESERVED_WORDS = \"enum implements import interface package private protected public static super this \" + KEYWORDS_ATOM + \" \" + KEYWORDS;\nvar KEYWORDS_BEFORE_EXPRESSION = \"return new delete throw else case yield await\";\n\nKEYWORDS = makePredicate(KEYWORDS);\nRESERVED_WORDS = makePredicate(RESERVED_WORDS);\nKEYWORDS_BEFORE_EXPRESSION = makePredicate(KEYWORDS_BEFORE_EXPRESSION);\nKEYWORDS_ATOM = makePredicate(KEYWORDS_ATOM);\n\nvar OPERATOR_CHARS = makePredicate(characters(\"+-*&%=<>!?|~^\"));\n\nvar RE_NUM_LITERAL = /[0-9a-f]/i;\nvar RE_HEX_NUMBER = /^0x[0-9a-f]+$/i;\nvar RE_OCT_NUMBER = /^0[0-7]+$/;\nvar RE_ES6_OCT_NUMBER = /^0o[0-7]+$/i;\nvar RE_BIN_NUMBER = /^0b[01]+$/i;\nvar RE_DEC_NUMBER = /^\\d*\\.?\\d*(?:e[+-]?\\d*(?:\\d\\.?|\\.?\\d)\\d*)?$/i;\nvar RE_BIG_INT = /^(0[xob])?[0-9a-f]+n$/i;\n\nvar OPERATORS = makePredicate([\n    \"in\",\n    \"instanceof\",\n    \"typeof\",\n    \"new\",\n    \"void\",\n    \"delete\",\n    \"++\",\n    \"--\",\n    \"+\",\n    \"-\",\n    \"!\",\n    \"~\",\n    \"&\",\n    \"|\",\n    \"^\",\n    \"*\",\n    \"**\",\n    \"/\",\n    \"%\",\n    \">>\",\n    \"<<\",\n    \">>>\",\n    \"<\",\n    \">\",\n    \"<=\",\n    \">=\",\n    \"==\",\n    \"===\",\n    \"!=\",\n    \"!==\",\n    \"?\",\n    \"=\",\n    \"+=\",\n    \"-=\",\n    \"/=\",\n    \"*=\",\n    \"**=\",\n    \"%=\",\n    \">>=\",\n    \"<<=\",\n    \">>>=\",\n    \"|=\",\n    \"^=\",\n    \"&=\",\n    \"&&\",\n    \"??\",\n    \"||\",\n]);\n\nvar WHITESPACE_CHARS = makePredicate(characters(\" \\u00a0\\n\\r\\t\\f\\u000b\\u200b\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u2028\\u2029\\u202f\\u205f\\u3000\\uFEFF\"));\n\nvar NEWLINE_CHARS = makePredicate(characters(\"\\n\\r\\u2028\\u2029\"));\n\nvar PUNC_AFTER_EXPRESSION = makePredicate(characters(\";]),:\"));\n\nvar PUNC_BEFORE_EXPRESSION = makePredicate(characters(\"[{(,;:\"));\n\nvar PUNC_CHARS = makePredicate(characters(\"[]{}(),;:\"));\n\n/* -----[ Tokenizer ]----- */\n\n// surrogate safe regexps adapted from https://github.com/mathiasbynens/unicode-8.0.0/tree/89b412d8a71ecca9ed593d9e9fa073ab64acfebe/Binary_Property\nvar UNICODE = {\n    ID_Start: /[$A-Z_a-z\\xAA\\xB5\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0370-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0620-\\u064A\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06E5\\u06E6\\u06EE\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA\\u07F4\\u07F5\\u07FA\\u0800-\\u0815\\u081A\\u0824\\u0828\\u0840-\\u0858\\u08A0-\\u08B4\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09F0\\u09F1\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0AF9\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D\\u0C58-\\u0C5A\\u0C60\\u0C61\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDE\\u0CE0\\u0CE1\\u0CF1\\u0CF2\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D5F-\\u0D61\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E46\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EDC-\\u0EDF\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u13A0-\\u13F5\\u13F8-\\u13FD\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F8\\u1700-\\u170C\\u170E-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17D7\\u17DC\\u1820-\\u1877\\u1880-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1AA7\\u1B05-\\u1B33\\u1B45-\\u1B4B\\u1B83-\\u1BA0\\u1BAE\\u1BAF\\u1BBA-\\u1BE5\\u1C00-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C7D\\u1CE9-\\u1CEC\\u1CEE-\\u1CF1\\u1CF5\\u1CF6\\u1D00-\\u1DBF\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2071\\u207F\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2118-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2160-\\u2188\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u309B-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FD5\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA61F\\uA62A\\uA62B\\uA640-\\uA66E\\uA67F-\\uA69D\\uA6A0-\\uA6EF\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA7AD\\uA7B0-\\uA7B7\\uA7F7-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA8F2-\\uA8F7\\uA8FB\\uA8FD\\uA90A-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9CF\\uA9E0-\\uA9E4\\uA9E6-\\uA9EF\\uA9FA-\\uA9FE\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA60-\\uAA76\\uAA7A\\uAA7E-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEA\\uAAF2-\\uAAF4\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB65\\uAB70-\\uABE2\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]|\\uD800[\\uDC00-\\uDC0B\\uDC0D-\\uDC26\\uDC28-\\uDC3A\\uDC3C\\uDC3D\\uDC3F-\\uDC4D\\uDC50-\\uDC5D\\uDC80-\\uDCFA\\uDD40-\\uDD74\\uDE80-\\uDE9C\\uDEA0-\\uDED0\\uDF00-\\uDF1F\\uDF30-\\uDF4A\\uDF50-\\uDF75\\uDF80-\\uDF9D\\uDFA0-\\uDFC3\\uDFC8-\\uDFCF\\uDFD1-\\uDFD5]|\\uD801[\\uDC00-\\uDC9D\\uDD00-\\uDD27\\uDD30-\\uDD63\\uDE00-\\uDF36\\uDF40-\\uDF55\\uDF60-\\uDF67]|\\uD802[\\uDC00-\\uDC05\\uDC08\\uDC0A-\\uDC35\\uDC37\\uDC38\\uDC3C\\uDC3F-\\uDC55\\uDC60-\\uDC76\\uDC80-\\uDC9E\\uDCE0-\\uDCF2\\uDCF4\\uDCF5\\uDD00-\\uDD15\\uDD20-\\uDD39\\uDD80-\\uDDB7\\uDDBE\\uDDBF\\uDE00\\uDE10-\\uDE13\\uDE15-\\uDE17\\uDE19-\\uDE33\\uDE60-\\uDE7C\\uDE80-\\uDE9C\\uDEC0-\\uDEC7\\uDEC9-\\uDEE4\\uDF00-\\uDF35\\uDF40-\\uDF55\\uDF60-\\uDF72\\uDF80-\\uDF91]|\\uD803[\\uDC00-\\uDC48\\uDC80-\\uDCB2\\uDCC0-\\uDCF2]|\\uD804[\\uDC03-\\uDC37\\uDC83-\\uDCAF\\uDCD0-\\uDCE8\\uDD03-\\uDD26\\uDD50-\\uDD72\\uDD76\\uDD83-\\uDDB2\\uDDC1-\\uDDC4\\uDDDA\\uDDDC\\uDE00-\\uDE11\\uDE13-\\uDE2B\\uDE80-\\uDE86\\uDE88\\uDE8A-\\uDE8D\\uDE8F-\\uDE9D\\uDE9F-\\uDEA8\\uDEB0-\\uDEDE\\uDF05-\\uDF0C\\uDF0F\\uDF10\\uDF13-\\uDF28\\uDF2A-\\uDF30\\uDF32\\uDF33\\uDF35-\\uDF39\\uDF3D\\uDF50\\uDF5D-\\uDF61]|\\uD805[\\uDC80-\\uDCAF\\uDCC4\\uDCC5\\uDCC7\\uDD80-\\uDDAE\\uDDD8-\\uDDDB\\uDE00-\\uDE2F\\uDE44\\uDE80-\\uDEAA\\uDF00-\\uDF19]|\\uD806[\\uDCA0-\\uDCDF\\uDCFF\\uDEC0-\\uDEF8]|\\uD808[\\uDC00-\\uDF99]|\\uD809[\\uDC00-\\uDC6E\\uDC80-\\uDD43]|[\\uD80C\\uD840-\\uD868\\uD86A-\\uD86C\\uD86F-\\uD872][\\uDC00-\\uDFFF]|\\uD80D[\\uDC00-\\uDC2E]|\\uD811[\\uDC00-\\uDE46]|\\uD81A[\\uDC00-\\uDE38\\uDE40-\\uDE5E\\uDED0-\\uDEED\\uDF00-\\uDF2F\\uDF40-\\uDF43\\uDF63-\\uDF77\\uDF7D-\\uDF8F]|\\uD81B[\\uDF00-\\uDF44\\uDF50\\uDF93-\\uDF9F]|\\uD82C[\\uDC00\\uDC01]|\\uD82F[\\uDC00-\\uDC6A\\uDC70-\\uDC7C\\uDC80-\\uDC88\\uDC90-\\uDC99]|\\uD835[\\uDC00-\\uDC54\\uDC56-\\uDC9C\\uDC9E\\uDC9F\\uDCA2\\uDCA5\\uDCA6\\uDCA9-\\uDCAC\\uDCAE-\\uDCB9\\uDCBB\\uDCBD-\\uDCC3\\uDCC5-\\uDD05\\uDD07-\\uDD0A\\uDD0D-\\uDD14\\uDD16-\\uDD1C\\uDD1E-\\uDD39\\uDD3B-\\uDD3E\\uDD40-\\uDD44\\uDD46\\uDD4A-\\uDD50\\uDD52-\\uDEA5\\uDEA8-\\uDEC0\\uDEC2-\\uDEDA\\uDEDC-\\uDEFA\\uDEFC-\\uDF14\\uDF16-\\uDF34\\uDF36-\\uDF4E\\uDF50-\\uDF6E\\uDF70-\\uDF88\\uDF8A-\\uDFA8\\uDFAA-\\uDFC2\\uDFC4-\\uDFCB]|\\uD83A[\\uDC00-\\uDCC4]|\\uD83B[\\uDE00-\\uDE03\\uDE05-\\uDE1F\\uDE21\\uDE22\\uDE24\\uDE27\\uDE29-\\uDE32\\uDE34-\\uDE37\\uDE39\\uDE3B\\uDE42\\uDE47\\uDE49\\uDE4B\\uDE4D-\\uDE4F\\uDE51\\uDE52\\uDE54\\uDE57\\uDE59\\uDE5B\\uDE5D\\uDE5F\\uDE61\\uDE62\\uDE64\\uDE67-\\uDE6A\\uDE6C-\\uDE72\\uDE74-\\uDE77\\uDE79-\\uDE7C\\uDE7E\\uDE80-\\uDE89\\uDE8B-\\uDE9B\\uDEA1-\\uDEA3\\uDEA5-\\uDEA9\\uDEAB-\\uDEBB]|\\uD869[\\uDC00-\\uDED6\\uDF00-\\uDFFF]|\\uD86D[\\uDC00-\\uDF34\\uDF40-\\uDFFF]|\\uD86E[\\uDC00-\\uDC1D\\uDC20-\\uDFFF]|\\uD873[\\uDC00-\\uDEA1]|\\uD87E[\\uDC00-\\uDE1D]/,\n    ID_Continue: /(?:[$0-9A-Z_a-z\\xAA\\xB5\\xB7\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0300-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u0483-\\u0487\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u0591-\\u05BD\\u05BF\\u05C1\\u05C2\\u05C4\\u05C5\\u05C7\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0610-\\u061A\\u0620-\\u0669\\u066E-\\u06D3\\u06D5-\\u06DC\\u06DF-\\u06E8\\u06EA-\\u06FC\\u06FF\\u0710-\\u074A\\u074D-\\u07B1\\u07C0-\\u07F5\\u07FA\\u0800-\\u082D\\u0840-\\u085B\\u08A0-\\u08B4\\u08E3-\\u0963\\u0966-\\u096F\\u0971-\\u0983\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BC-\\u09C4\\u09C7\\u09C8\\u09CB-\\u09CE\\u09D7\\u09DC\\u09DD\\u09DF-\\u09E3\\u09E6-\\u09F1\\u0A01-\\u0A03\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A3C\\u0A3E-\\u0A42\\u0A47\\u0A48\\u0A4B-\\u0A4D\\u0A51\\u0A59-\\u0A5C\\u0A5E\\u0A66-\\u0A75\\u0A81-\\u0A83\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABC-\\u0AC5\\u0AC7-\\u0AC9\\u0ACB-\\u0ACD\\u0AD0\\u0AE0-\\u0AE3\\u0AE6-\\u0AEF\\u0AF9\\u0B01-\\u0B03\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3C-\\u0B44\\u0B47\\u0B48\\u0B4B-\\u0B4D\\u0B56\\u0B57\\u0B5C\\u0B5D\\u0B5F-\\u0B63\\u0B66-\\u0B6F\\u0B71\\u0B82\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BBE-\\u0BC2\\u0BC6-\\u0BC8\\u0BCA-\\u0BCD\\u0BD0\\u0BD7\\u0BE6-\\u0BEF\\u0C00-\\u0C03\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D-\\u0C44\\u0C46-\\u0C48\\u0C4A-\\u0C4D\\u0C55\\u0C56\\u0C58-\\u0C5A\\u0C60-\\u0C63\\u0C66-\\u0C6F\\u0C81-\\u0C83\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBC-\\u0CC4\\u0CC6-\\u0CC8\\u0CCA-\\u0CCD\\u0CD5\\u0CD6\\u0CDE\\u0CE0-\\u0CE3\\u0CE6-\\u0CEF\\u0CF1\\u0CF2\\u0D01-\\u0D03\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D-\\u0D44\\u0D46-\\u0D48\\u0D4A-\\u0D4E\\u0D57\\u0D5F-\\u0D63\\u0D66-\\u0D6F\\u0D7A-\\u0D7F\\u0D82\\u0D83\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0DCA\\u0DCF-\\u0DD4\\u0DD6\\u0DD8-\\u0DDF\\u0DE6-\\u0DEF\\u0DF2\\u0DF3\\u0E01-\\u0E3A\\u0E40-\\u0E4E\\u0E50-\\u0E59\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB9\\u0EBB-\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EC8-\\u0ECD\\u0ED0-\\u0ED9\\u0EDC-\\u0EDF\\u0F00\\u0F18\\u0F19\\u0F20-\\u0F29\\u0F35\\u0F37\\u0F39\\u0F3E-\\u0F47\\u0F49-\\u0F6C\\u0F71-\\u0F84\\u0F86-\\u0F97\\u0F99-\\u0FBC\\u0FC6\\u1000-\\u1049\\u1050-\\u109D\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u135D-\\u135F\\u1369-\\u1371\\u1380-\\u138F\\u13A0-\\u13F5\\u13F8-\\u13FD\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F8\\u1700-\\u170C\\u170E-\\u1714\\u1720-\\u1734\\u1740-\\u1753\\u1760-\\u176C\\u176E-\\u1770\\u1772\\u1773\\u1780-\\u17D3\\u17D7\\u17DC\\u17DD\\u17E0-\\u17E9\\u180B-\\u180D\\u1810-\\u1819\\u1820-\\u1877\\u1880-\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1920-\\u192B\\u1930-\\u193B\\u1946-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u19D0-\\u19DA\\u1A00-\\u1A1B\\u1A20-\\u1A5E\\u1A60-\\u1A7C\\u1A7F-\\u1A89\\u1A90-\\u1A99\\u1AA7\\u1AB0-\\u1ABD\\u1B00-\\u1B4B\\u1B50-\\u1B59\\u1B6B-\\u1B73\\u1B80-\\u1BF3\\u1C00-\\u1C37\\u1C40-\\u1C49\\u1C4D-\\u1C7D\\u1CD0-\\u1CD2\\u1CD4-\\u1CF6\\u1CF8\\u1CF9\\u1D00-\\u1DF5\\u1DFC-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u200C\\u200D\\u203F\\u2040\\u2054\\u2071\\u207F\\u2090-\\u209C\\u20D0-\\u20DC\\u20E1\\u20E5-\\u20F0\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2118-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2160-\\u2188\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D7F-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2DE0-\\u2DFF\\u3005-\\u3007\\u3021-\\u302F\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u3099-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FD5\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA62B\\uA640-\\uA66F\\uA674-\\uA67D\\uA67F-\\uA6F1\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA7AD\\uA7B0-\\uA7B7\\uA7F7-\\uA827\\uA840-\\uA873\\uA880-\\uA8C4\\uA8D0-\\uA8D9\\uA8E0-\\uA8F7\\uA8FB\\uA8FD\\uA900-\\uA92D\\uA930-\\uA953\\uA960-\\uA97C\\uA980-\\uA9C0\\uA9CF-\\uA9D9\\uA9E0-\\uA9FE\\uAA00-\\uAA36\\uAA40-\\uAA4D\\uAA50-\\uAA59\\uAA60-\\uAA76\\uAA7A-\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEF\\uAAF2-\\uAAF6\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB65\\uAB70-\\uABEA\\uABEC\\uABED\\uABF0-\\uABF9\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE00-\\uFE0F\\uFE20-\\uFE2F\\uFE33\\uFE34\\uFE4D-\\uFE4F\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF10-\\uFF19\\uFF21-\\uFF3A\\uFF3F\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]|\\uD800[\\uDC00-\\uDC0B\\uDC0D-\\uDC26\\uDC28-\\uDC3A\\uDC3C\\uDC3D\\uDC3F-\\uDC4D\\uDC50-\\uDC5D\\uDC80-\\uDCFA\\uDD40-\\uDD74\\uDDFD\\uDE80-\\uDE9C\\uDEA0-\\uDED0\\uDEE0\\uDF00-\\uDF1F\\uDF30-\\uDF4A\\uDF50-\\uDF7A\\uDF80-\\uDF9D\\uDFA0-\\uDFC3\\uDFC8-\\uDFCF\\uDFD1-\\uDFD5]|\\uD801[\\uDC00-\\uDC9D\\uDCA0-\\uDCA9\\uDD00-\\uDD27\\uDD30-\\uDD63\\uDE00-\\uDF36\\uDF40-\\uDF55\\uDF60-\\uDF67]|\\uD802[\\uDC00-\\uDC05\\uDC08\\uDC0A-\\uDC35\\uDC37\\uDC38\\uDC3C\\uDC3F-\\uDC55\\uDC60-\\uDC76\\uDC80-\\uDC9E\\uDCE0-\\uDCF2\\uDCF4\\uDCF5\\uDD00-\\uDD15\\uDD20-\\uDD39\\uDD80-\\uDDB7\\uDDBE\\uDDBF\\uDE00-\\uDE03\\uDE05\\uDE06\\uDE0C-\\uDE13\\uDE15-\\uDE17\\uDE19-\\uDE33\\uDE38-\\uDE3A\\uDE3F\\uDE60-\\uDE7C\\uDE80-\\uDE9C\\uDEC0-\\uDEC7\\uDEC9-\\uDEE6\\uDF00-\\uDF35\\uDF40-\\uDF55\\uDF60-\\uDF72\\uDF80-\\uDF91]|\\uD803[\\uDC00-\\uDC48\\uDC80-\\uDCB2\\uDCC0-\\uDCF2]|\\uD804[\\uDC00-\\uDC46\\uDC66-\\uDC6F\\uDC7F-\\uDCBA\\uDCD0-\\uDCE8\\uDCF0-\\uDCF9\\uDD00-\\uDD34\\uDD36-\\uDD3F\\uDD50-\\uDD73\\uDD76\\uDD80-\\uDDC4\\uDDCA-\\uDDCC\\uDDD0-\\uDDDA\\uDDDC\\uDE00-\\uDE11\\uDE13-\\uDE37\\uDE80-\\uDE86\\uDE88\\uDE8A-\\uDE8D\\uDE8F-\\uDE9D\\uDE9F-\\uDEA8\\uDEB0-\\uDEEA\\uDEF0-\\uDEF9\\uDF00-\\uDF03\\uDF05-\\uDF0C\\uDF0F\\uDF10\\uDF13-\\uDF28\\uDF2A-\\uDF30\\uDF32\\uDF33\\uDF35-\\uDF39\\uDF3C-\\uDF44\\uDF47\\uDF48\\uDF4B-\\uDF4D\\uDF50\\uDF57\\uDF5D-\\uDF63\\uDF66-\\uDF6C\\uDF70-\\uDF74]|\\uD805[\\uDC80-\\uDCC5\\uDCC7\\uDCD0-\\uDCD9\\uDD80-\\uDDB5\\uDDB8-\\uDDC0\\uDDD8-\\uDDDD\\uDE00-\\uDE40\\uDE44\\uDE50-\\uDE59\\uDE80-\\uDEB7\\uDEC0-\\uDEC9\\uDF00-\\uDF19\\uDF1D-\\uDF2B\\uDF30-\\uDF39]|\\uD806[\\uDCA0-\\uDCE9\\uDCFF\\uDEC0-\\uDEF8]|\\uD808[\\uDC00-\\uDF99]|\\uD809[\\uDC00-\\uDC6E\\uDC80-\\uDD43]|[\\uD80C\\uD840-\\uD868\\uD86A-\\uD86C\\uD86F-\\uD872][\\uDC00-\\uDFFF]|\\uD80D[\\uDC00-\\uDC2E]|\\uD811[\\uDC00-\\uDE46]|\\uD81A[\\uDC00-\\uDE38\\uDE40-\\uDE5E\\uDE60-\\uDE69\\uDED0-\\uDEED\\uDEF0-\\uDEF4\\uDF00-\\uDF36\\uDF40-\\uDF43\\uDF50-\\uDF59\\uDF63-\\uDF77\\uDF7D-\\uDF8F]|\\uD81B[\\uDF00-\\uDF44\\uDF50-\\uDF7E\\uDF8F-\\uDF9F]|\\uD82C[\\uDC00\\uDC01]|\\uD82F[\\uDC00-\\uDC6A\\uDC70-\\uDC7C\\uDC80-\\uDC88\\uDC90-\\uDC99\\uDC9D\\uDC9E]|\\uD834[\\uDD65-\\uDD69\\uDD6D-\\uDD72\\uDD7B-\\uDD82\\uDD85-\\uDD8B\\uDDAA-\\uDDAD\\uDE42-\\uDE44]|\\uD835[\\uDC00-\\uDC54\\uDC56-\\uDC9C\\uDC9E\\uDC9F\\uDCA2\\uDCA5\\uDCA6\\uDCA9-\\uDCAC\\uDCAE-\\uDCB9\\uDCBB\\uDCBD-\\uDCC3\\uDCC5-\\uDD05\\uDD07-\\uDD0A\\uDD0D-\\uDD14\\uDD16-\\uDD1C\\uDD1E-\\uDD39\\uDD3B-\\uDD3E\\uDD40-\\uDD44\\uDD46\\uDD4A-\\uDD50\\uDD52-\\uDEA5\\uDEA8-\\uDEC0\\uDEC2-\\uDEDA\\uDEDC-\\uDEFA\\uDEFC-\\uDF14\\uDF16-\\uDF34\\uDF36-\\uDF4E\\uDF50-\\uDF6E\\uDF70-\\uDF88\\uDF8A-\\uDFA8\\uDFAA-\\uDFC2\\uDFC4-\\uDFCB\\uDFCE-\\uDFFF]|\\uD836[\\uDE00-\\uDE36\\uDE3B-\\uDE6C\\uDE75\\uDE84\\uDE9B-\\uDE9F\\uDEA1-\\uDEAF]|\\uD83A[\\uDC00-\\uDCC4\\uDCD0-\\uDCD6]|\\uD83B[\\uDE00-\\uDE03\\uDE05-\\uDE1F\\uDE21\\uDE22\\uDE24\\uDE27\\uDE29-\\uDE32\\uDE34-\\uDE37\\uDE39\\uDE3B\\uDE42\\uDE47\\uDE49\\uDE4B\\uDE4D-\\uDE4F\\uDE51\\uDE52\\uDE54\\uDE57\\uDE59\\uDE5B\\uDE5D\\uDE5F\\uDE61\\uDE62\\uDE64\\uDE67-\\uDE6A\\uDE6C-\\uDE72\\uDE74-\\uDE77\\uDE79-\\uDE7C\\uDE7E\\uDE80-\\uDE89\\uDE8B-\\uDE9B\\uDEA1-\\uDEA3\\uDEA5-\\uDEA9\\uDEAB-\\uDEBB]|\\uD869[\\uDC00-\\uDED6\\uDF00-\\uDFFF]|\\uD86D[\\uDC00-\\uDF34\\uDF40-\\uDFFF]|\\uD86E[\\uDC00-\\uDC1D\\uDC20-\\uDFFF]|\\uD873[\\uDC00-\\uDEA1]|\\uD87E[\\uDC00-\\uDE1D]|\\uDB40[\\uDD00-\\uDDEF])+/,\n};\n\nfunction get_full_char(str, pos) {\n    if (is_surrogate_pair_head(str.charCodeAt(pos))) {\n        if (is_surrogate_pair_tail(str.charCodeAt(pos + 1))) {\n            return str.charAt(pos) + str.charAt(pos + 1);\n        }\n    } else if (is_surrogate_pair_tail(str.charCodeAt(pos))) {\n        if (is_surrogate_pair_head(str.charCodeAt(pos - 1))) {\n            return str.charAt(pos - 1) + str.charAt(pos);\n        }\n    }\n    return str.charAt(pos);\n}\n\nfunction get_full_char_code(str, pos) {\n    // https://en.wikipedia.org/wiki/Universal_Character_Set_characters#Surrogates\n    if (is_surrogate_pair_head(str.charCodeAt(pos))) {\n        return 0x10000 + (str.charCodeAt(pos) - 0xd800 << 10) + str.charCodeAt(pos + 1) - 0xdc00;\n    }\n    return str.charCodeAt(pos);\n}\n\nfunction get_full_char_length(str) {\n    var surrogates = 0;\n\n    for (var i = 0; i < str.length; i++) {\n        if (is_surrogate_pair_head(str.charCodeAt(i)) && is_surrogate_pair_tail(str.charCodeAt(i + 1))) {\n            surrogates++;\n            i++;\n        }\n    }\n\n    return str.length - surrogates;\n}\n\nfunction from_char_code(code) {\n    // Based on https://github.com/mathiasbynens/String.fromCodePoint/blob/master/fromcodepoint.js\n    if (code > 0xFFFF) {\n        code -= 0x10000;\n        return (String.fromCharCode((code >> 10) + 0xD800) +\n            String.fromCharCode((code % 0x400) + 0xDC00));\n    }\n    return String.fromCharCode(code);\n}\n\nfunction is_surrogate_pair_head(code) {\n    return code >= 0xd800 && code <= 0xdbff;\n}\n\nfunction is_surrogate_pair_tail(code) {\n    return code >= 0xdc00 && code <= 0xdfff;\n}\n\nfunction is_digit(code) {\n    return code >= 48 && code <= 57;\n}\n\nfunction is_identifier_start(ch) {\n    return UNICODE.ID_Start.test(ch);\n}\n\nfunction is_identifier_char(ch) {\n    return UNICODE.ID_Continue.test(ch);\n}\n\nfunction is_basic_identifier_string(str) {\n    return /^[a-z_$][a-z0-9_$]*$/i.test(str);\n}\n\nfunction is_identifier_string(str, allow_surrogates) {\n    if (/^[a-z_$][a-z0-9_$]*$/i.test(str)) {\n        return true;\n    }\n    if (!allow_surrogates && /[\\ud800-\\udfff]/.test(str)) {\n        return false;\n    }\n    var match = UNICODE.ID_Start.exec(str);\n    if (!match || match.index !== 0) {\n        return false;\n    }\n\n    str = str.slice(match[0].length);\n    if (!str) {\n        return true;\n    }\n\n    match = UNICODE.ID_Continue.exec(str);\n    return !!match && match[0].length === str.length;\n}\n\nfunction parse_js_number(num, allow_e = true) {\n    if (!allow_e && num.includes(\"e\")) {\n        return NaN;\n    }\n    if (RE_HEX_NUMBER.test(num)) {\n        return parseInt(num.substr(2), 16);\n    } else if (RE_OCT_NUMBER.test(num)) {\n        return parseInt(num.substr(1), 8);\n    } else if (RE_ES6_OCT_NUMBER.test(num)) {\n        return parseInt(num.substr(2), 8);\n    } else if (RE_BIN_NUMBER.test(num)) {\n        return parseInt(num.substr(2), 2);\n    } else if (RE_DEC_NUMBER.test(num)) {\n        return parseFloat(num);\n    } else {\n        var val = parseFloat(num);\n        if (val == num) return val;\n    }\n}\n\nclass JS_Parse_Error extends Error {\n    constructor(message, filename, line, col, pos) {\n        super();\n\n        this.name = \"SyntaxError\";\n        this.message = message;\n        this.filename = filename;\n        this.line = line;\n        this.col = col;\n        this.pos = pos;\n    }\n}\n\nfunction js_error(message, filename, line, col, pos) {\n    throw new JS_Parse_Error(message, filename, line, col, pos);\n}\n\nfunction is_token(token, type, val) {\n    return token.type == type && (val == null || token.value == val);\n}\n\nvar EX_EOF = {};\n\nfunction tokenizer($TEXT, filename, html5_comments, shebang) {\n    var S = {\n        text            : $TEXT,\n        filename        : filename,\n        pos             : 0,\n        tokpos          : 0,\n        line            : 1,\n        tokline         : 0,\n        col             : 0,\n        tokcol          : 0,\n        newline_before  : false,\n        regex_allowed   : false,\n        brace_counter   : 0,\n        template_braces : [],\n        comments_before : [],\n        directives      : {},\n        directive_stack : []\n    };\n\n    function peek() { return get_full_char(S.text, S.pos); }\n\n    // Used because parsing ?. involves a lookahead for a digit\n    function is_option_chain_op() {\n        const must_be_dot = S.text.charCodeAt(S.pos + 1) === 46;\n        if (!must_be_dot) return false;\n\n        const cannot_be_digit = S.text.charCodeAt(S.pos + 2);\n        return cannot_be_digit < 48 || cannot_be_digit > 57;\n    }\n\n    function next(signal_eof, in_string) {\n        var ch = get_full_char(S.text, S.pos++);\n        if (signal_eof && !ch)\n            throw EX_EOF;\n        if (NEWLINE_CHARS.has(ch)) {\n            S.newline_before = S.newline_before || !in_string;\n            ++S.line;\n            S.col = 0;\n            if (ch == \"\\r\" && peek() == \"\\n\") {\n                // treat a \\r\\n sequence as a single \\n\n                ++S.pos;\n                ch = \"\\n\";\n            }\n        } else {\n            if (ch.length > 1) {\n                ++S.pos;\n                ++S.col;\n            }\n            ++S.col;\n        }\n        return ch;\n    }\n\n    function forward(i) {\n        while (i--) next();\n    }\n\n    function looking_at(str) {\n        return S.text.substr(S.pos, str.length) == str;\n    }\n\n    function find_eol() {\n        var text = S.text;\n        for (var i = S.pos, n = S.text.length; i < n; ++i) {\n            var ch = text[i];\n            if (NEWLINE_CHARS.has(ch))\n                return i;\n        }\n        return -1;\n    }\n\n    function find(what, signal_eof) {\n        var pos = S.text.indexOf(what, S.pos);\n        if (signal_eof && pos == -1) throw EX_EOF;\n        return pos;\n    }\n\n    function start_token() {\n        S.tokline = S.line;\n        S.tokcol = S.col;\n        S.tokpos = S.pos;\n    }\n\n    var prev_was_dot = false;\n    var previous_token = null;\n    function token(type, value, is_comment) {\n        S.regex_allowed = ((type == \"operator\" && !UNARY_POSTFIX.has(value)) ||\n                           (type == \"keyword\" && KEYWORDS_BEFORE_EXPRESSION.has(value)) ||\n                           (type == \"punc\" && PUNC_BEFORE_EXPRESSION.has(value))) ||\n                           (type == \"arrow\");\n        if (type == \"punc\" && (value == \".\" || value == \"?.\")) {\n            prev_was_dot = true;\n        } else if (!is_comment) {\n            prev_was_dot = false;\n        }\n        var ret = {\n            type    : type,\n            value   : value,\n            line    : S.tokline,\n            col     : S.tokcol,\n            pos     : S.tokpos,\n            endline : S.line,\n            endcol  : S.col,\n            endpos  : S.pos,\n            nlb     : S.newline_before,\n            file    : filename\n        };\n        if (/^(?:num|string|regexp)$/i.test(type)) {\n            ret.raw = $TEXT.substring(ret.pos, ret.endpos);\n        }\n        if (!is_comment) {\n            ret.comments_before = S.comments_before;\n            ret.comments_after = S.comments_before = [];\n        }\n        S.newline_before = false;\n        ret = new AST_Token(ret);\n        if (!is_comment) previous_token = ret;\n        return ret;\n    }\n\n    function skip_whitespace() {\n        while (WHITESPACE_CHARS.has(peek()))\n            next();\n    }\n\n    function read_while(pred) {\n        var ret = \"\", ch, i = 0;\n        while ((ch = peek()) && pred(ch, i++))\n            ret += next();\n        return ret;\n    }\n\n    function parse_error(err) {\n        js_error(err, filename, S.tokline, S.tokcol, S.tokpos);\n    }\n\n    function read_num(prefix) {\n        var has_e = false, after_e = false, has_x = false, has_dot = prefix == \".\", is_big_int = false, numeric_separator = false;\n        var num = read_while(function(ch, i) {\n            if (is_big_int) return false;\n\n            var code = ch.charCodeAt(0);\n            switch (code) {\n              case 95: // _\n                return (numeric_separator = true);\n              case 98: case 66: // bB\n                return (has_x = true); // Can occur in hex sequence, don't return false yet\n              case 111: case 79: // oO\n              case 120: case 88: // xX\n                return has_x ? false : (has_x = true);\n              case 101: case 69: // eE\n                return has_x ? true : has_e ? false : (has_e = after_e = true);\n              case 45: // -\n                return after_e || (i == 0 && !prefix);\n              case 43: // +\n                return after_e;\n              case (after_e = false, 46): // .\n                return (!has_dot && !has_x && !has_e) ? (has_dot = true) : false;\n            }\n\n            if (ch === \"n\") {\n                is_big_int = true;\n\n                return true;\n            }\n\n            return RE_NUM_LITERAL.test(ch);\n        });\n        if (prefix) num = prefix + num;\n        if (RE_OCT_NUMBER.test(num) && next_token.has_directive(\"use strict\")) {\n            parse_error(\"Legacy octal literals are not allowed in strict mode\");\n        }\n        if (numeric_separator) {\n            if (num.endsWith(\"_\")) {\n                parse_error(\"Numeric separators are not allowed at the end of numeric literals\");\n            } else if (num.includes(\"__\")) {\n                parse_error(\"Only one underscore is allowed as numeric separator\");\n            }\n            num = num.replace(/_/g, \"\");\n        }\n        if (num.endsWith(\"n\")) {\n            const without_n = num.slice(0, -1);\n            const allow_e = RE_HEX_NUMBER.test(without_n);\n            const valid = parse_js_number(without_n, allow_e);\n            if (!has_dot && RE_BIG_INT.test(num) && !isNaN(valid))\n                return token(\"big_int\", without_n);\n            parse_error(\"Invalid or unexpected token\");\n        }\n        var valid = parse_js_number(num);\n        if (!isNaN(valid)) {\n            return token(\"num\", valid);\n        } else {\n            parse_error(\"Invalid syntax: \" + num);\n        }\n    }\n\n    function is_octal(ch) {\n        return ch >= \"0\" && ch <= \"7\";\n    }\n\n    function read_escaped_char(in_string, strict_hex, template_string) {\n        var ch = next(true, in_string);\n        switch (ch.charCodeAt(0)) {\n          case 110 : return \"\\n\";\n          case 114 : return \"\\r\";\n          case 116 : return \"\\t\";\n          case 98  : return \"\\b\";\n          case 118 : return \"\\u000b\"; // \\v\n          case 102 : return \"\\f\";\n          case 120 : return String.fromCharCode(hex_bytes(2, strict_hex)); // \\x\n          case 117 : // \\u\n            if (peek() == \"{\") {\n                next(true);\n                if (peek() === \"}\")\n                    parse_error(\"Expecting hex-character between {}\");\n                while (peek() == \"0\") next(true); // No significance\n                var result, length = find(\"}\", true) - S.pos;\n                // Avoid 32 bit integer overflow (1 << 32 === 1)\n                // We know first character isn't 0 and thus out of range anyway\n                if (length > 6 || (result = hex_bytes(length, strict_hex)) > 0x10FFFF) {\n                    parse_error(\"Unicode reference out of bounds\");\n                }\n                next(true);\n                return from_char_code(result);\n            }\n            return String.fromCharCode(hex_bytes(4, strict_hex));\n          case 10  : return \"\"; // newline\n          case 13  :            // \\r\n            if (peek() == \"\\n\") { // DOS newline\n                next(true, in_string);\n                return \"\";\n            }\n        }\n        if (is_octal(ch)) {\n            if (template_string && strict_hex) {\n                const represents_null_character = ch === \"0\" && !is_octal(peek());\n                if (!represents_null_character) {\n                    parse_error(\"Octal escape sequences are not allowed in template strings\");\n                }\n            }\n            return read_octal_escape_sequence(ch, strict_hex);\n        }\n        return ch;\n    }\n\n    function read_octal_escape_sequence(ch, strict_octal) {\n        // Read\n        var p = peek();\n        if (p >= \"0\" && p <= \"7\") {\n            ch += next(true);\n            if (ch[0] <= \"3\" && (p = peek()) >= \"0\" && p <= \"7\")\n                ch += next(true);\n        }\n\n        // Parse\n        if (ch === \"0\") return \"\\0\";\n        if (ch.length > 0 && next_token.has_directive(\"use strict\") && strict_octal)\n            parse_error(\"Legacy octal escape sequences are not allowed in strict mode\");\n        return String.fromCharCode(parseInt(ch, 8));\n    }\n\n    function hex_bytes(n, strict_hex) {\n        var num = 0;\n        for (; n > 0; --n) {\n            if (!strict_hex && isNaN(parseInt(peek(), 16))) {\n                return parseInt(num, 16) || \"\";\n            }\n            var digit = next(true);\n            if (isNaN(parseInt(digit, 16)))\n                parse_error(\"Invalid hex-character pattern in string\");\n            num += digit;\n        }\n        return parseInt(num, 16);\n    }\n\n    var read_string = with_eof_error(\"Unterminated string constant\", function() {\n        var quote = next(), ret = \"\";\n        for (;;) {\n            var ch = next(true, true);\n            if (ch == \"\\\\\") ch = read_escaped_char(true, true);\n            else if (ch == \"\\r\" || ch == \"\\n\") parse_error(\"Unterminated string constant\");\n            else if (ch == quote) break;\n            ret += ch;\n        }\n        var tok = token(\"string\", ret);\n        tok.quote = quote;\n        return tok;\n    });\n\n    var read_template_characters = with_eof_error(\"Unterminated template\", function(begin) {\n        if (begin) {\n            S.template_braces.push(S.brace_counter);\n        }\n        var content = \"\", raw = \"\", ch, tok;\n        next(true, true);\n        while ((ch = next(true, true)) != \"`\") {\n            if (ch == \"\\r\") {\n                if (peek() == \"\\n\") ++S.pos;\n                ch = \"\\n\";\n            } else if (ch == \"$\" && peek() == \"{\") {\n                next(true, true);\n                S.brace_counter++;\n                tok = token(begin ? \"template_head\" : \"template_substitution\", content);\n                tok.raw = raw;\n                return tok;\n            }\n\n            raw += ch;\n            if (ch == \"\\\\\") {\n                var tmp = S.pos;\n                var prev_is_tag = previous_token && (previous_token.type === \"name\" || previous_token.type === \"punc\" && (previous_token.value === \")\" || previous_token.value === \"]\"));\n                ch = read_escaped_char(true, !prev_is_tag, true);\n                raw += S.text.substr(tmp, S.pos - tmp);\n            }\n\n            content += ch;\n        }\n        S.template_braces.pop();\n        tok = token(begin ? \"template_head\" : \"template_substitution\", content);\n        tok.raw = raw;\n        tok.end = true;\n        return tok;\n    });\n\n    function skip_line_comment(type) {\n        var regex_allowed = S.regex_allowed;\n        var i = find_eol(), ret;\n        if (i == -1) {\n            ret = S.text.substr(S.pos);\n            S.pos = S.text.length;\n        } else {\n            ret = S.text.substring(S.pos, i);\n            S.pos = i;\n        }\n        S.col = S.tokcol + (S.pos - S.tokpos);\n        S.comments_before.push(token(type, ret, true));\n        S.regex_allowed = regex_allowed;\n        return next_token;\n    }\n\n    var skip_multiline_comment = with_eof_error(\"Unterminated multiline comment\", function() {\n        var regex_allowed = S.regex_allowed;\n        var i = find(\"*/\", true);\n        var text = S.text.substring(S.pos, i).replace(/\\r\\n|\\r|\\u2028|\\u2029/g, \"\\n\");\n        // update stream position\n        forward(get_full_char_length(text) /* text length doesn't count \\r\\n as 2 char while S.pos - i does */ + 2);\n        S.comments_before.push(token(\"comment2\", text, true));\n        S.newline_before = S.newline_before || text.includes(\"\\n\");\n        S.regex_allowed = regex_allowed;\n        return next_token;\n    });\n\n    var read_name = with_eof_error(\"Unterminated identifier name\", function() {\n        var name, ch, escaped = false;\n        var read_escaped_identifier_char = function() {\n            escaped = true;\n            next();\n            if (peek() !== \"u\") {\n                parse_error(\"Expecting UnicodeEscapeSequence -- uXXXX or u{XXXX}\");\n            }\n            return read_escaped_char(false, true);\n        };\n\n        // Read first character (ID_Start)\n        if ((name = peek()) === \"\\\\\") {\n            name = read_escaped_identifier_char();\n            if (!is_identifier_start(name)) {\n                parse_error(\"First identifier char is an invalid identifier char\");\n            }\n        } else if (is_identifier_start(name)) {\n            next();\n        } else {\n            return \"\";\n        }\n\n        // Read ID_Continue\n        while ((ch = peek()) != null) {\n            if ((ch = peek()) === \"\\\\\") {\n                ch = read_escaped_identifier_char();\n                if (!is_identifier_char(ch)) {\n                    parse_error(\"Invalid escaped identifier char\");\n                }\n            } else {\n                if (!is_identifier_char(ch)) {\n                    break;\n                }\n                next();\n            }\n            name += ch;\n        }\n        if (RESERVED_WORDS.has(name) && escaped) {\n            parse_error(\"Escaped characters are not allowed in keywords\");\n        }\n        return name;\n    });\n\n    var read_regexp = with_eof_error(\"Unterminated regular expression\", function(source) {\n        var prev_backslash = false, ch, in_class = false;\n        while ((ch = next(true))) if (NEWLINE_CHARS.has(ch)) {\n            parse_error(\"Unexpected line terminator\");\n        } else if (prev_backslash) {\n            source += \"\\\\\" + ch;\n            prev_backslash = false;\n        } else if (ch == \"[\") {\n            in_class = true;\n            source += ch;\n        } else if (ch == \"]\" && in_class) {\n            in_class = false;\n            source += ch;\n        } else if (ch == \"/\" && !in_class) {\n            break;\n        } else if (ch == \"\\\\\") {\n            prev_backslash = true;\n        } else {\n            source += ch;\n        }\n        const flags = read_name();\n        return token(\"regexp\", { source, flags });\n    });\n\n    function read_operator(prefix) {\n        function grow(op) {\n            if (!peek()) return op;\n            var bigger = op + peek();\n            if (OPERATORS.has(bigger)) {\n                next();\n                return grow(bigger);\n            } else {\n                return op;\n            }\n        }\n        return token(\"operator\", grow(prefix || next()));\n    }\n\n    function handle_slash() {\n        next();\n        switch (peek()) {\n          case \"/\":\n            next();\n            return skip_line_comment(\"comment1\");\n          case \"*\":\n            next();\n            return skip_multiline_comment();\n        }\n        return S.regex_allowed ? read_regexp(\"\") : read_operator(\"/\");\n    }\n\n    function handle_eq_sign() {\n        next();\n        if (peek() === \">\") {\n            next();\n            return token(\"arrow\", \"=>\");\n        } else {\n            return read_operator(\"=\");\n        }\n    }\n\n    function handle_dot() {\n        next();\n        if (is_digit(peek().charCodeAt(0))) {\n            return read_num(\".\");\n        }\n        if (peek() === \".\") {\n            next();  // Consume second dot\n            next();  // Consume third dot\n            return token(\"expand\", \"...\");\n        }\n\n        return token(\"punc\", \".\");\n    }\n\n    function read_word() {\n        var word = read_name();\n        if (prev_was_dot) return token(\"name\", word);\n        return KEYWORDS_ATOM.has(word) ? token(\"atom\", word)\n            : !KEYWORDS.has(word) ? token(\"name\", word)\n            : OPERATORS.has(word) ? token(\"operator\", word)\n            : token(\"keyword\", word);\n    }\n\n    function with_eof_error(eof_error, cont) {\n        return function(x) {\n            try {\n                return cont(x);\n            } catch(ex) {\n                if (ex === EX_EOF) parse_error(eof_error);\n                else throw ex;\n            }\n        };\n    }\n\n    function next_token(force_regexp) {\n        if (force_regexp != null)\n            return read_regexp(force_regexp);\n        if (shebang && S.pos == 0 && looking_at(\"#!\")) {\n            start_token();\n            forward(2);\n            skip_line_comment(\"comment5\");\n        }\n        for (;;) {\n            skip_whitespace();\n            start_token();\n            if (html5_comments) {\n                if (looking_at(\"<!--\")) {\n                    forward(4);\n                    skip_line_comment(\"comment3\");\n                    continue;\n                }\n                if (looking_at(\"-->\") && S.newline_before) {\n                    forward(3);\n                    skip_line_comment(\"comment4\");\n                    continue;\n                }\n            }\n            var ch = peek();\n            if (!ch) return token(\"eof\");\n            var code = ch.charCodeAt(0);\n            switch (code) {\n              case 34: case 39: return read_string();\n              case 46: return handle_dot();\n              case 47: {\n                  var tok = handle_slash();\n                  if (tok === next_token) continue;\n                  return tok;\n              }\n              case 61: return handle_eq_sign();\n              case 63: {\n                  if (!is_option_chain_op()) break;  // Handled below\n\n                  next(); // ?\n                  next(); // .\n\n                  return token(\"punc\", \"?.\");\n              }\n              case 96: return read_template_characters(true);\n              case 123:\n                S.brace_counter++;\n                break;\n              case 125:\n                S.brace_counter--;\n                if (S.template_braces.length > 0\n                    && S.template_braces[S.template_braces.length - 1] === S.brace_counter)\n                    return read_template_characters(false);\n                break;\n            }\n            if (is_digit(code)) return read_num();\n            if (PUNC_CHARS.has(ch)) return token(\"punc\", next());\n            if (OPERATOR_CHARS.has(ch)) return read_operator();\n            if (code == 92 || is_identifier_start(ch)) return read_word();\n            break;\n        }\n        parse_error(\"Unexpected character '\" + ch + \"'\");\n    }\n\n    next_token.next = next;\n    next_token.peek = peek;\n\n    next_token.context = function(nc) {\n        if (nc) S = nc;\n        return S;\n    };\n\n    next_token.add_directive = function(directive) {\n        S.directive_stack[S.directive_stack.length - 1].push(directive);\n\n        if (S.directives[directive] === undefined) {\n            S.directives[directive] = 1;\n        } else {\n            S.directives[directive]++;\n        }\n    };\n\n    next_token.push_directives_stack = function() {\n        S.directive_stack.push([]);\n    };\n\n    next_token.pop_directives_stack = function() {\n        var directives = S.directive_stack[S.directive_stack.length - 1];\n\n        for (var i = 0; i < directives.length; i++) {\n            S.directives[directives[i]]--;\n        }\n\n        S.directive_stack.pop();\n    };\n\n    next_token.has_directive = function(directive) {\n        return S.directives[directive] > 0;\n    };\n\n    return next_token;\n\n}\n\n/* -----[ Parser (constants) ]----- */\n\nvar UNARY_PREFIX = makePredicate([\n    \"typeof\",\n    \"void\",\n    \"delete\",\n    \"--\",\n    \"++\",\n    \"!\",\n    \"~\",\n    \"-\",\n    \"+\"\n]);\n\nvar UNARY_POSTFIX = makePredicate([ \"--\", \"++\" ]);\n\nvar ASSIGNMENT = makePredicate([ \"=\", \"+=\", \"-=\", \"/=\", \"*=\", \"**=\", \"%=\", \">>=\", \"<<=\", \">>>=\", \"|=\", \"^=\", \"&=\" ]);\n\nvar PRECEDENCE = (function(a, ret) {\n    for (var i = 0; i < a.length; ++i) {\n        var b = a[i];\n        for (var j = 0; j < b.length; ++j) {\n            ret[b[j]] = i + 1;\n        }\n    }\n    return ret;\n})(\n    [\n        [\"||\"],\n        [\"??\"],\n        [\"&&\"],\n        [\"|\"],\n        [\"^\"],\n        [\"&\"],\n        [\"==\", \"===\", \"!=\", \"!==\"],\n        [\"<\", \">\", \"<=\", \">=\", \"in\", \"instanceof\"],\n        [\">>\", \"<<\", \">>>\"],\n        [\"+\", \"-\"],\n        [\"*\", \"/\", \"%\"],\n        [\"**\"]\n    ],\n    {}\n);\n\nvar ATOMIC_START_TOKEN = makePredicate([ \"atom\", \"num\", \"big_int\", \"string\", \"regexp\", \"name\" ]);\n\n/* -----[ Parser ]----- */\n\nfunction parse($TEXT, options) {\n    // maps start tokens to count of comments found outside of their parens\n    // Example: /* I count */ ( /* I don't */ foo() )\n    // Useful because comments_before property of call with parens outside\n    // contains both comments inside and outside these parens. Used to find the\n    // right #__PURE__ comments for an expression\n    const outer_comments_before_counts = new Map();\n\n    options = defaults(options, {\n        bare_returns   : false,\n        ecma           : null,  // Legacy\n        expression     : false,\n        filename       : null,\n        html5_comments : true,\n        module         : false,\n        shebang        : true,\n        strict         : false,\n        toplevel       : null,\n    }, true);\n\n    var S = {\n        input         : (typeof $TEXT == \"string\"\n                         ? tokenizer($TEXT, options.filename,\n                                     options.html5_comments, options.shebang)\n                         : $TEXT),\n        token         : null,\n        prev          : null,\n        peeked        : null,\n        in_function   : 0,\n        in_async      : -1,\n        in_generator  : -1,\n        in_directives : true,\n        in_loop       : 0,\n        labels        : []\n    };\n\n    S.token = next();\n\n    function is(type, value) {\n        return is_token(S.token, type, value);\n    }\n\n    function peek() { return S.peeked || (S.peeked = S.input()); }\n\n    function next() {\n        S.prev = S.token;\n\n        if (!S.peeked) peek();\n        S.token = S.peeked;\n        S.peeked = null;\n        S.in_directives = S.in_directives && (\n            S.token.type == \"string\" || is(\"punc\", \";\")\n        );\n        return S.token;\n    }\n\n    function prev() {\n        return S.prev;\n    }\n\n    function croak(msg, line, col, pos) {\n        var ctx = S.input.context();\n        js_error(msg,\n                 ctx.filename,\n                 line != null ? line : ctx.tokline,\n                 col != null ? col : ctx.tokcol,\n                 pos != null ? pos : ctx.tokpos);\n    }\n\n    function token_error(token, msg) {\n        croak(msg, token.line, token.col);\n    }\n\n    function unexpected(token) {\n        if (token == null)\n            token = S.token;\n        token_error(token, \"Unexpected token: \" + token.type + \" (\" + token.value + \")\");\n    }\n\n    function expect_token(type, val) {\n        if (is(type, val)) {\n            return next();\n        }\n        token_error(S.token, \"Unexpected token \" + S.token.type + \" «\" + S.token.value + \"»\" + \", expected \" + type + \" «\" + val + \"»\");\n    }\n\n    function expect(punc) { return expect_token(\"punc\", punc); }\n\n    function has_newline_before(token) {\n        return token.nlb || !token.comments_before.every((comment) => !comment.nlb);\n    }\n\n    function can_insert_semicolon() {\n        return !options.strict\n            && (is(\"eof\") || is(\"punc\", \"}\") || has_newline_before(S.token));\n    }\n\n    function is_in_generator() {\n        return S.in_generator === S.in_function;\n    }\n\n    function is_in_async() {\n        return S.in_async === S.in_function;\n    }\n\n    function semicolon(optional) {\n        if (is(\"punc\", \";\")) next();\n        else if (!optional && !can_insert_semicolon()) unexpected();\n    }\n\n    function parenthesised() {\n        expect(\"(\");\n        var exp = expression(true);\n        expect(\")\");\n        return exp;\n    }\n\n    function embed_tokens(parser) {\n        return function _embed_tokens_wrapper(...args) {\n            const start = S.token;\n            const expr = parser(...args);\n            expr.start = start;\n            expr.end = prev();\n            return expr;\n        };\n    }\n\n    function handle_regexp() {\n        if (is(\"operator\", \"/\") || is(\"operator\", \"/=\")) {\n            S.peeked = null;\n            S.token = S.input(S.token.value.substr(1)); // force regexp\n        }\n    }\n\n    var statement = embed_tokens(function statement(is_export_default, is_for_body, is_if_body) {\n        handle_regexp();\n        switch (S.token.type) {\n          case \"string\":\n            if (S.in_directives) {\n                var token = peek();\n                if (!S.token.raw.includes(\"\\\\\")\n                    && (is_token(token, \"punc\", \";\")\n                        || is_token(token, \"punc\", \"}\")\n                        || has_newline_before(token)\n                        || is_token(token, \"eof\"))) {\n                    S.input.add_directive(S.token.value);\n                } else {\n                    S.in_directives = false;\n                }\n            }\n            var dir = S.in_directives, stat = simple_statement();\n            return dir && stat.body instanceof AST_String ? new AST_Directive(stat.body) : stat;\n          case \"template_head\":\n          case \"num\":\n          case \"big_int\":\n          case \"regexp\":\n          case \"operator\":\n          case \"atom\":\n            return simple_statement();\n\n          case \"name\":\n            if (S.token.value == \"async\" && is_token(peek(), \"keyword\", \"function\")) {\n                next();\n                next();\n                if (is_for_body) {\n                    croak(\"functions are not allowed as the body of a loop\");\n                }\n                return function_(AST_Defun, false, true, is_export_default);\n            }\n            if (S.token.value == \"import\" && !is_token(peek(), \"punc\", \"(\") && !is_token(peek(), \"punc\", \".\")) {\n                next();\n                var node = import_();\n                semicolon();\n                return node;\n            }\n            return is_token(peek(), \"punc\", \":\")\n                ? labeled_statement()\n                : simple_statement();\n\n          case \"punc\":\n            switch (S.token.value) {\n              case \"{\":\n                return new AST_BlockStatement({\n                    start : S.token,\n                    body  : block_(),\n                    end   : prev()\n                });\n              case \"[\":\n              case \"(\":\n                return simple_statement();\n              case \";\":\n                S.in_directives = false;\n                next();\n                return new AST_EmptyStatement();\n              default:\n                unexpected();\n            }\n\n          case \"keyword\":\n            switch (S.token.value) {\n              case \"break\":\n                next();\n                return break_cont(AST_Break);\n\n              case \"continue\":\n                next();\n                return break_cont(AST_Continue);\n\n              case \"debugger\":\n                next();\n                semicolon();\n                return new AST_Debugger();\n\n              case \"do\":\n                next();\n                var body = in_loop(statement);\n                expect_token(\"keyword\", \"while\");\n                var condition = parenthesised();\n                semicolon(true);\n                return new AST_Do({\n                    body      : body,\n                    condition : condition\n                });\n\n              case \"while\":\n                next();\n                return new AST_While({\n                    condition : parenthesised(),\n                    body      : in_loop(function() { return statement(false, true); })\n                });\n\n              case \"for\":\n                next();\n                return for_();\n\n              case \"class\":\n                next();\n                if (is_for_body) {\n                    croak(\"classes are not allowed as the body of a loop\");\n                }\n                if (is_if_body) {\n                    croak(\"classes are not allowed as the body of an if\");\n                }\n                return class_(AST_DefClass);\n\n              case \"function\":\n                next();\n                if (is_for_body) {\n                    croak(\"functions are not allowed as the body of a loop\");\n                }\n                return function_(AST_Defun, false, false, is_export_default);\n\n              case \"if\":\n                next();\n                return if_();\n\n              case \"return\":\n                if (S.in_function == 0 && !options.bare_returns)\n                    croak(\"'return' outside of function\");\n                next();\n                var value = null;\n                if (is(\"punc\", \";\")) {\n                    next();\n                } else if (!can_insert_semicolon()) {\n                    value = expression(true);\n                    semicolon();\n                }\n                return new AST_Return({\n                    value: value\n                });\n\n              case \"switch\":\n                next();\n                return new AST_Switch({\n                    expression : parenthesised(),\n                    body       : in_loop(switch_body_)\n                });\n\n              case \"throw\":\n                next();\n                if (has_newline_before(S.token))\n                    croak(\"Illegal newline after 'throw'\");\n                var value = expression(true);\n                semicolon();\n                return new AST_Throw({\n                    value: value\n                });\n\n              case \"try\":\n                next();\n                return try_();\n\n              case \"var\":\n                next();\n                var node = var_();\n                semicolon();\n                return node;\n\n              case \"let\":\n                next();\n                var node = let_();\n                semicolon();\n                return node;\n\n              case \"const\":\n                next();\n                var node = const_();\n                semicolon();\n                return node;\n\n              case \"with\":\n                if (S.input.has_directive(\"use strict\")) {\n                    croak(\"Strict mode may not include a with statement\");\n                }\n                next();\n                return new AST_With({\n                    expression : parenthesised(),\n                    body       : statement()\n                });\n\n              case \"export\":\n                if (!is_token(peek(), \"punc\", \"(\")) {\n                    next();\n                    var node = export_();\n                    if (is(\"punc\", \";\")) semicolon();\n                    return node;\n                }\n            }\n        }\n        unexpected();\n    });\n\n    function labeled_statement() {\n        var label = as_symbol(AST_Label);\n        if (label.name === \"await\" && is_in_async()) {\n            token_error(S.prev, \"await cannot be used as label inside async function\");\n        }\n        if (S.labels.some((l) => l.name === label.name)) {\n            // ECMA-262, 12.12: An ECMAScript program is considered\n            // syntactically incorrect if it contains a\n            // LabelledStatement that is enclosed by a\n            // LabelledStatement with the same Identifier as label.\n            croak(\"Label \" + label.name + \" defined twice\");\n        }\n        expect(\":\");\n        S.labels.push(label);\n        var stat = statement();\n        S.labels.pop();\n        if (!(stat instanceof AST_IterationStatement)) {\n            // check for `continue` that refers to this label.\n            // those should be reported as syntax errors.\n            // https://github.com/mishoo/UglifyJS2/issues/287\n            label.references.forEach(function(ref) {\n                if (ref instanceof AST_Continue) {\n                    ref = ref.label.start;\n                    croak(\"Continue label `\" + label.name + \"` refers to non-IterationStatement.\",\n                          ref.line, ref.col, ref.pos);\n                }\n            });\n        }\n        return new AST_LabeledStatement({ body: stat, label: label });\n    }\n\n    function simple_statement(tmp) {\n        return new AST_SimpleStatement({ body: (tmp = expression(true), semicolon(), tmp) });\n    }\n\n    function break_cont(type) {\n        var label = null, ldef;\n        if (!can_insert_semicolon()) {\n            label = as_symbol(AST_LabelRef, true);\n        }\n        if (label != null) {\n            ldef = S.labels.find((l) => l.name === label.name);\n            if (!ldef)\n                croak(\"Undefined label \" + label.name);\n            label.thedef = ldef;\n        } else if (S.in_loop == 0)\n            croak(type.TYPE + \" not inside a loop or switch\");\n        semicolon();\n        var stat = new type({ label: label });\n        if (ldef) ldef.references.push(stat);\n        return stat;\n    }\n\n    function for_() {\n        var for_await_error = \"`for await` invalid in this context\";\n        var await_tok = S.token;\n        if (await_tok.type == \"name\" && await_tok.value == \"await\") {\n            if (!is_in_async()) {\n                token_error(await_tok, for_await_error);\n            }\n            next();\n        } else {\n            await_tok = false;\n        }\n        expect(\"(\");\n        var init = null;\n        if (!is(\"punc\", \";\")) {\n            init =\n                is(\"keyword\", \"var\") ? (next(), var_(true)) :\n                is(\"keyword\", \"let\") ? (next(), let_(true)) :\n                is(\"keyword\", \"const\") ? (next(), const_(true)) :\n                                       expression(true, true);\n            var is_in = is(\"operator\", \"in\");\n            var is_of = is(\"name\", \"of\");\n            if (await_tok && !is_of) {\n                token_error(await_tok, for_await_error);\n            }\n            if (is_in || is_of) {\n                if (init instanceof AST_Definitions) {\n                    if (init.definitions.length > 1)\n                        token_error(init.start, \"Only one variable declaration allowed in for..in loop\");\n                } else if (!(is_assignable(init) || (init = to_destructuring(init)) instanceof AST_Destructuring)) {\n                    token_error(init.start, \"Invalid left-hand side in for..in loop\");\n                }\n                next();\n                if (is_in) {\n                    return for_in(init);\n                } else {\n                    return for_of(init, !!await_tok);\n                }\n            }\n        } else if (await_tok) {\n            token_error(await_tok, for_await_error);\n        }\n        return regular_for(init);\n    }\n\n    function regular_for(init) {\n        expect(\";\");\n        var test = is(\"punc\", \";\") ? null : expression(true);\n        expect(\";\");\n        var step = is(\"punc\", \")\") ? null : expression(true);\n        expect(\")\");\n        return new AST_For({\n            init      : init,\n            condition : test,\n            step      : step,\n            body      : in_loop(function() { return statement(false, true); })\n        });\n    }\n\n    function for_of(init, is_await) {\n        var lhs = init instanceof AST_Definitions ? init.definitions[0].name : null;\n        var obj = expression(true);\n        expect(\")\");\n        return new AST_ForOf({\n            await  : is_await,\n            init   : init,\n            name   : lhs,\n            object : obj,\n            body   : in_loop(function() { return statement(false, true); })\n        });\n    }\n\n    function for_in(init) {\n        var obj = expression(true);\n        expect(\")\");\n        return new AST_ForIn({\n            init   : init,\n            object : obj,\n            body   : in_loop(function() { return statement(false, true); })\n        });\n    }\n\n    var arrow_function = function(start, argnames, is_async) {\n        if (has_newline_before(S.token)) {\n            croak(\"Unexpected newline before arrow (=>)\");\n        }\n\n        expect_token(\"arrow\", \"=>\");\n\n        var body = _function_body(is(\"punc\", \"{\"), false, is_async);\n\n        var end =\n            body instanceof Array && body.length ? body[body.length - 1].end :\n            body instanceof Array ? start :\n                body.end;\n\n        return new AST_Arrow({\n            start    : start,\n            end      : end,\n            async    : is_async,\n            argnames : argnames,\n            body     : body\n        });\n    };\n\n    var function_ = function(ctor, is_generator_property, is_async, is_export_default) {\n        var in_statement = ctor === AST_Defun;\n        var is_generator = is(\"operator\", \"*\");\n        if (is_generator) {\n            next();\n        }\n\n        var name = is(\"name\") ? as_symbol(in_statement ? AST_SymbolDefun : AST_SymbolLambda) : null;\n        if (in_statement && !name) {\n            if (is_export_default) {\n                ctor = AST_Function;\n            } else {\n                unexpected();\n            }\n        }\n\n        if (name && ctor !== AST_Accessor && !(name instanceof AST_SymbolDeclaration))\n            unexpected(prev());\n\n        var args = [];\n        var body = _function_body(true, is_generator || is_generator_property, is_async, name, args);\n        return new ctor({\n            start : args.start,\n            end   : body.end,\n            is_generator: is_generator,\n            async : is_async,\n            name  : name,\n            argnames: args,\n            body  : body\n        });\n    };\n\n    function track_used_binding_identifiers(is_parameter, strict) {\n        var parameters = new Set();\n        var duplicate = false;\n        var default_assignment = false;\n        var spread = false;\n        var strict_mode = !!strict;\n        var tracker = {\n            add_parameter: function(token) {\n                if (parameters.has(token.value)) {\n                    if (duplicate === false) {\n                        duplicate = token;\n                    }\n                    tracker.check_strict();\n                } else {\n                    parameters.add(token.value);\n                    if (is_parameter) {\n                        switch (token.value) {\n                          case \"arguments\":\n                          case \"eval\":\n                          case \"yield\":\n                            if (strict_mode) {\n                                token_error(token, \"Unexpected \" + token.value + \" identifier as parameter inside strict mode\");\n                            }\n                            break;\n                          default:\n                            if (RESERVED_WORDS.has(token.value)) {\n                                unexpected();\n                            }\n                        }\n                    }\n                }\n            },\n            mark_default_assignment: function(token) {\n                if (default_assignment === false) {\n                    default_assignment = token;\n                }\n            },\n            mark_spread: function(token) {\n                if (spread === false) {\n                    spread = token;\n                }\n            },\n            mark_strict_mode: function() {\n                strict_mode = true;\n            },\n            is_strict: function() {\n                return default_assignment !== false || spread !== false || strict_mode;\n            },\n            check_strict: function() {\n                if (tracker.is_strict() && duplicate !== false) {\n                    token_error(duplicate, \"Parameter \" + duplicate.value + \" was used already\");\n                }\n            }\n        };\n\n        return tracker;\n    }\n\n    function parameters(params) {\n        var used_parameters = track_used_binding_identifiers(true, S.input.has_directive(\"use strict\"));\n\n        expect(\"(\");\n\n        while (!is(\"punc\", \")\")) {\n            var param = parameter(used_parameters);\n            params.push(param);\n\n            if (!is(\"punc\", \")\")) {\n                expect(\",\");\n            }\n\n            if (param instanceof AST_Expansion) {\n                break;\n            }\n        }\n\n        next();\n    }\n\n    function parameter(used_parameters, symbol_type) {\n        var param;\n        var expand = false;\n        if (used_parameters === undefined) {\n            used_parameters = track_used_binding_identifiers(true, S.input.has_directive(\"use strict\"));\n        }\n        if (is(\"expand\", \"...\")) {\n            expand = S.token;\n            used_parameters.mark_spread(S.token);\n            next();\n        }\n        param = binding_element(used_parameters, symbol_type);\n\n        if (is(\"operator\", \"=\") && expand === false) {\n            used_parameters.mark_default_assignment(S.token);\n            next();\n            param = new AST_DefaultAssign({\n                start: param.start,\n                left: param,\n                operator: \"=\",\n                right: expression(false),\n                end: S.token\n            });\n        }\n\n        if (expand !== false) {\n            if (!is(\"punc\", \")\")) {\n                unexpected();\n            }\n            param = new AST_Expansion({\n                start: expand,\n                expression: param,\n                end: expand\n            });\n        }\n        used_parameters.check_strict();\n\n        return param;\n    }\n\n    function binding_element(used_parameters, symbol_type) {\n        var elements = [];\n        var first = true;\n        var is_expand = false;\n        var expand_token;\n        var first_token = S.token;\n        if (used_parameters === undefined) {\n            used_parameters = track_used_binding_identifiers(false, S.input.has_directive(\"use strict\"));\n        }\n        symbol_type = symbol_type === undefined ? AST_SymbolFunarg : symbol_type;\n        if (is(\"punc\", \"[\")) {\n            next();\n            while (!is(\"punc\", \"]\")) {\n                if (first) {\n                    first = false;\n                } else {\n                    expect(\",\");\n                }\n\n                if (is(\"expand\", \"...\")) {\n                    is_expand = true;\n                    expand_token = S.token;\n                    used_parameters.mark_spread(S.token);\n                    next();\n                }\n                if (is(\"punc\")) {\n                    switch (S.token.value) {\n                      case \",\":\n                        elements.push(new AST_Hole({\n                            start: S.token,\n                            end: S.token\n                        }));\n                        continue;\n                      case \"]\": // Trailing comma after last element\n                        break;\n                      case \"[\":\n                      case \"{\":\n                        elements.push(binding_element(used_parameters, symbol_type));\n                        break;\n                      default:\n                        unexpected();\n                    }\n                } else if (is(\"name\")) {\n                    used_parameters.add_parameter(S.token);\n                    elements.push(as_symbol(symbol_type));\n                } else {\n                    croak(\"Invalid function parameter\");\n                }\n                if (is(\"operator\", \"=\") && is_expand === false) {\n                    used_parameters.mark_default_assignment(S.token);\n                    next();\n                    elements[elements.length - 1] = new AST_DefaultAssign({\n                        start: elements[elements.length - 1].start,\n                        left: elements[elements.length - 1],\n                        operator: \"=\",\n                        right: expression(false),\n                        end: S.token\n                    });\n                }\n                if (is_expand) {\n                    if (!is(\"punc\", \"]\")) {\n                        croak(\"Rest element must be last element\");\n                    }\n                    elements[elements.length - 1] = new AST_Expansion({\n                        start: expand_token,\n                        expression: elements[elements.length - 1],\n                        end: expand_token\n                    });\n                }\n            }\n            expect(\"]\");\n            used_parameters.check_strict();\n            return new AST_Destructuring({\n                start: first_token,\n                names: elements,\n                is_array: true,\n                end: prev()\n            });\n        } else if (is(\"punc\", \"{\")) {\n            next();\n            while (!is(\"punc\", \"}\")) {\n                if (first) {\n                    first = false;\n                } else {\n                    expect(\",\");\n                }\n                if (is(\"expand\", \"...\")) {\n                    is_expand = true;\n                    expand_token = S.token;\n                    used_parameters.mark_spread(S.token);\n                    next();\n                }\n                if (is(\"name\") && (is_token(peek(), \"punc\") || is_token(peek(), \"operator\")) && [\",\", \"}\", \"=\"].includes(peek().value)) {\n                    used_parameters.add_parameter(S.token);\n                    var start = prev();\n                    var value = as_symbol(symbol_type);\n                    if (is_expand) {\n                        elements.push(new AST_Expansion({\n                            start: expand_token,\n                            expression: value,\n                            end: value.end,\n                        }));\n                    } else {\n                        elements.push(new AST_ObjectKeyVal({\n                            start: start,\n                            key: value.name,\n                            value: value,\n                            end: value.end,\n                        }));\n                    }\n                } else if (is(\"punc\", \"}\")) {\n                    continue; // Allow trailing hole\n                } else {\n                    var property_token = S.token;\n                    var property = as_property_name();\n                    if (property === null) {\n                        unexpected(prev());\n                    } else if (prev().type === \"name\" && !is(\"punc\", \":\")) {\n                        elements.push(new AST_ObjectKeyVal({\n                            start: prev(),\n                            key: property,\n                            value: new symbol_type({\n                                start: prev(),\n                                name: property,\n                                end: prev()\n                            }),\n                            end: prev()\n                        }));\n                    } else {\n                        expect(\":\");\n                        elements.push(new AST_ObjectKeyVal({\n                            start: property_token,\n                            quote: property_token.quote,\n                            key: property,\n                            value: binding_element(used_parameters, symbol_type),\n                            end: prev()\n                        }));\n                    }\n                }\n                if (is_expand) {\n                    if (!is(\"punc\", \"}\")) {\n                        croak(\"Rest element must be last element\");\n                    }\n                } else if (is(\"operator\", \"=\")) {\n                    used_parameters.mark_default_assignment(S.token);\n                    next();\n                    elements[elements.length - 1].value = new AST_DefaultAssign({\n                        start: elements[elements.length - 1].value.start,\n                        left: elements[elements.length - 1].value,\n                        operator: \"=\",\n                        right: expression(false),\n                        end: S.token\n                    });\n                }\n            }\n            expect(\"}\");\n            used_parameters.check_strict();\n            return new AST_Destructuring({\n                start: first_token,\n                names: elements,\n                is_array: false,\n                end: prev()\n            });\n        } else if (is(\"name\")) {\n            used_parameters.add_parameter(S.token);\n            return as_symbol(symbol_type);\n        } else {\n            croak(\"Invalid function parameter\");\n        }\n    }\n\n    function params_or_seq_(allow_arrows, maybe_sequence) {\n        var spread_token;\n        var invalid_sequence;\n        var trailing_comma;\n        var a = [];\n        expect(\"(\");\n        while (!is(\"punc\", \")\")) {\n            if (spread_token) unexpected(spread_token);\n            if (is(\"expand\", \"...\")) {\n                spread_token = S.token;\n                if (maybe_sequence) invalid_sequence = S.token;\n                next();\n                a.push(new AST_Expansion({\n                    start: prev(),\n                    expression: expression(),\n                    end: S.token,\n                }));\n            } else {\n                a.push(expression());\n            }\n            if (!is(\"punc\", \")\")) {\n                expect(\",\");\n                if (is(\"punc\", \")\")) {\n                    trailing_comma = prev();\n                    if (maybe_sequence) invalid_sequence = trailing_comma;\n                }\n            }\n        }\n        expect(\")\");\n        if (allow_arrows && is(\"arrow\", \"=>\")) {\n            if (spread_token && trailing_comma) unexpected(trailing_comma);\n        } else if (invalid_sequence) {\n            unexpected(invalid_sequence);\n        }\n        return a;\n    }\n\n    function _function_body(block, generator, is_async, name, args) {\n        var loop = S.in_loop;\n        var labels = S.labels;\n        var current_generator = S.in_generator;\n        var current_async = S.in_async;\n        ++S.in_function;\n        if (generator)\n            S.in_generator = S.in_function;\n        if (is_async)\n            S.in_async = S.in_function;\n        if (args) parameters(args);\n        if (block)\n            S.in_directives = true;\n        S.in_loop = 0;\n        S.labels = [];\n        if (block) {\n            S.input.push_directives_stack();\n            var a = block_();\n            if (name) _verify_symbol(name);\n            if (args) args.forEach(_verify_symbol);\n            S.input.pop_directives_stack();\n        } else {\n            var a = [new AST_Return({\n                start: S.token,\n                value: expression(false),\n                end: S.token\n            })];\n        }\n        --S.in_function;\n        S.in_loop = loop;\n        S.labels = labels;\n        S.in_generator = current_generator;\n        S.in_async = current_async;\n        return a;\n    }\n\n    function _await_expression() {\n        // Previous token must be \"await\" and not be interpreted as an identifier\n        if (!is_in_async()) {\n            croak(\"Unexpected await expression outside async function\",\n                S.prev.line, S.prev.col, S.prev.pos);\n        }\n        // the await expression is parsed as a unary expression in Babel\n        return new AST_Await({\n            start: prev(),\n            end: S.token,\n            expression : maybe_unary(true),\n        });\n    }\n\n    function _yield_expression() {\n        // Previous token must be keyword yield and not be interpret as an identifier\n        if (!is_in_generator()) {\n            croak(\"Unexpected yield expression outside generator function\",\n                S.prev.line, S.prev.col, S.prev.pos);\n        }\n        var start = S.token;\n        var star = false;\n        var has_expression = true;\n\n        // Attempt to get expression or star (and then the mandatory expression)\n        // behind yield on the same line.\n        //\n        // If nothing follows on the same line of the yieldExpression,\n        // it should default to the value `undefined` for yield to return.\n        // In that case, the `undefined` stored as `null` in ast.\n        //\n        // Note 1: It isn't allowed for yield* to close without an expression\n        // Note 2: If there is a nlb between yield and star, it is interpret as\n        //         yield <explicit undefined> <inserted automatic semicolon> *\n        if (can_insert_semicolon() ||\n            (is(\"punc\") && PUNC_AFTER_EXPRESSION.has(S.token.value))) {\n            has_expression = false;\n\n        } else if (is(\"operator\", \"*\")) {\n            star = true;\n            next();\n        }\n\n        return new AST_Yield({\n            start      : start,\n            is_star    : star,\n            expression : has_expression ? expression() : null,\n            end        : prev()\n        });\n    }\n\n    function if_() {\n        var cond = parenthesised(), body = statement(false, false, true), belse = null;\n        if (is(\"keyword\", \"else\")) {\n            next();\n            belse = statement(false, false, true);\n        }\n        return new AST_If({\n            condition   : cond,\n            body        : body,\n            alternative : belse\n        });\n    }\n\n    function block_() {\n        expect(\"{\");\n        var a = [];\n        while (!is(\"punc\", \"}\")) {\n            if (is(\"eof\")) unexpected();\n            a.push(statement());\n        }\n        next();\n        return a;\n    }\n\n    function switch_body_() {\n        expect(\"{\");\n        var a = [], cur = null, branch = null, tmp;\n        while (!is(\"punc\", \"}\")) {\n            if (is(\"eof\")) unexpected();\n            if (is(\"keyword\", \"case\")) {\n                if (branch) branch.end = prev();\n                cur = [];\n                branch = new AST_Case({\n                    start      : (tmp = S.token, next(), tmp),\n                    expression : expression(true),\n                    body       : cur\n                });\n                a.push(branch);\n                expect(\":\");\n            } else if (is(\"keyword\", \"default\")) {\n                if (branch) branch.end = prev();\n                cur = [];\n                branch = new AST_Default({\n                    start : (tmp = S.token, next(), expect(\":\"), tmp),\n                    body  : cur\n                });\n                a.push(branch);\n            } else {\n                if (!cur) unexpected();\n                cur.push(statement());\n            }\n        }\n        if (branch) branch.end = prev();\n        next();\n        return a;\n    }\n\n    function try_() {\n        var body = block_(), bcatch = null, bfinally = null;\n        if (is(\"keyword\", \"catch\")) {\n            var start = S.token;\n            next();\n            if (is(\"punc\", \"{\")) {\n                var name = null;\n            } else {\n                expect(\"(\");\n                var name = parameter(undefined, AST_SymbolCatch);\n                expect(\")\");\n            }\n            bcatch = new AST_Catch({\n                start   : start,\n                argname : name,\n                body    : block_(),\n                end     : prev()\n            });\n        }\n        if (is(\"keyword\", \"finally\")) {\n            var start = S.token;\n            next();\n            bfinally = new AST_Finally({\n                start : start,\n                body  : block_(),\n                end   : prev()\n            });\n        }\n        if (!bcatch && !bfinally)\n            croak(\"Missing catch/finally blocks\");\n        return new AST_Try({\n            body     : body,\n            bcatch   : bcatch,\n            bfinally : bfinally\n        });\n    }\n\n    function vardefs(no_in, kind) {\n        var a = [];\n        var def;\n        for (;;) {\n            var sym_type =\n                kind === \"var\" ? AST_SymbolVar :\n                kind === \"const\" ? AST_SymbolConst :\n                kind === \"let\" ? AST_SymbolLet : null;\n            if (is(\"punc\", \"{\") || is(\"punc\", \"[\")) {\n                def = new AST_VarDef({\n                    start: S.token,\n                    name: binding_element(undefined ,sym_type),\n                    value: is(\"operator\", \"=\") ? (expect_token(\"operator\", \"=\"), expression(false, no_in)) : null,\n                    end: prev()\n                });\n            } else {\n                def = new AST_VarDef({\n                    start : S.token,\n                    name  : as_symbol(sym_type),\n                    value : is(\"operator\", \"=\")\n                        ? (next(), expression(false, no_in))\n                        : !no_in && kind === \"const\"\n                            ? croak(\"Missing initializer in const declaration\") : null,\n                    end   : prev()\n                });\n                if (def.name.name == \"import\") croak(\"Unexpected token: import\");\n            }\n            a.push(def);\n            if (!is(\"punc\", \",\"))\n                break;\n            next();\n        }\n        return a;\n    }\n\n    var var_ = function(no_in) {\n        return new AST_Var({\n            start       : prev(),\n            definitions : vardefs(no_in, \"var\"),\n            end         : prev()\n        });\n    };\n\n    var let_ = function(no_in) {\n        return new AST_Let({\n            start       : prev(),\n            definitions : vardefs(no_in, \"let\"),\n            end         : prev()\n        });\n    };\n\n    var const_ = function(no_in) {\n        return new AST_Const({\n            start       : prev(),\n            definitions : vardefs(no_in, \"const\"),\n            end         : prev()\n        });\n    };\n\n    var new_ = function(allow_calls) {\n        var start = S.token;\n        expect_token(\"operator\", \"new\");\n        if (is(\"punc\", \".\")) {\n            next();\n            expect_token(\"name\", \"target\");\n            return subscripts(new AST_NewTarget({\n                start : start,\n                end   : prev()\n            }), allow_calls);\n        }\n        var newexp = expr_atom(false), args;\n        if (is(\"punc\", \"(\")) {\n            next();\n            args = expr_list(\")\", true);\n        } else {\n            args = [];\n        }\n        var call = new AST_New({\n            start      : start,\n            expression : newexp,\n            args       : args,\n            end        : prev()\n        });\n        annotate(call);\n        return subscripts(call, allow_calls);\n    };\n\n    function as_atom_node() {\n        var tok = S.token, ret;\n        switch (tok.type) {\n          case \"name\":\n            ret = _make_symbol(AST_SymbolRef);\n            break;\n          case \"num\":\n            ret = new AST_Number({ start: tok, end: tok, value: tok.value });\n            break;\n          case \"big_int\":\n            ret = new AST_BigInt({ start: tok, end: tok, value: tok.value });\n            break;\n          case \"string\":\n            ret = new AST_String({\n                start : tok,\n                end   : tok,\n                value : tok.value,\n                quote : tok.quote\n            });\n            break;\n          case \"regexp\":\n            ret = new AST_RegExp({ start: tok, end: tok, value: tok.value });\n            break;\n          case \"atom\":\n            switch (tok.value) {\n              case \"false\":\n                ret = new AST_False({ start: tok, end: tok });\n                break;\n              case \"true\":\n                ret = new AST_True({ start: tok, end: tok });\n                break;\n              case \"null\":\n                ret = new AST_Null({ start: tok, end: tok });\n                break;\n            }\n            break;\n        }\n        next();\n        return ret;\n    }\n\n    function to_fun_args(ex, default_seen_above) {\n        var insert_default = function(ex, default_value) {\n            if (default_value) {\n                return new AST_DefaultAssign({\n                    start: ex.start,\n                    left: ex,\n                    operator: \"=\",\n                    right: default_value,\n                    end: default_value.end\n                });\n            }\n            return ex;\n        };\n        if (ex instanceof AST_Object) {\n            return insert_default(new AST_Destructuring({\n                start: ex.start,\n                end: ex.end,\n                is_array: false,\n                names: ex.properties.map(prop => to_fun_args(prop))\n            }), default_seen_above);\n        } else if (ex instanceof AST_ObjectKeyVal) {\n            ex.value = to_fun_args(ex.value);\n            return insert_default(ex, default_seen_above);\n        } else if (ex instanceof AST_Hole) {\n            return ex;\n        } else if (ex instanceof AST_Destructuring) {\n            ex.names = ex.names.map(name => to_fun_args(name));\n            return insert_default(ex, default_seen_above);\n        } else if (ex instanceof AST_SymbolRef) {\n            return insert_default(new AST_SymbolFunarg({\n                name: ex.name,\n                start: ex.start,\n                end: ex.end\n            }), default_seen_above);\n        } else if (ex instanceof AST_Expansion) {\n            ex.expression = to_fun_args(ex.expression);\n            return insert_default(ex, default_seen_above);\n        } else if (ex instanceof AST_Array) {\n            return insert_default(new AST_Destructuring({\n                start: ex.start,\n                end: ex.end,\n                is_array: true,\n                names: ex.elements.map(elm => to_fun_args(elm))\n            }), default_seen_above);\n        } else if (ex instanceof AST_Assign) {\n            return insert_default(to_fun_args(ex.left, ex.right), default_seen_above);\n        } else if (ex instanceof AST_DefaultAssign) {\n            ex.left = to_fun_args(ex.left);\n            return ex;\n        } else {\n            croak(\"Invalid function parameter\", ex.start.line, ex.start.col);\n        }\n    }\n\n    var expr_atom = function(allow_calls, allow_arrows) {\n        if (is(\"operator\", \"new\")) {\n            return new_(allow_calls);\n        }\n        if (is(\"operator\", \"import\")) {\n            return import_meta();\n        }\n        var start = S.token;\n        var peeked;\n        var async = is(\"name\", \"async\")\n            && (peeked = peek()).value != \"[\"\n            && peeked.type != \"arrow\"\n            && as_atom_node();\n        if (is(\"punc\")) {\n            switch (S.token.value) {\n              case \"(\":\n                if (async && !allow_calls) break;\n                var exprs = params_or_seq_(allow_arrows, !async);\n                if (allow_arrows && is(\"arrow\", \"=>\")) {\n                    return arrow_function(start, exprs.map(e => to_fun_args(e)), !!async);\n                }\n                var ex = async ? new AST_Call({\n                    expression: async,\n                    args: exprs\n                }) : exprs.length == 1 ? exprs[0] : new AST_Sequence({\n                    expressions: exprs\n                });\n                if (ex.start) {\n                    const outer_comments_before = start.comments_before.length;\n                    outer_comments_before_counts.set(start, outer_comments_before);\n                    ex.start.comments_before.unshift(...start.comments_before);\n                    start.comments_before = ex.start.comments_before;\n                    if (outer_comments_before == 0 && start.comments_before.length > 0) {\n                        var comment = start.comments_before[0];\n                        if (!comment.nlb) {\n                            comment.nlb = start.nlb;\n                            start.nlb = false;\n                        }\n                    }\n                    start.comments_after = ex.start.comments_after;\n                }\n                ex.start = start;\n                var end = prev();\n                if (ex.end) {\n                    end.comments_before = ex.end.comments_before;\n                    ex.end.comments_after.push(...end.comments_after);\n                    end.comments_after = ex.end.comments_after;\n                }\n                ex.end = end;\n                if (ex instanceof AST_Call) annotate(ex);\n                return subscripts(ex, allow_calls);\n              case \"[\":\n                return subscripts(array_(), allow_calls);\n              case \"{\":\n                return subscripts(object_or_destructuring_(), allow_calls);\n            }\n            if (!async) unexpected();\n        }\n        if (allow_arrows && is(\"name\") && is_token(peek(), \"arrow\")) {\n            var param = new AST_SymbolFunarg({\n                name: S.token.value,\n                start: start,\n                end: start,\n            });\n            next();\n            return arrow_function(start, [param], !!async);\n        }\n        if (is(\"keyword\", \"function\")) {\n            next();\n            var func = function_(AST_Function, false, !!async);\n            func.start = start;\n            func.end = prev();\n            return subscripts(func, allow_calls);\n        }\n        if (async) return subscripts(async, allow_calls);\n        if (is(\"keyword\", \"class\")) {\n            next();\n            var cls = class_(AST_ClassExpression);\n            cls.start = start;\n            cls.end = prev();\n            return subscripts(cls, allow_calls);\n        }\n        if (is(\"template_head\")) {\n            return subscripts(template_string(false), allow_calls);\n        }\n        if (ATOMIC_START_TOKEN.has(S.token.type)) {\n            return subscripts(as_atom_node(), allow_calls);\n        }\n        unexpected();\n    };\n\n    function template_string() {\n        var segments = [], start = S.token;\n\n        segments.push(new AST_TemplateSegment({\n            start: S.token,\n            raw: S.token.raw,\n            value: S.token.value,\n            end: S.token\n        }));\n        while (!S.token.end) {\n            next();\n            handle_regexp();\n            segments.push(expression(true));\n\n            if (!is_token(\"template_substitution\")) {\n                unexpected();\n            }\n\n            segments.push(new AST_TemplateSegment({\n                start: S.token,\n                raw: S.token.raw,\n                value: S.token.value,\n                end: S.token\n            }));\n        }\n        next();\n\n        return new AST_TemplateString({\n            start: start,\n            segments: segments,\n            end: S.token\n        });\n    }\n\n    function expr_list(closing, allow_trailing_comma, allow_empty) {\n        var first = true, a = [];\n        while (!is(\"punc\", closing)) {\n            if (first) first = false; else expect(\",\");\n            if (allow_trailing_comma && is(\"punc\", closing)) break;\n            if (is(\"punc\", \",\") && allow_empty) {\n                a.push(new AST_Hole({ start: S.token, end: S.token }));\n            } else if (is(\"expand\", \"...\")) {\n                next();\n                a.push(new AST_Expansion({start: prev(), expression: expression(),end: S.token}));\n            } else {\n                a.push(expression(false));\n            }\n        }\n        next();\n        return a;\n    }\n\n    var array_ = embed_tokens(function() {\n        expect(\"[\");\n        return new AST_Array({\n            elements: expr_list(\"]\", !options.strict, true)\n        });\n    });\n\n    var create_accessor = embed_tokens((is_generator, is_async) => {\n        return function_(AST_Accessor, is_generator, is_async);\n    });\n\n    var object_or_destructuring_ = embed_tokens(function object_or_destructuring_() {\n        var start = S.token, first = true, a = [];\n        expect(\"{\");\n        while (!is(\"punc\", \"}\")) {\n            if (first) first = false; else expect(\",\");\n            if (!options.strict && is(\"punc\", \"}\"))\n                // allow trailing comma\n                break;\n\n            start = S.token;\n            if (start.type == \"expand\") {\n                next();\n                a.push(new AST_Expansion({\n                    start: start,\n                    expression: expression(false),\n                    end: prev(),\n                }));\n                continue;\n            }\n\n            var name = as_property_name();\n            var value;\n\n            // Check property and fetch value\n            if (!is(\"punc\", \":\")) {\n                var concise = concise_method_or_getset(name, start);\n                if (concise) {\n                    a.push(concise);\n                    continue;\n                }\n\n                value = new AST_SymbolRef({\n                    start: prev(),\n                    name: name,\n                    end: prev()\n                });\n            } else if (name === null) {\n                unexpected(prev());\n            } else {\n                next(); // `:` - see first condition\n                value = expression(false);\n            }\n\n            // Check for default value and alter value accordingly if necessary\n            if (is(\"operator\", \"=\")) {\n                next();\n                value = new AST_Assign({\n                    start: start,\n                    left: value,\n                    operator: \"=\",\n                    right: expression(false),\n                    end: prev()\n                });\n            }\n\n            // Create property\n            a.push(new AST_ObjectKeyVal({\n                start: start,\n                quote: start.quote,\n                key: name instanceof AST_Node ? name : \"\" + name,\n                value: value,\n                end: prev()\n            }));\n        }\n        next();\n        return new AST_Object({ properties: a });\n    });\n\n    function class_(KindOfClass) {\n        var start, method, class_name, extends_, a = [];\n\n        S.input.push_directives_stack(); // Push directive stack, but not scope stack\n        S.input.add_directive(\"use strict\");\n\n        if (S.token.type == \"name\" && S.token.value != \"extends\") {\n            class_name = as_symbol(KindOfClass === AST_DefClass ? AST_SymbolDefClass : AST_SymbolClass);\n        }\n\n        if (KindOfClass === AST_DefClass && !class_name) {\n            unexpected();\n        }\n\n        if (S.token.value == \"extends\") {\n            next();\n            extends_ = expression(true);\n        }\n\n        expect(\"{\");\n\n        while (is(\"punc\", \";\")) { next(); }  // Leading semicolons are okay in class bodies.\n        while (!is(\"punc\", \"}\")) {\n            start = S.token;\n            method = concise_method_or_getset(as_property_name(), start, true);\n            if (!method) { unexpected(); }\n            a.push(method);\n            while (is(\"punc\", \";\")) { next(); }\n        }\n\n        S.input.pop_directives_stack();\n\n        next();\n\n        return new KindOfClass({\n            start: start,\n            name: class_name,\n            extends: extends_,\n            properties: a,\n            end: prev(),\n        });\n    }\n\n    function concise_method_or_getset(name, start, is_class) {\n        var get_method_name_ast = function(name, start) {\n            if (typeof name === \"string\" || typeof name === \"number\") {\n                return new AST_SymbolMethod({\n                    start,\n                    name: \"\" + name,\n                    end: prev()\n                });\n            } else if (name === null) {\n                unexpected();\n            }\n            return name;\n        };\n        const get_class_property_key_ast = (name) => {\n            if (typeof name === \"string\" || typeof name === \"number\") {\n                return new AST_SymbolClassProperty({\n                    start: property_token,\n                    end: property_token,\n                    name: \"\" + name\n                });\n            } else if (name === null) {\n                unexpected();\n            }\n            return name;\n        };\n        var is_async = false;\n        var is_static = false;\n        var is_generator = false;\n        var property_token = start;\n        if (is_class && name === \"static\" && !is(\"punc\", \"(\")) {\n            is_static = true;\n            property_token = S.token;\n            name = as_property_name();\n        }\n        if (name === \"async\" && !is(\"punc\", \"(\") && !is(\"punc\", \",\") && !is(\"punc\", \"}\") && !is(\"operator\", \"=\")) {\n            is_async = true;\n            property_token = S.token;\n            name = as_property_name();\n        }\n        if (name === null) {\n            is_generator = true;\n            property_token = S.token;\n            name = as_property_name();\n            if (name === null) {\n                unexpected();\n            }\n        }\n        if (is(\"punc\", \"(\")) {\n            name = get_method_name_ast(name, start);\n            var node = new AST_ConciseMethod({\n                start       : start,\n                static      : is_static,\n                is_generator: is_generator,\n                async       : is_async,\n                key         : name,\n                quote       : name instanceof AST_SymbolMethod ?\n                              property_token.quote : undefined,\n                value       : create_accessor(is_generator, is_async),\n                end         : prev()\n            });\n            return node;\n        }\n        const setter_token = S.token;\n        if (name == \"get\") {\n            if (!is(\"punc\") || is(\"punc\", \"[\")) {\n                name = get_method_name_ast(as_property_name(), start);\n                return new AST_ObjectGetter({\n                    start : start,\n                    static: is_static,\n                    key   : name,\n                    quote : name instanceof AST_SymbolMethod ?\n                            setter_token.quote : undefined,\n                    value : create_accessor(),\n                    end   : prev()\n                });\n            }\n        } else if (name == \"set\") {\n            if (!is(\"punc\") || is(\"punc\", \"[\")) {\n                name = get_method_name_ast(as_property_name(), start);\n                return new AST_ObjectSetter({\n                    start : start,\n                    static: is_static,\n                    key   : name,\n                    quote : name instanceof AST_SymbolMethod ?\n                            setter_token.quote : undefined,\n                    value : create_accessor(),\n                    end   : prev()\n                });\n            }\n        }\n        if (is_class) {\n            const key = get_class_property_key_ast(name, property_token);\n            const quote = key instanceof AST_SymbolClassProperty\n                ? property_token.quote\n                : undefined;\n            if (is(\"operator\", \"=\")) {\n                next();\n                return new AST_ClassProperty({\n                    start,\n                    static: is_static,\n                    quote,\n                    key,\n                    value: expression(false),\n                    end: prev()\n                });\n            } else if (is(\"name\") || is(\"punc\", \";\") || is(\"punc\", \"}\")) {\n                return new AST_ClassProperty({\n                    start,\n                    static: is_static,\n                    quote,\n                    key,\n                    end: prev()\n                });\n            }\n        }\n    }\n\n    function import_() {\n        var start = prev();\n\n        var imported_name;\n        var imported_names;\n        if (is(\"name\")) {\n            imported_name = as_symbol(AST_SymbolImport);\n        }\n\n        if (is(\"punc\", \",\")) {\n            next();\n        }\n\n        imported_names = map_names(true);\n\n        if (imported_names || imported_name) {\n            expect_token(\"name\", \"from\");\n        }\n        var mod_str = S.token;\n        if (mod_str.type !== \"string\") {\n            unexpected();\n        }\n        next();\n        return new AST_Import({\n            start: start,\n            imported_name: imported_name,\n            imported_names: imported_names,\n            module_name: new AST_String({\n                start: mod_str,\n                value: mod_str.value,\n                quote: mod_str.quote,\n                end: mod_str,\n            }),\n            end: S.token,\n        });\n    }\n\n    function import_meta() {\n        var start = S.token;\n        expect_token(\"operator\", \"import\");\n        expect_token(\"punc\", \".\");\n        expect_token(\"name\", \"meta\");\n        return subscripts(new AST_ImportMeta({\n            start: start,\n            end: prev()\n        }), false);\n    }\n\n    function map_name(is_import) {\n        function make_symbol(type) {\n            return new type({\n                name: as_property_name(),\n                start: prev(),\n                end: prev()\n            });\n        }\n\n        var foreign_type = is_import ? AST_SymbolImportForeign : AST_SymbolExportForeign;\n        var type = is_import ? AST_SymbolImport : AST_SymbolExport;\n        var start = S.token;\n        var foreign_name;\n        var name;\n\n        if (is_import) {\n            foreign_name = make_symbol(foreign_type);\n        } else {\n            name = make_symbol(type);\n        }\n        if (is(\"name\", \"as\")) {\n            next();  // The \"as\" word\n            if (is_import) {\n                name = make_symbol(type);\n            } else {\n                foreign_name = make_symbol(foreign_type);\n            }\n        } else if (is_import) {\n            name = new type(foreign_name);\n        } else {\n            foreign_name = new foreign_type(name);\n        }\n\n        return new AST_NameMapping({\n            start: start,\n            foreign_name: foreign_name,\n            name: name,\n            end: prev(),\n        });\n    }\n\n    function map_nameAsterisk(is_import, name) {\n        var foreign_type = is_import ? AST_SymbolImportForeign : AST_SymbolExportForeign;\n        var type = is_import ? AST_SymbolImport : AST_SymbolExport;\n        var start = S.token;\n        var foreign_name;\n        var end = prev();\n\n        name = name || new type({\n            name: \"*\",\n            start: start,\n            end: end,\n        });\n\n        foreign_name = new foreign_type({\n            name: \"*\",\n            start: start,\n            end: end,\n        });\n\n        return new AST_NameMapping({\n            start: start,\n            foreign_name: foreign_name,\n            name: name,\n            end: end,\n        });\n    }\n\n    function map_names(is_import) {\n        var names;\n        if (is(\"punc\", \"{\")) {\n            next();\n            names = [];\n            while (!is(\"punc\", \"}\")) {\n                names.push(map_name(is_import));\n                if (is(\"punc\", \",\")) {\n                    next();\n                }\n            }\n            next();\n        } else if (is(\"operator\", \"*\")) {\n            var name;\n            next();\n            if (is_import && is(\"name\", \"as\")) {\n                next();  // The \"as\" word\n                name = as_symbol(is_import ? AST_SymbolImport : AST_SymbolExportForeign);\n            }\n            names = [map_nameAsterisk(is_import, name)];\n        }\n        return names;\n    }\n\n    function export_() {\n        var start = S.token;\n        var is_default;\n        var exported_names;\n\n        if (is(\"keyword\", \"default\")) {\n            is_default = true;\n            next();\n        } else if (exported_names = map_names(false)) {\n            if (is(\"name\", \"from\")) {\n                next();\n\n                var mod_str = S.token;\n                if (mod_str.type !== \"string\") {\n                    unexpected();\n                }\n                next();\n\n                return new AST_Export({\n                    start: start,\n                    is_default: is_default,\n                    exported_names: exported_names,\n                    module_name: new AST_String({\n                        start: mod_str,\n                        value: mod_str.value,\n                        quote: mod_str.quote,\n                        end: mod_str,\n                    }),\n                    end: prev(),\n                });\n            } else {\n                return new AST_Export({\n                    start: start,\n                    is_default: is_default,\n                    exported_names: exported_names,\n                    end: prev(),\n                });\n            }\n        }\n\n        var node;\n        var exported_value;\n        var exported_definition;\n        if (is(\"punc\", \"{\")\n            || is_default\n                && (is(\"keyword\", \"class\") || is(\"keyword\", \"function\"))\n                && is_token(peek(), \"punc\")) {\n            exported_value = expression(false);\n            semicolon();\n        } else if ((node = statement(is_default)) instanceof AST_Definitions && is_default) {\n            unexpected(node.start);\n        } else if (node instanceof AST_Definitions || node instanceof AST_Lambda || node instanceof AST_DefClass) {\n            exported_definition = node;\n        } else if (node instanceof AST_SimpleStatement) {\n            exported_value = node.body;\n        } else {\n            unexpected(node.start);\n        }\n\n        return new AST_Export({\n            start: start,\n            is_default: is_default,\n            exported_value: exported_value,\n            exported_definition: exported_definition,\n            end: prev(),\n        });\n    }\n\n    function as_property_name() {\n        var tmp = S.token;\n        switch (tmp.type) {\n          case \"punc\":\n            if (tmp.value === \"[\") {\n                next();\n                var ex = expression(false);\n                expect(\"]\");\n                return ex;\n            } else unexpected(tmp);\n          case \"operator\":\n            if (tmp.value === \"*\") {\n                next();\n                return null;\n            }\n            if (![\"delete\", \"in\", \"instanceof\", \"new\", \"typeof\", \"void\"].includes(tmp.value)) {\n                unexpected(tmp);\n            }\n            /* falls through */\n          case \"name\":\n          case \"string\":\n          case \"num\":\n          case \"big_int\":\n          case \"keyword\":\n          case \"atom\":\n            next();\n            return tmp.value;\n          default:\n            unexpected(tmp);\n        }\n    }\n\n    function as_name() {\n        var tmp = S.token;\n        if (tmp.type != \"name\") unexpected();\n        next();\n        return tmp.value;\n    }\n\n    function _make_symbol(type) {\n        var name = S.token.value;\n        return new (name == \"this\" ? AST_This :\n                    name == \"super\" ? AST_Super :\n                    type)({\n            name  : String(name),\n            start : S.token,\n            end   : S.token\n        });\n    }\n\n    function _verify_symbol(sym) {\n        var name = sym.name;\n        if (is_in_generator() && name == \"yield\") {\n            token_error(sym.start, \"Yield cannot be used as identifier inside generators\");\n        }\n        if (S.input.has_directive(\"use strict\")) {\n            if (name == \"yield\") {\n                token_error(sym.start, \"Unexpected yield identifier inside strict mode\");\n            }\n            if (sym instanceof AST_SymbolDeclaration && (name == \"arguments\" || name == \"eval\")) {\n                token_error(sym.start, \"Unexpected \" + name + \" in strict mode\");\n            }\n        }\n    }\n\n    function as_symbol(type, noerror) {\n        if (!is(\"name\")) {\n            if (!noerror) croak(\"Name expected\");\n            return null;\n        }\n        var sym = _make_symbol(type);\n        _verify_symbol(sym);\n        next();\n        return sym;\n    }\n\n    // Annotate AST_Call, AST_Lambda or AST_New with the special comments\n    function annotate(node) {\n        var start = node.start;\n        var comments = start.comments_before;\n        const comments_outside_parens = outer_comments_before_counts.get(start);\n        var i = comments_outside_parens != null ? comments_outside_parens : comments.length;\n        while (--i >= 0) {\n            var comment = comments[i];\n            if (/[@#]__/.test(comment.value)) {\n                if (/[@#]__PURE__/.test(comment.value)) {\n                    set_annotation(node, _PURE);\n                    break;\n                }\n                if (/[@#]__INLINE__/.test(comment.value)) {\n                    set_annotation(node, _INLINE);\n                    break;\n                }\n                if (/[@#]__NOINLINE__/.test(comment.value)) {\n                    set_annotation(node, _NOINLINE);\n                    break;\n                }\n            }\n        }\n    }\n\n    var subscripts = function(expr, allow_calls, is_chain) {\n        var start = expr.start;\n        if (is(\"punc\", \".\")) {\n            next();\n            return subscripts(new AST_Dot({\n                start      : start,\n                expression : expr,\n                optional   : false,\n                property   : as_name(),\n                end        : prev()\n            }), allow_calls, is_chain);\n        }\n        if (is(\"punc\", \"[\")) {\n            next();\n            var prop = expression(true);\n            expect(\"]\");\n            return subscripts(new AST_Sub({\n                start      : start,\n                expression : expr,\n                optional   : false,\n                property   : prop,\n                end        : prev()\n            }), allow_calls, is_chain);\n        }\n        if (allow_calls && is(\"punc\", \"(\")) {\n            next();\n            var call = new AST_Call({\n                start      : start,\n                expression : expr,\n                optional   : false,\n                args       : call_args(),\n                end        : prev()\n            });\n            annotate(call);\n            return subscripts(call, true, is_chain);\n        }\n\n        if (is(\"punc\", \"?.\")) {\n            next();\n\n            let chain_contents;\n\n            if (allow_calls && is(\"punc\", \"(\")) {\n                next();\n\n                const call = new AST_Call({\n                    start,\n                    optional: true,\n                    expression: expr,\n                    args: call_args(),\n                    end: prev()\n                });\n                annotate(call);\n\n                chain_contents = subscripts(call, true, true);\n            } else if (is(\"name\")) {\n                chain_contents = subscripts(new AST_Dot({\n                    start,\n                    expression: expr,\n                    optional: true,\n                    property: as_name(),\n                    end: prev()\n                }), allow_calls, true);\n            } else if (is(\"punc\", \"[\")) {\n                next();\n                const property = expression(true);\n                expect(\"]\");\n                chain_contents = subscripts(new AST_Sub({\n                    start,\n                    expression: expr,\n                    optional: true,\n                    property,\n                    end: prev()\n                }), allow_calls, true);\n            }\n\n            if (!chain_contents) unexpected();\n\n            if (chain_contents instanceof AST_Chain) return chain_contents;\n\n            return new AST_Chain({\n                start,\n                expression: chain_contents,\n                end: prev()\n            });\n        }\n\n        if (is(\"template_head\")) {\n            if (is_chain) {\n                // a?.b`c` is a syntax error\n                unexpected();\n            }\n\n            return subscripts(new AST_PrefixedTemplateString({\n                start: start,\n                prefix: expr,\n                template_string: template_string(true),\n                end: prev()\n            }), allow_calls);\n        }\n\n        return expr;\n    };\n\n    function call_args() {\n        var args = [];\n        while (!is(\"punc\", \")\")) {\n            if (is(\"expand\", \"...\")) {\n                next();\n                args.push(new AST_Expansion({\n                    start: prev(),\n                    expression: expression(false),\n                    end: prev()\n                }));\n            } else {\n                args.push(expression(false));\n            }\n            if (!is(\"punc\", \")\")) {\n                expect(\",\");\n            }\n        }\n        next();\n        return args;\n    }\n\n    var maybe_unary = function(allow_calls, allow_arrows) {\n        var start = S.token;\n        if (start.type == \"name\" && start.value == \"await\") {\n            if (is_in_async()) {\n                next();\n                return _await_expression();\n            } else if (S.input.has_directive(\"use strict\")) {\n                token_error(S.token, \"Unexpected await identifier inside strict mode\");\n            }\n        }\n        if (is(\"operator\") && UNARY_PREFIX.has(start.value)) {\n            next();\n            handle_regexp();\n            var ex = make_unary(AST_UnaryPrefix, start, maybe_unary(allow_calls));\n            ex.start = start;\n            ex.end = prev();\n            return ex;\n        }\n        var val = expr_atom(allow_calls, allow_arrows);\n        while (is(\"operator\") && UNARY_POSTFIX.has(S.token.value) && !has_newline_before(S.token)) {\n            if (val instanceof AST_Arrow) unexpected();\n            val = make_unary(AST_UnaryPostfix, S.token, val);\n            val.start = start;\n            val.end = S.token;\n            next();\n        }\n        return val;\n    };\n\n    function make_unary(ctor, token, expr) {\n        var op = token.value;\n        switch (op) {\n          case \"++\":\n          case \"--\":\n            if (!is_assignable(expr))\n                croak(\"Invalid use of \" + op + \" operator\", token.line, token.col, token.pos);\n            break;\n          case \"delete\":\n            if (expr instanceof AST_SymbolRef && S.input.has_directive(\"use strict\"))\n                croak(\"Calling delete on expression not allowed in strict mode\", expr.start.line, expr.start.col, expr.start.pos);\n            break;\n        }\n        return new ctor({ operator: op, expression: expr });\n    }\n\n    var expr_op = function(left, min_prec, no_in) {\n        var op = is(\"operator\") ? S.token.value : null;\n        if (op == \"in\" && no_in) op = null;\n        if (op == \"**\" && left instanceof AST_UnaryPrefix\n            /* unary token in front not allowed - parenthesis required */\n            && !is_token(left.start, \"punc\", \"(\")\n            && left.operator !== \"--\" && left.operator !== \"++\")\n                unexpected(left.start);\n        var prec = op != null ? PRECEDENCE[op] : null;\n        if (prec != null && (prec > min_prec || (op === \"**\" && min_prec === prec))) {\n            next();\n            var right = expr_op(maybe_unary(true), prec, no_in);\n            return expr_op(new AST_Binary({\n                start    : left.start,\n                left     : left,\n                operator : op,\n                right    : right,\n                end      : right.end\n            }), min_prec, no_in);\n        }\n        return left;\n    };\n\n    function expr_ops(no_in) {\n        return expr_op(maybe_unary(true, true), 0, no_in);\n    }\n\n    var maybe_conditional = function(no_in) {\n        var start = S.token;\n        var expr = expr_ops(no_in);\n        if (is(\"operator\", \"?\")) {\n            next();\n            var yes = expression(false);\n            expect(\":\");\n            return new AST_Conditional({\n                start       : start,\n                condition   : expr,\n                consequent  : yes,\n                alternative : expression(false, no_in),\n                end         : prev()\n            });\n        }\n        return expr;\n    };\n\n    function is_assignable(expr) {\n        return expr instanceof AST_PropAccess || expr instanceof AST_SymbolRef;\n    }\n\n    function to_destructuring(node) {\n        if (node instanceof AST_Object) {\n            node = new AST_Destructuring({\n                start: node.start,\n                names: node.properties.map(to_destructuring),\n                is_array: false,\n                end: node.end\n            });\n        } else if (node instanceof AST_Array) {\n            var names = [];\n\n            for (var i = 0; i < node.elements.length; i++) {\n                // Only allow expansion as last element\n                if (node.elements[i] instanceof AST_Expansion) {\n                    if (i + 1 !== node.elements.length) {\n                        token_error(node.elements[i].start, \"Spread must the be last element in destructuring array\");\n                    }\n                    node.elements[i].expression = to_destructuring(node.elements[i].expression);\n                }\n\n                names.push(to_destructuring(node.elements[i]));\n            }\n\n            node = new AST_Destructuring({\n                start: node.start,\n                names: names,\n                is_array: true,\n                end: node.end\n            });\n        } else if (node instanceof AST_ObjectProperty) {\n            node.value = to_destructuring(node.value);\n        } else if (node instanceof AST_Assign) {\n            node = new AST_DefaultAssign({\n                start: node.start,\n                left: node.left,\n                operator: \"=\",\n                right: node.right,\n                end: node.end\n            });\n        }\n        return node;\n    }\n\n    // In ES6, AssignmentExpression can also be an ArrowFunction\n    var maybe_assign = function(no_in) {\n        handle_regexp();\n        var start = S.token;\n\n        if (start.type == \"name\" && start.value == \"yield\") {\n            if (is_in_generator()) {\n                next();\n                return _yield_expression();\n            } else if (S.input.has_directive(\"use strict\")) {\n                token_error(S.token, \"Unexpected yield identifier inside strict mode\");\n            }\n        }\n\n        var left = maybe_conditional(no_in);\n        var val = S.token.value;\n\n        if (is(\"operator\") && ASSIGNMENT.has(val)) {\n            if (is_assignable(left) || (left = to_destructuring(left)) instanceof AST_Destructuring) {\n                next();\n                return new AST_Assign({\n                    start    : start,\n                    left     : left,\n                    operator : val,\n                    right    : maybe_assign(no_in),\n                    end      : prev()\n                });\n            }\n            croak(\"Invalid assignment\");\n        }\n        return left;\n    };\n\n    var expression = function(commas, no_in) {\n        var start = S.token;\n        var exprs = [];\n        while (true) {\n            exprs.push(maybe_assign(no_in));\n            if (!commas || !is(\"punc\", \",\")) break;\n            next();\n            commas = true;\n        }\n        return exprs.length == 1 ? exprs[0] : new AST_Sequence({\n            start       : start,\n            expressions : exprs,\n            end         : peek()\n        });\n    };\n\n    function in_loop(cont) {\n        ++S.in_loop;\n        var ret = cont();\n        --S.in_loop;\n        return ret;\n    }\n\n    if (options.expression) {\n        return expression(true);\n    }\n\n    return (function parse_toplevel() {\n        var start = S.token;\n        var body = [];\n        S.input.push_directives_stack();\n        if (options.module) S.input.add_directive(\"use strict\");\n        while (!is(\"eof\")) {\n            body.push(statement());\n        }\n        S.input.pop_directives_stack();\n        var end = prev();\n        var toplevel = options.toplevel;\n        if (toplevel) {\n            toplevel.body = toplevel.body.concat(body);\n            toplevel.end = end;\n        } else {\n            toplevel = new AST_Toplevel({ start: start, body: body, end: end });\n        }\n        return toplevel;\n    })();\n\n}\n\nexport {\n    get_full_char_code,\n    get_full_char,\n    is_identifier_char,\n    is_basic_identifier_string,\n    is_identifier_string,\n    is_surrogate_pair_head,\n    is_surrogate_pair_tail,\n    js_error,\n    JS_Parse_Error,\n    parse,\n    PRECEDENCE,\n    RESERVED_WORDS,\n    tokenizer,\n};\n"]},"metadata":{},"sourceType":"module"}