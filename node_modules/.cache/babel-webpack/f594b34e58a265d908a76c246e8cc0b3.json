{"ast":null,"code":"\"use strict\";\n\nvar _toConsumableArray = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/toConsumableArray\");\n\nvar _classCallCheck = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/createSuper\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AliasHost = void 0;\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nvar path_1 = require(\"../path\");\n\nvar resolver_1 = require(\"./resolver\");\n/**\n * A Virtual Host that allow to alias some paths to other paths.\n *\n * This does not verify, when setting an alias, that the target or source exist. Neither does it\n * check whether it's a file or a directory. Please not that directories are also renamed/replaced.\n *\n * No recursion is done on the resolution, which means the following is perfectly valid then:\n *\n * ```\n *     host.aliases.set(normalize('/file/a'), normalize('/file/b'));\n *     host.aliases.set(normalize('/file/b'), normalize('/file/a'));\n * ```\n *\n * This will result in a proper swap of two files for each others.\n *\n * @example\n *   const host = new SimpleMemoryHost();\n *   host.write(normalize('/some/file'), content).subscribe();\n *\n *   const aHost = new AliasHost(host);\n *   aHost.read(normalize('/some/file'))\n *     .subscribe(x => expect(x).toBe(content));\n *   aHost.aliases.set(normalize('/some/file'), normalize('/other/path');\n *\n *   // This file will not exist because /other/path does not exist.\n *   aHost.read(normalize('/some/file'))\n *     .subscribe(undefined, err => expect(err.message).toMatch(/does not exist/));\n *\n * @example\n *   const host = new SimpleMemoryHost();\n *   host.write(normalize('/some/folder/file'), content).subscribe();\n *\n *   const aHost = new AliasHost(host);\n *   aHost.read(normalize('/some/folder/file'))\n *     .subscribe(x => expect(x).toBe(content));\n *   aHost.aliases.set(normalize('/some'), normalize('/other');\n *\n *   // This file will not exist because /other/path does not exist.\n *   aHost.read(normalize('/some/folder/file'))\n *     .subscribe(undefined, err => expect(err.message).toMatch(/does not exist/));\n *\n *   // Create the file with new content and verify that this has the new content.\n *   aHost.write(normalize('/other/folder/file'), content2).subscribe();\n *   aHost.read(normalize('/some/folder/file'))\n *     .subscribe(x => expect(x).toBe(content2));\n */\n\n\nvar AliasHost = /*#__PURE__*/function (_resolver_1$ResolverH) {\n  _inherits(AliasHost, _resolver_1$ResolverH);\n\n  var _super = _createSuper(AliasHost);\n\n  function AliasHost() {\n    var _this;\n\n    _classCallCheck(this, AliasHost);\n\n    _this = _super.apply(this, arguments);\n    _this._aliases = new Map();\n    return _this;\n  }\n\n  _createClass(AliasHost, [{\n    key: \"_resolve\",\n    value: function _resolve(path) {\n      var maybeAlias = this._aliases.get(path);\n\n      var sp = path_1.split(path);\n      var remaining = []; // Also resolve all parents of the requested files, only picking the first one that matches.\n      // This can have surprising behaviour when aliases are inside another alias. It will always\n      // use the closest one to the file.\n\n      while (!maybeAlias && sp.length > 0) {\n        var p = path_1.join.apply(path_1, [path_1.NormalizedRoot].concat(_toConsumableArray(sp)));\n        maybeAlias = this._aliases.get(p);\n\n        if (maybeAlias) {\n          maybeAlias = path_1.join.apply(path_1, [maybeAlias].concat(remaining));\n        } // Allow non-null-operator because we know sp.length > 0 (condition on while).\n\n\n        remaining.unshift(sp.pop()); // tslint:disable-line:no-non-null-assertion\n      }\n\n      return maybeAlias || path;\n    }\n  }, {\n    key: \"aliases\",\n    get: function get() {\n      return this._aliases;\n    }\n  }]);\n\n  return AliasHost;\n}(resolver_1.ResolverHost);\n\nexports.AliasHost = AliasHost;","map":{"version":3,"sources":["/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@angular-devkit/build-angular/node_modules/@angular-devkit/core/src/virtual-fs/host/alias.js"],"names":["Object","defineProperty","exports","value","AliasHost","path_1","require","resolver_1","arguments","_aliases","Map","path","maybeAlias","get","sp","split","remaining","length","p","join","NormalizedRoot","unshift","pop","ResolverHost"],"mappings":"AAAA;;;;;;;;;;;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,SAAR,GAAoB,KAAK,CAAzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAMC,MAAM,GAAGC,OAAO,CAAC,SAAD,CAAtB;;AACA,IAAMC,UAAU,GAAGD,OAAO,CAAC,YAAD,CAA1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;IACMF,S;;;;;AACF,uBAAc;AAAA;;AAAA;;AACV,+BAASI,SAAT;AACA,UAAKC,QAAL,GAAgB,IAAIC,GAAJ,EAAhB;AAFU;AAGb;;;;WACD,kBAASC,IAAT,EAAe;AACX,UAAIC,UAAU,GAAG,KAAKH,QAAL,CAAcI,GAAd,CAAkBF,IAAlB,CAAjB;;AACA,UAAMG,EAAE,GAAGT,MAAM,CAACU,KAAP,CAAaJ,IAAb,CAAX;AACA,UAAMK,SAAS,GAAG,EAAlB,CAHW,CAIX;AACA;AACA;;AACA,aAAO,CAACJ,UAAD,IAAeE,EAAE,CAACG,MAAH,GAAY,CAAlC,EAAqC;AACjC,YAAMC,CAAC,GAAGb,MAAM,CAACc,IAAP,OAAAd,MAAM,GAAMA,MAAM,CAACe,cAAb,4BAAgCN,EAAhC,GAAhB;AACAF,QAAAA,UAAU,GAAG,KAAKH,QAAL,CAAcI,GAAd,CAAkBK,CAAlB,CAAb;;AACA,YAAIN,UAAJ,EAAgB;AACZA,UAAAA,UAAU,GAAGP,MAAM,CAACc,IAAP,OAAAd,MAAM,GAAMO,UAAN,SAAqBI,SAArB,EAAnB;AACH,SALgC,CAMjC;;;AACAA,QAAAA,SAAS,CAACK,OAAV,CAAkBP,EAAE,CAACQ,GAAH,EAAlB,EAPiC,CAOJ;AAChC;;AACD,aAAOV,UAAU,IAAID,IAArB;AACH;;;SACD,eAAc;AAAE,aAAO,KAAKF,QAAZ;AAAuB;;;;EAvBnBF,UAAU,CAACgB,Y;;AAyBnCrB,OAAO,CAACE,SAAR,GAAoBA,SAApB","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.AliasHost = void 0;\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst path_1 = require(\"../path\");\nconst resolver_1 = require(\"./resolver\");\n/**\n * A Virtual Host that allow to alias some paths to other paths.\n *\n * This does not verify, when setting an alias, that the target or source exist. Neither does it\n * check whether it's a file or a directory. Please not that directories are also renamed/replaced.\n *\n * No recursion is done on the resolution, which means the following is perfectly valid then:\n *\n * ```\n *     host.aliases.set(normalize('/file/a'), normalize('/file/b'));\n *     host.aliases.set(normalize('/file/b'), normalize('/file/a'));\n * ```\n *\n * This will result in a proper swap of two files for each others.\n *\n * @example\n *   const host = new SimpleMemoryHost();\n *   host.write(normalize('/some/file'), content).subscribe();\n *\n *   const aHost = new AliasHost(host);\n *   aHost.read(normalize('/some/file'))\n *     .subscribe(x => expect(x).toBe(content));\n *   aHost.aliases.set(normalize('/some/file'), normalize('/other/path');\n *\n *   // This file will not exist because /other/path does not exist.\n *   aHost.read(normalize('/some/file'))\n *     .subscribe(undefined, err => expect(err.message).toMatch(/does not exist/));\n *\n * @example\n *   const host = new SimpleMemoryHost();\n *   host.write(normalize('/some/folder/file'), content).subscribe();\n *\n *   const aHost = new AliasHost(host);\n *   aHost.read(normalize('/some/folder/file'))\n *     .subscribe(x => expect(x).toBe(content));\n *   aHost.aliases.set(normalize('/some'), normalize('/other');\n *\n *   // This file will not exist because /other/path does not exist.\n *   aHost.read(normalize('/some/folder/file'))\n *     .subscribe(undefined, err => expect(err.message).toMatch(/does not exist/));\n *\n *   // Create the file with new content and verify that this has the new content.\n *   aHost.write(normalize('/other/folder/file'), content2).subscribe();\n *   aHost.read(normalize('/some/folder/file'))\n *     .subscribe(x => expect(x).toBe(content2));\n */\nclass AliasHost extends resolver_1.ResolverHost {\n    constructor() {\n        super(...arguments);\n        this._aliases = new Map();\n    }\n    _resolve(path) {\n        let maybeAlias = this._aliases.get(path);\n        const sp = path_1.split(path);\n        const remaining = [];\n        // Also resolve all parents of the requested files, only picking the first one that matches.\n        // This can have surprising behaviour when aliases are inside another alias. It will always\n        // use the closest one to the file.\n        while (!maybeAlias && sp.length > 0) {\n            const p = path_1.join(path_1.NormalizedRoot, ...sp);\n            maybeAlias = this._aliases.get(p);\n            if (maybeAlias) {\n                maybeAlias = path_1.join(maybeAlias, ...remaining);\n            }\n            // Allow non-null-operator because we know sp.length > 0 (condition on while).\n            remaining.unshift(sp.pop()); // tslint:disable-line:no-non-null-assertion\n        }\n        return maybeAlias || path;\n    }\n    get aliases() { return this._aliases; }\n}\nexports.AliasHost = AliasHost;\n"]},"metadata":{},"sourceType":"script"}