{"ast":null,"code":"\"use strict\";\n\nvar _toConsumableArray = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/toConsumableArray\");\n\nvar _createForOfIteratorHelper = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _createClass = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _classCallCheck = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.NgBuildAnalyticsPlugin = exports.countOccurrences = void 0;\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nvar core_1 = require(\"@angular-devkit/core\");\n\nvar NormalModule = require('webpack/lib/NormalModule');\n\nvar webpackAllErrorMessageRe = /^([^(]+)\\(\\d+,\\d\\): (.*)$/gm;\nvar webpackTsErrorMessageRe = /^[^(]+\\(\\d+,\\d\\): error (TS\\d+):/;\n/**\n * Faster than using a RegExp, so we use this to count occurences in source code.\n * @param source The source to look into.\n * @param match The match string to look for.\n * @param wordBreak Whether to check for word break before and after a match was found.\n * @return The number of matches found.\n * @private\n */\n\nfunction countOccurrences(source, match) {\n  var wordBreak = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n  if (match.length == 0) {\n    return source.length + 1;\n  }\n\n  var count = 0; // We condition here so branch prediction happens out of the loop, not in it.\n\n  if (wordBreak) {\n    var re = /\\w/;\n\n    for (var pos = source.lastIndexOf(match); pos >= 0; pos = source.lastIndexOf(match, pos)) {\n      if (!(re.test(source[pos - 1] || '') || re.test(source[pos + match.length] || ''))) {\n        count++; // 1 match, AH! AH! AH! 2 matches, AH! AH! AH!\n      }\n\n      pos -= match.length;\n\n      if (pos < 0) {\n        break;\n      }\n    }\n  } else {\n    for (var _pos = source.lastIndexOf(match); _pos >= 0; _pos = source.lastIndexOf(match, _pos)) {\n      count++; // 1 match, AH! AH! AH! 2 matches, AH! AH! AH!\n\n      _pos -= match.length;\n\n      if (_pos < 0) {\n        break;\n      }\n    }\n  }\n\n  return count;\n}\n\nexports.countOccurrences = countOccurrences;\n/**\n * Holder of statistics related to the build.\n */\n\nvar AnalyticsBuildStats = function AnalyticsBuildStats() {\n  _classCallCheck(this, AnalyticsBuildStats);\n\n  this.errors = [];\n  this.numberOfNgOnInit = 0;\n  this.numberOfComponents = 0;\n  this.initialChunkSize = 0;\n  this.totalChunkCount = 0;\n  this.totalChunkSize = 0;\n  this.lazyChunkCount = 0;\n  this.lazyChunkSize = 0;\n  this.assetCount = 0;\n  this.assetSize = 0;\n  this.polyfillSize = 0;\n  this.cssSize = 0;\n};\n/**\n * Analytics plugin that reports the analytics we want from the CLI.\n */\n\n\nvar NgBuildAnalyticsPlugin = /*#__PURE__*/function () {\n  function NgBuildAnalyticsPlugin(_projectRoot, _analytics, _category, _isIvy) {\n    _classCallCheck(this, NgBuildAnalyticsPlugin);\n\n    this._projectRoot = _projectRoot;\n    this._analytics = _analytics;\n    this._category = _category;\n    this._isIvy = _isIvy;\n    this._built = false;\n    this._stats = new AnalyticsBuildStats();\n  }\n\n  _createClass(NgBuildAnalyticsPlugin, [{\n    key: \"_reset\",\n    value: function _reset() {\n      this._stats = new AnalyticsBuildStats();\n    }\n  }, {\n    key: \"_getMetrics\",\n    value: function _getMetrics(stats) {\n      var startTime = +(stats.startTime || 0);\n      var endTime = +(stats.endTime || 0);\n      var metrics = [];\n      metrics[core_1.analytics.NgCliAnalyticsMetrics.BuildTime] = endTime - startTime;\n      metrics[core_1.analytics.NgCliAnalyticsMetrics.NgOnInitCount] = this._stats.numberOfNgOnInit;\n      metrics[core_1.analytics.NgCliAnalyticsMetrics.NgComponentCount] = this._stats.numberOfComponents;\n      metrics[core_1.analytics.NgCliAnalyticsMetrics.InitialChunkSize] = this._stats.initialChunkSize;\n      metrics[core_1.analytics.NgCliAnalyticsMetrics.TotalChunkCount] = this._stats.totalChunkCount;\n      metrics[core_1.analytics.NgCliAnalyticsMetrics.TotalChunkSize] = this._stats.totalChunkSize;\n      metrics[core_1.analytics.NgCliAnalyticsMetrics.LazyChunkCount] = this._stats.lazyChunkCount;\n      metrics[core_1.analytics.NgCliAnalyticsMetrics.LazyChunkSize] = this._stats.lazyChunkSize;\n      metrics[core_1.analytics.NgCliAnalyticsMetrics.AssetCount] = this._stats.assetCount;\n      metrics[core_1.analytics.NgCliAnalyticsMetrics.AssetSize] = this._stats.assetSize;\n      metrics[core_1.analytics.NgCliAnalyticsMetrics.PolyfillSize] = this._stats.polyfillSize;\n      metrics[core_1.analytics.NgCliAnalyticsMetrics.CssSize] = this._stats.cssSize;\n      return metrics;\n    }\n  }, {\n    key: \"_getDimensions\",\n    value: function _getDimensions() {\n      var dimensions = [];\n\n      if (this._stats.errors.length) {\n        // Adding commas before and after so the regex are easier to define filters.\n        dimensions[core_1.analytics.NgCliAnalyticsDimensions.BuildErrors] = \",\".concat(this._stats.errors.join(), \",\");\n      }\n\n      dimensions[core_1.analytics.NgCliAnalyticsDimensions.NgIvyEnabled] = this._isIvy;\n      return dimensions;\n    }\n  }, {\n    key: \"_reportBuildMetrics\",\n    value: function _reportBuildMetrics(stats) {\n      var dimensions = this._getDimensions();\n\n      var metrics = this._getMetrics(stats);\n\n      this._analytics.event(this._category, 'build', {\n        dimensions: dimensions,\n        metrics: metrics\n      });\n    }\n  }, {\n    key: \"_reportRebuildMetrics\",\n    value: function _reportRebuildMetrics(stats) {\n      var dimensions = this._getDimensions();\n\n      var metrics = this._getMetrics(stats);\n\n      this._analytics.event(this._category, 'rebuild', {\n        dimensions: dimensions,\n        metrics: metrics\n      });\n    }\n  }, {\n    key: \"_checkTsNormalModule\",\n    value: function _checkTsNormalModule(module) {\n      if (module._source) {\n        // PLEASE REMEMBER:\n        // We're dealing with ES5 _or_ ES2015 JavaScript at this point (we don't know for sure).\n        // Just count the ngOnInit occurences. Comments/Strings/calls occurences should be sparse\n        // so we just consider them within the margin of error. We do break on word break though.\n        this._stats.numberOfNgOnInit += countOccurrences(module._source.source(), 'ngOnInit', true); // Count the number of `Component({` strings (case sensitive), which happens in __decorate().\n        // This does not include View Engine AOT compilation, we use the ngfactory for it.\n\n        this._stats.numberOfComponents += countOccurrences(module._source.source(), 'Component({'); // For Ivy we just count ɵcmp.\n\n        this._stats.numberOfComponents += countOccurrences(module._source.source(), '.ɵcmp', true); // for ascii_only true\n\n        this._stats.numberOfComponents += countOccurrences(module._source.source(), \".\\u0275cmp\", true);\n      }\n    }\n  }, {\n    key: \"_checkNgFactoryNormalModule\",\n    value: function _checkNgFactoryNormalModule(module) {\n      if (module._source) {\n        // PLEASE REMEMBER:\n        // We're dealing with ES5 _or_ ES2015 JavaScript at this point (we don't know for sure).\n        // Count the number of `.ɵccf(` strings (case sensitive). They're calls to components\n        // factories.\n        this._stats.numberOfComponents += countOccurrences(module._source.source(), '.ɵccf('); // for ascii_only true\n\n        this._stats.numberOfComponents += countOccurrences(module._source.source(), \".\\u0275ccf(\");\n      }\n    }\n  }, {\n    key: \"_collectErrors\",\n    value: function _collectErrors(stats) {\n      if (stats.hasErrors()) {\n        var _iterator = _createForOfIteratorHelper(stats.compilation.errors),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var errObject = _step.value;\n\n            if (errObject instanceof Error) {\n              var allErrors = errObject.message.match(webpackAllErrorMessageRe);\n\n              var _iterator2 = _createForOfIteratorHelper(_toConsumableArray(allErrors || []).slice(1)),\n                  _step2;\n\n              try {\n                for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n                  var err = _step2.value;\n                  var message = (err.match(webpackTsErrorMessageRe) || [])[1];\n\n                  if (message) {\n                    // At this point this should be a TS1234.\n                    this._stats.errors.push(message);\n                  }\n                }\n              } catch (err) {\n                _iterator2.e(err);\n              } finally {\n                _iterator2.f();\n              }\n            }\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n      }\n    } // We can safely disable no any here since we know the format of the JSON output from webpack.\n    // tslint:disable-next-line:no-any\n\n  }, {\n    key: \"_collectBundleStats\",\n    value: function _collectBundleStats(json) {\n      var _this = this;\n\n      json.chunks.filter(function (chunk) {\n        return chunk.rendered;\n      }).forEach(function (chunk) {\n        var asset = json.assets.find(function (x) {\n          return x.name == chunk.files[0];\n        });\n        var size = asset ? asset.size : 0;\n\n        if (chunk.entry || chunk.initial) {\n          _this._stats.initialChunkSize += size;\n        } else {\n          _this._stats.lazyChunkCount++;\n          _this._stats.lazyChunkSize += size;\n        }\n\n        _this._stats.totalChunkCount++;\n        _this._stats.totalChunkSize += size;\n      });\n      json.assets // Filter out chunks. We only count assets that are not JS.\n      .filter(function (a) {\n        return json.chunks.every(function (chunk) {\n          return chunk.files[0] != a.name;\n        });\n      }).forEach(function (a) {\n        _this._stats.assetSize += a.size || 0;\n        _this._stats.assetCount++;\n      });\n\n      var _iterator3 = _createForOfIteratorHelper(json.assets),\n          _step3;\n\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var asset = _step3.value;\n\n          if (asset.name == 'polyfill') {\n            this._stats.polyfillSize += asset.size || 0;\n          }\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n\n      var _iterator4 = _createForOfIteratorHelper(json.chunks),\n          _step4;\n\n      try {\n        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n          var chunk = _step4.value;\n\n          if (chunk.files[0] && chunk.files[0].endsWith('.css')) {\n            this._stats.cssSize += chunk.size || 0;\n          }\n        }\n      } catch (err) {\n        _iterator4.e(err);\n      } finally {\n        _iterator4.f();\n      }\n    }\n    /************************************************************************************************\n     * The next section is all the different Webpack hooks for this plugin.\n     */\n\n    /**\n     * Reports a succeed module.\n     * @private\n     */\n\n  }, {\n    key: \"_succeedModule\",\n    value: function _succeedModule(mod) {\n      // Only report NormalModule instances.\n      if (mod.constructor !== NormalModule) {\n        return;\n      }\n\n      var module = mod; // Only reports modules that are part of the user's project. We also don't do node_modules.\n      // There is a chance that someone name a file path `hello_node_modules` or something and we\n      // will ignore that file for the purpose of gathering, but we're willing to take the risk.\n\n      if (!module.resource || !module.resource.startsWith(this._projectRoot) || module.resource.indexOf('node_modules') >= 0) {\n        return;\n      } // Check that it's a source file from the project.\n\n\n      if (module.resource.endsWith('.ts')) {\n        this._checkTsNormalModule(module);\n      } else if (module.resource.endsWith('.ngfactory.js')) {\n        this._checkNgFactoryNormalModule(module);\n      }\n    }\n  }, {\n    key: \"_compilation\",\n    value: function _compilation(compiler, compilation) {\n      this._reset();\n\n      compilation.hooks.succeedModule.tap('NgBuildAnalyticsPlugin', this._succeedModule.bind(this));\n    }\n  }, {\n    key: \"_done\",\n    value: function _done(stats) {\n      this._collectErrors(stats);\n\n      this._collectBundleStats(stats.toJson());\n\n      if (this._built) {\n        this._reportRebuildMetrics(stats);\n      } else {\n        this._reportBuildMetrics(stats);\n\n        this._built = true;\n      }\n    }\n  }, {\n    key: \"apply\",\n    value: function apply(compiler) {\n      compiler.hooks.compilation.tap('NgBuildAnalyticsPlugin', this._compilation.bind(this, compiler));\n      compiler.hooks.done.tap('NgBuildAnalyticsPlugin', this._done.bind(this));\n    }\n  }]);\n\n  return NgBuildAnalyticsPlugin;\n}();\n\nexports.NgBuildAnalyticsPlugin = NgBuildAnalyticsPlugin;","map":{"version":3,"sources":["/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@angular-devkit/build-angular/src/webpack/plugins/analytics.js"],"names":["Object","defineProperty","exports","value","NgBuildAnalyticsPlugin","countOccurrences","core_1","require","NormalModule","webpackAllErrorMessageRe","webpackTsErrorMessageRe","source","match","wordBreak","length","count","re","pos","lastIndexOf","test","AnalyticsBuildStats","errors","numberOfNgOnInit","numberOfComponents","initialChunkSize","totalChunkCount","totalChunkSize","lazyChunkCount","lazyChunkSize","assetCount","assetSize","polyfillSize","cssSize","_projectRoot","_analytics","_category","_isIvy","_built","_stats","stats","startTime","endTime","metrics","analytics","NgCliAnalyticsMetrics","BuildTime","NgOnInitCount","NgComponentCount","InitialChunkSize","TotalChunkCount","TotalChunkSize","LazyChunkCount","LazyChunkSize","AssetCount","AssetSize","PolyfillSize","CssSize","dimensions","NgCliAnalyticsDimensions","BuildErrors","join","NgIvyEnabled","_getDimensions","_getMetrics","event","module","_source","hasErrors","compilation","errObject","Error","allErrors","message","slice","err","push","json","chunks","filter","chunk","rendered","forEach","asset","assets","find","x","name","files","size","entry","initial","a","every","endsWith","mod","constructor","resource","startsWith","indexOf","_checkTsNormalModule","_checkNgFactoryNormalModule","compiler","_reset","hooks","succeedModule","tap","_succeedModule","bind","_collectErrors","_collectBundleStats","toJson","_reportRebuildMetrics","_reportBuildMetrics","_compilation","done","_done"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.NgBuildAnalyticsPlugin = exports.countOccurrences = void 0;\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst core_1 = require(\"@angular-devkit/core\");\nconst NormalModule = require('webpack/lib/NormalModule');\nconst webpackAllErrorMessageRe = /^([^(]+)\\(\\d+,\\d\\): (.*)$/gm;\nconst webpackTsErrorMessageRe = /^[^(]+\\(\\d+,\\d\\): error (TS\\d+):/;\n/**\n * Faster than using a RegExp, so we use this to count occurences in source code.\n * @param source The source to look into.\n * @param match The match string to look for.\n * @param wordBreak Whether to check for word break before and after a match was found.\n * @return The number of matches found.\n * @private\n */\nfunction countOccurrences(source, match, wordBreak = false) {\n    if (match.length == 0) {\n        return source.length + 1;\n    }\n    let count = 0;\n    // We condition here so branch prediction happens out of the loop, not in it.\n    if (wordBreak) {\n        const re = /\\w/;\n        for (let pos = source.lastIndexOf(match); pos >= 0; pos = source.lastIndexOf(match, pos)) {\n            if (!(re.test(source[pos - 1] || '') || re.test(source[pos + match.length] || ''))) {\n                count++; // 1 match, AH! AH! AH! 2 matches, AH! AH! AH!\n            }\n            pos -= match.length;\n            if (pos < 0) {\n                break;\n            }\n        }\n    }\n    else {\n        for (let pos = source.lastIndexOf(match); pos >= 0; pos = source.lastIndexOf(match, pos)) {\n            count++; // 1 match, AH! AH! AH! 2 matches, AH! AH! AH!\n            pos -= match.length;\n            if (pos < 0) {\n                break;\n            }\n        }\n    }\n    return count;\n}\nexports.countOccurrences = countOccurrences;\n/**\n * Holder of statistics related to the build.\n */\nclass AnalyticsBuildStats {\n    constructor() {\n        this.errors = [];\n        this.numberOfNgOnInit = 0;\n        this.numberOfComponents = 0;\n        this.initialChunkSize = 0;\n        this.totalChunkCount = 0;\n        this.totalChunkSize = 0;\n        this.lazyChunkCount = 0;\n        this.lazyChunkSize = 0;\n        this.assetCount = 0;\n        this.assetSize = 0;\n        this.polyfillSize = 0;\n        this.cssSize = 0;\n    }\n}\n/**\n * Analytics plugin that reports the analytics we want from the CLI.\n */\nclass NgBuildAnalyticsPlugin {\n    constructor(_projectRoot, _analytics, _category, _isIvy) {\n        this._projectRoot = _projectRoot;\n        this._analytics = _analytics;\n        this._category = _category;\n        this._isIvy = _isIvy;\n        this._built = false;\n        this._stats = new AnalyticsBuildStats();\n    }\n    _reset() {\n        this._stats = new AnalyticsBuildStats();\n    }\n    _getMetrics(stats) {\n        const startTime = +(stats.startTime || 0);\n        const endTime = +(stats.endTime || 0);\n        const metrics = [];\n        metrics[core_1.analytics.NgCliAnalyticsMetrics.BuildTime] = (endTime - startTime);\n        metrics[core_1.analytics.NgCliAnalyticsMetrics.NgOnInitCount] = this._stats.numberOfNgOnInit;\n        metrics[core_1.analytics.NgCliAnalyticsMetrics.NgComponentCount] = this._stats.numberOfComponents;\n        metrics[core_1.analytics.NgCliAnalyticsMetrics.InitialChunkSize] = this._stats.initialChunkSize;\n        metrics[core_1.analytics.NgCliAnalyticsMetrics.TotalChunkCount] = this._stats.totalChunkCount;\n        metrics[core_1.analytics.NgCliAnalyticsMetrics.TotalChunkSize] = this._stats.totalChunkSize;\n        metrics[core_1.analytics.NgCliAnalyticsMetrics.LazyChunkCount] = this._stats.lazyChunkCount;\n        metrics[core_1.analytics.NgCliAnalyticsMetrics.LazyChunkSize] = this._stats.lazyChunkSize;\n        metrics[core_1.analytics.NgCliAnalyticsMetrics.AssetCount] = this._stats.assetCount;\n        metrics[core_1.analytics.NgCliAnalyticsMetrics.AssetSize] = this._stats.assetSize;\n        metrics[core_1.analytics.NgCliAnalyticsMetrics.PolyfillSize] = this._stats.polyfillSize;\n        metrics[core_1.analytics.NgCliAnalyticsMetrics.CssSize] = this._stats.cssSize;\n        return metrics;\n    }\n    _getDimensions() {\n        const dimensions = [];\n        if (this._stats.errors.length) {\n            // Adding commas before and after so the regex are easier to define filters.\n            dimensions[core_1.analytics.NgCliAnalyticsDimensions.BuildErrors] = `,${this._stats.errors.join()},`;\n        }\n        dimensions[core_1.analytics.NgCliAnalyticsDimensions.NgIvyEnabled] = this._isIvy;\n        return dimensions;\n    }\n    _reportBuildMetrics(stats) {\n        const dimensions = this._getDimensions();\n        const metrics = this._getMetrics(stats);\n        this._analytics.event(this._category, 'build', { dimensions, metrics });\n    }\n    _reportRebuildMetrics(stats) {\n        const dimensions = this._getDimensions();\n        const metrics = this._getMetrics(stats);\n        this._analytics.event(this._category, 'rebuild', { dimensions, metrics });\n    }\n    _checkTsNormalModule(module) {\n        if (module._source) {\n            // PLEASE REMEMBER:\n            // We're dealing with ES5 _or_ ES2015 JavaScript at this point (we don't know for sure).\n            // Just count the ngOnInit occurences. Comments/Strings/calls occurences should be sparse\n            // so we just consider them within the margin of error. We do break on word break though.\n            this._stats.numberOfNgOnInit += countOccurrences(module._source.source(), 'ngOnInit', true);\n            // Count the number of `Component({` strings (case sensitive), which happens in __decorate().\n            // This does not include View Engine AOT compilation, we use the ngfactory for it.\n            this._stats.numberOfComponents += countOccurrences(module._source.source(), 'Component({');\n            // For Ivy we just count ɵcmp.\n            this._stats.numberOfComponents += countOccurrences(module._source.source(), '.ɵcmp', true);\n            // for ascii_only true\n            this._stats.numberOfComponents += countOccurrences(module._source.source(), '.\\u0275cmp', true);\n        }\n    }\n    _checkNgFactoryNormalModule(module) {\n        if (module._source) {\n            // PLEASE REMEMBER:\n            // We're dealing with ES5 _or_ ES2015 JavaScript at this point (we don't know for sure).\n            // Count the number of `.ɵccf(` strings (case sensitive). They're calls to components\n            // factories.\n            this._stats.numberOfComponents += countOccurrences(module._source.source(), '.ɵccf(');\n            // for ascii_only true\n            this._stats.numberOfComponents += countOccurrences(module._source.source(), '.\\u0275ccf(');\n        }\n    }\n    _collectErrors(stats) {\n        if (stats.hasErrors()) {\n            for (const errObject of stats.compilation.errors) {\n                if (errObject instanceof Error) {\n                    const allErrors = errObject.message.match(webpackAllErrorMessageRe);\n                    for (const err of [...allErrors || []].slice(1)) {\n                        const message = (err.match(webpackTsErrorMessageRe) || [])[1];\n                        if (message) {\n                            // At this point this should be a TS1234.\n                            this._stats.errors.push(message);\n                        }\n                    }\n                }\n            }\n        }\n    }\n    // We can safely disable no any here since we know the format of the JSON output from webpack.\n    // tslint:disable-next-line:no-any\n    _collectBundleStats(json) {\n        json.chunks\n            .filter((chunk) => chunk.rendered)\n            .forEach((chunk) => {\n            const asset = json.assets.find((x) => x.name == chunk.files[0]);\n            const size = asset ? asset.size : 0;\n            if (chunk.entry || chunk.initial) {\n                this._stats.initialChunkSize += size;\n            }\n            else {\n                this._stats.lazyChunkCount++;\n                this._stats.lazyChunkSize += size;\n            }\n            this._stats.totalChunkCount++;\n            this._stats.totalChunkSize += size;\n        });\n        json.assets\n            // Filter out chunks. We only count assets that are not JS.\n            .filter((a) => {\n            return json.chunks.every((chunk) => chunk.files[0] != a.name);\n        })\n            .forEach((a) => {\n            this._stats.assetSize += (a.size || 0);\n            this._stats.assetCount++;\n        });\n        for (const asset of json.assets) {\n            if (asset.name == 'polyfill') {\n                this._stats.polyfillSize += asset.size || 0;\n            }\n        }\n        for (const chunk of json.chunks) {\n            if (chunk.files[0] && chunk.files[0].endsWith('.css')) {\n                this._stats.cssSize += chunk.size || 0;\n            }\n        }\n    }\n    /************************************************************************************************\n     * The next section is all the different Webpack hooks for this plugin.\n     */\n    /**\n     * Reports a succeed module.\n     * @private\n     */\n    _succeedModule(mod) {\n        // Only report NormalModule instances.\n        if (mod.constructor !== NormalModule) {\n            return;\n        }\n        const module = mod;\n        // Only reports modules that are part of the user's project. We also don't do node_modules.\n        // There is a chance that someone name a file path `hello_node_modules` or something and we\n        // will ignore that file for the purpose of gathering, but we're willing to take the risk.\n        if (!module.resource\n            || !module.resource.startsWith(this._projectRoot)\n            || module.resource.indexOf('node_modules') >= 0) {\n            return;\n        }\n        // Check that it's a source file from the project.\n        if (module.resource.endsWith('.ts')) {\n            this._checkTsNormalModule(module);\n        }\n        else if (module.resource.endsWith('.ngfactory.js')) {\n            this._checkNgFactoryNormalModule(module);\n        }\n    }\n    _compilation(compiler, compilation) {\n        this._reset();\n        compilation.hooks.succeedModule.tap('NgBuildAnalyticsPlugin', this._succeedModule.bind(this));\n    }\n    _done(stats) {\n        this._collectErrors(stats);\n        this._collectBundleStats(stats.toJson());\n        if (this._built) {\n            this._reportRebuildMetrics(stats);\n        }\n        else {\n            this._reportBuildMetrics(stats);\n            this._built = true;\n        }\n    }\n    apply(compiler) {\n        compiler.hooks.compilation.tap('NgBuildAnalyticsPlugin', this._compilation.bind(this, compiler));\n        compiler.hooks.done.tap('NgBuildAnalyticsPlugin', this._done.bind(this));\n    }\n}\nexports.NgBuildAnalyticsPlugin = NgBuildAnalyticsPlugin;\n"]},"metadata":{},"sourceType":"script"}