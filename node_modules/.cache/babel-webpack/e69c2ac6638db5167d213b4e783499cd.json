{"ast":null,"code":"/*\n Copyright 2012-2015, Yahoo Inc.\n Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.\n */\n'use strict';\n/**\n * istanbul-lib-coverage exports an API that allows you to create and manipulate\n * file coverage, coverage maps (a set of file coverage objects) and summary\n * coverage objects. File coverage for the same file can be merged as can\n * entire coverage maps.\n *\n * @module Exports\n */\n\nvar _require = require('./lib/file-coverage'),\n    FileCoverage = _require.FileCoverage;\n\nvar _require2 = require('./lib/coverage-map'),\n    CoverageMap = _require2.CoverageMap;\n\nvar _require3 = require('./lib/coverage-summary'),\n    CoverageSummary = _require3.CoverageSummary;\n\nmodule.exports = {\n  /**\n   * creates a coverage summary object\n   * @param {Object} obj an argument with the same semantics\n   *  as the one passed to the `CoverageSummary` constructor\n   * @returns {CoverageSummary}\n   */\n  createCoverageSummary: function createCoverageSummary(obj) {\n    if (obj && obj instanceof CoverageSummary) {\n      return obj;\n    }\n\n    return new CoverageSummary(obj);\n  },\n\n  /**\n   * creates a CoverageMap object\n   * @param {Object} obj optional - an argument with the same semantics\n   *  as the one passed to the CoverageMap constructor.\n   * @returns {CoverageMap}\n   */\n  createCoverageMap: function createCoverageMap(obj) {\n    if (obj && obj instanceof CoverageMap) {\n      return obj;\n    }\n\n    return new CoverageMap(obj);\n  },\n\n  /**\n   * creates a FileCoverage object\n   * @param {Object} obj optional - an argument with the same semantics\n   *  as the one passed to the FileCoverage constructor.\n   * @returns {FileCoverage}\n   */\n  createFileCoverage: function createFileCoverage(obj) {\n    if (obj && obj instanceof FileCoverage) {\n      return obj;\n    }\n\n    return new FileCoverage(obj);\n  }\n};\n/** classes exported for reuse */\n\nmodule.exports.classes = {\n  /**\n   * the file coverage constructor\n   */\n  FileCoverage: FileCoverage\n};","map":{"version":3,"sources":["/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/istanbul-lib-coverage/index.js"],"names":["require","FileCoverage","CoverageMap","CoverageSummary","module","exports","createCoverageSummary","obj","createCoverageMap","createFileCoverage","classes"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAyBA,OAAO,CAAC,qBAAD,CAAhC;AAAA,IAAQC,YAAR,YAAQA,YAAR;;AACA,gBAAwBD,OAAO,CAAC,oBAAD,CAA/B;AAAA,IAAQE,WAAR,aAAQA,WAAR;;AACA,gBAA4BF,OAAO,CAAC,wBAAD,CAAnC;AAAA,IAAQG,eAAR,aAAQA,eAAR;;AAEAC,MAAM,CAACC,OAAP,GAAiB;AACb;AACJ;AACA;AACA;AACA;AACA;AACIC,EAAAA,qBAPa,iCAOSC,GAPT,EAOc;AACvB,QAAIA,GAAG,IAAIA,GAAG,YAAYJ,eAA1B,EAA2C;AACvC,aAAOI,GAAP;AACH;;AACD,WAAO,IAAIJ,eAAJ,CAAoBI,GAApB,CAAP;AACH,GAZY;;AAab;AACJ;AACA;AACA;AACA;AACA;AACIC,EAAAA,iBAnBa,6BAmBKD,GAnBL,EAmBU;AACnB,QAAIA,GAAG,IAAIA,GAAG,YAAYL,WAA1B,EAAuC;AACnC,aAAOK,GAAP;AACH;;AACD,WAAO,IAAIL,WAAJ,CAAgBK,GAAhB,CAAP;AACH,GAxBY;;AAyBb;AACJ;AACA;AACA;AACA;AACA;AACIE,EAAAA,kBA/Ba,8BA+BMF,GA/BN,EA+BW;AACpB,QAAIA,GAAG,IAAIA,GAAG,YAAYN,YAA1B,EAAwC;AACpC,aAAOM,GAAP;AACH;;AACD,WAAO,IAAIN,YAAJ,CAAiBM,GAAjB,CAAP;AACH;AApCY,CAAjB;AAuCA;;AACAH,MAAM,CAACC,OAAP,CAAeK,OAAf,GAAyB;AACrB;AACJ;AACA;AACIT,EAAAA,YAAY,EAAZA;AAJqB,CAAzB","sourcesContent":["/*\n Copyright 2012-2015, Yahoo Inc.\n Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.\n */\n'use strict';\n\n/**\n * istanbul-lib-coverage exports an API that allows you to create and manipulate\n * file coverage, coverage maps (a set of file coverage objects) and summary\n * coverage objects. File coverage for the same file can be merged as can\n * entire coverage maps.\n *\n * @module Exports\n */\nconst { FileCoverage } = require('./lib/file-coverage');\nconst { CoverageMap } = require('./lib/coverage-map');\nconst { CoverageSummary } = require('./lib/coverage-summary');\n\nmodule.exports = {\n    /**\n     * creates a coverage summary object\n     * @param {Object} obj an argument with the same semantics\n     *  as the one passed to the `CoverageSummary` constructor\n     * @returns {CoverageSummary}\n     */\n    createCoverageSummary(obj) {\n        if (obj && obj instanceof CoverageSummary) {\n            return obj;\n        }\n        return new CoverageSummary(obj);\n    },\n    /**\n     * creates a CoverageMap object\n     * @param {Object} obj optional - an argument with the same semantics\n     *  as the one passed to the CoverageMap constructor.\n     * @returns {CoverageMap}\n     */\n    createCoverageMap(obj) {\n        if (obj && obj instanceof CoverageMap) {\n            return obj;\n        }\n        return new CoverageMap(obj);\n    },\n    /**\n     * creates a FileCoverage object\n     * @param {Object} obj optional - an argument with the same semantics\n     *  as the one passed to the FileCoverage constructor.\n     * @returns {FileCoverage}\n     */\n    createFileCoverage(obj) {\n        if (obj && obj instanceof FileCoverage) {\n            return obj;\n        }\n        return new FileCoverage(obj);\n    }\n};\n\n/** classes exported for reuse */\nmodule.exports.classes = {\n    /**\n     * the file coverage constructor\n     */\n    FileCoverage\n};\n"]},"metadata":{},"sourceType":"script"}