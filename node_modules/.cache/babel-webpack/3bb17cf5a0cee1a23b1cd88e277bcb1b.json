{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _slicedToArray = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nvar _toConsumableArray = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/toConsumableArray\");\n\nvar _objectSpread = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/objectSpread2\");\n\nvar _createForOfIteratorHelper = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _classCallCheck = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _inherits = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/createSuper\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CoreSchemaRegistry = exports.SchemaValidationException = void 0;\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nvar ajv = require(\"ajv\");\n\nvar http = require(\"http\");\n\nvar https = require(\"https\");\n\nvar rxjs_1 = require(\"rxjs\");\n\nvar operators_1 = require(\"rxjs/operators\");\n\nvar Url = require(\"url\");\n\nvar exception_1 = require(\"../../exception/exception\");\n\nvar utils_1 = require(\"../../utils\");\n\nvar interface_1 = require(\"../interface\");\n\nvar utility_1 = require(\"./utility\");\n\nvar visitor_1 = require(\"./visitor\");\n\nvar SchemaValidationException = /*#__PURE__*/function (_exception_1$BaseExce) {\n  _inherits(SchemaValidationException, _exception_1$BaseExce);\n\n  var _super = _createSuper(SchemaValidationException);\n\n  function SchemaValidationException(errors) {\n    var _this;\n\n    var baseMessage = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'Schema validation failed with the following errors:';\n\n    _classCallCheck(this, SchemaValidationException);\n\n    if (!errors || errors.length === 0) {\n      _this = _super.call(this, 'Schema validation failed.');\n      _this.errors = [];\n      return _possibleConstructorReturn(_this);\n    }\n\n    var messages = SchemaValidationException.createMessages(errors);\n    _this = _super.call(this, \"\".concat(baseMessage, \"\\n  \").concat(messages.join('\\n  ')));\n    _this.errors = errors;\n    return _possibleConstructorReturn(_this);\n  }\n\n  _createClass(SchemaValidationException, null, [{\n    key: \"createMessages\",\n    value: function createMessages(errors) {\n      if (!errors || errors.length === 0) {\n        return [];\n      }\n\n      var messages = errors.map(function (err) {\n        var message = \"Data path \".concat(JSON.stringify(err.dataPath), \" \").concat(err.message);\n\n        if (err.keyword === 'additionalProperties') {\n          message += \"(\".concat(err.params.additionalProperty, \")\");\n        }\n\n        return message + '.';\n      });\n      return messages;\n    }\n  }]);\n\n  return SchemaValidationException;\n}(exception_1.BaseException);\n\nexports.SchemaValidationException = SchemaValidationException;\n\nvar CoreSchemaRegistry = /*#__PURE__*/function () {\n  function CoreSchemaRegistry() {\n    var _this2 = this;\n\n    var formats = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n\n    _classCallCheck(this, CoreSchemaRegistry);\n\n    /**\n     * Build an AJV instance that will be used to validate schemas.\n     */\n    this._uriCache = new Map();\n    this._uriHandlers = new Set();\n    this._pre = new utils_1.PartiallyOrderedSet();\n    this._post = new utils_1.PartiallyOrderedSet();\n    this._smartDefaultKeyword = false;\n    this._sourceMap = new Map();\n    var formatsObj = {};\n\n    var _iterator = _createForOfIteratorHelper(formats),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var format = _step.value;\n        formatsObj[format.name] = format.formatter;\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n\n    this._ajv = ajv({\n      formats: formatsObj,\n      loadSchema: function loadSchema(uri) {\n        return _this2._fetch(uri);\n      },\n      schemaId: 'auto',\n      passContext: true\n    });\n\n    this._ajv.addMetaSchema(require('ajv/lib/refs/json-schema-draft-04.json'));\n\n    this._ajv.addMetaSchema(require('ajv/lib/refs/json-schema-draft-06.json'));\n  }\n\n  _createClass(CoreSchemaRegistry, [{\n    key: \"_fetch\",\n    value: function _fetch(uri) {\n      var _this3 = this;\n\n      var maybeSchema = this._uriCache.get(uri);\n\n      if (maybeSchema) {\n        return Promise.resolve(maybeSchema);\n      } // Try all handlers, one after the other.\n\n\n      var _iterator2 = _createForOfIteratorHelper(this._uriHandlers),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var maybeHandler = _step2.value;\n          var handler = maybeHandler(uri);\n\n          if (handler) {\n            // The AJV API only understands Promises.\n            return rxjs_1.from(handler).pipe(operators_1.tap(function (json) {\n              return _this3._uriCache.set(uri, json);\n            })).toPromise();\n          }\n        } // If none are found, handle using http client.\n\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n\n      return new Promise(function (resolve, reject) {\n        var url = new Url.URL(uri);\n        var client = url.protocol === 'https:' ? https : http;\n        client.get(url, function (res) {\n          if (!res.statusCode || res.statusCode >= 300) {\n            // Consume the rest of the data to free memory.\n            res.resume();\n            reject(new Error(\"Request failed. Status Code: \".concat(res.statusCode)));\n          } else {\n            res.setEncoding('utf8');\n            var data = '';\n            res.on('data', function (chunk) {\n              data += chunk;\n            });\n            res.on('end', function () {\n              try {\n                var json = JSON.parse(data);\n\n                _this3._uriCache.set(uri, json);\n\n                resolve(json);\n              } catch (err) {\n                reject(err);\n              }\n            });\n          }\n        });\n      });\n    }\n    /**\n     * Add a transformation step before the validation of any Json.\n     * @param {JsonVisitor} visitor The visitor to transform every value.\n     * @param {JsonVisitor[]} deps A list of other visitors to run before.\n     */\n\n  }, {\n    key: \"addPreTransform\",\n    value: function addPreTransform(visitor, deps) {\n      this._pre.add(visitor, deps);\n    }\n    /**\n     * Add a transformation step after the validation of any Json. The JSON will not be validated\n     * after the POST, so if transformations are not compatible with the Schema it will not result\n     * in an error.\n     * @param {JsonVisitor} visitor The visitor to transform every value.\n     * @param {JsonVisitor[]} deps A list of other visitors to run before.\n     */\n\n  }, {\n    key: \"addPostTransform\",\n    value: function addPostTransform(visitor, deps) {\n      this._post.add(visitor, deps);\n    }\n  }, {\n    key: \"_resolver\",\n    value: function _resolver(ref, validate) {\n      if (!validate || !validate.refs || !validate.refVal || !ref) {\n        return {};\n      }\n\n      var refMap = validate;\n      var rootRefMap = validate.root; // Resolve from the root if it's different.\n\n      if (validate.root && validate.schema !== rootRefMap.schema) {\n        refMap = rootRefMap;\n      }\n\n      var schema = refMap.schema ? typeof refMap.schema == 'object' && refMap.schema : null;\n      var maybeId = schema ? schema.id || schema.$id : null;\n\n      if (typeof maybeId == 'string') {\n        ref = Url.resolve(maybeId, ref);\n      }\n\n      var fullReference = ref[0] === '#' && maybeId ? maybeId + ref : ref;\n\n      if (fullReference.endsWith('#')) {\n        fullReference = fullReference.slice(0, -1);\n      } // tslint:disable-next-line:no-any\n\n\n      var context = validate.refVal[validate.refs[fullReference]];\n\n      if (typeof context == 'function') {\n        // Context will be a function if the schema isn't loaded yet, and an actual schema if it's\n        // synchronously available.\n        return {\n          context: context,\n          schema: context && context.schema\n        };\n      } else {\n        return {\n          context: validate,\n          schema: context\n        };\n      }\n    }\n    /**\n     * Flatten the Schema, resolving and replacing all the refs. Makes it into a synchronous schema\n     * that is also easier to traverse. Does not cache the result.\n     *\n     * @param schema The schema or URI to flatten.\n     * @returns An Observable of the flattened schema object.\n     */\n\n  }, {\n    key: \"flatten\",\n    value: function flatten(schema) {\n      var _this4 = this;\n\n      this._ajv.removeSchema(schema); // Supports both synchronous and asynchronous compilation, by trying the synchronous\n      // version first, then if refs are missing this will fails.\n      // We also add any refs from external fetched schemas so that those will also be used\n      // in synchronous (if available).\n\n\n      var validator;\n\n      try {\n        this._currentCompilationSchemaInfo = undefined;\n        validator = rxjs_1.of(this._ajv.compile(schema)).pipe(operators_1.tap(function () {\n          return _this4._currentCompilationSchemaInfo = undefined;\n        }));\n      } catch (e) {\n        // Propagate the error.\n        if (!(e instanceof ajv.MissingRefError)) {\n          return rxjs_1.throwError(e);\n        }\n\n        this._currentCompilationSchemaInfo = undefined;\n        validator = rxjs_1.from(this._ajv.compileAsync(schema)).pipe(operators_1.tap(function () {\n          return _this4._currentCompilationSchemaInfo = undefined;\n        }));\n      }\n\n      return validator.pipe(operators_1.switchMap(function (validate) {\n        var self = _this4;\n\n        function visitor(current, pointer, parentSchema, index) {\n          if (current && parentSchema && index && interface_1.isJsonObject(current) && current.hasOwnProperty('$ref') && typeof current['$ref'] == 'string') {\n            var resolved = self._resolver(current['$ref'], validate);\n\n            if (resolved.schema) {\n              parentSchema[index] = resolved.schema;\n            }\n          }\n        }\n\n        var schema = utils_1.deepCopy(validate.schema);\n        visitor_1.visitJsonSchema(schema, visitor);\n        return rxjs_1.of(schema);\n      }));\n    }\n    /**\n     * Compile and return a validation function for the Schema.\n     *\n     * @param schema The schema to validate. If a string, will fetch the schema before compiling it\n     * (using schema as a URI).\n     * @returns An Observable of the Validation function.\n     */\n\n  }, {\n    key: \"compile\",\n    value: function compile(schema) {\n      var _this5 = this;\n\n      var schemaInfo = {\n        smartDefaultRecord: new Map(),\n        promptDefinitions: []\n      };\n\n      this._ajv.removeSchema(schema); // Supports both synchronous and asynchronous compilation, by trying the synchronous\n      // version first, then if refs are missing this will fails.\n      // We also add any refs from external fetched schemas so that those will also be used\n      // in synchronous (if available).\n\n\n      var validator;\n\n      try {\n        this._currentCompilationSchemaInfo = schemaInfo;\n        validator = rxjs_1.of(this._ajv.compile(schema));\n      } catch (e) {\n        // Propagate the error.\n        if (!(e instanceof ajv.MissingRefError)) {\n          return rxjs_1.throwError(e);\n        }\n\n        try {\n          validator = rxjs_1.from(this._ajv.compileAsync(schema));\n        } catch (e) {\n          return rxjs_1.throwError(e);\n        }\n      }\n\n      return validator.pipe(operators_1.map(function (validate) {\n        return function (data, options) {\n          var validationOptions = _objectSpread({\n            withPrompts: true,\n            applyPostTransforms: true,\n            applyPreTransforms: true\n          }, options);\n\n          var validationContext = {\n            promptFieldsWithValue: new Set()\n          };\n          var result = rxjs_1.of(data);\n\n          if (validationOptions.applyPreTransforms) {\n            var _result;\n\n            // tslint:disable-next-line:no-any https://github.com/ReactiveX/rxjs/issues/3989\n            result = (_result = result).pipe.apply(_result, _toConsumableArray(_toConsumableArray(_this5._pre).map(function (visitor) {\n              return operators_1.concatMap(function (data) {\n                return visitor_1.visitJson(data, visitor, schema, _this5._resolver, validate);\n              });\n            })));\n          }\n\n          return result.pipe(operators_1.switchMap(function (updateData) {\n            return _this5._applySmartDefaults(updateData, schemaInfo.smartDefaultRecord);\n          }), operators_1.switchMap(function (updatedData) {\n            if (validationOptions.withPrompts === false) {\n              return rxjs_1.of(updatedData);\n            }\n\n            var visitor = function visitor(value, pointer) {\n              if (value !== undefined) {\n                validationContext.promptFieldsWithValue.add(pointer);\n              }\n\n              return value;\n            };\n\n            if (schema === false || schema === true) {\n              return rxjs_1.of(updatedData);\n            }\n\n            return visitor_1.visitJson(updatedData, visitor, schema, _this5._resolver, validate);\n          }), operators_1.switchMap(function (updatedData) {\n            if (validationOptions.withPrompts === false) {\n              return rxjs_1.of(updatedData);\n            }\n\n            var definitions = schemaInfo.promptDefinitions.filter(function (def) {\n              return !validationContext.promptFieldsWithValue.has(def.id);\n            });\n\n            if (_this5._promptProvider && definitions.length > 0) {\n              return rxjs_1.from(_this5._applyPrompts(updatedData, definitions));\n            } else {\n              return rxjs_1.of(updatedData);\n            }\n          }), operators_1.switchMap(function (updatedData) {\n            var result = validate.call(validationContext, updatedData);\n            return typeof result === 'boolean' ? rxjs_1.of([updatedData, result]) : rxjs_1.from(result.then(function () {\n              return [updatedData, true];\n            }).catch(function (err) {\n              if (err.ajv) {\n                validate.errors = err.errors;\n                return Promise.resolve([updatedData, false]);\n              }\n\n              return Promise.reject(err);\n            }));\n          }), operators_1.switchMap(function (_ref) {\n            var _ref2 = _slicedToArray(_ref, 2),\n                data = _ref2[0],\n                valid = _ref2[1];\n\n            if (valid) {\n              var _result2 = rxjs_1.of(data);\n\n              if (validationOptions.applyPostTransforms) {\n                var _result3;\n\n                // tslint:disable-next-line:no-any https://github.com/ReactiveX/rxjs/issues/3989\n                _result2 = (_result3 = _result2).pipe.apply(_result3, _toConsumableArray(_toConsumableArray(_this5._post).map(function (visitor) {\n                  return operators_1.concatMap(function (data) {\n                    return visitor_1.visitJson(data, visitor, schema, _this5._resolver, validate);\n                  });\n                })));\n              }\n\n              return _result2.pipe(operators_1.map(function (data) {\n                return [data, valid];\n              }));\n            } else {\n              return rxjs_1.of([data, valid]);\n            }\n          }), operators_1.map(function (_ref3) {\n            var _ref4 = _slicedToArray(_ref3, 2),\n                data = _ref4[0],\n                valid = _ref4[1];\n\n            if (valid) {\n              return {\n                data: data,\n                success: true\n              };\n            }\n\n            return {\n              data: data,\n              success: false,\n              errors: validate.errors || []\n            };\n          }));\n        };\n      }));\n    }\n  }, {\n    key: \"addFormat\",\n    value: function addFormat(format) {\n      var validate = function validate(data) {\n        var result = format.formatter.validate(data);\n\n        if (typeof result == 'boolean') {\n          return result;\n        } else {\n          return result.toPromise();\n        }\n      };\n\n      this._ajv.addFormat(format.name, {\n        async: format.formatter.async,\n        validate: validate\n      });\n    }\n  }, {\n    key: \"addSmartDefaultProvider\",\n    value: function addSmartDefaultProvider(source, provider) {\n      var _this6 = this;\n\n      if (this._sourceMap.has(source)) {\n        throw new Error(source);\n      }\n\n      this._sourceMap.set(source, provider);\n\n      if (!this._smartDefaultKeyword) {\n        this._smartDefaultKeyword = true;\n\n        this._ajv.addKeyword('$default', {\n          errors: false,\n          valid: true,\n          compile: function compile(schema, _parentSchema, it) {\n            var compilationSchemInfo = _this6._currentCompilationSchemaInfo;\n\n            if (compilationSchemInfo === undefined) {\n              return function () {\n                return true;\n              };\n            } // We cheat, heavily.\n\n\n            compilationSchemInfo.smartDefaultRecord.set( // tslint:disable-next-line:no-any\n            JSON.stringify(it.dataPathArr.slice(1, it.dataLevel + 1)), schema);\n            return function () {\n              return true;\n            };\n          },\n          metaSchema: {\n            type: 'object',\n            properties: {\n              '$source': {\n                type: 'string'\n              }\n            },\n            additionalProperties: true,\n            required: ['$source']\n          }\n        });\n      }\n    }\n  }, {\n    key: \"registerUriHandler\",\n    value: function registerUriHandler(handler) {\n      this._uriHandlers.add(handler);\n    }\n  }, {\n    key: \"usePromptProvider\",\n    value: function usePromptProvider(provider) {\n      var _this7 = this;\n\n      var isSetup = !!this._promptProvider;\n      this._promptProvider = provider;\n\n      if (isSetup) {\n        return;\n      }\n\n      this._ajv.addKeyword('x-prompt', {\n        errors: false,\n        valid: true,\n        compile: function compile(schema, parentSchema, it) {\n          var compilationSchemInfo = _this7._currentCompilationSchemaInfo;\n\n          if (!compilationSchemInfo) {\n            return function () {\n              return true;\n            };\n          } // tslint:disable-next-line:no-any\n\n\n          var pathArray = it.dataPathArr.slice(1, it.dataLevel + 1);\n          var path = '/' + pathArray.map(function (p) {\n            return p.replace(/^\\'/, '').replace(/\\'$/, '');\n          }).join('/');\n          var type;\n          var items;\n          var message;\n\n          if (typeof schema == 'string') {\n            message = schema;\n          } else {\n            message = schema.message;\n            type = schema.type;\n            items = schema.items;\n          }\n\n          var propertyTypes = utility_1.getTypesOfSchema(parentSchema);\n\n          if (!type) {\n            if (propertyTypes.size === 1 && propertyTypes.has('boolean')) {\n              type = 'confirmation';\n            } else if (Array.isArray(parentSchema.enum)) {\n              type = 'list';\n            } else if (propertyTypes.size === 1 && propertyTypes.has('array') && parentSchema.items && Array.isArray(parentSchema.items.enum)) {\n              type = 'list';\n            } else {\n              type = 'input';\n            }\n          }\n\n          var multiselect;\n\n          if (type === 'list') {\n            multiselect = schema.multiselect === undefined ? propertyTypes.size === 1 && propertyTypes.has('array') : schema.multiselect;\n            var enumValues = multiselect ? parentSchema.items && parentSchema.items.enum : parentSchema.enum;\n\n            if (!items && Array.isArray(enumValues)) {\n              items = [];\n\n              var _iterator3 = _createForOfIteratorHelper(enumValues),\n                  _step3;\n\n              try {\n                for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n                  var value = _step3.value;\n\n                  if (typeof value == 'string') {\n                    items.push(value);\n                  } else if (typeof value == 'object') {// Invalid\n                  } else {\n                    items.push({\n                      label: value.toString(),\n                      value: value\n                    });\n                  }\n                }\n              } catch (err) {\n                _iterator3.e(err);\n              } finally {\n                _iterator3.f();\n              }\n            }\n          }\n\n          var definition = {\n            id: path,\n            type: type,\n            message: message,\n            raw: schema,\n            items: items,\n            multiselect: multiselect,\n            propertyTypes: propertyTypes,\n            default: typeof parentSchema.default == 'object' && parentSchema.default !== null && !Array.isArray(parentSchema.default) ? undefined : parentSchema.default,\n            validator: function validator(data) {\n              return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n                return _regeneratorRuntime.wrap(function _callee$(_context) {\n                  while (1) {\n                    switch (_context.prev = _context.next) {\n                      case 0:\n                        _context.prev = 0;\n                        _context.next = 3;\n                        return it.self.validate(parentSchema, data);\n\n                      case 3:\n                        return _context.abrupt(\"return\", _context.sent);\n\n                      case 6:\n                        _context.prev = 6;\n                        _context.t0 = _context[\"catch\"](0);\n                        return _context.abrupt(\"return\", false);\n\n                      case 9:\n                      case \"end\":\n                        return _context.stop();\n                    }\n                  }\n                }, _callee, null, [[0, 6]]);\n              }))();\n            }\n          };\n          compilationSchemInfo.promptDefinitions.push(definition);\n          return function () {\n            // If 'this' is undefined in the call, then it defaults to the global\n            // 'this'.\n            if (this && this.promptFieldsWithValue) {\n              this.promptFieldsWithValue.add(path);\n            }\n\n            return true;\n          };\n        },\n        metaSchema: {\n          oneOf: [{\n            type: 'string'\n          }, {\n            type: 'object',\n            properties: {\n              'type': {\n                type: 'string'\n              },\n              'message': {\n                type: 'string'\n              }\n            },\n            additionalProperties: true,\n            required: ['message']\n          }]\n        }\n      });\n    }\n  }, {\n    key: \"_applyPrompts\",\n    value: function _applyPrompts(data, prompts) {\n      var provider = this._promptProvider;\n\n      if (!provider) {\n        return rxjs_1.of(data);\n      }\n\n      return rxjs_1.from(provider(prompts)).pipe(operators_1.map(function (answers) {\n        for (var path in answers) {\n          var pathFragments = path.split('/').map(function (pf) {\n            if (/^\\d+$/.test(pf)) {\n              return pf;\n            } else {\n              return '\\'' + pf + '\\'';\n            }\n          });\n\n          CoreSchemaRegistry._set(data, pathFragments.slice(1), answers[path], null, undefined, true);\n        }\n\n        return data;\n      }));\n    }\n  }, {\n    key: \"_applySmartDefaults\",\n    value: function _applySmartDefaults(data, smartDefaults) {\n      var _rxjs_1$of,\n          _this8 = this;\n\n      // tslint:disable-next-line:no-any https://github.com/ReactiveX/rxjs/issues/3989\n      return (_rxjs_1$of = rxjs_1.of(data)).pipe.apply(_rxjs_1$of, _toConsumableArray(_toConsumableArray(smartDefaults.entries()).map(function (_ref5) {\n        var _ref6 = _slicedToArray(_ref5, 2),\n            pointer = _ref6[0],\n            schema = _ref6[1];\n\n        return operators_1.concatMap(function (data) {\n          var fragments = JSON.parse(pointer);\n\n          var source = _this8._sourceMap.get(schema.$source);\n\n          var value = source ? source(schema) : rxjs_1.of(undefined);\n\n          if (!rxjs_1.isObservable(value)) {\n            value = rxjs_1.of(value);\n          }\n\n          return value.pipe( // Synchronously set the new data at the proper JsonSchema path.\n          operators_1.tap(function (x) {\n            return CoreSchemaRegistry._set(data, fragments, x);\n          }), // But return the data object.\n          operators_1.map(function () {\n            return data;\n          }));\n        });\n      })));\n    }\n  }, {\n    key: \"useXDeprecatedProvider\",\n    value: function useXDeprecatedProvider(onUsage) {\n      this._ajv.addKeyword('x-deprecated', {\n        validate: function validate(schema, _data, _parentSchema, _dataPath, _parentDataObject, propertyName) {\n          if (schema) {\n            onUsage(\"Option \\\"\".concat(propertyName, \"\\\" is deprecated\").concat(typeof schema == 'string' ? ': ' + schema : '.'));\n          }\n\n          return true;\n        },\n        errors: false\n      });\n    }\n  }], [{\n    key: \"_set\",\n    value: function _set( // tslint:disable-next-line:no-any\n    data, fragments, value) {\n      var parent = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n      var parentProperty = arguments.length > 4 ? arguments[4] : undefined;\n      var force = arguments.length > 5 ? arguments[5] : undefined;\n\n      var _loop = function _loop(i) {\n        var f = fragments[i];\n\n        if (f[0] == 'i') {\n          if (!Array.isArray(data)) {\n            return {\n              v: void 0\n            };\n          }\n\n          for (var j = 0; j < data.length; j++) {\n            CoreSchemaRegistry._set(data[j], fragments.slice(i + 1), value, data, '' + j);\n          }\n\n          return {\n            v: void 0\n          };\n        } else if (f.startsWith('key')) {\n          if (typeof data !== 'object') {\n            return {\n              v: void 0\n            };\n          }\n\n          Object.getOwnPropertyNames(data).forEach(function (property) {\n            CoreSchemaRegistry._set(data[property], fragments.slice(i + 1), value, data, property);\n          });\n          return {\n            v: void 0\n          };\n        } else if (f.startsWith('\\'') && f[f.length - 1] == '\\'') {\n          var property = f.slice(1, -1).replace(/\\\\'/g, '\\'').replace(/\\\\n/g, '\\n').replace(/\\\\r/g, '\\r').replace(/\\\\f/g, '\\f').replace(/\\\\t/g, '\\t'); // We know we need an object because the fragment is a property key.\n\n          if (!data && parent !== null && parentProperty) {\n            data = parent[parentProperty] = {};\n          }\n\n          parent = data;\n          parentProperty = property;\n          data = data[property];\n        } else {\n          return {\n            v: void 0\n          };\n        }\n      };\n\n      for (var i = 0; i < fragments.length; i++) {\n        var _ret = _loop(i);\n\n        if (typeof _ret === \"object\") return _ret.v;\n      }\n\n      if (parent && parentProperty && (force || parent[parentProperty] === undefined)) {\n        parent[parentProperty] = value;\n      }\n    }\n  }]);\n\n  return CoreSchemaRegistry;\n}();\n\nexports.CoreSchemaRegistry = CoreSchemaRegistry;","map":{"version":3,"sources":["/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@angular-devkit/build-angular/node_modules/@angular-devkit/core/src/json/schema/registry.js"],"names":["Object","defineProperty","exports","value","CoreSchemaRegistry","SchemaValidationException","ajv","require","http","https","rxjs_1","operators_1","Url","exception_1","utils_1","interface_1","utility_1","visitor_1","errors","baseMessage","length","messages","createMessages","join","map","err","message","JSON","stringify","dataPath","keyword","params","additionalProperty","BaseException","formats","_uriCache","Map","_uriHandlers","Set","_pre","PartiallyOrderedSet","_post","_smartDefaultKeyword","_sourceMap","formatsObj","format","name","formatter","_ajv","loadSchema","uri","_fetch","schemaId","passContext","addMetaSchema","maybeSchema","get","Promise","resolve","maybeHandler","handler","from","pipe","tap","json","set","toPromise","reject","url","URL","client","protocol","res","statusCode","resume","Error","setEncoding","data","on","chunk","parse","visitor","deps","add","ref","validate","refs","refVal","refMap","rootRefMap","root","schema","maybeId","id","$id","fullReference","endsWith","slice","context","removeSchema","validator","_currentCompilationSchemaInfo","undefined","of","compile","e","MissingRefError","throwError","compileAsync","switchMap","self","current","pointer","parentSchema","index","isJsonObject","hasOwnProperty","resolved","_resolver","deepCopy","visitJsonSchema","schemaInfo","smartDefaultRecord","promptDefinitions","options","validationOptions","withPrompts","applyPostTransforms","applyPreTransforms","validationContext","promptFieldsWithValue","result","concatMap","visitJson","updateData","_applySmartDefaults","updatedData","definitions","filter","def","has","_promptProvider","_applyPrompts","call","then","catch","valid","success","addFormat","async","source","provider","addKeyword","_parentSchema","it","compilationSchemInfo","dataPathArr","dataLevel","metaSchema","type","properties","additionalProperties","required","isSetup","pathArray","path","p","replace","items","propertyTypes","getTypesOfSchema","size","Array","isArray","enum","multiselect","enumValues","push","label","toString","definition","raw","default","oneOf","prompts","answers","pathFragments","split","pf","test","_set","smartDefaults","entries","fragments","$source","isObservable","x","onUsage","_data","_dataPath","_parentDataObject","propertyName","parent","parentProperty","force","i","f","j","startsWith","getOwnPropertyNames","forEach","property"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CoreSchemaRegistry = exports.SchemaValidationException = void 0;\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst ajv = require(\"ajv\");\nconst http = require(\"http\");\nconst https = require(\"https\");\nconst rxjs_1 = require(\"rxjs\");\nconst operators_1 = require(\"rxjs/operators\");\nconst Url = require(\"url\");\nconst exception_1 = require(\"../../exception/exception\");\nconst utils_1 = require(\"../../utils\");\nconst interface_1 = require(\"../interface\");\nconst utility_1 = require(\"./utility\");\nconst visitor_1 = require(\"./visitor\");\nclass SchemaValidationException extends exception_1.BaseException {\n    constructor(errors, baseMessage = 'Schema validation failed with the following errors:') {\n        if (!errors || errors.length === 0) {\n            super('Schema validation failed.');\n            this.errors = [];\n            return;\n        }\n        const messages = SchemaValidationException.createMessages(errors);\n        super(`${baseMessage}\\n  ${messages.join('\\n  ')}`);\n        this.errors = errors;\n    }\n    static createMessages(errors) {\n        if (!errors || errors.length === 0) {\n            return [];\n        }\n        const messages = errors.map((err) => {\n            let message = `Data path ${JSON.stringify(err.dataPath)} ${err.message}`;\n            if (err.keyword === 'additionalProperties') {\n                message += `(${err.params.additionalProperty})`;\n            }\n            return message + '.';\n        });\n        return messages;\n    }\n}\nexports.SchemaValidationException = SchemaValidationException;\nclass CoreSchemaRegistry {\n    constructor(formats = []) {\n        /**\n         * Build an AJV instance that will be used to validate schemas.\n         */\n        this._uriCache = new Map();\n        this._uriHandlers = new Set();\n        this._pre = new utils_1.PartiallyOrderedSet();\n        this._post = new utils_1.PartiallyOrderedSet();\n        this._smartDefaultKeyword = false;\n        this._sourceMap = new Map();\n        const formatsObj = {};\n        for (const format of formats) {\n            formatsObj[format.name] = format.formatter;\n        }\n        this._ajv = ajv({\n            formats: formatsObj,\n            loadSchema: (uri) => this._fetch(uri),\n            schemaId: 'auto',\n            passContext: true,\n        });\n        this._ajv.addMetaSchema(require('ajv/lib/refs/json-schema-draft-04.json'));\n        this._ajv.addMetaSchema(require('ajv/lib/refs/json-schema-draft-06.json'));\n    }\n    _fetch(uri) {\n        const maybeSchema = this._uriCache.get(uri);\n        if (maybeSchema) {\n            return Promise.resolve(maybeSchema);\n        }\n        // Try all handlers, one after the other.\n        for (const maybeHandler of this._uriHandlers) {\n            const handler = maybeHandler(uri);\n            if (handler) {\n                // The AJV API only understands Promises.\n                return rxjs_1.from(handler).pipe(operators_1.tap(json => this._uriCache.set(uri, json))).toPromise();\n            }\n        }\n        // If none are found, handle using http client.\n        return new Promise((resolve, reject) => {\n            const url = new Url.URL(uri);\n            const client = url.protocol === 'https:' ? https : http;\n            client.get(url, res => {\n                if (!res.statusCode || res.statusCode >= 300) {\n                    // Consume the rest of the data to free memory.\n                    res.resume();\n                    reject(new Error(`Request failed. Status Code: ${res.statusCode}`));\n                }\n                else {\n                    res.setEncoding('utf8');\n                    let data = '';\n                    res.on('data', chunk => {\n                        data += chunk;\n                    });\n                    res.on('end', () => {\n                        try {\n                            const json = JSON.parse(data);\n                            this._uriCache.set(uri, json);\n                            resolve(json);\n                        }\n                        catch (err) {\n                            reject(err);\n                        }\n                    });\n                }\n            });\n        });\n    }\n    /**\n     * Add a transformation step before the validation of any Json.\n     * @param {JsonVisitor} visitor The visitor to transform every value.\n     * @param {JsonVisitor[]} deps A list of other visitors to run before.\n     */\n    addPreTransform(visitor, deps) {\n        this._pre.add(visitor, deps);\n    }\n    /**\n     * Add a transformation step after the validation of any Json. The JSON will not be validated\n     * after the POST, so if transformations are not compatible with the Schema it will not result\n     * in an error.\n     * @param {JsonVisitor} visitor The visitor to transform every value.\n     * @param {JsonVisitor[]} deps A list of other visitors to run before.\n     */\n    addPostTransform(visitor, deps) {\n        this._post.add(visitor, deps);\n    }\n    _resolver(ref, validate) {\n        if (!validate || !validate.refs || !validate.refVal || !ref) {\n            return {};\n        }\n        let refMap = validate;\n        const rootRefMap = validate.root;\n        // Resolve from the root if it's different.\n        if (validate.root && validate.schema !== rootRefMap.schema) {\n            refMap = rootRefMap;\n        }\n        const schema = refMap.schema ? typeof refMap.schema == 'object' && refMap.schema : null;\n        const maybeId = schema ? schema.id || schema.$id : null;\n        if (typeof maybeId == 'string') {\n            ref = Url.resolve(maybeId, ref);\n        }\n        let fullReference = (ref[0] === '#' && maybeId) ? maybeId + ref : ref;\n        if (fullReference.endsWith('#')) {\n            fullReference = fullReference.slice(0, -1);\n        }\n        // tslint:disable-next-line:no-any\n        const context = validate.refVal[validate.refs[fullReference]];\n        if (typeof context == 'function') {\n            // Context will be a function if the schema isn't loaded yet, and an actual schema if it's\n            // synchronously available.\n            return { context, schema: context && context.schema };\n        }\n        else {\n            return { context: validate, schema: context };\n        }\n    }\n    /**\n     * Flatten the Schema, resolving and replacing all the refs. Makes it into a synchronous schema\n     * that is also easier to traverse. Does not cache the result.\n     *\n     * @param schema The schema or URI to flatten.\n     * @returns An Observable of the flattened schema object.\n     */\n    flatten(schema) {\n        this._ajv.removeSchema(schema);\n        // Supports both synchronous and asynchronous compilation, by trying the synchronous\n        // version first, then if refs are missing this will fails.\n        // We also add any refs from external fetched schemas so that those will also be used\n        // in synchronous (if available).\n        let validator;\n        try {\n            this._currentCompilationSchemaInfo = undefined;\n            validator = rxjs_1.of(this._ajv.compile(schema)).pipe(operators_1.tap(() => this._currentCompilationSchemaInfo = undefined));\n        }\n        catch (e) {\n            // Propagate the error.\n            if (!(e instanceof ajv.MissingRefError)) {\n                return rxjs_1.throwError(e);\n            }\n            this._currentCompilationSchemaInfo = undefined;\n            validator = rxjs_1.from(this._ajv.compileAsync(schema)).pipe(operators_1.tap(() => this._currentCompilationSchemaInfo = undefined));\n        }\n        return validator.pipe(operators_1.switchMap(validate => {\n            const self = this;\n            function visitor(current, pointer, parentSchema, index) {\n                if (current\n                    && parentSchema\n                    && index\n                    && interface_1.isJsonObject(current)\n                    && current.hasOwnProperty('$ref')\n                    && typeof current['$ref'] == 'string') {\n                    const resolved = self._resolver(current['$ref'], validate);\n                    if (resolved.schema) {\n                        parentSchema[index] = resolved.schema;\n                    }\n                }\n            }\n            const schema = utils_1.deepCopy(validate.schema);\n            visitor_1.visitJsonSchema(schema, visitor);\n            return rxjs_1.of(schema);\n        }));\n    }\n    /**\n     * Compile and return a validation function for the Schema.\n     *\n     * @param schema The schema to validate. If a string, will fetch the schema before compiling it\n     * (using schema as a URI).\n     * @returns An Observable of the Validation function.\n     */\n    compile(schema) {\n        const schemaInfo = {\n            smartDefaultRecord: new Map(),\n            promptDefinitions: [],\n        };\n        this._ajv.removeSchema(schema);\n        // Supports both synchronous and asynchronous compilation, by trying the synchronous\n        // version first, then if refs are missing this will fails.\n        // We also add any refs from external fetched schemas so that those will also be used\n        // in synchronous (if available).\n        let validator;\n        try {\n            this._currentCompilationSchemaInfo = schemaInfo;\n            validator = rxjs_1.of(this._ajv.compile(schema));\n        }\n        catch (e) {\n            // Propagate the error.\n            if (!(e instanceof ajv.MissingRefError)) {\n                return rxjs_1.throwError(e);\n            }\n            try {\n                validator = rxjs_1.from(this._ajv.compileAsync(schema));\n            }\n            catch (e) {\n                return rxjs_1.throwError(e);\n            }\n        }\n        return validator\n            .pipe(operators_1.map(validate => (data, options) => {\n            const validationOptions = {\n                withPrompts: true,\n                applyPostTransforms: true,\n                applyPreTransforms: true,\n                ...options,\n            };\n            const validationContext = {\n                promptFieldsWithValue: new Set(),\n            };\n            let result = rxjs_1.of(data);\n            if (validationOptions.applyPreTransforms) {\n                // tslint:disable-next-line:no-any https://github.com/ReactiveX/rxjs/issues/3989\n                result = result.pipe(...[...this._pre].map(visitor => operators_1.concatMap((data) => {\n                    return visitor_1.visitJson(data, visitor, schema, this._resolver, validate);\n                })));\n            }\n            return result.pipe(operators_1.switchMap(updateData => this._applySmartDefaults(updateData, schemaInfo.smartDefaultRecord)), operators_1.switchMap(updatedData => {\n                if (validationOptions.withPrompts === false) {\n                    return rxjs_1.of(updatedData);\n                }\n                const visitor = (value, pointer) => {\n                    if (value !== undefined) {\n                        validationContext.promptFieldsWithValue.add(pointer);\n                    }\n                    return value;\n                };\n                if (schema === false || schema === true) {\n                    return rxjs_1.of(updatedData);\n                }\n                return visitor_1.visitJson(updatedData, visitor, schema, this._resolver, validate);\n            }), operators_1.switchMap(updatedData => {\n                if (validationOptions.withPrompts === false) {\n                    return rxjs_1.of(updatedData);\n                }\n                const definitions = schemaInfo.promptDefinitions\n                    .filter(def => !validationContext.promptFieldsWithValue.has(def.id));\n                if (this._promptProvider && definitions.length > 0) {\n                    return rxjs_1.from(this._applyPrompts(updatedData, definitions));\n                }\n                else {\n                    return rxjs_1.of(updatedData);\n                }\n            }), operators_1.switchMap(updatedData => {\n                const result = validate.call(validationContext, updatedData);\n                return typeof result === 'boolean'\n                    ? rxjs_1.of([updatedData, result])\n                    : rxjs_1.from(result\n                        .then(() => [updatedData, true])\n                        .catch((err) => {\n                        if (err.ajv) {\n                            validate.errors = err.errors;\n                            return Promise.resolve([updatedData, false]);\n                        }\n                        return Promise.reject(err);\n                    }));\n            }), operators_1.switchMap(([data, valid]) => {\n                if (valid) {\n                    let result = rxjs_1.of(data);\n                    if (validationOptions.applyPostTransforms) {\n                        // tslint:disable-next-line:no-any https://github.com/ReactiveX/rxjs/issues/3989\n                        result = result.pipe(...[...this._post].map(visitor => operators_1.concatMap((data) => {\n                            return visitor_1.visitJson(data, visitor, schema, this._resolver, validate);\n                        })));\n                    }\n                    return result.pipe(operators_1.map(data => [data, valid]));\n                }\n                else {\n                    return rxjs_1.of([data, valid]);\n                }\n            }), operators_1.map(([data, valid]) => {\n                if (valid) {\n                    return { data, success: true };\n                }\n                return {\n                    data,\n                    success: false,\n                    errors: (validate.errors || []),\n                };\n            }));\n        }));\n    }\n    addFormat(format) {\n        const validate = (data) => {\n            const result = format.formatter.validate(data);\n            if (typeof result == 'boolean') {\n                return result;\n            }\n            else {\n                return result.toPromise();\n            }\n        };\n        this._ajv.addFormat(format.name, {\n            async: format.formatter.async,\n            validate,\n        });\n    }\n    addSmartDefaultProvider(source, provider) {\n        if (this._sourceMap.has(source)) {\n            throw new Error(source);\n        }\n        this._sourceMap.set(source, provider);\n        if (!this._smartDefaultKeyword) {\n            this._smartDefaultKeyword = true;\n            this._ajv.addKeyword('$default', {\n                errors: false,\n                valid: true,\n                compile: (schema, _parentSchema, it) => {\n                    const compilationSchemInfo = this._currentCompilationSchemaInfo;\n                    if (compilationSchemInfo === undefined) {\n                        return () => true;\n                    }\n                    // We cheat, heavily.\n                    compilationSchemInfo.smartDefaultRecord.set(\n                    // tslint:disable-next-line:no-any\n                    JSON.stringify(it.dataPathArr.slice(1, it.dataLevel + 1)), schema);\n                    return () => true;\n                },\n                metaSchema: {\n                    type: 'object',\n                    properties: {\n                        '$source': { type: 'string' },\n                    },\n                    additionalProperties: true,\n                    required: ['$source'],\n                },\n            });\n        }\n    }\n    registerUriHandler(handler) {\n        this._uriHandlers.add(handler);\n    }\n    usePromptProvider(provider) {\n        const isSetup = !!this._promptProvider;\n        this._promptProvider = provider;\n        if (isSetup) {\n            return;\n        }\n        this._ajv.addKeyword('x-prompt', {\n            errors: false,\n            valid: true,\n            compile: (schema, parentSchema, it) => {\n                const compilationSchemInfo = this._currentCompilationSchemaInfo;\n                if (!compilationSchemInfo) {\n                    return () => true;\n                }\n                // tslint:disable-next-line:no-any\n                const pathArray = it.dataPathArr.slice(1, it.dataLevel + 1);\n                const path = '/' + pathArray.map(p => p.replace(/^\\'/, '').replace(/\\'$/, '')).join('/');\n                let type;\n                let items;\n                let message;\n                if (typeof schema == 'string') {\n                    message = schema;\n                }\n                else {\n                    message = schema.message;\n                    type = schema.type;\n                    items = schema.items;\n                }\n                const propertyTypes = utility_1.getTypesOfSchema(parentSchema);\n                if (!type) {\n                    if (propertyTypes.size === 1 && propertyTypes.has('boolean')) {\n                        type = 'confirmation';\n                    }\n                    else if (Array.isArray(parentSchema.enum)) {\n                        type = 'list';\n                    }\n                    else if (propertyTypes.size === 1 &&\n                        propertyTypes.has('array') &&\n                        parentSchema.items &&\n                        Array.isArray(parentSchema.items.enum)) {\n                        type = 'list';\n                    }\n                    else {\n                        type = 'input';\n                    }\n                }\n                let multiselect;\n                if (type === 'list') {\n                    multiselect =\n                        schema.multiselect === undefined\n                            ? propertyTypes.size === 1 && propertyTypes.has('array')\n                            : schema.multiselect;\n                    const enumValues = multiselect\n                        ? parentSchema.items && parentSchema.items.enum\n                        : parentSchema.enum;\n                    if (!items && Array.isArray(enumValues)) {\n                        items = [];\n                        for (const value of enumValues) {\n                            if (typeof value == 'string') {\n                                items.push(value);\n                            }\n                            else if (typeof value == 'object') {\n                                // Invalid\n                            }\n                            else {\n                                items.push({ label: value.toString(), value });\n                            }\n                        }\n                    }\n                }\n                const definition = {\n                    id: path,\n                    type,\n                    message,\n                    raw: schema,\n                    items,\n                    multiselect,\n                    propertyTypes,\n                    default: typeof parentSchema.default == 'object' &&\n                        parentSchema.default !== null &&\n                        !Array.isArray(parentSchema.default)\n                        ? undefined\n                        : parentSchema.default,\n                    async validator(data) {\n                        try {\n                            return await it.self.validate(parentSchema, data);\n                        }\n                        catch (_a) {\n                            return false;\n                        }\n                    },\n                };\n                compilationSchemInfo.promptDefinitions.push(definition);\n                return function () {\n                    // If 'this' is undefined in the call, then it defaults to the global\n                    // 'this'.\n                    if (this && this.promptFieldsWithValue) {\n                        this.promptFieldsWithValue.add(path);\n                    }\n                    return true;\n                };\n            },\n            metaSchema: {\n                oneOf: [\n                    { type: 'string' },\n                    {\n                        type: 'object',\n                        properties: {\n                            'type': { type: 'string' },\n                            'message': { type: 'string' },\n                        },\n                        additionalProperties: true,\n                        required: ['message'],\n                    },\n                ],\n            },\n        });\n    }\n    _applyPrompts(data, prompts) {\n        const provider = this._promptProvider;\n        if (!provider) {\n            return rxjs_1.of(data);\n        }\n        return rxjs_1.from(provider(prompts)).pipe(operators_1.map(answers => {\n            for (const path in answers) {\n                const pathFragments = path.split('/').map(pf => {\n                    if (/^\\d+$/.test(pf)) {\n                        return pf;\n                    }\n                    else {\n                        return '\\'' + pf + '\\'';\n                    }\n                });\n                CoreSchemaRegistry._set(data, pathFragments.slice(1), answers[path], null, undefined, true);\n            }\n            return data;\n        }));\n    }\n    static _set(\n    // tslint:disable-next-line:no-any\n    data, fragments, value, \n    // tslint:disable-next-line:no-any\n    parent = null, parentProperty, force) {\n        for (let i = 0; i < fragments.length; i++) {\n            const f = fragments[i];\n            if (f[0] == 'i') {\n                if (!Array.isArray(data)) {\n                    return;\n                }\n                for (let j = 0; j < data.length; j++) {\n                    CoreSchemaRegistry._set(data[j], fragments.slice(i + 1), value, data, '' + j);\n                }\n                return;\n            }\n            else if (f.startsWith('key')) {\n                if (typeof data !== 'object') {\n                    return;\n                }\n                Object.getOwnPropertyNames(data).forEach(property => {\n                    CoreSchemaRegistry._set(data[property], fragments.slice(i + 1), value, data, property);\n                });\n                return;\n            }\n            else if (f.startsWith('\\'') && f[f.length - 1] == '\\'') {\n                const property = f\n                    .slice(1, -1)\n                    .replace(/\\\\'/g, '\\'')\n                    .replace(/\\\\n/g, '\\n')\n                    .replace(/\\\\r/g, '\\r')\n                    .replace(/\\\\f/g, '\\f')\n                    .replace(/\\\\t/g, '\\t');\n                // We know we need an object because the fragment is a property key.\n                if (!data && parent !== null && parentProperty) {\n                    data = parent[parentProperty] = {};\n                }\n                parent = data;\n                parentProperty = property;\n                data = data[property];\n            }\n            else {\n                return;\n            }\n        }\n        if (parent && parentProperty && (force || parent[parentProperty] === undefined)) {\n            parent[parentProperty] = value;\n        }\n    }\n    _applySmartDefaults(data, smartDefaults) {\n        // tslint:disable-next-line:no-any https://github.com/ReactiveX/rxjs/issues/3989\n        return rxjs_1.of(data).pipe(...[...smartDefaults.entries()].map(([pointer, schema]) => {\n            return operators_1.concatMap(data => {\n                const fragments = JSON.parse(pointer);\n                const source = this._sourceMap.get(schema.$source);\n                let value = source ? source(schema) : rxjs_1.of(undefined);\n                if (!rxjs_1.isObservable(value)) {\n                    value = rxjs_1.of(value);\n                }\n                return value.pipe(\n                // Synchronously set the new data at the proper JsonSchema path.\n                operators_1.tap(x => CoreSchemaRegistry._set(data, fragments, x)), \n                // But return the data object.\n                operators_1.map(() => data));\n            });\n        }));\n    }\n    useXDeprecatedProvider(onUsage) {\n        this._ajv.addKeyword('x-deprecated', {\n            validate: (schema, _data, _parentSchema, _dataPath, _parentDataObject, propertyName) => {\n                if (schema) {\n                    onUsage(`Option \"${propertyName}\" is deprecated${typeof schema == 'string' ? ': ' + schema : '.'}`);\n                }\n                return true;\n            },\n            errors: false,\n        });\n    }\n}\nexports.CoreSchemaRegistry = CoreSchemaRegistry;\n"]},"metadata":{},"sourceType":"script"}