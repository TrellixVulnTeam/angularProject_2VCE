{"ast":null,"code":"/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n(function (factory) {\n  if (typeof module === \"object\" && typeof module.exports === \"object\") {\n    var v = factory(require, exports);\n    if (v !== undefined) module.exports = v;\n  } else if (typeof define === \"function\" && define.amd) {\n    define(\"@angular/compiler/src/render3/view/i18n/icu_serializer\", [\"require\", \"exports\", \"@angular/compiler/src/render3/view/i18n/util\"], factory);\n  }\n})(function (require, exports) {\n  \"use strict\";\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.serializeIcuNode = void 0;\n\n  var util_1 = require(\"@angular/compiler/src/render3/view/i18n/util\");\n\n  var IcuSerializerVisitor =\n  /** @class */\n  function () {\n    function IcuSerializerVisitor() {}\n\n    IcuSerializerVisitor.prototype.visitText = function (text) {\n      return text.value;\n    };\n\n    IcuSerializerVisitor.prototype.visitContainer = function (container) {\n      var _this = this;\n\n      return container.children.map(function (child) {\n        return child.visit(_this);\n      }).join('');\n    };\n\n    IcuSerializerVisitor.prototype.visitIcu = function (icu) {\n      var _this = this;\n\n      var strCases = Object.keys(icu.cases).map(function (k) {\n        return k + \" {\" + icu.cases[k].visit(_this) + \"}\";\n      });\n      var result = \"{\" + icu.expressionPlaceholder + \", \" + icu.type + \", \" + strCases.join(' ') + \"}\";\n      return result;\n    };\n\n    IcuSerializerVisitor.prototype.visitTagPlaceholder = function (ph) {\n      var _this = this;\n\n      return ph.isVoid ? this.formatPh(ph.startName) : \"\" + this.formatPh(ph.startName) + ph.children.map(function (child) {\n        return child.visit(_this);\n      }).join('') + this.formatPh(ph.closeName);\n    };\n\n    IcuSerializerVisitor.prototype.visitPlaceholder = function (ph) {\n      return this.formatPh(ph.name);\n    };\n\n    IcuSerializerVisitor.prototype.visitIcuPlaceholder = function (ph, context) {\n      return this.formatPh(ph.name);\n    };\n\n    IcuSerializerVisitor.prototype.formatPh = function (value) {\n      return \"{\" + util_1.formatI18nPlaceholderName(value,\n      /* useCamelCase */\n      false) + \"}\";\n    };\n\n    return IcuSerializerVisitor;\n  }();\n\n  var serializer = new IcuSerializerVisitor();\n\n  function serializeIcuNode(icu) {\n    return icu.visit(serializer);\n  }\n\n  exports.serializeIcuNode = serializeIcuNode;\n});","map":{"version":3,"sources":["../../../../../../../../../packages/compiler/src/render3/view/i18n/icu_serializer.ts"],"names":[],"mappings":"AAAA;;;;;;AAMG;;;;;;;;;;;;;;;;AAIH,MAAA,MAAA,GAAA,OAAA,CAAA,8CAAA,CAAA;;AAEA,MAAA,oBAAA;AAAA;AAAA,cAAA;AAAA,aAAA,oBAAA,GAAA,CAkCC;;AAjCC,IAAA,oBAAA,CAAA,SAAA,CAAA,SAAA,GAAA,UAAU,IAAV,EAAyB;AACvB,aAAO,IAAI,CAAC,KAAZ;AACD,KAFD;;AAIA,IAAA,oBAAA,CAAA,SAAA,CAAA,cAAA,GAAA,UAAe,SAAf,EAAwC;AAAxC,UAAA,KAAA,GAAA,IAAA;;AACE,aAAO,SAAS,CAAC,QAAV,CAAmB,GAAnB,CAAuB,UAAA,KAAA,EAAK;AAAI,eAAA,KAAK,CAAC,KAAN,CAAA,KAAA,CAAA;AAAiB,OAAjD,EAAmD,IAAnD,CAAwD,EAAxD,CAAP;AACD,KAFD;;AAIA,IAAA,oBAAA,CAAA,SAAA,CAAA,QAAA,GAAA,UAAS,GAAT,EAAsB;AAAtB,UAAA,KAAA,GAAA,IAAA;;AACE,UAAM,QAAQ,GACV,MAAM,CAAC,IAAP,CAAY,GAAG,CAAC,KAAhB,EAAuB,GAAvB,CAA2B,UAAC,CAAD,EAAU;AAAK,eAAG,CAAC,GAAA,IAAD,GAAM,GAAG,CAAC,KAAJ,CAAU,CAAV,EAAa,KAAb,CAAmB,KAAnB,CAAN,GAAH,GAAA;AAAoC,OAA9E,CADJ;AAEA,UAAM,MAAM,GAAG,MAAI,GAAG,CAAC,qBAAR,GAA6B,IAA7B,GAAkC,GAAG,CAAC,IAAtC,GAA0C,IAA1C,GAA+C,QAAQ,CAAC,IAAT,CAAc,GAAd,CAA/C,GAAiE,GAAhF;AACA,aAAO,MAAP;AACD,KALD;;AAOA,IAAA,oBAAA,CAAA,SAAA,CAAA,mBAAA,GAAA,UAAoB,EAApB,EAA2C;AAA3C,UAAA,KAAA,GAAA,IAAA;;AACE,aAAO,EAAE,CAAC,MAAH,GACH,KAAK,QAAL,CAAc,EAAE,CAAC,SAAjB,CADG,GAEH,KAAG,KAAK,QAAL,CAAc,EAAE,CAAC,SAAjB,CAAH,GAAiC,EAAE,CAAC,QAAH,CAAY,GAAZ,CAAgB,UAAA,KAAA,EAAK;AAAI,eAAA,KAAK,CAAC,KAAN,CAAA,KAAA,CAAA;AAAiB,OAA1C,EAA4C,IAA5C,CAAiD,EAAjD,CAAjC,GACI,KAAK,QAAL,CAAc,EAAE,CAAC,SAAjB,CAHR;AAID,KALD;;AAOA,IAAA,oBAAA,CAAA,SAAA,CAAA,gBAAA,GAAA,UAAiB,EAAjB,EAAqC;AACnC,aAAO,KAAK,QAAL,CAAc,EAAE,CAAC,IAAjB,CAAP;AACD,KAFD;;AAIA,IAAA,oBAAA,CAAA,SAAA,CAAA,mBAAA,GAAA,UAAoB,EAApB,EAA6C,OAA7C,EAA0D;AACxD,aAAO,KAAK,QAAL,CAAc,EAAE,CAAC,IAAjB,CAAP;AACD,KAFD;;AAIQ,IAAA,oBAAA,CAAA,SAAA,CAAA,QAAA,GAAR,UAAiB,KAAjB,EAA8B;AAC5B,aAAO,MAAI,MAAA,CAAA,yBAAA,CAA0B,KAA1B;AAAiC;AAAmB,WAApD,CAAJ,GAA8D,GAArE;AACD,KAFO;;AAGV,WAAA,oBAAA;AAAC,GAlCD,EAAA;;AAoCA,MAAM,UAAU,GAAG,IAAI,oBAAJ,EAAnB;;AACA,WAAgB,gBAAhB,CAAiC,GAAjC,EAA8C;AAC5C,WAAO,GAAG,CAAC,KAAJ,CAAU,UAAV,CAAP;AACD;;AAFD,EAAA,OAAA,CAAA,gBAAA,GAAA,gBAAA","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport * as i18n from '../../../i18n/i18n_ast';\n\nimport {formatI18nPlaceholderName} from './util';\n\nclass IcuSerializerVisitor implements i18n.Visitor {\n  visitText(text: i18n.Text): any {\n    return text.value;\n  }\n\n  visitContainer(container: i18n.Container): any {\n    return container.children.map(child => child.visit(this)).join('');\n  }\n\n  visitIcu(icu: i18n.Icu): any {\n    const strCases =\n        Object.keys(icu.cases).map((k: string) => `${k} {${icu.cases[k].visit(this)}}`);\n    const result = `{${icu.expressionPlaceholder}, ${icu.type}, ${strCases.join(' ')}}`;\n    return result;\n  }\n\n  visitTagPlaceholder(ph: i18n.TagPlaceholder): any {\n    return ph.isVoid ?\n        this.formatPh(ph.startName) :\n        `${this.formatPh(ph.startName)}${ph.children.map(child => child.visit(this)).join('')}${\n            this.formatPh(ph.closeName)}`;\n  }\n\n  visitPlaceholder(ph: i18n.Placeholder): any {\n    return this.formatPh(ph.name);\n  }\n\n  visitIcuPlaceholder(ph: i18n.IcuPlaceholder, context?: any): any {\n    return this.formatPh(ph.name);\n  }\n\n  private formatPh(value: string): string {\n    return `{${formatI18nPlaceholderName(value, /* useCamelCase */ false)}}`;\n  }\n}\n\nconst serializer = new IcuSerializerVisitor();\nexport function serializeIcuNode(icu: i18n.Icu): string {\n  return icu.visit(serializer);\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}