{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nvar _toConsumableArray = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/toConsumableArray\");\n\nvar _createClass = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar _createForOfIteratorHelper = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _classCallCheck = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar path_1 = require(\"path\");\n\nvar sourceMapSupport = require(\"source-map-support\");\n\nvar yn_1 = require(\"yn\");\n\nvar make_error_1 = require(\"make-error\");\n\nvar util = require(\"util\");\n/**\n * @internal\n */\n\n\nexports.INSPECT_CUSTOM = util.inspect.custom || 'inspect';\n/**\n * Debugging `ts-node`.\n */\n\nvar shouldDebug = yn_1.default(process.env.TS_NODE_DEBUG);\nvar debug = shouldDebug ? console.log.bind(console, 'ts-node') : function () {\n  return undefined;\n};\nvar debugFn = shouldDebug ? function (key, fn) {\n  var i = 0;\n  return function (x) {\n    debug(key, x, ++i);\n    return fn(x);\n  };\n} : function (_, fn) {\n  return fn;\n};\n/**\n * Export the current version.\n */\n\nexports.VERSION = require('../package.json').version;\n/**\n * Track the project information.\n */\n\nvar MemoryCache = function MemoryCache() {\n  var rootFileNames = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n\n  _classCallCheck(this, MemoryCache);\n\n  this.fileContents = new Map();\n  this.fileVersions = new Map();\n\n  var _iterator = _createForOfIteratorHelper(rootFileNames),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var fileName = _step.value;\n      this.fileVersions.set(fileName, 1);\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n};\n/**\n * Default register options.\n */\n\n\nexports.DEFAULTS = {\n  files: yn_1.default(process.env['TS_NODE_FILES']),\n  pretty: yn_1.default(process.env['TS_NODE_PRETTY']),\n  compiler: process.env['TS_NODE_COMPILER'],\n  compilerOptions: parse(process.env['TS_NODE_COMPILER_OPTIONS']),\n  ignore: split(process.env['TS_NODE_IGNORE']),\n  project: process.env['TS_NODE_PROJECT'],\n  skipIgnore: yn_1.default(process.env['TS_NODE_SKIP_IGNORE']),\n  skipProject: yn_1.default(process.env['TS_NODE_SKIP_PROJECT']),\n  preferTsExts: yn_1.default(process.env['TS_NODE_PREFER_TS_EXTS']),\n  ignoreDiagnostics: split(process.env['TS_NODE_IGNORE_DIAGNOSTICS']),\n  typeCheck: yn_1.default(process.env['TS_NODE_TYPE_CHECK']),\n  transpileOnly: yn_1.default(process.env['TS_NODE_TRANSPILE_ONLY']),\n  logError: yn_1.default(process.env['TS_NODE_LOG_ERROR'])\n};\n/**\n * Default TypeScript compiler options required by `ts-node`.\n */\n\nvar TS_NODE_COMPILER_OPTIONS = {\n  sourceMap: true,\n  inlineSourceMap: false,\n  inlineSources: true,\n  declaration: false,\n  noEmit: false,\n  outDir: '$$ts-node$$'\n};\n/**\n * Split a string array of values.\n */\n\nfunction split(value) {\n  return typeof value === 'string' ? value.split(/ *, */g) : undefined;\n}\n\nexports.split = split;\n/**\n * Parse a string as JSON.\n */\n\nfunction parse(value) {\n  return typeof value === 'string' ? JSON.parse(value) : undefined;\n}\n\nexports.parse = parse;\n/**\n * Replace backslashes with forward slashes.\n */\n\nfunction normalizeSlashes(value) {\n  return value.replace(/\\\\/g, '/');\n}\n\nexports.normalizeSlashes = normalizeSlashes;\n/**\n * TypeScript diagnostics error.\n */\n\nvar TSError = /*#__PURE__*/function (_make_error_1$BaseErr) {\n  _inherits(TSError, _make_error_1$BaseErr);\n\n  var _super = _createSuper(TSError);\n\n  function TSError(diagnosticText, diagnosticCodes) {\n    var _this;\n\n    _classCallCheck(this, TSError);\n\n    _this = _super.call(this, \"\\u2A2F Unable to compile TypeScript:\\n\".concat(diagnosticText));\n    _this.diagnosticText = diagnosticText;\n    _this.diagnosticCodes = diagnosticCodes;\n    _this.name = 'TSError';\n    return _this;\n  }\n  /**\n   * @internal\n   */\n\n\n  _createClass(TSError, [{\n    key: exports.INSPECT_CUSTOM,\n    value: function value() {\n      return this.diagnosticText;\n    }\n  }]);\n\n  return TSError;\n}(make_error_1.BaseError);\n\nexports.TSError = TSError;\n/**\n * Cached fs operation wrapper.\n */\n\nfunction cachedLookup(fn) {\n  var cache = new Map();\n  return function (arg) {\n    if (!cache.has(arg)) {\n      cache.set(arg, fn(arg));\n    }\n\n    return cache.get(arg);\n  };\n}\n/**\n * Register TypeScript compiler.\n */\n\n\nfunction register() {\n  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var options = Object.assign({}, exports.DEFAULTS, opts);\n  var originalJsHandler = require.extensions['.js']; // tslint:disable-line\n\n  var ignoreDiagnostics = [6059, 18002, 18003].concat(_toConsumableArray(options.ignoreDiagnostics || [])).map(Number);\n  var ignore = options.skipIgnore ? [] : (options.ignore || ['/node_modules/']).map(function (str) {\n    return new RegExp(str);\n  }); // Require the TypeScript compiler and configuration.\n\n  var cwd = process.cwd();\n  var typeCheck = options.typeCheck === true || options.transpileOnly !== true;\n\n  var compiler = require.resolve(options.compiler || 'typescript', {\n    paths: [cwd, __dirname]\n  });\n\n  var ts = require(compiler);\n\n  var transformers = options.transformers || undefined;\n  var readFile = options.readFile || ts.sys.readFile;\n  var fileExists = options.fileExists || ts.sys.fileExists;\n  var config = readConfig(cwd, ts, fileExists, readFile, options);\n  var configDiagnosticList = filterDiagnostics(config.errors, ignoreDiagnostics);\n  var extensions = ['.ts'];\n  var outputCache = new Map();\n  var diagnosticHost = {\n    getNewLine: function getNewLine() {\n      return ts.sys.newLine;\n    },\n    getCurrentDirectory: function getCurrentDirectory() {\n      return cwd;\n    },\n    getCanonicalFileName: function getCanonicalFileName(path) {\n      return path;\n    }\n  }; // Install source map support and read from memory cache.\n\n  sourceMapSupport.install({\n    environment: 'node',\n    retrieveFile: function retrieveFile(path) {\n      return outputCache.get(path) || '';\n    }\n  });\n  var formatDiagnostics = process.stdout.isTTY || options.pretty ? ts.formatDiagnosticsWithColorAndContext : ts.formatDiagnostics;\n\n  function createTSError(diagnostics) {\n    var diagnosticText = formatDiagnostics(diagnostics, diagnosticHost);\n    var diagnosticCodes = diagnostics.map(function (x) {\n      return x.code;\n    });\n    return new TSError(diagnosticText, diagnosticCodes);\n  }\n\n  function reportTSError(configDiagnosticList) {\n    var error = createTSError(configDiagnosticList);\n\n    if (options.logError) {\n      // Print error in red color and continue execution.\n      console.error('\\x1b[31m%s\\x1b[0m', error);\n    } else {\n      // Throw error and exit the script.\n      throw error;\n    }\n  } // Render the configuration errors.\n\n\n  if (configDiagnosticList.length) reportTSError(configDiagnosticList); // Enable additional extensions when JSX or `allowJs` is enabled.\n\n  if (config.options.jsx) extensions.push('.tsx');\n  if (config.options.allowJs) extensions.push('.js');\n  if (config.options.jsx && config.options.allowJs) extensions.push('.jsx');\n  /**\n   * Get the extension for a transpiled file.\n   */\n\n  var getExtension = config.options.jsx === ts.JsxEmit.Preserve ? function (path) {\n    return /\\.[tj]sx$/.test(path) ? '.jsx' : '.js';\n  } : function (_) {\n    return '.js';\n  };\n  /**\n   * Create the basic required function using transpile mode.\n   */\n\n  var getOutput = function getOutput(code, fileName) {\n    var lineOffset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    var result = ts.transpileModule(code, {\n      fileName: fileName,\n      transformers: transformers,\n      compilerOptions: config.options,\n      reportDiagnostics: true\n    });\n    var diagnosticList = result.diagnostics ? filterDiagnostics(result.diagnostics, ignoreDiagnostics) : [];\n    if (diagnosticList.length) reportTSError(configDiagnosticList);\n    return [result.outputText, result.sourceMapText];\n  };\n\n  var getTypeInfo = function getTypeInfo(_code, _fileName, _position) {\n    throw new TypeError(\"Type information is unavailable without \\\"--type-check\\\"\");\n  }; // Use full language services when the fast option is disabled.\n\n\n  if (typeCheck) {\n    var memoryCache = new MemoryCache(config.fileNames);\n    var cachedReadFile = cachedLookup(debugFn('readFile', readFile)); // Create the compiler host for type checking.\n\n    var serviceHost = {\n      getScriptFileNames: function getScriptFileNames() {\n        return Array.from(memoryCache.fileVersions.keys());\n      },\n      getScriptVersion: function getScriptVersion(fileName) {\n        var version = memoryCache.fileVersions.get(fileName);\n        return version === undefined ? '' : version.toString();\n      },\n      getScriptSnapshot: function getScriptSnapshot(fileName) {\n        var contents = memoryCache.fileContents.get(fileName); // Read contents into TypeScript memory cache.\n\n        if (contents === undefined) {\n          contents = cachedReadFile(fileName);\n          if (contents === undefined) return;\n          memoryCache.fileVersions.set(fileName, 1);\n          memoryCache.fileContents.set(fileName, contents);\n        }\n\n        return ts.ScriptSnapshot.fromString(contents);\n      },\n      readFile: cachedReadFile,\n      readDirectory: cachedLookup(debugFn('readDirectory', ts.sys.readDirectory)),\n      getDirectories: cachedLookup(debugFn('getDirectories', ts.sys.getDirectories)),\n      fileExists: cachedLookup(debugFn('fileExists', fileExists)),\n      directoryExists: cachedLookup(debugFn('directoryExists', ts.sys.directoryExists)),\n      getNewLine: function getNewLine() {\n        return ts.sys.newLine;\n      },\n      useCaseSensitiveFileNames: function useCaseSensitiveFileNames() {\n        return ts.sys.useCaseSensitiveFileNames;\n      },\n      getCurrentDirectory: function getCurrentDirectory() {\n        return cwd;\n      },\n      getCompilationSettings: function getCompilationSettings() {\n        return config.options;\n      },\n      getDefaultLibFileName: function getDefaultLibFileName() {\n        return ts.getDefaultLibFilePath(config.options);\n      },\n      getCustomTransformers: function getCustomTransformers() {\n        return transformers;\n      }\n    };\n    var registry = ts.createDocumentRegistry(ts.sys.useCaseSensitiveFileNames, cwd);\n    var service = ts.createLanguageService(serviceHost, registry); // Set the file contents into cache manually.\n\n    var updateMemoryCache = function updateMemoryCache(contents, fileName) {\n      var fileVersion = memoryCache.fileVersions.get(fileName) || 0; // Avoid incrementing cache when nothing has changed.\n\n      if (memoryCache.fileContents.get(fileName) === contents) return;\n      memoryCache.fileVersions.set(fileName, fileVersion + 1);\n      memoryCache.fileContents.set(fileName, contents);\n    };\n\n    getOutput = function getOutput(code, fileName) {\n      var lineOffset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n      updateMemoryCache(code, fileName);\n      var output = service.getEmitOutput(fileName); // Get the relevant diagnostics - this is 3x faster than `getPreEmitDiagnostics`.\n\n      var diagnostics = service.getSemanticDiagnostics(fileName).concat(service.getSyntacticDiagnostics(fileName));\n      var diagnosticList = filterDiagnostics(diagnostics, ignoreDiagnostics);\n      if (diagnosticList.length) reportTSError(diagnosticList);\n\n      if (output.emitSkipped) {\n        throw new TypeError(\"\".concat(path_1.relative(cwd, fileName), \": Emit skipped\"));\n      } // Throw an error when requiring `.d.ts` files.\n\n\n      if (output.outputFiles.length === 0) {\n        throw new TypeError('Unable to require `.d.ts` file.\\n' + 'This is usually the result of a faulty configuration or import. ' + 'Make sure there is a `.js`, `.json` or another executable extension and ' + 'loader (attached before `ts-node`) available alongside ' + \"`\".concat(path_1.basename(fileName), \"`.\"));\n      }\n\n      return [output.outputFiles[1].text, output.outputFiles[0].text];\n    };\n\n    getTypeInfo = function getTypeInfo(code, fileName, position) {\n      updateMemoryCache(code, fileName);\n      var info = service.getQuickInfoAtPosition(fileName, position);\n      var name = ts.displayPartsToString(info ? info.displayParts : []);\n      var comment = ts.displayPartsToString(info ? info.documentation : []);\n      return {\n        name: name,\n        comment: comment\n      };\n    };\n  } // Create a simple TypeScript compiler proxy.\n\n\n  function compile(code, fileName, lineOffset) {\n    var _getOutput = getOutput(code, fileName, lineOffset),\n        _getOutput2 = _slicedToArray(_getOutput, 2),\n        value = _getOutput2[0],\n        sourceMap = _getOutput2[1];\n\n    var output = updateOutput(value, fileName, sourceMap, getExtension);\n    outputCache.set(fileName, output);\n    return output;\n  }\n\n  var register = {\n    cwd: cwd,\n    compile: compile,\n    getTypeInfo: getTypeInfo,\n    extensions: extensions,\n    ts: ts\n  }; // Register the extensions.\n\n  registerExtensions(opts, extensions, ignore, register, originalJsHandler);\n  return register;\n}\n\nexports.register = register;\n/**\n * Check if the filename should be ignored.\n */\n\nfunction shouldIgnore(filename, ignore) {\n  var relname = normalizeSlashes(filename);\n  return ignore.some(function (x) {\n    return x.test(relname);\n  });\n}\n/**\n * \"Refreshes\" an extension on `require.extentions`.\n *\n * @param {string} ext\n */\n\n\nfunction reorderRequireExtension(ext) {\n  var old = require.extensions[ext]; // tslint:disable-line\n\n  delete require.extensions[ext]; // tslint:disable-line\n\n  require.extensions[ext] = old; // tslint:disable-line\n}\n/**\n * Register the extensions to support when importing files.\n */\n\n\nfunction registerExtensions(opts, extensions, ignore, register, originalJsHandler) {\n  // Register new extensions.\n  var _iterator2 = _createForOfIteratorHelper(extensions),\n      _step2;\n\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var _ext = _step2.value;\n      registerExtension(_ext, ignore, register, originalJsHandler);\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n\n  if (opts.preferTsExts) {\n    // tslint:disable-next-line\n    var preferredExtensions = new Set([].concat(_toConsumableArray(extensions), _toConsumableArray(Object.keys(require.extensions))));\n\n    var _iterator3 = _createForOfIteratorHelper(preferredExtensions),\n        _step3;\n\n    try {\n      for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n        var ext = _step3.value;\n        reorderRequireExtension(ext);\n      }\n    } catch (err) {\n      _iterator3.e(err);\n    } finally {\n      _iterator3.f();\n    }\n  }\n}\n/**\n * Register the extension for node.\n */\n\n\nfunction registerExtension(ext, ignore, register, originalHandler) {\n  var old = require.extensions[ext] || originalHandler; // tslint:disable-line\n\n  require.extensions[ext] = function (m, filename) {\n    if (shouldIgnore(filename, ignore)) {\n      return old(m, filename);\n    }\n\n    var _compile = m._compile;\n\n    m._compile = function (code, fileName) {\n      debug('module._compile', fileName);\n      return _compile.call(this, register.compile(code, fileName), fileName);\n    };\n\n    return old(m, filename);\n  };\n}\n/**\n * Do post-processing on config options to support `ts-node`.\n */\n\n\nfunction fixConfig(ts, config) {\n  // Delete options that *should not* be passed through.\n  delete config.options.out;\n  delete config.options.outFile;\n  delete config.options.composite;\n  delete config.options.declarationDir;\n  delete config.options.declarationMap;\n  delete config.options.emitDeclarationOnly;\n  delete config.options.tsBuildInfoFile;\n  delete config.options.incremental; // Target ES5 output by default (instead of ES3).\n\n  if (config.options.target === undefined) {\n    config.options.target = ts.ScriptTarget.ES5;\n  } // Target CommonJS modules by default (instead of magically switching to ES6 when the target is ES6).\n\n\n  if (config.options.module === undefined) {\n    config.options.module = ts.ModuleKind.CommonJS;\n  }\n\n  return config;\n}\n/**\n * Load TypeScript configuration.\n */\n\n\nfunction readConfig(cwd, ts, fileExists, readFile, options) {\n  var config = {\n    compilerOptions: {}\n  };\n  var basePath = normalizeSlashes(cwd);\n  var configFileName = undefined; // Read project configuration when available.\n\n  if (!options.skipProject) {\n    configFileName = options.project ? normalizeSlashes(path_1.resolve(cwd, options.project)) : ts.findConfigFile(normalizeSlashes(cwd), fileExists);\n\n    if (configFileName) {\n      var result = ts.readConfigFile(configFileName, readFile); // Return diagnostics.\n\n      if (result.error) {\n        return {\n          errors: [result.error],\n          fileNames: [],\n          options: {}\n        };\n      }\n\n      config = result.config;\n      basePath = normalizeSlashes(path_1.dirname(configFileName));\n    }\n  } // Remove resolution of \"files\".\n\n\n  if (!options.files) {\n    config.files = [];\n    config.include = [];\n  } // Override default configuration options `ts-node` requires.\n\n\n  config.compilerOptions = Object.assign({}, config.compilerOptions, options.compilerOptions, TS_NODE_COMPILER_OPTIONS);\n  return fixConfig(ts, ts.parseJsonConfigFileContent(config, ts.sys, basePath, undefined, configFileName));\n}\n/**\n * Update the output remapping the source map.\n */\n\n\nfunction updateOutput(outputText, fileName, sourceMap, getExtension) {\n  var base64Map = Buffer.from(updateSourceMap(sourceMap, fileName), 'utf8').toString('base64');\n  var sourceMapContent = \"data:application/json;charset=utf-8;base64,\".concat(base64Map);\n  var sourceMapLength = \"\".concat(path_1.basename(fileName), \".map\").length + (getExtension(fileName).length - path_1.extname(fileName).length);\n  return outputText.slice(0, -sourceMapLength) + sourceMapContent;\n}\n/**\n * Update the source map contents for improved output.\n */\n\n\nfunction updateSourceMap(sourceMapText, fileName) {\n  var sourceMap = JSON.parse(sourceMapText);\n  sourceMap.file = fileName;\n  sourceMap.sources = [fileName];\n  delete sourceMap.sourceRoot;\n  return JSON.stringify(sourceMap);\n}\n/**\n * Filter diagnostics.\n */\n\n\nfunction filterDiagnostics(diagnostics, ignore) {\n  return diagnostics.filter(function (x) {\n    return ignore.indexOf(x.code) === -1;\n  });\n}","map":{"version":3,"sources":["../src/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { relative, basename, extname, resolve, dirname, join } from 'path'\nimport sourceMapSupport = require('source-map-support')\nimport yn from 'yn'\nimport { BaseError } from 'make-error'\nimport * as util from 'util'\nimport * as _ts from 'typescript'\n\n/**\n * @internal\n */\nexport const INSPECT_CUSTOM = util.inspect.custom || 'inspect'\n\n/**\n * Debugging `ts-node`.\n */\nconst shouldDebug = yn(process.env.TS_NODE_DEBUG)\nconst debug = shouldDebug ? console.log.bind(console, 'ts-node') : () => undefined\nconst debugFn = shouldDebug ?\n  <T, U> (key: string, fn: (arg: T) => U) => {\n    let i = 0\n    return (x: T) => {\n      debug(key, x, ++i)\n      return fn(x)\n    }\n  } :\n  <T, U> (_: string, fn: (arg: T) => U) => fn\n\n/**\n * Common TypeScript interfaces between versions.\n */\nexport interface TSCommon {\n  version: typeof _ts.version\n  sys: typeof _ts.sys\n  ScriptSnapshot: typeof _ts.ScriptSnapshot\n  displayPartsToString: typeof _ts.displayPartsToString\n  createLanguageService: typeof _ts.createLanguageService\n  getDefaultLibFilePath: typeof _ts.getDefaultLibFilePath\n  getPreEmitDiagnostics: typeof _ts.getPreEmitDiagnostics\n  flattenDiagnosticMessageText: typeof _ts.flattenDiagnosticMessageText\n  transpileModule: typeof _ts.transpileModule\n  ModuleKind: typeof _ts.ModuleKind\n  ScriptTarget: typeof _ts.ScriptTarget\n  findConfigFile: typeof _ts.findConfigFile\n  readConfigFile: typeof _ts.readConfigFile\n  parseJsonConfigFileContent: typeof _ts.parseJsonConfigFileContent\n  formatDiagnostics: typeof _ts.formatDiagnostics\n  formatDiagnosticsWithColorAndContext: typeof _ts.formatDiagnosticsWithColorAndContext\n}\n\n/**\n * Export the current version.\n */\nexport const VERSION = require('../package.json').version\n\n/**\n * Registration options.\n */\nexport interface Options {\n  pretty?: boolean | null\n  typeCheck?: boolean | null\n  transpileOnly?: boolean | null\n  logError?: boolean | null\n  files?: boolean | null\n  compiler?: string\n  ignore?: string[]\n  project?: string\n  skipIgnore?: boolean | null\n  skipProject?: boolean | null\n  preferTsExts?: boolean | null\n  compilerOptions?: object\n  ignoreDiagnostics?: Array<number | string>\n  readFile?: (path: string) => string | undefined\n  fileExists?: (path: string) => boolean\n  transformers?: _ts.CustomTransformers\n}\n\n/**\n * Track the project information.\n */\nclass MemoryCache {\n  fileContents = new Map<string, string>()\n  fileVersions = new Map<string, number>()\n\n  constructor (rootFileNames: string[] = []) {\n    for (const fileName of rootFileNames) this.fileVersions.set(fileName, 1)\n  }\n}\n\n/**\n * Information retrieved from type info check.\n */\nexport interface TypeInfo {\n  name: string\n  comment: string\n}\n\n/**\n * Default register options.\n */\nexport const DEFAULTS: Options = {\n  files: yn(process.env['TS_NODE_FILES']),\n  pretty: yn(process.env['TS_NODE_PRETTY']),\n  compiler: process.env['TS_NODE_COMPILER'],\n  compilerOptions: parse(process.env['TS_NODE_COMPILER_OPTIONS']),\n  ignore: split(process.env['TS_NODE_IGNORE']),\n  project: process.env['TS_NODE_PROJECT'],\n  skipIgnore: yn(process.env['TS_NODE_SKIP_IGNORE']),\n  skipProject: yn(process.env['TS_NODE_SKIP_PROJECT']),\n  preferTsExts: yn(process.env['TS_NODE_PREFER_TS_EXTS']),\n  ignoreDiagnostics: split(process.env['TS_NODE_IGNORE_DIAGNOSTICS']),\n  typeCheck: yn(process.env['TS_NODE_TYPE_CHECK']),\n  transpileOnly: yn(process.env['TS_NODE_TRANSPILE_ONLY']),\n  logError: yn(process.env['TS_NODE_LOG_ERROR'])\n}\n\n/**\n * Default TypeScript compiler options required by `ts-node`.\n */\nconst TS_NODE_COMPILER_OPTIONS = {\n  sourceMap: true,\n  inlineSourceMap: false,\n  inlineSources: true,\n  declaration: false,\n  noEmit: false,\n  outDir: '$$ts-node$$'\n}\n\n/**\n * Split a string array of values.\n */\nexport function split (value: string | undefined) {\n  return typeof value === 'string' ? value.split(/ *, */g) : undefined\n}\n\n/**\n * Parse a string as JSON.\n */\nexport function parse (value: string | undefined): object | undefined {\n  return typeof value === 'string' ? JSON.parse(value) : undefined\n}\n\n/**\n * Replace backslashes with forward slashes.\n */\nexport function normalizeSlashes (value: string): string {\n  return value.replace(/\\\\/g, '/')\n}\n\n/**\n * TypeScript diagnostics error.\n */\nexport class TSError extends BaseError {\n  name = 'TSError'\n\n  constructor (public diagnosticText: string, public diagnosticCodes: number[]) {\n    super(`⨯ Unable to compile TypeScript:\\n${diagnosticText}`)\n  }\n\n  /**\n   * @internal\n   */\n  [INSPECT_CUSTOM] () {\n    return this.diagnosticText\n  }\n}\n\n/**\n * Return type for registering `ts-node`.\n */\nexport interface Register {\n  cwd: string\n  extensions: string[]\n  ts: TSCommon\n  compile (code: string, fileName: string, lineOffset?: number): string\n  getTypeInfo (code: string, fileName: string, position: number): TypeInfo\n}\n\n/**\n * Cached fs operation wrapper.\n */\nfunction cachedLookup <T> (fn: (arg: string) => T): (arg: string) => T {\n  const cache = new Map<string, T>()\n\n  return (arg: string): T => {\n    if (!cache.has(arg)) {\n      cache.set(arg, fn(arg))\n    }\n\n    return cache.get(arg)!\n  }\n}\n\n/**\n * Register TypeScript compiler.\n */\nexport function register (opts: Options = {}): Register {\n  const options = Object.assign({}, DEFAULTS, opts)\n  const originalJsHandler = require.extensions['.js'] // tslint:disable-line\n\n  const ignoreDiagnostics = [\n    6059, // \"'rootDir' is expected to contain all source files.\"\n    18002, // \"The 'files' list in config file is empty.\"\n    18003, // \"No inputs were found in config file.\"\n    ...(options.ignoreDiagnostics || [])\n  ].map(Number)\n\n  const ignore = options.skipIgnore ? [] : (\n    options.ignore || ['/node_modules/']\n  ).map(str => new RegExp(str))\n\n  // Require the TypeScript compiler and configuration.\n  const cwd = process.cwd()\n  const typeCheck = options.typeCheck === true || options.transpileOnly !== true\n  const compiler = require.resolve(options.compiler || 'typescript', { paths: [cwd, __dirname] })\n  const ts: typeof _ts = require(compiler)\n  const transformers = options.transformers || undefined\n  const readFile = options.readFile || ts.sys.readFile\n  const fileExists = options.fileExists || ts.sys.fileExists\n  const config = readConfig(cwd, ts, fileExists, readFile, options)\n  const configDiagnosticList = filterDiagnostics(config.errors, ignoreDiagnostics)\n  const extensions = ['.ts']\n  const outputCache = new Map<string, string>()\n\n  const diagnosticHost: _ts.FormatDiagnosticsHost = {\n    getNewLine: () => ts.sys.newLine,\n    getCurrentDirectory: () => cwd,\n    getCanonicalFileName: (path) => path\n  }\n\n  // Install source map support and read from memory cache.\n  sourceMapSupport.install({\n    environment: 'node',\n    retrieveFile (path: string) {\n      return outputCache.get(path) || ''\n    }\n  })\n\n  const formatDiagnostics = process.stdout.isTTY || options.pretty\n    ? ts.formatDiagnosticsWithColorAndContext\n    : ts.formatDiagnostics\n\n  function createTSError (diagnostics: ReadonlyArray<_ts.Diagnostic>) {\n    const diagnosticText = formatDiagnostics(diagnostics, diagnosticHost)\n    const diagnosticCodes = diagnostics.map(x => x.code)\n    return new TSError(diagnosticText, diagnosticCodes)\n  }\n\n  function reportTSError (configDiagnosticList: _ts.Diagnostic[]) {\n    const error = createTSError(configDiagnosticList)\n    if (options.logError) {\n      // Print error in red color and continue execution.\n      console.error('\\x1b[31m%s\\x1b[0m', error)\n    } else {\n      // Throw error and exit the script.\n      throw error\n    }\n  }\n\n  // Render the configuration errors.\n  if (configDiagnosticList.length) reportTSError(configDiagnosticList)\n\n  // Enable additional extensions when JSX or `allowJs` is enabled.\n  if (config.options.jsx) extensions.push('.tsx')\n  if (config.options.allowJs) extensions.push('.js')\n  if (config.options.jsx && config.options.allowJs) extensions.push('.jsx')\n\n  /**\n   * Get the extension for a transpiled file.\n   */\n  const getExtension = config.options.jsx === ts.JsxEmit.Preserve ?\n    ((path: string) => /\\.[tj]sx$/.test(path) ? '.jsx' : '.js') :\n    ((_: string) => '.js')\n\n  /**\n   * Create the basic required function using transpile mode.\n   */\n  let getOutput = function (code: string, fileName: string, lineOffset = 0): SourceOutput {\n    const result = ts.transpileModule(code, {\n      fileName,\n      transformers,\n      compilerOptions: config.options,\n      reportDiagnostics: true\n    })\n\n    const diagnosticList = result.diagnostics ?\n      filterDiagnostics(result.diagnostics, ignoreDiagnostics) :\n      []\n\n    if (diagnosticList.length) reportTSError(configDiagnosticList)\n\n    return [result.outputText, result.sourceMapText as string]\n  }\n\n  let getTypeInfo = function (_code: string, _fileName: string, _position: number): TypeInfo {\n    throw new TypeError(`Type information is unavailable without \"--type-check\"`)\n  }\n\n  // Use full language services when the fast option is disabled.\n  if (typeCheck) {\n    const memoryCache = new MemoryCache(config.fileNames)\n    const cachedReadFile = cachedLookup(debugFn('readFile', readFile))\n\n    // Create the compiler host for type checking.\n    const serviceHost: _ts.LanguageServiceHost = {\n      getScriptFileNames: () => Array.from(memoryCache.fileVersions.keys()),\n      getScriptVersion: (fileName: string) => {\n        const version = memoryCache.fileVersions.get(fileName)\n        return version === undefined ? '' : version.toString()\n      },\n      getScriptSnapshot (fileName: string) {\n        let contents = memoryCache.fileContents.get(fileName)\n\n        // Read contents into TypeScript memory cache.\n        if (contents === undefined) {\n          contents = cachedReadFile(fileName)\n          if (contents === undefined) return\n\n          memoryCache.fileVersions.set(fileName, 1)\n          memoryCache.fileContents.set(fileName, contents)\n        }\n\n        return ts.ScriptSnapshot.fromString(contents)\n      },\n      readFile: cachedReadFile,\n      readDirectory: cachedLookup(debugFn('readDirectory', ts.sys.readDirectory)),\n      getDirectories: cachedLookup(debugFn('getDirectories', ts.sys.getDirectories)),\n      fileExists: cachedLookup(debugFn('fileExists', fileExists)),\n      directoryExists: cachedLookup(debugFn('directoryExists', ts.sys.directoryExists)),\n      getNewLine: () => ts.sys.newLine,\n      useCaseSensitiveFileNames: () => ts.sys.useCaseSensitiveFileNames,\n      getCurrentDirectory: () => cwd,\n      getCompilationSettings: () => config.options,\n      getDefaultLibFileName: () => ts.getDefaultLibFilePath(config.options),\n      getCustomTransformers: () => transformers\n    }\n\n    const registry = ts.createDocumentRegistry(ts.sys.useCaseSensitiveFileNames, cwd)\n    const service = ts.createLanguageService(serviceHost, registry)\n\n    // Set the file contents into cache manually.\n    const updateMemoryCache = function (contents: string, fileName: string) {\n      const fileVersion = memoryCache.fileVersions.get(fileName) || 0\n\n      // Avoid incrementing cache when nothing has changed.\n      if (memoryCache.fileContents.get(fileName) === contents) return\n\n      memoryCache.fileVersions.set(fileName, fileVersion + 1)\n      memoryCache.fileContents.set(fileName, contents)\n    }\n\n    getOutput = function (code: string, fileName: string, lineOffset: number = 0) {\n      updateMemoryCache(code, fileName)\n\n      const output = service.getEmitOutput(fileName)\n\n      // Get the relevant diagnostics - this is 3x faster than `getPreEmitDiagnostics`.\n      const diagnostics = service.getSemanticDiagnostics(fileName)\n        .concat(service.getSyntacticDiagnostics(fileName))\n\n      const diagnosticList = filterDiagnostics(diagnostics, ignoreDiagnostics)\n\n      if (diagnosticList.length) reportTSError(diagnosticList)\n\n      if (output.emitSkipped) {\n        throw new TypeError(`${relative(cwd, fileName)}: Emit skipped`)\n      }\n\n      // Throw an error when requiring `.d.ts` files.\n      if (output.outputFiles.length === 0) {\n        throw new TypeError(\n          'Unable to require `.d.ts` file.\\n' +\n          'This is usually the result of a faulty configuration or import. ' +\n          'Make sure there is a `.js`, `.json` or another executable extension and ' +\n          'loader (attached before `ts-node`) available alongside ' +\n          `\\`${basename(fileName)}\\`.`\n        )\n      }\n\n      return [output.outputFiles[1].text, output.outputFiles[0].text]\n    }\n\n    getTypeInfo = function (code: string, fileName: string, position: number) {\n      updateMemoryCache(code, fileName)\n\n      const info = service.getQuickInfoAtPosition(fileName, position)\n      const name = ts.displayPartsToString(info ? info.displayParts : [])\n      const comment = ts.displayPartsToString(info ? info.documentation : [])\n\n      return { name, comment }\n    }\n  }\n\n  // Create a simple TypeScript compiler proxy.\n  function compile (code: string, fileName: string, lineOffset?: number) {\n    const [value, sourceMap] = getOutput(code, fileName, lineOffset)\n    const output = updateOutput(value, fileName, sourceMap, getExtension)\n    outputCache.set(fileName, output)\n    return output\n  }\n\n  const register: Register = { cwd, compile, getTypeInfo, extensions, ts }\n\n  // Register the extensions.\n  registerExtensions(opts, extensions, ignore, register, originalJsHandler)\n\n  return register\n}\n\n/**\n * Check if the filename should be ignored.\n */\nfunction shouldIgnore (filename: string, ignore: RegExp[]) {\n  const relname = normalizeSlashes(filename)\n\n  return ignore.some(x => x.test(relname))\n}\n\n/**\n * \"Refreshes\" an extension on `require.extentions`.\n *\n * @param {string} ext\n */\nfunction reorderRequireExtension (ext: string) {\n  const old = require.extensions[ext] // tslint:disable-line\n  delete require.extensions[ext] // tslint:disable-line\n  require.extensions[ext] = old // tslint:disable-line\n}\n\n/**\n * Register the extensions to support when importing files.\n */\nfunction registerExtensions (\n  opts: Options,\n  extensions: string[],\n  ignore: RegExp[],\n  register: Register,\n  originalJsHandler: (m: NodeModule, filename: string) => any\n) {\n  // Register new extensions.\n  for (const ext of extensions) {\n    registerExtension(ext, ignore, register, originalJsHandler)\n  }\n\n  if (opts.preferTsExts) {\n    // tslint:disable-next-line\n    const preferredExtensions = new Set([...extensions, ...Object.keys(require.extensions)])\n\n    for (const ext of preferredExtensions) reorderRequireExtension(ext)\n  }\n}\n\n/**\n * Register the extension for node.\n */\nfunction registerExtension (\n  ext: string,\n  ignore: RegExp[],\n  register: Register,\n  originalHandler: (m: NodeModule, filename: string) => any\n) {\n  const old = require.extensions[ext] || originalHandler // tslint:disable-line\n\n  require.extensions[ext] = function (m: any, filename) { // tslint:disable-line\n    if (shouldIgnore(filename, ignore)) {\n      return old(m, filename)\n    }\n\n    const _compile = m._compile\n\n    m._compile = function (code: string, fileName: string) {\n      debug('module._compile', fileName)\n\n      return _compile.call(this, register.compile(code, fileName), fileName)\n    }\n\n    return old(m, filename)\n  }\n}\n\n/**\n * Do post-processing on config options to support `ts-node`.\n */\nfunction fixConfig (ts: TSCommon, config: _ts.ParsedCommandLine) {\n  // Delete options that *should not* be passed through.\n  delete config.options.out\n  delete config.options.outFile\n  delete config.options.composite\n  delete config.options.declarationDir\n  delete config.options.declarationMap\n  delete config.options.emitDeclarationOnly\n  delete config.options.tsBuildInfoFile\n  delete config.options.incremental\n\n  // Target ES5 output by default (instead of ES3).\n  if (config.options.target === undefined) {\n    config.options.target = ts.ScriptTarget.ES5\n  }\n\n  // Target CommonJS modules by default (instead of magically switching to ES6 when the target is ES6).\n  if (config.options.module === undefined) {\n    config.options.module = ts.ModuleKind.CommonJS\n  }\n\n  return config\n}\n\n/**\n * Load TypeScript configuration.\n */\nfunction readConfig (\n  cwd: string,\n  ts: TSCommon,\n  fileExists: (path: string) => boolean,\n  readFile: (path: string) => string | undefined,\n  options: Options\n): _ts.ParsedCommandLine {\n  let config: any = { compilerOptions: {} }\n  let basePath = normalizeSlashes(cwd)\n  let configFileName: string | undefined = undefined\n\n  // Read project configuration when available.\n  if (!options.skipProject) {\n    configFileName = options.project\n      ? normalizeSlashes(resolve(cwd, options.project))\n      : ts.findConfigFile(normalizeSlashes(cwd), fileExists)\n\n    if (configFileName) {\n      const result = ts.readConfigFile(configFileName, readFile)\n\n      // Return diagnostics.\n      if (result.error) {\n        return { errors: [result.error], fileNames: [], options: {} }\n      }\n\n      config = result.config\n      basePath = normalizeSlashes(dirname(configFileName))\n    }\n  }\n\n  // Remove resolution of \"files\".\n  if (!options.files) {\n    config.files = []\n    config.include = []\n  }\n\n  // Override default configuration options `ts-node` requires.\n  config.compilerOptions = Object.assign({}, config.compilerOptions, options.compilerOptions, TS_NODE_COMPILER_OPTIONS)\n\n  return fixConfig(ts, ts.parseJsonConfigFileContent(config, ts.sys, basePath, undefined, configFileName))\n}\n\n/**\n * Internal source output.\n */\ntype SourceOutput = [string, string]\n\n/**\n * Update the output remapping the source map.\n */\nfunction updateOutput (outputText: string, fileName: string, sourceMap: string, getExtension: (fileName: string) => string) {\n  const base64Map = Buffer.from(updateSourceMap(sourceMap, fileName), 'utf8').toString('base64')\n  const sourceMapContent = `data:application/json;charset=utf-8;base64,${base64Map}`\n  const sourceMapLength = `${basename(fileName)}.map`.length + (getExtension(fileName).length - extname(fileName).length)\n\n  return outputText.slice(0, -sourceMapLength) + sourceMapContent\n}\n\n/**\n * Update the source map contents for improved output.\n */\nfunction updateSourceMap (sourceMapText: string, fileName: string) {\n  const sourceMap = JSON.parse(sourceMapText)\n  sourceMap.file = fileName\n  sourceMap.sources = [fileName]\n  delete sourceMap.sourceRoot\n  return JSON.stringify(sourceMap)\n}\n\n/**\n * Filter diagnostics.\n */\nfunction filterDiagnostics (diagnostics: _ts.Diagnostic[], ignore: number[]) {\n  return diagnostics.filter(x => ignore.indexOf(x.code) === -1)\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}