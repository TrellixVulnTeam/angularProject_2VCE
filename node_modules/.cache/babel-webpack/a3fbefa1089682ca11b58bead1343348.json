{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nvar _assertThisInitialized = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/assertThisInitialized\");\n\nvar _inherits = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar _classCallCheck = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/createClass\");\n\nvar parseJson = require(\"json-parse-better-errors\");\n\nvar DelegatedSourceDependency = require(\"./dependencies/DelegatedSourceDependency\");\n\nvar DelegatedModuleFactoryPlugin = require(\"./DelegatedModuleFactoryPlugin\");\n\nvar ExternalModuleFactoryPlugin = require(\"./ExternalModuleFactoryPlugin\");\n\nvar DelegatedExportsDependency = require(\"./dependencies/DelegatedExportsDependency\");\n\nvar NullFactory = require(\"./NullFactory\");\n\nvar makePathsRelative = require(\"./util/identifier\").makePathsRelative;\n\nvar WebpackError = require(\"./WebpackError\");\n\nvar validateOptions = require(\"schema-utils\");\n\nvar schema = require(\"../schemas/plugins/DllReferencePlugin.json\");\n/** @typedef {import(\"../declarations/plugins/DllReferencePlugin\").DllReferencePluginOptions} DllReferencePluginOptions */\n\n/** @typedef {import(\"../declarations/plugins/DllReferencePlugin\").DllReferencePluginOptionsManifest} DllReferencePluginOptionsManifest */\n\n\nvar DllReferencePlugin = /*#__PURE__*/function () {\n  /**\n   * @param {DllReferencePluginOptions} options options object\n   */\n  function DllReferencePlugin(options) {\n    _classCallCheck(this, DllReferencePlugin);\n\n    validateOptions(schema, options, \"Dll Reference Plugin\");\n    this.options = options;\n  }\n\n  _createClass(DllReferencePlugin, [{\n    key: \"apply\",\n    value: function apply(compiler) {\n      var _this = this;\n\n      compiler.hooks.compilation.tap(\"DllReferencePlugin\", function (compilation, _ref) {\n        var normalModuleFactory = _ref.normalModuleFactory;\n        compilation.dependencyFactories.set(DelegatedSourceDependency, normalModuleFactory);\n        compilation.dependencyFactories.set(DelegatedExportsDependency, new NullFactory());\n      });\n      compiler.hooks.beforeCompile.tapAsync(\"DllReferencePlugin\", function (params, callback) {\n        if (\"manifest\" in _this.options) {\n          var manifest = _this.options.manifest;\n\n          if (typeof manifest === \"string\") {\n            params.compilationDependencies.add(manifest);\n            compiler.inputFileSystem.readFile(manifest, function (err, result) {\n              if (err) return callback(err); // Catch errors parsing the manifest so that blank\n              // or malformed manifest files don't kill the process.\n\n              try {\n                params[\"dll reference \" + manifest] = parseJson(result.toString(\"utf-8\"));\n              } catch (e) {\n                // Store the error in the params so that it can\n                // be added as a compilation error later on.\n                var manifestPath = makePathsRelative(compiler.options.context, manifest);\n                params[\"dll reference parse error \" + manifest] = new DllManifestError(manifestPath, e.message);\n              }\n\n              return callback();\n            });\n            return;\n          }\n        }\n\n        return callback();\n      });\n      compiler.hooks.compile.tap(\"DllReferencePlugin\", function (params) {\n        var name = _this.options.name;\n        var sourceType = _this.options.sourceType;\n        var content = \"content\" in _this.options ? _this.options.content : undefined;\n\n        if (\"manifest\" in _this.options) {\n          var manifestParameter = _this.options.manifest;\n          var manifest;\n\n          if (typeof manifestParameter === \"string\") {\n            // If there was an error parsing the manifest\n            // file, exit now because the error will be added\n            // as a compilation error in the \"compilation\" hook.\n            if (params[\"dll reference parse error \" + manifestParameter]) {\n              return;\n            }\n\n            manifest =\n            /** @type {DllReferencePluginOptionsManifest} */\n            params[\"dll reference \" + manifestParameter];\n          } else {\n            manifest = manifestParameter;\n          }\n\n          if (manifest) {\n            if (!name) name = manifest.name;\n            if (!sourceType) sourceType = manifest.type;\n            if (!content) content = manifest.content;\n          }\n        }\n\n        var externals = {};\n        var source = \"dll-reference \" + name;\n        externals[source] = name;\n        var normalModuleFactory = params.normalModuleFactory;\n        new ExternalModuleFactoryPlugin(sourceType || \"var\", externals).apply(normalModuleFactory);\n        new DelegatedModuleFactoryPlugin({\n          source: source,\n          type: _this.options.type,\n          scope: _this.options.scope,\n          context: _this.options.context || compiler.options.context,\n          content: content,\n          extensions: _this.options.extensions\n        }).apply(normalModuleFactory);\n      });\n      compiler.hooks.compilation.tap(\"DllReferencePlugin\", function (compilation, params) {\n        if (\"manifest\" in _this.options) {\n          var manifest = _this.options.manifest;\n\n          if (typeof manifest === \"string\") {\n            // If there was an error parsing the manifest file, add the\n            // error as a compilation error to make the compilation fail.\n            var e = params[\"dll reference parse error \" + manifest];\n\n            if (e) {\n              compilation.errors.push(e);\n            }\n          }\n        }\n      });\n    }\n  }]);\n\n  return DllReferencePlugin;\n}();\n\nvar DllManifestError = /*#__PURE__*/function (_WebpackError) {\n  _inherits(DllManifestError, _WebpackError);\n\n  var _super = _createSuper(DllManifestError);\n\n  function DllManifestError(filename, message) {\n    var _this2;\n\n    _classCallCheck(this, DllManifestError);\n\n    _this2 = _super.call(this);\n    _this2.name = \"DllManifestError\";\n    _this2.message = \"Dll manifest \".concat(filename, \"\\n\").concat(message);\n    Error.captureStackTrace(_assertThisInitialized(_this2), _this2.constructor);\n    return _this2;\n  }\n\n  return DllManifestError;\n}(WebpackError);\n\nmodule.exports = DllReferencePlugin;","map":{"version":3,"sources":["/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/webpack/lib/DllReferencePlugin.js"],"names":["parseJson","require","DelegatedSourceDependency","DelegatedModuleFactoryPlugin","ExternalModuleFactoryPlugin","DelegatedExportsDependency","NullFactory","makePathsRelative","WebpackError","validateOptions","schema","DllReferencePlugin","options","compiler","hooks","compilation","tap","normalModuleFactory","dependencyFactories","set","beforeCompile","tapAsync","params","callback","manifest","compilationDependencies","add","inputFileSystem","readFile","err","result","toString","e","manifestPath","context","DllManifestError","message","compile","name","sourceType","content","undefined","manifestParameter","type","externals","source","apply","scope","extensions","errors","push","filename","Error","captureStackTrace","constructor","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;;;;;;;;;;;AAEA,IAAMA,SAAS,GAAGC,OAAO,CAAC,0BAAD,CAAzB;;AACA,IAAMC,yBAAyB,GAAGD,OAAO,CAAC,0CAAD,CAAzC;;AACA,IAAME,4BAA4B,GAAGF,OAAO,CAAC,gCAAD,CAA5C;;AACA,IAAMG,2BAA2B,GAAGH,OAAO,CAAC,+BAAD,CAA3C;;AACA,IAAMI,0BAA0B,GAAGJ,OAAO,CAAC,2CAAD,CAA1C;;AACA,IAAMK,WAAW,GAAGL,OAAO,CAAC,eAAD,CAA3B;;AACA,IAAMM,iBAAiB,GAAGN,OAAO,CAAC,mBAAD,CAAP,CAA6BM,iBAAvD;;AACA,IAAMC,YAAY,GAAGP,OAAO,CAAC,gBAAD,CAA5B;;AAEA,IAAMQ,eAAe,GAAGR,OAAO,CAAC,cAAD,CAA/B;;AACA,IAAMS,MAAM,GAAGT,OAAO,CAAC,4CAAD,CAAtB;AAEA;;AACA;;;IAEMU,kB;AACL;AACD;AACA;AACC,8BAAYC,OAAZ,EAAqB;AAAA;;AACpBH,IAAAA,eAAe,CAACC,MAAD,EAASE,OAAT,EAAkB,sBAAlB,CAAf;AACA,SAAKA,OAAL,GAAeA,OAAf;AACA;;;;WAED,eAAMC,QAAN,EAAgB;AAAA;;AACfA,MAAAA,QAAQ,CAACC,KAAT,CAAeC,WAAf,CAA2BC,GAA3B,CACC,oBADD,EAEC,UAACD,WAAD,QAA0C;AAAA,YAA1BE,mBAA0B,QAA1BA,mBAA0B;AACzCF,QAAAA,WAAW,CAACG,mBAAZ,CAAgCC,GAAhC,CACCjB,yBADD,EAECe,mBAFD;AAIAF,QAAAA,WAAW,CAACG,mBAAZ,CAAgCC,GAAhC,CACCd,0BADD,EAEC,IAAIC,WAAJ,EAFD;AAIA,OAXF;AAcAO,MAAAA,QAAQ,CAACC,KAAT,CAAeM,aAAf,CAA6BC,QAA7B,CACC,oBADD,EAEC,UAACC,MAAD,EAASC,QAAT,EAAsB;AACrB,YAAI,cAAc,KAAI,CAACX,OAAvB,EAAgC;AAC/B,cAAMY,QAAQ,GAAG,KAAI,CAACZ,OAAL,CAAaY,QAA9B;;AACA,cAAI,OAAOA,QAAP,KAAoB,QAAxB,EAAkC;AACjCF,YAAAA,MAAM,CAACG,uBAAP,CAA+BC,GAA/B,CAAmCF,QAAnC;AACAX,YAAAA,QAAQ,CAACc,eAAT,CAAyBC,QAAzB,CAAkCJ,QAAlC,EAA4C,UAACK,GAAD,EAAMC,MAAN,EAAiB;AAC5D,kBAAID,GAAJ,EAAS,OAAON,QAAQ,CAACM,GAAD,CAAf,CADmD,CAE5D;AACA;;AACA,kBAAI;AACHP,gBAAAA,MAAM,CAAC,mBAAmBE,QAApB,CAAN,GAAsCxB,SAAS,CAC9C8B,MAAM,CAACC,QAAP,CAAgB,OAAhB,CAD8C,CAA/C;AAGA,eAJD,CAIE,OAAOC,CAAP,EAAU;AACX;AACA;AACA,oBAAMC,YAAY,GAAG1B,iBAAiB,CACrCM,QAAQ,CAACD,OAAT,CAAiBsB,OADoB,EAErCV,QAFqC,CAAtC;AAIAF,gBAAAA,MAAM,CACL,+BAA+BE,QAD1B,CAAN,GAEI,IAAIW,gBAAJ,CAAqBF,YAArB,EAAmCD,CAAC,CAACI,OAArC,CAFJ;AAGA;;AACD,qBAAOb,QAAQ,EAAf;AACA,aApBD;AAqBA;AACA;AACD;;AACD,eAAOA,QAAQ,EAAf;AACA,OAhCF;AAmCAV,MAAAA,QAAQ,CAACC,KAAT,CAAeuB,OAAf,CAAuBrB,GAAvB,CAA2B,oBAA3B,EAAiD,UAAAM,MAAM,EAAI;AAC1D,YAAIgB,IAAI,GAAG,KAAI,CAAC1B,OAAL,CAAa0B,IAAxB;AACA,YAAIC,UAAU,GAAG,KAAI,CAAC3B,OAAL,CAAa2B,UAA9B;AACA,YAAIC,OAAO,GACV,aAAa,KAAI,CAAC5B,OAAlB,GAA4B,KAAI,CAACA,OAAL,CAAa4B,OAAzC,GAAmDC,SADpD;;AAEA,YAAI,cAAc,KAAI,CAAC7B,OAAvB,EAAgC;AAC/B,cAAI8B,iBAAiB,GAAG,KAAI,CAAC9B,OAAL,CAAaY,QAArC;AACA,cAAIA,QAAJ;;AACA,cAAI,OAAOkB,iBAAP,KAA6B,QAAjC,EAA2C;AAC1C;AACA;AACA;AACA,gBAAIpB,MAAM,CAAC,+BAA+BoB,iBAAhC,CAAV,EAA8D;AAC7D;AACA;;AACDlB,YAAAA,QAAQ;AACP;AAAkDF,YAAAA,MAAM,CACvD,mBAAmBoB,iBADoC,CADzD;AAIA,WAXD,MAWO;AACNlB,YAAAA,QAAQ,GAAGkB,iBAAX;AACA;;AACD,cAAIlB,QAAJ,EAAc;AACb,gBAAI,CAACc,IAAL,EAAWA,IAAI,GAAGd,QAAQ,CAACc,IAAhB;AACX,gBAAI,CAACC,UAAL,EAAiBA,UAAU,GAAGf,QAAQ,CAACmB,IAAtB;AACjB,gBAAI,CAACH,OAAL,EAAcA,OAAO,GAAGhB,QAAQ,CAACgB,OAAnB;AACd;AACD;;AACD,YAAMI,SAAS,GAAG,EAAlB;AACA,YAAMC,MAAM,GAAG,mBAAmBP,IAAlC;AACAM,QAAAA,SAAS,CAACC,MAAD,CAAT,GAAoBP,IAApB;AACA,YAAMrB,mBAAmB,GAAGK,MAAM,CAACL,mBAAnC;AACA,YAAIb,2BAAJ,CAAgCmC,UAAU,IAAI,KAA9C,EAAqDK,SAArD,EAAgEE,KAAhE,CACC7B,mBADD;AAGA,YAAId,4BAAJ,CAAiC;AAChC0C,UAAAA,MAAM,EAAEA,MADwB;AAEhCF,UAAAA,IAAI,EAAE,KAAI,CAAC/B,OAAL,CAAa+B,IAFa;AAGhCI,UAAAA,KAAK,EAAE,KAAI,CAACnC,OAAL,CAAamC,KAHY;AAIhCb,UAAAA,OAAO,EAAE,KAAI,CAACtB,OAAL,CAAasB,OAAb,IAAwBrB,QAAQ,CAACD,OAAT,CAAiBsB,OAJlB;AAKhCM,UAAAA,OAAO,EAAPA,OALgC;AAMhCQ,UAAAA,UAAU,EAAE,KAAI,CAACpC,OAAL,CAAaoC;AANO,SAAjC,EAOGF,KAPH,CAOS7B,mBAPT;AAQA,OA3CD;AA6CAJ,MAAAA,QAAQ,CAACC,KAAT,CAAeC,WAAf,CAA2BC,GAA3B,CACC,oBADD,EAEC,UAACD,WAAD,EAAcO,MAAd,EAAyB;AACxB,YAAI,cAAc,KAAI,CAACV,OAAvB,EAAgC;AAC/B,cAAIY,QAAQ,GAAG,KAAI,CAACZ,OAAL,CAAaY,QAA5B;;AACA,cAAI,OAAOA,QAAP,KAAoB,QAAxB,EAAkC;AACjC;AACA;AACA,gBAAIQ,CAAC,GAAGV,MAAM,CAAC,+BAA+BE,QAAhC,CAAd;;AACA,gBAAIQ,CAAJ,EAAO;AACNjB,cAAAA,WAAW,CAACkC,MAAZ,CAAmBC,IAAnB,CAAwBlB,CAAxB;AACA;AACD;AACD;AACD,OAdF;AAgBA;;;;;;IAGIG,gB;;;;;AACL,4BAAYgB,QAAZ,EAAsBf,OAAtB,EAA+B;AAAA;;AAAA;;AAC9B;AAEA,WAAKE,IAAL,GAAY,kBAAZ;AACA,WAAKF,OAAL,0BAA+Be,QAA/B,eAA4Cf,OAA5C;AAEAgB,IAAAA,KAAK,CAACC,iBAAN,iCAA8B,OAAKC,WAAnC;AAN8B;AAO9B;;;EAR6B9C,Y;;AAW/B+C,MAAM,CAACC,OAAP,GAAiB7C,kBAAjB","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst parseJson = require(\"json-parse-better-errors\");\nconst DelegatedSourceDependency = require(\"./dependencies/DelegatedSourceDependency\");\nconst DelegatedModuleFactoryPlugin = require(\"./DelegatedModuleFactoryPlugin\");\nconst ExternalModuleFactoryPlugin = require(\"./ExternalModuleFactoryPlugin\");\nconst DelegatedExportsDependency = require(\"./dependencies/DelegatedExportsDependency\");\nconst NullFactory = require(\"./NullFactory\");\nconst makePathsRelative = require(\"./util/identifier\").makePathsRelative;\nconst WebpackError = require(\"./WebpackError\");\n\nconst validateOptions = require(\"schema-utils\");\nconst schema = require(\"../schemas/plugins/DllReferencePlugin.json\");\n\n/** @typedef {import(\"../declarations/plugins/DllReferencePlugin\").DllReferencePluginOptions} DllReferencePluginOptions */\n/** @typedef {import(\"../declarations/plugins/DllReferencePlugin\").DllReferencePluginOptionsManifest} DllReferencePluginOptionsManifest */\n\nclass DllReferencePlugin {\n\t/**\n\t * @param {DllReferencePluginOptions} options options object\n\t */\n\tconstructor(options) {\n\t\tvalidateOptions(schema, options, \"Dll Reference Plugin\");\n\t\tthis.options = options;\n\t}\n\n\tapply(compiler) {\n\t\tcompiler.hooks.compilation.tap(\n\t\t\t\"DllReferencePlugin\",\n\t\t\t(compilation, { normalModuleFactory }) => {\n\t\t\t\tcompilation.dependencyFactories.set(\n\t\t\t\t\tDelegatedSourceDependency,\n\t\t\t\t\tnormalModuleFactory\n\t\t\t\t);\n\t\t\t\tcompilation.dependencyFactories.set(\n\t\t\t\t\tDelegatedExportsDependency,\n\t\t\t\t\tnew NullFactory()\n\t\t\t\t);\n\t\t\t}\n\t\t);\n\n\t\tcompiler.hooks.beforeCompile.tapAsync(\n\t\t\t\"DllReferencePlugin\",\n\t\t\t(params, callback) => {\n\t\t\t\tif (\"manifest\" in this.options) {\n\t\t\t\t\tconst manifest = this.options.manifest;\n\t\t\t\t\tif (typeof manifest === \"string\") {\n\t\t\t\t\t\tparams.compilationDependencies.add(manifest);\n\t\t\t\t\t\tcompiler.inputFileSystem.readFile(manifest, (err, result) => {\n\t\t\t\t\t\t\tif (err) return callback(err);\n\t\t\t\t\t\t\t// Catch errors parsing the manifest so that blank\n\t\t\t\t\t\t\t// or malformed manifest files don't kill the process.\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\tparams[\"dll reference \" + manifest] = parseJson(\n\t\t\t\t\t\t\t\t\tresult.toString(\"utf-8\")\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t\t\t// Store the error in the params so that it can\n\t\t\t\t\t\t\t\t// be added as a compilation error later on.\n\t\t\t\t\t\t\t\tconst manifestPath = makePathsRelative(\n\t\t\t\t\t\t\t\t\tcompiler.options.context,\n\t\t\t\t\t\t\t\t\tmanifest\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\tparams[\n\t\t\t\t\t\t\t\t\t\"dll reference parse error \" + manifest\n\t\t\t\t\t\t\t\t] = new DllManifestError(manifestPath, e.message);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn callback();\n\t\t\t\t\t\t});\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn callback();\n\t\t\t}\n\t\t);\n\n\t\tcompiler.hooks.compile.tap(\"DllReferencePlugin\", params => {\n\t\t\tlet name = this.options.name;\n\t\t\tlet sourceType = this.options.sourceType;\n\t\t\tlet content =\n\t\t\t\t\"content\" in this.options ? this.options.content : undefined;\n\t\t\tif (\"manifest\" in this.options) {\n\t\t\t\tlet manifestParameter = this.options.manifest;\n\t\t\t\tlet manifest;\n\t\t\t\tif (typeof manifestParameter === \"string\") {\n\t\t\t\t\t// If there was an error parsing the manifest\n\t\t\t\t\t// file, exit now because the error will be added\n\t\t\t\t\t// as a compilation error in the \"compilation\" hook.\n\t\t\t\t\tif (params[\"dll reference parse error \" + manifestParameter]) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tmanifest =\n\t\t\t\t\t\t/** @type {DllReferencePluginOptionsManifest} */ (params[\n\t\t\t\t\t\t\t\"dll reference \" + manifestParameter\n\t\t\t\t\t\t]);\n\t\t\t\t} else {\n\t\t\t\t\tmanifest = manifestParameter;\n\t\t\t\t}\n\t\t\t\tif (manifest) {\n\t\t\t\t\tif (!name) name = manifest.name;\n\t\t\t\t\tif (!sourceType) sourceType = manifest.type;\n\t\t\t\t\tif (!content) content = manifest.content;\n\t\t\t\t}\n\t\t\t}\n\t\t\tconst externals = {};\n\t\t\tconst source = \"dll-reference \" + name;\n\t\t\texternals[source] = name;\n\t\t\tconst normalModuleFactory = params.normalModuleFactory;\n\t\t\tnew ExternalModuleFactoryPlugin(sourceType || \"var\", externals).apply(\n\t\t\t\tnormalModuleFactory\n\t\t\t);\n\t\t\tnew DelegatedModuleFactoryPlugin({\n\t\t\t\tsource: source,\n\t\t\t\ttype: this.options.type,\n\t\t\t\tscope: this.options.scope,\n\t\t\t\tcontext: this.options.context || compiler.options.context,\n\t\t\t\tcontent,\n\t\t\t\textensions: this.options.extensions\n\t\t\t}).apply(normalModuleFactory);\n\t\t});\n\n\t\tcompiler.hooks.compilation.tap(\n\t\t\t\"DllReferencePlugin\",\n\t\t\t(compilation, params) => {\n\t\t\t\tif (\"manifest\" in this.options) {\n\t\t\t\t\tlet manifest = this.options.manifest;\n\t\t\t\t\tif (typeof manifest === \"string\") {\n\t\t\t\t\t\t// If there was an error parsing the manifest file, add the\n\t\t\t\t\t\t// error as a compilation error to make the compilation fail.\n\t\t\t\t\t\tlet e = params[\"dll reference parse error \" + manifest];\n\t\t\t\t\t\tif (e) {\n\t\t\t\t\t\t\tcompilation.errors.push(e);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t);\n\t}\n}\n\nclass DllManifestError extends WebpackError {\n\tconstructor(filename, message) {\n\t\tsuper();\n\n\t\tthis.name = \"DllManifestError\";\n\t\tthis.message = `Dll manifest ${filename}\\n${message}`;\n\n\t\tError.captureStackTrace(this, this.constructor);\n\t}\n}\n\nmodule.exports = DllReferencePlugin;\n"]},"metadata":{},"sourceType":"script"}