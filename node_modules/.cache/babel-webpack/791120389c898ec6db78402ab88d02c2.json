{"ast":null,"code":"var _createForOfIteratorHelper = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\n/**\n * Karma middleware is responsible for serving:\n * - client.html (the entrypoint for capturing a browser)\n * - debug.html\n * - context.html (the execution context, loaded within an iframe)\n * - karma.js\n *\n * The main part is generating context.html, as it contains:\n * - generating mappings\n * - including <script> and <link> tags\n * - setting propert caching headers\n */\nvar url = require('url');\n\nvar log = require('../logger').create('middleware:karma');\n\nvar stripHost = require('./strip_host').stripHost;\n\nvar common = require('./common');\n\nvar VERSION = require('../constants').VERSION;\n\nvar SCRIPT_TYPE = {\n  js: 'text/javascript',\n  dart: 'application/dart',\n  module: 'module'\n};\nvar FILE_TYPES = ['css', 'html', 'js', 'dart', 'module', 'dom'];\n\nfunction filePathToUrlPath(filePath, basePath, urlRoot, proxyPath) {\n  if (filePath.startsWith(basePath)) {\n    return proxyPath + urlRoot.substr(1) + 'base' + filePath.substr(basePath.length);\n  }\n\n  return proxyPath + urlRoot.substr(1) + 'absolute' + filePath;\n}\n\nfunction getQuery(urlStr) {\n  // eslint-disable-next-line node/no-deprecated-api\n  return url.parse(urlStr, true).query || {};\n}\n\nfunction getXUACompatibleMetaElement(url) {\n  var query = getQuery(url);\n\n  if (query['x-ua-compatible']) {\n    return \"\\n<meta http-equiv=\\\"X-UA-Compatible\\\" content=\\\"\".concat(query['x-ua-compatible'], \"\\\"/>\");\n  }\n\n  return '';\n}\n\nfunction getXUACompatibleUrl(url) {\n  var query = getQuery(url);\n\n  if (query['x-ua-compatible']) {\n    return '?x-ua-compatible=' + encodeURIComponent(query['x-ua-compatible']);\n  }\n\n  return '';\n}\n\nfunction createKarmaMiddleware(filesPromise, serveStaticFile, serveFile, injector, basePath, urlRoot, upstreamProxy, browserSocketTimeout) {\n  var proxyPath = upstreamProxy ? upstreamProxy.path : '/';\n  return function (request, response, next) {\n    // These config values should be up to date on every request\n    var client = injector.get('config.client');\n    var customContextFile = injector.get('config.customContextFile');\n    var customDebugFile = injector.get('config.customDebugFile');\n    var customClientContextFile = injector.get('config.customClientContextFile');\n    var includeCrossOriginAttribute = injector.get('config.crossOriginAttribute');\n    var normalizedUrl = stripHost(request.url) || request.url; // For backwards compatibility in middleware plugins, remove in v4.\n\n    request.normalizedUrl = normalizedUrl;\n    var requestUrl = normalizedUrl.replace(/\\?.*/, '');\n    var requestedRangeHeader = request.headers.range; // redirect /__karma__ to /__karma__ (trailing slash)\n\n    if (requestUrl === urlRoot.substr(0, urlRoot.length - 1)) {\n      response.setHeader('Location', proxyPath + urlRoot.substr(1));\n      response.writeHead(301);\n      return response.end('MOVED PERMANENTLY');\n    } // ignore urls outside urlRoot\n\n\n    if (!requestUrl.startsWith(urlRoot)) {\n      return next();\n    } // remove urlRoot prefix\n\n\n    requestUrl = requestUrl.substr(urlRoot.length - 1); // serve client.html\n\n    if (requestUrl === '/') {\n      // redirect client_with_context.html\n      if (!client.useIframe && client.runInParent) {\n        requestUrl = '/client_with_context.html';\n      } else {\n        // serve client.html\n        return serveStaticFile('/client.html', requestedRangeHeader, response, function (data) {\n          return data.replace('\\n%X_UA_COMPATIBLE%', getXUACompatibleMetaElement(request.url)).replace('%X_UA_COMPATIBLE_URL%', getXUACompatibleUrl(request.url));\n        });\n      }\n    }\n\n    if (['/karma.js', '/context.js', '/debug.js'].includes(requestUrl)) {\n      return serveStaticFile(requestUrl, requestedRangeHeader, response, function (data) {\n        return data.replace('%KARMA_URL_ROOT%', urlRoot).replace('%KARMA_VERSION%', VERSION).replace('%KARMA_PROXY_PATH%', proxyPath).replace('%BROWSER_SOCKET_TIMEOUT%', browserSocketTimeout);\n      });\n    } // serve the favicon\n\n\n    if (requestUrl === '/favicon.ico') {\n      return serveStaticFile(requestUrl, requestedRangeHeader, response);\n    } // serve context.html - execution context within the iframe\n    // or debug.html - execution context without channel to the server\n\n\n    var isRequestingContextFile = requestUrl === '/context.html';\n    var isRequestingDebugFile = requestUrl === '/debug.html';\n    var isRequestingClientContextFile = requestUrl === '/client_with_context.html';\n\n    if (isRequestingContextFile || isRequestingDebugFile || isRequestingClientContextFile) {\n      return filesPromise.then(function (files) {\n        var fileServer;\n        var requestedFileUrl;\n        log.debug('custom files', customContextFile, customDebugFile, customClientContextFile);\n\n        if (isRequestingContextFile && customContextFile) {\n          log.debug(\"Serving customContextFile \".concat(customContextFile));\n          fileServer = serveFile;\n          requestedFileUrl = customContextFile;\n        } else if (isRequestingDebugFile && customDebugFile) {\n          log.debug(\"Serving customDebugFile \".concat(customDebugFile));\n          fileServer = serveFile;\n          requestedFileUrl = customDebugFile;\n        } else if (isRequestingClientContextFile && customClientContextFile) {\n          log.debug(\"Serving customClientContextFile \".concat(customClientContextFile));\n          fileServer = serveFile;\n          requestedFileUrl = customClientContextFile;\n        } else {\n          log.debug(\"Serving static request \".concat(requestUrl));\n          fileServer = serveStaticFile;\n          requestedFileUrl = requestUrl;\n        }\n\n        fileServer(requestedFileUrl, requestedRangeHeader, response, function (data) {\n          common.setNoCacheHeaders(response);\n          var scriptTags = [];\n\n          var _iterator = _createForOfIteratorHelper(files.included),\n              _step;\n\n          try {\n            for (_iterator.s(); !(_step = _iterator.n()).done;) {\n              var file = _step.value;\n              var filePath = file.path;\n              var fileType = file.type || file.detectType();\n\n              if (!FILE_TYPES.includes(fileType)) {\n                if (file.type == null) {\n                  log.warn('Unable to determine file type from the file extension, defaulting to js.\\n' + \"  To silence the warning specify a valid type for \".concat(file.originalPath, \" in the configuration file.\\n\") + '  See http://karma-runner.github.io/latest/config/files.html');\n                } else {\n                  log.warn(\"Invalid file type (\".concat(file.type || 'empty string', \"), defaulting to js.\"));\n                }\n              }\n\n              if (!file.isUrl) {\n                filePath = filePathToUrlPath(filePath, basePath, urlRoot, proxyPath);\n\n                if (requestUrl === '/context.html') {\n                  filePath += '?' + file.sha;\n                }\n              }\n\n              if (fileType === 'css') {\n                scriptTags.push(\"<link type=\\\"text/css\\\" href=\\\"\".concat(filePath, \"\\\" rel=\\\"stylesheet\\\">\"));\n              } else if (fileType === 'dom') {\n                scriptTags.push(file.content);\n              } else if (fileType === 'html') {\n                scriptTags.push(\"<link href=\\\"\".concat(filePath, \"\\\" rel=\\\"import\\\">\"));\n              } else {\n                var scriptType = SCRIPT_TYPE[fileType] || 'text/javascript';\n                var crossOriginAttribute = includeCrossOriginAttribute ? 'crossorigin=\"anonymous\"' : '';\n                scriptTags.push(\"<script type=\\\"\".concat(scriptType, \"\\\" src=\\\"\").concat(filePath, \"\\\" \").concat(crossOriginAttribute, \"></script>\"));\n              }\n            }\n          } catch (err) {\n            _iterator.e(err);\n          } finally {\n            _iterator.f();\n          }\n\n          var scriptUrls = []; // For client_with_context, html elements are not added directly through an iframe.\n          // Instead, scriptTags is stored to window.__karma__.scriptUrls first. Later, the\n          // client will read window.__karma__.scriptUrls and dynamically add them to the DOM\n          // using DOMParser.\n\n          if (requestUrl === '/client_with_context.html') {\n            var _iterator2 = _createForOfIteratorHelper(scriptTags),\n                _step2;\n\n            try {\n              for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n                var script = _step2.value;\n                scriptUrls.push( // Escape characters with special roles (tags) in HTML. Open angle brackets are parsed as tags\n                // immediately, even if it is within double quotations in browsers\n                script.replace(/</g, '\\\\x3C').replace(/>/g, '\\\\x3E'));\n              }\n            } catch (err) {\n              _iterator2.e(err);\n            } finally {\n              _iterator2.f();\n            }\n          }\n\n          var mappings = data.includes('%MAPPINGS%') ? files.served.map(function (file) {\n            var filePath = filePathToUrlPath(file.path, basePath, urlRoot, proxyPath).replace(/\\\\/g, '\\\\\\\\') // Windows paths contain backslashes and generate bad IDs if not escaped\n            .replace(/'/g, '\\\\\\''); // Escape single quotes - double quotes should not be allowed!\n\n            return \"  '\".concat(filePath, \"': '\").concat(file.sha, \"'\");\n          }) : [];\n          return data.replace('%SCRIPTS%', scriptTags.join('\\n')).replace('%CLIENT_CONFIG%', 'window.__karma__.config = ' + JSON.stringify(client) + ';\\n').replace('%SCRIPT_URL_ARRAY%', 'window.__karma__.scriptUrls = ' + JSON.stringify(scriptUrls) + ';\\n').replace('%MAPPINGS%', 'window.__karma__.files = {\\n' + mappings.join(',\\n') + '\\n};\\n').replace('\\n%X_UA_COMPATIBLE%', getXUACompatibleMetaElement(request.url));\n        });\n      });\n    } else if (requestUrl === '/context.json') {\n      return filesPromise.then(function (files) {\n        common.setNoCacheHeaders(response);\n        response.writeHead(200);\n        response.end(JSON.stringify({\n          files: files.included.map(function (file) {\n            return filePathToUrlPath(file.path + '?' + file.sha, basePath, urlRoot, proxyPath);\n          })\n        }));\n      });\n    }\n\n    return next();\n  };\n}\n\ncreateKarmaMiddleware.$inject = ['filesPromise', 'serveStaticFile', 'serveFile', 'injector', 'config.basePath', 'config.urlRoot', 'config.upstreamProxy', 'config.browserSocketTimeout']; // PUBLIC API\n\nexports.create = createKarmaMiddleware;","map":{"version":3,"sources":["/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/karma/lib/middleware/karma.js"],"names":["url","require","log","create","stripHost","common","VERSION","SCRIPT_TYPE","js","dart","module","FILE_TYPES","filePathToUrlPath","filePath","basePath","urlRoot","proxyPath","startsWith","substr","length","getQuery","urlStr","parse","query","getXUACompatibleMetaElement","getXUACompatibleUrl","encodeURIComponent","createKarmaMiddleware","filesPromise","serveStaticFile","serveFile","injector","upstreamProxy","browserSocketTimeout","path","request","response","next","client","get","customContextFile","customDebugFile","customClientContextFile","includeCrossOriginAttribute","normalizedUrl","requestUrl","replace","requestedRangeHeader","headers","range","setHeader","writeHead","end","useIframe","runInParent","data","includes","isRequestingContextFile","isRequestingDebugFile","isRequestingClientContextFile","then","files","fileServer","requestedFileUrl","debug","setNoCacheHeaders","scriptTags","included","file","fileType","type","detectType","warn","originalPath","isUrl","sha","push","content","scriptType","crossOriginAttribute","scriptUrls","script","mappings","served","map","join","JSON","stringify","$inject","exports"],"mappings":"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","sourcesContent":["/**\n * Karma middleware is responsible for serving:\n * - client.html (the entrypoint for capturing a browser)\n * - debug.html\n * - context.html (the execution context, loaded within an iframe)\n * - karma.js\n *\n * The main part is generating context.html, as it contains:\n * - generating mappings\n * - including <script> and <link> tags\n * - setting propert caching headers\n */\n\nconst url = require('url')\n\nconst log = require('../logger').create('middleware:karma')\nconst stripHost = require('./strip_host').stripHost\nconst common = require('./common')\n\nconst VERSION = require('../constants').VERSION\nconst SCRIPT_TYPE = {\n  js: 'text/javascript',\n  dart: 'application/dart',\n  module: 'module'\n}\nconst FILE_TYPES = [\n  'css',\n  'html',\n  'js',\n  'dart',\n  'module',\n  'dom'\n]\n\nfunction filePathToUrlPath (filePath, basePath, urlRoot, proxyPath) {\n  if (filePath.startsWith(basePath)) {\n    return proxyPath + urlRoot.substr(1) + 'base' + filePath.substr(basePath.length)\n  }\n  return proxyPath + urlRoot.substr(1) + 'absolute' + filePath\n}\n\nfunction getQuery (urlStr) {\n  // eslint-disable-next-line node/no-deprecated-api\n  return url.parse(urlStr, true).query || {}\n}\n\nfunction getXUACompatibleMetaElement (url) {\n  const query = getQuery(url)\n  if (query['x-ua-compatible']) {\n    return `\\n<meta http-equiv=\"X-UA-Compatible\" content=\"${query['x-ua-compatible']}\"/>`\n  }\n  return ''\n}\n\nfunction getXUACompatibleUrl (url) {\n  const query = getQuery(url)\n  if (query['x-ua-compatible']) {\n    return '?x-ua-compatible=' + encodeURIComponent(query['x-ua-compatible'])\n  }\n  return ''\n}\n\nfunction createKarmaMiddleware (\n  filesPromise,\n  serveStaticFile,\n  serveFile,\n  injector,\n  basePath,\n  urlRoot,\n  upstreamProxy,\n  browserSocketTimeout\n) {\n  const proxyPath = upstreamProxy ? upstreamProxy.path : '/'\n  return function (request, response, next) {\n    // These config values should be up to date on every request\n    const client = injector.get('config.client')\n    const customContextFile = injector.get('config.customContextFile')\n    const customDebugFile = injector.get('config.customDebugFile')\n    const customClientContextFile = injector.get('config.customClientContextFile')\n    const includeCrossOriginAttribute = injector.get('config.crossOriginAttribute')\n\n    const normalizedUrl = stripHost(request.url) || request.url\n    // For backwards compatibility in middleware plugins, remove in v4.\n    request.normalizedUrl = normalizedUrl\n\n    let requestUrl = normalizedUrl.replace(/\\?.*/, '')\n    const requestedRangeHeader = request.headers.range\n\n    // redirect /__karma__ to /__karma__ (trailing slash)\n    if (requestUrl === urlRoot.substr(0, urlRoot.length - 1)) {\n      response.setHeader('Location', proxyPath + urlRoot.substr(1))\n      response.writeHead(301)\n      return response.end('MOVED PERMANENTLY')\n    }\n\n    // ignore urls outside urlRoot\n    if (!requestUrl.startsWith(urlRoot)) {\n      return next()\n    }\n\n    // remove urlRoot prefix\n    requestUrl = requestUrl.substr(urlRoot.length - 1)\n\n    // serve client.html\n    if (requestUrl === '/') {\n      // redirect client_with_context.html\n      if (!client.useIframe && client.runInParent) {\n        requestUrl = '/client_with_context.html'\n      } else { // serve client.html\n        return serveStaticFile('/client.html', requestedRangeHeader, response, (data) =>\n          data\n            .replace('\\n%X_UA_COMPATIBLE%', getXUACompatibleMetaElement(request.url))\n            .replace('%X_UA_COMPATIBLE_URL%', getXUACompatibleUrl(request.url)))\n      }\n    }\n\n    if (['/karma.js', '/context.js', '/debug.js'].includes(requestUrl)) {\n      return serveStaticFile(requestUrl, requestedRangeHeader, response, (data) =>\n        data\n          .replace('%KARMA_URL_ROOT%', urlRoot)\n          .replace('%KARMA_VERSION%', VERSION)\n          .replace('%KARMA_PROXY_PATH%', proxyPath)\n          .replace('%BROWSER_SOCKET_TIMEOUT%', browserSocketTimeout))\n    }\n\n    // serve the favicon\n    if (requestUrl === '/favicon.ico') {\n      return serveStaticFile(requestUrl, requestedRangeHeader, response)\n    }\n\n    // serve context.html - execution context within the iframe\n    // or debug.html - execution context without channel to the server\n    const isRequestingContextFile = requestUrl === '/context.html'\n    const isRequestingDebugFile = requestUrl === '/debug.html'\n    const isRequestingClientContextFile = requestUrl === '/client_with_context.html'\n    if (isRequestingContextFile || isRequestingDebugFile || isRequestingClientContextFile) {\n      return filesPromise.then((files) => {\n        let fileServer\n        let requestedFileUrl\n        log.debug('custom files', customContextFile, customDebugFile, customClientContextFile)\n        if (isRequestingContextFile && customContextFile) {\n          log.debug(`Serving customContextFile ${customContextFile}`)\n          fileServer = serveFile\n          requestedFileUrl = customContextFile\n        } else if (isRequestingDebugFile && customDebugFile) {\n          log.debug(`Serving customDebugFile ${customDebugFile}`)\n          fileServer = serveFile\n          requestedFileUrl = customDebugFile\n        } else if (isRequestingClientContextFile && customClientContextFile) {\n          log.debug(`Serving customClientContextFile ${customClientContextFile}`)\n          fileServer = serveFile\n          requestedFileUrl = customClientContextFile\n        } else {\n          log.debug(`Serving static request ${requestUrl}`)\n          fileServer = serveStaticFile\n          requestedFileUrl = requestUrl\n        }\n\n        fileServer(requestedFileUrl, requestedRangeHeader, response, function (data) {\n          common.setNoCacheHeaders(response)\n\n          const scriptTags = []\n          for (const file of files.included) {\n            let filePath = file.path\n            const fileType = file.type || file.detectType()\n\n            if (!FILE_TYPES.includes(fileType)) {\n              if (file.type == null) {\n                log.warn(\n                  'Unable to determine file type from the file extension, defaulting to js.\\n' +\n                  `  To silence the warning specify a valid type for ${file.originalPath} in the configuration file.\\n` +\n                  '  See http://karma-runner.github.io/latest/config/files.html'\n                )\n              } else {\n                log.warn(`Invalid file type (${file.type || 'empty string'}), defaulting to js.`)\n              }\n            }\n\n            if (!file.isUrl) {\n              filePath = filePathToUrlPath(filePath, basePath, urlRoot, proxyPath)\n\n              if (requestUrl === '/context.html') {\n                filePath += '?' + file.sha\n              }\n            }\n\n            if (fileType === 'css') {\n              scriptTags.push(`<link type=\"text/css\" href=\"${filePath}\" rel=\"stylesheet\">`)\n            } else if (fileType === 'dom') {\n              scriptTags.push(file.content)\n            } else if (fileType === 'html') {\n              scriptTags.push(`<link href=\"${filePath}\" rel=\"import\">`)\n            } else {\n              const scriptType = (SCRIPT_TYPE[fileType] || 'text/javascript')\n              const crossOriginAttribute = includeCrossOriginAttribute ? 'crossorigin=\"anonymous\"' : ''\n              scriptTags.push(`<script type=\"${scriptType}\" src=\"${filePath}\" ${crossOriginAttribute}></script>`)\n            }\n          }\n\n          const scriptUrls = []\n          // For client_with_context, html elements are not added directly through an iframe.\n          // Instead, scriptTags is stored to window.__karma__.scriptUrls first. Later, the\n          // client will read window.__karma__.scriptUrls and dynamically add them to the DOM\n          // using DOMParser.\n          if (requestUrl === '/client_with_context.html') {\n            for (const script of scriptTags) {\n              scriptUrls.push(\n                // Escape characters with special roles (tags) in HTML. Open angle brackets are parsed as tags\n                // immediately, even if it is within double quotations in browsers\n                script.replace(/</g, '\\\\x3C').replace(/>/g, '\\\\x3E'))\n            }\n          }\n\n          const mappings = data.includes('%MAPPINGS%') ? files.served.map((file) => {\n            const filePath = filePathToUrlPath(file.path, basePath, urlRoot, proxyPath)\n              .replace(/\\\\/g, '\\\\\\\\') // Windows paths contain backslashes and generate bad IDs if not escaped\n              .replace(/'/g, '\\\\\\'') // Escape single quotes - double quotes should not be allowed!\n\n            return `  '${filePath}': '${file.sha}'`\n          }) : []\n\n          return data\n            .replace('%SCRIPTS%', scriptTags.join('\\n'))\n            .replace('%CLIENT_CONFIG%', 'window.__karma__.config = ' + JSON.stringify(client) + ';\\n')\n            .replace('%SCRIPT_URL_ARRAY%', 'window.__karma__.scriptUrls = ' + JSON.stringify(scriptUrls) + ';\\n')\n            .replace('%MAPPINGS%', 'window.__karma__.files = {\\n' + mappings.join(',\\n') + '\\n};\\n')\n            .replace('\\n%X_UA_COMPATIBLE%', getXUACompatibleMetaElement(request.url))\n        })\n      })\n    } else if (requestUrl === '/context.json') {\n      return filesPromise.then((files) => {\n        common.setNoCacheHeaders(response)\n        response.writeHead(200)\n        response.end(JSON.stringify({\n          files: files.included.map((file) => filePathToUrlPath(file.path + '?' + file.sha, basePath, urlRoot, proxyPath))\n        }))\n      })\n    }\n\n    return next()\n  }\n}\n\ncreateKarmaMiddleware.$inject = [\n  'filesPromise',\n  'serveStaticFile',\n  'serveFile',\n  'injector',\n  'config.basePath',\n  'config.urlRoot',\n  'config.upstreamProxy',\n  'config.browserSocketTimeout'\n]\n\n// PUBLIC API\nexports.create = createKarmaMiddleware\n"]},"metadata":{},"sourceType":"script"}