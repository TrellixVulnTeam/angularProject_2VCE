{"ast":null,"code":"(function (factory) {\n  if (typeof module === \"object\" && typeof module.exports === \"object\") {\n    var v = factory(require, exports);\n    if (v !== undefined) module.exports = v;\n  } else if (typeof define === \"function\" && define.amd) {\n    define(\"@angular/compiler-cli/ngcc/src/locking/lock_file_with_child_process/util\", [\"require\", \"exports\"], factory);\n  }\n})(function (require, exports) {\n  \"use strict\";\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.removeLockFile = void 0;\n  /**\n   * Remove the lock-file at the provided `lockFilePath` from the given file-system.\n   *\n   * It only removes the file if the pid stored in the file matches the provided `pid`.\n   * The provided `pid` is of the process that is exiting and so no longer needs to hold the lock.\n   */\n\n  function removeLockFile(fs, logger, lockFilePath, pid) {\n    try {\n      logger.debug(\"Attempting to remove lock-file at \" + lockFilePath + \".\");\n      var lockFilePid = fs.readFile(lockFilePath);\n\n      if (lockFilePid === pid) {\n        logger.debug(\"PIDs match (\" + pid + \"), so removing \" + lockFilePath + \".\");\n        fs.removeFile(lockFilePath);\n      } else {\n        logger.debug(\"PIDs do not match (\" + pid + \" and \" + lockFilePid + \"), so not removing \" + lockFilePath + \".\");\n      }\n    } catch (e) {\n      if (e.code === 'ENOENT') {\n        logger.debug(\"The lock-file at \" + lockFilePath + \" was already removed.\"); // File already removed so quietly exit\n      } else {\n        throw e;\n      }\n    }\n  }\n\n  exports.removeLockFile = removeLockFile;\n});","map":{"version":3,"sources":["../../../../../../../../../packages/compiler-cli/ngcc/src/locking/lock_file_with_child_process/util.ts"],"names":[],"mappings":";;;;;;;;;;;;;;AAUA;;;;;AAKG;;AACH,WAAgB,cAAhB,CACI,EADJ,EACoB,MADpB,EACoC,YADpC,EACkE,GADlE,EAC6E;AAC3E,QAAI;AACF,MAAA,MAAM,CAAC,KAAP,CAAa,uCAAqC,YAArC,GAAiD,GAA9D;AACA,UAAM,WAAW,GAAG,EAAE,CAAC,QAAH,CAAY,YAAZ,CAApB;;AACA,UAAI,WAAW,KAAK,GAApB,EAAyB;AACvB,QAAA,MAAM,CAAC,KAAP,CAAa,iBAAe,GAAf,GAAkB,iBAAlB,GAAoC,YAApC,GAAgD,GAA7D;AACA,QAAA,EAAE,CAAC,UAAH,CAAc,YAAd;AACD,OAHD,MAGO;AACL,QAAA,MAAM,CAAC,KAAP,CACI,wBAAsB,GAAtB,GAAyB,OAAzB,GAAiC,WAAjC,GAA4C,qBAA5C,GAAkE,YAAlE,GAA8E,GADlF;AAED;AACF,KAVD,CAUE,OAAO,CAAP,EAAU;AACV,UAAI,CAAC,CAAC,IAAF,KAAW,QAAf,EAAyB;AACvB,QAAA,MAAM,CAAC,KAAP,CAAa,sBAAoB,YAApB,GAAgC,uBAA7C,EADuB,CAEvB;AACD,OAHD,MAGO;AACL,cAAM,CAAN;AACD;AACF;AACF;;AApBD,EAAA,OAAA,CAAA,cAAA,GAAA,cAAA","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AbsoluteFsPath, FileSystem} from '../../../../src/ngtsc/file_system';\nimport {Logger} from '../../../../src/ngtsc/logging';\n\n/**\n * Remove the lock-file at the provided `lockFilePath` from the given file-system.\n *\n * It only removes the file if the pid stored in the file matches the provided `pid`.\n * The provided `pid` is of the process that is exiting and so no longer needs to hold the lock.\n */\nexport function removeLockFile(\n    fs: FileSystem, logger: Logger, lockFilePath: AbsoluteFsPath, pid: string) {\n  try {\n    logger.debug(`Attempting to remove lock-file at ${lockFilePath}.`);\n    const lockFilePid = fs.readFile(lockFilePath);\n    if (lockFilePid === pid) {\n      logger.debug(`PIDs match (${pid}), so removing ${lockFilePath}.`);\n      fs.removeFile(lockFilePath);\n    } else {\n      logger.debug(\n          `PIDs do not match (${pid} and ${lockFilePid}), so not removing ${lockFilePath}.`);\n    }\n  } catch (e) {\n    if (e.code === 'ENOENT') {\n      logger.debug(`The lock-file at ${lockFilePath} was already removed.`);\n      // File already removed so quietly exit\n    } else {\n      throw e;\n    }\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}