{"ast":null,"code":"/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n(function (factory) {\n  if (typeof module === \"object\" && typeof module.exports === \"object\") {\n    var v = factory(require, exports);\n    if (v !== undefined) module.exports = v;\n  } else if (typeof define === \"function\" && define.amd) {\n    define(\"@angular/compiler/src/i18n/serializers/xml_helper\", [\"require\", \"exports\", \"tslib\"], factory);\n  }\n})(function (require, exports) {\n  \"use strict\";\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.escapeXml = exports.CR = exports.Text = exports.Tag = exports.Doctype = exports.Declaration = exports.serialize = void 0;\n\n  var tslib_1 = require(\"tslib\");\n\n  var _Visitor =\n  /** @class */\n  function () {\n    function _Visitor() {}\n\n    _Visitor.prototype.visitTag = function (tag) {\n      var _this = this;\n\n      var strAttrs = this._serializeAttributes(tag.attrs);\n\n      if (tag.children.length == 0) {\n        return \"<\" + tag.name + strAttrs + \"/>\";\n      }\n\n      var strChildren = tag.children.map(function (node) {\n        return node.visit(_this);\n      });\n      return \"<\" + tag.name + strAttrs + \">\" + strChildren.join('') + \"</\" + tag.name + \">\";\n    };\n\n    _Visitor.prototype.visitText = function (text) {\n      return text.value;\n    };\n\n    _Visitor.prototype.visitDeclaration = function (decl) {\n      return \"<?xml\" + this._serializeAttributes(decl.attrs) + \" ?>\";\n    };\n\n    _Visitor.prototype._serializeAttributes = function (attrs) {\n      var strAttrs = Object.keys(attrs).map(function (name) {\n        return name + \"=\\\"\" + attrs[name] + \"\\\"\";\n      }).join(' ');\n      return strAttrs.length > 0 ? ' ' + strAttrs : '';\n    };\n\n    _Visitor.prototype.visitDoctype = function (doctype) {\n      return \"<!DOCTYPE \" + doctype.rootTag + \" [\\n\" + doctype.dtd + \"\\n]>\";\n    };\n\n    return _Visitor;\n  }();\n\n  var _visitor = new _Visitor();\n\n  function serialize(nodes) {\n    return nodes.map(function (node) {\n      return node.visit(_visitor);\n    }).join('');\n  }\n\n  exports.serialize = serialize;\n\n  var Declaration =\n  /** @class */\n  function () {\n    function Declaration(unescapedAttrs) {\n      var _this = this;\n\n      this.attrs = {};\n      Object.keys(unescapedAttrs).forEach(function (k) {\n        _this.attrs[k] = escapeXml(unescapedAttrs[k]);\n      });\n    }\n\n    Declaration.prototype.visit = function (visitor) {\n      return visitor.visitDeclaration(this);\n    };\n\n    return Declaration;\n  }();\n\n  exports.Declaration = Declaration;\n\n  var Doctype =\n  /** @class */\n  function () {\n    function Doctype(rootTag, dtd) {\n      this.rootTag = rootTag;\n      this.dtd = dtd;\n    }\n\n    Doctype.prototype.visit = function (visitor) {\n      return visitor.visitDoctype(this);\n    };\n\n    return Doctype;\n  }();\n\n  exports.Doctype = Doctype;\n\n  var Tag =\n  /** @class */\n  function () {\n    function Tag(name, unescapedAttrs, children) {\n      var _this = this;\n\n      if (unescapedAttrs === void 0) {\n        unescapedAttrs = {};\n      }\n\n      if (children === void 0) {\n        children = [];\n      }\n\n      this.name = name;\n      this.children = children;\n      this.attrs = {};\n      Object.keys(unescapedAttrs).forEach(function (k) {\n        _this.attrs[k] = escapeXml(unescapedAttrs[k]);\n      });\n    }\n\n    Tag.prototype.visit = function (visitor) {\n      return visitor.visitTag(this);\n    };\n\n    return Tag;\n  }();\n\n  exports.Tag = Tag;\n\n  var Text =\n  /** @class */\n  function () {\n    function Text(unescapedValue) {\n      this.value = escapeXml(unescapedValue);\n    }\n\n    Text.prototype.visit = function (visitor) {\n      return visitor.visitText(this);\n    };\n\n    return Text;\n  }();\n\n  exports.Text = Text;\n\n  var CR =\n  /** @class */\n  function (_super) {\n    tslib_1.__extends(CR, _super);\n\n    function CR(ws) {\n      if (ws === void 0) {\n        ws = 0;\n      }\n\n      return _super.call(this, \"\\n\" + new Array(ws + 1).join(' ')) || this;\n    }\n\n    return CR;\n  }(Text);\n\n  exports.CR = CR;\n  var _ESCAPED_CHARS = [[/&/g, '&amp;'], [/\"/g, '&quot;'], [/'/g, '&apos;'], [/</g, '&lt;'], [/>/g, '&gt;']]; // Escape `_ESCAPED_CHARS` characters in the given text with encoded entities\n\n  function escapeXml(text) {\n    return _ESCAPED_CHARS.reduce(function (text, entry) {\n      return text.replace(entry[0], entry[1]);\n    }, text);\n  }\n\n  exports.escapeXml = escapeXml;\n});","map":{"version":3,"sources":["../../../../../../../../packages/compiler/src/i18n/serializers/xml_helper.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport interface IVisitor {\n  visitTag(tag: Tag): any;\n  visitText(text: Text): any;\n  visitDeclaration(decl: Declaration): any;\n  visitDoctype(doctype: Doctype): any;\n}\n\nclass _Visitor implements IVisitor {\n  visitTag(tag: Tag): string {\n    const strAttrs = this._serializeAttributes(tag.attrs);\n\n    if (tag.children.length == 0) {\n      return `<${tag.name}${strAttrs}/>`;\n    }\n\n    const strChildren = tag.children.map(node => node.visit(this));\n    return `<${tag.name}${strAttrs}>${strChildren.join('')}</${tag.name}>`;\n  }\n\n  visitText(text: Text): string {\n    return text.value;\n  }\n\n  visitDeclaration(decl: Declaration): string {\n    return `<?xml${this._serializeAttributes(decl.attrs)} ?>`;\n  }\n\n  private _serializeAttributes(attrs: {[k: string]: string}) {\n    const strAttrs = Object.keys(attrs).map((name: string) => `${name}=\"${attrs[name]}\"`).join(' ');\n    return strAttrs.length > 0 ? ' ' + strAttrs : '';\n  }\n\n  visitDoctype(doctype: Doctype): any {\n    return `<!DOCTYPE ${doctype.rootTag} [\\n${doctype.dtd}\\n]>`;\n  }\n}\n\nconst _visitor = new _Visitor();\n\nexport function serialize(nodes: Node[]): string {\n  return nodes.map((node: Node): string => node.visit(_visitor)).join('');\n}\n\nexport interface Node {\n  visit(visitor: IVisitor): any;\n}\n\nexport class Declaration implements Node {\n  public attrs: {[k: string]: string} = {};\n\n  constructor(unescapedAttrs: {[k: string]: string}) {\n    Object.keys(unescapedAttrs).forEach((k: string) => {\n      this.attrs[k] = escapeXml(unescapedAttrs[k]);\n    });\n  }\n\n  visit(visitor: IVisitor): any {\n    return visitor.visitDeclaration(this);\n  }\n}\n\nexport class Doctype implements Node {\n  constructor(public rootTag: string, public dtd: string) {}\n\n  visit(visitor: IVisitor): any {\n    return visitor.visitDoctype(this);\n  }\n}\n\nexport class Tag implements Node {\n  public attrs: {[k: string]: string} = {};\n\n  constructor(\n      public name: string, unescapedAttrs: {[k: string]: string} = {},\n      public children: Node[] = []) {\n    Object.keys(unescapedAttrs).forEach((k: string) => {\n      this.attrs[k] = escapeXml(unescapedAttrs[k]);\n    });\n  }\n\n  visit(visitor: IVisitor): any {\n    return visitor.visitTag(this);\n  }\n}\n\nexport class Text implements Node {\n  value: string;\n  constructor(unescapedValue: string) {\n    this.value = escapeXml(unescapedValue);\n  }\n\n  visit(visitor: IVisitor): any {\n    return visitor.visitText(this);\n  }\n}\n\nexport class CR extends Text {\n  constructor(ws: number = 0) {\n    super(`\\n${new Array(ws + 1).join(' ')}`);\n  }\n}\n\nconst _ESCAPED_CHARS: [RegExp, string][] = [\n  [/&/g, '&amp;'],\n  [/\"/g, '&quot;'],\n  [/'/g, '&apos;'],\n  [/</g, '&lt;'],\n  [/>/g, '&gt;'],\n];\n\n// Escape `_ESCAPED_CHARS` characters in the given text with encoded entities\nexport function escapeXml(text: string): string {\n  return _ESCAPED_CHARS.reduce(\n      (text: string, entry: [RegExp, string]) => text.replace(entry[0], entry[1]), text);\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}