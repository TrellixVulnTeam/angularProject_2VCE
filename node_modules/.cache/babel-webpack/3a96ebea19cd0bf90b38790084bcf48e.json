{"ast":null,"code":"/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n(function (factory) {\n  if (typeof module === \"object\" && typeof module.exports === \"object\") {\n    var v = factory(require, exports);\n    if (v !== undefined) module.exports = v;\n  } else if (typeof define === \"function\" && define.amd) {\n    define(\"@angular/compiler-cli/src/tooling\", [\"require\", \"exports\", \"tslib\", \"@angular/compiler-cli/src/ngtsc/reflection\", \"@angular/compiler-cli/src/transformers/downlevel_decorators_transform\"], factory);\n  }\n})(function (require, exports) {\n  \"use strict\";\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.constructorParametersDownlevelTransform = exports.GLOBAL_DEFS_FOR_TERSER_WITH_AOT = exports.GLOBAL_DEFS_FOR_TERSER = void 0;\n\n  var tslib_1 = require(\"tslib\");\n\n  var reflection_1 = require(\"@angular/compiler-cli/src/ngtsc/reflection\");\n\n  var downlevel_decorators_transform_1 = require(\"@angular/compiler-cli/src/transformers/downlevel_decorators_transform\");\n  /**\n   * Known values for global variables in `@angular/core` that Terser should set using\n   * https://github.com/terser-js/terser#conditional-compilation\n   */\n\n\n  exports.GLOBAL_DEFS_FOR_TERSER = {\n    ngDevMode: false,\n    ngI18nClosureMode: false\n  };\n  exports.GLOBAL_DEFS_FOR_TERSER_WITH_AOT = tslib_1.__assign(tslib_1.__assign({}, exports.GLOBAL_DEFS_FOR_TERSER), {\n    ngJitMode: false\n  });\n  /**\n   * Transform for downleveling Angular decorators and Angular-decorated class constructor\n   * parameters for dependency injection. This transform can be used by the CLI for JIT-mode\n   * compilation where constructor parameters and associated Angular decorators should be\n   * downleveled so that apps are not exposed to the ES2015 temporal dead zone limitation\n   * in TypeScript. See https://github.com/angular/angular-cli/pull/14473 for more details.\n   */\n\n  function constructorParametersDownlevelTransform(program) {\n    var typeChecker = program.getTypeChecker();\n    var reflectionHost = new reflection_1.TypeScriptReflectionHost(typeChecker);\n    return downlevel_decorators_transform_1.getDownlevelDecoratorsTransform(typeChecker, reflectionHost, [],\n    /* isCore */\n    false,\n    /* enableClosureCompiler */\n    false,\n    /* skipClassDecorators */\n    true);\n  }\n\n  exports.constructorParametersDownlevelTransform = constructorParametersDownlevelTransform;\n});","map":{"version":3,"sources":["../../../../../../packages/compiler-cli/src/tooling.ts"],"names":[],"mappings":"AAAA;;;;;;AAMG;;;;;;;;;;;;;;;;;;AAWH,MAAA,YAAA,GAAA,OAAA,CAAA,4CAAA,CAAA;;AACA,MAAA,gCAAA,GAAA,OAAA,CAAA,uEAAA,CAAA;AAEA;;;AAGG;;;AACU,EAAA,OAAA,CAAA,sBAAA,GAAyB;AACpC,IAAA,SAAS,EAAE,KADyB;AAEpC,IAAA,iBAAiB,EAAE;AAFiB,GAAzB;AAKA,EAAA,OAAA,CAAA,+BAAA,GAA+B,OAAA,CAAA,QAAA,CAAA,OAAA,CAAA,QAAA,CAAA,EAAA,EACvC,OAAA,CAAA,sBADuC,CAAA,EACjB;AACzB,IAAA,SAAS,EAAE;AADc,GADiB,CAA/B;AAKb;;;;;;AAMG;;AACH,WAAgB,uCAAhB,CAAwD,OAAxD,EAA2E;AAEzE,QAAM,WAAW,GAAG,OAAO,CAAC,cAAR,EAApB;AACA,QAAM,cAAc,GAAG,IAAI,YAAA,CAAA,wBAAJ,CAA6B,WAA7B,CAAvB;AACA,WAAO,gCAAA,CAAA,+BAAA,CACH,WADG,EACU,cADV,EAC0B,EAD1B;AAC8B;AAAa,SAD3C;AAEH;AAA4B,SAFzB;AAEgC;AAA0B,QAF1D,CAAP;AAGD;;AAPD,EAAA,OAAA,CAAA,uCAAA,GAAA,uCAAA","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @fileoverview\n * This file is used as a private API channel to shared Angular FW APIs with @angular/cli.\n *\n * Any changes to this file should be discussed with the Angular CLI team.\n */\n\nimport * as ts from 'typescript';\n\nimport {TypeScriptReflectionHost} from './ngtsc/reflection';\nimport {getDownlevelDecoratorsTransform} from './transformers/downlevel_decorators_transform';\n\n/**\n * Known values for global variables in `@angular/core` that Terser should set using\n * https://github.com/terser-js/terser#conditional-compilation\n */\nexport const GLOBAL_DEFS_FOR_TERSER = {\n  ngDevMode: false,\n  ngI18nClosureMode: false,\n};\n\nexport const GLOBAL_DEFS_FOR_TERSER_WITH_AOT = {\n  ...GLOBAL_DEFS_FOR_TERSER,\n  ngJitMode: false,\n};\n\n/**\n * Transform for downleveling Angular decorators and Angular-decorated class constructor\n * parameters for dependency injection. This transform can be used by the CLI for JIT-mode\n * compilation where constructor parameters and associated Angular decorators should be\n * downleveled so that apps are not exposed to the ES2015 temporal dead zone limitation\n * in TypeScript. See https://github.com/angular/angular-cli/pull/14473 for more details.\n */\nexport function constructorParametersDownlevelTransform(program: ts.Program):\n    ts.TransformerFactory<ts.SourceFile> {\n  const typeChecker = program.getTypeChecker();\n  const reflectionHost = new TypeScriptReflectionHost(typeChecker);\n  return getDownlevelDecoratorsTransform(\n      typeChecker, reflectionHost, [], /* isCore */ false,\n      /* enableClosureCompiler */ false, /* skipClassDecorators */ true);\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}