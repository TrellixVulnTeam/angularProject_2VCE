{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nvar _classCallCheck = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/createClass\");\n\nvar RequireContextDependency = require(\"./RequireContextDependency\");\n\nmodule.exports = /*#__PURE__*/function () {\n  function RequireContextDependencyParserPlugin() {\n    _classCallCheck(this, RequireContextDependencyParserPlugin);\n  }\n\n  _createClass(RequireContextDependencyParserPlugin, [{\n    key: \"apply\",\n    value: function apply(parser) {\n      parser.hooks.call.for(\"require.context\").tap(\"RequireContextDependencyParserPlugin\", function (expr) {\n        var regExp = /^\\.\\/.*$/;\n        var recursive = true;\n        var mode = \"sync\";\n\n        switch (expr.arguments.length) {\n          case 4:\n            {\n              var modeExpr = parser.evaluateExpression(expr.arguments[3]);\n              if (!modeExpr.isString()) return;\n              mode = modeExpr.string;\n            }\n          // falls through\n\n          case 3:\n            {\n              var regExpExpr = parser.evaluateExpression(expr.arguments[2]);\n              if (!regExpExpr.isRegExp()) return;\n              regExp = regExpExpr.regExp;\n            }\n          // falls through\n\n          case 2:\n            {\n              var recursiveExpr = parser.evaluateExpression(expr.arguments[1]);\n              if (!recursiveExpr.isBoolean()) return;\n              recursive = recursiveExpr.bool;\n            }\n          // falls through\n\n          case 1:\n            {\n              var requestExpr = parser.evaluateExpression(expr.arguments[0]);\n              if (!requestExpr.isString()) return;\n              var dep = new RequireContextDependency({\n                request: requestExpr.string,\n                recursive: recursive,\n                regExp: regExp,\n                mode: mode\n              }, expr.range);\n              dep.loc = expr.loc;\n              dep.optional = parser.scope.inTry;\n              parser.state.current.addDependency(dep);\n              return true;\n            }\n        }\n      });\n    }\n  }]);\n\n  return RequireContextDependencyParserPlugin;\n}();","map":{"version":3,"sources":["/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/webpack/lib/dependencies/RequireContextDependencyParserPlugin.js"],"names":["RequireContextDependency","require","module","exports","parser","hooks","call","for","tap","expr","regExp","recursive","mode","arguments","length","modeExpr","evaluateExpression","isString","string","regExpExpr","isRegExp","recursiveExpr","isBoolean","bool","requestExpr","dep","request","range","loc","optional","scope","inTry","state","current","addDependency"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;;;;;AAEA,IAAMA,wBAAwB,GAAGC,OAAO,CAAC,4BAAD,CAAxC;;AAEAC,MAAM,CAACC,OAAP;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,WACC,eAAMC,MAAN,EAAc;AACbA,MAAAA,MAAM,CAACC,KAAP,CAAaC,IAAb,CACEC,GADF,CACM,iBADN,EAEEC,GAFF,CAEM,sCAFN,EAE8C,UAAAC,IAAI,EAAI;AACpD,YAAIC,MAAM,GAAG,UAAb;AACA,YAAIC,SAAS,GAAG,IAAhB;AACA,YAAIC,IAAI,GAAG,MAAX;;AACA,gBAAQH,IAAI,CAACI,SAAL,CAAeC,MAAvB;AACC,eAAK,CAAL;AAAQ;AACP,kBAAMC,QAAQ,GAAGX,MAAM,CAACY,kBAAP,CAA0BP,IAAI,CAACI,SAAL,CAAe,CAAf,CAA1B,CAAjB;AACA,kBAAI,CAACE,QAAQ,CAACE,QAAT,EAAL,EAA0B;AAC1BL,cAAAA,IAAI,GAAGG,QAAQ,CAACG,MAAhB;AACA;AACD;;AACA,eAAK,CAAL;AAAQ;AACP,kBAAMC,UAAU,GAAGf,MAAM,CAACY,kBAAP,CAA0BP,IAAI,CAACI,SAAL,CAAe,CAAf,CAA1B,CAAnB;AACA,kBAAI,CAACM,UAAU,CAACC,QAAX,EAAL,EAA4B;AAC5BV,cAAAA,MAAM,GAAGS,UAAU,CAACT,MAApB;AACA;AACD;;AACA,eAAK,CAAL;AAAQ;AACP,kBAAMW,aAAa,GAAGjB,MAAM,CAACY,kBAAP,CAA0BP,IAAI,CAACI,SAAL,CAAe,CAAf,CAA1B,CAAtB;AACA,kBAAI,CAACQ,aAAa,CAACC,SAAd,EAAL,EAAgC;AAChCX,cAAAA,SAAS,GAAGU,aAAa,CAACE,IAA1B;AACA;AACD;;AACA,eAAK,CAAL;AAAQ;AACP,kBAAMC,WAAW,GAAGpB,MAAM,CAACY,kBAAP,CAA0BP,IAAI,CAACI,SAAL,CAAe,CAAf,CAA1B,CAApB;AACA,kBAAI,CAACW,WAAW,CAACP,QAAZ,EAAL,EAA6B;AAC7B,kBAAMQ,GAAG,GAAG,IAAIzB,wBAAJ,CACX;AACC0B,gBAAAA,OAAO,EAAEF,WAAW,CAACN,MADtB;AAECP,gBAAAA,SAAS,EAATA,SAFD;AAGCD,gBAAAA,MAAM,EAANA,MAHD;AAICE,gBAAAA,IAAI,EAAJA;AAJD,eADW,EAOXH,IAAI,CAACkB,KAPM,CAAZ;AASAF,cAAAA,GAAG,CAACG,GAAJ,GAAUnB,IAAI,CAACmB,GAAf;AACAH,cAAAA,GAAG,CAACI,QAAJ,GAAezB,MAAM,CAAC0B,KAAP,CAAaC,KAA5B;AACA3B,cAAAA,MAAM,CAAC4B,KAAP,CAAaC,OAAb,CAAqBC,aAArB,CAAmCT,GAAnC;AACA,qBAAO,IAAP;AACA;AAnCF;AAqCA,OA3CF;AA4CA;AA9CF;;AAAA;AAAA","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst RequireContextDependency = require(\"./RequireContextDependency\");\n\nmodule.exports = class RequireContextDependencyParserPlugin {\n\tapply(parser) {\n\t\tparser.hooks.call\n\t\t\t.for(\"require.context\")\n\t\t\t.tap(\"RequireContextDependencyParserPlugin\", expr => {\n\t\t\t\tlet regExp = /^\\.\\/.*$/;\n\t\t\t\tlet recursive = true;\n\t\t\t\tlet mode = \"sync\";\n\t\t\t\tswitch (expr.arguments.length) {\n\t\t\t\t\tcase 4: {\n\t\t\t\t\t\tconst modeExpr = parser.evaluateExpression(expr.arguments[3]);\n\t\t\t\t\t\tif (!modeExpr.isString()) return;\n\t\t\t\t\t\tmode = modeExpr.string;\n\t\t\t\t\t}\n\t\t\t\t\t// falls through\n\t\t\t\t\tcase 3: {\n\t\t\t\t\t\tconst regExpExpr = parser.evaluateExpression(expr.arguments[2]);\n\t\t\t\t\t\tif (!regExpExpr.isRegExp()) return;\n\t\t\t\t\t\tregExp = regExpExpr.regExp;\n\t\t\t\t\t}\n\t\t\t\t\t// falls through\n\t\t\t\t\tcase 2: {\n\t\t\t\t\t\tconst recursiveExpr = parser.evaluateExpression(expr.arguments[1]);\n\t\t\t\t\t\tif (!recursiveExpr.isBoolean()) return;\n\t\t\t\t\t\trecursive = recursiveExpr.bool;\n\t\t\t\t\t}\n\t\t\t\t\t// falls through\n\t\t\t\t\tcase 1: {\n\t\t\t\t\t\tconst requestExpr = parser.evaluateExpression(expr.arguments[0]);\n\t\t\t\t\t\tif (!requestExpr.isString()) return;\n\t\t\t\t\t\tconst dep = new RequireContextDependency(\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\trequest: requestExpr.string,\n\t\t\t\t\t\t\t\trecursive,\n\t\t\t\t\t\t\t\tregExp,\n\t\t\t\t\t\t\t\tmode\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\texpr.range\n\t\t\t\t\t\t);\n\t\t\t\t\t\tdep.loc = expr.loc;\n\t\t\t\t\t\tdep.optional = parser.scope.inTry;\n\t\t\t\t\t\tparser.state.current.addDependency(dep);\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t}\n};\n"]},"metadata":{},"sourceType":"script"}