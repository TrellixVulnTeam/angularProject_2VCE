{"ast":null,"code":"/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n(function (factory) {\n  if (typeof module === \"object\" && typeof module.exports === \"object\") {\n    var v = factory(require, exports);\n    if (v !== undefined) module.exports = v;\n  } else if (typeof define === \"function\" && define.amd) {\n    define(\"@angular/compiler-cli/src/ngtsc/transform/src/alias\", [\"require\", \"exports\", \"tslib\", \"typescript\"], factory);\n  }\n})(function (require, exports) {\n  \"use strict\";\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.aliasTransformFactory = void 0;\n\n  var tslib_1 = require(\"tslib\");\n\n  var ts = require(\"typescript\");\n\n  function aliasTransformFactory(exportStatements) {\n    return function (context) {\n      return function (file) {\n        if (ts.isBundle(file) || !exportStatements.has(file.fileName)) {\n          return file;\n        }\n\n        var statements = tslib_1.__spread(file.statements);\n\n        exportStatements.get(file.fileName).forEach(function (_a, aliasName) {\n          var _b = tslib_1.__read(_a, 2),\n              moduleName = _b[0],\n              symbolName = _b[1];\n\n          var stmt = ts.createExportDeclaration(\n          /* decorators */\n          undefined,\n          /* modifiers */\n          undefined,\n          /* exportClause */\n          ts.createNamedExports([ts.createExportSpecifier(\n          /* propertyName */\n          symbolName,\n          /* name */\n          aliasName)]),\n          /* moduleSpecifier */\n          ts.createStringLiteral(moduleName));\n          statements.push(stmt);\n        });\n        return ts.updateSourceFileNode(file, statements);\n      };\n    };\n  }\n\n  exports.aliasTransformFactory = aliasTransformFactory;\n});","map":{"version":3,"sources":["../../../../../../../../../packages/compiler-cli/src/ngtsc/transform/src/alias.ts"],"names":[],"mappings":"AAAA;;;;;;AAMG;;;;;;;;;;;;;;;;;;AAEH,MAAA,EAAA,GAAA,OAAA,CAAA,YAAA,CAAA;;AAEA,WAAgB,qBAAhB,CAAsC,gBAAtC,EAAkG;AAEhG,WAAO,UAAC,OAAD,EAAkC;AACvC,aAAO,UAAC,IAAD,EAAoB;AACzB,YAAI,EAAE,CAAC,QAAH,CAAY,IAAZ,KAAqB,CAAC,gBAAgB,CAAC,GAAjB,CAAqB,IAAI,CAAC,QAA1B,CAA1B,EAA+D;AAC7D,iBAAO,IAAP;AACD;;AAED,YAAM,UAAU,GAAA,OAAA,CAAA,QAAA,CAAO,IAAI,CAAC,UAAZ,CAAhB;;AACA,QAAA,gBAAgB,CAAC,GAAjB,CAAqB,IAAI,CAAC,QAA1B,EAAqC,OAArC,CAA6C,UAAC,EAAD,EAA2B,SAA3B,EAAoC;cAAnC,EAAA,GAAA,OAAA,CAAA,MAAA,CAAA,EAAA,EAAA,CAAA,C;cAAC,UAAU,GAAA,EAAA,CAAA,CAAA,C;cAAE,UAAU,GAAA,EAAA,CAAA,CAAA,C;;AACnE,cAAM,IAAI,GAAG,EAAE,CAAC,uBAAH;AACT;AAAiB,UAAA,SADR;AAET;AAAgB,UAAA,SAFP;AAGT;AAAmB,UAAA,EAAE,CAAC,kBAAH,CAAsB,CAAC,EAAE,CAAC,qBAAH;AACtC;AAAmB,UAAA,UADmB;AAEtC;AAAW,UAAA,SAF2B,CAAD,CAAtB,CAHV;AAMT;AAAsB,UAAA,EAAE,CAAC,mBAAH,CAAuB,UAAvB,CANb,CAAb;AAOA,UAAA,UAAU,CAAC,IAAX,CAAgB,IAAhB;AACD,SATD;AAWA,eAAO,EAAE,CAAC,oBAAH,CAAwB,IAAxB,EAA8B,UAA9B,CAAP;AACD,OAlBD;AAmBD,KApBD;AAqBD;;AAvBD,EAAA,OAAA,CAAA,qBAAA,GAAA,qBAAA","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport * as ts from 'typescript';\n\nexport function aliasTransformFactory(exportStatements: Map<string, Map<string, [string, string]>>):\n    ts.TransformerFactory<ts.SourceFile> {\n  return (context: ts.TransformationContext) => {\n    return (file: ts.SourceFile) => {\n      if (ts.isBundle(file) || !exportStatements.has(file.fileName)) {\n        return file;\n      }\n\n      const statements = [...file.statements];\n      exportStatements.get(file.fileName)!.forEach(([moduleName, symbolName], aliasName) => {\n        const stmt = ts.createExportDeclaration(\n            /* decorators */ undefined,\n            /* modifiers */ undefined,\n            /* exportClause */ ts.createNamedExports([ts.createExportSpecifier(\n                /* propertyName */ symbolName,\n                /* name */ aliasName)]),\n            /* moduleSpecifier */ ts.createStringLiteral(moduleName));\n        statements.push(stmt);\n      });\n\n      return ts.updateSourceFileNode(file, statements);\n    };\n  };\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}