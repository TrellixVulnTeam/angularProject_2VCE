{"ast":null,"code":"/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n(function (factory) {\n  if (typeof module === \"object\" && typeof module.exports === \"object\") {\n    var v = factory(require, exports);\n    if (v !== undefined) module.exports = v;\n  } else if (typeof define === \"function\" && define.amd) {\n    define(\"@angular/compiler-cli/src/diagnostics/typescript_version\", [\"require\", \"exports\"], factory);\n  }\n})(function (require, exports) {\n  \"use strict\";\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.compareVersions = exports.isVersionBetween = exports.compareNumbers = exports.toNumbers = void 0;\n  /**\n   * Converts a `string` version into an array of numbers\n   * @example\n   * toNumbers('2.0.1'); // returns [2, 0, 1]\n   */\n\n  function toNumbers(value) {\n    return value.split('.').map(Number);\n  }\n\n  exports.toNumbers = toNumbers;\n  /**\n   * Compares two arrays of positive numbers with lexicographical order in mind.\n   *\n   * However - unlike lexicographical order - for arrays of different length we consider:\n   * [1, 2, 3] = [1, 2, 3, 0] instead of [1, 2, 3] < [1, 2, 3, 0]\n   *\n   * @param a The 'left hand' array in the comparison test\n   * @param b The 'right hand' in the comparison test\n   * @returns {-1|0|1} The comparison result: 1 if a is greater, -1 if b is greater, 0 is the two\n   * arrays are equals\n   */\n\n  function compareNumbers(a, b) {\n    var max = Math.max(a.length, b.length);\n    var min = Math.min(a.length, b.length);\n\n    for (var i = 0; i < min; i++) {\n      if (a[i] > b[i]) return 1;\n      if (a[i] < b[i]) return -1;\n    }\n\n    if (min !== max) {\n      var longestArray = a.length === max ? a : b; // The result to return in case the to arrays are considered different (1 if a is greater,\n      // -1 if b is greater)\n\n      var comparisonResult = a.length === max ? 1 : -1; // Check that at least one of the remaining elements is greater than 0 to consider that the two\n      // arrays are different (e.g. [1, 0] and [1] are considered the same but not [1, 0, 1] and [1])\n\n      for (var i = min; i < max; i++) {\n        if (longestArray[i] > 0) {\n          return comparisonResult;\n        }\n      }\n    }\n\n    return 0;\n  }\n\n  exports.compareNumbers = compareNumbers;\n  /**\n   * Checks if a TypeScript version is:\n   * - greater or equal than the provided `low` version,\n   * - lower or equal than an optional `high` version.\n   *\n   * @param version The TypeScript version\n   * @param low The minimum version\n   * @param high The maximum version\n   */\n\n  function isVersionBetween(version, low, high) {\n    var tsNumbers = toNumbers(version);\n\n    if (high !== undefined) {\n      return compareNumbers(toNumbers(low), tsNumbers) <= 0 && compareNumbers(toNumbers(high), tsNumbers) >= 0;\n    }\n\n    return compareNumbers(toNumbers(low), tsNumbers) <= 0;\n  }\n\n  exports.isVersionBetween = isVersionBetween;\n  /**\n   * Compares two versions\n   *\n   * @param v1 The 'left hand' version in the comparison test\n   * @param v2 The 'right hand' version in the comparison test\n   * @returns {-1|0|1} The comparison result: 1 if v1 is greater, -1 if v2 is greater, 0 is the two\n   * versions are equals\n   */\n\n  function compareVersions(v1, v2) {\n    return compareNumbers(toNumbers(v1), toNumbers(v2));\n  }\n\n  exports.compareVersions = compareVersions;\n});","map":{"version":3,"sources":["../../../../../../../packages/compiler-cli/src/diagnostics/typescript_version.ts"],"names":[],"mappings":"AAAA;;;;;;AAMG;;;;;;;;;;;;;;;AAEH;;;;AAIG;;AACH,WAAgB,SAAhB,CAA0B,KAA1B,EAAuC;AACrC,WAAO,KAAK,CAAC,KAAN,CAAY,GAAZ,EAAiB,GAAjB,CAAqB,MAArB,CAAP;AACD;;AAFD,EAAA,OAAA,CAAA,SAAA,GAAA,SAAA;AAIA;;;;;;;;;;AAUG;;AACH,WAAgB,cAAhB,CAA+B,CAA/B,EAA4C,CAA5C,EAAuD;AACrD,QAAM,GAAG,GAAG,IAAI,CAAC,GAAL,CAAS,CAAC,CAAC,MAAX,EAAmB,CAAC,CAAC,MAArB,CAAZ;AACA,QAAM,GAAG,GAAG,IAAI,CAAC,GAAL,CAAS,CAAC,CAAC,MAAX,EAAmB,CAAC,CAAC,MAArB,CAAZ;;AAEA,SAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,GAApB,EAAyB,CAAC,EAA1B,EAA8B;AAC5B,UAAI,CAAC,CAAC,CAAD,CAAD,GAAO,CAAC,CAAC,CAAD,CAAZ,EAAiB,OAAO,CAAP;AACjB,UAAI,CAAC,CAAC,CAAD,CAAD,GAAO,CAAC,CAAC,CAAD,CAAZ,EAAiB,OAAO,CAAC,CAAR;AAClB;;AAED,QAAI,GAAG,KAAK,GAAZ,EAAiB;AACf,UAAM,YAAY,GAAG,CAAC,CAAC,MAAF,KAAa,GAAb,GAAmB,CAAnB,GAAuB,CAA5C,CADe,CAGf;AACA;;AACA,UAAM,gBAAgB,GAAG,CAAC,CAAC,MAAF,KAAa,GAAb,GAAmB,CAAnB,GAAuB,CAAC,CAAjD,CALe,CAOf;AACA;;AACA,WAAK,IAAI,CAAC,GAAG,GAAb,EAAkB,CAAC,GAAG,GAAtB,EAA2B,CAAC,EAA5B,EAAgC;AAC9B,YAAI,YAAY,CAAC,CAAD,CAAZ,GAAkB,CAAtB,EAAyB;AACvB,iBAAO,gBAAP;AACD;AACF;AACF;;AAED,WAAO,CAAP;AACD;;AA1BD,EAAA,OAAA,CAAA,cAAA,GAAA,cAAA;AA4BA;;;;;;;;AAQG;;AACH,WAAgB,gBAAhB,CAAiC,OAAjC,EAAkD,GAAlD,EAA+D,IAA/D,EAA4E;AAC1E,QAAM,SAAS,GAAG,SAAS,CAAC,OAAD,CAA3B;;AACA,QAAI,IAAI,KAAK,SAAb,EAAwB;AACtB,aAAO,cAAc,CAAC,SAAS,CAAC,GAAD,CAAV,EAAiB,SAAjB,CAAd,IAA6C,CAA7C,IACH,cAAc,CAAC,SAAS,CAAC,IAAD,CAAV,EAAkB,SAAlB,CAAd,IAA8C,CADlD;AAED;;AACD,WAAO,cAAc,CAAC,SAAS,CAAC,GAAD,CAAV,EAAiB,SAAjB,CAAd,IAA6C,CAApD;AACD;;AAPD,EAAA,OAAA,CAAA,gBAAA,GAAA,gBAAA;AASA;;;;;;;AAOG;;AACH,WAAgB,eAAhB,CAAgC,EAAhC,EAA4C,EAA5C,EAAsD;AACpD,WAAO,cAAc,CAAC,SAAS,CAAC,EAAD,CAAV,EAAgB,SAAS,CAAC,EAAD,CAAzB,CAArB;AACD;;AAFD,EAAA,OAAA,CAAA,eAAA,GAAA,eAAA","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Converts a `string` version into an array of numbers\n * @example\n * toNumbers('2.0.1'); // returns [2, 0, 1]\n */\nexport function toNumbers(value: string): number[] {\n  return value.split('.').map(Number);\n}\n\n/**\n * Compares two arrays of positive numbers with lexicographical order in mind.\n *\n * However - unlike lexicographical order - for arrays of different length we consider:\n * [1, 2, 3] = [1, 2, 3, 0] instead of [1, 2, 3] < [1, 2, 3, 0]\n *\n * @param a The 'left hand' array in the comparison test\n * @param b The 'right hand' in the comparison test\n * @returns {-1|0|1} The comparison result: 1 if a is greater, -1 if b is greater, 0 is the two\n * arrays are equals\n */\nexport function compareNumbers(a: number[], b: number[]): -1|0|1 {\n  const max = Math.max(a.length, b.length);\n  const min = Math.min(a.length, b.length);\n\n  for (let i = 0; i < min; i++) {\n    if (a[i] > b[i]) return 1;\n    if (a[i] < b[i]) return -1;\n  }\n\n  if (min !== max) {\n    const longestArray = a.length === max ? a : b;\n\n    // The result to return in case the to arrays are considered different (1 if a is greater,\n    // -1 if b is greater)\n    const comparisonResult = a.length === max ? 1 : -1;\n\n    // Check that at least one of the remaining elements is greater than 0 to consider that the two\n    // arrays are different (e.g. [1, 0] and [1] are considered the same but not [1, 0, 1] and [1])\n    for (let i = min; i < max; i++) {\n      if (longestArray[i] > 0) {\n        return comparisonResult;\n      }\n    }\n  }\n\n  return 0;\n}\n\n/**\n * Checks if a TypeScript version is:\n * - greater or equal than the provided `low` version,\n * - lower or equal than an optional `high` version.\n *\n * @param version The TypeScript version\n * @param low The minimum version\n * @param high The maximum version\n */\nexport function isVersionBetween(version: string, low: string, high?: string): boolean {\n  const tsNumbers = toNumbers(version);\n  if (high !== undefined) {\n    return compareNumbers(toNumbers(low), tsNumbers) <= 0 &&\n        compareNumbers(toNumbers(high), tsNumbers) >= 0;\n  }\n  return compareNumbers(toNumbers(low), tsNumbers) <= 0;\n}\n\n/**\n * Compares two versions\n *\n * @param v1 The 'left hand' version in the comparison test\n * @param v2 The 'right hand' version in the comparison test\n * @returns {-1|0|1} The comparison result: 1 if v1 is greater, -1 if v2 is greater, 0 is the two\n * versions are equals\n */\nexport function compareVersions(v1: string, v2: string): -1|0|1 {\n  return compareNumbers(toNumbers(v1), toNumbers(v2));\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}