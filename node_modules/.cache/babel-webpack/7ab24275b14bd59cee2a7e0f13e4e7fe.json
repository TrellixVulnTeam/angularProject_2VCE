{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n/** @typedef {import(\"./Module\")} Module */\n\n/** @typedef {import(\"./Dependency\")} Dependency */\n\nvar _classCallCheck = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/createClass\");\n\nvar ModuleReason = /*#__PURE__*/function () {\n  /**\n   * @param {Module} module the referencing module\n   * @param {Dependency} dependency the referencing dependency\n   * @param {string=} explanation some extra detail\n   */\n  function ModuleReason(module, dependency, explanation) {\n    _classCallCheck(this, ModuleReason);\n\n    this.module = module;\n    this.dependency = dependency;\n    this.explanation = explanation;\n    this._chunks = null;\n  }\n\n  _createClass(ModuleReason, [{\n    key: \"hasChunk\",\n    value: function hasChunk(chunk) {\n      if (this._chunks) {\n        if (this._chunks.has(chunk)) return true;\n      } else if (this.module && this.module._chunks.has(chunk)) return true;\n\n      return false;\n    }\n  }, {\n    key: \"rewriteChunks\",\n    value: function rewriteChunks(oldChunk, newChunks) {\n      if (!this._chunks) {\n        if (this.module) {\n          if (!this.module._chunks.has(oldChunk)) return;\n          this._chunks = new Set(this.module._chunks);\n        } else {\n          this._chunks = new Set();\n        }\n      }\n\n      if (this._chunks.has(oldChunk)) {\n        this._chunks.delete(oldChunk);\n\n        for (var i = 0; i < newChunks.length; i++) {\n          this._chunks.add(newChunks[i]);\n        }\n      }\n    }\n  }]);\n\n  return ModuleReason;\n}();\n\nmodule.exports = ModuleReason;","map":{"version":3,"sources":["/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/webpack/lib/ModuleReason.js"],"names":["ModuleReason","module","dependency","explanation","_chunks","chunk","has","oldChunk","newChunks","Set","delete","i","length","add","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AAEA;;AACA;;;;;;IAEMA,Y;AACL;AACD;AACA;AACA;AACA;AACC,wBAAYC,MAAZ,EAAoBC,UAApB,EAAgCC,WAAhC,EAA6C;AAAA;;AAC5C,SAAKF,MAAL,GAAcA,MAAd;AACA,SAAKC,UAAL,GAAkBA,UAAlB;AACA,SAAKC,WAAL,GAAmBA,WAAnB;AACA,SAAKC,OAAL,GAAe,IAAf;AACA;;;;WAED,kBAASC,KAAT,EAAgB;AACf,UAAI,KAAKD,OAAT,EAAkB;AACjB,YAAI,KAAKA,OAAL,CAAaE,GAAb,CAAiBD,KAAjB,CAAJ,EAA6B,OAAO,IAAP;AAC7B,OAFD,MAEO,IAAI,KAAKJ,MAAL,IAAe,KAAKA,MAAL,CAAYG,OAAZ,CAAoBE,GAApB,CAAwBD,KAAxB,CAAnB,EAAmD,OAAO,IAAP;;AAC1D,aAAO,KAAP;AACA;;;WAED,uBAAcE,QAAd,EAAwBC,SAAxB,EAAmC;AAClC,UAAI,CAAC,KAAKJ,OAAV,EAAmB;AAClB,YAAI,KAAKH,MAAT,EAAiB;AAChB,cAAI,CAAC,KAAKA,MAAL,CAAYG,OAAZ,CAAoBE,GAApB,CAAwBC,QAAxB,CAAL,EAAwC;AACxC,eAAKH,OAAL,GAAe,IAAIK,GAAJ,CAAQ,KAAKR,MAAL,CAAYG,OAApB,CAAf;AACA,SAHD,MAGO;AACN,eAAKA,OAAL,GAAe,IAAIK,GAAJ,EAAf;AACA;AACD;;AACD,UAAI,KAAKL,OAAL,CAAaE,GAAb,CAAiBC,QAAjB,CAAJ,EAAgC;AAC/B,aAAKH,OAAL,CAAaM,MAAb,CAAoBH,QAApB;;AACA,aAAK,IAAII,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,SAAS,CAACI,MAA9B,EAAsCD,CAAC,EAAvC,EAA2C;AAC1C,eAAKP,OAAL,CAAaS,GAAb,CAAiBL,SAAS,CAACG,CAAD,CAA1B;AACA;AACD;AACD;;;;;;AAGFV,MAAM,CAACa,OAAP,GAAiBd,YAAjB","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\n/** @typedef {import(\"./Module\")} Module */\n/** @typedef {import(\"./Dependency\")} Dependency */\n\nclass ModuleReason {\n\t/**\n\t * @param {Module} module the referencing module\n\t * @param {Dependency} dependency the referencing dependency\n\t * @param {string=} explanation some extra detail\n\t */\n\tconstructor(module, dependency, explanation) {\n\t\tthis.module = module;\n\t\tthis.dependency = dependency;\n\t\tthis.explanation = explanation;\n\t\tthis._chunks = null;\n\t}\n\n\thasChunk(chunk) {\n\t\tif (this._chunks) {\n\t\t\tif (this._chunks.has(chunk)) return true;\n\t\t} else if (this.module && this.module._chunks.has(chunk)) return true;\n\t\treturn false;\n\t}\n\n\trewriteChunks(oldChunk, newChunks) {\n\t\tif (!this._chunks) {\n\t\t\tif (this.module) {\n\t\t\t\tif (!this.module._chunks.has(oldChunk)) return;\n\t\t\t\tthis._chunks = new Set(this.module._chunks);\n\t\t\t} else {\n\t\t\t\tthis._chunks = new Set();\n\t\t\t}\n\t\t}\n\t\tif (this._chunks.has(oldChunk)) {\n\t\t\tthis._chunks.delete(oldChunk);\n\t\t\tfor (let i = 0; i < newChunks.length; i++) {\n\t\t\t\tthis._chunks.add(newChunks[i]);\n\t\t\t}\n\t\t}\n\t}\n}\n\nmodule.exports = ModuleReason;\n"]},"metadata":{},"sourceType":"script"}