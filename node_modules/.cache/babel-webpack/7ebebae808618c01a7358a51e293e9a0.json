{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nvar _classCallCheck = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar Hook = require(\"./Hook\");\n\nvar HookCodeFactory = require(\"./HookCodeFactory\");\n\nvar SyncLoopHookCodeFactory = /*#__PURE__*/function (_HookCodeFactory) {\n  _inherits(SyncLoopHookCodeFactory, _HookCodeFactory);\n\n  var _super = _createSuper(SyncLoopHookCodeFactory);\n\n  function SyncLoopHookCodeFactory() {\n    _classCallCheck(this, SyncLoopHookCodeFactory);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(SyncLoopHookCodeFactory, [{\n    key: \"content\",\n    value: function content(_ref) {\n      var _onError = _ref.onError,\n          onDone = _ref.onDone,\n          rethrowIfPossible = _ref.rethrowIfPossible;\n      return this.callTapsLooping({\n        onError: function onError(i, err) {\n          return _onError(err);\n        },\n        onDone: onDone,\n        rethrowIfPossible: rethrowIfPossible\n      });\n    }\n  }]);\n\n  return SyncLoopHookCodeFactory;\n}(HookCodeFactory);\n\nvar factory = new SyncLoopHookCodeFactory();\n\nvar SyncLoopHook = /*#__PURE__*/function (_Hook) {\n  _inherits(SyncLoopHook, _Hook);\n\n  var _super2 = _createSuper(SyncLoopHook);\n\n  function SyncLoopHook() {\n    _classCallCheck(this, SyncLoopHook);\n\n    return _super2.apply(this, arguments);\n  }\n\n  _createClass(SyncLoopHook, [{\n    key: \"tapAsync\",\n    value: function tapAsync() {\n      throw new Error(\"tapAsync is not supported on a SyncLoopHook\");\n    }\n  }, {\n    key: \"tapPromise\",\n    value: function tapPromise() {\n      throw new Error(\"tapPromise is not supported on a SyncLoopHook\");\n    }\n  }, {\n    key: \"compile\",\n    value: function compile(options) {\n      factory.setup(this, options);\n      return factory.create(options);\n    }\n  }]);\n\n  return SyncLoopHook;\n}(Hook);\n\nmodule.exports = SyncLoopHook;","map":{"version":3,"sources":["/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/tapable/lib/SyncLoopHook.js"],"names":["Hook","require","HookCodeFactory","SyncLoopHookCodeFactory","onError","onDone","rethrowIfPossible","callTapsLooping","i","err","factory","SyncLoopHook","Error","options","setup","create","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;;;;;;;;;AAEA,IAAMA,IAAI,GAAGC,OAAO,CAAC,QAAD,CAApB;;AACA,IAAMC,eAAe,GAAGD,OAAO,CAAC,mBAAD,CAA/B;;IAEME,uB;;;;;;;;;;;;;WACL,uBAAgD;AAAA,UAAtCC,QAAsC,QAAtCA,OAAsC;AAAA,UAA7BC,MAA6B,QAA7BA,MAA6B;AAAA,UAArBC,iBAAqB,QAArBA,iBAAqB;AAC/C,aAAO,KAAKC,eAAL,CAAqB;AAC3BH,QAAAA,OAAO,EAAE,iBAACI,CAAD,EAAIC,GAAJ;AAAA,iBAAYL,QAAO,CAACK,GAAD,CAAnB;AAAA,SADkB;AAE3BJ,QAAAA,MAAM,EAANA,MAF2B;AAG3BC,QAAAA,iBAAiB,EAAjBA;AAH2B,OAArB,CAAP;AAKA;;;;EAPoCJ,e;;AAUtC,IAAMQ,OAAO,GAAG,IAAIP,uBAAJ,EAAhB;;IAEMQ,Y;;;;;;;;;;;;;WACL,oBAAW;AACV,YAAM,IAAIC,KAAJ,CAAU,6CAAV,CAAN;AACA;;;WAED,sBAAa;AACZ,YAAM,IAAIA,KAAJ,CAAU,+CAAV,CAAN;AACA;;;WAED,iBAAQC,OAAR,EAAiB;AAChBH,MAAAA,OAAO,CAACI,KAAR,CAAc,IAAd,EAAoBD,OAApB;AACA,aAAOH,OAAO,CAACK,MAAR,CAAeF,OAAf,CAAP;AACA;;;;EAZyBb,I;;AAe3BgB,MAAM,CAACC,OAAP,GAAiBN,YAAjB","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst Hook = require(\"./Hook\");\nconst HookCodeFactory = require(\"./HookCodeFactory\");\n\nclass SyncLoopHookCodeFactory extends HookCodeFactory {\n\tcontent({ onError, onDone, rethrowIfPossible }) {\n\t\treturn this.callTapsLooping({\n\t\t\tonError: (i, err) => onError(err),\n\t\t\tonDone,\n\t\t\trethrowIfPossible\n\t\t});\n\t}\n}\n\nconst factory = new SyncLoopHookCodeFactory();\n\nclass SyncLoopHook extends Hook {\n\ttapAsync() {\n\t\tthrow new Error(\"tapAsync is not supported on a SyncLoopHook\");\n\t}\n\n\ttapPromise() {\n\t\tthrow new Error(\"tapPromise is not supported on a SyncLoopHook\");\n\t}\n\n\tcompile(options) {\n\t\tfactory.setup(this, options);\n\t\treturn factory.create(options);\n\t}\n}\n\nmodule.exports = SyncLoopHook;\n"]},"metadata":{},"sourceType":"script"}