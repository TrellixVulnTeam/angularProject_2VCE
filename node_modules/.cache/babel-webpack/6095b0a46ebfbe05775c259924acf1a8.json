{"ast":null,"code":"\"use strict\";\n\nvar _taggedTemplateLiteral = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/taggedTemplateLiteral\");\n\nvar _createForOfIteratorHelper = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _regeneratorRuntime = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _templateObject;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.augmentAppWithServiceWorker = void 0;\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nvar core_1 = require(\"@angular-devkit/core\");\n\nvar crypto = require(\"crypto\");\n\nvar CliFilesystem = /*#__PURE__*/function () {\n  function CliFilesystem(_host, base) {\n    _classCallCheck(this, CliFilesystem);\n\n    this._host = _host;\n    this.base = base;\n  }\n\n  _createClass(CliFilesystem, [{\n    key: \"list\",\n    value: function list(path) {\n      return this._recursiveList(this._resolve(path), []).catch(function () {\n        return [];\n      });\n    }\n  }, {\n    key: \"read\",\n    value: function () {\n      var _read = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(path) {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.t0 = core_1.virtualFs;\n                _context.next = 3;\n                return this._readIntoBuffer(path);\n\n              case 3:\n                _context.t1 = _context.sent;\n                return _context.abrupt(\"return\", _context.t0.fileBufferToString.call(_context.t0, _context.t1));\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function read(_x) {\n        return _read.apply(this, arguments);\n      }\n\n      return read;\n    }()\n  }, {\n    key: \"hash\",\n    value: function () {\n      var _hash = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(path) {\n        var sha1;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                sha1 = crypto.createHash('sha1');\n                _context2.t0 = sha1;\n                _context2.t1 = Buffer;\n                _context2.next = 5;\n                return this._readIntoBuffer(path);\n\n              case 5:\n                _context2.t2 = _context2.sent;\n                _context2.t3 = _context2.t1.from.call(_context2.t1, _context2.t2);\n\n                _context2.t0.update.call(_context2.t0, _context2.t3);\n\n                return _context2.abrupt(\"return\", sha1.digest('hex'));\n\n              case 9:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function hash(_x2) {\n        return _hash.apply(this, arguments);\n      }\n\n      return hash;\n    }()\n  }, {\n    key: \"write\",\n    value: function write(path, content) {\n      return this._host.write(this._resolve(path), core_1.virtualFs.stringToFileBuffer(content)).toPromise();\n    }\n  }, {\n    key: \"_readIntoBuffer\",\n    value: function _readIntoBuffer(path) {\n      return this._host.read(this._resolve(path)).toPromise();\n    }\n  }, {\n    key: \"_resolve\",\n    value: function _resolve(path) {\n      return core_1.join(core_1.normalize(this.base), core_1.normalize(path));\n    }\n  }, {\n    key: \"_recursiveList\",\n    value: function () {\n      var _recursiveList2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(path, items) {\n        var fragments, _iterator, _step, fragment, item;\n\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return this._host.list(path).toPromise();\n\n              case 2:\n                fragments = _context3.sent;\n                _iterator = _createForOfIteratorHelper(fragments);\n                _context3.prev = 4;\n\n                _iterator.s();\n\n              case 6:\n                if ((_step = _iterator.n()).done) {\n                  _context3.next = 19;\n                  break;\n                }\n\n                fragment = _step.value;\n                item = core_1.join(path, fragment);\n                _context3.next = 11;\n                return this._host.isDirectory(item).toPromise();\n\n              case 11:\n                if (!_context3.sent) {\n                  _context3.next = 16;\n                  break;\n                }\n\n                _context3.next = 14;\n                return this._recursiveList(item, items);\n\n              case 14:\n                _context3.next = 17;\n                break;\n\n              case 16:\n                items.push('/' + core_1.relative(core_1.normalize(this.base), item));\n\n              case 17:\n                _context3.next = 6;\n                break;\n\n              case 19:\n                _context3.next = 24;\n                break;\n\n              case 21:\n                _context3.prev = 21;\n                _context3.t0 = _context3[\"catch\"](4);\n\n                _iterator.e(_context3.t0);\n\n              case 24:\n                _context3.prev = 24;\n\n                _iterator.f();\n\n                return _context3.finish(24);\n\n              case 27:\n                return _context3.abrupt(\"return\", items);\n\n              case 28:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this, [[4, 21, 24, 27]]);\n      }));\n\n      function _recursiveList(_x3, _x4) {\n        return _recursiveList2.apply(this, arguments);\n      }\n\n      return _recursiveList;\n    }()\n  }]);\n\n  return CliFilesystem;\n}();\n\nfunction augmentAppWithServiceWorker(_x5, _x6, _x7, _x8, _x9, _x10) {\n  return _augmentAppWithServiceWorker.apply(this, arguments);\n}\n\nfunction _augmentAppWithServiceWorker() {\n  _augmentAppWithServiceWorker = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(host, projectRoot, appRoot, outputPath, baseHref, ngswConfigPath) {\n    var distPath, systemProjectRoot, workerPath, swConfigPath, configPath, configExists, config, GeneratorConstructor, generator, output, manifest, workerCode, safetyPath, safetyCode;\n    return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            distPath = core_1.normalize(outputPath);\n            systemProjectRoot = core_1.getSystemPath(projectRoot); // Find the service worker package\n\n            workerPath = core_1.normalize(require.resolve('@angular/service-worker/ngsw-worker.js', {\n              paths: [systemProjectRoot]\n            }));\n            swConfigPath = require.resolve('@angular/service-worker/config', {\n              paths: [systemProjectRoot]\n            }); // Determine the configuration file path\n\n            if (ngswConfigPath) {\n              configPath = core_1.normalize(ngswConfigPath);\n            } else {\n              configPath = core_1.join(appRoot, 'ngsw-config.json');\n            } // Ensure the configuration file exists\n\n\n            _context4.next = 7;\n            return host.exists(configPath).toPromise();\n\n          case 7:\n            configExists = _context4.sent;\n\n            if (configExists) {\n              _context4.next = 10;\n              break;\n            }\n\n            throw new Error(core_1.tags.oneLine(_templateObject || (_templateObject = _taggedTemplateLiteral([\"\\n      Error: Expected to find an ngsw-config.json configuration\\n      file in the \", \" folder. Either provide one or disable Service Worker\\n      in your angular.json configuration file.\\n    \"])), core_1.getSystemPath(appRoot)));\n\n          case 10:\n            _context4.t0 = JSON;\n            _context4.t1 = core_1.virtualFs;\n            _context4.next = 14;\n            return host.read(configPath).toPromise();\n\n          case 14:\n            _context4.t2 = _context4.sent;\n            _context4.t3 = _context4.t1.fileBufferToString.call(_context4.t1, _context4.t2);\n            config = _context4.t0.parse.call(_context4.t0, _context4.t3);\n            // Generate the manifest\n            GeneratorConstructor = require(swConfigPath).Generator;\n            generator = new GeneratorConstructor(new CliFilesystem(host, outputPath), baseHref);\n            _context4.next = 21;\n            return generator.process(config);\n\n          case 21:\n            output = _context4.sent;\n            // Write the manifest\n            manifest = JSON.stringify(output, null, 2);\n            _context4.next = 25;\n            return host.write(core_1.join(distPath, 'ngsw.json'), core_1.virtualFs.stringToFileBuffer(manifest)).toPromise();\n\n          case 25:\n            _context4.next = 27;\n            return host.read(workerPath).toPromise();\n\n          case 27:\n            workerCode = _context4.sent;\n            _context4.next = 30;\n            return host.write(core_1.join(distPath, 'ngsw-worker.js'), workerCode).toPromise();\n\n          case 30:\n            // If present, write the safety worker code\n            safetyPath = core_1.join(core_1.dirname(workerPath), 'safety-worker.js');\n            _context4.next = 33;\n            return host.exists(safetyPath).toPromise();\n\n          case 33:\n            if (!_context4.sent) {\n              _context4.next = 41;\n              break;\n            }\n\n            _context4.next = 36;\n            return host.read(safetyPath).toPromise();\n\n          case 36:\n            safetyCode = _context4.sent;\n            _context4.next = 39;\n            return host.write(core_1.join(distPath, 'worker-basic.min.js'), safetyCode).toPromise();\n\n          case 39:\n            _context4.next = 41;\n            return host.write(core_1.join(distPath, 'safety-worker.js'), safetyCode).toPromise();\n\n          case 41:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4);\n  }));\n  return _augmentAppWithServiceWorker.apply(this, arguments);\n}\n\nexports.augmentAppWithServiceWorker = augmentAppWithServiceWorker;","map":{"version":3,"sources":["/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@angular-devkit/build-angular/src/utils/service-worker.js"],"names":["Object","defineProperty","exports","value","augmentAppWithServiceWorker","core_1","require","crypto","CliFilesystem","_host","base","path","_recursiveList","_resolve","catch","virtualFs","_readIntoBuffer","fileBufferToString","sha1","createHash","Buffer","from","update","digest","content","write","stringToFileBuffer","toPromise","read","join","normalize","items","list","fragments","fragment","item","isDirectory","push","relative","host","projectRoot","appRoot","outputPath","baseHref","ngswConfigPath","distPath","systemProjectRoot","getSystemPath","workerPath","resolve","paths","swConfigPath","configPath","exists","configExists","Error","tags","oneLine","JSON","config","parse","GeneratorConstructor","Generator","generator","process","output","manifest","stringify","workerCode","safetyPath","dirname","safetyCode"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.augmentAppWithServiceWorker = void 0;\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst core_1 = require(\"@angular-devkit/core\");\nconst crypto = require(\"crypto\");\nclass CliFilesystem {\n    constructor(_host, base) {\n        this._host = _host;\n        this.base = base;\n    }\n    list(path) {\n        return this._recursiveList(this._resolve(path), []).catch(() => []);\n    }\n    async read(path) {\n        return core_1.virtualFs.fileBufferToString(await this._readIntoBuffer(path));\n    }\n    async hash(path) {\n        const sha1 = crypto.createHash('sha1');\n        sha1.update(Buffer.from(await this._readIntoBuffer(path)));\n        return sha1.digest('hex');\n    }\n    write(path, content) {\n        return this._host.write(this._resolve(path), core_1.virtualFs.stringToFileBuffer(content))\n            .toPromise();\n    }\n    _readIntoBuffer(path) {\n        return this._host.read(this._resolve(path)).toPromise();\n    }\n    _resolve(path) {\n        return core_1.join(core_1.normalize(this.base), core_1.normalize(path));\n    }\n    async _recursiveList(path, items) {\n        const fragments = await this._host.list(path).toPromise();\n        for (const fragment of fragments) {\n            const item = core_1.join(path, fragment);\n            if (await this._host.isDirectory(item).toPromise()) {\n                await this._recursiveList(item, items);\n            }\n            else {\n                items.push('/' + core_1.relative(core_1.normalize(this.base), item));\n            }\n        }\n        return items;\n    }\n}\nasync function augmentAppWithServiceWorker(host, projectRoot, appRoot, outputPath, baseHref, ngswConfigPath) {\n    const distPath = core_1.normalize(outputPath);\n    const systemProjectRoot = core_1.getSystemPath(projectRoot);\n    // Find the service worker package\n    const workerPath = core_1.normalize(require.resolve('@angular/service-worker/ngsw-worker.js', { paths: [systemProjectRoot] }));\n    const swConfigPath = require.resolve('@angular/service-worker/config', { paths: [systemProjectRoot] });\n    // Determine the configuration file path\n    let configPath;\n    if (ngswConfigPath) {\n        configPath = core_1.normalize(ngswConfigPath);\n    }\n    else {\n        configPath = core_1.join(appRoot, 'ngsw-config.json');\n    }\n    // Ensure the configuration file exists\n    const configExists = await host.exists(configPath).toPromise();\n    if (!configExists) {\n        throw new Error(core_1.tags.oneLine `\n      Error: Expected to find an ngsw-config.json configuration\n      file in the ${core_1.getSystemPath(appRoot)} folder. Either provide one or disable Service Worker\n      in your angular.json configuration file.\n    `);\n    }\n    // Read the configuration file\n    const config = JSON.parse(core_1.virtualFs.fileBufferToString(await host.read(configPath).toPromise()));\n    // Generate the manifest\n    const GeneratorConstructor = require(swConfigPath).Generator;\n    const generator = new GeneratorConstructor(new CliFilesystem(host, outputPath), baseHref);\n    const output = await generator.process(config);\n    // Write the manifest\n    const manifest = JSON.stringify(output, null, 2);\n    await host.write(core_1.join(distPath, 'ngsw.json'), core_1.virtualFs.stringToFileBuffer(manifest)).toPromise();\n    // Write the worker code\n    // NOTE: This is inefficient (kernel -> userspace -> kernel).\n    //       `fs.copyFile` would be a better option but breaks the host abstraction\n    const workerCode = await host.read(workerPath).toPromise();\n    await host.write(core_1.join(distPath, 'ngsw-worker.js'), workerCode).toPromise();\n    // If present, write the safety worker code\n    const safetyPath = core_1.join(core_1.dirname(workerPath), 'safety-worker.js');\n    if (await host.exists(safetyPath).toPromise()) {\n        const safetyCode = await host.read(safetyPath).toPromise();\n        await host.write(core_1.join(distPath, 'worker-basic.min.js'), safetyCode).toPromise();\n        await host.write(core_1.join(distPath, 'safety-worker.js'), safetyCode).toPromise();\n    }\n}\nexports.augmentAppWithServiceWorker = augmentAppWithServiceWorker;\n"]},"metadata":{},"sourceType":"script"}