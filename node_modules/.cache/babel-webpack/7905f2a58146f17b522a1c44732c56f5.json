{"ast":null,"code":"\"use strict\";\n\nvar _toConsumableArray = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/toConsumableArray\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.trimNewlines = exports.stripIndents = exports.stripIndent = exports.indentBy = exports.oneLine = void 0; // tslint:disable-next-line:no-any\n\nfunction oneLine(strings) {\n  for (var _len = arguments.length, values = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    values[_key - 1] = arguments[_key];\n  }\n\n  var endResult = String.raw.apply(String, [strings].concat(values));\n  return endResult.replace(/(?:\\r?\\n(?:\\s*))+/gm, ' ').trim();\n}\n\nexports.oneLine = oneLine;\n\nfunction indentBy(indentations) {\n  var i = '';\n\n  while (indentations--) {\n    i += ' ';\n  }\n\n  return function (strings) {\n    for (var _len2 = arguments.length, values = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n      values[_key2 - 1] = arguments[_key2];\n    }\n\n    return i + stripIndent.apply(void 0, [strings].concat(values)).replace(/\\n/g, '\\n' + i);\n  };\n}\n\nexports.indentBy = indentBy; // tslint:disable-next-line:no-any\n\nfunction stripIndent(strings) {\n  for (var _len3 = arguments.length, values = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {\n    values[_key3 - 1] = arguments[_key3];\n  }\n\n  var endResult = String.raw.apply(String, [strings].concat(values)); // remove the shortest leading indentation from each line\n\n  var match = endResult.match(/^[ \\t]*(?=\\S)/gm); // return early if there's nothing to strip\n\n  if (match === null) {\n    return endResult;\n  }\n\n  var indent = Math.min.apply(Math, _toConsumableArray(match.map(function (el) {\n    return el.length;\n  })));\n  var regexp = new RegExp('^[ \\\\t]{' + indent + '}', 'gm');\n  return (indent > 0 ? endResult.replace(regexp, '') : endResult).trim();\n}\n\nexports.stripIndent = stripIndent; // tslint:disable-next-line:no-any\n\nfunction stripIndents(strings) {\n  for (var _len4 = arguments.length, values = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {\n    values[_key4 - 1] = arguments[_key4];\n  }\n\n  return String.raw.apply(String, [strings].concat(values)).split('\\n').map(function (line) {\n    return line.trim();\n  }).join('\\n').trim();\n}\n\nexports.stripIndents = stripIndents; // tslint:disable-next-line:no-any\n\nfunction trimNewlines(strings) {\n  for (var _len5 = arguments.length, values = new Array(_len5 > 1 ? _len5 - 1 : 0), _key5 = 1; _key5 < _len5; _key5++) {\n    values[_key5 - 1] = arguments[_key5];\n  }\n\n  var endResult = String.raw.apply(String, [strings].concat(values));\n  return endResult // Remove the newline at the start.\n  .replace(/^(?:\\r?\\n)+/, '') // Remove the newline at the end and following whitespace.\n  .replace(/(?:\\r?\\n(?:\\s*))$/, '');\n}\n\nexports.trimNewlines = trimNewlines;","map":{"version":3,"sources":["/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@angular-devkit/build-angular/node_modules/@angular-devkit/core/src/utils/literals.js"],"names":["Object","defineProperty","exports","value","trimNewlines","stripIndents","stripIndent","indentBy","oneLine","strings","values","endResult","String","raw","replace","trim","indentations","i","match","indent","Math","min","map","el","length","regexp","RegExp","split","line","join"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.trimNewlines = exports.stripIndents = exports.stripIndent = exports.indentBy = exports.oneLine = void 0;\n// tslint:disable-next-line:no-any\nfunction oneLine(strings, ...values) {\n    const endResult = String.raw(strings, ...values);\n    return endResult.replace(/(?:\\r?\\n(?:\\s*))+/gm, ' ').trim();\n}\nexports.oneLine = oneLine;\nfunction indentBy(indentations) {\n    let i = '';\n    while (indentations--) {\n        i += ' ';\n    }\n    return (strings, ...values) => {\n        return i + stripIndent(strings, ...values).replace(/\\n/g, '\\n' + i);\n    };\n}\nexports.indentBy = indentBy;\n// tslint:disable-next-line:no-any\nfunction stripIndent(strings, ...values) {\n    const endResult = String.raw(strings, ...values);\n    // remove the shortest leading indentation from each line\n    const match = endResult.match(/^[ \\t]*(?=\\S)/gm);\n    // return early if there's nothing to strip\n    if (match === null) {\n        return endResult;\n    }\n    const indent = Math.min(...match.map(el => el.length));\n    const regexp = new RegExp('^[ \\\\t]{' + indent + '}', 'gm');\n    return (indent > 0 ? endResult.replace(regexp, '') : endResult).trim();\n}\nexports.stripIndent = stripIndent;\n// tslint:disable-next-line:no-any\nfunction stripIndents(strings, ...values) {\n    return String.raw(strings, ...values)\n        .split('\\n')\n        .map(line => line.trim())\n        .join('\\n')\n        .trim();\n}\nexports.stripIndents = stripIndents;\n// tslint:disable-next-line:no-any\nfunction trimNewlines(strings, ...values) {\n    const endResult = String.raw(strings, ...values);\n    return endResult\n        // Remove the newline at the start.\n        .replace(/^(?:\\r?\\n)+/, '')\n        // Remove the newline at the end and following whitespace.\n        .replace(/(?:\\r?\\n(?:\\s*))$/, '');\n}\nexports.trimNewlines = trimNewlines;\n"]},"metadata":{},"sourceType":"script"}