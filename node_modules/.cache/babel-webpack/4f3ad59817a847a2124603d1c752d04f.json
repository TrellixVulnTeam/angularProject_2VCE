{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar webpack_sources_1 = require(\"webpack-sources\");\n\nvar WebpackAssetManager =\n/** @class */\nfunction () {\n  function WebpackAssetManager(outputFilename, licensesRenderer) {\n    this.outputFilename = outputFilename;\n    this.licensesRenderer = licensesRenderer;\n  }\n\n  WebpackAssetManager.prototype.writeChunkLicenses = function (modules, compilation, chunk) {\n    var text = this.licensesRenderer.renderLicenses(modules);\n\n    if (text && text.trim()) {\n      var filename = compilation.getPath(this.outputFilename, {\n        chunk: chunk\n      });\n      compilation.assets[filename] = new webpack_sources_1.RawSource(text);\n    }\n  };\n\n  WebpackAssetManager.prototype.writeChunkBanners = function (modules, compilation, chunk) {\n    var filename = compilation.getPath(this.outputFilename, {\n      chunk: chunk\n    });\n    var text = this.licensesRenderer.renderBanner(filename, modules);\n\n    if (text && text.trim()) {\n      chunk.files.filter(function (file) {\n        return /\\.js$/.test(file);\n      }).forEach(function (file) {\n        compilation.assets[file] = new webpack_sources_1.ConcatSource(text, compilation.assets[file]);\n      });\n    }\n  };\n\n  WebpackAssetManager.prototype.writeAllLicenses = function (modules, compilation) {\n    var text = this.licensesRenderer.renderLicenses(modules);\n\n    if (text) {\n      var filename = compilation.getPath(this.outputFilename, compilation);\n      compilation.assets[filename] = new webpack_sources_1.RawSource(text);\n    }\n  };\n\n  return WebpackAssetManager;\n}();\n\nexports.WebpackAssetManager = WebpackAssetManager;","map":{"version":3,"sources":["/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/license-webpack-plugin/dist/WebpackAssetManager.js"],"names":["Object","defineProperty","exports","value","webpack_sources_1","require","WebpackAssetManager","outputFilename","licensesRenderer","prototype","writeChunkLicenses","modules","compilation","chunk","text","renderLicenses","trim","filename","getPath","assets","RawSource","writeChunkBanners","renderBanner","files","filter","file","test","forEach","ConcatSource","writeAllLicenses"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AACA,IAAIC,iBAAiB,GAAGC,OAAO,CAAC,iBAAD,CAA/B;;AACA,IAAIC,mBAAmB;AAAG;AAAe,YAAY;AACjD,WAASA,mBAAT,CAA6BC,cAA7B,EAA6CC,gBAA7C,EAA+D;AAC3D,SAAKD,cAAL,GAAsBA,cAAtB;AACA,SAAKC,gBAAL,GAAwBA,gBAAxB;AACH;;AACDF,EAAAA,mBAAmB,CAACG,SAApB,CAA8BC,kBAA9B,GAAmD,UAAUC,OAAV,EAAmBC,WAAnB,EAAgCC,KAAhC,EAAuC;AACtF,QAAIC,IAAI,GAAG,KAAKN,gBAAL,CAAsBO,cAAtB,CAAqCJ,OAArC,CAAX;;AACA,QAAIG,IAAI,IAAIA,IAAI,CAACE,IAAL,EAAZ,EAAyB;AACrB,UAAIC,QAAQ,GAAGL,WAAW,CAACM,OAAZ,CAAoB,KAAKX,cAAzB,EAAyC;AAAEM,QAAAA,KAAK,EAAEA;AAAT,OAAzC,CAAf;AACAD,MAAAA,WAAW,CAACO,MAAZ,CAAmBF,QAAnB,IAA+B,IAAIb,iBAAiB,CAACgB,SAAtB,CAAgCN,IAAhC,CAA/B;AACH;AACJ,GAND;;AAOAR,EAAAA,mBAAmB,CAACG,SAApB,CAA8BY,iBAA9B,GAAkD,UAAUV,OAAV,EAAmBC,WAAnB,EAAgCC,KAAhC,EAAuC;AACrF,QAAII,QAAQ,GAAGL,WAAW,CAACM,OAAZ,CAAoB,KAAKX,cAAzB,EAAyC;AAAEM,MAAAA,KAAK,EAAEA;AAAT,KAAzC,CAAf;AACA,QAAIC,IAAI,GAAG,KAAKN,gBAAL,CAAsBc,YAAtB,CAAmCL,QAAnC,EAA6CN,OAA7C,CAAX;;AACA,QAAIG,IAAI,IAAIA,IAAI,CAACE,IAAL,EAAZ,EAAyB;AACrBH,MAAAA,KAAK,CAACU,KAAN,CACKC,MADL,CACY,UAAUC,IAAV,EAAgB;AAAE,eAAO,QAAQC,IAAR,CAAaD,IAAb,CAAP;AAA4B,OAD1D,EAEKE,OAFL,CAEa,UAAUF,IAAV,EAAgB;AACzBb,QAAAA,WAAW,CAACO,MAAZ,CAAmBM,IAAnB,IAA2B,IAAIrB,iBAAiB,CAACwB,YAAtB,CAAmCd,IAAnC,EAAyCF,WAAW,CAACO,MAAZ,CAAmBM,IAAnB,CAAzC,CAA3B;AACH,OAJD;AAKH;AACJ,GAVD;;AAWAnB,EAAAA,mBAAmB,CAACG,SAApB,CAA8BoB,gBAA9B,GAAiD,UAAUlB,OAAV,EAAmBC,WAAnB,EAAgC;AAC7E,QAAIE,IAAI,GAAG,KAAKN,gBAAL,CAAsBO,cAAtB,CAAqCJ,OAArC,CAAX;;AACA,QAAIG,IAAJ,EAAU;AACN,UAAIG,QAAQ,GAAGL,WAAW,CAACM,OAAZ,CAAoB,KAAKX,cAAzB,EAAyCK,WAAzC,CAAf;AACAA,MAAAA,WAAW,CAACO,MAAZ,CAAmBF,QAAnB,IAA+B,IAAIb,iBAAiB,CAACgB,SAAtB,CAAgCN,IAAhC,CAA/B;AACH;AACJ,GAND;;AAOA,SAAOR,mBAAP;AACH,CA/BwC,EAAzC;;AAgCAJ,OAAO,CAACI,mBAAR,GAA8BA,mBAA9B","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar webpack_sources_1 = require(\"webpack-sources\");\nvar WebpackAssetManager = /** @class */ (function () {\n    function WebpackAssetManager(outputFilename, licensesRenderer) {\n        this.outputFilename = outputFilename;\n        this.licensesRenderer = licensesRenderer;\n    }\n    WebpackAssetManager.prototype.writeChunkLicenses = function (modules, compilation, chunk) {\n        var text = this.licensesRenderer.renderLicenses(modules);\n        if (text && text.trim()) {\n            var filename = compilation.getPath(this.outputFilename, { chunk: chunk });\n            compilation.assets[filename] = new webpack_sources_1.RawSource(text);\n        }\n    };\n    WebpackAssetManager.prototype.writeChunkBanners = function (modules, compilation, chunk) {\n        var filename = compilation.getPath(this.outputFilename, { chunk: chunk });\n        var text = this.licensesRenderer.renderBanner(filename, modules);\n        if (text && text.trim()) {\n            chunk.files\n                .filter(function (file) { return /\\.js$/.test(file); })\n                .forEach(function (file) {\n                compilation.assets[file] = new webpack_sources_1.ConcatSource(text, compilation.assets[file]);\n            });\n        }\n    };\n    WebpackAssetManager.prototype.writeAllLicenses = function (modules, compilation) {\n        var text = this.licensesRenderer.renderLicenses(modules);\n        if (text) {\n            var filename = compilation.getPath(this.outputFilename, compilation);\n            compilation.assets[filename] = new webpack_sources_1.RawSource(text);\n        }\n    };\n    return WebpackAssetManager;\n}());\nexports.WebpackAssetManager = WebpackAssetManager;\n"]},"metadata":{},"sourceType":"script"}