{"ast":null,"code":"\"use strict\";\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nvar _regeneratorRuntime = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.htmlRewritingStream = void 0;\n\nvar stream_1 = require(\"stream\");\n\nfunction htmlRewritingStream(_x) {\n  return _htmlRewritingStream.apply(this, arguments);\n}\n\nfunction _htmlRewritingStream() {\n  _htmlRewritingStream = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(content) {\n    var chunks, rewriter;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            chunks = [];\n            _context.next = 3;\n            return Promise.resolve().then(function () {\n              return require('parse5-html-rewriting-stream');\n            });\n\n          case 3:\n            _context.t0 = _context.sent;\n            rewriter = new _context.t0();\n            return _context.abrupt(\"return\", {\n              rewriter: rewriter,\n              transformedContent: new Promise(function (resolve) {\n                new stream_1.Readable({\n                  encoding: 'utf8',\n                  read: function read() {\n                    this.push(Buffer.from(content));\n                    this.push(null);\n                  }\n                }).pipe(rewriter).pipe(new stream_1.Writable({\n                  write: function write(chunk, encoding, callback) {\n                    chunks.push(typeof chunk === 'string' ? Buffer.from(chunk, encoding) : chunk);\n                    callback();\n                  },\n                  final: function final(callback) {\n                    callback();\n                    resolve(Buffer.concat(chunks).toString());\n                  }\n                }));\n              })\n            });\n\n          case 6:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _htmlRewritingStream.apply(this, arguments);\n}\n\nexports.htmlRewritingStream = htmlRewritingStream;","map":{"version":3,"sources":["/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@angular-devkit/build-angular/src/utils/index-file/html-rewriting-stream.js"],"names":["Object","defineProperty","exports","value","htmlRewritingStream","stream_1","require","content","chunks","Promise","resolve","then","rewriter","transformedContent","Readable","encoding","read","push","Buffer","from","pipe","Writable","write","chunk","callback","final","concat","toString"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,mBAAR,GAA8B,KAAK,CAAnC;;AACA,IAAMC,QAAQ,GAAGC,OAAO,CAAC,QAAD,CAAxB;;SACeF,mB;;;;;kFAAf,iBAAmCG,OAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AACUC,YAAAA,MADV,GACmB,EADnB;AAAA;AAAA,mBAEgCC,OAAO,CAACC,OAAR,GAAkBC,IAAlB,CAAuB;AAAA,qBAAML,OAAO,CAAC,8BAAD,CAAb;AAAA,aAAvB,CAFhC;;AAAA;AAAA;AAEUM,YAAAA,QAFV;AAAA,6CAGW;AACHA,cAAAA,QAAQ,EAARA,QADG;AAEHC,cAAAA,kBAAkB,EAAE,IAAIJ,OAAJ,CAAY,UAAAC,OAAO,EAAI;AACvC,oBAAIL,QAAQ,CAACS,QAAb,CAAsB;AAClBC,kBAAAA,QAAQ,EAAE,MADQ;AAElBC,kBAAAA,IAFkB,kBAEX;AACH,yBAAKC,IAAL,CAAUC,MAAM,CAACC,IAAP,CAAYZ,OAAZ,CAAV;AACA,yBAAKU,IAAL,CAAU,IAAV;AACH;AALiB,iBAAtB,EAOKG,IAPL,CAOUR,QAPV,EAQKQ,IARL,CAQU,IAAIf,QAAQ,CAACgB,QAAb,CAAsB;AAC5BC,kBAAAA,KAD4B,iBACtBC,KADsB,EACfR,QADe,EACLS,QADK,EACK;AAC7BhB,oBAAAA,MAAM,CAACS,IAAP,CAAY,OAAOM,KAAP,KAAiB,QAAjB,GAA4BL,MAAM,CAACC,IAAP,CAAYI,KAAZ,EAAmBR,QAAnB,CAA5B,GAA2DQ,KAAvE;AACAC,oBAAAA,QAAQ;AACX,mBAJ2B;AAK5BC,kBAAAA,KAL4B,iBAKtBD,QALsB,EAKZ;AACZA,oBAAAA,QAAQ;AACRd,oBAAAA,OAAO,CAACQ,MAAM,CAACQ,MAAP,CAAclB,MAAd,EAAsBmB,QAAtB,EAAD,CAAP;AACH;AAR2B,iBAAtB,CARV;AAkBH,eAnBmB;AAFjB,aAHX;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AA2BAzB,OAAO,CAACE,mBAAR,GAA8BA,mBAA9B","sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.htmlRewritingStream = void 0;\nconst stream_1 = require(\"stream\");\nasync function htmlRewritingStream(content) {\n    const chunks = [];\n    const rewriter = new (await Promise.resolve().then(() => require('parse5-html-rewriting-stream')))();\n    return {\n        rewriter,\n        transformedContent: new Promise(resolve => {\n            new stream_1.Readable({\n                encoding: 'utf8',\n                read() {\n                    this.push(Buffer.from(content));\n                    this.push(null);\n                },\n            })\n                .pipe(rewriter)\n                .pipe(new stream_1.Writable({\n                write(chunk, encoding, callback) {\n                    chunks.push(typeof chunk === 'string' ? Buffer.from(chunk, encoding) : chunk);\n                    callback();\n                },\n                final(callback) {\n                    callback();\n                    resolve(Buffer.concat(chunks).toString());\n                },\n            }));\n        }),\n    };\n}\nexports.htmlRewritingStream = htmlRewritingStream;\n"]},"metadata":{},"sourceType":"script"}