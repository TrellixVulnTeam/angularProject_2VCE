{"ast":null,"code":"/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n(function (factory) {\n  if (typeof module === \"object\" && typeof module.exports === \"object\") {\n    var v = factory(require, exports);\n    if (v !== undefined) module.exports = v;\n  } else if (typeof define === \"function\" && define.amd) {\n    define(\"@angular/compiler/src/aot/compiler_factory\", [\"require\", \"exports\", \"@angular/compiler/src/config\", \"@angular/compiler/src/core\", \"@angular/compiler/src/directive_normalizer\", \"@angular/compiler/src/directive_resolver\", \"@angular/compiler/src/expression_parser/lexer\", \"@angular/compiler/src/expression_parser/parser\", \"@angular/compiler/src/i18n/i18n_html_parser\", \"@angular/compiler/src/injectable_compiler\", \"@angular/compiler/src/metadata_resolver\", \"@angular/compiler/src/ml_parser/html_parser\", \"@angular/compiler/src/ng_module_compiler\", \"@angular/compiler/src/ng_module_resolver\", \"@angular/compiler/src/output/ts_emitter\", \"@angular/compiler/src/pipe_resolver\", \"@angular/compiler/src/schema/dom_element_schema_registry\", \"@angular/compiler/src/style_compiler\", \"@angular/compiler/src/template_parser/template_parser\", \"@angular/compiler/src/util\", \"@angular/compiler/src/view_compiler/type_check_compiler\", \"@angular/compiler/src/view_compiler/view_compiler\", \"@angular/compiler/src/aot/compiler\", \"@angular/compiler/src/aot/static_reflector\", \"@angular/compiler/src/aot/static_symbol\", \"@angular/compiler/src/aot/static_symbol_resolver\", \"@angular/compiler/src/aot/summary_resolver\"], factory);\n  }\n})(function (require, exports) {\n  \"use strict\";\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.createAotCompiler = exports.createAotUrlResolver = void 0;\n\n  var config_1 = require(\"@angular/compiler/src/config\");\n\n  var core_1 = require(\"@angular/compiler/src/core\");\n\n  var directive_normalizer_1 = require(\"@angular/compiler/src/directive_normalizer\");\n\n  var directive_resolver_1 = require(\"@angular/compiler/src/directive_resolver\");\n\n  var lexer_1 = require(\"@angular/compiler/src/expression_parser/lexer\");\n\n  var parser_1 = require(\"@angular/compiler/src/expression_parser/parser\");\n\n  var i18n_html_parser_1 = require(\"@angular/compiler/src/i18n/i18n_html_parser\");\n\n  var injectable_compiler_1 = require(\"@angular/compiler/src/injectable_compiler\");\n\n  var metadata_resolver_1 = require(\"@angular/compiler/src/metadata_resolver\");\n\n  var html_parser_1 = require(\"@angular/compiler/src/ml_parser/html_parser\");\n\n  var ng_module_compiler_1 = require(\"@angular/compiler/src/ng_module_compiler\");\n\n  var ng_module_resolver_1 = require(\"@angular/compiler/src/ng_module_resolver\");\n\n  var ts_emitter_1 = require(\"@angular/compiler/src/output/ts_emitter\");\n\n  var pipe_resolver_1 = require(\"@angular/compiler/src/pipe_resolver\");\n\n  var dom_element_schema_registry_1 = require(\"@angular/compiler/src/schema/dom_element_schema_registry\");\n\n  var style_compiler_1 = require(\"@angular/compiler/src/style_compiler\");\n\n  var template_parser_1 = require(\"@angular/compiler/src/template_parser/template_parser\");\n\n  var util_1 = require(\"@angular/compiler/src/util\");\n\n  var type_check_compiler_1 = require(\"@angular/compiler/src/view_compiler/type_check_compiler\");\n\n  var view_compiler_1 = require(\"@angular/compiler/src/view_compiler/view_compiler\");\n\n  var compiler_1 = require(\"@angular/compiler/src/aot/compiler\");\n\n  var static_reflector_1 = require(\"@angular/compiler/src/aot/static_reflector\");\n\n  var static_symbol_1 = require(\"@angular/compiler/src/aot/static_symbol\");\n\n  var static_symbol_resolver_1 = require(\"@angular/compiler/src/aot/static_symbol_resolver\");\n\n  var summary_resolver_1 = require(\"@angular/compiler/src/aot/summary_resolver\");\n\n  function createAotUrlResolver(host) {\n    return {\n      resolve: function resolve(basePath, url) {\n        var filePath = host.resourceNameToFileName(url, basePath);\n\n        if (!filePath) {\n          throw util_1.syntaxError(\"Couldn't resolve resource \" + url + \" from \" + basePath);\n        }\n\n        return filePath;\n      }\n    };\n  }\n\n  exports.createAotUrlResolver = createAotUrlResolver;\n  /**\n   * Creates a new AotCompiler based on options and a host.\n   */\n\n  function createAotCompiler(compilerHost, options, errorCollector) {\n    var translations = options.translations || '';\n    var urlResolver = createAotUrlResolver(compilerHost);\n    var symbolCache = new static_symbol_1.StaticSymbolCache();\n    var summaryResolver = new summary_resolver_1.AotSummaryResolver(compilerHost, symbolCache);\n    var symbolResolver = new static_symbol_resolver_1.StaticSymbolResolver(compilerHost, symbolCache, summaryResolver);\n    var staticReflector = new static_reflector_1.StaticReflector(summaryResolver, symbolResolver, [], [], errorCollector);\n    var htmlParser;\n\n    if (!!options.enableIvy) {\n      // Ivy handles i18n at the compiler level so we must use a regular parser\n      htmlParser = new html_parser_1.HtmlParser();\n    } else {\n      htmlParser = new i18n_html_parser_1.I18NHtmlParser(new html_parser_1.HtmlParser(), translations, options.i18nFormat, options.missingTranslation, console);\n    }\n\n    var config = new config_1.CompilerConfig({\n      defaultEncapsulation: core_1.ViewEncapsulation.Emulated,\n      useJit: false,\n      missingTranslation: options.missingTranslation,\n      preserveWhitespaces: options.preserveWhitespaces,\n      strictInjectionParameters: options.strictInjectionParameters\n    });\n    var normalizer = new directive_normalizer_1.DirectiveNormalizer({\n      get: function get(url) {\n        return compilerHost.loadResource(url);\n      }\n    }, urlResolver, htmlParser, config);\n    var expressionParser = new parser_1.Parser(new lexer_1.Lexer());\n    var elementSchemaRegistry = new dom_element_schema_registry_1.DomElementSchemaRegistry();\n    var tmplParser = new template_parser_1.TemplateParser(config, staticReflector, expressionParser, elementSchemaRegistry, htmlParser, console, []);\n    var resolver = new metadata_resolver_1.CompileMetadataResolver(config, htmlParser, new ng_module_resolver_1.NgModuleResolver(staticReflector), new directive_resolver_1.DirectiveResolver(staticReflector), new pipe_resolver_1.PipeResolver(staticReflector), summaryResolver, elementSchemaRegistry, normalizer, console, symbolCache, staticReflector, errorCollector); // TODO(vicb): do not pass options.i18nFormat here\n\n    var viewCompiler = new view_compiler_1.ViewCompiler(staticReflector);\n    var typeCheckCompiler = new type_check_compiler_1.TypeCheckCompiler(options, staticReflector);\n    var compiler = new compiler_1.AotCompiler(config, options, compilerHost, staticReflector, resolver, tmplParser, new style_compiler_1.StyleCompiler(urlResolver), viewCompiler, typeCheckCompiler, new ng_module_compiler_1.NgModuleCompiler(staticReflector), new injectable_compiler_1.InjectableCompiler(staticReflector, !!options.enableIvy), new ts_emitter_1.TypeScriptEmitter(), summaryResolver, symbolResolver);\n    return {\n      compiler: compiler,\n      reflector: staticReflector\n    };\n  }\n\n  exports.createAotCompiler = createAotCompiler;\n});","map":{"version":3,"sources":["../../../../../../../packages/compiler/src/aot/compiler_factory.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CompilerConfig} from '../config';\nimport {ViewEncapsulation} from '../core';\nimport {DirectiveNormalizer} from '../directive_normalizer';\nimport {DirectiveResolver} from '../directive_resolver';\nimport {Lexer} from '../expression_parser/lexer';\nimport {Parser} from '../expression_parser/parser';\nimport {I18NHtmlParser} from '../i18n/i18n_html_parser';\nimport {InjectableCompiler} from '../injectable_compiler';\nimport {CompileMetadataResolver} from '../metadata_resolver';\nimport {HtmlParser} from '../ml_parser/html_parser';\nimport {NgModuleCompiler} from '../ng_module_compiler';\nimport {NgModuleResolver} from '../ng_module_resolver';\nimport {TypeScriptEmitter} from '../output/ts_emitter';\nimport {PipeResolver} from '../pipe_resolver';\nimport {DomElementSchemaRegistry} from '../schema/dom_element_schema_registry';\nimport {StyleCompiler} from '../style_compiler';\nimport {TemplateParser} from '../template_parser/template_parser';\nimport {UrlResolver} from '../url_resolver';\nimport {syntaxError} from '../util';\nimport {TypeCheckCompiler} from '../view_compiler/type_check_compiler';\nimport {ViewCompiler} from '../view_compiler/view_compiler';\n\nimport {AotCompiler} from './compiler';\nimport {AotCompilerHost} from './compiler_host';\nimport {AotCompilerOptions} from './compiler_options';\nimport {StaticReflector} from './static_reflector';\nimport {StaticSymbolCache} from './static_symbol';\nimport {StaticSymbolResolver} from './static_symbol_resolver';\nimport {AotSummaryResolver} from './summary_resolver';\n\nexport function createAotUrlResolver(\n    host: {resourceNameToFileName(resourceName: string, containingFileName: string): string|null;}):\n    UrlResolver {\n  return {\n    resolve: (basePath: string, url: string) => {\n      const filePath = host.resourceNameToFileName(url, basePath);\n      if (!filePath) {\n        throw syntaxError(`Couldn't resolve resource ${url} from ${basePath}`);\n      }\n      return filePath;\n    }\n  };\n}\n\n/**\n * Creates a new AotCompiler based on options and a host.\n */\nexport function createAotCompiler(\n    compilerHost: AotCompilerHost, options: AotCompilerOptions,\n    errorCollector?: (error: any, type?: any) =>\n        void): {compiler: AotCompiler, reflector: StaticReflector} {\n  let translations: string = options.translations || '';\n\n  const urlResolver = createAotUrlResolver(compilerHost);\n  const symbolCache = new StaticSymbolCache();\n  const summaryResolver = new AotSummaryResolver(compilerHost, symbolCache);\n  const symbolResolver = new StaticSymbolResolver(compilerHost, symbolCache, summaryResolver);\n  const staticReflector =\n      new StaticReflector(summaryResolver, symbolResolver, [], [], errorCollector);\n  let htmlParser: I18NHtmlParser;\n  if (!!options.enableIvy) {\n    // Ivy handles i18n at the compiler level so we must use a regular parser\n    htmlParser = new HtmlParser() as I18NHtmlParser;\n  } else {\n    htmlParser = new I18NHtmlParser(\n        new HtmlParser(), translations, options.i18nFormat, options.missingTranslation, console);\n  }\n  const config = new CompilerConfig({\n    defaultEncapsulation: ViewEncapsulation.Emulated,\n    useJit: false,\n    missingTranslation: options.missingTranslation,\n    preserveWhitespaces: options.preserveWhitespaces,\n    strictInjectionParameters: options.strictInjectionParameters,\n  });\n  const normalizer = new DirectiveNormalizer(\n      {get: (url: string) => compilerHost.loadResource(url)}, urlResolver, htmlParser, config);\n  const expressionParser = new Parser(new Lexer());\n  const elementSchemaRegistry = new DomElementSchemaRegistry();\n  const tmplParser = new TemplateParser(\n      config, staticReflector, expressionParser, elementSchemaRegistry, htmlParser, console, []);\n  const resolver = new CompileMetadataResolver(\n      config, htmlParser, new NgModuleResolver(staticReflector),\n      new DirectiveResolver(staticReflector), new PipeResolver(staticReflector), summaryResolver,\n      elementSchemaRegistry, normalizer, console, symbolCache, staticReflector, errorCollector);\n  // TODO(vicb): do not pass options.i18nFormat here\n  const viewCompiler = new ViewCompiler(staticReflector);\n  const typeCheckCompiler = new TypeCheckCompiler(options, staticReflector);\n  const compiler = new AotCompiler(\n      config, options, compilerHost, staticReflector, resolver, tmplParser,\n      new StyleCompiler(urlResolver), viewCompiler, typeCheckCompiler,\n      new NgModuleCompiler(staticReflector),\n      new InjectableCompiler(staticReflector, !!options.enableIvy), new TypeScriptEmitter(),\n      summaryResolver, symbolResolver);\n  return {compiler, reflector: staticReflector};\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}