{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\"; // TODO webpack 5 remove this plugin\n// It has been splitted into separate plugins for modules and chunks\n\nvar _createForOfIteratorHelper = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _classCallCheck = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/createClass\");\n\nvar OccurrenceOrderPlugin = /*#__PURE__*/function () {\n  function OccurrenceOrderPlugin(preferEntry) {\n    _classCallCheck(this, OccurrenceOrderPlugin);\n\n    if (preferEntry !== undefined && typeof preferEntry !== \"boolean\") {\n      throw new Error(\"Argument should be a boolean.\\nFor more info on this plugin, see https://webpack.js.org/plugins/\");\n    }\n\n    this.preferEntry = preferEntry;\n  }\n\n  _createClass(OccurrenceOrderPlugin, [{\n    key: \"apply\",\n    value: function apply(compiler) {\n      var preferEntry = this.preferEntry;\n      compiler.hooks.compilation.tap(\"OccurrenceOrderPlugin\", function (compilation) {\n        compilation.hooks.optimizeModuleOrder.tap(\"OccurrenceOrderPlugin\", function (modules) {\n          var occursInInitialChunksMap = new Map();\n          var occursInAllChunksMap = new Map();\n          var initialChunkChunkMap = new Map();\n          var entryCountMap = new Map();\n\n          var _iterator = _createForOfIteratorHelper(modules),\n              _step;\n\n          try {\n            for (_iterator.s(); !(_step = _iterator.n()).done;) {\n              var _m = _step.value;\n              var initial = 0;\n              var entry = 0;\n\n              var _iterator4 = _createForOfIteratorHelper(_m.chunksIterable),\n                  _step4;\n\n              try {\n                for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n                  var c = _step4.value;\n                  if (c.canBeInitial()) initial++;\n                  if (c.entryModule === _m) entry++;\n                }\n              } catch (err) {\n                _iterator4.e(err);\n              } finally {\n                _iterator4.f();\n              }\n\n              initialChunkChunkMap.set(_m, initial);\n              entryCountMap.set(_m, entry);\n            }\n          } catch (err) {\n            _iterator.e(err);\n          } finally {\n            _iterator.f();\n          }\n\n          var countOccursInEntry = function countOccursInEntry(sum, r) {\n            if (!r.module) {\n              return sum;\n            }\n\n            return sum + initialChunkChunkMap.get(r.module);\n          };\n\n          var countOccurs = function countOccurs(sum, r) {\n            if (!r.module) {\n              return sum;\n            }\n\n            var factor = 1;\n\n            if (typeof r.dependency.getNumberOfIdOccurrences === \"function\") {\n              factor = r.dependency.getNumberOfIdOccurrences();\n            }\n\n            if (factor === 0) {\n              return sum;\n            }\n\n            return sum + factor * r.module.getNumberOfChunks();\n          };\n\n          if (preferEntry) {\n            var _iterator2 = _createForOfIteratorHelper(modules),\n                _step2;\n\n            try {\n              for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n                var m = _step2.value;\n                var result = m.reasons.reduce(countOccursInEntry, 0) + initialChunkChunkMap.get(m) + entryCountMap.get(m);\n                occursInInitialChunksMap.set(m, result);\n              }\n            } catch (err) {\n              _iterator2.e(err);\n            } finally {\n              _iterator2.f();\n            }\n          }\n\n          var originalOrder = new Map();\n          var i = 0;\n\n          var _iterator3 = _createForOfIteratorHelper(modules),\n              _step3;\n\n          try {\n            for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n              var _m2 = _step3.value;\n\n              var _result = _m2.reasons.reduce(countOccurs, 0) + _m2.getNumberOfChunks() + entryCountMap.get(_m2);\n\n              occursInAllChunksMap.set(_m2, _result);\n              originalOrder.set(_m2, i++);\n            }\n          } catch (err) {\n            _iterator3.e(err);\n          } finally {\n            _iterator3.f();\n          }\n\n          modules.sort(function (a, b) {\n            if (preferEntry) {\n              var aEntryOccurs = occursInInitialChunksMap.get(a);\n              var bEntryOccurs = occursInInitialChunksMap.get(b);\n              if (aEntryOccurs > bEntryOccurs) return -1;\n              if (aEntryOccurs < bEntryOccurs) return 1;\n            }\n\n            var aOccurs = occursInAllChunksMap.get(a);\n            var bOccurs = occursInAllChunksMap.get(b);\n            if (aOccurs > bOccurs) return -1;\n            if (aOccurs < bOccurs) return 1;\n            var orgA = originalOrder.get(a);\n            var orgB = originalOrder.get(b);\n            return orgA - orgB;\n          });\n        });\n        compilation.hooks.optimizeChunkOrder.tap(\"OccurrenceOrderPlugin\", function (chunks) {\n          var occursInInitialChunksMap = new Map();\n          var originalOrder = new Map();\n          var i = 0;\n\n          var _iterator5 = _createForOfIteratorHelper(chunks),\n              _step5;\n\n          try {\n            for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n              var c = _step5.value;\n              var occurs = 0;\n\n              var _iterator6 = _createForOfIteratorHelper(c.groupsIterable),\n                  _step6;\n\n              try {\n                for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n                  var chunkGroup = _step6.value;\n\n                  var _iterator7 = _createForOfIteratorHelper(chunkGroup.parentsIterable),\n                      _step7;\n\n                  try {\n                    for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n                      var parent = _step7.value;\n                      if (parent.isInitial()) occurs++;\n                    }\n                  } catch (err) {\n                    _iterator7.e(err);\n                  } finally {\n                    _iterator7.f();\n                  }\n                }\n              } catch (err) {\n                _iterator6.e(err);\n              } finally {\n                _iterator6.f();\n              }\n\n              occursInInitialChunksMap.set(c, occurs);\n              originalOrder.set(c, i++);\n            }\n          } catch (err) {\n            _iterator5.e(err);\n          } finally {\n            _iterator5.f();\n          }\n\n          chunks.sort(function (a, b) {\n            var aEntryOccurs = occursInInitialChunksMap.get(a);\n            var bEntryOccurs = occursInInitialChunksMap.get(b);\n            if (aEntryOccurs > bEntryOccurs) return -1;\n            if (aEntryOccurs < bEntryOccurs) return 1;\n            var aOccurs = a.getNumberOfGroups();\n            var bOccurs = b.getNumberOfGroups();\n            if (aOccurs > bOccurs) return -1;\n            if (aOccurs < bOccurs) return 1;\n            var orgA = originalOrder.get(a);\n            var orgB = originalOrder.get(b);\n            return orgA - orgB;\n          });\n        });\n      });\n    }\n  }]);\n\n  return OccurrenceOrderPlugin;\n}();\n\nmodule.exports = OccurrenceOrderPlugin;","map":{"version":3,"sources":["/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/webpack/lib/optimize/OccurrenceOrderPlugin.js"],"names":["OccurrenceOrderPlugin","preferEntry","undefined","Error","compiler","hooks","compilation","tap","optimizeModuleOrder","modules","occursInInitialChunksMap","Map","occursInAllChunksMap","initialChunkChunkMap","entryCountMap","m","initial","entry","chunksIterable","c","canBeInitial","entryModule","set","countOccursInEntry","sum","r","module","get","countOccurs","factor","dependency","getNumberOfIdOccurrences","getNumberOfChunks","result","reasons","reduce","originalOrder","i","sort","a","b","aEntryOccurs","bEntryOccurs","aOccurs","bOccurs","orgA","orgB","optimizeChunkOrder","chunks","occurs","groupsIterable","chunkGroup","parentsIterable","parent","isInitial","getNumberOfGroups","exports"],"mappings":"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","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\n// TODO webpack 5 remove this plugin\n// It has been splitted into separate plugins for modules and chunks\nclass OccurrenceOrderPlugin {\n\tconstructor(preferEntry) {\n\t\tif (preferEntry !== undefined && typeof preferEntry !== \"boolean\") {\n\t\t\tthrow new Error(\n\t\t\t\t\"Argument should be a boolean.\\nFor more info on this plugin, see https://webpack.js.org/plugins/\"\n\t\t\t);\n\t\t}\n\t\tthis.preferEntry = preferEntry;\n\t}\n\tapply(compiler) {\n\t\tconst preferEntry = this.preferEntry;\n\t\tcompiler.hooks.compilation.tap(\"OccurrenceOrderPlugin\", compilation => {\n\t\t\tcompilation.hooks.optimizeModuleOrder.tap(\n\t\t\t\t\"OccurrenceOrderPlugin\",\n\t\t\t\tmodules => {\n\t\t\t\t\tconst occursInInitialChunksMap = new Map();\n\t\t\t\t\tconst occursInAllChunksMap = new Map();\n\n\t\t\t\t\tconst initialChunkChunkMap = new Map();\n\t\t\t\t\tconst entryCountMap = new Map();\n\t\t\t\t\tfor (const m of modules) {\n\t\t\t\t\t\tlet initial = 0;\n\t\t\t\t\t\tlet entry = 0;\n\t\t\t\t\t\tfor (const c of m.chunksIterable) {\n\t\t\t\t\t\t\tif (c.canBeInitial()) initial++;\n\t\t\t\t\t\t\tif (c.entryModule === m) entry++;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tinitialChunkChunkMap.set(m, initial);\n\t\t\t\t\t\tentryCountMap.set(m, entry);\n\t\t\t\t\t}\n\n\t\t\t\t\tconst countOccursInEntry = (sum, r) => {\n\t\t\t\t\t\tif (!r.module) {\n\t\t\t\t\t\t\treturn sum;\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn sum + initialChunkChunkMap.get(r.module);\n\t\t\t\t\t};\n\t\t\t\t\tconst countOccurs = (sum, r) => {\n\t\t\t\t\t\tif (!r.module) {\n\t\t\t\t\t\t\treturn sum;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tlet factor = 1;\n\t\t\t\t\t\tif (typeof r.dependency.getNumberOfIdOccurrences === \"function\") {\n\t\t\t\t\t\t\tfactor = r.dependency.getNumberOfIdOccurrences();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (factor === 0) {\n\t\t\t\t\t\t\treturn sum;\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn sum + factor * r.module.getNumberOfChunks();\n\t\t\t\t\t};\n\n\t\t\t\t\tif (preferEntry) {\n\t\t\t\t\t\tfor (const m of modules) {\n\t\t\t\t\t\t\tconst result =\n\t\t\t\t\t\t\t\tm.reasons.reduce(countOccursInEntry, 0) +\n\t\t\t\t\t\t\t\tinitialChunkChunkMap.get(m) +\n\t\t\t\t\t\t\t\tentryCountMap.get(m);\n\t\t\t\t\t\t\toccursInInitialChunksMap.set(m, result);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tconst originalOrder = new Map();\n\t\t\t\t\tlet i = 0;\n\t\t\t\t\tfor (const m of modules) {\n\t\t\t\t\t\tconst result =\n\t\t\t\t\t\t\tm.reasons.reduce(countOccurs, 0) +\n\t\t\t\t\t\t\tm.getNumberOfChunks() +\n\t\t\t\t\t\t\tentryCountMap.get(m);\n\t\t\t\t\t\toccursInAllChunksMap.set(m, result);\n\t\t\t\t\t\toriginalOrder.set(m, i++);\n\t\t\t\t\t}\n\n\t\t\t\t\tmodules.sort((a, b) => {\n\t\t\t\t\t\tif (preferEntry) {\n\t\t\t\t\t\t\tconst aEntryOccurs = occursInInitialChunksMap.get(a);\n\t\t\t\t\t\t\tconst bEntryOccurs = occursInInitialChunksMap.get(b);\n\t\t\t\t\t\t\tif (aEntryOccurs > bEntryOccurs) return -1;\n\t\t\t\t\t\t\tif (aEntryOccurs < bEntryOccurs) return 1;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tconst aOccurs = occursInAllChunksMap.get(a);\n\t\t\t\t\t\tconst bOccurs = occursInAllChunksMap.get(b);\n\t\t\t\t\t\tif (aOccurs > bOccurs) return -1;\n\t\t\t\t\t\tif (aOccurs < bOccurs) return 1;\n\t\t\t\t\t\tconst orgA = originalOrder.get(a);\n\t\t\t\t\t\tconst orgB = originalOrder.get(b);\n\t\t\t\t\t\treturn orgA - orgB;\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t);\n\t\t\tcompilation.hooks.optimizeChunkOrder.tap(\n\t\t\t\t\"OccurrenceOrderPlugin\",\n\t\t\t\tchunks => {\n\t\t\t\t\tconst occursInInitialChunksMap = new Map();\n\t\t\t\t\tconst originalOrder = new Map();\n\n\t\t\t\t\tlet i = 0;\n\t\t\t\t\tfor (const c of chunks) {\n\t\t\t\t\t\tlet occurs = 0;\n\t\t\t\t\t\tfor (const chunkGroup of c.groupsIterable) {\n\t\t\t\t\t\t\tfor (const parent of chunkGroup.parentsIterable) {\n\t\t\t\t\t\t\t\tif (parent.isInitial()) occurs++;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\toccursInInitialChunksMap.set(c, occurs);\n\t\t\t\t\t\toriginalOrder.set(c, i++);\n\t\t\t\t\t}\n\n\t\t\t\t\tchunks.sort((a, b) => {\n\t\t\t\t\t\tconst aEntryOccurs = occursInInitialChunksMap.get(a);\n\t\t\t\t\t\tconst bEntryOccurs = occursInInitialChunksMap.get(b);\n\t\t\t\t\t\tif (aEntryOccurs > bEntryOccurs) return -1;\n\t\t\t\t\t\tif (aEntryOccurs < bEntryOccurs) return 1;\n\t\t\t\t\t\tconst aOccurs = a.getNumberOfGroups();\n\t\t\t\t\t\tconst bOccurs = b.getNumberOfGroups();\n\t\t\t\t\t\tif (aOccurs > bOccurs) return -1;\n\t\t\t\t\t\tif (aOccurs < bOccurs) return 1;\n\t\t\t\t\t\tconst orgA = originalOrder.get(a);\n\t\t\t\t\t\tconst orgB = originalOrder.get(b);\n\t\t\t\t\t\treturn orgA - orgB;\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t);\n\t\t});\n\t}\n}\n\nmodule.exports = OccurrenceOrderPlugin;\n"]},"metadata":{},"sourceType":"script"}