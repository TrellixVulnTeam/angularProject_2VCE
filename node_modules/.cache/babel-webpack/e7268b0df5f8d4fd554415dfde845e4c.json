{"ast":null,"code":"/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n(function (factory) {\n  if (typeof module === \"object\" && typeof module.exports === \"object\") {\n    var v = factory(require, exports);\n    if (v !== undefined) module.exports = v;\n  } else if (typeof define === \"function\" && define.amd) {\n    define(\"@angular/compiler/src/render3/r3_jit\", [\"require\", \"exports\"], factory);\n  }\n})(function (require, exports) {\n  \"use strict\";\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.R3JitReflector = void 0;\n  /**\n   * Implementation of `CompileReflector` which resolves references to @angular/core\n   * symbols at runtime, according to a consumer-provided mapping.\n   *\n   * Only supports `resolveExternalReference`, all other methods throw.\n   */\n\n  var R3JitReflector =\n  /** @class */\n  function () {\n    function R3JitReflector(context) {\n      this.context = context;\n    }\n\n    R3JitReflector.prototype.resolveExternalReference = function (ref) {\n      // This reflector only handles @angular/core imports.\n      if (ref.moduleName !== '@angular/core') {\n        throw new Error(\"Cannot resolve external reference to \" + ref.moduleName + \", only references to @angular/core are supported.\");\n      }\n\n      if (!this.context.hasOwnProperty(ref.name)) {\n        throw new Error(\"No value provided for @angular/core symbol '\" + ref.name + \"'.\");\n      }\n\n      return this.context[ref.name];\n    };\n\n    R3JitReflector.prototype.parameters = function (typeOrFunc) {\n      throw new Error('Not implemented.');\n    };\n\n    R3JitReflector.prototype.annotations = function (typeOrFunc) {\n      throw new Error('Not implemented.');\n    };\n\n    R3JitReflector.prototype.shallowAnnotations = function (typeOrFunc) {\n      throw new Error('Not implemented.');\n    };\n\n    R3JitReflector.prototype.tryAnnotations = function (typeOrFunc) {\n      throw new Error('Not implemented.');\n    };\n\n    R3JitReflector.prototype.propMetadata = function (typeOrFunc) {\n      throw new Error('Not implemented.');\n    };\n\n    R3JitReflector.prototype.hasLifecycleHook = function (type, lcProperty) {\n      throw new Error('Not implemented.');\n    };\n\n    R3JitReflector.prototype.guards = function (typeOrFunc) {\n      throw new Error('Not implemented.');\n    };\n\n    R3JitReflector.prototype.componentModuleUrl = function (type, cmpMetadata) {\n      throw new Error('Not implemented.');\n    };\n\n    return R3JitReflector;\n  }();\n\n  exports.R3JitReflector = R3JitReflector;\n});","map":{"version":3,"sources":["../../../../../../../packages/compiler/src/render3/r3_jit.ts"],"names":[],"mappings":"AAAA;;;;;;AAMG;;;;;;;;;;;;;;;AAKH;;;;;AAKG;;AACH,MAAA,cAAA;AAAA;AAAA,cAAA;AACE,aAAA,cAAA,CAAoB,OAApB,EAAiD;AAA7B,WAAA,OAAA,GAAA,OAAA;AAAiC;;AAErD,IAAA,cAAA,CAAA,SAAA,CAAA,wBAAA,GAAA,UAAyB,GAAzB,EAAiD;AAC/C;AACA,UAAI,GAAG,CAAC,UAAJ,KAAmB,eAAvB,EAAwC;AACtC,cAAM,IAAI,KAAJ,CAAU,0CACZ,GAAG,CAAC,UADQ,GACE,mDADZ,CAAN;AAED;;AACD,UAAI,CAAC,KAAK,OAAL,CAAa,cAAb,CAA4B,GAAG,CAAC,IAAhC,CAAL,EAA6C;AAC3C,cAAM,IAAI,KAAJ,CAAU,iDAA+C,GAAG,CAAC,IAAnD,GAAwD,IAAlE,CAAN;AACD;;AACD,aAAO,KAAK,OAAL,CAAa,GAAG,CAAC,IAAjB,CAAP;AACD,KAVD;;AAYA,IAAA,cAAA,CAAA,SAAA,CAAA,UAAA,GAAA,UAAW,UAAX,EAA0B;AACxB,YAAM,IAAI,KAAJ,CAAU,kBAAV,CAAN;AACD,KAFD;;AAIA,IAAA,cAAA,CAAA,SAAA,CAAA,WAAA,GAAA,UAAY,UAAZ,EAA2B;AACzB,YAAM,IAAI,KAAJ,CAAU,kBAAV,CAAN;AACD,KAFD;;AAIA,IAAA,cAAA,CAAA,SAAA,CAAA,kBAAA,GAAA,UAAmB,UAAnB,EAAkC;AAChC,YAAM,IAAI,KAAJ,CAAU,kBAAV,CAAN;AACD,KAFD;;AAIA,IAAA,cAAA,CAAA,SAAA,CAAA,cAAA,GAAA,UAAe,UAAf,EAA8B;AAC5B,YAAM,IAAI,KAAJ,CAAU,kBAAV,CAAN;AACD,KAFD;;AAIA,IAAA,cAAA,CAAA,SAAA,CAAA,YAAA,GAAA,UAAa,UAAb,EAA4B;AAC1B,YAAM,IAAI,KAAJ,CAAU,kBAAV,CAAN;AACD,KAFD;;AAIA,IAAA,cAAA,CAAA,SAAA,CAAA,gBAAA,GAAA,UAAiB,IAAjB,EAA4B,UAA5B,EAA8C;AAC5C,YAAM,IAAI,KAAJ,CAAU,kBAAV,CAAN;AACD,KAFD;;AAIA,IAAA,cAAA,CAAA,SAAA,CAAA,MAAA,GAAA,UAAO,UAAP,EAAsB;AACpB,YAAM,IAAI,KAAJ,CAAU,kBAAV,CAAN;AACD,KAFD;;AAIA,IAAA,cAAA,CAAA,SAAA,CAAA,kBAAA,GAAA,UAAmB,IAAnB,EAA8B,WAA9B,EAA8C;AAC5C,YAAM,IAAI,KAAJ,CAAU,kBAAV,CAAN;AACD,KAFD;;AAGF,WAAA,cAAA;AAAC,GA9CD,EAAA;;AAAa,EAAA,OAAA,CAAA,cAAA,GAAA,cAAA","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CompileReflector} from '../compile_reflector';\nimport * as o from '../output/output_ast';\n\n/**\n * Implementation of `CompileReflector` which resolves references to @angular/core\n * symbols at runtime, according to a consumer-provided mapping.\n *\n * Only supports `resolveExternalReference`, all other methods throw.\n */\nexport class R3JitReflector implements CompileReflector {\n  constructor(private context: {[key: string]: any}) {}\n\n  resolveExternalReference(ref: o.ExternalReference): any {\n    // This reflector only handles @angular/core imports.\n    if (ref.moduleName !== '@angular/core') {\n      throw new Error(`Cannot resolve external reference to ${\n          ref.moduleName}, only references to @angular/core are supported.`);\n    }\n    if (!this.context.hasOwnProperty(ref.name!)) {\n      throw new Error(`No value provided for @angular/core symbol '${ref.name!}'.`);\n    }\n    return this.context[ref.name!];\n  }\n\n  parameters(typeOrFunc: any): any[][] {\n    throw new Error('Not implemented.');\n  }\n\n  annotations(typeOrFunc: any): any[] {\n    throw new Error('Not implemented.');\n  }\n\n  shallowAnnotations(typeOrFunc: any): any[] {\n    throw new Error('Not implemented.');\n  }\n\n  tryAnnotations(typeOrFunc: any): any[] {\n    throw new Error('Not implemented.');\n  }\n\n  propMetadata(typeOrFunc: any): {[key: string]: any[];} {\n    throw new Error('Not implemented.');\n  }\n\n  hasLifecycleHook(type: any, lcProperty: string): boolean {\n    throw new Error('Not implemented.');\n  }\n\n  guards(typeOrFunc: any): {[key: string]: any;} {\n    throw new Error('Not implemented.');\n  }\n\n  componentModuleUrl(type: any, cmpMetadata: any): string {\n    throw new Error('Not implemented.');\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}