{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nvar _classCallCheck = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar Source = require(\"./Source\");\n\nvar _require = require(\"source-map\"),\n    SourceNode = _require.SourceNode;\n\nvar _require2 = require(\"source-list-map\"),\n    SourceListMap = _require2.SourceListMap;\n\nvar _require3 = require(\"./helpers\"),\n    getSourceAndMap = _require3.getSourceAndMap,\n    getMap = _require3.getMap;\n\nvar SPLIT_REGEX = /(?!$)[^\\n\\r;{}]*[\\n\\r;{}]*/g;\n\nfunction _splitCode(code) {\n  return code.match(SPLIT_REGEX) || [];\n}\n\nvar OriginalSource = /*#__PURE__*/function (_Source) {\n  _inherits(OriginalSource, _Source);\n\n  var _super = _createSuper(OriginalSource);\n\n  function OriginalSource(value, name) {\n    var _this;\n\n    _classCallCheck(this, OriginalSource);\n\n    _this = _super.call(this);\n    var isBuffer = Buffer.isBuffer(value);\n    _this._value = isBuffer ? undefined : value;\n    _this._valueAsBuffer = isBuffer ? value : undefined;\n    _this._name = name;\n    return _this;\n  }\n\n  _createClass(OriginalSource, [{\n    key: \"getName\",\n    value: function getName() {\n      return this._name;\n    }\n  }, {\n    key: \"source\",\n    value: function source() {\n      if (this._value === undefined) {\n        this._value = this._valueAsBuffer.toString(\"utf-8\");\n      }\n\n      return this._value;\n    }\n  }, {\n    key: \"buffer\",\n    value: function buffer() {\n      if (this._valueAsBuffer === undefined) {\n        this._valueAsBuffer = Buffer.from(this._value, \"utf-8\");\n      }\n\n      return this._valueAsBuffer;\n    }\n  }, {\n    key: \"map\",\n    value: function map(options) {\n      return getMap(this, options);\n    }\n  }, {\n    key: \"sourceAndMap\",\n    value: function sourceAndMap(options) {\n      return getSourceAndMap(this, options);\n    }\n  }, {\n    key: \"node\",\n    value: function node(options) {\n      if (this._value === undefined) {\n        this._value = this._valueAsBuffer.toString(\"utf-8\");\n      }\n\n      var value = this._value;\n      var name = this._name;\n      var lines = value.split(\"\\n\");\n      var node = new SourceNode(null, null, null, lines.map(function (line, idx) {\n        var pos = 0;\n\n        if (options && options.columns === false) {\n          var content = line + (idx !== lines.length - 1 ? \"\\n\" : \"\");\n          return new SourceNode(idx + 1, 0, name, content);\n        }\n\n        return new SourceNode(null, null, null, _splitCode(line + (idx !== lines.length - 1 ? \"\\n\" : \"\")).map(function (item) {\n          if (/^\\s*$/.test(item)) {\n            pos += item.length;\n            return item;\n          }\n\n          var res = new SourceNode(idx + 1, pos, name, item);\n          pos += item.length;\n          return res;\n        }));\n      }));\n      node.setSourceContent(name, value);\n      return node;\n    }\n  }, {\n    key: \"listMap\",\n    value: function listMap(options) {\n      if (this._value === undefined) {\n        this._value = this._valueAsBuffer.toString(\"utf-8\");\n      }\n\n      return new SourceListMap(this._value, this._name, this._value);\n    }\n  }, {\n    key: \"updateHash\",\n    value: function updateHash(hash) {\n      if (this._valueAsBuffer === undefined) {\n        this._valueAsBuffer = Buffer.from(this._value, \"utf-8\");\n      }\n\n      hash.update(\"OriginalSource\");\n      hash.update(this._valueAsBuffer);\n      hash.update(this._name || \"\");\n    }\n  }]);\n\n  return OriginalSource;\n}(Source);\n\nmodule.exports = OriginalSource;","map":{"version":3,"sources":["/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@angular-devkit/build-angular/node_modules/webpack-sources/lib/OriginalSource.js"],"names":["Source","require","SourceNode","SourceListMap","getSourceAndMap","getMap","SPLIT_REGEX","_splitCode","code","match","OriginalSource","value","name","isBuffer","Buffer","_value","undefined","_valueAsBuffer","_name","toString","from","options","lines","split","node","map","line","idx","pos","columns","content","length","item","test","res","setSourceContent","hash","update","module","exports"],"mappings":"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","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst Source = require(\"./Source\");\nconst { SourceNode } = require(\"source-map\");\nconst { SourceListMap } = require(\"source-list-map\");\nconst { getSourceAndMap, getMap } = require(\"./helpers\");\n\nconst SPLIT_REGEX = /(?!$)[^\\n\\r;{}]*[\\n\\r;{}]*/g;\n\nfunction _splitCode(code) {\n\treturn code.match(SPLIT_REGEX) || [];\n}\n\nclass OriginalSource extends Source {\n\tconstructor(value, name) {\n\t\tsuper();\n\t\tconst isBuffer = Buffer.isBuffer(value);\n\t\tthis._value = isBuffer ? undefined : value;\n\t\tthis._valueAsBuffer = isBuffer ? value : undefined;\n\t\tthis._name = name;\n\t}\n\n\tgetName() {\n\t\treturn this._name;\n\t}\n\n\tsource() {\n\t\tif (this._value === undefined) {\n\t\t\tthis._value = this._valueAsBuffer.toString(\"utf-8\");\n\t\t}\n\t\treturn this._value;\n\t}\n\n\tbuffer() {\n\t\tif (this._valueAsBuffer === undefined) {\n\t\t\tthis._valueAsBuffer = Buffer.from(this._value, \"utf-8\");\n\t\t}\n\t\treturn this._valueAsBuffer;\n\t}\n\n\tmap(options) {\n\t\treturn getMap(this, options);\n\t}\n\n\tsourceAndMap(options) {\n\t\treturn getSourceAndMap(this, options);\n\t}\n\n\tnode(options) {\n\t\tif (this._value === undefined) {\n\t\t\tthis._value = this._valueAsBuffer.toString(\"utf-8\");\n\t\t}\n\t\tconst value = this._value;\n\t\tconst name = this._name;\n\t\tconst lines = value.split(\"\\n\");\n\t\tconst node = new SourceNode(\n\t\t\tnull,\n\t\t\tnull,\n\t\t\tnull,\n\t\t\tlines.map(function (line, idx) {\n\t\t\t\tlet pos = 0;\n\t\t\t\tif (options && options.columns === false) {\n\t\t\t\t\tconst content = line + (idx !== lines.length - 1 ? \"\\n\" : \"\");\n\t\t\t\t\treturn new SourceNode(idx + 1, 0, name, content);\n\t\t\t\t}\n\t\t\t\treturn new SourceNode(\n\t\t\t\t\tnull,\n\t\t\t\t\tnull,\n\t\t\t\t\tnull,\n\t\t\t\t\t_splitCode(line + (idx !== lines.length - 1 ? \"\\n\" : \"\")).map(\n\t\t\t\t\t\tfunction (item) {\n\t\t\t\t\t\t\tif (/^\\s*$/.test(item)) {\n\t\t\t\t\t\t\t\tpos += item.length;\n\t\t\t\t\t\t\t\treturn item;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tconst res = new SourceNode(idx + 1, pos, name, item);\n\t\t\t\t\t\t\tpos += item.length;\n\t\t\t\t\t\t\treturn res;\n\t\t\t\t\t\t}\n\t\t\t\t\t)\n\t\t\t\t);\n\t\t\t})\n\t\t);\n\t\tnode.setSourceContent(name, value);\n\t\treturn node;\n\t}\n\n\tlistMap(options) {\n\t\tif (this._value === undefined) {\n\t\t\tthis._value = this._valueAsBuffer.toString(\"utf-8\");\n\t\t}\n\t\treturn new SourceListMap(this._value, this._name, this._value);\n\t}\n\n\tupdateHash(hash) {\n\t\tif (this._valueAsBuffer === undefined) {\n\t\t\tthis._valueAsBuffer = Buffer.from(this._value, \"utf-8\");\n\t\t}\n\t\thash.update(\"OriginalSource\");\n\t\thash.update(this._valueAsBuffer);\n\t\thash.update(this._name || \"\");\n\t}\n}\n\nmodule.exports = OriginalSource;\n"]},"metadata":{},"sourceType":"script"}