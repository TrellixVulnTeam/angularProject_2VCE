{"ast":null,"code":"'use strict';\n\nvar _objectSpread = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/objectSpread2\");\n\nvar fs = require('graceful-fs');\n\nvar http = require('http');\n\nvar https = require('https');\n\nvar path = require('path');\n\nvar connect = require('connect');\n\nvar mimeType = require('mime');\n\nvar common = require('./middleware/common');\n\nvar runnerMiddleware = require('./middleware/runner');\n\nvar stopperMiddleware = require('./middleware/stopper');\n\nvar karmaMiddleware = require('./middleware/karma');\n\nvar sourceFilesMiddleware = require('./middleware/source_files');\n\nvar proxyMiddleware = require('./middleware/proxy');\n\nvar log = require('./logger').create('web-server');\n\nfunction createCustomHandler(customFileHandlers, config) {\n  return function (request, response, next) {\n    var handler = customFileHandlers.find(function (handler) {\n      return handler.urlRegex.test(request.url);\n    });\n    return handler ? handler.handler(request, response, 'fake/static', 'fake/adapter', config.basePath, 'fake/root') : next();\n  };\n}\n\ncreateCustomHandler.$inject = ['customFileHandlers', 'config'];\n\nfunction createFilesPromise(emitter, fileList) {\n  // Set an empty list of files to avoid race issues with\n  // file_list_modified not having been emitted yet\n  var files = fileList.files;\n  emitter.on('file_list_modified', function (filesParam) {\n    files = filesParam;\n  });\n  return {\n    then: function then() {\n      var _Promise$resolve;\n\n      return (_Promise$resolve = Promise.resolve(files)).then.apply(_Promise$resolve, arguments);\n    }\n  };\n}\n\nfunction createServeStaticFile(config) {\n  return common.createServeFile(fs, path.normalize(path.join(__dirname, '/../static')), config);\n}\n\ncreateServeStaticFile.$inject = ['config'];\n\nfunction createServeFile(config) {\n  return common.createServeFile(fs, null, config);\n}\n\ncreateServeFile.$inject = ['config'];\n\nfunction createWebServer(injector, config) {\n  var _config$mime = config.mime,\n      mime = _config$mime === void 0 ? {} : _config$mime;\n  mimeType.define(_objectSpread({}, mime), true);\n  var proxyMiddlewareInstance = injector.invoke(proxyMiddleware.create);\n  log.debug('Instantiating middleware');\n  var handler = connect();\n\n  if (config.beforeMiddleware) {\n    config.beforeMiddleware.forEach(function (middleware) {\n      return handler.use(injector.get('middleware:' + middleware));\n    });\n  }\n\n  handler.use(injector.invoke(runnerMiddleware.create));\n  handler.use(injector.invoke(stopperMiddleware.create));\n  handler.use(injector.invoke(karmaMiddleware.create));\n  handler.use(injector.invoke(sourceFilesMiddleware.create)); // TODO(vojta): extract the proxy into a plugin\n\n  handler.use(proxyMiddlewareInstance); // TODO(vojta): remove, this is only here because of karma-dart\n  // we need a better way of custom handlers\n\n  handler.use(injector.invoke(createCustomHandler));\n\n  if (config.middleware) {\n    config.middleware.forEach(function (middleware) {\n      return handler.use(injector.get('middleware:' + middleware));\n    });\n  }\n\n  handler.use(function (request, response) {\n    return common.serve404(response, request.url);\n  });\n  var serverClass = http;\n  var serverArguments = [handler];\n\n  if (config.protocol === 'https:') {\n    serverClass = https;\n    serverArguments.unshift(config.httpsServerOptions || {});\n  }\n\n  if (config.httpModule) {\n    serverClass = config.httpModule;\n  }\n\n  var server = serverClass.createServer.apply(null, serverArguments);\n  server.on('upgrade', function (req, socket, head) {\n    log.debug(\"upgrade \".concat(req.url));\n    proxyMiddlewareInstance.upgrade(req, socket, head);\n  });\n  return server;\n}\n\ncreateWebServer.$inject = ['injector', 'config'];\nmodule.exports = {\n  createWebServer: createWebServer,\n  createServeFile: createServeFile,\n  createServeStaticFile: createServeStaticFile,\n  createFilesPromise: createFilesPromise\n};","map":{"version":3,"sources":["/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/karma/lib/web-server.js"],"names":["fs","require","http","https","path","connect","mimeType","common","runnerMiddleware","stopperMiddleware","karmaMiddleware","sourceFilesMiddleware","proxyMiddleware","log","create","createCustomHandler","customFileHandlers","config","request","response","next","handler","find","urlRegex","test","url","basePath","$inject","createFilesPromise","emitter","fileList","files","on","filesParam","then","Promise","resolve","createServeStaticFile","createServeFile","normalize","join","__dirname","createWebServer","injector","mime","define","proxyMiddlewareInstance","invoke","debug","beforeMiddleware","forEach","middleware","use","get","serve404","serverClass","serverArguments","protocol","unshift","httpsServerOptions","httpModule","server","createServer","apply","req","socket","head","upgrade","module","exports"],"mappings":"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","sourcesContent":["'use strict'\n\nconst fs = require('graceful-fs')\nconst http = require('http')\nconst https = require('https')\nconst path = require('path')\nconst connect = require('connect')\nconst mimeType = require('mime')\n\nconst common = require('./middleware/common')\nconst runnerMiddleware = require('./middleware/runner')\nconst stopperMiddleware = require('./middleware/stopper')\nconst karmaMiddleware = require('./middleware/karma')\nconst sourceFilesMiddleware = require('./middleware/source_files')\nconst proxyMiddleware = require('./middleware/proxy')\n\nconst log = require('./logger').create('web-server')\n\nfunction createCustomHandler (customFileHandlers, config) {\n  return function (request, response, next) {\n    const handler = customFileHandlers.find((handler) => handler.urlRegex.test(request.url))\n    return handler\n      ? handler.handler(request, response, 'fake/static', 'fake/adapter', config.basePath, 'fake/root')\n      : next()\n  }\n}\n\ncreateCustomHandler.$inject = ['customFileHandlers', 'config']\n\nfunction createFilesPromise (emitter, fileList) {\n  // Set an empty list of files to avoid race issues with\n  // file_list_modified not having been emitted yet\n  let files = fileList.files\n  emitter.on('file_list_modified', (filesParam) => { files = filesParam })\n\n  return {\n    then (...args) {\n      return Promise.resolve(files).then(...args)\n    }\n  }\n}\n\nfunction createServeStaticFile (config) {\n  return common.createServeFile(fs, path.normalize(path.join(__dirname, '/../static')), config)\n}\ncreateServeStaticFile.$inject = ['config']\n\nfunction createServeFile (config) {\n  return common.createServeFile(fs, null, config)\n}\ncreateServeFile.$inject = ['config']\n\nfunction createWebServer (injector, config) {\n  const { mime = {} } = config\n  mimeType.define({ ...mime }, true)\n\n  const proxyMiddlewareInstance = injector.invoke(proxyMiddleware.create)\n\n  log.debug('Instantiating middleware')\n  const handler = connect()\n\n  if (config.beforeMiddleware) {\n    config.beforeMiddleware.forEach((middleware) => handler.use(injector.get('middleware:' + middleware)))\n  }\n\n  handler.use(injector.invoke(runnerMiddleware.create))\n  handler.use(injector.invoke(stopperMiddleware.create))\n  handler.use(injector.invoke(karmaMiddleware.create))\n  handler.use(injector.invoke(sourceFilesMiddleware.create))\n  // TODO(vojta): extract the proxy into a plugin\n  handler.use(proxyMiddlewareInstance)\n  // TODO(vojta): remove, this is only here because of karma-dart\n  // we need a better way of custom handlers\n  handler.use(injector.invoke(createCustomHandler))\n\n  if (config.middleware) {\n    config.middleware.forEach((middleware) => handler.use(injector.get('middleware:' + middleware)))\n  }\n\n  handler.use((request, response) => common.serve404(response, request.url))\n\n  let serverClass = http\n  const serverArguments = [handler]\n\n  if (config.protocol === 'https:') {\n    serverClass = https\n    serverArguments.unshift(config.httpsServerOptions || {})\n  }\n\n  if (config.httpModule) {\n    serverClass = config.httpModule\n  }\n\n  const server = serverClass.createServer.apply(null, serverArguments)\n\n  server.on('upgrade', function (req, socket, head) {\n    log.debug(`upgrade ${req.url}`)\n    proxyMiddlewareInstance.upgrade(req, socket, head)\n  })\n\n  return server\n}\n\ncreateWebServer.$inject = ['injector', 'config']\n\nmodule.exports = {\n  createWebServer,\n  createServeFile,\n  createServeStaticFile,\n  createFilesPromise\n}\n"]},"metadata":{},"sourceType":"script"}