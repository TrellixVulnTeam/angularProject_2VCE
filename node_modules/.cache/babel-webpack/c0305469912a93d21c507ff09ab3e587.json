{"ast":null,"code":"var annotate = function annotate() {\n  var args = Array.prototype.slice.call(arguments);\n  var fn = args.pop();\n  fn.$inject = args;\n  return fn;\n}; // Current limitations:\n// - can't put into \"function arg\" comments\n// function /* (no parenthesis like this) */ (){}\n// function abc( /* xx (no parenthesis like this) */ a, b) {}\n//\n// Just put the comment before function or inside:\n// /* (((this is fine))) */ function(a, b) {}\n// function abc(a) { /* (((this is fine))) */}\n\n\nvar FN_ARGS = /^function\\s*[^\\(]*\\(\\s*([^\\)]*)\\)/m;\nvar FN_ARG = /\\/\\*([^\\*]*)\\*\\//m;\n\nvar parse = function parse(fn) {\n  if (typeof fn !== 'function') {\n    throw new Error('Can not annotate \"' + fn + '\". Expected a function!');\n  }\n\n  var match = fn.toString().match(FN_ARGS);\n  return match[1] && match[1].split(',').map(function (arg) {\n    match = arg.match(FN_ARG);\n    return match ? match[1].trim() : arg.trim();\n  }) || [];\n};\n\nexports.annotate = annotate;\nexports.parse = parse;","map":{"version":3,"sources":["/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/di/lib/annotation.js"],"names":["annotate","args","Array","prototype","slice","call","arguments","fn","pop","$inject","FN_ARGS","FN_ARG","parse","Error","match","toString","split","map","arg","trim","exports"],"mappings":"AAAA,IAAIA,QAAQ,GAAG,SAAXA,QAAW,GAAW;AACxB,MAAIC,IAAI,GAAGC,KAAK,CAACC,SAAN,CAAgBC,KAAhB,CAAsBC,IAAtB,CAA2BC,SAA3B,CAAX;AACA,MAAIC,EAAE,GAAGN,IAAI,CAACO,GAAL,EAAT;AAEAD,EAAAA,EAAE,CAACE,OAAH,GAAaR,IAAb;AAEA,SAAOM,EAAP;AACD,CAPD,C,CAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,IAAIG,OAAO,GAAG,oCAAd;AACA,IAAIC,MAAM,GAAG,mBAAb;;AAEA,IAAIC,KAAK,GAAG,SAARA,KAAQ,CAASL,EAAT,EAAa;AACvB,MAAI,OAAOA,EAAP,KAAc,UAAlB,EAA8B;AAC5B,UAAM,IAAIM,KAAJ,CAAU,uBAAuBN,EAAvB,GAA4B,yBAAtC,CAAN;AACD;;AAED,MAAIO,KAAK,GAAGP,EAAE,CAACQ,QAAH,GAAcD,KAAd,CAAoBJ,OAApB,CAAZ;AACA,SAAOI,KAAK,CAAC,CAAD,CAAL,IAAYA,KAAK,CAAC,CAAD,CAAL,CAASE,KAAT,CAAe,GAAf,EAAoBC,GAApB,CAAwB,UAASC,GAAT,EAAc;AACvDJ,IAAAA,KAAK,GAAGI,GAAG,CAACJ,KAAJ,CAAUH,MAAV,CAAR;AACA,WAAOG,KAAK,GAAGA,KAAK,CAAC,CAAD,CAAL,CAASK,IAAT,EAAH,GAAqBD,GAAG,CAACC,IAAJ,EAAjC;AACD,GAHkB,CAAZ,IAGD,EAHN;AAID,CAVD;;AAaAC,OAAO,CAACpB,QAAR,GAAmBA,QAAnB;AACAoB,OAAO,CAACR,KAAR,GAAgBA,KAAhB","sourcesContent":["var annotate = function() {\n  var args = Array.prototype.slice.call(arguments);\n  var fn = args.pop();\n\n  fn.$inject = args;\n\n  return fn;\n};\n\n\n// Current limitations:\n// - can't put into \"function arg\" comments\n// function /* (no parenthesis like this) */ (){}\n// function abc( /* xx (no parenthesis like this) */ a, b) {}\n//\n// Just put the comment before function or inside:\n// /* (((this is fine))) */ function(a, b) {}\n// function abc(a) { /* (((this is fine))) */}\n\nvar FN_ARGS = /^function\\s*[^\\(]*\\(\\s*([^\\)]*)\\)/m;\nvar FN_ARG = /\\/\\*([^\\*]*)\\*\\//m;\n\nvar parse = function(fn) {\n  if (typeof fn !== 'function') {\n    throw new Error('Can not annotate \"' + fn + '\". Expected a function!');\n  }\n\n  var match = fn.toString().match(FN_ARGS);\n  return match[1] && match[1].split(',').map(function(arg) {\n    match = arg.match(FN_ARG);\n    return match ? match[1].trim() : arg.trim();\n  }) || [];\n};\n\n\nexports.annotate = annotate;\nexports.parse = parse;\n"]},"metadata":{},"sourceType":"script"}