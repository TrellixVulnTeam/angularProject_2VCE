{"ast":null,"code":"/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n(function (factory) {\n  if (typeof module === \"object\" && typeof module.exports === \"object\") {\n    var v = factory(require, exports);\n    if (v !== undefined) module.exports = v;\n  } else if (typeof define === \"function\" && define.amd) {\n    define(\"@angular/compiler/src/core\", [\"require\", \"exports\", \"tslib\", \"@angular/compiler/src/selector\"], factory);\n  }\n})(function (require, exports) {\n  \"use strict\";\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.parseSelectorToR3Selector = exports.MissingTranslationStrategy = exports.SecurityContext = exports.Type = exports.createHost = exports.createSkipSelf = exports.createSelf = exports.createOptional = exports.NO_ERRORS_SCHEMA = exports.CUSTOM_ELEMENTS_SCHEMA = exports.createInjectable = exports.createNgModule = exports.createHostListener = exports.createHostBinding = exports.createOutput = exports.createInput = exports.createPipe = exports.createComponent = exports.ChangeDetectionStrategy = exports.ViewEncapsulation = exports.createDirective = exports.createViewChild = exports.createViewChildren = exports.createContentChild = exports.createContentChildren = exports.emitDistinctChangesOnlyDefaultValue = exports.createAttribute = exports.createInjectionToken = exports.createInject = void 0;\n\n  var tslib_1 = require(\"tslib\"); // Attention:\n  // This file duplicates types and values from @angular/core\n  // so that we are able to make @angular/compiler independent of @angular/core.\n  // This is important to prevent a build cycle, as @angular/core needs to\n  // be compiled with the compiler.\n\n\n  var selector_1 = require(\"@angular/compiler/src/selector\");\n\n  exports.createInject = makeMetadataFactory('Inject', function (token) {\n    return {\n      token: token\n    };\n  });\n  exports.createInjectionToken = makeMetadataFactory('InjectionToken', function (desc) {\n    return {\n      _desc: desc,\n      Éµprov: undefined\n    };\n  });\n  exports.createAttribute = makeMetadataFactory('Attribute', function (attributeName) {\n    return {\n      attributeName: attributeName\n    };\n  }); // Stores the default value of `emitDistinctChangesOnly` when the `emitDistinctChangesOnly` is not\n  // explicitly set. This value will be changed to `true` in v12.\n  // TODO(misko): switch the default in v12 to `true`. See: packages/core/src/metadata/di.ts\n\n  exports.emitDistinctChangesOnlyDefaultValue = false;\n  exports.createContentChildren = makeMetadataFactory('ContentChildren', function (selector, data) {\n    if (data === void 0) {\n      data = {};\n    }\n\n    return tslib_1.__assign({\n      selector: selector,\n      first: false,\n      isViewQuery: false,\n      descendants: false,\n      emitDistinctChangesOnly: exports.emitDistinctChangesOnlyDefaultValue\n    }, data);\n  });\n  exports.createContentChild = makeMetadataFactory('ContentChild', function (selector, data) {\n    if (data === void 0) {\n      data = {};\n    }\n\n    return tslib_1.__assign({\n      selector: selector,\n      first: true,\n      isViewQuery: false,\n      descendants: true\n    }, data);\n  });\n  exports.createViewChildren = makeMetadataFactory('ViewChildren', function (selector, data) {\n    if (data === void 0) {\n      data = {};\n    }\n\n    return tslib_1.__assign({\n      selector: selector,\n      first: false,\n      isViewQuery: true,\n      descendants: true,\n      emitDistinctChangesOnly: exports.emitDistinctChangesOnlyDefaultValue\n    }, data);\n  });\n  exports.createViewChild = makeMetadataFactory('ViewChild', function (selector, data) {\n    return tslib_1.__assign({\n      selector: selector,\n      first: true,\n      isViewQuery: true,\n      descendants: true\n    }, data);\n  });\n  exports.createDirective = makeMetadataFactory('Directive', function (dir) {\n    if (dir === void 0) {\n      dir = {};\n    }\n\n    return dir;\n  });\n  var ViewEncapsulation;\n\n  (function (ViewEncapsulation) {\n    ViewEncapsulation[ViewEncapsulation[\"Emulated\"] = 0] = \"Emulated\"; // Historically the 1 value was for `Native` encapsulation which has been removed as of v11.\n\n    ViewEncapsulation[ViewEncapsulation[\"None\"] = 2] = \"None\";\n    ViewEncapsulation[ViewEncapsulation[\"ShadowDom\"] = 3] = \"ShadowDom\";\n  })(ViewEncapsulation = exports.ViewEncapsulation || (exports.ViewEncapsulation = {}));\n\n  var ChangeDetectionStrategy;\n\n  (function (ChangeDetectionStrategy) {\n    ChangeDetectionStrategy[ChangeDetectionStrategy[\"OnPush\"] = 0] = \"OnPush\";\n    ChangeDetectionStrategy[ChangeDetectionStrategy[\"Default\"] = 1] = \"Default\";\n  })(ChangeDetectionStrategy = exports.ChangeDetectionStrategy || (exports.ChangeDetectionStrategy = {}));\n\n  exports.createComponent = makeMetadataFactory('Component', function (c) {\n    if (c === void 0) {\n      c = {};\n    }\n\n    return tslib_1.__assign({\n      changeDetection: ChangeDetectionStrategy.Default\n    }, c);\n  });\n  exports.createPipe = makeMetadataFactory('Pipe', function (p) {\n    return tslib_1.__assign({\n      pure: true\n    }, p);\n  });\n  exports.createInput = makeMetadataFactory('Input', function (bindingPropertyName) {\n    return {\n      bindingPropertyName: bindingPropertyName\n    };\n  });\n  exports.createOutput = makeMetadataFactory('Output', function (bindingPropertyName) {\n    return {\n      bindingPropertyName: bindingPropertyName\n    };\n  });\n  exports.createHostBinding = makeMetadataFactory('HostBinding', function (hostPropertyName) {\n    return {\n      hostPropertyName: hostPropertyName\n    };\n  });\n  exports.createHostListener = makeMetadataFactory('HostListener', function (eventName, args) {\n    return {\n      eventName: eventName,\n      args: args\n    };\n  });\n  exports.createNgModule = makeMetadataFactory('NgModule', function (ngModule) {\n    return ngModule;\n  });\n  exports.createInjectable = makeMetadataFactory('Injectable', function (injectable) {\n    if (injectable === void 0) {\n      injectable = {};\n    }\n\n    return injectable;\n  });\n  exports.CUSTOM_ELEMENTS_SCHEMA = {\n    name: 'custom-elements'\n  };\n  exports.NO_ERRORS_SCHEMA = {\n    name: 'no-errors-schema'\n  };\n  exports.createOptional = makeMetadataFactory('Optional');\n  exports.createSelf = makeMetadataFactory('Self');\n  exports.createSkipSelf = makeMetadataFactory('SkipSelf');\n  exports.createHost = makeMetadataFactory('Host');\n  exports.Type = Function;\n  var SecurityContext;\n\n  (function (SecurityContext) {\n    SecurityContext[SecurityContext[\"NONE\"] = 0] = \"NONE\";\n    SecurityContext[SecurityContext[\"HTML\"] = 1] = \"HTML\";\n    SecurityContext[SecurityContext[\"STYLE\"] = 2] = \"STYLE\";\n    SecurityContext[SecurityContext[\"SCRIPT\"] = 3] = \"SCRIPT\";\n    SecurityContext[SecurityContext[\"URL\"] = 4] = \"URL\";\n    SecurityContext[SecurityContext[\"RESOURCE_URL\"] = 5] = \"RESOURCE_URL\";\n  })(SecurityContext = exports.SecurityContext || (exports.SecurityContext = {}));\n\n  var MissingTranslationStrategy;\n\n  (function (MissingTranslationStrategy) {\n    MissingTranslationStrategy[MissingTranslationStrategy[\"Error\"] = 0] = \"Error\";\n    MissingTranslationStrategy[MissingTranslationStrategy[\"Warning\"] = 1] = \"Warning\";\n    MissingTranslationStrategy[MissingTranslationStrategy[\"Ignore\"] = 2] = \"Ignore\";\n  })(MissingTranslationStrategy = exports.MissingTranslationStrategy || (exports.MissingTranslationStrategy = {}));\n\n  function makeMetadataFactory(name, props) {\n    // This must be declared as a function, not a fat arrow, so that ES2015 devmode produces code\n    // that works with the static_reflector.ts in the ViewEngine compiler.\n    // In particular, `_registerDecoratorOrConstructor` assumes that the value returned here can be\n    // new'ed.\n    function factory() {\n      var args = [];\n\n      for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n      }\n\n      var values = props ? props.apply(void 0, tslib_1.__spread(args)) : {};\n      return tslib_1.__assign({\n        ngMetadataName: name\n      }, values);\n    }\n\n    factory.isTypeOf = function (obj) {\n      return obj && obj.ngMetadataName === name;\n    };\n\n    factory.ngMetadataName = name;\n    return factory;\n  }\n\n  function parserSelectorToSimpleSelector(selector) {\n    var classes = selector.classNames && selector.classNames.length ? tslib_1.__spread([8\n    /* CLASS */\n    ], selector.classNames) : [];\n    var elementName = selector.element && selector.element !== '*' ? selector.element : '';\n    return tslib_1.__spread([elementName], selector.attrs, classes);\n  }\n\n  function parserSelectorToNegativeSelector(selector) {\n    var classes = selector.classNames && selector.classNames.length ? tslib_1.__spread([8\n    /* CLASS */\n    ], selector.classNames) : [];\n\n    if (selector.element) {\n      return tslib_1.__spread([1\n      /* NOT */\n      | 4\n      /* ELEMENT */\n      , selector.element], selector.attrs, classes);\n    } else if (selector.attrs.length) {\n      return tslib_1.__spread([1\n      /* NOT */\n      | 2\n      /* ATTRIBUTE */\n      ], selector.attrs, classes);\n    } else {\n      return selector.classNames && selector.classNames.length ? tslib_1.__spread([1\n      /* NOT */\n      | 8\n      /* CLASS */\n      ], selector.classNames) : [];\n    }\n  }\n\n  function parserSelectorToR3Selector(selector) {\n    var positive = parserSelectorToSimpleSelector(selector);\n    var negative = selector.notSelectors && selector.notSelectors.length ? selector.notSelectors.map(function (notSelector) {\n      return parserSelectorToNegativeSelector(notSelector);\n    }) : [];\n    return positive.concat.apply(positive, tslib_1.__spread(negative));\n  }\n\n  function parseSelectorToR3Selector(selector) {\n    return selector ? selector_1.CssSelector.parse(selector).map(parserSelectorToR3Selector) : [];\n  }\n\n  exports.parseSelectorToR3Selector = parseSelectorToR3Selector;\n});","map":{"version":3,"sources":["../../../../../../packages/compiler/src/core.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n// Attention:\n// This file duplicates types and values from @angular/core\n// so that we are able to make @angular/compiler independent of @angular/core.\n// This is important to prevent a build cycle, as @angular/core needs to\n// be compiled with the compiler.\n\nimport {CssSelector} from './selector';\n\nexport interface Inject {\n  token: any;\n}\nexport const createInject = makeMetadataFactory<Inject>('Inject', (token: any) => ({token}));\nexport const createInjectionToken = makeMetadataFactory<object>(\n    'InjectionToken', (desc: string) => ({_desc: desc, Éµprov: undefined}));\n\nexport interface Attribute {\n  attributeName: string;\n}\nexport const createAttribute =\n    makeMetadataFactory<Attribute>('Attribute', (attributeName: string) => ({attributeName}));\n\n// Stores the default value of `emitDistinctChangesOnly` when the `emitDistinctChangesOnly` is not\n// explicitly set. This value will be changed to `true` in v12.\n// TODO(misko): switch the default in v12 to `true`. See: packages/core/src/metadata/di.ts\nexport const emitDistinctChangesOnlyDefaultValue = false;\n\n\nexport interface Query {\n  descendants: boolean;\n  first: boolean;\n  read: any;\n  isViewQuery: boolean;\n  selector: any;\n  static?: boolean;\n  emitDistinctChangesOnly: boolean;\n}\n\nexport const createContentChildren = makeMetadataFactory<Query>(\n    'ContentChildren', (selector?: any, data: any = {}) => ({\n                         selector,\n                         first: false,\n                         isViewQuery: false,\n                         descendants: false,\n                         emitDistinctChangesOnly: emitDistinctChangesOnlyDefaultValue,\n                         ...data\n                       }));\nexport const createContentChild = makeMetadataFactory<Query>(\n    'ContentChild',\n    (selector?: any, data: any = {}) =>\n        ({selector, first: true, isViewQuery: false, descendants: true, ...data}));\nexport const createViewChildren = makeMetadataFactory<Query>(\n    'ViewChildren', (selector?: any, data: any = {}) => ({\n                      selector,\n                      first: false,\n                      isViewQuery: true,\n                      descendants: true,\n                      emitDistinctChangesOnly: emitDistinctChangesOnlyDefaultValue,\n                      ...data\n                    }));\nexport const createViewChild = makeMetadataFactory<Query>(\n    'ViewChild',\n    (selector: any, data: any) =>\n        ({selector, first: true, isViewQuery: true, descendants: true, ...data}));\n\nexport interface Directive {\n  selector?: string;\n  inputs?: string[];\n  outputs?: string[];\n  host?: {[key: string]: string};\n  providers?: Provider[];\n  exportAs?: string;\n  queries?: {[key: string]: any};\n  guards?: {[key: string]: any};\n}\nexport const createDirective =\n    makeMetadataFactory<Directive>('Directive', (dir: Directive = {}) => dir);\n\nexport interface Component extends Directive {\n  changeDetection?: ChangeDetectionStrategy;\n  viewProviders?: Provider[];\n  moduleId?: string;\n  templateUrl?: string;\n  template?: string;\n  styleUrls?: string[];\n  styles?: string[];\n  animations?: any[];\n  encapsulation?: ViewEncapsulation;\n  interpolation?: [string, string];\n  entryComponents?: Array<Type|any[]>;\n  preserveWhitespaces?: boolean;\n}\nexport enum ViewEncapsulation {\n  Emulated = 0,\n  // Historically the 1 value was for `Native` encapsulation which has been removed as of v11.\n  None = 2,\n  ShadowDom = 3\n}\n\nexport enum ChangeDetectionStrategy {\n  OnPush = 0,\n  Default = 1\n}\n\nexport const createComponent = makeMetadataFactory<Component>(\n    'Component', (c: Component = {}) => ({changeDetection: ChangeDetectionStrategy.Default, ...c}));\n\nexport interface Pipe {\n  name: string;\n  pure?: boolean;\n}\nexport const createPipe = makeMetadataFactory<Pipe>('Pipe', (p: Pipe) => ({pure: true, ...p}));\n\nexport interface Input {\n  bindingPropertyName?: string;\n}\nexport const createInput =\n    makeMetadataFactory<Input>('Input', (bindingPropertyName?: string) => ({bindingPropertyName}));\n\nexport interface Output {\n  bindingPropertyName?: string;\n}\nexport const createOutput = makeMetadataFactory<Output>(\n    'Output', (bindingPropertyName?: string) => ({bindingPropertyName}));\n\nexport interface HostBinding {\n  hostPropertyName?: string;\n}\nexport const createHostBinding = makeMetadataFactory<HostBinding>(\n    'HostBinding', (hostPropertyName?: string) => ({hostPropertyName}));\n\nexport interface HostListener {\n  eventName?: string;\n  args?: string[];\n}\nexport const createHostListener = makeMetadataFactory<HostListener>(\n    'HostListener', (eventName?: string, args?: string[]) => ({eventName, args}));\n\nexport interface NgModule {\n  providers?: Provider[];\n  declarations?: Array<Type|any[]>;\n  imports?: Array<Type|ModuleWithProviders|any[]>;\n  exports?: Array<Type|any[]>;\n  entryComponents?: Array<Type|any[]>;\n  bootstrap?: Array<Type|any[]>;\n  schemas?: Array<SchemaMetadata|any[]>;\n  id?: string;\n}\nexport const createNgModule =\n    makeMetadataFactory<NgModule>('NgModule', (ngModule: NgModule) => ngModule);\n\nexport interface ModuleWithProviders {\n  ngModule: Type;\n  providers?: Provider[];\n}\nexport interface Injectable {\n  providedIn?: Type|'root'|any;\n  useClass?: Type|any;\n  useExisting?: Type|any;\n  useValue?: any;\n  useFactory?: Type|any;\n  deps?: Array<Type|any[]>;\n}\nexport const createInjectable =\n    makeMetadataFactory('Injectable', (injectable: Injectable = {}) => injectable);\nexport interface SchemaMetadata {\n  name: string;\n}\n\nexport const CUSTOM_ELEMENTS_SCHEMA: SchemaMetadata = {\n  name: 'custom-elements'\n};\n\nexport const NO_ERRORS_SCHEMA: SchemaMetadata = {\n  name: 'no-errors-schema'\n};\n\nexport const createOptional = makeMetadataFactory('Optional');\nexport const createSelf = makeMetadataFactory('Self');\nexport const createSkipSelf = makeMetadataFactory('SkipSelf');\nexport const createHost = makeMetadataFactory('Host');\n\nexport interface Type extends Function {\n  new(...args: any[]): any;\n}\nexport const Type = Function;\n\nexport enum SecurityContext {\n  NONE = 0,\n  HTML = 1,\n  STYLE = 2,\n  SCRIPT = 3,\n  URL = 4,\n  RESOURCE_URL = 5,\n}\n\nexport type Provider = any;\n\nexport const enum NodeFlags {\n  None = 0,\n  TypeElement = 1 << 0,\n  TypeText = 1 << 1,\n  ProjectedTemplate = 1 << 2,\n  CatRenderNode = TypeElement | TypeText,\n  TypeNgContent = 1 << 3,\n  TypePipe = 1 << 4,\n  TypePureArray = 1 << 5,\n  TypePureObject = 1 << 6,\n  TypePurePipe = 1 << 7,\n  CatPureExpression = TypePureArray | TypePureObject | TypePurePipe,\n  TypeValueProvider = 1 << 8,\n  TypeClassProvider = 1 << 9,\n  TypeFactoryProvider = 1 << 10,\n  TypeUseExistingProvider = 1 << 11,\n  LazyProvider = 1 << 12,\n  PrivateProvider = 1 << 13,\n  TypeDirective = 1 << 14,\n  Component = 1 << 15,\n  CatProviderNoDirective =\n      TypeValueProvider | TypeClassProvider | TypeFactoryProvider | TypeUseExistingProvider,\n  CatProvider = CatProviderNoDirective | TypeDirective,\n  OnInit = 1 << 16,\n  OnDestroy = 1 << 17,\n  DoCheck = 1 << 18,\n  OnChanges = 1 << 19,\n  AfterContentInit = 1 << 20,\n  AfterContentChecked = 1 << 21,\n  AfterViewInit = 1 << 22,\n  AfterViewChecked = 1 << 23,\n  EmbeddedViews = 1 << 24,\n  ComponentView = 1 << 25,\n  TypeContentQuery = 1 << 26,\n  TypeViewQuery = 1 << 27,\n  StaticQuery = 1 << 28,\n  DynamicQuery = 1 << 29,\n  TypeModuleProvider = 1 << 30,\n  EmitDistinctChangesOnly = 1 << 31,\n  CatQuery = TypeContentQuery | TypeViewQuery,\n\n  // mutually exclusive values...\n  Types = CatRenderNode | TypeNgContent | TypePipe | CatPureExpression | CatProvider | CatQuery\n}\n\nexport const enum DepFlags {\n  None = 0,\n  SkipSelf = 1 << 0,\n  Optional = 1 << 1,\n  Self = 1 << 2,\n  Value = 1 << 3,\n}\n\n/**\n * Injection flags for DI.\n */\nexport const enum InjectFlags {\n  Default = 0,\n\n  /**\n   * Specifies that an injector should retrieve a dependency from any injector until reaching the\n   * host element of the current component. (Only used with Element Injector)\n   */\n  Host = 1 << 0,\n  /** Don't descend into ancestors of the node requesting injection. */\n  Self = 1 << 1,\n  /** Skip the node that is requesting injection. */\n  SkipSelf = 1 << 2,\n  /** Inject `defaultValue` instead if token not found. */\n  Optional = 1 << 3,\n}\n\nexport const enum ArgumentType {\n  Inline = 0,\n  Dynamic = 1\n}\n\nexport const enum BindingFlags {\n  TypeElementAttribute = 1 << 0,\n  TypeElementClass = 1 << 1,\n  TypeElementStyle = 1 << 2,\n  TypeProperty = 1 << 3,\n  SyntheticProperty = 1 << 4,\n  SyntheticHostProperty = 1 << 5,\n  CatSyntheticProperty = SyntheticProperty | SyntheticHostProperty,\n\n  // mutually exclusive values...\n  Types = TypeElementAttribute | TypeElementClass | TypeElementStyle | TypeProperty\n}\n\nexport const enum QueryBindingType {\n  First = 0,\n  All = 1\n}\n\nexport const enum QueryValueType {\n  ElementRef = 0,\n  RenderElement = 1,\n  TemplateRef = 2,\n  ViewContainerRef = 3,\n  Provider = 4\n}\n\nexport const enum ViewFlags {\n  None = 0,\n  OnPush = 1 << 1,\n}\n\nexport enum MissingTranslationStrategy {\n  Error = 0,\n  Warning = 1,\n  Ignore = 2,\n}\n\nexport interface MetadataFactory<T> {\n  (...args: any[]): T;\n  isTypeOf(obj: any): obj is T;\n  ngMetadataName: string;\n}\n\nfunction makeMetadataFactory<T>(name: string, props?: (...args: any[]) => T): MetadataFactory<T> {\n  // This must be declared as a function, not a fat arrow, so that ES2015 devmode produces code\n  // that works with the static_reflector.ts in the ViewEngine compiler.\n  // In particular, `_registerDecoratorOrConstructor` assumes that the value returned here can be\n  // new'ed.\n  function factory(...args: any[]) {\n    const values = props ? props(...args) : {};\n    return {\n      ngMetadataName: name,\n      ...values,\n    };\n  }\n  (factory as any).isTypeOf = (obj: any) => obj && obj.ngMetadataName === name;\n  (factory as any).ngMetadataName = name;\n  return factory as any;\n}\n\nexport interface Route {\n  children?: Route[];\n  loadChildren?: string|Type|any;\n}\n\n/**\n * Flags used to generate R3-style CSS Selectors. They are pasted from\n * core/src/render3/projection.ts because they cannot be referenced directly.\n */\nexport const enum SelectorFlags {\n  /** Indicates this is the beginning of a new negative selector */\n  NOT = 0b0001,\n\n  /** Mode for matching attributes */\n  ATTRIBUTE = 0b0010,\n\n  /** Mode for matching tag names */\n  ELEMENT = 0b0100,\n\n  /** Mode for matching class names */\n  CLASS = 0b1000,\n}\n\n// These are a copy the CSS types from core/src/render3/interfaces/projection.ts\n// They are duplicated here as they cannot be directly referenced from core.\nexport type R3CssSelector = (string|SelectorFlags)[];\nexport type R3CssSelectorList = R3CssSelector[];\n\nfunction parserSelectorToSimpleSelector(selector: CssSelector): R3CssSelector {\n  const classes = selector.classNames && selector.classNames.length ?\n      [SelectorFlags.CLASS, ...selector.classNames] :\n      [];\n  const elementName = selector.element && selector.element !== '*' ? selector.element : '';\n  return [elementName, ...selector.attrs, ...classes];\n}\n\nfunction parserSelectorToNegativeSelector(selector: CssSelector): R3CssSelector {\n  const classes = selector.classNames && selector.classNames.length ?\n      [SelectorFlags.CLASS, ...selector.classNames] :\n      [];\n\n  if (selector.element) {\n    return [\n      SelectorFlags.NOT | SelectorFlags.ELEMENT, selector.element, ...selector.attrs, ...classes\n    ];\n  } else if (selector.attrs.length) {\n    return [SelectorFlags.NOT | SelectorFlags.ATTRIBUTE, ...selector.attrs, ...classes];\n  } else {\n    return selector.classNames && selector.classNames.length ?\n        [SelectorFlags.NOT | SelectorFlags.CLASS, ...selector.classNames] :\n        [];\n  }\n}\n\nfunction parserSelectorToR3Selector(selector: CssSelector): R3CssSelector {\n  const positive = parserSelectorToSimpleSelector(selector);\n\n  const negative: R3CssSelectorList = selector.notSelectors && selector.notSelectors.length ?\n      selector.notSelectors.map(notSelector => parserSelectorToNegativeSelector(notSelector)) :\n      [];\n\n  return positive.concat(...negative);\n}\n\nexport function parseSelectorToR3Selector(selector: string|null): R3CssSelectorList {\n  return selector ? CssSelector.parse(selector).map(parserSelectorToR3Selector) : [];\n}\n\n// Pasted from render3/interfaces/definition since it cannot be referenced directly\n/**\n * Flags passed into template functions to determine which blocks (i.e. creation, update)\n * should be executed.\n *\n * Typically, a template runs both the creation block and the update block on initialization and\n * subsequent runs only execute the update block. However, dynamically created views require that\n * the creation block be executed separately from the update block (for backwards compat).\n */\nexport const enum RenderFlags {\n  /* Whether to run the creation block (e.g. create elements and directives) */\n  Create = 0b01,\n\n  /* Whether to run the update block (e.g. refresh bindings) */\n  Update = 0b10\n}\n\n// Pasted from render3/interfaces/node.ts\n/**\n * A set of marker values to be used in the attributes arrays. These markers indicate that some\n * items are not regular attributes and the processing should be adapted accordingly.\n */\nexport const enum AttributeMarker {\n  /**\n   * Marker indicates that the following 3 values in the attributes array are:\n   * namespaceUri, attributeName, attributeValue\n   * in that order.\n   */\n  NamespaceURI = 0,\n\n  /**\n   * Signals class declaration.\n   *\n   * Each value following `Classes` designates a class name to include on the element.\n   * ## Example:\n   *\n   * Given:\n   * ```\n   * <div class=\"foo bar baz\">...<d/vi>\n   * ```\n   *\n   * the generated code is:\n   * ```\n   * var _c1 = [AttributeMarker.Classes, 'foo', 'bar', 'baz'];\n   * ```\n   */\n  Classes = 1,\n\n  /**\n   * Signals style declaration.\n   *\n   * Each pair of values following `Styles` designates a style name and value to include on the\n   * element.\n   * ## Example:\n   *\n   * Given:\n   * ```\n   * <div style=\"width:100px; height:200px; color:red\">...</div>\n   * ```\n   *\n   * the generated code is:\n   * ```\n   * var _c1 = [AttributeMarker.Styles, 'width', '100px', 'height'. '200px', 'color', 'red'];\n   * ```\n   */\n  Styles = 2,\n\n  /**\n   * Signals that the following attribute names were extracted from input or output bindings.\n   *\n   * For example, given the following HTML:\n   *\n   * ```\n   * <div moo=\"car\" [foo]=\"exp\" (bar)=\"doSth()\">\n   * ```\n   *\n   * the generated code is:\n   *\n   * ```\n   * var _c1 = ['moo', 'car', AttributeMarker.Bindings, 'foo', 'bar'];\n   * ```\n   */\n  Bindings = 3,\n\n  /**\n   * Signals that the following attribute names were hoisted from an inline-template declaration.\n   *\n   * For example, given the following HTML:\n   *\n   * ```\n   * <div *ngFor=\"let value of values; trackBy:trackBy\" dirA [dirB]=\"value\">\n   * ```\n   *\n   * the generated code for the `template()` instruction would include:\n   *\n   * ```\n   * ['dirA', '', AttributeMarker.Bindings, 'dirB', AttributeMarker.Template, 'ngFor', 'ngForOf',\n   * 'ngForTrackBy', 'let-value']\n   * ```\n   *\n   * while the generated code for the `element()` instruction inside the template function would\n   * include:\n   *\n   * ```\n   * ['dirA', '', AttributeMarker.Bindings, 'dirB']\n   * ```\n   */\n  Template = 4,\n\n  /**\n   * Signals that the following attribute is `ngProjectAs` and its value is a parsed `CssSelector`.\n   *\n   * For example, given the following HTML:\n   *\n   * ```\n   * <h1 attr=\"value\" ngProjectAs=\"[title]\">\n   * ```\n   *\n   * the generated code for the `element()` instruction would include:\n   *\n   * ```\n   * ['attr', 'value', AttributeMarker.ProjectAs, ['', 'title', '']]\n   * ```\n   */\n  ProjectAs = 5,\n\n  /**\n   * Signals that the following attribute will be translated by runtime i18n\n   *\n   * For example, given the following HTML:\n   *\n   * ```\n   * <div moo=\"car\" foo=\"value\" i18n-foo [bar]=\"binding\" i18n-bar>\n   * ```\n   *\n   * the generated code is:\n   *\n   * ```\n   * var _c1 = ['moo', 'car', AttributeMarker.I18n, 'foo', 'bar'];\n   */\n  I18n = 6,\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}