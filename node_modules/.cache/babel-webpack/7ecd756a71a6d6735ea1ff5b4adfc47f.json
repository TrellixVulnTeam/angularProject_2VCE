{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getCleanHelperName = exports.isHelperName = exports.hasPureComment = exports.addPureComment = exports.collectDeepNodes = void 0;\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nvar tslib = require(\"tslib\");\n\nvar ts = require(\"typescript\");\n\nvar pureFunctionComment = '@__PURE__'; // We include only exports that start with '__' because tslib helpers\n// all start with a suffix of two underscores.\n\nvar tslibHelpers = new Set(Object.keys(tslib).filter(function (h) {\n  return h.startsWith('__');\n})); // Find all nodes from the AST in the subtree of node of SyntaxKind kind.\n\nfunction collectDeepNodes(node, kind) {\n  var nodes = [];\n\n  var helper = function helper(child) {\n    if (child.kind === kind) {\n      nodes.push(child);\n    }\n\n    ts.forEachChild(child, helper);\n  };\n\n  ts.forEachChild(node, helper);\n  return nodes;\n}\n\nexports.collectDeepNodes = collectDeepNodes;\n\nfunction addPureComment(node) {\n  return ts.addSyntheticLeadingComment(node, ts.SyntaxKind.MultiLineCommentTrivia, pureFunctionComment, false);\n}\n\nexports.addPureComment = addPureComment;\n\nfunction hasPureComment(node) {\n  if (!node) {\n    return false;\n  }\n\n  var leadingComment = ts.getSyntheticLeadingComments(node);\n  return !!leadingComment && leadingComment.some(function (comment) {\n    return comment.text === pureFunctionComment;\n  });\n}\n\nexports.hasPureComment = hasPureComment;\n\nfunction isHelperName(name) {\n  return tslibHelpers.has(name);\n}\n\nexports.isHelperName = isHelperName;\n/**\n * In FESM's when not using `importHelpers` there might be multiple in the same file.\n  @example\n  ```\n  var __decorate$1 = '';\n  var __decorate$2 = '';\n  ```\n * @returns Helper name without the '$' and number suffix or `undefined` if it's not a helper.\n */\n\nfunction getCleanHelperName(name) {\n  var parts = name.split('$');\n  var cleanName = parts[0];\n\n  if (parts.length > 2 || parts.length === 2 && isNaN(+parts[1])) {\n    return undefined;\n  }\n\n  return isHelperName(cleanName) ? cleanName : undefined;\n}\n\nexports.getCleanHelperName = getCleanHelperName;","map":{"version":3,"sources":["/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@angular-devkit/build-optimizer/src/helpers/ast-utils.js"],"names":["Object","defineProperty","exports","value","getCleanHelperName","isHelperName","hasPureComment","addPureComment","collectDeepNodes","tslib","require","ts","pureFunctionComment","tslibHelpers","Set","keys","filter","h","startsWith","node","kind","nodes","helper","child","push","forEachChild","addSyntheticLeadingComment","SyntaxKind","MultiLineCommentTrivia","leadingComment","getSyntheticLeadingComments","some","comment","text","name","has","parts","split","cleanName","length","isNaN","undefined"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,kBAAR,GAA6BF,OAAO,CAACG,YAAR,GAAuBH,OAAO,CAACI,cAAR,GAAyBJ,OAAO,CAACK,cAAR,GAAyBL,OAAO,CAACM,gBAAR,GAA2B,KAAK,CAAtI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAMC,KAAK,GAAGC,OAAO,CAAC,OAAD,CAArB;;AACA,IAAMC,EAAE,GAAGD,OAAO,CAAC,YAAD,CAAlB;;AACA,IAAME,mBAAmB,GAAG,WAA5B,C,CACA;AACA;;AACA,IAAMC,YAAY,GAAG,IAAIC,GAAJ,CAAQd,MAAM,CAACe,IAAP,CAAYN,KAAZ,EAAmBO,MAAnB,CAA0B,UAAAC,CAAC;AAAA,SAAIA,CAAC,CAACC,UAAF,CAAa,IAAb,CAAJ;AAAA,CAA3B,CAAR,CAArB,C,CACA;;AACA,SAASV,gBAAT,CAA0BW,IAA1B,EAAgCC,IAAhC,EAAsC;AAClC,MAAMC,KAAK,GAAG,EAAd;;AACA,MAAMC,MAAM,GAAG,SAATA,MAAS,CAACC,KAAD,EAAW;AACtB,QAAIA,KAAK,CAACH,IAAN,KAAeA,IAAnB,EAAyB;AACrBC,MAAAA,KAAK,CAACG,IAAN,CAAWD,KAAX;AACH;;AACDZ,IAAAA,EAAE,CAACc,YAAH,CAAgBF,KAAhB,EAAuBD,MAAvB;AACH,GALD;;AAMAX,EAAAA,EAAE,CAACc,YAAH,CAAgBN,IAAhB,EAAsBG,MAAtB;AACA,SAAOD,KAAP;AACH;;AACDnB,OAAO,CAACM,gBAAR,GAA2BA,gBAA3B;;AACA,SAASD,cAAT,CAAwBY,IAAxB,EAA8B;AAC1B,SAAOR,EAAE,CAACe,0BAAH,CAA8BP,IAA9B,EAAoCR,EAAE,CAACgB,UAAH,CAAcC,sBAAlD,EAA0EhB,mBAA1E,EAA+F,KAA/F,CAAP;AACH;;AACDV,OAAO,CAACK,cAAR,GAAyBA,cAAzB;;AACA,SAASD,cAAT,CAAwBa,IAAxB,EAA8B;AAC1B,MAAI,CAACA,IAAL,EAAW;AACP,WAAO,KAAP;AACH;;AACD,MAAMU,cAAc,GAAGlB,EAAE,CAACmB,2BAAH,CAA+BX,IAA/B,CAAvB;AACA,SAAO,CAAC,CAACU,cAAF,IAAoBA,cAAc,CAACE,IAAf,CAAoB,UAAAC,OAAO;AAAA,WAAIA,OAAO,CAACC,IAAR,KAAiBrB,mBAArB;AAAA,GAA3B,CAA3B;AACH;;AACDV,OAAO,CAACI,cAAR,GAAyBA,cAAzB;;AACA,SAASD,YAAT,CAAsB6B,IAAtB,EAA4B;AACxB,SAAOrB,YAAY,CAACsB,GAAb,CAAiBD,IAAjB,CAAP;AACH;;AACDhC,OAAO,CAACG,YAAR,GAAuBA,YAAvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASD,kBAAT,CAA4B8B,IAA5B,EAAkC;AAC9B,MAAME,KAAK,GAAGF,IAAI,CAACG,KAAL,CAAW,GAAX,CAAd;AACA,MAAMC,SAAS,GAAGF,KAAK,CAAC,CAAD,CAAvB;;AACA,MAAIA,KAAK,CAACG,MAAN,GAAe,CAAf,IAAqBH,KAAK,CAACG,MAAN,KAAiB,CAAjB,IAAsBC,KAAK,CAAC,CAACJ,KAAK,CAAC,CAAD,CAAP,CAApD,EAAkE;AAC9D,WAAOK,SAAP;AACH;;AACD,SAAOpC,YAAY,CAACiC,SAAD,CAAZ,GAA0BA,SAA1B,GAAsCG,SAA7C;AACH;;AACDvC,OAAO,CAACE,kBAAR,GAA6BA,kBAA7B","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getCleanHelperName = exports.isHelperName = exports.hasPureComment = exports.addPureComment = exports.collectDeepNodes = void 0;\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst tslib = require(\"tslib\");\nconst ts = require(\"typescript\");\nconst pureFunctionComment = '@__PURE__';\n// We include only exports that start with '__' because tslib helpers\n// all start with a suffix of two underscores.\nconst tslibHelpers = new Set(Object.keys(tslib).filter(h => h.startsWith('__')));\n// Find all nodes from the AST in the subtree of node of SyntaxKind kind.\nfunction collectDeepNodes(node, kind) {\n    const nodes = [];\n    const helper = (child) => {\n        if (child.kind === kind) {\n            nodes.push(child);\n        }\n        ts.forEachChild(child, helper);\n    };\n    ts.forEachChild(node, helper);\n    return nodes;\n}\nexports.collectDeepNodes = collectDeepNodes;\nfunction addPureComment(node) {\n    return ts.addSyntheticLeadingComment(node, ts.SyntaxKind.MultiLineCommentTrivia, pureFunctionComment, false);\n}\nexports.addPureComment = addPureComment;\nfunction hasPureComment(node) {\n    if (!node) {\n        return false;\n    }\n    const leadingComment = ts.getSyntheticLeadingComments(node);\n    return !!leadingComment && leadingComment.some(comment => comment.text === pureFunctionComment);\n}\nexports.hasPureComment = hasPureComment;\nfunction isHelperName(name) {\n    return tslibHelpers.has(name);\n}\nexports.isHelperName = isHelperName;\n/**\n * In FESM's when not using `importHelpers` there might be multiple in the same file.\n  @example\n  ```\n  var __decorate$1 = '';\n  var __decorate$2 = '';\n  ```\n * @returns Helper name without the '$' and number suffix or `undefined` if it's not a helper.\n */\nfunction getCleanHelperName(name) {\n    const parts = name.split('$');\n    const cleanName = parts[0];\n    if (parts.length > 2 || (parts.length === 2 && isNaN(+parts[1]))) {\n        return undefined;\n    }\n    return isHelperName(cleanName) ? cleanName : undefined;\n}\nexports.getCleanHelperName = getCleanHelperName;\n"]},"metadata":{},"sourceType":"script"}