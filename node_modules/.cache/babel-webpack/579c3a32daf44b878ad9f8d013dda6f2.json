{"ast":null,"code":"\"use strict\";\n\nvar execa = require(\"execa\");\n\nvar ipRegex = require(\"ip-regex\");\n\nvar gwArgs = \"path Win32_NetworkAdapterConfiguration where IPEnabled=true get DefaultIPGateway,Index /format:table\".split(\" \");\nvar ifArgs = \"path Win32_NetworkAdapter get Index,NetConnectionID /format:table\".split(\" \");\n\nvar parse = function parse(gwTable, ifTable, family) {\n  var gateway, gwid, result;\n  (gwTable || \"\").trim().split(\"\\n\").splice(1).some(function (line) {\n    var results = line.trim().split(/} +/) || [];\n    var gw = results[0];\n    var id = results[1];\n    gateway = (ipRegex[family]().exec((gw || \"\").trim()) || [])[0];\n\n    if (gateway) {\n      gwid = id;\n      return true;\n    }\n  });\n  (ifTable || \"\").trim().split(\"\\n\").splice(1).some(function (line) {\n    var i = line.indexOf(\" \");\n    var id = line.substr(0, i).trim();\n    var name = line.substr(i + 1).trim();\n\n    if (id === gwid) {\n      result = {\n        gateway: gateway,\n        interface: name ? name : null\n      };\n      return true;\n    }\n  });\n\n  if (!result) {\n    throw new Error(\"Unable to determine default gateway\");\n  }\n\n  return result;\n};\n\nvar spawnOpts = {\n  windowsHide: true\n};\n\nvar promise = function promise(family) {\n  return Promise.all([execa.stdout(\"wmic\", gwArgs, spawnOpts), execa.stdout(\"wmic\", ifArgs, spawnOpts)]).then(function (results) {\n    var gwTable = results[0];\n    var ifTable = results[1];\n    return parse(gwTable, ifTable, family);\n  });\n};\n\nvar sync = function sync(family) {\n  var gwTable = execa.sync(\"wmic\", gwArgs, spawnOpts).stdout;\n  var ifTable = execa.sync(\"wmic\", ifArgs, spawnOpts).stdout;\n  return parse(gwTable, ifTable, family);\n};\n\nmodule.exports.v4 = function () {\n  return promise(\"v4\");\n};\n\nmodule.exports.v6 = function () {\n  return promise(\"v6\");\n};\n\nmodule.exports.v4.sync = function () {\n  return sync(\"v4\");\n};\n\nmodule.exports.v6.sync = function () {\n  return sync(\"v6\");\n};","map":{"version":3,"sources":["/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/default-gateway/win32.js"],"names":["execa","require","ipRegex","gwArgs","split","ifArgs","parse","gwTable","ifTable","family","gateway","gwid","result","trim","splice","some","line","results","gw","id","exec","i","indexOf","substr","name","interface","Error","spawnOpts","windowsHide","promise","Promise","all","stdout","then","sync","module","exports","v4","v6"],"mappings":"AAAA;;AAEA,IAAMA,KAAK,GAAGC,OAAO,CAAC,OAAD,CAArB;;AACA,IAAMC,OAAO,GAAGD,OAAO,CAAC,UAAD,CAAvB;;AAEA,IAAME,MAAM,GAAG,uGAAuGC,KAAvG,CAA6G,GAA7G,CAAf;AACA,IAAMC,MAAM,GAAG,oEAAoED,KAApE,CAA0E,GAA1E,CAAf;;AAEA,IAAME,KAAK,GAAG,SAARA,KAAQ,CAACC,OAAD,EAAUC,OAAV,EAAmBC,MAAnB,EAA8B;AAC1C,MAAIC,OAAJ,EAAaC,IAAb,EAAmBC,MAAnB;AAEA,GAACL,OAAO,IAAI,EAAZ,EAAgBM,IAAhB,GAAuBT,KAAvB,CAA6B,IAA7B,EAAmCU,MAAnC,CAA0C,CAA1C,EAA6CC,IAA7C,CAAkD,UAAAC,IAAI,EAAI;AACxD,QAAMC,OAAO,GAAGD,IAAI,CAACH,IAAL,GAAYT,KAAZ,CAAkB,KAAlB,KAA4B,EAA5C;AACA,QAAMc,EAAE,GAAGD,OAAO,CAAC,CAAD,CAAlB;AACA,QAAME,EAAE,GAAGF,OAAO,CAAC,CAAD,CAAlB;AACAP,IAAAA,OAAO,GAAG,CAACR,OAAO,CAACO,MAAD,CAAP,GAAkBW,IAAlB,CAAuB,CAACF,EAAE,IAAI,EAAP,EAAWL,IAAX,EAAvB,KAA6C,EAA9C,EAAkD,CAAlD,CAAV;;AACA,QAAIH,OAAJ,EAAa;AACXC,MAAAA,IAAI,GAAGQ,EAAP;AACA,aAAO,IAAP;AACD;AACF,GATD;AAWA,GAACX,OAAO,IAAI,EAAZ,EAAgBK,IAAhB,GAAuBT,KAAvB,CAA6B,IAA7B,EAAmCU,MAAnC,CAA0C,CAA1C,EAA6CC,IAA7C,CAAkD,UAAAC,IAAI,EAAI;AACxD,QAAMK,CAAC,GAAGL,IAAI,CAACM,OAAL,CAAa,GAAb,CAAV;AACA,QAAMH,EAAE,GAAGH,IAAI,CAACO,MAAL,CAAY,CAAZ,EAAeF,CAAf,EAAkBR,IAAlB,EAAX;AACA,QAAMW,IAAI,GAAGR,IAAI,CAACO,MAAL,CAAYF,CAAC,GAAG,CAAhB,EAAmBR,IAAnB,EAAb;;AACA,QAAIM,EAAE,KAAKR,IAAX,EAAiB;AACfC,MAAAA,MAAM,GAAG;AAACF,QAAAA,OAAO,EAAPA,OAAD;AAAUe,QAAAA,SAAS,EAAED,IAAI,GAAGA,IAAH,GAAU;AAAnC,OAAT;AACA,aAAO,IAAP;AACD;AACF,GARD;;AAUA,MAAI,CAACZ,MAAL,EAAa;AACX,UAAM,IAAIc,KAAJ,CAAU,qCAAV,CAAN;AACD;;AAED,SAAOd,MAAP;AACD,CA7BD;;AA+BA,IAAMe,SAAS,GAAG;AAChBC,EAAAA,WAAW,EAAE;AADG,CAAlB;;AAIA,IAAMC,OAAO,GAAG,SAAVA,OAAU,CAAApB,MAAM,EAAI;AACxB,SAAOqB,OAAO,CAACC,GAAR,CAAY,CACjB/B,KAAK,CAACgC,MAAN,CAAa,MAAb,EAAqB7B,MAArB,EAA6BwB,SAA7B,CADiB,EAEjB3B,KAAK,CAACgC,MAAN,CAAa,MAAb,EAAqB3B,MAArB,EAA6BsB,SAA7B,CAFiB,CAAZ,EAGJM,IAHI,CAGC,UAAAhB,OAAO,EAAI;AACjB,QAAMV,OAAO,GAAGU,OAAO,CAAC,CAAD,CAAvB;AACA,QAAMT,OAAO,GAAGS,OAAO,CAAC,CAAD,CAAvB;AAEA,WAAOX,KAAK,CAACC,OAAD,EAAUC,OAAV,EAAmBC,MAAnB,CAAZ;AACD,GARM,CAAP;AASD,CAVD;;AAYA,IAAMyB,IAAI,GAAG,SAAPA,IAAO,CAAAzB,MAAM,EAAI;AACrB,MAAMF,OAAO,GAAGP,KAAK,CAACkC,IAAN,CAAW,MAAX,EAAmB/B,MAAnB,EAA2BwB,SAA3B,EAAsCK,MAAtD;AACA,MAAMxB,OAAO,GAAGR,KAAK,CAACkC,IAAN,CAAW,MAAX,EAAmB7B,MAAnB,EAA2BsB,SAA3B,EAAsCK,MAAtD;AAEA,SAAO1B,KAAK,CAACC,OAAD,EAAUC,OAAV,EAAmBC,MAAnB,CAAZ;AACD,CALD;;AAOA0B,MAAM,CAACC,OAAP,CAAeC,EAAf,GAAoB;AAAA,SAAMR,OAAO,CAAC,IAAD,CAAb;AAAA,CAApB;;AACAM,MAAM,CAACC,OAAP,CAAeE,EAAf,GAAoB;AAAA,SAAMT,OAAO,CAAC,IAAD,CAAb;AAAA,CAApB;;AAEAM,MAAM,CAACC,OAAP,CAAeC,EAAf,CAAkBH,IAAlB,GAAyB;AAAA,SAAMA,IAAI,CAAC,IAAD,CAAV;AAAA,CAAzB;;AACAC,MAAM,CAACC,OAAP,CAAeE,EAAf,CAAkBJ,IAAlB,GAAyB;AAAA,SAAMA,IAAI,CAAC,IAAD,CAAV;AAAA,CAAzB","sourcesContent":["\"use strict\";\n\nconst execa = require(\"execa\");\nconst ipRegex = require(\"ip-regex\");\n\nconst gwArgs = \"path Win32_NetworkAdapterConfiguration where IPEnabled=true get DefaultIPGateway,Index /format:table\".split(\" \");\nconst ifArgs = \"path Win32_NetworkAdapter get Index,NetConnectionID /format:table\".split(\" \");\n\nconst parse = (gwTable, ifTable, family) => {\n  let gateway, gwid, result;\n\n  (gwTable || \"\").trim().split(\"\\n\").splice(1).some(line => {\n    const results = line.trim().split(/} +/) || [];\n    const gw = results[0];\n    const id = results[1];\n    gateway = (ipRegex[family]().exec((gw || \"\").trim()) || [])[0];\n    if (gateway) {\n      gwid = id;\n      return true;\n    }\n  });\n\n  (ifTable || \"\").trim().split(\"\\n\").splice(1).some(line => {\n    const i = line.indexOf(\" \");\n    const id = line.substr(0, i).trim();\n    const name = line.substr(i + 1).trim();\n    if (id === gwid) {\n      result = {gateway, interface: name ? name : null};\n      return true;\n    }\n  });\n\n  if (!result) {\n    throw new Error(\"Unable to determine default gateway\");\n  }\n\n  return result;\n};\n\nconst spawnOpts = {\n  windowsHide: true,\n};\n\nconst promise = family => {\n  return Promise.all([\n    execa.stdout(\"wmic\", gwArgs, spawnOpts),\n    execa.stdout(\"wmic\", ifArgs, spawnOpts),\n  ]).then(results => {\n    const gwTable = results[0];\n    const ifTable = results[1];\n\n    return parse(gwTable, ifTable, family);\n  });\n};\n\nconst sync = family => {\n  const gwTable = execa.sync(\"wmic\", gwArgs, spawnOpts).stdout;\n  const ifTable = execa.sync(\"wmic\", ifArgs, spawnOpts).stdout;\n\n  return parse(gwTable, ifTable, family);\n};\n\nmodule.exports.v4 = () => promise(\"v4\");\nmodule.exports.v6 = () => promise(\"v6\");\n\nmodule.exports.v4.sync = () => sync(\"v4\");\nmodule.exports.v6.sync = () => sync(\"v6\");\n"]},"metadata":{},"sourceType":"script"}