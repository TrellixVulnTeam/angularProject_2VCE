{"ast":null,"code":"\"use strict\";\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nvar _createForOfIteratorHelper = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _regeneratorRuntime = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.InlineFontsProcessor = void 0;\n\nvar cacache = require(\"cacache\");\n\nvar fs_1 = require(\"fs\");\n\nvar https = require(\"https\");\n\nvar url_1 = require(\"url\");\n\nvar util_1 = require(\"util\");\n\nvar cache_path_1 = require(\"../cache-path\");\n\nvar environment_options_1 = require(\"../environment-options\");\n\nvar html_rewriting_stream_1 = require(\"./html-rewriting-stream\");\n\nvar cacheFontsPath = environment_options_1.cachingDisabled ? undefined : cache_path_1.findCachePath('angular-build-fonts');\n\nvar packageVersion = require('../../../package.json').version;\n\nvar readFile = util_1.promisify(fs_1.readFile);\nvar SUPPORTED_PROVIDERS = ['fonts.googleapis.com'];\n\nvar InlineFontsProcessor = /*#__PURE__*/function () {\n  function InlineFontsProcessor(options) {\n    _classCallCheck(this, InlineFontsProcessor);\n\n    this.options = options;\n  }\n\n  _createClass(InlineFontsProcessor, [{\n    key: \"process\",\n    value: function () {\n      var _process = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(content) {\n        var hrefList, _yield$html_rewriting, collectorStream, hrefsContent, _yield$html_rewriting2, rewriter, transformedContent;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                hrefList = []; // Collector link tags with href\n\n                _context.next = 3;\n                return html_rewriting_stream_1.htmlRewritingStream(content);\n\n              case 3:\n                _yield$html_rewriting = _context.sent;\n                collectorStream = _yield$html_rewriting.rewriter;\n                collectorStream.on('startTag', function (tag) {\n                  var _a;\n\n                  var tagName = tag.tagName,\n                      attrs = tag.attrs;\n\n                  if (tagName !== 'link') {\n                    return;\n                  } // <link tag with rel=\"stylesheet\" and a href.\n\n\n                  var href = attrs.find(function (_ref) {\n                    var name = _ref.name,\n                        value = _ref.value;\n                    return name === 'rel' && value === 'stylesheet';\n                  }) && ((_a = attrs.find(function (_ref2) {\n                    var name = _ref2.name;\n                    return name === 'href';\n                  })) === null || _a === void 0 ? void 0 : _a.value);\n\n                  if (href) {\n                    hrefList.push(href);\n                  }\n                });\n                _context.next = 8;\n                return new Promise(function (resolve) {\n                  return collectorStream.on('finish', resolve);\n                });\n\n              case 8:\n                _context.next = 10;\n                return this.processHrefs(hrefList);\n\n              case 10:\n                hrefsContent = _context.sent;\n\n                if (!(hrefsContent.size === 0)) {\n                  _context.next = 13;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", content);\n\n              case 13:\n                _context.next = 15;\n                return html_rewriting_stream_1.htmlRewritingStream(content);\n\n              case 15:\n                _yield$html_rewriting2 = _context.sent;\n                rewriter = _yield$html_rewriting2.rewriter;\n                transformedContent = _yield$html_rewriting2.transformedContent;\n                rewriter.on('startTag', function (tag) {\n                  var tagName = tag.tagName,\n                      attrs = tag.attrs;\n\n                  if (tagName !== 'link') {\n                    rewriter.emitStartTag(tag);\n                    return;\n                  }\n\n                  var hrefAttr = attrs.some(function (_ref3) {\n                    var name = _ref3.name,\n                        value = _ref3.value;\n                    return name === 'rel' && value === 'stylesheet';\n                  }) && attrs.find(function (_ref4) {\n                    var name = _ref4.name,\n                        value = _ref4.value;\n                    return name === 'href' && hrefsContent.has(value);\n                  });\n\n                  if (hrefAttr) {\n                    var href = hrefAttr.value;\n                    var cssContent = hrefsContent.get(href);\n                    rewriter.emitRaw(\"<style type=\\\"text/css\\\">\".concat(cssContent, \"</style>\"));\n                  } else {\n                    rewriter.emitStartTag(tag);\n                  }\n                });\n                return _context.abrupt(\"return\", transformedContent);\n\n              case 20:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function process(_x) {\n        return _process.apply(this, arguments);\n      }\n\n      return process;\n    }()\n  }, {\n    key: \"getResponse\",\n    value: function () {\n      var _getResponse = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(url, userAgent) {\n        var key, entry, data;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                key = \"\".concat(packageVersion, \"|\").concat(url, \"|\").concat(userAgent);\n\n                if (!cacheFontsPath) {\n                  _context2.next = 7;\n                  break;\n                }\n\n                _context2.next = 4;\n                return cacache.get.info(cacheFontsPath, key);\n\n              case 4:\n                entry = _context2.sent;\n\n                if (!entry) {\n                  _context2.next = 7;\n                  break;\n                }\n\n                return _context2.abrupt(\"return\", readFile(entry.path, 'utf8'));\n\n              case 7:\n                _context2.next = 9;\n                return new Promise(function (resolve, reject) {\n                  var rawResponse = '';\n                  https.get(url, {\n                    headers: {\n                      'user-agent': userAgent\n                    }\n                  }, function (res) {\n                    res.on('data', function (chunk) {\n                      return rawResponse += chunk;\n                    }).on('end', function () {\n                      return resolve(rawResponse);\n                    });\n                  }).on('error', function (e) {\n                    return reject(new Error(\"Inlining of fonts failed. An error has occurred while retrieving \".concat(url, \" over the internet.\\n\") + e.message));\n                  });\n                });\n\n              case 9:\n                data = _context2.sent;\n\n                if (!cacheFontsPath) {\n                  _context2.next = 13;\n                  break;\n                }\n\n                _context2.next = 13;\n                return cacache.put(cacheFontsPath, key, data);\n\n              case 13:\n                return _context2.abrupt(\"return\", data);\n\n              case 14:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function getResponse(_x2, _x3) {\n        return _getResponse.apply(this, arguments);\n      }\n\n      return getResponse;\n    }()\n  }, {\n    key: \"processHrefs\",\n    value: function () {\n      var _processHrefs = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(hrefList) {\n        var hrefsContent, _iterator, _step, hrefPath, normalizedHref, url, cssContent;\n\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                hrefsContent = new Map();\n                _iterator = _createForOfIteratorHelper(hrefList);\n                _context3.prev = 2;\n\n                _iterator.s();\n\n              case 4:\n                if ((_step = _iterator.n()).done) {\n                  _context3.next = 27;\n                  break;\n                }\n\n                hrefPath = _step.value;\n                // Need to convert '//' to 'https://' because the URL parser will fail with '//'.\n                normalizedHref = hrefPath.startsWith('//') ? \"https:\".concat(hrefPath) : hrefPath;\n\n                if (normalizedHref.startsWith('http')) {\n                  _context3.next = 9;\n                  break;\n                }\n\n                return _context3.abrupt(\"continue\", 25);\n\n              case 9:\n                url = new url_1.URL(normalizedHref); // Force HTTPS protocol\n\n                url.protocol = 'https:';\n\n                if (SUPPORTED_PROVIDERS.includes(url.hostname)) {\n                  _context3.next = 13;\n                  break;\n                }\n\n                return _context3.abrupt(\"continue\", 25);\n\n              case 13:\n                // The order IE -> Chrome is important as otherwise Chrome will load woff1.\n                cssContent = '';\n\n                if (!this.options.WOFFSupportNeeded) {\n                  _context3.next = 19;\n                  break;\n                }\n\n                _context3.t0 = cssContent;\n                _context3.next = 18;\n                return this.getResponse(url, \"Mozilla/5.0 (Windows NT 10.0; Trident/7.0; rv:11. 0) like Gecko\"\n                /* IE */\n                );\n\n              case 18:\n                cssContent = _context3.t0 += _context3.sent;\n\n              case 19:\n                _context3.t1 = cssContent;\n                _context3.next = 22;\n                return this.getResponse(url, \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/85.0.4183.121 Safari/537.36\"\n                /* Chrome */\n                );\n\n              case 22:\n                cssContent = _context3.t1 += _context3.sent;\n\n                if (this.options.minifyInlinedCSS) {\n                  cssContent = cssContent // Comments.\n                  .replace(/\\/\\*([\\s\\S]*?)\\*\\//g, '') // New lines.\n                  .replace(/\\n/g, '') // Safe spaces.\n                  .replace(/\\s?[\\{\\:\\;]\\s+/g, function (s) {\n                    return s.trim();\n                  });\n                }\n\n                hrefsContent.set(hrefPath, cssContent);\n\n              case 25:\n                _context3.next = 4;\n                break;\n\n              case 27:\n                _context3.next = 32;\n                break;\n\n              case 29:\n                _context3.prev = 29;\n                _context3.t2 = _context3[\"catch\"](2);\n\n                _iterator.e(_context3.t2);\n\n              case 32:\n                _context3.prev = 32;\n\n                _iterator.f();\n\n                return _context3.finish(32);\n\n              case 35:\n                return _context3.abrupt(\"return\", hrefsContent);\n\n              case 36:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this, [[2, 29, 32, 35]]);\n      }));\n\n      function processHrefs(_x4) {\n        return _processHrefs.apply(this, arguments);\n      }\n\n      return processHrefs;\n    }()\n  }]);\n\n  return InlineFontsProcessor;\n}();\n\nexports.InlineFontsProcessor = InlineFontsProcessor;","map":{"version":3,"sources":["/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@angular-devkit/build-angular/src/utils/index-file/inline-fonts.js"],"names":["Object","defineProperty","exports","value","InlineFontsProcessor","cacache","require","fs_1","https","url_1","util_1","cache_path_1","environment_options_1","html_rewriting_stream_1","cacheFontsPath","cachingDisabled","undefined","findCachePath","packageVersion","version","readFile","promisify","SUPPORTED_PROVIDERS","options","content","hrefList","htmlRewritingStream","collectorStream","rewriter","on","tag","_a","tagName","attrs","href","find","name","push","Promise","resolve","processHrefs","hrefsContent","size","transformedContent","emitStartTag","hrefAttr","some","has","cssContent","get","emitRaw","url","userAgent","key","info","entry","path","reject","rawResponse","headers","res","chunk","e","Error","message","data","put","Map","hrefPath","normalizedHref","startsWith","URL","protocol","includes","hostname","WOFFSupportNeeded","getResponse","minifyInlinedCSS","replace","s","trim","set"],"mappings":"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","sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.InlineFontsProcessor = void 0;\nconst cacache = require(\"cacache\");\nconst fs_1 = require(\"fs\");\nconst https = require(\"https\");\nconst url_1 = require(\"url\");\nconst util_1 = require(\"util\");\nconst cache_path_1 = require(\"../cache-path\");\nconst environment_options_1 = require(\"../environment-options\");\nconst html_rewriting_stream_1 = require(\"./html-rewriting-stream\");\nconst cacheFontsPath = environment_options_1.cachingDisabled ? undefined : cache_path_1.findCachePath('angular-build-fonts');\nconst packageVersion = require('../../../package.json').version;\nconst readFile = util_1.promisify(fs_1.readFile);\nconst SUPPORTED_PROVIDERS = [\n    'fonts.googleapis.com',\n];\nclass InlineFontsProcessor {\n    constructor(options) {\n        this.options = options;\n    }\n    async process(content) {\n        const hrefList = [];\n        // Collector link tags with href\n        const { rewriter: collectorStream } = await html_rewriting_stream_1.htmlRewritingStream(content);\n        collectorStream.on('startTag', tag => {\n            var _a;\n            const { tagName, attrs } = tag;\n            if (tagName !== 'link') {\n                return;\n            }\n            // <link tag with rel=\"stylesheet\" and a href.\n            const href = attrs.find(({ name, value }) => name === 'rel' && value === 'stylesheet')\n                && ((_a = attrs.find(({ name }) => name === 'href')) === null || _a === void 0 ? void 0 : _a.value);\n            if (href) {\n                hrefList.push(href);\n            }\n        });\n        await new Promise(resolve => collectorStream.on('finish', resolve));\n        // Download stylesheets\n        const hrefsContent = await this.processHrefs(hrefList);\n        if (hrefsContent.size === 0) {\n            return content;\n        }\n        // Replace link with style tag.\n        const { rewriter, transformedContent } = await html_rewriting_stream_1.htmlRewritingStream(content);\n        rewriter.on('startTag', tag => {\n            const { tagName, attrs } = tag;\n            if (tagName !== 'link') {\n                rewriter.emitStartTag(tag);\n                return;\n            }\n            const hrefAttr = attrs.some(({ name, value }) => name === 'rel' && value === 'stylesheet')\n                && attrs.find(({ name, value }) => name === 'href' && hrefsContent.has(value));\n            if (hrefAttr) {\n                const href = hrefAttr.value;\n                const cssContent = hrefsContent.get(href);\n                rewriter.emitRaw(`<style type=\"text/css\">${cssContent}</style>`);\n            }\n            else {\n                rewriter.emitStartTag(tag);\n            }\n        });\n        return transformedContent;\n    }\n    async getResponse(url, userAgent) {\n        const key = `${packageVersion}|${url}|${userAgent}`;\n        if (cacheFontsPath) {\n            const entry = await cacache.get.info(cacheFontsPath, key);\n            if (entry) {\n                return readFile(entry.path, 'utf8');\n            }\n        }\n        const data = await new Promise((resolve, reject) => {\n            let rawResponse = '';\n            https.get(url, {\n                headers: {\n                    'user-agent': userAgent,\n                },\n            }, res => {\n                res\n                    .on('data', chunk => rawResponse += chunk)\n                    .on('end', () => resolve(rawResponse));\n            })\n                .on('error', e => reject(new Error(`Inlining of fonts failed. An error has occurred while retrieving ${url} over the internet.\\n` +\n                e.message)));\n        });\n        if (cacheFontsPath) {\n            await cacache.put(cacheFontsPath, key, data);\n        }\n        return data;\n    }\n    async processHrefs(hrefList) {\n        const hrefsContent = new Map();\n        for (const hrefPath of hrefList) {\n            // Need to convert '//' to 'https://' because the URL parser will fail with '//'.\n            const normalizedHref = hrefPath.startsWith('//') ? `https:${hrefPath}` : hrefPath;\n            if (!normalizedHref.startsWith('http')) {\n                // Non valid URL.\n                // Example: relative path styles.css.\n                continue;\n            }\n            const url = new url_1.URL(normalizedHref);\n            // Force HTTPS protocol\n            url.protocol = 'https:';\n            if (!SUPPORTED_PROVIDERS.includes(url.hostname)) {\n                // Provider not supported.\n                continue;\n            }\n            // The order IE -> Chrome is important as otherwise Chrome will load woff1.\n            let cssContent = '';\n            if (this.options.WOFFSupportNeeded) {\n                cssContent += await this.getResponse(url, \"Mozilla/5.0 (Windows NT 10.0; Trident/7.0; rv:11. 0) like Gecko\" /* IE */);\n            }\n            cssContent += await this.getResponse(url, \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/85.0.4183.121 Safari/537.36\" /* Chrome */);\n            if (this.options.minifyInlinedCSS) {\n                cssContent = cssContent\n                    // Comments.\n                    .replace(/\\/\\*([\\s\\S]*?)\\*\\//g, '')\n                    // New lines.\n                    .replace(/\\n/g, '')\n                    // Safe spaces.\n                    .replace(/\\s?[\\{\\:\\;]\\s+/g, s => s.trim());\n            }\n            hrefsContent.set(hrefPath, cssContent);\n        }\n        return hrefsContent;\n    }\n}\nexports.InlineFontsProcessor = InlineFontsProcessor;\n"]},"metadata":{},"sourceType":"script"}