{"ast":null,"code":"(function (factory) {\n  if (typeof module === \"object\" && typeof module.exports === \"object\") {\n    var v = factory(require, exports);\n    if (v !== undefined) module.exports = v;\n  } else if (typeof define === \"function\" && define.amd) {\n    define(\"@angular/compiler-cli/ngcc/src/writing/cleaning/cleaning_strategies\", [\"require\", \"exports\", \"@angular/compiler-cli/src/ngtsc/file_system\", \"@angular/compiler-cli/ngcc/src/packages/build_marker\", \"@angular/compiler-cli/ngcc/src/writing/in_place_file_writer\", \"@angular/compiler-cli/ngcc/src/writing/new_entry_point_file_writer\", \"@angular/compiler-cli/ngcc/src/writing/cleaning/utils\"], factory);\n  }\n})(function (require, exports) {\n  \"use strict\";\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.BackupFileCleaner = exports.NgccDirectoryCleaner = exports.PackageJsonCleaner = void 0;\n  /**\n   * @license\n   * Copyright Google LLC All Rights Reserved.\n   *\n   * Use of this source code is governed by an MIT-style license that can be\n   * found in the LICENSE file at https://angular.io/license\n   */\n\n  var file_system_1 = require(\"@angular/compiler-cli/src/ngtsc/file_system\");\n\n  var build_marker_1 = require(\"@angular/compiler-cli/ngcc/src/packages/build_marker\");\n\n  var in_place_file_writer_1 = require(\"@angular/compiler-cli/ngcc/src/writing/in_place_file_writer\");\n\n  var new_entry_point_file_writer_1 = require(\"@angular/compiler-cli/ngcc/src/writing/new_entry_point_file_writer\");\n\n  var utils_1 = require(\"@angular/compiler-cli/ngcc/src/writing/cleaning/utils\");\n  /**\n   * A CleaningStrategy that reverts changes to package.json files by removing the build marker and\n   * other properties.\n   */\n\n\n  var PackageJsonCleaner =\n  /** @class */\n  function () {\n    function PackageJsonCleaner(fs) {\n      this.fs = fs;\n    }\n\n    PackageJsonCleaner.prototype.canClean = function (_path, basename) {\n      return basename === 'package.json';\n    };\n\n    PackageJsonCleaner.prototype.clean = function (path, _basename) {\n      var packageJson = JSON.parse(this.fs.readFile(path));\n\n      if (build_marker_1.cleanPackageJson(packageJson)) {\n        this.fs.writeFile(path, JSON.stringify(packageJson, null, 2) + \"\\n\");\n      }\n    };\n\n    return PackageJsonCleaner;\n  }();\n\n  exports.PackageJsonCleaner = PackageJsonCleaner;\n  /**\n   * A CleaningStrategy that removes the extra directory containing generated entry-point formats.\n   */\n\n  var NgccDirectoryCleaner =\n  /** @class */\n  function () {\n    function NgccDirectoryCleaner(fs) {\n      this.fs = fs;\n    }\n\n    NgccDirectoryCleaner.prototype.canClean = function (path, basename) {\n      return basename === new_entry_point_file_writer_1.NGCC_DIRECTORY && utils_1.isLocalDirectory(this.fs, path);\n    };\n\n    NgccDirectoryCleaner.prototype.clean = function (path, _basename) {\n      this.fs.removeDeep(path);\n    };\n\n    return NgccDirectoryCleaner;\n  }();\n\n  exports.NgccDirectoryCleaner = NgccDirectoryCleaner;\n  /**\n   * A CleaningStrategy that reverts files that were overwritten and removes the backup files that\n   * ngcc created.\n   */\n\n  var BackupFileCleaner =\n  /** @class */\n  function () {\n    function BackupFileCleaner(fs) {\n      this.fs = fs;\n    }\n\n    BackupFileCleaner.prototype.canClean = function (path, basename) {\n      return this.fs.extname(basename) === in_place_file_writer_1.NGCC_BACKUP_EXTENSION && this.fs.exists(file_system_1.absoluteFrom(path.replace(in_place_file_writer_1.NGCC_BACKUP_EXTENSION, '')));\n    };\n\n    BackupFileCleaner.prototype.clean = function (path, _basename) {\n      this.fs.moveFile(path, file_system_1.absoluteFrom(path.replace(in_place_file_writer_1.NGCC_BACKUP_EXTENSION, '')));\n    };\n\n    return BackupFileCleaner;\n  }();\n\n  exports.BackupFileCleaner = BackupFileCleaner;\n});","map":{"version":3,"sources":["../../../../../../../../../packages/compiler-cli/ngcc/src/writing/cleaning/cleaning_strategies.ts"],"names":[],"mappings":";;;;;;;;;;;;;;AAAA;;;;;;AAMG;;AACH,MAAA,aAAA,GAAA,OAAA,CAAA,6CAAA,CAAA;;AACA,MAAA,cAAA,GAAA,OAAA,CAAA,sDAAA,CAAA;;AAEA,MAAA,sBAAA,GAAA,OAAA,CAAA,6DAAA,CAAA;;AACA,MAAA,6BAAA,GAAA,OAAA,CAAA,oEAAA,CAAA;;AAEA,MAAA,OAAA,GAAA,OAAA,CAAA,uDAAA,CAAA;AAUA;;;AAGG;;;AACH,MAAA,kBAAA;AAAA;AAAA,cAAA;AACE,aAAA,kBAAA,CAAoB,EAApB,EAAkC;AAAd,WAAA,EAAA,GAAA,EAAA;AAAkB;;AACtC,IAAA,kBAAA,CAAA,SAAA,CAAA,QAAA,GAAA,UAAS,KAAT,EAAgC,QAAhC,EAAqD;AACnD,aAAO,QAAQ,KAAK,cAApB;AACD,KAFD;;AAGA,IAAA,kBAAA,CAAA,SAAA,CAAA,KAAA,GAAA,UAAM,IAAN,EAA4B,SAA5B,EAAkD;AAChD,UAAM,WAAW,GAAG,IAAI,CAAC,KAAL,CAAW,KAAK,EAAL,CAAQ,QAAR,CAAiB,IAAjB,CAAX,CAApB;;AACA,UAAI,cAAA,CAAA,gBAAA,CAAiB,WAAjB,CAAJ,EAAmC;AACjC,aAAK,EAAL,CAAQ,SAAR,CAAkB,IAAlB,EAA2B,IAAI,CAAC,SAAL,CAAe,WAAf,EAA4B,IAA5B,EAAkC,CAAlC,IAAoC,IAA/D;AACD;AACF,KALD;;AAMF,WAAA,kBAAA;AAAC,GAXD,EAAA;;AAAa,EAAA,OAAA,CAAA,kBAAA,GAAA,kBAAA;AAab;;AAEG;;AACH,MAAA,oBAAA;AAAA;AAAA,cAAA;AACE,aAAA,oBAAA,CAAoB,EAApB,EAAkC;AAAd,WAAA,EAAA,GAAA,EAAA;AAAkB;;AACtC,IAAA,oBAAA,CAAA,SAAA,CAAA,QAAA,GAAA,UAAS,IAAT,EAA+B,QAA/B,EAAoD;AAClD,aAAO,QAAQ,KAAK,6BAAA,CAAA,cAAb,IAA+B,OAAA,CAAA,gBAAA,CAAiB,KAAK,EAAtB,EAA0B,IAA1B,CAAtC;AACD,KAFD;;AAGA,IAAA,oBAAA,CAAA,SAAA,CAAA,KAAA,GAAA,UAAM,IAAN,EAA4B,SAA5B,EAAkD;AAChD,WAAK,EAAL,CAAQ,UAAR,CAAmB,IAAnB;AACD,KAFD;;AAGF,WAAA,oBAAA;AAAC,GARD,EAAA;;AAAa,EAAA,OAAA,CAAA,oBAAA,GAAA,oBAAA;AAUb;;;AAGG;;AACH,MAAA,iBAAA;AAAA;AAAA,cAAA;AACE,aAAA,iBAAA,CAAoB,EAApB,EAAkC;AAAd,WAAA,EAAA,GAAA,EAAA;AAAkB;;AACtC,IAAA,iBAAA,CAAA,SAAA,CAAA,QAAA,GAAA,UAAS,IAAT,EAA+B,QAA/B,EAAoD;AAClD,aAAO,KAAK,EAAL,CAAQ,OAAR,CAAgB,QAAhB,MAA8B,sBAAA,CAAA,qBAA9B,IACH,KAAK,EAAL,CAAQ,MAAR,CAAe,aAAA,CAAA,YAAA,CAAa,IAAI,CAAC,OAAL,CAAa,sBAAA,CAAA,qBAAb,EAAoC,EAApC,CAAb,CAAf,CADJ;AAED,KAHD;;AAIA,IAAA,iBAAA,CAAA,SAAA,CAAA,KAAA,GAAA,UAAM,IAAN,EAA4B,SAA5B,EAAkD;AAChD,WAAK,EAAL,CAAQ,QAAR,CAAiB,IAAjB,EAAuB,aAAA,CAAA,YAAA,CAAa,IAAI,CAAC,OAAL,CAAa,sBAAA,CAAA,qBAAb,EAAoC,EAApC,CAAb,CAAvB;AACD,KAFD;;AAGF,WAAA,iBAAA;AAAC,GATD,EAAA;;AAAa,EAAA,OAAA,CAAA,iBAAA,GAAA,iBAAA","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {absoluteFrom, AbsoluteFsPath, FileSystem, PathSegment} from '../../../../src/ngtsc/file_system';\nimport {cleanPackageJson} from '../../packages/build_marker';\nimport {EntryPointPackageJson} from '../../packages/entry_point';\nimport {NGCC_BACKUP_EXTENSION} from '../in_place_file_writer';\nimport {NGCC_DIRECTORY} from '../new_entry_point_file_writer';\n\nimport {isLocalDirectory} from './utils';\n\n/**\n * Implement this interface to extend the cleaning strategies of the `PackageCleaner`.\n */\nexport interface CleaningStrategy {\n  canClean(path: AbsoluteFsPath, basename: PathSegment): boolean;\n  clean(path: AbsoluteFsPath, basename: PathSegment): void;\n}\n\n/**\n * A CleaningStrategy that reverts changes to package.json files by removing the build marker and\n * other properties.\n */\nexport class PackageJsonCleaner implements CleaningStrategy {\n  constructor(private fs: FileSystem) {}\n  canClean(_path: AbsoluteFsPath, basename: PathSegment): boolean {\n    return basename === 'package.json';\n  }\n  clean(path: AbsoluteFsPath, _basename: PathSegment): void {\n    const packageJson = JSON.parse(this.fs.readFile(path)) as EntryPointPackageJson;\n    if (cleanPackageJson(packageJson)) {\n      this.fs.writeFile(path, `${JSON.stringify(packageJson, null, 2)}\\n`);\n    }\n  }\n}\n\n/**\n * A CleaningStrategy that removes the extra directory containing generated entry-point formats.\n */\nexport class NgccDirectoryCleaner implements CleaningStrategy {\n  constructor(private fs: FileSystem) {}\n  canClean(path: AbsoluteFsPath, basename: PathSegment): boolean {\n    return basename === NGCC_DIRECTORY && isLocalDirectory(this.fs, path);\n  }\n  clean(path: AbsoluteFsPath, _basename: PathSegment): void {\n    this.fs.removeDeep(path);\n  }\n}\n\n/**\n * A CleaningStrategy that reverts files that were overwritten and removes the backup files that\n * ngcc created.\n */\nexport class BackupFileCleaner implements CleaningStrategy {\n  constructor(private fs: FileSystem) {}\n  canClean(path: AbsoluteFsPath, basename: PathSegment): boolean {\n    return this.fs.extname(basename) === NGCC_BACKUP_EXTENSION &&\n        this.fs.exists(absoluteFrom(path.replace(NGCC_BACKUP_EXTENSION, '')));\n  }\n  clean(path: AbsoluteFsPath, _basename: PathSegment): void {\n    this.fs.moveFile(path, absoluteFrom(path.replace(NGCC_BACKUP_EXTENSION, '')));\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}