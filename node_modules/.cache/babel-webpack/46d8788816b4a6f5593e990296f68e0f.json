{"ast":null,"code":"\"use strict\";\n\nvar _taggedTemplateLiteral = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/taggedTemplateLiteral\");\n\nvar _templateObject;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SingleTestTransformLoader = void 0;\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nvar core_1 = require(\"@angular-devkit/core\");\n\nvar loader_utils_1 = require(\"loader-utils\");\n\nvar path_1 = require(\"path\");\n\nexports.SingleTestTransformLoader = __filename;\n/**\n * This loader transforms the default test file to only run tests\n * for some specs instead of all specs.\n * It works by replacing the known content of the auto-generated test file:\n *   const context = require.context('./', true, /\\.spec\\.ts$/);\n *   context.keys().map(context);\n * with:\n *   const context = { keys: () => ({ map: (_a) => { } }) };\n *   context.keys().map(context);\n * So that it does nothing.\n * Then it adds import statements for each file in the files options\n * array to import them directly, and thus run the tests there.\n */\n\nfunction loader(source) {\n  var _loader_utils_1$getOp = loader_utils_1.getOptions(this),\n      _loader_utils_1$getOp2 = _loader_utils_1$getOp.files,\n      files = _loader_utils_1$getOp2 === void 0 ? [] : _loader_utils_1$getOp2,\n      _loader_utils_1$getOp3 = _loader_utils_1$getOp.logger,\n      logger = _loader_utils_1$getOp3 === void 0 ? console : _loader_utils_1$getOp3; // signal the user that expected content is not present.\n\n\n  if (!source.includes('require.context(')) {\n    logger.error(core_1.tags.stripIndent(_templateObject || (_templateObject = _taggedTemplateLiteral([\"The 'include' option requires that the 'main' file for tests includes the below line:\\n      const context = require.context('./', true, /.spec.ts$/);\\n      Arguments passed to require.context are not strict and can be changed.\"], [\"The 'include' option requires that the 'main' file for tests includes the below line:\\n      const context = require.context('./', true, /\\\\.spec\\\\.ts$/);\\n      Arguments passed to require.context are not strict and can be changed.\"]))));\n    return source;\n  }\n\n  var targettedImports = files.map(function (path) {\n    return \"require('./\".concat(path.replace('.' + path_1.extname(path), ''), \"');\");\n  }).join('\\n');\n  var mockedRequireContext = 'Object.assign(() => { }, { keys: () => [], resolve: () => undefined });\\n';\n  source = source.replace(/require\\.context\\(.*/, mockedRequireContext + targettedImports);\n  return source;\n}\n\nexports.default = loader;","map":{"version":3,"sources":["/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@angular-devkit/build-angular/src/webpack/plugins/single-test-transform.js"],"names":["Object","defineProperty","exports","value","SingleTestTransformLoader","core_1","require","loader_utils_1","path_1","__filename","loader","source","getOptions","files","logger","console","includes","error","tags","stripIndent","targettedImports","map","path","replace","extname","join","mockedRequireContext","default"],"mappings":"AAAA;;;;;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,yBAAR,GAAoC,KAAK,CAAzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAMC,MAAM,GAAGC,OAAO,CAAC,sBAAD,CAAtB;;AACA,IAAMC,cAAc,GAAGD,OAAO,CAAC,cAAD,CAA9B;;AACA,IAAME,MAAM,GAAGF,OAAO,CAAC,MAAD,CAAtB;;AACAJ,OAAO,CAACE,yBAAR,GAAoCK,UAApC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,MAAT,CAAgBC,MAAhB,EAAwB;AACpB,8BAAyCJ,cAAc,CAACK,UAAf,CAA0B,IAA1B,CAAzC;AAAA,qDAAQC,KAAR;AAAA,MAAQA,KAAR,uCAAgB,EAAhB;AAAA,qDAAoBC,MAApB;AAAA,MAAoBA,MAApB,uCAA6BC,OAA7B,0BADoB,CAEpB;;;AACA,MAAI,CAACJ,MAAM,CAACK,QAAP,CAAgB,kBAAhB,CAAL,EAA0C;AACtCF,IAAAA,MAAM,CAACG,KAAP,CAAaZ,MAAM,CAACa,IAAP,CAAYC,WAAzB;AAGA,WAAOR,MAAP;AACH;;AACD,MAAMS,gBAAgB,GAAGP,KAAK,CACzBQ,GADoB,CAChB,UAAAC,IAAI;AAAA,gCAAkBA,IAAI,CAACC,OAAL,CAAa,MAAMf,MAAM,CAACgB,OAAP,CAAeF,IAAf,CAAnB,EAAyC,EAAzC,CAAlB;AAAA,GADY,EAEpBG,IAFoB,CAEf,IAFe,CAAzB;AAGA,MAAMC,oBAAoB,GAAG,2EAA7B;AACAf,EAAAA,MAAM,GAAGA,MAAM,CAACY,OAAP,CAAe,sBAAf,EAAuCG,oBAAoB,GAAGN,gBAA9D,CAAT;AACA,SAAOT,MAAP;AACH;;AACDT,OAAO,CAACyB,OAAR,GAAkBjB,MAAlB","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SingleTestTransformLoader = void 0;\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst core_1 = require(\"@angular-devkit/core\");\nconst loader_utils_1 = require(\"loader-utils\");\nconst path_1 = require(\"path\");\nexports.SingleTestTransformLoader = __filename;\n/**\n * This loader transforms the default test file to only run tests\n * for some specs instead of all specs.\n * It works by replacing the known content of the auto-generated test file:\n *   const context = require.context('./', true, /\\.spec\\.ts$/);\n *   context.keys().map(context);\n * with:\n *   const context = { keys: () => ({ map: (_a) => { } }) };\n *   context.keys().map(context);\n * So that it does nothing.\n * Then it adds import statements for each file in the files options\n * array to import them directly, and thus run the tests there.\n */\nfunction loader(source) {\n    const { files = [], logger = console } = loader_utils_1.getOptions(this);\n    // signal the user that expected content is not present.\n    if (!source.includes('require.context(')) {\n        logger.error(core_1.tags.stripIndent `The 'include' option requires that the 'main' file for tests includes the below line:\n      const context = require.context('./', true, /\\.spec\\.ts$/);\n      Arguments passed to require.context are not strict and can be changed.`);\n        return source;\n    }\n    const targettedImports = files\n        .map(path => `require('./${path.replace('.' + path_1.extname(path), '')}');`)\n        .join('\\n');\n    const mockedRequireContext = 'Object.assign(() => { }, { keys: () => [], resolve: () => undefined });\\n';\n    source = source.replace(/require\\.context\\(.*/, mockedRequireContext + targettedImports);\n    return source;\n}\nexports.default = loader;\n"]},"metadata":{},"sourceType":"script"}