{"ast":null,"code":"'use strict';\n\nvar _toConsumableArray = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/toConsumableArray\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = normalizeBoxShadow;\n\nvar _postcssValueParser = require('postcss-value-parser');\n\nvar _cssnanoUtilGetArguments = require('cssnano-util-get-arguments');\n\nvar _cssnanoUtilGetArguments2 = _interopRequireDefault(_cssnanoUtilGetArguments);\n\nvar _addSpace = require('../lib/addSpace');\n\nvar _addSpace2 = _interopRequireDefault(_addSpace);\n\nvar _getValue = require('../lib/getValue');\n\nvar _getValue2 = _interopRequireDefault(_getValue);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n} // box-shadow: inset? && <length>{2,4} && <color>?\n\n\nfunction normalizeBoxShadow(parsed) {\n  var args = (0, _cssnanoUtilGetArguments2.default)(parsed);\n  var abort = false;\n  var values = args.reduce(function (list, arg) {\n    var val = [];\n    var state = {\n      inset: [],\n      color: []\n    };\n    arg.forEach(function (node) {\n      var type = node.type,\n          value = node.value;\n\n      if (type === 'function' && ~value.toLowerCase().indexOf('calc')) {\n        abort = true;\n        return;\n      }\n\n      if (type === 'space') {\n        return;\n      }\n\n      if ((0, _postcssValueParser.unit)(value)) {\n        val = [].concat(_toConsumableArray(val), [node, (0, _addSpace2.default)()]);\n      } else if (value.toLowerCase() === 'inset') {\n        state.inset = [].concat(_toConsumableArray(state.inset), [node, (0, _addSpace2.default)()]);\n      } else {\n        state.color = [].concat(_toConsumableArray(state.color), [node, (0, _addSpace2.default)()]);\n      }\n    });\n    return [].concat(_toConsumableArray(list), [[].concat(_toConsumableArray(state.inset), _toConsumableArray(val), _toConsumableArray(state.color))]);\n  }, []);\n\n  if (abort) {\n    return parsed.toString();\n  }\n\n  return (0, _getValue2.default)(values);\n}\n\nmodule.exports = exports['default'];","map":{"version":3,"sources":["/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/postcss-ordered-values/dist/rules/boxShadow.js"],"names":["Object","defineProperty","exports","value","default","normalizeBoxShadow","_postcssValueParser","require","_cssnanoUtilGetArguments","_cssnanoUtilGetArguments2","_interopRequireDefault","_addSpace","_addSpace2","_getValue","_getValue2","obj","__esModule","parsed","args","abort","values","reduce","list","arg","val","state","inset","color","forEach","node","type","toLowerCase","indexOf","unit","toString","module"],"mappings":"AAAA;;;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AACzCC,EAAAA,KAAK,EAAE;AADkC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkBC,kBAAlB;;AAEA,IAAIC,mBAAmB,GAAGC,OAAO,CAAC,sBAAD,CAAjC;;AAEA,IAAIC,wBAAwB,GAAGD,OAAO,CAAC,4BAAD,CAAtC;;AAEA,IAAIE,yBAAyB,GAAGC,sBAAsB,CAACF,wBAAD,CAAtD;;AAEA,IAAIG,SAAS,GAAGJ,OAAO,CAAC,iBAAD,CAAvB;;AAEA,IAAIK,UAAU,GAAGF,sBAAsB,CAACC,SAAD,CAAvC;;AAEA,IAAIE,SAAS,GAAGN,OAAO,CAAC,iBAAD,CAAvB;;AAEA,IAAIO,UAAU,GAAGJ,sBAAsB,CAACG,SAAD,CAAvC;;AAEA,SAASH,sBAAT,CAAgCK,GAAhC,EAAqC;AAAE,SAAOA,GAAG,IAAIA,GAAG,CAACC,UAAX,GAAwBD,GAAxB,GAA8B;AAAEX,IAAAA,OAAO,EAAEW;AAAX,GAArC;AAAwD,C,CAE/F;;;AAEA,SAASV,kBAAT,CAA4BY,MAA5B,EAAoC;AAChC,MAAIC,IAAI,GAAG,CAAC,GAAGT,yBAAyB,CAACL,OAA9B,EAAuCa,MAAvC,CAAX;AACA,MAAIE,KAAK,GAAG,KAAZ;AAEA,MAAIC,MAAM,GAAGF,IAAI,CAACG,MAAL,CAAY,UAACC,IAAD,EAAOC,GAAP,EAAe;AACpC,QAAIC,GAAG,GAAG,EAAV;AACA,QAAIC,KAAK,GAAG;AACRC,MAAAA,KAAK,EAAE,EADC;AAERC,MAAAA,KAAK,EAAE;AAFC,KAAZ;AAKAJ,IAAAA,GAAG,CAACK,OAAJ,CAAY,UAAAC,IAAI,EAAI;AAChB,UAAQC,IAAR,GAAwBD,IAAxB,CAAQC,IAAR;AAAA,UAAc3B,KAAd,GAAwB0B,IAAxB,CAAc1B,KAAd;;AAEA,UAAI2B,IAAI,KAAK,UAAT,IAAuB,CAAC3B,KAAK,CAAC4B,WAAN,GAAoBC,OAApB,CAA4B,MAA5B,CAA5B,EAAiE;AAC7Db,QAAAA,KAAK,GAAG,IAAR;AACA;AACH;;AAED,UAAIW,IAAI,KAAK,OAAb,EAAsB;AAClB;AACH;;AAED,UAAI,CAAC,GAAGxB,mBAAmB,CAAC2B,IAAxB,EAA8B9B,KAA9B,CAAJ,EAA0C;AACtCqB,QAAAA,GAAG,gCAAOA,GAAP,IAAYK,IAAZ,EAAkB,CAAC,GAAGjB,UAAU,CAACR,OAAf,GAAlB,EAAH;AACH,OAFD,MAEO,IAAID,KAAK,CAAC4B,WAAN,OAAwB,OAA5B,EAAqC;AACxCN,QAAAA,KAAK,CAACC,KAAN,gCAAkBD,KAAK,CAACC,KAAxB,IAA+BG,IAA/B,EAAqC,CAAC,GAAGjB,UAAU,CAACR,OAAf,GAArC;AACH,OAFM,MAEA;AACHqB,QAAAA,KAAK,CAACE,KAAN,gCAAkBF,KAAK,CAACE,KAAxB,IAA+BE,IAA/B,EAAqC,CAAC,GAAGjB,UAAU,CAACR,OAAf,GAArC;AACH;AACJ,KAnBD;AAqBA,wCAAWkB,IAAX,iCAAqBG,KAAK,CAACC,KAA3B,sBAAqCF,GAArC,sBAA6CC,KAAK,CAACE,KAAnD;AACH,GA7BY,EA6BV,EA7BU,CAAb;;AA+BA,MAAIR,KAAJ,EAAW;AACP,WAAOF,MAAM,CAACiB,QAAP,EAAP;AACH;;AAED,SAAO,CAAC,GAAGpB,UAAU,CAACV,OAAf,EAAwBgB,MAAxB,CAAP;AACH;;AACDe,MAAM,CAACjC,OAAP,GAAiBA,OAAO,CAAC,SAAD,CAAxB","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = normalizeBoxShadow;\n\nvar _postcssValueParser = require('postcss-value-parser');\n\nvar _cssnanoUtilGetArguments = require('cssnano-util-get-arguments');\n\nvar _cssnanoUtilGetArguments2 = _interopRequireDefault(_cssnanoUtilGetArguments);\n\nvar _addSpace = require('../lib/addSpace');\n\nvar _addSpace2 = _interopRequireDefault(_addSpace);\n\nvar _getValue = require('../lib/getValue');\n\nvar _getValue2 = _interopRequireDefault(_getValue);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// box-shadow: inset? && <length>{2,4} && <color>?\n\nfunction normalizeBoxShadow(parsed) {\n    let args = (0, _cssnanoUtilGetArguments2.default)(parsed);\n    let abort = false;\n\n    let values = args.reduce((list, arg) => {\n        let val = [];\n        let state = {\n            inset: [],\n            color: []\n        };\n\n        arg.forEach(node => {\n            const { type, value } = node;\n\n            if (type === 'function' && ~value.toLowerCase().indexOf('calc')) {\n                abort = true;\n                return;\n            }\n\n            if (type === 'space') {\n                return;\n            }\n\n            if ((0, _postcssValueParser.unit)(value)) {\n                val = [...val, node, (0, _addSpace2.default)()];\n            } else if (value.toLowerCase() === 'inset') {\n                state.inset = [...state.inset, node, (0, _addSpace2.default)()];\n            } else {\n                state.color = [...state.color, node, (0, _addSpace2.default)()];\n            }\n        });\n\n        return [...list, [...state.inset, ...val, ...state.color]];\n    }, []);\n\n    if (abort) {\n        return parsed.toString();\n    }\n\n    return (0, _getValue2.default)(values);\n}\nmodule.exports = exports['default'];"]},"metadata":{},"sourceType":"script"}