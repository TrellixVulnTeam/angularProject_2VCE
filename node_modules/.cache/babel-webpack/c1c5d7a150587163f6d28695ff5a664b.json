{"ast":null,"code":"'use strict';\n\nvar fs = require('graceful-fs');\n\nvar path = require('path');\n\nvar copy = require('../copy').copy;\n\nvar remove = require('../remove').remove;\n\nvar mkdirp = require('../mkdirs').mkdirp;\n\nvar pathExists = require('../path-exists').pathExists;\n\nvar stat = require('../util/stat');\n\nfunction move(src, dest, opts, cb) {\n  if (typeof opts === 'function') {\n    cb = opts;\n    opts = {};\n  }\n\n  var overwrite = opts.overwrite || opts.clobber || false;\n  stat.checkPaths(src, dest, 'move', function (err, stats) {\n    if (err) return cb(err);\n    var srcStat = stats.srcStat;\n    stat.checkParentPaths(src, srcStat, dest, 'move', function (err) {\n      if (err) return cb(err);\n      mkdirp(path.dirname(dest), function (err) {\n        if (err) return cb(err);\n        return doRename(src, dest, overwrite, cb);\n      });\n    });\n  });\n}\n\nfunction doRename(src, dest, overwrite, cb) {\n  if (overwrite) {\n    return remove(dest, function (err) {\n      if (err) return cb(err);\n      return rename(src, dest, overwrite, cb);\n    });\n  }\n\n  pathExists(dest, function (err, destExists) {\n    if (err) return cb(err);\n    if (destExists) return cb(new Error('dest already exists.'));\n    return rename(src, dest, overwrite, cb);\n  });\n}\n\nfunction rename(src, dest, overwrite, cb) {\n  fs.rename(src, dest, function (err) {\n    if (!err) return cb();\n    if (err.code !== 'EXDEV') return cb(err);\n    return moveAcrossDevice(src, dest, overwrite, cb);\n  });\n}\n\nfunction moveAcrossDevice(src, dest, overwrite, cb) {\n  var opts = {\n    overwrite: overwrite,\n    errorOnExist: true\n  };\n  copy(src, dest, opts, function (err) {\n    if (err) return cb(err);\n    return remove(src, cb);\n  });\n}\n\nmodule.exports = move;","map":{"version":3,"sources":["/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/streamroller/node_modules/fs-extra/lib/move/move.js"],"names":["fs","require","path","copy","remove","mkdirp","pathExists","stat","move","src","dest","opts","cb","overwrite","clobber","checkPaths","err","stats","srcStat","checkParentPaths","dirname","doRename","rename","destExists","Error","code","moveAcrossDevice","errorOnExist","module","exports"],"mappings":"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","sourcesContent":["'use strict'\n\nconst fs = require('graceful-fs')\nconst path = require('path')\nconst copy = require('../copy').copy\nconst remove = require('../remove').remove\nconst mkdirp = require('../mkdirs').mkdirp\nconst pathExists = require('../path-exists').pathExists\nconst stat = require('../util/stat')\n\nfunction move (src, dest, opts, cb) {\n  if (typeof opts === 'function') {\n    cb = opts\n    opts = {}\n  }\n\n  const overwrite = opts.overwrite || opts.clobber || false\n\n  stat.checkPaths(src, dest, 'move', (err, stats) => {\n    if (err) return cb(err)\n    const { srcStat } = stats\n    stat.checkParentPaths(src, srcStat, dest, 'move', err => {\n      if (err) return cb(err)\n      mkdirp(path.dirname(dest), err => {\n        if (err) return cb(err)\n        return doRename(src, dest, overwrite, cb)\n      })\n    })\n  })\n}\n\nfunction doRename (src, dest, overwrite, cb) {\n  if (overwrite) {\n    return remove(dest, err => {\n      if (err) return cb(err)\n      return rename(src, dest, overwrite, cb)\n    })\n  }\n  pathExists(dest, (err, destExists) => {\n    if (err) return cb(err)\n    if (destExists) return cb(new Error('dest already exists.'))\n    return rename(src, dest, overwrite, cb)\n  })\n}\n\nfunction rename (src, dest, overwrite, cb) {\n  fs.rename(src, dest, err => {\n    if (!err) return cb()\n    if (err.code !== 'EXDEV') return cb(err)\n    return moveAcrossDevice(src, dest, overwrite, cb)\n  })\n}\n\nfunction moveAcrossDevice (src, dest, overwrite, cb) {\n  const opts = {\n    overwrite,\n    errorOnExist: true\n  }\n  copy(src, dest, opts, err => {\n    if (err) return cb(err)\n    return remove(src, cb)\n  })\n}\n\nmodule.exports = move\n"]},"metadata":{},"sourceType":"script"}