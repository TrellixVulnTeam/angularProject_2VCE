{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nvar _regeneratorRuntime = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/regenerator\");\n\nvar _createForOfIteratorHelper = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _createClass = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _classCallCheck = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _inherits = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/createSuper\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.PartiallyOrderedSet = exports.CircularDependencyFoundException = exports.DependencyNotFoundException = void 0;\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nvar exception_1 = require(\"../exception\");\n\nvar DependencyNotFoundException = /*#__PURE__*/function (_exception_1$BaseExce) {\n  _inherits(DependencyNotFoundException, _exception_1$BaseExce);\n\n  var _super = _createSuper(DependencyNotFoundException);\n\n  function DependencyNotFoundException() {\n    _classCallCheck(this, DependencyNotFoundException);\n\n    return _super.call(this, 'One of the dependencies is not part of the set.');\n  }\n\n  return DependencyNotFoundException;\n}(exception_1.BaseException);\n\nexports.DependencyNotFoundException = DependencyNotFoundException;\n\nvar CircularDependencyFoundException = /*#__PURE__*/function (_exception_1$BaseExce2) {\n  _inherits(CircularDependencyFoundException, _exception_1$BaseExce2);\n\n  var _super2 = _createSuper(CircularDependencyFoundException);\n\n  function CircularDependencyFoundException() {\n    _classCallCheck(this, CircularDependencyFoundException);\n\n    return _super2.call(this, 'Circular dependencies found.');\n  }\n\n  return CircularDependencyFoundException;\n}(exception_1.BaseException);\n\nexports.CircularDependencyFoundException = CircularDependencyFoundException;\n\nvar PartiallyOrderedSet = /*#__PURE__*/function () {\n  function PartiallyOrderedSet() {\n    _classCallCheck(this, PartiallyOrderedSet);\n\n    this._items = new Map();\n  }\n\n  _createClass(PartiallyOrderedSet, [{\n    key: \"_checkCircularDependencies\",\n    value: function _checkCircularDependencies(item, deps) {\n      var _this = this;\n\n      if (deps.has(item)) {\n        throw new CircularDependencyFoundException();\n      }\n\n      deps.forEach(function (dep) {\n        return _this._checkCircularDependencies(item, _this._items.get(dep) || new Set());\n      });\n    }\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      this._items.clear();\n    }\n  }, {\n    key: \"has\",\n    value: function has(item) {\n      return this._items.has(item);\n    }\n  }, {\n    key: \"size\",\n    get: function get() {\n      return this._items.size;\n    }\n  }, {\n    key: \"forEach\",\n    value: function forEach(callbackfn, thisArg) {\n      var _iterator = _createForOfIteratorHelper(this),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var x = _step.value;\n          callbackfn.call(thisArg, x, x, this);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n    /**\n     * Returns an iterable of [v,v] pairs for every value `v` in the set.\n     */\n\n  }, {\n    key: \"entries\",\n    value:\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function entries() {\n      var _iterator2, _step2, item;\n\n      return _regeneratorRuntime.wrap(function entries$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _iterator2 = _createForOfIteratorHelper(this);\n              _context.prev = 1;\n\n              _iterator2.s();\n\n            case 3:\n              if ((_step2 = _iterator2.n()).done) {\n                _context.next = 9;\n                break;\n              }\n\n              item = _step2.value;\n              _context.next = 7;\n              return [item, item];\n\n            case 7:\n              _context.next = 3;\n              break;\n\n            case 9:\n              _context.next = 14;\n              break;\n\n            case 11:\n              _context.prev = 11;\n              _context.t0 = _context[\"catch\"](1);\n\n              _iterator2.e(_context.t0);\n\n            case 14:\n              _context.prev = 14;\n\n              _iterator2.f();\n\n              return _context.finish(14);\n\n            case 17:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, entries, this, [[1, 11, 14, 17]]);\n    })\n    /**\n     * Despite its name, returns an iterable of the values in the set,\n     */\n\n  }, {\n    key: \"keys\",\n    value: function keys() {\n      return this.values();\n    }\n    /**\n     * Returns an iterable of values in the set.\n     */\n\n  }, {\n    key: \"values\",\n    value: function values() {\n      return this[Symbol.iterator]();\n    }\n  }, {\n    key: \"add\",\n    value: function add(item) {\n      var deps = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Set();\n\n      if (Array.isArray(deps)) {\n        deps = new Set(deps);\n      } // Verify item is not already in the set.\n\n\n      if (this._items.has(item)) {\n        var itemDeps = this._items.get(item) || new Set(); // If the dependency list is equal, just return, otherwise remove and keep going.\n\n        var equal = true;\n\n        var _iterator3 = _createForOfIteratorHelper(deps),\n            _step3;\n\n        try {\n          for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n            var _dep = _step3.value;\n\n            if (!itemDeps.has(_dep)) {\n              equal = false;\n              break;\n            }\n          }\n        } catch (err) {\n          _iterator3.e(err);\n        } finally {\n          _iterator3.f();\n        }\n\n        if (equal) {\n          var _iterator4 = _createForOfIteratorHelper(itemDeps),\n              _step4;\n\n          try {\n            for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n              var dep = _step4.value;\n\n              if (!deps.has(dep)) {\n                equal = false;\n                break;\n              }\n            }\n          } catch (err) {\n            _iterator4.e(err);\n          } finally {\n            _iterator4.f();\n          }\n        }\n\n        if (equal) {\n          return this;\n        } else {\n          this._items.delete(item);\n        }\n      } // Verify all dependencies are part of the Set.\n\n\n      var _iterator5 = _createForOfIteratorHelper(deps),\n          _step5;\n\n      try {\n        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n          var _dep2 = _step5.value;\n\n          if (!this._items.has(_dep2)) {\n            throw new DependencyNotFoundException();\n          }\n        } // Verify there's no dependency cycle.\n\n      } catch (err) {\n        _iterator5.e(err);\n      } finally {\n        _iterator5.f();\n      }\n\n      this._checkCircularDependencies(item, deps);\n\n      this._items.set(item, new Set(deps));\n\n      return this;\n    }\n  }, {\n    key: \"delete\",\n    value: function _delete(item) {\n      if (!this._items.has(item)) {\n        return false;\n      } // Remove it from all dependencies if force == true.\n\n\n      this._items.forEach(function (value) {\n        return value.delete(item);\n      });\n\n      return this._items.delete(item);\n    }\n  }, {\n    key: Symbol.iterator,\n    value: /*#__PURE__*/_regeneratorRuntime.mark(function value() {\n      var copy, _iterator6, _step6, _step6$value, key, value, run, _iterator7, _step7, _step7$value, item, deps, _loop, _i, _run;\n\n      return _regeneratorRuntime.wrap(function value$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              copy = new Map(this._items);\n              _iterator6 = _createForOfIteratorHelper(copy.entries());\n\n              try {\n                for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n                  _step6$value = _slicedToArray(_step6.value, 2), key = _step6$value[0], value = _step6$value[1];\n                  copy.set(key, new Set(value));\n                }\n              } catch (err) {\n                _iterator6.e(err);\n              } finally {\n                _iterator6.f();\n              }\n\n            case 3:\n              if (!(copy.size > 0)) {\n                _context3.next = 18;\n                break;\n              }\n\n              run = []; // Take the first item without dependencies.\n\n              _iterator7 = _createForOfIteratorHelper(copy.entries());\n\n              try {\n                for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n                  _step7$value = _slicedToArray(_step7.value, 2), item = _step7$value[0], deps = _step7$value[1];\n\n                  if (deps.size == 0) {\n                    run.push(item);\n                  }\n                }\n              } catch (err) {\n                _iterator7.e(err);\n              } finally {\n                _iterator7.f();\n              }\n\n              _loop = /*#__PURE__*/_regeneratorRuntime.mark(function _loop() {\n                var item;\n                return _regeneratorRuntime.wrap(function _loop$(_context2) {\n                  while (1) {\n                    switch (_context2.prev = _context2.next) {\n                      case 0:\n                        item = _run[_i];\n                        copy.forEach(function (s) {\n                          return s.delete(item);\n                        });\n                        copy.delete(item);\n                        _context2.next = 5;\n                        return item;\n\n                      case 5:\n                      case \"end\":\n                        return _context2.stop();\n                    }\n                  }\n                }, _loop);\n              });\n              _i = 0, _run = run;\n\n            case 9:\n              if (!(_i < _run.length)) {\n                _context3.next = 14;\n                break;\n              }\n\n              return _context3.delegateYield(_loop(), \"t0\", 11);\n\n            case 11:\n              _i++;\n              _context3.next = 9;\n              break;\n\n            case 14:\n              if (!(run.length == 0)) {\n                _context3.next = 16;\n                break;\n              }\n\n              throw new CircularDependencyFoundException();\n\n            case 16:\n              _context3.next = 3;\n              break;\n\n            case 18:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, value, this);\n    })\n  }, {\n    key: Symbol.toStringTag,\n    get: function get() {\n      return 'Set';\n    }\n  }]);\n\n  return PartiallyOrderedSet;\n}();\n\nexports.PartiallyOrderedSet = PartiallyOrderedSet;","map":{"version":3,"sources":["/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@angular-devkit/build-angular/node_modules/@angular-devkit/core/src/utils/partially-ordered-set.js"],"names":["Object","defineProperty","exports","value","PartiallyOrderedSet","CircularDependencyFoundException","DependencyNotFoundException","exception_1","require","BaseException","_items","Map","item","deps","has","forEach","dep","_checkCircularDependencies","get","Set","clear","size","callbackfn","thisArg","x","call","values","Symbol","iterator","Array","isArray","itemDeps","equal","delete","set","copy","entries","key","run","push","s","length","toStringTag"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.PartiallyOrderedSet = exports.CircularDependencyFoundException = exports.DependencyNotFoundException = void 0;\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst exception_1 = require(\"../exception\");\nclass DependencyNotFoundException extends exception_1.BaseException {\n    constructor() { super('One of the dependencies is not part of the set.'); }\n}\nexports.DependencyNotFoundException = DependencyNotFoundException;\nclass CircularDependencyFoundException extends exception_1.BaseException {\n    constructor() { super('Circular dependencies found.'); }\n}\nexports.CircularDependencyFoundException = CircularDependencyFoundException;\nclass PartiallyOrderedSet {\n    constructor() {\n        this._items = new Map();\n    }\n    _checkCircularDependencies(item, deps) {\n        if (deps.has(item)) {\n            throw new CircularDependencyFoundException();\n        }\n        deps.forEach(dep => this._checkCircularDependencies(item, this._items.get(dep) || new Set()));\n    }\n    clear() {\n        this._items.clear();\n    }\n    has(item) {\n        return this._items.has(item);\n    }\n    get size() {\n        return this._items.size;\n    }\n    forEach(callbackfn, thisArg) {\n        for (const x of this) {\n            callbackfn.call(thisArg, x, x, this);\n        }\n    }\n    /**\n     * Returns an iterable of [v,v] pairs for every value `v` in the set.\n     */\n    *entries() {\n        for (const item of this) {\n            yield [item, item];\n        }\n    }\n    /**\n     * Despite its name, returns an iterable of the values in the set,\n     */\n    keys() {\n        return this.values();\n    }\n    /**\n     * Returns an iterable of values in the set.\n     */\n    values() {\n        return this[Symbol.iterator]();\n    }\n    add(item, deps = new Set()) {\n        if (Array.isArray(deps)) {\n            deps = new Set(deps);\n        }\n        // Verify item is not already in the set.\n        if (this._items.has(item)) {\n            const itemDeps = this._items.get(item) || new Set();\n            // If the dependency list is equal, just return, otherwise remove and keep going.\n            let equal = true;\n            for (const dep of deps) {\n                if (!itemDeps.has(dep)) {\n                    equal = false;\n                    break;\n                }\n            }\n            if (equal) {\n                for (const dep of itemDeps) {\n                    if (!deps.has(dep)) {\n                        equal = false;\n                        break;\n                    }\n                }\n            }\n            if (equal) {\n                return this;\n            }\n            else {\n                this._items.delete(item);\n            }\n        }\n        // Verify all dependencies are part of the Set.\n        for (const dep of deps) {\n            if (!this._items.has(dep)) {\n                throw new DependencyNotFoundException();\n            }\n        }\n        // Verify there's no dependency cycle.\n        this._checkCircularDependencies(item, deps);\n        this._items.set(item, new Set(deps));\n        return this;\n    }\n    delete(item) {\n        if (!this._items.has(item)) {\n            return false;\n        }\n        // Remove it from all dependencies if force == true.\n        this._items.forEach(value => value.delete(item));\n        return this._items.delete(item);\n    }\n    *[Symbol.iterator]() {\n        const copy = new Map(this._items);\n        for (const [key, value] of copy.entries()) {\n            copy.set(key, new Set(value));\n        }\n        while (copy.size > 0) {\n            const run = [];\n            // Take the first item without dependencies.\n            for (const [item, deps] of copy.entries()) {\n                if (deps.size == 0) {\n                    run.push(item);\n                }\n            }\n            for (const item of run) {\n                copy.forEach(s => s.delete(item));\n                copy.delete(item);\n                yield item;\n            }\n            if (run.length == 0) {\n                // uh oh...\n                throw new CircularDependencyFoundException();\n            }\n        }\n    }\n    get [Symbol.toStringTag]() {\n        return 'Set';\n    }\n}\nexports.PartiallyOrderedSet = PartiallyOrderedSet;\n"]},"metadata":{},"sourceType":"script"}