{"ast":null,"code":"(function (factory) {\n  if (typeof module === \"object\" && typeof module.exports === \"object\") {\n    var v = factory(require, exports);\n    if (v !== undefined) module.exports = v;\n  } else if (typeof define === \"function\" && define.amd) {\n    define(\"@angular/compiler-cli/ngcc/src/execution/cluster/executor\", [\"require\", \"exports\", \"tslib\", \"@angular/compiler-cli/ngcc/src/execution/cluster/master\"], factory);\n  }\n})(function (require, exports) {\n  \"use strict\";\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.ClusterExecutor = void 0;\n\n  var tslib_1 = require(\"tslib\");\n\n  var master_1 = require(\"@angular/compiler-cli/ngcc/src/execution/cluster/master\");\n  /**\n   * An `Executor` that processes tasks in parallel (on multiple processes) and completes\n   * asynchronously.\n   */\n\n\n  var ClusterExecutor =\n  /** @class */\n  function () {\n    function ClusterExecutor(workerCount, fileSystem, logger, fileWriter, pkgJsonUpdater, lockFile, createTaskCompletedCallback) {\n      this.workerCount = workerCount;\n      this.fileSystem = fileSystem;\n      this.logger = logger;\n      this.fileWriter = fileWriter;\n      this.pkgJsonUpdater = pkgJsonUpdater;\n      this.lockFile = lockFile;\n      this.createTaskCompletedCallback = createTaskCompletedCallback;\n    }\n\n    ClusterExecutor.prototype.execute = function (analyzeEntryPoints, _createCompileFn) {\n      return tslib_1.__awaiter(this, void 0, void 0, function () {\n        var _this = this;\n\n        return tslib_1.__generator(this, function (_a) {\n          return [2\n          /*return*/\n          , this.lockFile.lock(function () {\n            return tslib_1.__awaiter(_this, void 0, void 0, function () {\n              var master;\n              return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                  case 0:\n                    this.logger.debug(\"Running ngcc on \" + this.constructor.name + \" (using \" + this.workerCount + \" worker processes).\");\n                    master = new master_1.ClusterMaster(this.workerCount, this.fileSystem, this.logger, this.fileWriter, this.pkgJsonUpdater, analyzeEntryPoints, this.createTaskCompletedCallback);\n                    return [4\n                    /*yield*/\n                    , master.run()];\n\n                  case 1:\n                    return [2\n                    /*return*/\n                    , _a.sent()];\n                }\n              });\n            });\n          })];\n        });\n      });\n    };\n\n    return ClusterExecutor;\n  }();\n\n  exports.ClusterExecutor = ClusterExecutor;\n});","map":{"version":3,"sources":["../../../../../../../../../packages/compiler-cli/ngcc/src/execution/cluster/executor.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;AAeA,MAAA,QAAA,GAAA,OAAA,CAAA,yDAAA,CAAA;AAEA;;;AAGG;;;AACH,MAAA,eAAA;AAAA;AAAA,cAAA;AACE,aAAA,eAAA,CACY,WADZ,EACyC,UADzC,EAC+E,MAD/E,EAEY,UAFZ,EAE4C,cAF5C,EAGY,QAHZ,EAIY,2BAJZ,EAIoE;AAHxD,WAAA,WAAA,GAAA,WAAA;AAA6B,WAAA,UAAA,GAAA,UAAA;AAAsC,WAAA,MAAA,GAAA,MAAA;AACnE,WAAA,UAAA,GAAA,UAAA;AAAgC,WAAA,cAAA,GAAA,cAAA;AAChC,WAAA,QAAA,GAAA,QAAA;AACA,WAAA,2BAAA,GAAA,2BAAA;AAA4D;;AAElE,IAAA,eAAA,CAAA,SAAA,CAAA,OAAA,GAAN,UAAc,kBAAd,EAAwD,gBAAxD,EAAyF;;;;;AAEvF,iBAAA,CAAA;AAAA;AAAA,YAAO,KAAK,QAAL,CAAc,IAAd,CAAmB,YAAA;AAAA,mBAAA,OAAA,CAAA,SAAA,CAAA,KAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,YAAA;;;;;AACxB,yBAAK,MAAL,CAAY,KAAZ,CACI,qBAAmB,KAAK,WAAL,CAAiB,IAApC,GAAwC,UAAxC,GAAmD,KAAK,WAAxD,GAAmE,qBADvE;AAEM,oBAAA,MAAM,GAAG,IAAI,QAAA,CAAA,aAAJ,CACX,KAAK,WADM,EACO,KAAK,UADZ,EACwB,KAAK,MAD7B,EACqC,KAAK,UAD1C,EACsD,KAAK,cAD3D,EAEX,kBAFW,EAES,KAAK,2BAFd,CAAT;AAGC,2BAAA,CAAA;AAAA;AAAA,sBAAM,MAAM,CAAC,GAAP,EAAN,CAAA;;;AAAP,2BAAA,CAAA;AAAA;AAAA,sBAAO,EAAA,CAAA,IAAA,EAAP,CAAA;;;aANwB,CAAA;AAOzB,WAPM,CAAP,CAAA;;;AAQD,KAVK;;AAWR,WAAA,eAAA;AAAC,GAlBD,EAAA;;AAAa,EAAA,OAAA,CAAA,eAAA,GAAA,eAAA","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {PathManipulation} from '../../../../src/ngtsc/file_system';\nimport {Logger} from '../../../../src/ngtsc/logging';\nimport {AsyncLocker} from '../../locking/async_locker';\nimport {FileWriter} from '../../writing/file_writer';\nimport {PackageJsonUpdater} from '../../writing/package_json_updater';\nimport {AnalyzeEntryPointsFn, CreateCompileFn, Executor} from '../api';\nimport {CreateTaskCompletedCallback} from '../tasks/api';\n\nimport {ClusterMaster} from './master';\n\n/**\n * An `Executor` that processes tasks in parallel (on multiple processes) and completes\n * asynchronously.\n */\nexport class ClusterExecutor implements Executor {\n  constructor(\n      private workerCount: number, private fileSystem: PathManipulation, private logger: Logger,\n      private fileWriter: FileWriter, private pkgJsonUpdater: PackageJsonUpdater,\n      private lockFile: AsyncLocker,\n      private createTaskCompletedCallback: CreateTaskCompletedCallback) {}\n\n  async execute(analyzeEntryPoints: AnalyzeEntryPointsFn, _createCompileFn: CreateCompileFn):\n      Promise<void> {\n    return this.lockFile.lock(async () => {\n      this.logger.debug(\n          `Running ngcc on ${this.constructor.name} (using ${this.workerCount} worker processes).`);\n      const master = new ClusterMaster(\n          this.workerCount, this.fileSystem, this.logger, this.fileWriter, this.pkgJsonUpdater,\n          analyzeEntryPoints, this.createTaskCompletedCallback);\n      return await master.run();\n    });\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}