{"ast":null,"code":"'use strict';\n/**\n * `confirm` type prompt\n */\n\nvar _classCallCheck = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar _ = {\n  extend: require('lodash/extend'),\n  isBoolean: require('lodash/isBoolean')\n};\n\nvar chalk = require('chalk');\n\nvar _require = require('rxjs/operators'),\n    take = _require.take,\n    takeUntil = _require.takeUntil;\n\nvar Base = require('./base');\n\nvar observe = require('../utils/events');\n\nvar ConfirmPrompt = /*#__PURE__*/function (_Base) {\n  _inherits(ConfirmPrompt, _Base);\n\n  var _super = _createSuper(ConfirmPrompt);\n\n  function ConfirmPrompt(questions, rl, answers) {\n    var _this;\n\n    _classCallCheck(this, ConfirmPrompt);\n\n    _this = _super.call(this, questions, rl, answers);\n    var rawDefault = true;\n\n    _.extend(_this.opt, {\n      filter: function filter(input) {\n        var value = rawDefault;\n\n        if (input != null && input !== '') {\n          value = /^y(es)?/i.test(input);\n        }\n\n        return value;\n      }\n    });\n\n    if (_.isBoolean(_this.opt.default)) {\n      rawDefault = _this.opt.default;\n    }\n\n    _this.opt.default = rawDefault ? 'Y/n' : 'y/N';\n    return _this;\n  }\n  /**\n   * Start the Inquiry session\n   * @param  {Function} cb   Callback when prompt is done\n   * @return {this}\n   */\n\n\n  _createClass(ConfirmPrompt, [{\n    key: \"_run\",\n    value: function _run(cb) {\n      this.done = cb; // Once user confirm (enter key)\n\n      var events = observe(this.rl);\n      events.keypress.pipe(takeUntil(events.line)).forEach(this.onKeypress.bind(this));\n      events.line.pipe(take(1)).forEach(this.onEnd.bind(this)); // Init\n\n      this.render();\n      return this;\n    }\n    /**\n     * Render the prompt to screen\n     * @return {ConfirmPrompt} self\n     */\n\n  }, {\n    key: \"render\",\n    value: function render(answer) {\n      var message = this.getQuestion();\n\n      if (typeof answer === 'boolean') {\n        message += chalk.cyan(answer ? 'Yes' : 'No');\n      } else {\n        message += this.rl.line;\n      }\n\n      this.screen.render(message);\n      return this;\n    }\n    /**\n     * When user press `enter` key\n     */\n\n  }, {\n    key: \"onEnd\",\n    value: function onEnd(input) {\n      this.status = 'answered';\n      var output = this.opt.filter(input);\n      this.render(output);\n      this.screen.done();\n      this.done(output);\n    }\n    /**\n     * When user press a key\n     */\n\n  }, {\n    key: \"onKeypress\",\n    value: function onKeypress() {\n      this.render();\n    }\n  }]);\n\n  return ConfirmPrompt;\n}(Base);\n\nmodule.exports = ConfirmPrompt;","map":{"version":3,"sources":["/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/inquirer/lib/prompts/confirm.js"],"names":["_","extend","require","isBoolean","chalk","take","takeUntil","Base","observe","ConfirmPrompt","questions","rl","answers","rawDefault","opt","filter","input","value","test","default","cb","done","events","keypress","pipe","line","forEach","onKeypress","bind","onEnd","render","answer","message","getQuestion","cyan","screen","status","output","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n/**\n * `confirm` type prompt\n */\n\nvar _ = {\n  extend: require('lodash/extend'),\n  isBoolean: require('lodash/isBoolean'),\n};\nvar chalk = require('chalk');\nvar { take, takeUntil } = require('rxjs/operators');\nvar Base = require('./base');\nvar observe = require('../utils/events');\n\nclass ConfirmPrompt extends Base {\n  constructor(questions, rl, answers) {\n    super(questions, rl, answers);\n\n    var rawDefault = true;\n\n    _.extend(this.opt, {\n      filter: function (input) {\n        var value = rawDefault;\n        if (input != null && input !== '') {\n          value = /^y(es)?/i.test(input);\n        }\n\n        return value;\n      },\n    });\n\n    if (_.isBoolean(this.opt.default)) {\n      rawDefault = this.opt.default;\n    }\n\n    this.opt.default = rawDefault ? 'Y/n' : 'y/N';\n  }\n\n  /**\n   * Start the Inquiry session\n   * @param  {Function} cb   Callback when prompt is done\n   * @return {this}\n   */\n\n  _run(cb) {\n    this.done = cb;\n\n    // Once user confirm (enter key)\n    var events = observe(this.rl);\n    events.keypress.pipe(takeUntil(events.line)).forEach(this.onKeypress.bind(this));\n\n    events.line.pipe(take(1)).forEach(this.onEnd.bind(this));\n\n    // Init\n    this.render();\n\n    return this;\n  }\n\n  /**\n   * Render the prompt to screen\n   * @return {ConfirmPrompt} self\n   */\n\n  render(answer) {\n    var message = this.getQuestion();\n\n    if (typeof answer === 'boolean') {\n      message += chalk.cyan(answer ? 'Yes' : 'No');\n    } else {\n      message += this.rl.line;\n    }\n\n    this.screen.render(message);\n\n    return this;\n  }\n\n  /**\n   * When user press `enter` key\n   */\n\n  onEnd(input) {\n    this.status = 'answered';\n\n    var output = this.opt.filter(input);\n    this.render(output);\n\n    this.screen.done();\n    this.done(output);\n  }\n\n  /**\n   * When user press a key\n   */\n\n  onKeypress() {\n    this.render();\n  }\n}\n\nmodule.exports = ConfirmPrompt;\n"]},"metadata":{},"sourceType":"script"}