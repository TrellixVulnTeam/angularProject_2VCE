{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nvar _classCallCheck = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/createClass\");\n\nvar asyncLib = require(\"neo-async\");\n\nvar PrefetchDependency = require(\"./dependencies/PrefetchDependency\");\n\nvar NormalModule = require(\"./NormalModule\");\n/** @typedef {import(\"./Compiler\")} Compiler */\n\n\nvar AutomaticPrefetchPlugin = /*#__PURE__*/function () {\n  function AutomaticPrefetchPlugin() {\n    _classCallCheck(this, AutomaticPrefetchPlugin);\n  }\n\n  _createClass(AutomaticPrefetchPlugin, [{\n    key: \"apply\",\n    value:\n    /**\n     * Apply the plugin\n     * @param {Compiler} compiler Webpack Compiler\n     * @returns {void}\n     */\n    function apply(compiler) {\n      compiler.hooks.compilation.tap(\"AutomaticPrefetchPlugin\", function (compilation, _ref) {\n        var normalModuleFactory = _ref.normalModuleFactory;\n        compilation.dependencyFactories.set(PrefetchDependency, normalModuleFactory);\n      });\n      var lastModules = null;\n      compiler.hooks.afterCompile.tap(\"AutomaticPrefetchPlugin\", function (compilation) {\n        lastModules = compilation.modules.filter(function (m) {\n          return m instanceof NormalModule;\n        }).map(function (\n        /** @type {NormalModule} */\n        m) {\n          return {\n            context: m.context,\n            request: m.request\n          };\n        });\n      });\n      compiler.hooks.make.tapAsync(\"AutomaticPrefetchPlugin\", function (compilation, callback) {\n        if (!lastModules) return callback();\n        asyncLib.forEach(lastModules, function (m, callback) {\n          compilation.prefetch(m.context || compiler.context, new PrefetchDependency(m.request), callback);\n        }, callback);\n      });\n    }\n  }]);\n\n  return AutomaticPrefetchPlugin;\n}();\n\nmodule.exports = AutomaticPrefetchPlugin;","map":{"version":3,"sources":["/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/webpack/lib/AutomaticPrefetchPlugin.js"],"names":["asyncLib","require","PrefetchDependency","NormalModule","AutomaticPrefetchPlugin","compiler","hooks","compilation","tap","normalModuleFactory","dependencyFactories","set","lastModules","afterCompile","modules","filter","m","map","context","request","make","tapAsync","callback","forEach","prefetch","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;;;;;AAEA,IAAMA,QAAQ,GAAGC,OAAO,CAAC,WAAD,CAAxB;;AACA,IAAMC,kBAAkB,GAAGD,OAAO,CAAC,mCAAD,CAAlC;;AACA,IAAME,YAAY,GAAGF,OAAO,CAAC,gBAAD,CAA5B;AAEA;;;IAEMG,uB;;;;;;;;AACL;AACD;AACA;AACA;AACA;AACC,mBAAMC,QAAN,EAAgB;AACfA,MAAAA,QAAQ,CAACC,KAAT,CAAeC,WAAf,CAA2BC,GAA3B,CACC,yBADD,EAEC,UAACD,WAAD,QAA0C;AAAA,YAA1BE,mBAA0B,QAA1BA,mBAA0B;AACzCF,QAAAA,WAAW,CAACG,mBAAZ,CAAgCC,GAAhC,CACCT,kBADD,EAECO,mBAFD;AAIA,OAPF;AASA,UAAIG,WAAW,GAAG,IAAlB;AACAP,MAAAA,QAAQ,CAACC,KAAT,CAAeO,YAAf,CAA4BL,GAA5B,CAAgC,yBAAhC,EAA2D,UAAAD,WAAW,EAAI;AACzEK,QAAAA,WAAW,GAAGL,WAAW,CAACO,OAAZ,CACZC,MADY,CACL,UAAAC,CAAC;AAAA,iBAAIA,CAAC,YAAYb,YAAjB;AAAA,SADI,EAEZc,GAFY,CAER;AAAC;AAA4BD,QAAAA,CAA7B;AAAA,iBAAoC;AACxCE,YAAAA,OAAO,EAAEF,CAAC,CAACE,OAD6B;AAExCC,YAAAA,OAAO,EAAEH,CAAC,CAACG;AAF6B,WAApC;AAAA,SAFQ,CAAd;AAMA,OAPD;AAQAd,MAAAA,QAAQ,CAACC,KAAT,CAAec,IAAf,CAAoBC,QAApB,CACC,yBADD,EAEC,UAACd,WAAD,EAAce,QAAd,EAA2B;AAC1B,YAAI,CAACV,WAAL,EAAkB,OAAOU,QAAQ,EAAf;AAClBtB,QAAAA,QAAQ,CAACuB,OAAT,CACCX,WADD,EAEC,UAACI,CAAD,EAAIM,QAAJ,EAAiB;AAChBf,UAAAA,WAAW,CAACiB,QAAZ,CACCR,CAAC,CAACE,OAAF,IAAab,QAAQ,CAACa,OADvB,EAEC,IAAIhB,kBAAJ,CAAuBc,CAAC,CAACG,OAAzB,CAFD,EAGCG,QAHD;AAKA,SARF,EASCA,QATD;AAWA,OAfF;AAiBA;;;;;;AAEFG,MAAM,CAACC,OAAP,GAAiBtB,uBAAjB","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst asyncLib = require(\"neo-async\");\nconst PrefetchDependency = require(\"./dependencies/PrefetchDependency\");\nconst NormalModule = require(\"./NormalModule\");\n\n/** @typedef {import(\"./Compiler\")} Compiler */\n\nclass AutomaticPrefetchPlugin {\n\t/**\n\t * Apply the plugin\n\t * @param {Compiler} compiler Webpack Compiler\n\t * @returns {void}\n\t */\n\tapply(compiler) {\n\t\tcompiler.hooks.compilation.tap(\n\t\t\t\"AutomaticPrefetchPlugin\",\n\t\t\t(compilation, { normalModuleFactory }) => {\n\t\t\t\tcompilation.dependencyFactories.set(\n\t\t\t\t\tPrefetchDependency,\n\t\t\t\t\tnormalModuleFactory\n\t\t\t\t);\n\t\t\t}\n\t\t);\n\t\tlet lastModules = null;\n\t\tcompiler.hooks.afterCompile.tap(\"AutomaticPrefetchPlugin\", compilation => {\n\t\t\tlastModules = compilation.modules\n\t\t\t\t.filter(m => m instanceof NormalModule)\n\t\t\t\t.map((/** @type {NormalModule} */ m) => ({\n\t\t\t\t\tcontext: m.context,\n\t\t\t\t\trequest: m.request\n\t\t\t\t}));\n\t\t});\n\t\tcompiler.hooks.make.tapAsync(\n\t\t\t\"AutomaticPrefetchPlugin\",\n\t\t\t(compilation, callback) => {\n\t\t\t\tif (!lastModules) return callback();\n\t\t\t\tasyncLib.forEach(\n\t\t\t\t\tlastModules,\n\t\t\t\t\t(m, callback) => {\n\t\t\t\t\t\tcompilation.prefetch(\n\t\t\t\t\t\t\tm.context || compiler.context,\n\t\t\t\t\t\t\tnew PrefetchDependency(m.request),\n\t\t\t\t\t\t\tcallback\n\t\t\t\t\t\t);\n\t\t\t\t\t},\n\t\t\t\t\tcallback\n\t\t\t\t);\n\t\t\t}\n\t\t);\n\t}\n}\nmodule.exports = AutomaticPrefetchPlugin;\n"]},"metadata":{},"sourceType":"script"}