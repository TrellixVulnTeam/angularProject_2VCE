{"ast":null,"code":"'use strict';\n\nvar errorEx = require('error-ex');\n\nvar fallback = require('json-parse-even-better-errors');\n\nvar _require = require('lines-and-columns'),\n    LinesAndColumns = _require.default;\n\nvar _require2 = require('@babel/code-frame'),\n    codeFrameColumns = _require2.codeFrameColumns;\n\nvar JSONError = errorEx('JSONError', {\n  fileName: errorEx.append('in %s'),\n  codeFrame: errorEx.append('\\n\\n%s\\n')\n});\n\nvar parseJson = function parseJson(string, reviver, filename) {\n  if (typeof reviver === 'string') {\n    filename = reviver;\n    reviver = null;\n  }\n\n  try {\n    try {\n      return JSON.parse(string, reviver);\n    } catch (error) {\n      fallback(string, reviver);\n      throw error;\n    }\n  } catch (error) {\n    error.message = error.message.replace(/\\n/g, '');\n    var indexMatch = error.message.match(/in JSON at position (\\d+) while parsing/);\n    var jsonError = new JSONError(error);\n\n    if (filename) {\n      jsonError.fileName = filename;\n    }\n\n    if (indexMatch && indexMatch.length > 0) {\n      var lines = new LinesAndColumns(string);\n      var index = Number(indexMatch[1]);\n      var location = lines.locationForIndex(index);\n      var codeFrame = codeFrameColumns(string, {\n        start: {\n          line: location.line + 1,\n          column: location.column + 1\n        }\n      }, {\n        highlightCode: true\n      });\n      jsonError.codeFrame = codeFrame;\n    }\n\n    throw jsonError;\n  }\n};\n\nparseJson.JSONError = JSONError;\nmodule.exports = parseJson;","map":{"version":3,"sources":["/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@angular-devkit/build-angular/node_modules/parse-json/index.js"],"names":["errorEx","require","fallback","LinesAndColumns","default","codeFrameColumns","JSONError","fileName","append","codeFrame","parseJson","string","reviver","filename","JSON","parse","error","message","replace","indexMatch","match","jsonError","length","lines","index","Number","location","locationForIndex","start","line","column","highlightCode","module","exports"],"mappings":"AAAA;;AACA,IAAMA,OAAO,GAAGC,OAAO,CAAC,UAAD,CAAvB;;AACA,IAAMC,QAAQ,GAAGD,OAAO,CAAC,+BAAD,CAAxB;;AACA,eAAmCA,OAAO,CAAC,mBAAD,CAA1C;AAAA,IAAgBE,eAAhB,YAAOC,OAAP;;AACA,gBAA2BH,OAAO,CAAC,mBAAD,CAAlC;AAAA,IAAOI,gBAAP,aAAOA,gBAAP;;AAEA,IAAMC,SAAS,GAAGN,OAAO,CAAC,WAAD,EAAc;AACtCO,EAAAA,QAAQ,EAAEP,OAAO,CAACQ,MAAR,CAAe,OAAf,CAD4B;AAEtCC,EAAAA,SAAS,EAAET,OAAO,CAACQ,MAAR,CAAe,UAAf;AAF2B,CAAd,CAAzB;;AAKA,IAAME,SAAS,GAAG,SAAZA,SAAY,CAACC,MAAD,EAASC,OAAT,EAAkBC,QAAlB,EAA+B;AAChD,MAAI,OAAOD,OAAP,KAAmB,QAAvB,EAAiC;AAChCC,IAAAA,QAAQ,GAAGD,OAAX;AACAA,IAAAA,OAAO,GAAG,IAAV;AACA;;AAED,MAAI;AACH,QAAI;AACH,aAAOE,IAAI,CAACC,KAAL,CAAWJ,MAAX,EAAmBC,OAAnB,CAAP;AACA,KAFD,CAEE,OAAOI,KAAP,EAAc;AACfd,MAAAA,QAAQ,CAACS,MAAD,EAASC,OAAT,CAAR;AACA,YAAMI,KAAN;AACA;AACD,GAPD,CAOE,OAAOA,KAAP,EAAc;AACfA,IAAAA,KAAK,CAACC,OAAN,GAAgBD,KAAK,CAACC,OAAN,CAAcC,OAAd,CAAsB,KAAtB,EAA6B,EAA7B,CAAhB;AACA,QAAMC,UAAU,GAAGH,KAAK,CAACC,OAAN,CAAcG,KAAd,CAAoB,yCAApB,CAAnB;AAEA,QAAMC,SAAS,GAAG,IAAIf,SAAJ,CAAcU,KAAd,CAAlB;;AACA,QAAIH,QAAJ,EAAc;AACbQ,MAAAA,SAAS,CAACd,QAAV,GAAqBM,QAArB;AACA;;AAED,QAAIM,UAAU,IAAIA,UAAU,CAACG,MAAX,GAAoB,CAAtC,EAAyC;AACxC,UAAMC,KAAK,GAAG,IAAIpB,eAAJ,CAAoBQ,MAApB,CAAd;AACA,UAAMa,KAAK,GAAGC,MAAM,CAACN,UAAU,CAAC,CAAD,CAAX,CAApB;AACA,UAAMO,QAAQ,GAAGH,KAAK,CAACI,gBAAN,CAAuBH,KAAvB,CAAjB;AAEA,UAAMf,SAAS,GAAGJ,gBAAgB,CACjCM,MADiC,EAEjC;AAACiB,QAAAA,KAAK,EAAE;AAACC,UAAAA,IAAI,EAAEH,QAAQ,CAACG,IAAT,GAAgB,CAAvB;AAA0BC,UAAAA,MAAM,EAAEJ,QAAQ,CAACI,MAAT,GAAkB;AAApD;AAAR,OAFiC,EAGjC;AAACC,QAAAA,aAAa,EAAE;AAAhB,OAHiC,CAAlC;AAMAV,MAAAA,SAAS,CAACZ,SAAV,GAAsBA,SAAtB;AACA;;AAED,UAAMY,SAAN;AACA;AACD,CAtCD;;AAwCAX,SAAS,CAACJ,SAAV,GAAsBA,SAAtB;AAEA0B,MAAM,CAACC,OAAP,GAAiBvB,SAAjB","sourcesContent":["'use strict';\nconst errorEx = require('error-ex');\nconst fallback = require('json-parse-even-better-errors');\nconst {default: LinesAndColumns} = require('lines-and-columns');\nconst {codeFrameColumns} = require('@babel/code-frame');\n\nconst JSONError = errorEx('JSONError', {\n\tfileName: errorEx.append('in %s'),\n\tcodeFrame: errorEx.append('\\n\\n%s\\n')\n});\n\nconst parseJson = (string, reviver, filename) => {\n\tif (typeof reviver === 'string') {\n\t\tfilename = reviver;\n\t\treviver = null;\n\t}\n\n\ttry {\n\t\ttry {\n\t\t\treturn JSON.parse(string, reviver);\n\t\t} catch (error) {\n\t\t\tfallback(string, reviver);\n\t\t\tthrow error;\n\t\t}\n\t} catch (error) {\n\t\terror.message = error.message.replace(/\\n/g, '');\n\t\tconst indexMatch = error.message.match(/in JSON at position (\\d+) while parsing/);\n\n\t\tconst jsonError = new JSONError(error);\n\t\tif (filename) {\n\t\t\tjsonError.fileName = filename;\n\t\t}\n\n\t\tif (indexMatch && indexMatch.length > 0) {\n\t\t\tconst lines = new LinesAndColumns(string);\n\t\t\tconst index = Number(indexMatch[1]);\n\t\t\tconst location = lines.locationForIndex(index);\n\n\t\t\tconst codeFrame = codeFrameColumns(\n\t\t\t\tstring,\n\t\t\t\t{start: {line: location.line + 1, column: location.column + 1}},\n\t\t\t\t{highlightCode: true}\n\t\t\t);\n\n\t\t\tjsonError.codeFrame = codeFrame;\n\t\t}\n\n\t\tthrow jsonError;\n\t}\n};\n\nparseJson.JSONError = JSONError;\n\nmodule.exports = parseJson;\n"]},"metadata":{},"sourceType":"script"}