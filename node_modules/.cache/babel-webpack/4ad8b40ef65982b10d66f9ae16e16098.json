{"ast":null,"code":"/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n(function (factory) {\n  if (typeof module === \"object\" && typeof module.exports === \"object\") {\n    var v = factory(require, exports);\n    if (v !== undefined) module.exports = v;\n  } else if (typeof define === \"function\" && define.amd) {\n    define(\"@angular/compiler-cli/src/ngtsc/indexer/src/api\", [\"require\", \"exports\"], factory);\n  }\n})(function (require, exports) {\n  \"use strict\";\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.AbsoluteSourceSpan = exports.IdentifierKind = void 0;\n  /**\n   * Describes the kind of identifier found in a template.\n   */\n\n  var IdentifierKind;\n\n  (function (IdentifierKind) {\n    IdentifierKind[IdentifierKind[\"Property\"] = 0] = \"Property\";\n    IdentifierKind[IdentifierKind[\"Method\"] = 1] = \"Method\";\n    IdentifierKind[IdentifierKind[\"Element\"] = 2] = \"Element\";\n    IdentifierKind[IdentifierKind[\"Template\"] = 3] = \"Template\";\n    IdentifierKind[IdentifierKind[\"Attribute\"] = 4] = \"Attribute\";\n    IdentifierKind[IdentifierKind[\"Reference\"] = 5] = \"Reference\";\n    IdentifierKind[IdentifierKind[\"Variable\"] = 6] = \"Variable\";\n  })(IdentifierKind = exports.IdentifierKind || (exports.IdentifierKind = {}));\n  /**\n   * Describes the absolute byte offsets of a text anchor in a source code.\n   */\n\n\n  var AbsoluteSourceSpan =\n  /** @class */\n  function () {\n    function AbsoluteSourceSpan(start, end) {\n      this.start = start;\n      this.end = end;\n    }\n\n    return AbsoluteSourceSpan;\n  }();\n\n  exports.AbsoluteSourceSpan = AbsoluteSourceSpan;\n});","map":{"version":3,"sources":["../../../../../../../../../packages/compiler-cli/src/ngtsc/indexer/src/api.ts"],"names":[],"mappings":"AAAA;;;;;;AAMG;;;;;;;;;;;;;;;AAKH;;AAEG;;AACH,MAAY,cAAZ;;AAAA,GAAA,UAAY,cAAZ,EAA0B;AACxB,IAAA,cAAA,CAAA,cAAA,CAAA,UAAA,CAAA,GAAA,CAAA,CAAA,GAAA,UAAA;AACA,IAAA,cAAA,CAAA,cAAA,CAAA,QAAA,CAAA,GAAA,CAAA,CAAA,GAAA,QAAA;AACA,IAAA,cAAA,CAAA,cAAA,CAAA,SAAA,CAAA,GAAA,CAAA,CAAA,GAAA,SAAA;AACA,IAAA,cAAA,CAAA,cAAA,CAAA,UAAA,CAAA,GAAA,CAAA,CAAA,GAAA,UAAA;AACA,IAAA,cAAA,CAAA,cAAA,CAAA,WAAA,CAAA,GAAA,CAAA,CAAA,GAAA,WAAA;AACA,IAAA,cAAA,CAAA,cAAA,CAAA,WAAA,CAAA,GAAA,CAAA,CAAA,GAAA,WAAA;AACA,IAAA,cAAA,CAAA,cAAA,CAAA,UAAA,CAAA,GAAA,CAAA,CAAA,GAAA,UAAA;AACD,GARD,EAAY,cAAc,GAAd,OAAA,CAAA,cAAA,KAAA,OAAA,CAAA,cAAA,GAAc,EAAd,CAAZ;AAoGA;;AAEG;;;AACH,MAAA,kBAAA;AAAA;AAAA,cAAA;AACE,aAAA,kBAAA,CAAmB,KAAnB,EAAyC,GAAzC,EAAoD;AAAjC,WAAA,KAAA,GAAA,KAAA;AAAsB,WAAA,GAAA,GAAA,GAAA;AAAe;;AAC1D,WAAA,kBAAA;AAAC,GAFD,EAAA;;AAAa,EAAA,OAAA,CAAA,kBAAA,GAAA,kBAAA","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ParseSourceFile} from '@angular/compiler';\nimport {ClassDeclaration, DeclarationNode} from '../../reflection';\n\n/**\n * Describes the kind of identifier found in a template.\n */\nexport enum IdentifierKind {\n  Property,\n  Method,\n  Element,\n  Template,\n  Attribute,\n  Reference,\n  Variable,\n}\n\n/**\n * Describes a semantically-interesting identifier in a template, such as an interpolated variable\n * or selector.\n */\nexport interface TemplateIdentifier {\n  name: string;\n  span: AbsoluteSourceSpan;\n  kind: IdentifierKind;\n}\n\n/** Describes a template expression, which may have a template reference or variable target. */\ninterface ExpressionIdentifier extends TemplateIdentifier {\n  /**\n   * ReferenceIdentifier or VariableIdentifier in the template that this identifier targets, if\n   * any. If the target is `null`, it points to a declaration on the component class.\n   * */\n  target: ReferenceIdentifier|VariableIdentifier|null;\n}\n\n/** Describes a property accessed in a template. */\nexport interface PropertyIdentifier extends ExpressionIdentifier {\n  kind: IdentifierKind.Property;\n}\n\n/** Describes a method accessed in a template. */\nexport interface MethodIdentifier extends ExpressionIdentifier {\n  kind: IdentifierKind.Method;\n}\n\n/** Describes an element attribute in a template. */\nexport interface AttributeIdentifier extends TemplateIdentifier {\n  kind: IdentifierKind.Attribute;\n}\n\n/** A reference to a directive node and its selector. */\ninterface DirectiveReference {\n  node: ClassDeclaration;\n  selector: string;\n}\n/** A base interface for element and template identifiers. */\ninterface BaseElementOrTemplateIdentifier extends TemplateIdentifier {\n  /** Attributes on an element or template. */\n  attributes: Set<AttributeIdentifier>;\n\n  /** Directives applied to an element or template. */\n  usedDirectives: Set<DirectiveReference>;\n}\n/**\n * Describes an indexed element in a template. The name of an `ElementIdentifier` is the entire\n * element tag, which can be parsed by an indexer to determine where used directives should be\n * referenced.\n */\nexport interface ElementIdentifier extends BaseElementOrTemplateIdentifier {\n  kind: IdentifierKind.Element;\n}\n\n/** Describes an indexed template node in a component template file. */\nexport interface TemplateNodeIdentifier extends BaseElementOrTemplateIdentifier {\n  kind: IdentifierKind.Template;\n}\n\n/** Describes a reference in a template like \"foo\" in `<div #foo></div>`. */\nexport interface ReferenceIdentifier extends TemplateIdentifier {\n  kind: IdentifierKind.Reference;\n\n  /** The target of this reference. If the target is not known, this is `null`. */\n  target: {\n    /** The template AST node that the reference targets. */\n    node: ElementIdentifier|TemplateIdentifier;\n\n    /**\n     * The directive on `node` that the reference targets. If no directive is targeted, this is\n     * `null`.\n     */\n    directive: ClassDeclaration | null;\n  }|null;\n}\n\n/** Describes a template variable like \"foo\" in `<div *ngFor=\"let foo of foos\"></div>`. */\nexport interface VariableIdentifier extends TemplateIdentifier {\n  kind: IdentifierKind.Variable;\n}\n\n/**\n * Identifiers recorded at the top level of the template, without any context about the HTML nodes\n * they were discovered in.\n */\nexport type TopLevelIdentifier = PropertyIdentifier|MethodIdentifier|ElementIdentifier|\n    TemplateNodeIdentifier|ReferenceIdentifier|VariableIdentifier;\n\n/**\n * Describes the absolute byte offsets of a text anchor in a source code.\n */\nexport class AbsoluteSourceSpan {\n  constructor(public start: number, public end: number) {}\n}\n\n/**\n * Describes an analyzed, indexed component and its template.\n */\nexport interface IndexedComponent {\n  name: string;\n  selector: string|null;\n  file: ParseSourceFile;\n  template: {\n    identifiers: Set<TopLevelIdentifier>,\n    usedComponents: Set<DeclarationNode>,\n    isInline: boolean,\n    file: ParseSourceFile;\n  };\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}