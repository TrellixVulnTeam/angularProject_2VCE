{"ast":null,"code":"/*\n MIT License http://www.opensource.org/licenses/mit-license.php\n Author Tobias Koppers @sokra\n */\n\"use strict\";\n\nvar _classCallCheck = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _require = require(\"webpack-sources\"),\n    ConcatSource = _require.ConcatSource;\n\nvar Template = require(\"./Template\");\n/** @typedef {import(\"./Compilation\")} Compilation */\n\n/**\n * @typedef {Object} AmdMainTemplatePluginOptions\n * @param {string=} name the library name\n * @property {boolean=} requireAsWrapper\n */\n\n\nvar AmdMainTemplatePlugin = /*#__PURE__*/function () {\n  /**\n   * @param {AmdMainTemplatePluginOptions} options the plugin options\n   */\n  function AmdMainTemplatePlugin(options) {\n    _classCallCheck(this, AmdMainTemplatePlugin);\n\n    if (!options || typeof options === \"string\") {\n      this.name = options;\n      this.requireAsWrapper = false;\n    } else {\n      this.name = options.name;\n      this.requireAsWrapper = options.requireAsWrapper;\n    }\n  }\n  /**\n   * @param {Compilation} compilation the compilation instance\n   * @returns {void}\n   */\n\n\n  _createClass(AmdMainTemplatePlugin, [{\n    key: \"apply\",\n    value: function apply(compilation) {\n      var _this = this;\n\n      var mainTemplate = compilation.mainTemplate,\n          chunkTemplate = compilation.chunkTemplate;\n\n      var onRenderWithEntry = function onRenderWithEntry(source, chunk, hash) {\n        var externals = chunk.getModules().filter(function (m) {\n          return m.external;\n        });\n        var externalsDepsArray = JSON.stringify(externals.map(function (m) {\n          return typeof m.request === \"object\" ? m.request.amd : m.request;\n        }));\n        var externalsArguments = externals.map(function (m) {\n          return \"__WEBPACK_EXTERNAL_MODULE_\".concat(Template.toIdentifier(\"\".concat(m.id)), \"__\");\n        }).join(\", \");\n\n        if (_this.requireAsWrapper) {\n          return new ConcatSource(\"require(\".concat(externalsDepsArray, \", function(\").concat(externalsArguments, \") { return \"), source, \"});\");\n        } else if (_this.name) {\n          var name = mainTemplate.getAssetPath(_this.name, {\n            hash: hash,\n            chunk: chunk\n          });\n          return new ConcatSource(\"define(\".concat(JSON.stringify(name), \", \").concat(externalsDepsArray, \", function(\").concat(externalsArguments, \") { return \"), source, \"});\");\n        } else if (externalsArguments) {\n          return new ConcatSource(\"define(\".concat(externalsDepsArray, \", function(\").concat(externalsArguments, \") { return \"), source, \"});\");\n        } else {\n          return new ConcatSource(\"define(function() { return \", source, \"});\");\n        }\n      };\n\n      for (var _i = 0, _arr = [mainTemplate, chunkTemplate]; _i < _arr.length; _i++) {\n        var template = _arr[_i];\n        template.hooks.renderWithEntry.tap(\"AmdMainTemplatePlugin\", onRenderWithEntry);\n      }\n\n      mainTemplate.hooks.globalHashPaths.tap(\"AmdMainTemplatePlugin\", function (paths) {\n        if (_this.name) {\n          paths.push(_this.name);\n        }\n\n        return paths;\n      });\n      mainTemplate.hooks.hash.tap(\"AmdMainTemplatePlugin\", function (hash) {\n        hash.update(\"exports amd\");\n\n        if (_this.name) {\n          hash.update(_this.name);\n        }\n      });\n    }\n  }]);\n\n  return AmdMainTemplatePlugin;\n}();\n\nmodule.exports = AmdMainTemplatePlugin;","map":{"version":3,"sources":["/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/webpack/lib/AmdMainTemplatePlugin.js"],"names":["require","ConcatSource","Template","AmdMainTemplatePlugin","options","name","requireAsWrapper","compilation","mainTemplate","chunkTemplate","onRenderWithEntry","source","chunk","hash","externals","getModules","filter","m","external","externalsDepsArray","JSON","stringify","map","request","amd","externalsArguments","toIdentifier","id","join","getAssetPath","template","hooks","renderWithEntry","tap","globalHashPaths","paths","push","update","module","exports"],"mappings":"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","sourcesContent":["/*\n MIT License http://www.opensource.org/licenses/mit-license.php\n Author Tobias Koppers @sokra\n */\n\n\"use strict\";\n\nconst { ConcatSource } = require(\"webpack-sources\");\nconst Template = require(\"./Template\");\n\n/** @typedef {import(\"./Compilation\")} Compilation */\n\n/**\n * @typedef {Object} AmdMainTemplatePluginOptions\n * @param {string=} name the library name\n * @property {boolean=} requireAsWrapper\n */\n\nclass AmdMainTemplatePlugin {\n\t/**\n\t * @param {AmdMainTemplatePluginOptions} options the plugin options\n\t */\n\tconstructor(options) {\n\t\tif (!options || typeof options === \"string\") {\n\t\t\tthis.name = options;\n\t\t\tthis.requireAsWrapper = false;\n\t\t} else {\n\t\t\tthis.name = options.name;\n\t\t\tthis.requireAsWrapper = options.requireAsWrapper;\n\t\t}\n\t}\n\n\t/**\n\t * @param {Compilation} compilation the compilation instance\n\t * @returns {void}\n\t */\n\tapply(compilation) {\n\t\tconst { mainTemplate, chunkTemplate } = compilation;\n\n\t\tconst onRenderWithEntry = (source, chunk, hash) => {\n\t\t\tconst externals = chunk.getModules().filter(m => m.external);\n\t\t\tconst externalsDepsArray = JSON.stringify(\n\t\t\t\texternals.map(m =>\n\t\t\t\t\ttypeof m.request === \"object\" ? m.request.amd : m.request\n\t\t\t\t)\n\t\t\t);\n\t\t\tconst externalsArguments = externals\n\t\t\t\t.map(\n\t\t\t\t\tm => `__WEBPACK_EXTERNAL_MODULE_${Template.toIdentifier(`${m.id}`)}__`\n\t\t\t\t)\n\t\t\t\t.join(\", \");\n\n\t\t\tif (this.requireAsWrapper) {\n\t\t\t\treturn new ConcatSource(\n\t\t\t\t\t`require(${externalsDepsArray}, function(${externalsArguments}) { return `,\n\t\t\t\t\tsource,\n\t\t\t\t\t\"});\"\n\t\t\t\t);\n\t\t\t} else if (this.name) {\n\t\t\t\tconst name = mainTemplate.getAssetPath(this.name, {\n\t\t\t\t\thash,\n\t\t\t\t\tchunk\n\t\t\t\t});\n\n\t\t\t\treturn new ConcatSource(\n\t\t\t\t\t`define(${JSON.stringify(\n\t\t\t\t\t\tname\n\t\t\t\t\t)}, ${externalsDepsArray}, function(${externalsArguments}) { return `,\n\t\t\t\t\tsource,\n\t\t\t\t\t\"});\"\n\t\t\t\t);\n\t\t\t} else if (externalsArguments) {\n\t\t\t\treturn new ConcatSource(\n\t\t\t\t\t`define(${externalsDepsArray}, function(${externalsArguments}) { return `,\n\t\t\t\t\tsource,\n\t\t\t\t\t\"});\"\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\treturn new ConcatSource(\"define(function() { return \", source, \"});\");\n\t\t\t}\n\t\t};\n\n\t\tfor (const template of [mainTemplate, chunkTemplate]) {\n\t\t\ttemplate.hooks.renderWithEntry.tap(\n\t\t\t\t\"AmdMainTemplatePlugin\",\n\t\t\t\tonRenderWithEntry\n\t\t\t);\n\t\t}\n\n\t\tmainTemplate.hooks.globalHashPaths.tap(\"AmdMainTemplatePlugin\", paths => {\n\t\t\tif (this.name) {\n\t\t\t\tpaths.push(this.name);\n\t\t\t}\n\t\t\treturn paths;\n\t\t});\n\n\t\tmainTemplate.hooks.hash.tap(\"AmdMainTemplatePlugin\", hash => {\n\t\t\thash.update(\"exports amd\");\n\t\t\tif (this.name) {\n\t\t\t\thash.update(this.name);\n\t\t\t}\n\t\t});\n\t}\n}\n\nmodule.exports = AmdMainTemplatePlugin;\n"]},"metadata":{},"sourceType":"script"}