{"ast":null,"code":"'use strict';\n\nvar _toConsumableArray = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/toConsumableArray\");\n\nvar _taggedTemplateLiteral = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/taggedTemplateLiteral\");\n\nvar _objectSpread = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/objectSpread2\");\n\nvar _regeneratorRuntime = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _templateObject;\n\nvar _require = require('util'),\n    promisify = _require.promisify;\n\nvar path = require('path');\n\nvar childProcess = require('child_process');\n\nvar fs = require('fs');\n\nvar isWsl = require('is-wsl');\n\nvar isDocker = require('is-docker');\n\nvar pAccess = promisify(fs.access);\nvar pExecFile = promisify(childProcess.execFile); // Path to included `xdg-open`.\n\nvar localXdgOpenPath = path.join(__dirname, 'xdg-open'); // Convert a path from WSL format to Windows format:\n// `/mnt/c/Program Files/Example/MyApp.exe` → `C:\\Program Files\\Example\\MyApp.exe`\n\nvar wslToWindowsPath = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(path) {\n    var _yield$pExecFile, stdout;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return pExecFile('wslpath', ['-w', path]);\n\n          case 2:\n            _yield$pExecFile = _context.sent;\n            stdout = _yield$pExecFile.stdout;\n            return _context.abrupt(\"return\", stdout.trim());\n\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function wslToWindowsPath(_x) {\n    return _ref.apply(this, arguments);\n  };\n}(); // Convert a path from Windows format to WSL format\n\n\nvar windowsToWslPath = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(path) {\n    var _yield$pExecFile2, stdout;\n\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return pExecFile('wslpath', [path]);\n\n          case 2:\n            _yield$pExecFile2 = _context2.sent;\n            stdout = _yield$pExecFile2.stdout;\n            return _context2.abrupt(\"return\", stdout.trim());\n\n          case 5:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function windowsToWslPath(_x2) {\n    return _ref2.apply(this, arguments);\n  };\n}(); // Get an environment variable from Windows\n\n\nvar wslGetWindowsEnvVar = /*#__PURE__*/function () {\n  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(envVar) {\n    var _yield$pExecFile3, stdout;\n\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.next = 2;\n            return pExecFile('wslvar', [envVar]);\n\n          case 2:\n            _yield$pExecFile3 = _context3.sent;\n            stdout = _yield$pExecFile3.stdout;\n            return _context3.abrupt(\"return\", stdout.trim());\n\n          case 5:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n\n  return function wslGetWindowsEnvVar(_x3) {\n    return _ref3.apply(this, arguments);\n  };\n}();\n\nmodule.exports = /*#__PURE__*/function () {\n  var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(target, options) {\n    var command, _options, app, appArguments, cliArguments, childProcessOptions, windowsRoot, encodedArguments, windowsPath, isBundled, exeLocalXdgOpen, useSystemXdgOpen, subprocess;\n\n    return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            if (!(typeof target !== 'string')) {\n              _context4.next = 2;\n              break;\n            }\n\n            throw new TypeError('Expected a `target`');\n\n          case 2:\n            options = _objectSpread({\n              wait: false,\n              background: false,\n              allowNonzeroExitCode: false\n            }, options);\n            _options = options, app = _options.app;\n            appArguments = [];\n            cliArguments = [];\n            childProcessOptions = {};\n\n            if (Array.isArray(app)) {\n              appArguments = app.slice(1);\n              app = app[0];\n            }\n\n            if (!(process.platform === 'darwin')) {\n              _context4.next = 15;\n              break;\n            }\n\n            command = 'open';\n\n            if (options.wait) {\n              cliArguments.push('--wait-apps');\n            }\n\n            if (options.background) {\n              cliArguments.push('--background');\n            }\n\n            if (app) {\n              cliArguments.push('-a', app);\n            }\n\n            _context4.next = 68;\n            break;\n\n          case 15:\n            if (!(process.platform === 'win32' || isWsl && !isDocker())) {\n              _context4.next = 50;\n              break;\n            }\n\n            if (!isWsl) {\n              _context4.next = 22;\n              break;\n            }\n\n            _context4.next = 19;\n            return wslGetWindowsEnvVar('systemroot');\n\n          case 19:\n            _context4.t0 = _context4.sent;\n            _context4.next = 23;\n            break;\n\n          case 22:\n            _context4.t0 = process.env.SYSTEMROOT;\n\n          case 23:\n            windowsRoot = _context4.t0;\n            command = String.raw(_templateObject || (_templateObject = _taggedTemplateLiteral([\"\", \"System32WindowsPowerShell\\x0B1.0powershell\", \"\"], [\"\", \"\\\\System32\\\\WindowsPowerShell\\\\v1.0\\\\powershell\", \"\"])), windowsRoot, isWsl ? '.exe' : '');\n            cliArguments.push('-NoProfile', '-NonInteractive', '–ExecutionPolicy', 'Bypass', '-EncodedCommand');\n\n            if (!isWsl) {\n              _context4.next = 32;\n              break;\n            }\n\n            _context4.next = 29;\n            return windowsToWslPath(command);\n\n          case 29:\n            command = _context4.sent;\n            _context4.next = 33;\n            break;\n\n          case 32:\n            childProcessOptions.windowsVerbatimArguments = true;\n\n          case 33:\n            encodedArguments = ['Start'];\n\n            if (options.wait) {\n              encodedArguments.push('-Wait');\n            }\n\n            if (!app) {\n              _context4.next = 45;\n              break;\n            }\n\n            if (!(isWsl && app.startsWith('/mnt/'))) {\n              _context4.next = 41;\n              break;\n            }\n\n            _context4.next = 39;\n            return wslToWindowsPath(app);\n\n          case 39:\n            windowsPath = _context4.sent;\n            app = windowsPath;\n\n          case 41:\n            // Double quote with double quotes to ensure the inner quotes are passed through.\n            // Inner quotes are delimited for PowerShell interpretation with backticks.\n            encodedArguments.push(\"\\\"`\\\"\".concat(app, \"`\\\"\\\"\"), '-ArgumentList');\n            appArguments.unshift(target);\n            _context4.next = 46;\n            break;\n\n          case 45:\n            encodedArguments.push(\"\\\"`\\\"\".concat(target, \"`\\\"\\\"\"));\n\n          case 46:\n            if (appArguments.length > 0) {\n              appArguments = appArguments.map(function (arg) {\n                return \"\\\"`\\\"\".concat(arg, \"`\\\"\\\"\");\n              });\n              encodedArguments.push(appArguments.join(','));\n            } // Using Base64-encoded command, accepted by PowerShell, to allow special characters.\n\n\n            target = Buffer.from(encodedArguments.join(' '), 'utf16le').toString('base64');\n            _context4.next = 68;\n            break;\n\n          case 50:\n            if (!app) {\n              _context4.next = 54;\n              break;\n            }\n\n            command = app;\n            _context4.next = 66;\n            break;\n\n          case 54:\n            // When bundled by Webpack, there's no actual package file path and no local `xdg-open`.\n            isBundled = !__dirname || __dirname === '/'; // Check if local `xdg-open` exists and is executable.\n\n            exeLocalXdgOpen = false;\n            _context4.prev = 56;\n            _context4.next = 59;\n            return pAccess(localXdgOpenPath, fs.constants.X_OK);\n\n          case 59:\n            exeLocalXdgOpen = true;\n            _context4.next = 64;\n            break;\n\n          case 62:\n            _context4.prev = 62;\n            _context4.t1 = _context4[\"catch\"](56);\n\n          case 64:\n            useSystemXdgOpen = process.versions.electron || process.platform === 'android' || isBundled || !exeLocalXdgOpen;\n            command = useSystemXdgOpen ? 'xdg-open' : localXdgOpenPath;\n\n          case 66:\n            if (appArguments.length > 0) {\n              cliArguments.push.apply(cliArguments, _toConsumableArray(appArguments));\n            }\n\n            if (!options.wait) {\n              // `xdg-open` will block the process unless stdio is ignored\n              // and it's detached from the parent even if it's unref'd.\n              childProcessOptions.stdio = 'ignore';\n              childProcessOptions.detached = true;\n            }\n\n          case 68:\n            cliArguments.push(target);\n\n            if (process.platform === 'darwin' && appArguments.length > 0) {\n              cliArguments.push.apply(cliArguments, ['--args'].concat(_toConsumableArray(appArguments)));\n            }\n\n            subprocess = childProcess.spawn(command, cliArguments, childProcessOptions);\n\n            if (!options.wait) {\n              _context4.next = 73;\n              break;\n            }\n\n            return _context4.abrupt(\"return\", new Promise(function (resolve, reject) {\n              subprocess.once('error', reject);\n              subprocess.once('close', function (exitCode) {\n                if (options.allowNonzeroExitCode && exitCode > 0) {\n                  reject(new Error(\"Exited with code \".concat(exitCode)));\n                  return;\n                }\n\n                resolve(subprocess);\n              });\n            }));\n\n          case 73:\n            subprocess.unref();\n            return _context4.abrupt(\"return\", subprocess);\n\n          case 75:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4, null, [[56, 62]]);\n  }));\n\n  return function (_x4, _x5) {\n    return _ref4.apply(this, arguments);\n  };\n}();","map":{"version":3,"sources":["/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/open/index.js"],"names":["require","promisify","path","childProcess","fs","isWsl","isDocker","pAccess","access","pExecFile","execFile","localXdgOpenPath","join","__dirname","wslToWindowsPath","stdout","trim","windowsToWslPath","wslGetWindowsEnvVar","envVar","module","exports","target","options","TypeError","wait","background","allowNonzeroExitCode","app","appArguments","cliArguments","childProcessOptions","Array","isArray","slice","process","platform","command","push","env","SYSTEMROOT","windowsRoot","String","raw","windowsVerbatimArguments","encodedArguments","startsWith","windowsPath","unshift","length","map","arg","Buffer","from","toString","isBundled","exeLocalXdgOpen","constants","X_OK","useSystemXdgOpen","versions","electron","stdio","detached","subprocess","spawn","Promise","resolve","reject","once","exitCode","Error","unref"],"mappings":"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","sourcesContent":["'use strict';\nconst {promisify} = require('util');\nconst path = require('path');\nconst childProcess = require('child_process');\nconst fs = require('fs');\nconst isWsl = require('is-wsl');\nconst isDocker = require('is-docker');\n\nconst pAccess = promisify(fs.access);\nconst pExecFile = promisify(childProcess.execFile);\n\n// Path to included `xdg-open`.\nconst localXdgOpenPath = path.join(__dirname, 'xdg-open');\n\n// Convert a path from WSL format to Windows format:\n// `/mnt/c/Program Files/Example/MyApp.exe` → `C:\\Program Files\\Example\\MyApp.exe`\nconst wslToWindowsPath = async path => {\n\tconst {stdout} = await pExecFile('wslpath', ['-w', path]);\n\treturn stdout.trim();\n};\n\n// Convert a path from Windows format to WSL format\nconst windowsToWslPath = async path => {\n\tconst {stdout} = await pExecFile('wslpath', [path]);\n\treturn stdout.trim();\n};\n\n// Get an environment variable from Windows\nconst wslGetWindowsEnvVar = async envVar => {\n\tconst {stdout} = await pExecFile('wslvar', [envVar]);\n\treturn stdout.trim();\n};\n\nmodule.exports = async (target, options) => {\n\tif (typeof target !== 'string') {\n\t\tthrow new TypeError('Expected a `target`');\n\t}\n\n\toptions = {\n\t\twait: false,\n\t\tbackground: false,\n\t\tallowNonzeroExitCode: false,\n\t\t...options\n\t};\n\n\tlet command;\n\tlet {app} = options;\n\tlet appArguments = [];\n\tconst cliArguments = [];\n\tconst childProcessOptions = {};\n\n\tif (Array.isArray(app)) {\n\t\tappArguments = app.slice(1);\n\t\tapp = app[0];\n\t}\n\n\tif (process.platform === 'darwin') {\n\t\tcommand = 'open';\n\n\t\tif (options.wait) {\n\t\t\tcliArguments.push('--wait-apps');\n\t\t}\n\n\t\tif (options.background) {\n\t\t\tcliArguments.push('--background');\n\t\t}\n\n\t\tif (app) {\n\t\t\tcliArguments.push('-a', app);\n\t\t}\n\t} else if (process.platform === 'win32' || (isWsl && !isDocker())) {\n\t\tconst windowsRoot = isWsl ? await wslGetWindowsEnvVar('systemroot') : process.env.SYSTEMROOT;\n\t\tcommand = String.raw`${windowsRoot}\\System32\\WindowsPowerShell\\v1.0\\powershell${isWsl ? '.exe' : ''}`;\n\t\tcliArguments.push(\n\t\t\t'-NoProfile',\n\t\t\t'-NonInteractive',\n\t\t\t'–ExecutionPolicy',\n\t\t\t'Bypass',\n\t\t\t'-EncodedCommand'\n\t\t);\n\n\t\tif (isWsl) {\n\t\t\tcommand = await windowsToWslPath(command);\n\t\t} else {\n\t\t\tchildProcessOptions.windowsVerbatimArguments = true;\n\t\t}\n\n\t\tconst encodedArguments = ['Start'];\n\n\t\tif (options.wait) {\n\t\t\tencodedArguments.push('-Wait');\n\t\t}\n\n\t\tif (app) {\n\t\t\tif (isWsl && app.startsWith('/mnt/')) {\n\t\t\t\tconst windowsPath = await wslToWindowsPath(app);\n\t\t\t\tapp = windowsPath;\n\t\t\t}\n\n\t\t\t// Double quote with double quotes to ensure the inner quotes are passed through.\n\t\t\t// Inner quotes are delimited for PowerShell interpretation with backticks.\n\t\t\tencodedArguments.push(`\"\\`\"${app}\\`\"\"`, '-ArgumentList');\n\t\t\tappArguments.unshift(target);\n\t\t} else {\n\t\t\tencodedArguments.push(`\"\\`\"${target}\\`\"\"`);\n\t\t}\n\n\t\tif (appArguments.length > 0) {\n\t\t\tappArguments = appArguments.map(arg => `\"\\`\"${arg}\\`\"\"`);\n\t\t\tencodedArguments.push(appArguments.join(','));\n\t\t}\n\n\t\t// Using Base64-encoded command, accepted by PowerShell, to allow special characters.\n\t\ttarget = Buffer.from(encodedArguments.join(' '), 'utf16le').toString('base64');\n\t} else {\n\t\tif (app) {\n\t\t\tcommand = app;\n\t\t} else {\n\t\t\t// When bundled by Webpack, there's no actual package file path and no local `xdg-open`.\n\t\t\tconst isBundled = !__dirname || __dirname === '/';\n\n\t\t\t// Check if local `xdg-open` exists and is executable.\n\t\t\tlet exeLocalXdgOpen = false;\n\t\t\ttry {\n\t\t\t\tawait pAccess(localXdgOpenPath, fs.constants.X_OK);\n\t\t\t\texeLocalXdgOpen = true;\n\t\t\t} catch (_) {}\n\n\t\t\tconst useSystemXdgOpen = process.versions.electron ||\n\t\t\t\tprocess.platform === 'android' || isBundled || !exeLocalXdgOpen;\n\t\t\tcommand = useSystemXdgOpen ? 'xdg-open' : localXdgOpenPath;\n\t\t}\n\n\t\tif (appArguments.length > 0) {\n\t\t\tcliArguments.push(...appArguments);\n\t\t}\n\n\t\tif (!options.wait) {\n\t\t\t// `xdg-open` will block the process unless stdio is ignored\n\t\t\t// and it's detached from the parent even if it's unref'd.\n\t\t\tchildProcessOptions.stdio = 'ignore';\n\t\t\tchildProcessOptions.detached = true;\n\t\t}\n\t}\n\n\tcliArguments.push(target);\n\n\tif (process.platform === 'darwin' && appArguments.length > 0) {\n\t\tcliArguments.push('--args', ...appArguments);\n\t}\n\n\tconst subprocess = childProcess.spawn(command, cliArguments, childProcessOptions);\n\n\tif (options.wait) {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tsubprocess.once('error', reject);\n\n\t\t\tsubprocess.once('close', exitCode => {\n\t\t\t\tif (options.allowNonzeroExitCode && exitCode > 0) {\n\t\t\t\t\treject(new Error(`Exited with code ${exitCode}`));\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tresolve(subprocess);\n\t\t\t});\n\t\t});\n\t}\n\n\tsubprocess.unref();\n\n\treturn subprocess;\n};\n"]},"metadata":{},"sourceType":"script"}