{"ast":null,"code":"'use strict';\n\nvar _createForOfIteratorHelper = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar util = require('util');\n\nvar fs = require('fs');\n\nvar fsm = require('fs-minipass');\n\nvar ssri = require('ssri');\n\nvar contentPath = require('./path');\n\nvar Pipeline = require('minipass-pipeline');\n\nvar lstat = util.promisify(fs.lstat);\nvar readFile = util.promisify(fs.readFile);\nmodule.exports = read;\nvar MAX_SINGLE_READ_SIZE = 64 * 1024 * 1024;\n\nfunction read(cache, integrity) {\n  var opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var size = opts.size;\n  return withContentSri(cache, integrity, function (cpath, sri) {\n    // get size\n    return lstat(cpath).then(function (stat) {\n      return {\n        stat: stat,\n        cpath: cpath,\n        sri: sri\n      };\n    });\n  }).then(function (_ref) {\n    var stat = _ref.stat,\n        cpath = _ref.cpath,\n        sri = _ref.sri;\n    if (typeof size === 'number' && stat.size !== size) throw sizeError(size, stat.size);\n    if (stat.size > MAX_SINGLE_READ_SIZE) return readPipeline(cpath, stat.size, sri, new Pipeline()).concat();\n    return readFile(cpath, null).then(function (data) {\n      if (!ssri.checkData(data, sri)) throw integrityError(sri, cpath);\n      return data;\n    });\n  });\n}\n\nvar readPipeline = function readPipeline(cpath, size, sri, stream) {\n  stream.push(new fsm.ReadStream(cpath, {\n    size: size,\n    readSize: MAX_SINGLE_READ_SIZE\n  }), ssri.integrityStream({\n    integrity: sri,\n    size: size\n  }));\n  return stream;\n};\n\nmodule.exports.sync = readSync;\n\nfunction readSync(cache, integrity) {\n  var opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var size = opts.size;\n  return withContentSriSync(cache, integrity, function (cpath, sri) {\n    var data = fs.readFileSync(cpath);\n    if (typeof size === 'number' && size !== data.length) throw sizeError(size, data.length);\n    if (ssri.checkData(data, sri)) return data;\n    throw integrityError(sri, cpath);\n  });\n}\n\nmodule.exports.stream = readStream;\nmodule.exports.readStream = readStream;\n\nfunction readStream(cache, integrity) {\n  var opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var size = opts.size;\n  var stream = new Pipeline();\n  withContentSri(cache, integrity, function (cpath, sri) {\n    // just lstat to ensure it exists\n    return lstat(cpath).then(function (stat) {\n      return {\n        stat: stat,\n        cpath: cpath,\n        sri: sri\n      };\n    });\n  }).then(function (_ref2) {\n    var stat = _ref2.stat,\n        cpath = _ref2.cpath,\n        sri = _ref2.sri;\n    if (typeof size === 'number' && size !== stat.size) return stream.emit('error', sizeError(size, stat.size));\n    readPipeline(cpath, stat.size, sri, stream);\n  }, function (er) {\n    return stream.emit('error', er);\n  });\n  return stream;\n}\n\nvar copyFile;\n\nif (fs.copyFile) {\n  module.exports.copy = copy;\n  module.exports.copy.sync = copySync;\n  copyFile = util.promisify(fs.copyFile);\n}\n\nfunction copy(cache, integrity, dest) {\n  return withContentSri(cache, integrity, function (cpath, sri) {\n    return copyFile(cpath, dest);\n  });\n}\n\nfunction copySync(cache, integrity, dest) {\n  return withContentSriSync(cache, integrity, function (cpath, sri) {\n    return fs.copyFileSync(cpath, dest);\n  });\n}\n\nmodule.exports.hasContent = hasContent;\n\nfunction hasContent(cache, integrity) {\n  if (!integrity) return Promise.resolve(false);\n  return withContentSri(cache, integrity, function (cpath, sri) {\n    return lstat(cpath).then(function (stat) {\n      return {\n        size: stat.size,\n        sri: sri,\n        stat: stat\n      };\n    });\n  }).catch(function (err) {\n    if (err.code === 'ENOENT') return false;\n\n    if (err.code === 'EPERM') {\n      /* istanbul ignore else */\n      if (process.platform !== 'win32') throw err;else return false;\n    }\n  });\n}\n\nmodule.exports.hasContent.sync = hasContentSync;\n\nfunction hasContentSync(cache, integrity) {\n  if (!integrity) return false;\n  return withContentSriSync(cache, integrity, function (cpath, sri) {\n    try {\n      var stat = fs.lstatSync(cpath);\n      return {\n        size: stat.size,\n        sri: sri,\n        stat: stat\n      };\n    } catch (err) {\n      if (err.code === 'ENOENT') return false;\n\n      if (err.code === 'EPERM') {\n        /* istanbul ignore else */\n        if (process.platform !== 'win32') throw err;else return false;\n      }\n    }\n  });\n}\n\nfunction withContentSri(cache, integrity, fn) {\n  var tryFn = function tryFn() {\n    var sri = ssri.parse(integrity); // If `integrity` has multiple entries, pick the first digest\n    // with available local data.\n\n    var algo = sri.pickAlgorithm();\n    var digests = sri[algo];\n\n    if (digests.length <= 1) {\n      var cpath = contentPath(cache, digests[0]);\n      return fn(cpath, digests[0]);\n    } else {\n      // Can't use race here because a generic error can happen before\n      // a ENOENT error, and can happen before a valid result\n      return Promise.all(digests.map(function (meta) {\n        return withContentSri(cache, meta, fn).catch(function (err) {\n          if (err.code === 'ENOENT') {\n            return Object.assign(new Error('No matching content found for ' + sri.toString()), {\n              code: 'ENOENT'\n            });\n          }\n\n          return err;\n        });\n      })).then(function (results) {\n        // Return the first non error if it is found\n        var result = results.find(function (r) {\n          return !(r instanceof Error);\n        });\n        if (result) return result; // Throw the No matching content found error\n\n        var enoentError = results.find(function (r) {\n          return r.code === 'ENOENT';\n        });\n        if (enoentError) throw enoentError; // Throw generic error\n\n        throw results.find(function (r) {\n          return r instanceof Error;\n        });\n      });\n    }\n  };\n\n  return new Promise(function (resolve, reject) {\n    try {\n      tryFn().then(resolve).catch(reject);\n    } catch (err) {\n      reject(err);\n    }\n  });\n}\n\nfunction withContentSriSync(cache, integrity, fn) {\n  var sri = ssri.parse(integrity); // If `integrity` has multiple entries, pick the first digest\n  // with available local data.\n\n  var algo = sri.pickAlgorithm();\n  var digests = sri[algo];\n\n  if (digests.length <= 1) {\n    var cpath = contentPath(cache, digests[0]);\n    return fn(cpath, digests[0]);\n  } else {\n    var lastErr = null;\n\n    var _iterator = _createForOfIteratorHelper(digests),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var meta = _step.value;\n\n        try {\n          return withContentSriSync(cache, meta, fn);\n        } catch (err) {\n          lastErr = err;\n        }\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n\n    throw lastErr;\n  }\n}\n\nfunction sizeError(expected, found) {\n  var err = new Error(\"Bad data size: expected inserted data to be \".concat(expected, \" bytes, but got \").concat(found, \" instead\"));\n  err.expected = expected;\n  err.found = found;\n  err.code = 'EBADSIZE';\n  return err;\n}\n\nfunction integrityError(sri, path) {\n  var err = new Error(\"Integrity verification failed for \".concat(sri, \" (\").concat(path, \")\"));\n  err.code = 'EINTEGRITY';\n  err.sri = sri;\n  err.path = path;\n  return err;\n}","map":{"version":3,"sources":["/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/cacache/lib/content/read.js"],"names":["util","require","fs","fsm","ssri","contentPath","Pipeline","lstat","promisify","readFile","module","exports","read","MAX_SINGLE_READ_SIZE","cache","integrity","opts","size","withContentSri","cpath","sri","then","stat","sizeError","readPipeline","concat","data","checkData","integrityError","stream","push","ReadStream","readSize","integrityStream","sync","readSync","withContentSriSync","readFileSync","length","readStream","emit","er","copyFile","copy","copySync","dest","copyFileSync","hasContent","Promise","resolve","catch","err","code","process","platform","hasContentSync","lstatSync","fn","tryFn","parse","algo","pickAlgorithm","digests","all","map","meta","Object","assign","Error","toString","results","result","find","r","enoentError","reject","lastErr","expected","found","path"],"mappings":"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","sourcesContent":["'use strict'\n\nconst util = require('util')\n\nconst fs = require('fs')\nconst fsm = require('fs-minipass')\nconst ssri = require('ssri')\nconst contentPath = require('./path')\nconst Pipeline = require('minipass-pipeline')\n\nconst lstat = util.promisify(fs.lstat)\nconst readFile = util.promisify(fs.readFile)\n\nmodule.exports = read\n\nconst MAX_SINGLE_READ_SIZE = 64 * 1024 * 1024\nfunction read (cache, integrity, opts = {}) {\n  const { size } = opts\n  return withContentSri(cache, integrity, (cpath, sri) => {\n    // get size\n    return lstat(cpath).then(stat => ({ stat, cpath, sri }))\n  }).then(({ stat, cpath, sri }) => {\n    if (typeof size === 'number' && stat.size !== size)\n      throw sizeError(size, stat.size)\n\n    if (stat.size > MAX_SINGLE_READ_SIZE)\n      return readPipeline(cpath, stat.size, sri, new Pipeline()).concat()\n\n    return readFile(cpath, null).then((data) => {\n      if (!ssri.checkData(data, sri))\n        throw integrityError(sri, cpath)\n\n      return data\n    })\n  })\n}\n\nconst readPipeline = (cpath, size, sri, stream) => {\n  stream.push(\n    new fsm.ReadStream(cpath, {\n      size,\n      readSize: MAX_SINGLE_READ_SIZE,\n    }),\n    ssri.integrityStream({\n      integrity: sri,\n      size,\n    })\n  )\n  return stream\n}\n\nmodule.exports.sync = readSync\n\nfunction readSync (cache, integrity, opts = {}) {\n  const { size } = opts\n  return withContentSriSync(cache, integrity, (cpath, sri) => {\n    const data = fs.readFileSync(cpath)\n    if (typeof size === 'number' && size !== data.length)\n      throw sizeError(size, data.length)\n\n    if (ssri.checkData(data, sri))\n      return data\n\n    throw integrityError(sri, cpath)\n  })\n}\n\nmodule.exports.stream = readStream\nmodule.exports.readStream = readStream\n\nfunction readStream (cache, integrity, opts = {}) {\n  const { size } = opts\n  const stream = new Pipeline()\n  withContentSri(cache, integrity, (cpath, sri) => {\n    // just lstat to ensure it exists\n    return lstat(cpath).then((stat) => ({ stat, cpath, sri }))\n  }).then(({ stat, cpath, sri }) => {\n    if (typeof size === 'number' && size !== stat.size)\n      return stream.emit('error', sizeError(size, stat.size))\n\n    readPipeline(cpath, stat.size, sri, stream)\n  }, er => stream.emit('error', er))\n\n  return stream\n}\n\nlet copyFile\nif (fs.copyFile) {\n  module.exports.copy = copy\n  module.exports.copy.sync = copySync\n  copyFile = util.promisify(fs.copyFile)\n}\n\nfunction copy (cache, integrity, dest) {\n  return withContentSri(cache, integrity, (cpath, sri) => {\n    return copyFile(cpath, dest)\n  })\n}\n\nfunction copySync (cache, integrity, dest) {\n  return withContentSriSync(cache, integrity, (cpath, sri) => {\n    return fs.copyFileSync(cpath, dest)\n  })\n}\n\nmodule.exports.hasContent = hasContent\n\nfunction hasContent (cache, integrity) {\n  if (!integrity)\n    return Promise.resolve(false)\n\n  return withContentSri(cache, integrity, (cpath, sri) => {\n    return lstat(cpath).then((stat) => ({ size: stat.size, sri, stat }))\n  }).catch((err) => {\n    if (err.code === 'ENOENT')\n      return false\n\n    if (err.code === 'EPERM') {\n      /* istanbul ignore else */\n      if (process.platform !== 'win32')\n        throw err\n      else\n        return false\n    }\n  })\n}\n\nmodule.exports.hasContent.sync = hasContentSync\n\nfunction hasContentSync (cache, integrity) {\n  if (!integrity)\n    return false\n\n  return withContentSriSync(cache, integrity, (cpath, sri) => {\n    try {\n      const stat = fs.lstatSync(cpath)\n      return { size: stat.size, sri, stat }\n    } catch (err) {\n      if (err.code === 'ENOENT')\n        return false\n\n      if (err.code === 'EPERM') {\n        /* istanbul ignore else */\n        if (process.platform !== 'win32')\n          throw err\n        else\n          return false\n      }\n    }\n  })\n}\n\nfunction withContentSri (cache, integrity, fn) {\n  const tryFn = () => {\n    const sri = ssri.parse(integrity)\n    // If `integrity` has multiple entries, pick the first digest\n    // with available local data.\n    const algo = sri.pickAlgorithm()\n    const digests = sri[algo]\n\n    if (digests.length <= 1) {\n      const cpath = contentPath(cache, digests[0])\n      return fn(cpath, digests[0])\n    } else {\n      // Can't use race here because a generic error can happen before\n      // a ENOENT error, and can happen before a valid result\n      return Promise\n        .all(digests.map((meta) => {\n          return withContentSri(cache, meta, fn)\n            .catch((err) => {\n              if (err.code === 'ENOENT') {\n                return Object.assign(\n                  new Error('No matching content found for ' + sri.toString()),\n                  { code: 'ENOENT' }\n                )\n              }\n              return err\n            })\n        }))\n        .then((results) => {\n          // Return the first non error if it is found\n          const result = results.find((r) => !(r instanceof Error))\n          if (result)\n            return result\n\n          // Throw the No matching content found error\n          const enoentError = results.find((r) => r.code === 'ENOENT')\n          if (enoentError)\n            throw enoentError\n\n          // Throw generic error\n          throw results.find((r) => r instanceof Error)\n        })\n    }\n  }\n\n  return new Promise((resolve, reject) => {\n    try {\n      tryFn()\n        .then(resolve)\n        .catch(reject)\n    } catch (err) {\n      reject(err)\n    }\n  })\n}\n\nfunction withContentSriSync (cache, integrity, fn) {\n  const sri = ssri.parse(integrity)\n  // If `integrity` has multiple entries, pick the first digest\n  // with available local data.\n  const algo = sri.pickAlgorithm()\n  const digests = sri[algo]\n  if (digests.length <= 1) {\n    const cpath = contentPath(cache, digests[0])\n    return fn(cpath, digests[0])\n  } else {\n    let lastErr = null\n    for (const meta of digests) {\n      try {\n        return withContentSriSync(cache, meta, fn)\n      } catch (err) {\n        lastErr = err\n      }\n    }\n    throw lastErr\n  }\n}\n\nfunction sizeError (expected, found) {\n  const err = new Error(`Bad data size: expected inserted data to be ${expected} bytes, but got ${found} instead`)\n  err.expected = expected\n  err.found = found\n  err.code = 'EBADSIZE'\n  return err\n}\n\nfunction integrityError (sri, path) {\n  const err = new Error(`Integrity verification failed for ${sri} (${path})`)\n  err.code = 'EINTEGRITY'\n  err.sri = sri\n  err.path = path\n  return err\n}\n"]},"metadata":{},"sourceType":"script"}