{"ast":null,"code":"\"use strict\";\n\nvar _toConsumableArray = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/toConsumableArray\");\n\nvar _classCallCheck = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SimpleJobRegistry = void 0;\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nvar rxjs_1 = require(\"rxjs\");\n\nvar json_1 = require(\"../../json\");\n\nvar api_1 = require(\"./api\");\n\nvar exception_1 = require(\"./exception\");\n/**\n * A simple job registry that keep a map of JobName => JobHandler internally.\n */\n\n\nvar SimpleJobRegistry = /*#__PURE__*/function () {\n  function SimpleJobRegistry() {\n    _classCallCheck(this, SimpleJobRegistry);\n\n    this._jobNames = new Map();\n  }\n\n  _createClass(SimpleJobRegistry, [{\n    key: \"get\",\n    value: function get(name) {\n      return rxjs_1.of(this._jobNames.get(name) || null);\n    }\n  }, {\n    key: \"register\",\n    value: function register(nameOrHandler) {\n      var handlerOrOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n      // Switch on the arguments.\n      if (typeof nameOrHandler == 'string') {\n        if (!api_1.isJobHandler(handlerOrOptions)) {\n          // This is an error.\n          throw new TypeError('Expected a JobHandler as second argument.');\n        }\n\n        this._register(nameOrHandler, handlerOrOptions, options);\n      } else if (api_1.isJobHandler(nameOrHandler)) {\n        if (typeof handlerOrOptions !== 'object') {\n          // This is an error.\n          throw new TypeError('Expected an object options as second argument.');\n        }\n\n        var name = options.name || nameOrHandler.jobDescription.name || handlerOrOptions.name;\n\n        if (name === undefined) {\n          throw new TypeError('Expected name to be a string.');\n        }\n\n        this._register(name, nameOrHandler, options);\n      } else {\n        throw new TypeError('Unrecognized arguments.');\n      }\n    }\n  }, {\n    key: \"_register\",\n    value: function _register(name, handler, options) {\n      if (this._jobNames.has(name)) {\n        // We shouldn't allow conflicts.\n        throw new exception_1.JobNameAlreadyRegisteredException(name);\n      } // Merge all fields with the ones in the handler (to make sure we respect the handler).\n\n\n      var argument = json_1.schema.mergeSchemas(handler.jobDescription.argument, options.argument);\n      var input = json_1.schema.mergeSchemas(handler.jobDescription.input, options.input);\n      var output = json_1.schema.mergeSchemas(handler.jobDescription.output, options.output); // Create the job description.\n\n      var jobDescription = {\n        name: name,\n        argument: argument,\n        output: output,\n        input: input\n      };\n      var jobHandler = Object.assign(handler.bind(undefined), {\n        jobDescription: jobDescription\n      });\n\n      this._jobNames.set(name, jobHandler);\n    }\n    /**\n     * Returns the job names of all jobs.\n     */\n\n  }, {\n    key: \"getJobNames\",\n    value: function getJobNames() {\n      return _toConsumableArray(this._jobNames.keys());\n    }\n  }]);\n\n  return SimpleJobRegistry;\n}();\n\nexports.SimpleJobRegistry = SimpleJobRegistry;","map":{"version":3,"sources":["/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@angular-devkit/build-angular/node_modules/@angular-devkit/core/src/experimental/jobs/simple-registry.js"],"names":["Object","defineProperty","exports","value","SimpleJobRegistry","rxjs_1","require","json_1","api_1","exception_1","_jobNames","Map","name","of","get","nameOrHandler","handlerOrOptions","options","isJobHandler","TypeError","_register","jobDescription","undefined","handler","has","JobNameAlreadyRegisteredException","argument","schema","mergeSchemas","input","output","jobHandler","assign","bind","set","keys"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SimpleJobRegistry = void 0;\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst rxjs_1 = require(\"rxjs\");\nconst json_1 = require(\"../../json\");\nconst api_1 = require(\"./api\");\nconst exception_1 = require(\"./exception\");\n/**\n * A simple job registry that keep a map of JobName => JobHandler internally.\n */\nclass SimpleJobRegistry {\n    constructor() {\n        this._jobNames = new Map();\n    }\n    get(name) {\n        return rxjs_1.of(this._jobNames.get(name) || null);\n    }\n    register(nameOrHandler, handlerOrOptions = {}, options = {}) {\n        // Switch on the arguments.\n        if (typeof nameOrHandler == 'string') {\n            if (!api_1.isJobHandler(handlerOrOptions)) {\n                // This is an error.\n                throw new TypeError('Expected a JobHandler as second argument.');\n            }\n            this._register(nameOrHandler, handlerOrOptions, options);\n        }\n        else if (api_1.isJobHandler(nameOrHandler)) {\n            if (typeof handlerOrOptions !== 'object') {\n                // This is an error.\n                throw new TypeError('Expected an object options as second argument.');\n            }\n            const name = options.name || nameOrHandler.jobDescription.name || handlerOrOptions.name;\n            if (name === undefined) {\n                throw new TypeError('Expected name to be a string.');\n            }\n            this._register(name, nameOrHandler, options);\n        }\n        else {\n            throw new TypeError('Unrecognized arguments.');\n        }\n    }\n    _register(name, handler, options) {\n        if (this._jobNames.has(name)) {\n            // We shouldn't allow conflicts.\n            throw new exception_1.JobNameAlreadyRegisteredException(name);\n        }\n        // Merge all fields with the ones in the handler (to make sure we respect the handler).\n        const argument = json_1.schema.mergeSchemas(handler.jobDescription.argument, options.argument);\n        const input = json_1.schema.mergeSchemas(handler.jobDescription.input, options.input);\n        const output = json_1.schema.mergeSchemas(handler.jobDescription.output, options.output);\n        // Create the job description.\n        const jobDescription = {\n            name,\n            argument,\n            output,\n            input,\n        };\n        const jobHandler = Object.assign(handler.bind(undefined), { jobDescription });\n        this._jobNames.set(name, jobHandler);\n    }\n    /**\n     * Returns the job names of all jobs.\n     */\n    getJobNames() {\n        return [...this._jobNames.keys()];\n    }\n}\nexports.SimpleJobRegistry = SimpleJobRegistry;\n"]},"metadata":{},"sourceType":"script"}