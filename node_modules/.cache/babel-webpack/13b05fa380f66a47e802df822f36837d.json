{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nvar _classCallCheck = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/createClass\");\n\nmodule.exports = /*#__PURE__*/function () {\n  function DirectoryExistsPlugin(source, target) {\n    _classCallCheck(this, DirectoryExistsPlugin);\n\n    this.source = source;\n    this.target = target;\n  }\n\n  _createClass(DirectoryExistsPlugin, [{\n    key: \"apply\",\n    value: function apply(resolver) {\n      var target = resolver.ensureHook(this.target);\n      resolver.getHook(this.source).tapAsync(\"DirectoryExistsPlugin\", function (request, resolveContext, callback) {\n        var fs = resolver.fileSystem;\n        var directory = request.path;\n        fs.stat(directory, function (err, stat) {\n          if (err || !stat) {\n            if (resolveContext.missing) resolveContext.missing.add(directory);\n            if (resolveContext.log) resolveContext.log(directory + \" doesn't exist\");\n            return callback();\n          }\n\n          if (!stat.isDirectory()) {\n            if (resolveContext.missing) resolveContext.missing.add(directory);\n            if (resolveContext.log) resolveContext.log(directory + \" is not a directory\");\n            return callback();\n          }\n\n          resolver.doResolve(target, request, \"existing directory\", resolveContext, callback);\n        });\n      });\n    }\n  }]);\n\n  return DirectoryExistsPlugin;\n}();","map":{"version":3,"sources":["/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/webpack/node_modules/enhanced-resolve/lib/DirectoryExistsPlugin.js"],"names":["module","exports","source","target","resolver","ensureHook","getHook","tapAsync","request","resolveContext","callback","fs","fileSystem","directory","path","stat","err","missing","add","log","isDirectory","doResolve"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;;;;;AAEAA,MAAM,CAACC,OAAP;AACC,iCAAYC,MAAZ,EAAoBC,MAApB,EAA4B;AAAA;;AAC3B,SAAKD,MAAL,GAAcA,MAAd;AACA,SAAKC,MAAL,GAAcA,MAAd;AACA;;AAJF;AAAA;AAAA,WAMC,eAAMC,QAAN,EAAgB;AACf,UAAMD,MAAM,GAAGC,QAAQ,CAACC,UAAT,CAAoB,KAAKF,MAAzB,CAAf;AACAC,MAAAA,QAAQ,CACNE,OADF,CACU,KAAKJ,MADf,EAEEK,QAFF,CAGE,uBAHF,EAIE,UAACC,OAAD,EAAUC,cAAV,EAA0BC,QAA1B,EAAuC;AACtC,YAAMC,EAAE,GAAGP,QAAQ,CAACQ,UAApB;AACA,YAAMC,SAAS,GAAGL,OAAO,CAACM,IAA1B;AACAH,QAAAA,EAAE,CAACI,IAAH,CAAQF,SAAR,EAAmB,UAACG,GAAD,EAAMD,IAAN,EAAe;AACjC,cAAIC,GAAG,IAAI,CAACD,IAAZ,EAAkB;AACjB,gBAAIN,cAAc,CAACQ,OAAnB,EAA4BR,cAAc,CAACQ,OAAf,CAAuBC,GAAvB,CAA2BL,SAA3B;AAC5B,gBAAIJ,cAAc,CAACU,GAAnB,EACCV,cAAc,CAACU,GAAf,CAAmBN,SAAS,GAAG,gBAA/B;AACD,mBAAOH,QAAQ,EAAf;AACA;;AACD,cAAI,CAACK,IAAI,CAACK,WAAL,EAAL,EAAyB;AACxB,gBAAIX,cAAc,CAACQ,OAAnB,EAA4BR,cAAc,CAACQ,OAAf,CAAuBC,GAAvB,CAA2BL,SAA3B;AAC5B,gBAAIJ,cAAc,CAACU,GAAnB,EACCV,cAAc,CAACU,GAAf,CAAmBN,SAAS,GAAG,qBAA/B;AACD,mBAAOH,QAAQ,EAAf;AACA;;AACDN,UAAAA,QAAQ,CAACiB,SAAT,CACClB,MADD,EAECK,OAFD,EAGC,oBAHD,EAICC,cAJD,EAKCC,QALD;AAOA,SApBD;AAqBA,OA5BH;AA8BA;AAtCF;;AAAA;AAAA","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nmodule.exports = class DirectoryExistsPlugin {\n\tconstructor(source, target) {\n\t\tthis.source = source;\n\t\tthis.target = target;\n\t}\n\n\tapply(resolver) {\n\t\tconst target = resolver.ensureHook(this.target);\n\t\tresolver\n\t\t\t.getHook(this.source)\n\t\t\t.tapAsync(\n\t\t\t\t\"DirectoryExistsPlugin\",\n\t\t\t\t(request, resolveContext, callback) => {\n\t\t\t\t\tconst fs = resolver.fileSystem;\n\t\t\t\t\tconst directory = request.path;\n\t\t\t\t\tfs.stat(directory, (err, stat) => {\n\t\t\t\t\t\tif (err || !stat) {\n\t\t\t\t\t\t\tif (resolveContext.missing) resolveContext.missing.add(directory);\n\t\t\t\t\t\t\tif (resolveContext.log)\n\t\t\t\t\t\t\t\tresolveContext.log(directory + \" doesn't exist\");\n\t\t\t\t\t\t\treturn callback();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (!stat.isDirectory()) {\n\t\t\t\t\t\t\tif (resolveContext.missing) resolveContext.missing.add(directory);\n\t\t\t\t\t\t\tif (resolveContext.log)\n\t\t\t\t\t\t\t\tresolveContext.log(directory + \" is not a directory\");\n\t\t\t\t\t\t\treturn callback();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tresolver.doResolve(\n\t\t\t\t\t\t\ttarget,\n\t\t\t\t\t\t\trequest,\n\t\t\t\t\t\t\t\"existing directory\",\n\t\t\t\t\t\t\tresolveContext,\n\t\t\t\t\t\t\tcallback\n\t\t\t\t\t\t);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t);\n\t}\n};\n"]},"metadata":{},"sourceType":"script"}