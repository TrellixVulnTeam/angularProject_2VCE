{"ast":null,"code":"\"use strict\";\n\nvar _objectSpread = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/objectSpread2\");\n\nvar _regeneratorRuntime = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/regenerator\");\n\nvar _taggedTemplateLiteral = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/taggedTemplateLiteral\");\n\nvar _asyncToGenerator = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _templateObject, _templateObject2;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.execute = void 0;\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nvar architect_1 = require(\"@angular-devkit/architect\");\n\nvar core_1 = require(\"@angular-devkit/core\");\n\nvar path_1 = require(\"path\");\n\nvar url = require(\"url\");\n\nvar utils_1 = require(\"../utils\");\n\nfunction runProtractor(root, options) {\n  var additionalProtractorConfig = {\n    baseUrl: options.baseUrl,\n    specs: options.specs && options.specs.length ? options.specs : undefined,\n    suite: options.suite,\n    jasmineNodeOpts: {\n      grep: options.grep,\n      invertGrep: options.invertGrep\n    }\n  }; // TODO: Protractor manages process.exit itself, so this target will allways quit the\n  // process. To work around this we run it in a subprocess.\n  // https://github.com/angular/protractor/issues/4160\n\n  return utils_1.runModuleAsObservableFork(root, 'protractor/built/launcher', 'init', [path_1.resolve(root, options.protractorConfig), additionalProtractorConfig]).toPromise();\n}\n\nfunction updateWebdriver() {\n  return _updateWebdriver.apply(this, arguments);\n}\n\nfunction _updateWebdriver() {\n  _updateWebdriver = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var webdriverDeepImport, path, protractorPath, webdriverUpdate;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            // The webdriver-manager update command can only be accessed via a deep import.\n            webdriverDeepImport = 'webdriver-manager/built/lib/cmds/update';\n            _context.prev = 1;\n            protractorPath = require.resolve('protractor');\n            path = require.resolve(webdriverDeepImport, {\n              paths: [protractorPath]\n            });\n            _context.next = 10;\n            break;\n\n          case 6:\n            _context.prev = 6;\n            _context.t0 = _context[\"catch\"](1);\n\n            if (!(_context.t0.code !== 'MODULE_NOT_FOUND')) {\n              _context.next = 10;\n              break;\n            }\n\n            throw _context.t0;\n\n          case 10:\n            if (path) {\n              _context.next = 12;\n              break;\n            }\n\n            throw new Error(core_1.tags.stripIndents(_templateObject || (_templateObject = _taggedTemplateLiteral([\"\\n      Cannot automatically find webdriver-manager to update.\\n      Update webdriver-manager manually and run 'ng e2e --no-webdriver-update' instead.\\n    \"]))));\n\n          case 12:\n            _context.next = 14;\n            return Promise.resolve().then(function () {\n              return require(path);\n            });\n\n          case 14:\n            webdriverUpdate = _context.sent;\n            return _context.abrupt(\"return\", webdriverUpdate.program.run({\n              standalone: false,\n              gecko: false,\n              quiet: true\n            }));\n\n          case 16:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[1, 6]]);\n  }));\n  return _updateWebdriver.apply(this, arguments);\n}\n\nfunction execute(_x, _x2) {\n  return _execute.apply(this, arguments);\n}\n\nfunction _execute() {\n  _execute = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(options, context) {\n    var baseUrl, server, target, serverOptions, overrides, result, publicHost, clientUrl;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            if (!(options.devServerTarget && options.baseUrl)) {\n              _context2.next = 2;\n              break;\n            }\n\n            throw new Error(core_1.tags.stripIndents(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral([\"\\n    The 'baseUrl' option cannot be used with 'devServerTarget'.\\n    When present, 'devServerTarget' will be used to automatically setup 'baseUrl' for Protractor.\\n    \"]))));\n\n          case 2:\n            if (!options.webdriverUpdate) {\n              _context2.next = 5;\n              break;\n            }\n\n            _context2.next = 5;\n            return updateWebdriver();\n\n          case 5:\n            baseUrl = options.baseUrl;\n\n            if (!options.devServerTarget) {\n              _context2.next = 23;\n              break;\n            }\n\n            target = architect_1.targetFromTargetString(options.devServerTarget);\n            _context2.next = 10;\n            return context.getTargetOptions(target);\n\n          case 10:\n            serverOptions = _context2.sent;\n            overrides = {\n              watch: false,\n              liveReload: false\n            };\n\n            if (options.host !== undefined) {\n              overrides.host = options.host;\n            } else if (typeof serverOptions.host === 'string') {\n              options.host = serverOptions.host;\n            } else {\n              options.host = overrides.host = 'localhost';\n            }\n\n            if (options.port !== undefined) {\n              overrides.port = options.port;\n            } else if (typeof serverOptions.port === 'number') {\n              options.port = serverOptions.port;\n            }\n\n            _context2.next = 16;\n            return context.scheduleTarget(target, overrides);\n\n          case 16:\n            server = _context2.sent;\n            _context2.next = 19;\n            return server.result;\n\n          case 19:\n            result = _context2.sent;\n\n            if (result.success) {\n              _context2.next = 22;\n              break;\n            }\n\n            return _context2.abrupt(\"return\", {\n              success: false\n            });\n\n          case 22:\n            if (typeof serverOptions.publicHost === 'string') {\n              publicHost = serverOptions.publicHost;\n\n              if (!/^\\w+:\\/\\//.test(publicHost)) {\n                publicHost = \"\".concat(serverOptions.ssl ? 'https' : 'http', \"://\").concat(publicHost);\n              }\n\n              clientUrl = url.parse(publicHost);\n              baseUrl = url.format(clientUrl);\n            } else if (typeof result.baseUrl === 'string') {\n              baseUrl = result.baseUrl;\n            } else if (typeof result.port === 'number') {\n              baseUrl = url.format({\n                protocol: serverOptions.ssl ? 'https' : 'http',\n                hostname: options.host,\n                port: result.port.toString()\n              });\n            }\n\n          case 23:\n            // Like the baseUrl in protractor config file when using the API we need to add\n            // a trailing slash when provide to the baseUrl.\n            if (baseUrl && !baseUrl.endsWith('/')) {\n              baseUrl += '/';\n            }\n\n            _context2.prev = 24;\n            _context2.next = 27;\n            return runProtractor(context.workspaceRoot, _objectSpread(_objectSpread({}, options), {}, {\n              baseUrl: baseUrl\n            }));\n\n          case 27:\n            return _context2.abrupt(\"return\", _context2.sent);\n\n          case 30:\n            _context2.prev = 30;\n            _context2.t0 = _context2[\"catch\"](24);\n            return _context2.abrupt(\"return\", {\n              success: false\n            });\n\n          case 33:\n            _context2.prev = 33;\n\n            if (!server) {\n              _context2.next = 37;\n              break;\n            }\n\n            _context2.next = 37;\n            return server.stop();\n\n          case 37:\n            return _context2.finish(33);\n\n          case 38:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2, null, [[24, 30, 33, 38]]);\n  }));\n  return _execute.apply(this, arguments);\n}\n\nexports.execute = execute;\nexports.default = architect_1.createBuilder(execute);","map":{"version":3,"sources":["/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@angular-devkit/build-angular/src/protractor/index.js"],"names":["Object","defineProperty","exports","value","execute","architect_1","require","core_1","path_1","url","utils_1","runProtractor","root","options","additionalProtractorConfig","baseUrl","specs","length","undefined","suite","jasmineNodeOpts","grep","invertGrep","runModuleAsObservableFork","resolve","protractorConfig","toPromise","updateWebdriver","webdriverDeepImport","protractorPath","path","paths","code","Error","tags","stripIndents","Promise","then","webdriverUpdate","program","run","standalone","gecko","quiet","context","devServerTarget","target","targetFromTargetString","getTargetOptions","serverOptions","overrides","watch","liveReload","host","port","scheduleTarget","server","result","success","publicHost","test","ssl","clientUrl","parse","format","protocol","hostname","toString","endsWith","workspaceRoot","stop","default","createBuilder"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.execute = void 0;\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst architect_1 = require(\"@angular-devkit/architect\");\nconst core_1 = require(\"@angular-devkit/core\");\nconst path_1 = require(\"path\");\nconst url = require(\"url\");\nconst utils_1 = require(\"../utils\");\nfunction runProtractor(root, options) {\n    const additionalProtractorConfig = {\n        baseUrl: options.baseUrl,\n        specs: options.specs && options.specs.length ? options.specs : undefined,\n        suite: options.suite,\n        jasmineNodeOpts: {\n            grep: options.grep,\n            invertGrep: options.invertGrep,\n        },\n    };\n    // TODO: Protractor manages process.exit itself, so this target will allways quit the\n    // process. To work around this we run it in a subprocess.\n    // https://github.com/angular/protractor/issues/4160\n    return utils_1.runModuleAsObservableFork(root, 'protractor/built/launcher', 'init', [path_1.resolve(root, options.protractorConfig), additionalProtractorConfig]).toPromise();\n}\nasync function updateWebdriver() {\n    // The webdriver-manager update command can only be accessed via a deep import.\n    const webdriverDeepImport = 'webdriver-manager/built/lib/cmds/update';\n    let path;\n    try {\n        const protractorPath = require.resolve('protractor');\n        path = require.resolve(webdriverDeepImport, { paths: [protractorPath] });\n    }\n    catch (error) {\n        if (error.code !== 'MODULE_NOT_FOUND') {\n            throw error;\n        }\n    }\n    if (!path) {\n        throw new Error(core_1.tags.stripIndents `\n      Cannot automatically find webdriver-manager to update.\n      Update webdriver-manager manually and run 'ng e2e --no-webdriver-update' instead.\n    `);\n    }\n    // tslint:disable-next-line:max-line-length no-implicit-dependencies\n    const webdriverUpdate = await Promise.resolve().then(() => require(path));\n    // const webdriverUpdate = await import(path) as typeof import ('webdriver-manager/built/lib/cmds/update');\n    // run `webdriver-manager update --standalone false --gecko false --quiet`\n    // if you change this, update the command comment in prev line\n    return webdriverUpdate.program.run({\n        standalone: false,\n        gecko: false,\n        quiet: true,\n    });\n}\nasync function execute(options, context) {\n    // ensure that only one of these options is used\n    if (options.devServerTarget && options.baseUrl) {\n        throw new Error(core_1.tags.stripIndents `\n    The 'baseUrl' option cannot be used with 'devServerTarget'.\n    When present, 'devServerTarget' will be used to automatically setup 'baseUrl' for Protractor.\n    `);\n    }\n    if (options.webdriverUpdate) {\n        await updateWebdriver();\n    }\n    let baseUrl = options.baseUrl;\n    let server;\n    if (options.devServerTarget) {\n        const target = architect_1.targetFromTargetString(options.devServerTarget);\n        const serverOptions = await context.getTargetOptions(target);\n        const overrides = {\n            watch: false,\n            liveReload: false,\n        };\n        if (options.host !== undefined) {\n            overrides.host = options.host;\n        }\n        else if (typeof serverOptions.host === 'string') {\n            options.host = serverOptions.host;\n        }\n        else {\n            options.host = overrides.host = 'localhost';\n        }\n        if (options.port !== undefined) {\n            overrides.port = options.port;\n        }\n        else if (typeof serverOptions.port === 'number') {\n            options.port = serverOptions.port;\n        }\n        server = await context.scheduleTarget(target, overrides);\n        const result = await server.result;\n        if (!result.success) {\n            return { success: false };\n        }\n        if (typeof serverOptions.publicHost === 'string') {\n            let publicHost = serverOptions.publicHost;\n            if (!/^\\w+:\\/\\//.test(publicHost)) {\n                publicHost = `${serverOptions.ssl\n                    ? 'https'\n                    : 'http'}://${publicHost}`;\n            }\n            const clientUrl = url.parse(publicHost);\n            baseUrl = url.format(clientUrl);\n        }\n        else if (typeof result.baseUrl === 'string') {\n            baseUrl = result.baseUrl;\n        }\n        else if (typeof result.port === 'number') {\n            baseUrl = url.format({\n                protocol: serverOptions.ssl ? 'https' : 'http',\n                hostname: options.host,\n                port: result.port.toString(),\n            });\n        }\n    }\n    // Like the baseUrl in protractor config file when using the API we need to add\n    // a trailing slash when provide to the baseUrl.\n    if (baseUrl && !baseUrl.endsWith('/')) {\n        baseUrl += '/';\n    }\n    try {\n        return await runProtractor(context.workspaceRoot, { ...options, baseUrl });\n    }\n    catch (_a) {\n        return { success: false };\n    }\n    finally {\n        if (server) {\n            await server.stop();\n        }\n    }\n}\nexports.execute = execute;\nexports.default = architect_1.createBuilder(execute);\n"]},"metadata":{},"sourceType":"script"}