{"ast":null,"code":"/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n(function (factory) {\n  if (typeof module === \"object\" && typeof module.exports === \"object\") {\n    var v = factory(require, exports);\n    if (v !== undefined) module.exports = v;\n  } else if (typeof define === \"function\" && define.amd) {\n    define(\"@angular/compiler-cli/src/ngtsc/partial_evaluator/src/ts_helpers\", [\"require\", \"exports\", \"tslib\", \"@angular/compiler-cli/src/ngtsc/partial_evaluator/src/builtin\", \"@angular/compiler-cli/src/ngtsc/partial_evaluator/src/dynamic\", \"@angular/compiler-cli/src/ngtsc/partial_evaluator/src/result\"], factory);\n  }\n})(function (require, exports) {\n  \"use strict\";\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.SpreadHelperFn = exports.AssignHelperFn = void 0;\n\n  var tslib_1 = require(\"tslib\");\n\n  var builtin_1 = require(\"@angular/compiler-cli/src/ngtsc/partial_evaluator/src/builtin\");\n\n  var dynamic_1 = require(\"@angular/compiler-cli/src/ngtsc/partial_evaluator/src/dynamic\");\n\n  var result_1 = require(\"@angular/compiler-cli/src/ngtsc/partial_evaluator/src/result\"); // Use the same implementation we use for `Object.assign()`. Semantically these functions are the\n  // same, so they can also share the same evaluation code.\n\n\n  var AssignHelperFn =\n  /** @class */\n  function (_super) {\n    tslib_1.__extends(AssignHelperFn, _super);\n\n    function AssignHelperFn() {\n      return _super !== null && _super.apply(this, arguments) || this;\n    }\n\n    return AssignHelperFn;\n  }(builtin_1.ObjectAssignBuiltinFn);\n\n  exports.AssignHelperFn = AssignHelperFn; // Used for both `__spread()` and `__spreadArrays()` TypeScript helper functions.\n\n  var SpreadHelperFn =\n  /** @class */\n  function (_super) {\n    tslib_1.__extends(SpreadHelperFn, _super);\n\n    function SpreadHelperFn() {\n      return _super !== null && _super.apply(this, arguments) || this;\n    }\n\n    SpreadHelperFn.prototype.evaluate = function (node, args) {\n      var e_1, _a;\n\n      var result = [];\n\n      try {\n        for (var args_1 = tslib_1.__values(args), args_1_1 = args_1.next(); !args_1_1.done; args_1_1 = args_1.next()) {\n          var arg = args_1_1.value;\n\n          if (arg instanceof dynamic_1.DynamicValue) {\n            result.push(dynamic_1.DynamicValue.fromDynamicInput(node, arg));\n          } else if (Array.isArray(arg)) {\n            result.push.apply(result, tslib_1.__spread(arg));\n          } else {\n            result.push(arg);\n          }\n        }\n      } catch (e_1_1) {\n        e_1 = {\n          error: e_1_1\n        };\n      } finally {\n        try {\n          if (args_1_1 && !args_1_1.done && (_a = args_1.return)) _a.call(args_1);\n        } finally {\n          if (e_1) throw e_1.error;\n        }\n      }\n\n      return result;\n    };\n\n    return SpreadHelperFn;\n  }(result_1.KnownFn);\n\n  exports.SpreadHelperFn = SpreadHelperFn;\n});","map":{"version":3,"sources":["../../../../../../../../../packages/compiler-cli/src/ngtsc/partial_evaluator/src/ts_helpers.ts"],"names":[],"mappings":"AAAA;;;;;;AAMG;;;;;;;;;;;;;;;;;;AAIH,MAAA,SAAA,GAAA,OAAA,CAAA,+DAAA,CAAA;;AACA,MAAA,SAAA,GAAA,OAAA,CAAA,+DAAA,CAAA;;AACA,MAAA,QAAA,GAAA,OAAA,CAAA,8DAAA,CAAA,C,CAGA;AACA;;;AACA,MAAA,cAAA;AAAA;AAAA,YAAA,MAAA,EAAA;AAAoC,IAAA,OAAA,CAAA,SAAA,CAAA,cAAA,EAAA,MAAA;;AAApC,aAAA,cAAA,GAAA;;AAA4D;;AAAD,WAAA,cAAA;AAAC,GAA5D,CAAoC,SAAA,CAAA,qBAApC,CAAA;;AAAa,EAAA,OAAA,CAAA,cAAA,GAAA,cAAA,C,CAEb;;AACA,MAAA,cAAA;AAAA;AAAA,YAAA,MAAA,EAAA;AAAoC,IAAA,OAAA,CAAA,SAAA,CAAA,cAAA,EAAA,MAAA;;AAApC,aAAA,cAAA,GAAA;;AAgBC;;AAfC,IAAA,cAAA,CAAA,SAAA,CAAA,QAAA,GAAA,UAAS,IAAT,EAAwB,IAAxB,EAAgD;;;AAC9C,UAAM,MAAM,GAAuB,EAAnC;;;AAEA,aAAkB,IAAA,MAAA,GAAA,OAAA,CAAA,QAAA,CAAA,IAAA,CAAA,EAAI,QAAA,GAAA,MAAA,CAAA,IAAA,EAAtB,EAAsB,CAAA,QAAA,CAAA,IAAtB,EAAsB,QAAA,GAAA,MAAA,CAAA,IAAA,EAAtB,EAAwB;AAAnB,cAAM,GAAG,GAAA,QAAA,CAAA,KAAT;;AACH,cAAI,GAAG,YAAY,SAAA,CAAA,YAAnB,EAAiC;AAC/B,YAAA,MAAM,CAAC,IAAP,CAAY,SAAA,CAAA,YAAA,CAAa,gBAAb,CAA8B,IAA9B,EAAoC,GAApC,CAAZ;AACD,WAFD,MAEO,IAAI,KAAK,CAAC,OAAN,CAAc,GAAd,CAAJ,EAAwB;AAC7B,YAAA,MAAM,CAAC,IAAP,CAAW,KAAX,CAAA,MAAA,EAAM,OAAA,CAAA,QAAA,CAAS,GAAT,CAAN;AACD,WAFM,MAEA;AACL,YAAA,MAAM,CAAC,IAAP,CAAY,GAAZ;AACD;AACF;;;;;;;;;;;;;AAED,aAAO,MAAP;AACD,KAdD;;AAeF,WAAA,cAAA;AAAC,GAhBD,CAAoC,QAAA,CAAA,OAApC,CAAA;;AAAa,EAAA,OAAA,CAAA,cAAA,GAAA,cAAA","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport * as ts from 'typescript';\n\nimport {ObjectAssignBuiltinFn} from './builtin';\nimport {DynamicValue} from './dynamic';\nimport {KnownFn, ResolvedValueArray} from './result';\n\n\n// Use the same implementation we use for `Object.assign()`. Semantically these functions are the\n// same, so they can also share the same evaluation code.\nexport class AssignHelperFn extends ObjectAssignBuiltinFn {}\n\n// Used for both `__spread()` and `__spreadArrays()` TypeScript helper functions.\nexport class SpreadHelperFn extends KnownFn {\n  evaluate(node: ts.Node, args: ResolvedValueArray): ResolvedValueArray {\n    const result: ResolvedValueArray = [];\n\n    for (const arg of args) {\n      if (arg instanceof DynamicValue) {\n        result.push(DynamicValue.fromDynamicInput(node, arg));\n      } else if (Array.isArray(arg)) {\n        result.push(...arg);\n      } else {\n        result.push(arg);\n      }\n    }\n\n    return result;\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}