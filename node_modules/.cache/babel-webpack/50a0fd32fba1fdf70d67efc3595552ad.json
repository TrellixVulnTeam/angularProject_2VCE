{"ast":null,"code":"'use strict';\n/**\n * Sticky bottom bar user interface\n */\n\nvar _classCallCheck = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _assertThisInitialized = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/assertThisInitialized\");\n\nvar _inherits = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar through = require('through');\n\nvar Base = require('./baseUI');\n\nvar rlUtils = require('../utils/readline');\n\nvar _ = {\n  last: require('lodash/last')\n};\n\nvar BottomBar = /*#__PURE__*/function (_Base) {\n  _inherits(BottomBar, _Base);\n\n  var _super = _createSuper(BottomBar);\n\n  function BottomBar(opt) {\n    var _this;\n\n    _classCallCheck(this, BottomBar);\n\n    opt = opt || {};\n    _this = _super.call(this, opt);\n    _this.log = through(_this.writeLog.bind(_assertThisInitialized(_this)));\n    _this.bottomBar = opt.bottomBar || '';\n\n    _this.render();\n\n    return _this;\n  }\n  /**\n   * Render the prompt to screen\n   * @return {BottomBar} self\n   */\n\n\n  _createClass(BottomBar, [{\n    key: \"render\",\n    value: function render() {\n      this.write(this.bottomBar);\n      return this;\n    }\n  }, {\n    key: \"clean\",\n    value: function clean() {\n      rlUtils.clearLine(this.rl, this.bottomBar.split('\\n').length);\n      return this;\n    }\n    /**\n     * Update the bottom bar content and rerender\n     * @param  {String} bottomBar Bottom bar content\n     * @return {BottomBar}           self\n     */\n\n  }, {\n    key: \"updateBottomBar\",\n    value: function updateBottomBar(bottomBar) {\n      rlUtils.clearLine(this.rl, 1);\n      this.rl.output.unmute();\n      this.clean();\n      this.bottomBar = bottomBar;\n      this.render();\n      this.rl.output.mute();\n      return this;\n    }\n    /**\n     * Write out log data\n     * @param {String} data - The log data to be output\n     * @return {BottomBar} self\n     */\n\n  }, {\n    key: \"writeLog\",\n    value: function writeLog(data) {\n      this.rl.output.unmute();\n      this.clean();\n      this.rl.output.write(this.enforceLF(data.toString()));\n      this.render();\n      this.rl.output.mute();\n      return this;\n    }\n    /**\n     * Make sure line end on a line feed\n     * @param  {String} str Input string\n     * @return {String}     The input string with a final line feed\n     */\n\n  }, {\n    key: \"enforceLF\",\n    value: function enforceLF(str) {\n      return str.match(/[\\r\\n]$/) ? str : str + '\\n';\n    }\n    /**\n     * Helper for writing message in Prompt\n     * @param {BottomBar} prompt  - The Prompt object that extends tty\n     * @param {String} message - The message to be output\n     */\n\n  }, {\n    key: \"write\",\n    value: function write(message) {\n      var msgLines = message.split(/\\n/);\n      this.height = msgLines.length; // Write message to screen and setPrompt to control backspace\n\n      this.rl.setPrompt(_.last(msgLines));\n\n      if (this.rl.output.rows === 0 && this.rl.output.columns === 0) {\n        /* When it's a tty through serial port there's no terminal info and the render will malfunction,\n           so we need enforce the cursor to locate to the leftmost position for rendering. */\n        rlUtils.left(this.rl, message.length + this.rl.line.length);\n      }\n\n      this.rl.output.write(message);\n    }\n  }]);\n\n  return BottomBar;\n}(Base);\n\nmodule.exports = BottomBar;","map":{"version":3,"sources":["/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/inquirer/lib/ui/bottom-bar.js"],"names":["through","require","Base","rlUtils","_","last","BottomBar","opt","log","writeLog","bind","bottomBar","render","write","clearLine","rl","split","length","output","unmute","clean","mute","data","enforceLF","toString","str","match","message","msgLines","height","setPrompt","rows","columns","left","line","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;;;;;;;;;;;;AAEA,IAAIA,OAAO,GAAGC,OAAO,CAAC,SAAD,CAArB;;AACA,IAAIC,IAAI,GAAGD,OAAO,CAAC,UAAD,CAAlB;;AACA,IAAIE,OAAO,GAAGF,OAAO,CAAC,mBAAD,CAArB;;AACA,IAAIG,CAAC,GAAG;AACNC,EAAAA,IAAI,EAAEJ,OAAO,CAAC,aAAD;AADP,CAAR;;IAIMK,S;;;;;AACJ,qBAAYC,GAAZ,EAAiB;AAAA;;AAAA;;AACfA,IAAAA,GAAG,GAAGA,GAAG,IAAI,EAAb;AAEA,8BAAMA,GAAN;AAEA,UAAKC,GAAL,GAAWR,OAAO,CAAC,MAAKS,QAAL,CAAcC,IAAd,+BAAD,CAAlB;AACA,UAAKC,SAAL,GAAiBJ,GAAG,CAACI,SAAJ,IAAiB,EAAlC;;AACA,UAAKC,MAAL;;AAPe;AAQhB;AAED;AACF;AACA;AACA;;;;;WAEE,kBAAS;AACP,WAAKC,KAAL,CAAW,KAAKF,SAAhB;AACA,aAAO,IAAP;AACD;;;WAED,iBAAQ;AACNR,MAAAA,OAAO,CAACW,SAAR,CAAkB,KAAKC,EAAvB,EAA2B,KAAKJ,SAAL,CAAeK,KAAf,CAAqB,IAArB,EAA2BC,MAAtD;AACA,aAAO,IAAP;AACD;AAED;AACF;AACA;AACA;AACA;;;;WAEE,yBAAgBN,SAAhB,EAA2B;AACzBR,MAAAA,OAAO,CAACW,SAAR,CAAkB,KAAKC,EAAvB,EAA2B,CAA3B;AACA,WAAKA,EAAL,CAAQG,MAAR,CAAeC,MAAf;AACA,WAAKC,KAAL;AACA,WAAKT,SAAL,GAAiBA,SAAjB;AACA,WAAKC,MAAL;AACA,WAAKG,EAAL,CAAQG,MAAR,CAAeG,IAAf;AACA,aAAO,IAAP;AACD;AAED;AACF;AACA;AACA;AACA;;;;WAEE,kBAASC,IAAT,EAAe;AACb,WAAKP,EAAL,CAAQG,MAAR,CAAeC,MAAf;AACA,WAAKC,KAAL;AACA,WAAKL,EAAL,CAAQG,MAAR,CAAeL,KAAf,CAAqB,KAAKU,SAAL,CAAeD,IAAI,CAACE,QAAL,EAAf,CAArB;AACA,WAAKZ,MAAL;AACA,WAAKG,EAAL,CAAQG,MAAR,CAAeG,IAAf;AACA,aAAO,IAAP;AACD;AAED;AACF;AACA;AACA;AACA;;;;WAEE,mBAAUI,GAAV,EAAe;AACb,aAAOA,GAAG,CAACC,KAAJ,CAAU,SAAV,IAAuBD,GAAvB,GAA6BA,GAAG,GAAG,IAA1C;AACD;AAED;AACF;AACA;AACA;AACA;;;;WACE,eAAME,OAAN,EAAe;AACb,UAAIC,QAAQ,GAAGD,OAAO,CAACX,KAAR,CAAc,IAAd,CAAf;AACA,WAAKa,MAAL,GAAcD,QAAQ,CAACX,MAAvB,CAFa,CAIb;;AACA,WAAKF,EAAL,CAAQe,SAAR,CAAkB1B,CAAC,CAACC,IAAF,CAAOuB,QAAP,CAAlB;;AAEA,UAAI,KAAKb,EAAL,CAAQG,MAAR,CAAea,IAAf,KAAwB,CAAxB,IAA6B,KAAKhB,EAAL,CAAQG,MAAR,CAAec,OAAf,KAA2B,CAA5D,EAA+D;AAC7D;AACN;AACM7B,QAAAA,OAAO,CAAC8B,IAAR,CAAa,KAAKlB,EAAlB,EAAsBY,OAAO,CAACV,MAAR,GAAiB,KAAKF,EAAL,CAAQmB,IAAR,CAAajB,MAApD;AACD;;AAED,WAAKF,EAAL,CAAQG,MAAR,CAAeL,KAAf,CAAqBc,OAArB;AACD;;;;EAtFqBzB,I;;AAyFxBiC,MAAM,CAACC,OAAP,GAAiB9B,SAAjB","sourcesContent":["'use strict';\n/**\n * Sticky bottom bar user interface\n */\n\nvar through = require('through');\nvar Base = require('./baseUI');\nvar rlUtils = require('../utils/readline');\nvar _ = {\n  last: require('lodash/last'),\n};\n\nclass BottomBar extends Base {\n  constructor(opt) {\n    opt = opt || {};\n\n    super(opt);\n\n    this.log = through(this.writeLog.bind(this));\n    this.bottomBar = opt.bottomBar || '';\n    this.render();\n  }\n\n  /**\n   * Render the prompt to screen\n   * @return {BottomBar} self\n   */\n\n  render() {\n    this.write(this.bottomBar);\n    return this;\n  }\n\n  clean() {\n    rlUtils.clearLine(this.rl, this.bottomBar.split('\\n').length);\n    return this;\n  }\n\n  /**\n   * Update the bottom bar content and rerender\n   * @param  {String} bottomBar Bottom bar content\n   * @return {BottomBar}           self\n   */\n\n  updateBottomBar(bottomBar) {\n    rlUtils.clearLine(this.rl, 1);\n    this.rl.output.unmute();\n    this.clean();\n    this.bottomBar = bottomBar;\n    this.render();\n    this.rl.output.mute();\n    return this;\n  }\n\n  /**\n   * Write out log data\n   * @param {String} data - The log data to be output\n   * @return {BottomBar} self\n   */\n\n  writeLog(data) {\n    this.rl.output.unmute();\n    this.clean();\n    this.rl.output.write(this.enforceLF(data.toString()));\n    this.render();\n    this.rl.output.mute();\n    return this;\n  }\n\n  /**\n   * Make sure line end on a line feed\n   * @param  {String} str Input string\n   * @return {String}     The input string with a final line feed\n   */\n\n  enforceLF(str) {\n    return str.match(/[\\r\\n]$/) ? str : str + '\\n';\n  }\n\n  /**\n   * Helper for writing message in Prompt\n   * @param {BottomBar} prompt  - The Prompt object that extends tty\n   * @param {String} message - The message to be output\n   */\n  write(message) {\n    var msgLines = message.split(/\\n/);\n    this.height = msgLines.length;\n\n    // Write message to screen and setPrompt to control backspace\n    this.rl.setPrompt(_.last(msgLines));\n\n    if (this.rl.output.rows === 0 && this.rl.output.columns === 0) {\n      /* When it's a tty through serial port there's no terminal info and the render will malfunction,\n         so we need enforce the cursor to locate to the leftmost position for rendering. */\n      rlUtils.left(this.rl, message.length + this.rl.line.length);\n    }\n\n    this.rl.output.write(message);\n  }\n}\n\nmodule.exports = BottomBar;\n"]},"metadata":{},"sourceType":"script"}