{"ast":null,"code":"\"use strict\";\n\nvar _defineProperty = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/defineProperty\");\n\nvar _regeneratorRuntime = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _objectSpread = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/objectSpread2\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createBuilder = void 0;\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nvar core_1 = require(\"@angular-devkit/core\");\n\nvar rxjs_1 = require(\"rxjs\");\n\nvar operators_1 = require(\"rxjs/operators\");\n\nvar api_1 = require(\"./api\");\n\nvar internal_1 = require(\"./internal\");\n\nvar schedule_by_name_1 = require(\"./schedule-by-name\"); // tslint:disable-next-line: no-big-function\n\n\nfunction createBuilder(fn) {\n  var _ref;\n\n  var cjh = core_1.experimental.jobs.createJobHandler;\n  var handler = cjh(function (options, context) {\n    var scheduler = context.scheduler;\n    var progressChannel = context.createChannel('progress');\n    var logChannel = context.createChannel('log');\n    var analyticsChannel = context.createChannel('analytics');\n    var currentState = api_1.BuilderProgressState.Stopped;\n    var teardownLogics = [];\n    var tearingDown = false;\n    var current = 0;\n    var status = '';\n    var total = 1;\n\n    function log(entry) {\n      logChannel.next(entry);\n    }\n\n    function progress(progress, context) {\n      currentState = progress.state;\n\n      if (progress.state === api_1.BuilderProgressState.Running) {\n        current = progress.current;\n        total = progress.total !== undefined ? progress.total : total;\n\n        if (progress.status === undefined) {\n          progress.status = status;\n        } else {\n          status = progress.status;\n        }\n      }\n\n      progressChannel.next(_objectSpread(_objectSpread(_objectSpread(_objectSpread({}, progress), context.target && {\n        target: context.target\n      }), context.builder && {\n        builder: context.builder\n      }), {}, {\n        id: context.id\n      }));\n    }\n\n    return new rxjs_1.Observable(function (observer) {\n      var subscriptions = [];\n      var inputSubscription = context.inboundBus.subscribe(function (i) {\n        switch (i.kind) {\n          case core_1.experimental.jobs.JobInboundMessageKind.Stop:\n            // Run teardown logic then complete.\n            tearingDown = true;\n            Promise.all(teardownLogics.map(function (fn) {\n              return fn() || Promise.resolve();\n            })).then(function () {\n              return observer.complete();\n            }, function (err) {\n              return observer.error(err);\n            });\n            break;\n\n          case core_1.experimental.jobs.JobInboundMessageKind.Input:\n            if (!tearingDown) {\n              onInput(i.value);\n            }\n\n            break;\n        }\n      });\n\n      function onInput(i) {\n        var builder = i.info;\n        var loggerName = i.target ? api_1.targetStringFromTarget(i.target) : builder.builderName;\n        var logger = new core_1.logging.Logger(loggerName);\n        subscriptions.push(logger.subscribe(function (entry) {\n          return log(entry);\n        }));\n        var context = {\n          builder: builder,\n          workspaceRoot: i.workspaceRoot,\n          currentDirectory: i.currentDirectory,\n          target: i.target,\n          logger: logger,\n          id: i.id,\n          scheduleTarget: function scheduleTarget(target) {\n            var _arguments = arguments;\n            return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n              var overrides, scheduleOptions, run;\n              return _regeneratorRuntime.wrap(function _callee$(_context) {\n                while (1) {\n                  switch (_context.prev = _context.next) {\n                    case 0:\n                      overrides = _arguments.length > 1 && _arguments[1] !== undefined ? _arguments[1] : {};\n                      scheduleOptions = _arguments.length > 2 && _arguments[2] !== undefined ? _arguments[2] : {};\n                      _context.next = 4;\n                      return schedule_by_name_1.scheduleByTarget(target, overrides, {\n                        scheduler: scheduler,\n                        logger: scheduleOptions.logger || logger.createChild(''),\n                        workspaceRoot: i.workspaceRoot,\n                        currentDirectory: i.currentDirectory\n                      });\n\n                    case 4:\n                      run = _context.sent;\n                      // We don't want to subscribe errors and complete.\n                      subscriptions.push(run.progress.subscribe(function (event) {\n                        return progressChannel.next(event);\n                      }));\n                      return _context.abrupt(\"return\", run);\n\n                    case 7:\n                    case \"end\":\n                      return _context.stop();\n                  }\n                }\n              }, _callee);\n            }))();\n          },\n          scheduleBuilder: function scheduleBuilder(builderName) {\n            var _arguments2 = arguments;\n            return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n              var options, scheduleOptions, run;\n              return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n                while (1) {\n                  switch (_context2.prev = _context2.next) {\n                    case 0:\n                      options = _arguments2.length > 1 && _arguments2[1] !== undefined ? _arguments2[1] : {};\n                      scheduleOptions = _arguments2.length > 2 && _arguments2[2] !== undefined ? _arguments2[2] : {};\n                      _context2.next = 4;\n                      return schedule_by_name_1.scheduleByName(builderName, options, {\n                        scheduler: scheduler,\n                        target: scheduleOptions.target,\n                        logger: scheduleOptions.logger || logger.createChild(''),\n                        workspaceRoot: i.workspaceRoot,\n                        currentDirectory: i.currentDirectory\n                      });\n\n                    case 4:\n                      run = _context2.sent;\n                      // We don't want to subscribe errors and complete.\n                      subscriptions.push(run.progress.subscribe(function (event) {\n                        return progressChannel.next(event);\n                      }));\n                      return _context2.abrupt(\"return\", run);\n\n                    case 7:\n                    case \"end\":\n                      return _context2.stop();\n                  }\n                }\n              }, _callee2);\n            }))();\n          },\n          getTargetOptions: function getTargetOptions(target) {\n            return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n              return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n                while (1) {\n                  switch (_context3.prev = _context3.next) {\n                    case 0:\n                      return _context3.abrupt(\"return\", scheduler.schedule('..getTargetOptions', target).output.toPromise());\n\n                    case 1:\n                    case \"end\":\n                      return _context3.stop();\n                  }\n                }\n              }, _callee3);\n            }))();\n          },\n          getProjectMetadata: function getProjectMetadata(target) {\n            return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n              return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n                while (1) {\n                  switch (_context4.prev = _context4.next) {\n                    case 0:\n                      return _context4.abrupt(\"return\", scheduler.schedule('..getProjectMetadata', target).output.toPromise());\n\n                    case 1:\n                    case \"end\":\n                      return _context4.stop();\n                  }\n                }\n              }, _callee4);\n            }))();\n          },\n          getBuilderNameForTarget: function getBuilderNameForTarget(target) {\n            return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n              return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n                while (1) {\n                  switch (_context5.prev = _context5.next) {\n                    case 0:\n                      return _context5.abrupt(\"return\", scheduler.schedule('..getBuilderNameForTarget', target).output.toPromise());\n\n                    case 1:\n                    case \"end\":\n                      return _context5.stop();\n                  }\n                }\n              }, _callee5);\n            }))();\n          },\n          validateOptions: function validateOptions(options, builderName) {\n            return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6() {\n              return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n                while (1) {\n                  switch (_context6.prev = _context6.next) {\n                    case 0:\n                      return _context6.abrupt(\"return\", scheduler.schedule('..validateOptions', [builderName, options]).output.toPromise());\n\n                    case 1:\n                    case \"end\":\n                      return _context6.stop();\n                  }\n                }\n              }, _callee6);\n            }))();\n          },\n          reportRunning: function reportRunning() {\n            switch (currentState) {\n              case api_1.BuilderProgressState.Waiting:\n              case api_1.BuilderProgressState.Stopped:\n                progress({\n                  state: api_1.BuilderProgressState.Running,\n                  current: 0,\n                  total: total\n                }, context);\n                break;\n            }\n          },\n          reportStatus: function reportStatus(status) {\n            switch (currentState) {\n              case api_1.BuilderProgressState.Running:\n                progress({\n                  state: currentState,\n                  status: status,\n                  current: current,\n                  total: total\n                }, context);\n                break;\n\n              case api_1.BuilderProgressState.Waiting:\n                progress({\n                  state: currentState,\n                  status: status\n                }, context);\n                break;\n            }\n          },\n          reportProgress: function reportProgress(current, total, status) {\n            switch (currentState) {\n              case api_1.BuilderProgressState.Running:\n                progress({\n                  state: currentState,\n                  current: current,\n                  total: total,\n                  status: status\n                }, context);\n            }\n          },\n          analytics: new core_1.analytics.ForwardingAnalytics(function (report) {\n            return analyticsChannel.next(report);\n          }),\n          addTeardown: function addTeardown(teardown) {\n            teardownLogics.push(teardown);\n          }\n        };\n        context.reportRunning();\n        var result;\n\n        try {\n          result = fn(i.options, context);\n\n          if (api_1.isBuilderOutput(result)) {\n            result = rxjs_1.of(result);\n          } else if (!rxjs_1.isObservable(result) && isAsyncIterable(result)) {\n            result = api_1.fromAsyncIterable(result);\n          } else {\n            result = rxjs_1.from(result);\n          }\n        } catch (e) {\n          result = rxjs_1.throwError(e);\n        } // Manage some state automatically.\n\n\n        progress({\n          state: api_1.BuilderProgressState.Running,\n          current: 0,\n          total: 1\n        }, context);\n        subscriptions.push(result.pipe(operators_1.tap(function () {\n          progress({\n            state: api_1.BuilderProgressState.Running,\n            current: total\n          }, context);\n          progress({\n            state: api_1.BuilderProgressState.Stopped\n          }, context);\n        })).subscribe(function (message) {\n          return observer.next(message);\n        }, function (error) {\n          return observer.error(error);\n        }, function () {\n          return observer.complete();\n        }));\n      }\n\n      return function () {\n        subscriptions.forEach(function (x) {\n          return x.unsubscribe();\n        });\n        inputSubscription.unsubscribe();\n      };\n    });\n  });\n  return _ref = {\n    handler: handler\n  }, _defineProperty(_ref, internal_1.BuilderSymbol, true), _defineProperty(_ref, internal_1.BuilderVersionSymbol, require('../package.json').version), _ref;\n}\n\nexports.createBuilder = createBuilder;\n\nfunction isAsyncIterable(obj) {\n  return !!obj && typeof obj[Symbol.asyncIterator] === 'function';\n}","map":{"version":3,"sources":["/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@angular-devkit/architect/src/create-builder.js"],"names":["Object","defineProperty","exports","value","createBuilder","core_1","require","rxjs_1","operators_1","api_1","internal_1","schedule_by_name_1","fn","cjh","experimental","jobs","createJobHandler","handler","options","context","scheduler","progressChannel","createChannel","logChannel","analyticsChannel","currentState","BuilderProgressState","Stopped","teardownLogics","tearingDown","current","status","total","log","entry","next","progress","state","Running","undefined","target","builder","id","Observable","observer","subscriptions","inputSubscription","inboundBus","subscribe","i","kind","JobInboundMessageKind","Stop","Promise","all","map","resolve","then","complete","err","error","Input","onInput","info","loggerName","targetStringFromTarget","builderName","logger","logging","Logger","push","workspaceRoot","currentDirectory","scheduleTarget","overrides","scheduleOptions","scheduleByTarget","createChild","run","event","scheduleBuilder","scheduleByName","getTargetOptions","schedule","output","toPromise","getProjectMetadata","getBuilderNameForTarget","validateOptions","reportRunning","Waiting","reportStatus","reportProgress","analytics","ForwardingAnalytics","report","addTeardown","teardown","result","isBuilderOutput","of","isObservable","isAsyncIterable","fromAsyncIterable","from","e","throwError","pipe","tap","message","forEach","x","unsubscribe","BuilderSymbol","BuilderVersionSymbol","version","obj","Symbol","asyncIterator"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.createBuilder = void 0;\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst core_1 = require(\"@angular-devkit/core\");\nconst rxjs_1 = require(\"rxjs\");\nconst operators_1 = require(\"rxjs/operators\");\nconst api_1 = require(\"./api\");\nconst internal_1 = require(\"./internal\");\nconst schedule_by_name_1 = require(\"./schedule-by-name\");\n// tslint:disable-next-line: no-big-function\nfunction createBuilder(fn) {\n    const cjh = core_1.experimental.jobs.createJobHandler;\n    const handler = cjh((options, context) => {\n        const scheduler = context.scheduler;\n        const progressChannel = context.createChannel('progress');\n        const logChannel = context.createChannel('log');\n        const analyticsChannel = context.createChannel('analytics');\n        let currentState = api_1.BuilderProgressState.Stopped;\n        const teardownLogics = [];\n        let tearingDown = false;\n        let current = 0;\n        let status = '';\n        let total = 1;\n        function log(entry) {\n            logChannel.next(entry);\n        }\n        function progress(progress, context) {\n            currentState = progress.state;\n            if (progress.state === api_1.BuilderProgressState.Running) {\n                current = progress.current;\n                total = progress.total !== undefined ? progress.total : total;\n                if (progress.status === undefined) {\n                    progress.status = status;\n                }\n                else {\n                    status = progress.status;\n                }\n            }\n            progressChannel.next({\n                ...progress,\n                ...(context.target && { target: context.target }),\n                ...(context.builder && { builder: context.builder }),\n                id: context.id,\n            });\n        }\n        return new rxjs_1.Observable(observer => {\n            const subscriptions = [];\n            const inputSubscription = context.inboundBus.subscribe(i => {\n                switch (i.kind) {\n                    case core_1.experimental.jobs.JobInboundMessageKind.Stop:\n                        // Run teardown logic then complete.\n                        tearingDown = true;\n                        Promise.all(teardownLogics.map(fn => fn() || Promise.resolve()))\n                            .then(() => observer.complete(), err => observer.error(err));\n                        break;\n                    case core_1.experimental.jobs.JobInboundMessageKind.Input:\n                        if (!tearingDown) {\n                            onInput(i.value);\n                        }\n                        break;\n                }\n            });\n            function onInput(i) {\n                const builder = i.info;\n                const loggerName = i.target\n                    ? api_1.targetStringFromTarget(i.target)\n                    : builder.builderName;\n                const logger = new core_1.logging.Logger(loggerName);\n                subscriptions.push(logger.subscribe(entry => log(entry)));\n                const context = {\n                    builder,\n                    workspaceRoot: i.workspaceRoot,\n                    currentDirectory: i.currentDirectory,\n                    target: i.target,\n                    logger: logger,\n                    id: i.id,\n                    async scheduleTarget(target, overrides = {}, scheduleOptions = {}) {\n                        const run = await schedule_by_name_1.scheduleByTarget(target, overrides, {\n                            scheduler,\n                            logger: scheduleOptions.logger || logger.createChild(''),\n                            workspaceRoot: i.workspaceRoot,\n                            currentDirectory: i.currentDirectory,\n                        });\n                        // We don't want to subscribe errors and complete.\n                        subscriptions.push(run.progress.subscribe(event => progressChannel.next(event)));\n                        return run;\n                    },\n                    async scheduleBuilder(builderName, options = {}, scheduleOptions = {}) {\n                        const run = await schedule_by_name_1.scheduleByName(builderName, options, {\n                            scheduler,\n                            target: scheduleOptions.target,\n                            logger: scheduleOptions.logger || logger.createChild(''),\n                            workspaceRoot: i.workspaceRoot,\n                            currentDirectory: i.currentDirectory,\n                        });\n                        // We don't want to subscribe errors and complete.\n                        subscriptions.push(run.progress.subscribe(event => progressChannel.next(event)));\n                        return run;\n                    },\n                    async getTargetOptions(target) {\n                        return scheduler.schedule('..getTargetOptions', target).output.toPromise();\n                    },\n                    async getProjectMetadata(target) {\n                        return scheduler.schedule('..getProjectMetadata', target).output.toPromise();\n                    },\n                    async getBuilderNameForTarget(target) {\n                        return scheduler.schedule('..getBuilderNameForTarget', target).output.toPromise();\n                    },\n                    async validateOptions(options, builderName) {\n                        return scheduler.schedule('..validateOptions', [builderName, options]).output.toPromise();\n                    },\n                    reportRunning() {\n                        switch (currentState) {\n                            case api_1.BuilderProgressState.Waiting:\n                            case api_1.BuilderProgressState.Stopped:\n                                progress({ state: api_1.BuilderProgressState.Running, current: 0, total }, context);\n                                break;\n                        }\n                    },\n                    reportStatus(status) {\n                        switch (currentState) {\n                            case api_1.BuilderProgressState.Running:\n                                progress({ state: currentState, status, current, total }, context);\n                                break;\n                            case api_1.BuilderProgressState.Waiting:\n                                progress({ state: currentState, status }, context);\n                                break;\n                        }\n                    },\n                    reportProgress(current, total, status) {\n                        switch (currentState) {\n                            case api_1.BuilderProgressState.Running:\n                                progress({ state: currentState, current, total, status }, context);\n                        }\n                    },\n                    analytics: new core_1.analytics.ForwardingAnalytics(report => analyticsChannel.next(report)),\n                    addTeardown(teardown) {\n                        teardownLogics.push(teardown);\n                    },\n                };\n                context.reportRunning();\n                let result;\n                try {\n                    result = fn(i.options, context);\n                    if (api_1.isBuilderOutput(result)) {\n                        result = rxjs_1.of(result);\n                    }\n                    else if (!rxjs_1.isObservable(result) && isAsyncIterable(result)) {\n                        result = api_1.fromAsyncIterable(result);\n                    }\n                    else {\n                        result = rxjs_1.from(result);\n                    }\n                }\n                catch (e) {\n                    result = rxjs_1.throwError(e);\n                }\n                // Manage some state automatically.\n                progress({ state: api_1.BuilderProgressState.Running, current: 0, total: 1 }, context);\n                subscriptions.push(result.pipe(operators_1.tap(() => {\n                    progress({ state: api_1.BuilderProgressState.Running, current: total }, context);\n                    progress({ state: api_1.BuilderProgressState.Stopped }, context);\n                })).subscribe(message => observer.next(message), error => observer.error(error), () => observer.complete()));\n            }\n            return () => {\n                subscriptions.forEach(x => x.unsubscribe());\n                inputSubscription.unsubscribe();\n            };\n        });\n    });\n    return {\n        handler,\n        [internal_1.BuilderSymbol]: true,\n        [internal_1.BuilderVersionSymbol]: require('../package.json').version,\n    };\n}\nexports.createBuilder = createBuilder;\nfunction isAsyncIterable(obj) {\n    return !!obj && typeof obj[Symbol.asyncIterator] === 'function';\n}\n"]},"metadata":{},"sourceType":"script"}