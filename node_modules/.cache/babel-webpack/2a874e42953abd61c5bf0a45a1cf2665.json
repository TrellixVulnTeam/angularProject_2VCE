{"ast":null,"code":"(function (factory) {\n  if (typeof module === \"object\" && typeof module.exports === \"object\") {\n    var v = factory(require, exports);\n    if (v !== undefined) module.exports = v;\n  } else if (typeof define === \"function\" && define.amd) {\n    define(\"@angular/compiler-cli/src/typescript_support\", [\"require\", \"exports\", \"typescript\", \"@angular/compiler-cli/src/diagnostics/typescript_version\"], factory);\n  }\n})(function (require, exports) {\n  \"use strict\";\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.verifySupportedTypeScriptVersion = exports.checkVersion = exports.restoreTypeScriptVersionForTesting = exports.setTypeScriptVersionForTesting = void 0;\n  /**\n   * @license\n   * Copyright Google LLC All Rights Reserved.\n   *\n   * Use of this source code is governed by an MIT-style license that can be\n   * found in the LICENSE file at https://angular.io/license\n   */\n\n  var ts = require(\"typescript\");\n\n  var typescript_version_1 = require(\"@angular/compiler-cli/src/diagnostics/typescript_version\");\n  /**\n   * Minimum supported TypeScript version\n   * ∀ supported typescript version v, v >= MIN_TS_VERSION\n   *\n   * Note: this check is disabled in g3, search for\n   * `angularCompilerOptions.disableTypeScriptVersionCheck` config param value in g3.\n   */\n\n\n  var MIN_TS_VERSION = '4.0.0';\n  /**\n   * Supremum of supported TypeScript versions\n   * ∀ supported typescript version v, v < MAX_TS_VERSION\n   * MAX_TS_VERSION is not considered as a supported TypeScript version\n   *\n   * Note: this check is disabled in g3, search for\n   * `angularCompilerOptions.disableTypeScriptVersionCheck` config param value in g3.\n   */\n\n  var MAX_TS_VERSION = '4.2.0';\n  /**\n   * The currently used version of TypeScript, which can be adjusted for testing purposes using\n   * `setTypeScriptVersionForTesting` and `restoreTypeScriptVersionForTesting` below.\n   */\n\n  var tsVersion = ts.version;\n\n  function setTypeScriptVersionForTesting(version) {\n    tsVersion = version;\n  }\n\n  exports.setTypeScriptVersionForTesting = setTypeScriptVersionForTesting;\n\n  function restoreTypeScriptVersionForTesting() {\n    tsVersion = ts.version;\n  }\n\n  exports.restoreTypeScriptVersionForTesting = restoreTypeScriptVersionForTesting;\n  /**\n   * Checks whether a given version ∈ [minVersion, maxVersion[.\n   * An error will be thrown when the given version ∉ [minVersion, maxVersion[.\n   *\n   * @param version The version on which the check will be performed\n   * @param minVersion The lower bound version. A valid version needs to be greater than minVersion\n   * @param maxVersion The upper bound version. A valid version needs to be strictly less than\n   * maxVersion\n   *\n   * @throws Will throw an error if the given version ∉ [minVersion, maxVersion[\n   */\n\n  function checkVersion(version, minVersion, maxVersion) {\n    if (typescript_version_1.compareVersions(version, minVersion) < 0 || typescript_version_1.compareVersions(version, maxVersion) >= 0) {\n      throw new Error(\"The Angular Compiler requires TypeScript >=\" + minVersion + \" and <\" + maxVersion + \" but \" + version + \" was found instead.\");\n    }\n  }\n\n  exports.checkVersion = checkVersion;\n\n  function verifySupportedTypeScriptVersion() {\n    checkVersion(tsVersion, MIN_TS_VERSION, MAX_TS_VERSION);\n  }\n\n  exports.verifySupportedTypeScriptVersion = verifySupportedTypeScriptVersion;\n});","map":{"version":3,"sources":["../../../../../../packages/compiler-cli/src/typescript_support.ts"],"names":[],"mappings":";;;;;;;;;;;;;;AAAA;;;;;;AAMG;;AACH,MAAA,EAAA,GAAA,OAAA,CAAA,YAAA,CAAA;;AACA,MAAA,oBAAA,GAAA,OAAA,CAAA,0DAAA,CAAA;AAEA;;;;;;AAMG;;;AACH,MAAM,cAAc,GAAG,OAAvB;AAEA;;;;;;;AAOG;;AACH,MAAM,cAAc,GAAG,OAAvB;AAEA;;;AAGG;;AACH,MAAI,SAAS,GAAG,EAAE,CAAC,OAAnB;;AAEA,WAAgB,8BAAhB,CAA+C,OAA/C,EAA8D;AAC5D,IAAA,SAAS,GAAG,OAAZ;AACD;;AAFD,EAAA,OAAA,CAAA,8BAAA,GAAA,8BAAA;;AAIA,WAAgB,kCAAhB,GAAkD;AAChD,IAAA,SAAS,GAAG,EAAE,CAAC,OAAf;AACD;;AAFD,EAAA,OAAA,CAAA,kCAAA,GAAA,kCAAA;AAIA;;;;;;;;;;AAUG;;AACH,WAAgB,YAAhB,CAA6B,OAA7B,EAA8C,UAA9C,EAAkE,UAAlE,EAAoF;AAClF,QAAK,oBAAA,CAAA,eAAA,CAAgB,OAAhB,EAAyB,UAAzB,IAAuC,CAAvC,IAA4C,oBAAA,CAAA,eAAA,CAAgB,OAAhB,EAAyB,UAAzB,KAAwC,CAAzF,EAA6F;AAC3F,YAAM,IAAI,KAAJ,CAAU,gDAA8C,UAA9C,GAAwD,QAAxD,GACZ,UADY,GACF,OADE,GACM,OADN,GACa,qBADvB,CAAN;AAED;AACF;;AALD,EAAA,OAAA,CAAA,YAAA,GAAA,YAAA;;AAOA,WAAgB,gCAAhB,GAAgD;AAC9C,IAAA,YAAY,CAAC,SAAD,EAAY,cAAZ,EAA4B,cAA5B,CAAZ;AACD;;AAFD,EAAA,OAAA,CAAA,gCAAA,GAAA,gCAAA","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as ts from 'typescript';\nimport {compareVersions} from './diagnostics/typescript_version';\n\n/**\n * Minimum supported TypeScript version\n * ∀ supported typescript version v, v >= MIN_TS_VERSION\n *\n * Note: this check is disabled in g3, search for\n * `angularCompilerOptions.disableTypeScriptVersionCheck` config param value in g3.\n */\nconst MIN_TS_VERSION = '4.0.0';\n\n/**\n * Supremum of supported TypeScript versions\n * ∀ supported typescript version v, v < MAX_TS_VERSION\n * MAX_TS_VERSION is not considered as a supported TypeScript version\n *\n * Note: this check is disabled in g3, search for\n * `angularCompilerOptions.disableTypeScriptVersionCheck` config param value in g3.\n */\nconst MAX_TS_VERSION = '4.2.0';\n\n/**\n * The currently used version of TypeScript, which can be adjusted for testing purposes using\n * `setTypeScriptVersionForTesting` and `restoreTypeScriptVersionForTesting` below.\n */\nlet tsVersion = ts.version;\n\nexport function setTypeScriptVersionForTesting(version: string): void {\n  tsVersion = version;\n}\n\nexport function restoreTypeScriptVersionForTesting(): void {\n  tsVersion = ts.version;\n}\n\n/**\n * Checks whether a given version ∈ [minVersion, maxVersion[.\n * An error will be thrown when the given version ∉ [minVersion, maxVersion[.\n *\n * @param version The version on which the check will be performed\n * @param minVersion The lower bound version. A valid version needs to be greater than minVersion\n * @param maxVersion The upper bound version. A valid version needs to be strictly less than\n * maxVersion\n *\n * @throws Will throw an error if the given version ∉ [minVersion, maxVersion[\n */\nexport function checkVersion(version: string, minVersion: string, maxVersion: string) {\n  if ((compareVersions(version, minVersion) < 0 || compareVersions(version, maxVersion) >= 0)) {\n    throw new Error(`The Angular Compiler requires TypeScript >=${minVersion} and <${\n        maxVersion} but ${version} was found instead.`);\n  }\n}\n\nexport function verifySupportedTypeScriptVersion(): void {\n  checkVersion(tsVersion, MIN_TS_VERSION, MAX_TS_VERSION);\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}