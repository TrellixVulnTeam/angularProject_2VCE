{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nvar _createForOfIteratorHelper = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _classCallCheck = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _require = require(\"webpack-sources\"),\n    RawSource = _require.RawSource,\n    ReplaceSource = _require.ReplaceSource;\n/** @typedef {import(\"./Dependency\")} Dependency */\n\n/** @typedef {import(\"./Dependency\").DependencyTemplate} DependencyTemplate */\n\n/** @typedef {import(\"./RuntimeTemplate\")} RuntimeTemplate */\n\n/** @typedef {import(\"./util/createHash\").Hash} Hash */\n\n/** @typedef {(d: Dependency) => boolean} DependencyFilterFunction */\n\n/** @typedef {Map<Function, DependencyTemplate>} DependencyTemplates */\n\n\nvar DependenciesBlockVariable = /*#__PURE__*/function () {\n  /**\n   * Creates an instance of DependenciesBlockVariable.\n   * @param {string} name name of DependenciesBlockVariable\n   * @param {string} expression expression string\n   * @param {Dependency[]=} dependencies dependencies tied to this varaiable\n   */\n  function DependenciesBlockVariable(name, expression, dependencies) {\n    _classCallCheck(this, DependenciesBlockVariable);\n\n    this.name = name;\n    this.expression = expression;\n    this.dependencies = dependencies || [];\n  }\n  /**\n   * @param {Hash} hash hash for instance to update\n   * @returns {void}\n   */\n\n\n  _createClass(DependenciesBlockVariable, [{\n    key: \"updateHash\",\n    value: function updateHash(hash) {\n      hash.update(this.name);\n      hash.update(this.expression);\n\n      var _iterator = _createForOfIteratorHelper(this.dependencies),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var d = _step.value;\n          d.updateHash(hash);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n    /**\n     * @param {DependencyTemplates} dependencyTemplates Dependency constructors and templates Map.\n     * @param {RuntimeTemplate} runtimeTemplate runtimeTemplate to generate expression souce\n     * @returns {ReplaceSource} returns constructed source for expression via templates\n     */\n\n  }, {\n    key: \"expressionSource\",\n    value: function expressionSource(dependencyTemplates, runtimeTemplate) {\n      var source = new ReplaceSource(new RawSource(this.expression));\n\n      var _iterator2 = _createForOfIteratorHelper(this.dependencies),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var dep = _step2.value;\n          var template = dependencyTemplates.get(dep.constructor);\n\n          if (!template) {\n            throw new Error(\"No template for dependency: \".concat(dep.constructor.name));\n          }\n\n          template.apply(dep, source, runtimeTemplate, dependencyTemplates);\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n\n      return source;\n    }\n  }, {\n    key: \"disconnect\",\n    value: function disconnect() {\n      var _iterator3 = _createForOfIteratorHelper(this.dependencies),\n          _step3;\n\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var d = _step3.value;\n          d.disconnect();\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n    }\n  }, {\n    key: \"hasDependencies\",\n    value: function hasDependencies(filter) {\n      if (filter) {\n        return this.dependencies.some(filter);\n      }\n\n      return this.dependencies.length > 0;\n    }\n  }]);\n\n  return DependenciesBlockVariable;\n}();\n\nmodule.exports = DependenciesBlockVariable;","map":{"version":3,"sources":["/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/webpack/lib/DependenciesBlockVariable.js"],"names":["require","RawSource","ReplaceSource","DependenciesBlockVariable","name","expression","dependencies","hash","update","d","updateHash","dependencyTemplates","runtimeTemplate","source","dep","template","get","constructor","Error","apply","disconnect","filter","some","length","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;;;;;;;AAEA,eAAqCA,OAAO,CAAC,iBAAD,CAA5C;AAAA,IAAQC,SAAR,YAAQA,SAAR;AAAA,IAAmBC,aAAnB,YAAmBA,aAAnB;AAEA;;AACA;;AACA;;AACA;;AACA;;AACA;;;IAEMC,yB;AACL;AACD;AACA;AACA;AACA;AACA;AACC,qCAAYC,IAAZ,EAAkBC,UAAlB,EAA8BC,YAA9B,EAA4C;AAAA;;AAC3C,SAAKF,IAAL,GAAYA,IAAZ;AACA,SAAKC,UAAL,GAAkBA,UAAlB;AACA,SAAKC,YAAL,GAAoBA,YAAY,IAAI,EAApC;AACA;AAED;AACD;AACA;AACA;;;;;WACC,oBAAWC,IAAX,EAAiB;AAChBA,MAAAA,IAAI,CAACC,MAAL,CAAY,KAAKJ,IAAjB;AACAG,MAAAA,IAAI,CAACC,MAAL,CAAY,KAAKH,UAAjB;;AAFgB,iDAGA,KAAKC,YAHL;AAAA;;AAAA;AAGhB,4DAAmC;AAAA,cAAxBG,CAAwB;AAClCA,UAAAA,CAAC,CAACC,UAAF,CAAaH,IAAb;AACA;AALe;AAAA;AAAA;AAAA;AAAA;AAMhB;AAED;AACD;AACA;AACA;AACA;;;;WACC,0BAAiBI,mBAAjB,EAAsCC,eAAtC,EAAuD;AACtD,UAAMC,MAAM,GAAG,IAAIX,aAAJ,CAAkB,IAAID,SAAJ,CAAc,KAAKI,UAAnB,CAAlB,CAAf;;AADsD,kDAEpC,KAAKC,YAF+B;AAAA;;AAAA;AAEtD,+DAAqC;AAAA,cAA1BQ,GAA0B;AACpC,cAAMC,QAAQ,GAAGJ,mBAAmB,CAACK,GAApB,CAAwBF,GAAG,CAACG,WAA5B,CAAjB;;AACA,cAAI,CAACF,QAAL,EAAe;AACd,kBAAM,IAAIG,KAAJ,uCAAyCJ,GAAG,CAACG,WAAJ,CAAgBb,IAAzD,EAAN;AACA;;AACDW,UAAAA,QAAQ,CAACI,KAAT,CAAeL,GAAf,EAAoBD,MAApB,EAA4BD,eAA5B,EAA6CD,mBAA7C;AACA;AARqD;AAAA;AAAA;AAAA;AAAA;;AAStD,aAAOE,MAAP;AACA;;;WAED,sBAAa;AAAA,kDACI,KAAKP,YADT;AAAA;;AAAA;AACZ,+DAAmC;AAAA,cAAxBG,CAAwB;AAClCA,UAAAA,CAAC,CAACW,UAAF;AACA;AAHW;AAAA;AAAA;AAAA;AAAA;AAIZ;;;WAED,yBAAgBC,MAAhB,EAAwB;AACvB,UAAIA,MAAJ,EAAY;AACX,eAAO,KAAKf,YAAL,CAAkBgB,IAAlB,CAAuBD,MAAvB,CAAP;AACA;;AACD,aAAO,KAAKf,YAAL,CAAkBiB,MAAlB,GAA2B,CAAlC;AACA;;;;;;AAGFC,MAAM,CAACC,OAAP,GAAiBtB,yBAAjB","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst { RawSource, ReplaceSource } = require(\"webpack-sources\");\n\n/** @typedef {import(\"./Dependency\")} Dependency */\n/** @typedef {import(\"./Dependency\").DependencyTemplate} DependencyTemplate */\n/** @typedef {import(\"./RuntimeTemplate\")} RuntimeTemplate */\n/** @typedef {import(\"./util/createHash\").Hash} Hash */\n/** @typedef {(d: Dependency) => boolean} DependencyFilterFunction */\n/** @typedef {Map<Function, DependencyTemplate>} DependencyTemplates */\n\nclass DependenciesBlockVariable {\n\t/**\n\t * Creates an instance of DependenciesBlockVariable.\n\t * @param {string} name name of DependenciesBlockVariable\n\t * @param {string} expression expression string\n\t * @param {Dependency[]=} dependencies dependencies tied to this varaiable\n\t */\n\tconstructor(name, expression, dependencies) {\n\t\tthis.name = name;\n\t\tthis.expression = expression;\n\t\tthis.dependencies = dependencies || [];\n\t}\n\n\t/**\n\t * @param {Hash} hash hash for instance to update\n\t * @returns {void}\n\t */\n\tupdateHash(hash) {\n\t\thash.update(this.name);\n\t\thash.update(this.expression);\n\t\tfor (const d of this.dependencies) {\n\t\t\td.updateHash(hash);\n\t\t}\n\t}\n\n\t/**\n\t * @param {DependencyTemplates} dependencyTemplates Dependency constructors and templates Map.\n\t * @param {RuntimeTemplate} runtimeTemplate runtimeTemplate to generate expression souce\n\t * @returns {ReplaceSource} returns constructed source for expression via templates\n\t */\n\texpressionSource(dependencyTemplates, runtimeTemplate) {\n\t\tconst source = new ReplaceSource(new RawSource(this.expression));\n\t\tfor (const dep of this.dependencies) {\n\t\t\tconst template = dependencyTemplates.get(dep.constructor);\n\t\t\tif (!template) {\n\t\t\t\tthrow new Error(`No template for dependency: ${dep.constructor.name}`);\n\t\t\t}\n\t\t\ttemplate.apply(dep, source, runtimeTemplate, dependencyTemplates);\n\t\t}\n\t\treturn source;\n\t}\n\n\tdisconnect() {\n\t\tfor (const d of this.dependencies) {\n\t\t\td.disconnect();\n\t\t}\n\t}\n\n\thasDependencies(filter) {\n\t\tif (filter) {\n\t\t\treturn this.dependencies.some(filter);\n\t\t}\n\t\treturn this.dependencies.length > 0;\n\t}\n}\n\nmodule.exports = DependenciesBlockVariable;\n"]},"metadata":{},"sourceType":"script"}