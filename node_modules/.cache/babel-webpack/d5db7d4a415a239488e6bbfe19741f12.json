{"ast":null,"code":"'use strict';\n/**\n * Base prompt implementation\n * Should be extended by prompt types.\n */\n\nvar _classCallCheck = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _ = {\n  assign: require('lodash/assign'),\n  defaults: require('lodash/defaults'),\n  clone: require('lodash/clone')\n};\n\nvar chalk = require('chalk');\n\nvar runAsync = require('run-async');\n\nvar _require = require('rxjs/operators'),\n    filter = _require.filter,\n    flatMap = _require.flatMap,\n    share = _require.share,\n    take = _require.take,\n    takeUntil = _require.takeUntil;\n\nvar Choices = require('../objects/choices');\n\nvar ScreenManager = require('../utils/screen-manager');\n\nvar Prompt = /*#__PURE__*/function () {\n  function Prompt(question, rl, answers) {\n    _classCallCheck(this, Prompt);\n\n    // Setup instance defaults property\n    _.assign(this, {\n      answers: answers,\n      status: 'pending'\n    }); // Set defaults prompt options\n\n\n    this.opt = _.defaults(_.clone(question), {\n      validate: function validate() {\n        return true;\n      },\n      filter: function filter(val) {\n        return val;\n      },\n      when: function when() {\n        return true;\n      },\n      suffix: '',\n      prefix: chalk.green('?')\n    }); // Make sure name is present\n\n    if (!this.opt.name) {\n      this.throwParamError('name');\n    } // Set default message if no message defined\n\n\n    if (!this.opt.message) {\n      this.opt.message = this.opt.name + ':';\n    } // Normalize choices\n\n\n    if (Array.isArray(this.opt.choices)) {\n      this.opt.choices = new Choices(this.opt.choices, answers);\n    }\n\n    this.rl = rl;\n    this.screen = new ScreenManager(this.rl);\n  }\n  /**\n   * Start the Inquiry session and manage output value filtering\n   * @return {Promise}\n   */\n\n\n  _createClass(Prompt, [{\n    key: \"run\",\n    value: function run() {\n      var _this = this;\n\n      return new Promise(function (resolve, reject) {\n        _this._run(function (value) {\n          return resolve(value);\n        }, function (error) {\n          return reject(error);\n        });\n      });\n    } // Default noop (this one should be overwritten in prompts)\n\n  }, {\n    key: \"_run\",\n    value: function _run(cb) {\n      cb();\n    }\n    /**\n     * Throw an error telling a required parameter is missing\n     * @param  {String} name Name of the missing param\n     * @return {Throw Error}\n     */\n\n  }, {\n    key: \"throwParamError\",\n    value: function throwParamError(name) {\n      throw new Error('You must provide a `' + name + '` parameter');\n    }\n    /**\n     * Called when the UI closes. Override to do any specific cleanup necessary\n     */\n\n  }, {\n    key: \"close\",\n    value: function close() {\n      this.screen.releaseCursor();\n    }\n    /**\n     * Run the provided validation method each time a submit event occur.\n     * @param  {Rx.Observable} submit - submit event flow\n     * @return {Object}        Object containing two observables: `success` and `error`\n     */\n\n  }, {\n    key: \"handleSubmitEvents\",\n    value: function handleSubmitEvents(submit) {\n      var self = this;\n      var validate = runAsync(this.opt.validate);\n      var asyncFilter = runAsync(this.opt.filter);\n      var validation = submit.pipe(flatMap(function (value) {\n        return asyncFilter(value, self.answers).then(function (filteredValue) {\n          return validate(filteredValue, self.answers).then(function (isValid) {\n            return {\n              isValid: isValid,\n              value: filteredValue\n            };\n          }, function (err) {\n            return {\n              isValid: err,\n              value: filteredValue\n            };\n          });\n        }, function (err) {\n          return {\n            isValid: err\n          };\n        });\n      }), share());\n      var success = validation.pipe(filter(function (state) {\n        return state.isValid === true;\n      }), take(1));\n      var error = validation.pipe(filter(function (state) {\n        return state.isValid !== true;\n      }), takeUntil(success));\n      return {\n        success: success,\n        error: error\n      };\n    }\n    /**\n     * Generate the prompt question string\n     * @return {String} prompt question string\n     */\n\n  }, {\n    key: \"getQuestion\",\n    value: function getQuestion() {\n      var message = this.opt.prefix + ' ' + chalk.bold(this.opt.message) + this.opt.suffix + chalk.reset(' '); // Append the default if available, and if question isn't answered\n\n      if (this.opt.default != null && this.status !== 'answered') {\n        // If default password is supplied, hide it\n        if (this.opt.type === 'password') {\n          message += chalk.italic.dim('[hidden] ');\n        } else {\n          message += chalk.dim('(' + this.opt.default + ') ');\n        }\n      }\n\n      return message;\n    }\n  }]);\n\n  return Prompt;\n}();\n\nmodule.exports = Prompt;","map":{"version":3,"sources":["/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/inquirer/lib/prompts/base.js"],"names":["_","assign","require","defaults","clone","chalk","runAsync","filter","flatMap","share","take","takeUntil","Choices","ScreenManager","Prompt","question","rl","answers","status","opt","validate","val","when","suffix","prefix","green","name","throwParamError","message","Array","isArray","choices","screen","Promise","resolve","reject","_run","value","error","cb","Error","releaseCursor","submit","self","asyncFilter","validation","pipe","then","filteredValue","isValid","err","success","state","bold","reset","default","type","italic","dim","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n/**\n * Base prompt implementation\n * Should be extended by prompt types.\n */\nvar _ = {\n  assign: require('lodash/assign'),\n  defaults: require('lodash/defaults'),\n  clone: require('lodash/clone'),\n};\nvar chalk = require('chalk');\nvar runAsync = require('run-async');\nvar { filter, flatMap, share, take, takeUntil } = require('rxjs/operators');\nvar Choices = require('../objects/choices');\nvar ScreenManager = require('../utils/screen-manager');\n\nclass Prompt {\n  constructor(question, rl, answers) {\n    // Setup instance defaults property\n    _.assign(this, {\n      answers: answers,\n      status: 'pending',\n    });\n\n    // Set defaults prompt options\n    this.opt = _.defaults(_.clone(question), {\n      validate: () => true,\n      filter: (val) => val,\n      when: () => true,\n      suffix: '',\n      prefix: chalk.green('?'),\n    });\n\n    // Make sure name is present\n    if (!this.opt.name) {\n      this.throwParamError('name');\n    }\n\n    // Set default message if no message defined\n    if (!this.opt.message) {\n      this.opt.message = this.opt.name + ':';\n    }\n\n    // Normalize choices\n    if (Array.isArray(this.opt.choices)) {\n      this.opt.choices = new Choices(this.opt.choices, answers);\n    }\n\n    this.rl = rl;\n    this.screen = new ScreenManager(this.rl);\n  }\n\n  /**\n   * Start the Inquiry session and manage output value filtering\n   * @return {Promise}\n   */\n\n  run() {\n    return new Promise((resolve, reject) => {\n      this._run(\n        (value) => resolve(value),\n        (error) => reject(error)\n      );\n    });\n  }\n\n  // Default noop (this one should be overwritten in prompts)\n  _run(cb) {\n    cb();\n  }\n\n  /**\n   * Throw an error telling a required parameter is missing\n   * @param  {String} name Name of the missing param\n   * @return {Throw Error}\n   */\n\n  throwParamError(name) {\n    throw new Error('You must provide a `' + name + '` parameter');\n  }\n\n  /**\n   * Called when the UI closes. Override to do any specific cleanup necessary\n   */\n  close() {\n    this.screen.releaseCursor();\n  }\n\n  /**\n   * Run the provided validation method each time a submit event occur.\n   * @param  {Rx.Observable} submit - submit event flow\n   * @return {Object}        Object containing two observables: `success` and `error`\n   */\n  handleSubmitEvents(submit) {\n    var self = this;\n    var validate = runAsync(this.opt.validate);\n    var asyncFilter = runAsync(this.opt.filter);\n    var validation = submit.pipe(\n      flatMap((value) =>\n        asyncFilter(value, self.answers).then(\n          (filteredValue) =>\n            validate(filteredValue, self.answers).then(\n              (isValid) => ({ isValid: isValid, value: filteredValue }),\n              (err) => ({ isValid: err, value: filteredValue })\n            ),\n          (err) => ({ isValid: err })\n        )\n      ),\n      share()\n    );\n\n    var success = validation.pipe(\n      filter((state) => state.isValid === true),\n      take(1)\n    );\n    var error = validation.pipe(\n      filter((state) => state.isValid !== true),\n      takeUntil(success)\n    );\n\n    return {\n      success: success,\n      error: error,\n    };\n  }\n\n  /**\n   * Generate the prompt question string\n   * @return {String} prompt question string\n   */\n\n  getQuestion() {\n    var message =\n      this.opt.prefix +\n      ' ' +\n      chalk.bold(this.opt.message) +\n      this.opt.suffix +\n      chalk.reset(' ');\n\n    // Append the default if available, and if question isn't answered\n    if (this.opt.default != null && this.status !== 'answered') {\n      // If default password is supplied, hide it\n      if (this.opt.type === 'password') {\n        message += chalk.italic.dim('[hidden] ');\n      } else {\n        message += chalk.dim('(' + this.opt.default + ') ');\n      }\n    }\n\n    return message;\n  }\n}\n\nmodule.exports = Prompt;\n"]},"metadata":{},"sourceType":"script"}