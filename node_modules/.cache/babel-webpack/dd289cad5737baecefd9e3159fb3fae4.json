{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nvar _createForOfIteratorHelper = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _construct = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/construct\");\n\nvar _toConsumableArray = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/toConsumableArray\");\n\nvar _classCallCheck = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/createClass\");\n\nvar SortableSet = require(\"./SortableSet\");\n/**\n * @template T\n * @template K\n * Multi layer bucket sorted set\n * Supports adding non-existing items (DO NOT ADD ITEM TWICE)\n * Supports removing exiting items (DO NOT REMOVE ITEM NOT IN SET)\n * Supports popping the first items according to defined order\n * Supports iterating all items without order\n * Supports updating an item in an efficient way\n * Supports size property, which is the number of items\n * Items are lazy partially sorted when needed\n */\n\n\nvar LazyBucketSortedSet = /*#__PURE__*/function () {\n  /**\n   * @param {function(T): K} getKey function to get key from item\n   * @param {function(K, K): number} comparator comparator to sort keys\n   * @param  {...((function(T): any) | (function(any, any): number))} args more pairs of getKey and comparator plus optional final comparator for the last layer\n   */\n  function LazyBucketSortedSet(getKey, comparator) {\n    _classCallCheck(this, LazyBucketSortedSet);\n\n    this._getKey = getKey;\n\n    for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n      args[_key - 2] = arguments[_key];\n    }\n\n    this._innerArgs = args;\n    this._leaf = args.length <= 1;\n    this._keys = new SortableSet(undefined, comparator);\n    /** @type {Map<K, LazyBucketSortedSet<T, any> | SortableSet<T>>} */\n\n    this._map = new Map();\n    this._unsortedItems = new Set();\n    this.size = 0;\n  }\n  /**\n   * @param {T} item an item\n   * @returns {void}\n   */\n\n\n  _createClass(LazyBucketSortedSet, [{\n    key: \"add\",\n    value: function add(item) {\n      this.size++;\n\n      this._unsortedItems.add(item);\n    }\n    /**\n     * @param {K} key key of item\n     * @param {T} item the item\n     * @returns {void}\n     */\n\n  }, {\n    key: \"_addInternal\",\n    value: function _addInternal(key, item) {\n      var entry = this._map.get(key);\n\n      if (entry === undefined) {\n        entry = this._leaf ? new SortableSet(undefined, this._innerArgs[0]) : _construct(\n        /** @type {any} */\n        LazyBucketSortedSet, _toConsumableArray(this._innerArgs));\n\n        this._keys.add(key);\n\n        this._map.set(key, entry);\n      }\n\n      entry.add(item);\n    }\n    /**\n     * @param {T} item an item\n     * @returns {void}\n     */\n\n  }, {\n    key: \"delete\",\n    value: function _delete(item) {\n      this.size--;\n\n      if (this._unsortedItems.has(item)) {\n        this._unsortedItems.delete(item);\n\n        return;\n      }\n\n      var key = this._getKey(item);\n\n      var entry = this._map.get(key);\n\n      entry.delete(item);\n\n      if (entry.size === 0) {\n        this._deleteKey(key);\n      }\n    }\n    /**\n     * @param {K} key key to be removed\n     * @returns {void}\n     */\n\n  }, {\n    key: \"_deleteKey\",\n    value: function _deleteKey(key) {\n      this._keys.delete(key);\n\n      this._map.delete(key);\n    }\n    /**\n     * @returns {T | undefined} an item\n     */\n\n  }, {\n    key: \"popFirst\",\n    value: function popFirst() {\n      if (this.size === 0) return undefined;\n      this.size--;\n\n      if (this._unsortedItems.size > 0) {\n        var _iterator = _createForOfIteratorHelper(this._unsortedItems),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var item = _step.value;\n\n            var _key2 = this._getKey(item);\n\n            this._addInternal(_key2, item);\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n\n        this._unsortedItems.clear();\n      }\n\n      this._keys.sort();\n\n      var key = this._keys.values().next().value;\n\n      var entry = this._map.get(key);\n\n      if (this._leaf) {\n        var leafEntry =\n        /** @type {SortableSet<T>} */\n        entry;\n        leafEntry.sort();\n        var _item = leafEntry.values().next().value;\n        leafEntry.delete(_item);\n\n        if (leafEntry.size === 0) {\n          this._deleteKey(key);\n        }\n\n        return _item;\n      } else {\n        var nodeEntry =\n        /** @type {LazyBucketSortedSet<T, any>} */\n        entry;\n\n        var _item2 = nodeEntry.popFirst();\n\n        if (nodeEntry.size === 0) {\n          this._deleteKey(key);\n        }\n\n        return _item2;\n      }\n    }\n    /**\n     * @param {T} item to be updated item\n     * @returns {function(true=): void} finish update\n     */\n\n  }, {\n    key: \"startUpdate\",\n    value: function startUpdate(item) {\n      var _this = this;\n\n      if (this._unsortedItems.has(item)) {\n        return function (remove) {\n          if (remove) {\n            _this._unsortedItems.delete(item);\n\n            _this.size--;\n            return;\n          }\n        };\n      }\n\n      var key = this._getKey(item);\n\n      if (this._leaf) {\n        var oldEntry =\n        /** @type {SortableSet<T>} */\n        this._map.get(key);\n\n        return function (remove) {\n          if (remove) {\n            _this.size--;\n            oldEntry.delete(item);\n\n            if (oldEntry.size === 0) {\n              _this._deleteKey(key);\n            }\n\n            return;\n          }\n\n          var newKey = _this._getKey(item);\n\n          if (key === newKey) {\n            // This flags the sortable set as unordered\n            oldEntry.add(item);\n          } else {\n            oldEntry.delete(item);\n\n            if (oldEntry.size === 0) {\n              _this._deleteKey(key);\n            }\n\n            _this._addInternal(newKey, item);\n          }\n        };\n      } else {\n        var _oldEntry =\n        /** @type {LazyBucketSortedSet<T, any>} */\n        this._map.get(key);\n\n        var finishUpdate = _oldEntry.startUpdate(item);\n\n        return function (remove) {\n          if (remove) {\n            _this.size--;\n            finishUpdate(true);\n\n            if (_oldEntry.size === 0) {\n              _this._deleteKey(key);\n            }\n\n            return;\n          }\n\n          var newKey = _this._getKey(item);\n\n          if (key === newKey) {\n            finishUpdate();\n          } else {\n            finishUpdate(true);\n\n            if (_oldEntry.size === 0) {\n              _this._deleteKey(key);\n            }\n\n            _this._addInternal(newKey, item);\n          }\n        };\n      }\n    }\n    /**\n     * @param {Iterator<T>[]} iterators list of iterators to append to\n     * @returns {void}\n     */\n\n  }, {\n    key: \"_appendIterators\",\n    value: function _appendIterators(iterators) {\n      if (this._unsortedItems.size > 0) iterators.push(this._unsortedItems[Symbol.iterator]());\n\n      var _iterator2 = _createForOfIteratorHelper(this._keys),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var key = _step2.value;\n\n          var entry = this._map.get(key);\n\n          if (this._leaf) {\n            var leafEntry =\n            /** @type {SortableSet<T>} */\n            entry;\n            var iterator = leafEntry[Symbol.iterator]();\n            iterators.push(iterator);\n          } else {\n            var nodeEntry =\n            /** @type {LazyBucketSortedSet<T, any>} */\n            entry;\n\n            nodeEntry._appendIterators(iterators);\n          }\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n    }\n    /**\n     * @returns {Iterator<T>} the iterator\n     */\n\n  }, {\n    key: Symbol.iterator,\n    value: function value() {\n      var iterators = [];\n\n      this._appendIterators(iterators);\n\n      iterators.reverse();\n      var currentIterator = iterators.pop();\n      return {\n        next: function next() {\n          var res = currentIterator.next();\n\n          if (res.done) {\n            if (iterators.length === 0) return res;\n            currentIterator = iterators.pop();\n            return currentIterator.next();\n          }\n\n          return res;\n        }\n      };\n    }\n  }]);\n\n  return LazyBucketSortedSet;\n}();\n\nmodule.exports = LazyBucketSortedSet;","map":{"version":3,"sources":["/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/webpack/lib/util/LazyBucketSortedSet.js"],"names":["SortableSet","require","LazyBucketSortedSet","getKey","comparator","_getKey","args","_innerArgs","_leaf","length","_keys","undefined","_map","Map","_unsortedItems","Set","size","item","add","key","entry","get","set","has","delete","_deleteKey","_addInternal","clear","sort","values","next","value","leafEntry","nodeEntry","popFirst","remove","oldEntry","newKey","finishUpdate","startUpdate","iterators","push","Symbol","iterator","_appendIterators","reverse","currentIterator","pop","res","done","module","exports"],"mappings":"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","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst SortableSet = require(\"./SortableSet\");\n\n/**\n * @template T\n * @template K\n * Multi layer bucket sorted set\n * Supports adding non-existing items (DO NOT ADD ITEM TWICE)\n * Supports removing exiting items (DO NOT REMOVE ITEM NOT IN SET)\n * Supports popping the first items according to defined order\n * Supports iterating all items without order\n * Supports updating an item in an efficient way\n * Supports size property, which is the number of items\n * Items are lazy partially sorted when needed\n */\nclass LazyBucketSortedSet {\n\t/**\n\t * @param {function(T): K} getKey function to get key from item\n\t * @param {function(K, K): number} comparator comparator to sort keys\n\t * @param  {...((function(T): any) | (function(any, any): number))} args more pairs of getKey and comparator plus optional final comparator for the last layer\n\t */\n\tconstructor(getKey, comparator, ...args) {\n\t\tthis._getKey = getKey;\n\t\tthis._innerArgs = args;\n\t\tthis._leaf = args.length <= 1;\n\t\tthis._keys = new SortableSet(undefined, comparator);\n\t\t/** @type {Map<K, LazyBucketSortedSet<T, any> | SortableSet<T>>} */\n\t\tthis._map = new Map();\n\t\tthis._unsortedItems = new Set();\n\t\tthis.size = 0;\n\t}\n\n\t/**\n\t * @param {T} item an item\n\t * @returns {void}\n\t */\n\tadd(item) {\n\t\tthis.size++;\n\t\tthis._unsortedItems.add(item);\n\t}\n\n\t/**\n\t * @param {K} key key of item\n\t * @param {T} item the item\n\t * @returns {void}\n\t */\n\t_addInternal(key, item) {\n\t\tlet entry = this._map.get(key);\n\t\tif (entry === undefined) {\n\t\t\tentry = this._leaf\n\t\t\t\t? new SortableSet(undefined, this._innerArgs[0])\n\t\t\t\t: new /** @type {any} */ (LazyBucketSortedSet)(...this._innerArgs);\n\t\t\tthis._keys.add(key);\n\t\t\tthis._map.set(key, entry);\n\t\t}\n\t\tentry.add(item);\n\t}\n\n\t/**\n\t * @param {T} item an item\n\t * @returns {void}\n\t */\n\tdelete(item) {\n\t\tthis.size--;\n\t\tif (this._unsortedItems.has(item)) {\n\t\t\tthis._unsortedItems.delete(item);\n\t\t\treturn;\n\t\t}\n\t\tconst key = this._getKey(item);\n\t\tconst entry = this._map.get(key);\n\t\tentry.delete(item);\n\t\tif (entry.size === 0) {\n\t\t\tthis._deleteKey(key);\n\t\t}\n\t}\n\n\t/**\n\t * @param {K} key key to be removed\n\t * @returns {void}\n\t */\n\t_deleteKey(key) {\n\t\tthis._keys.delete(key);\n\t\tthis._map.delete(key);\n\t}\n\n\t/**\n\t * @returns {T | undefined} an item\n\t */\n\tpopFirst() {\n\t\tif (this.size === 0) return undefined;\n\t\tthis.size--;\n\t\tif (this._unsortedItems.size > 0) {\n\t\t\tfor (const item of this._unsortedItems) {\n\t\t\t\tconst key = this._getKey(item);\n\t\t\t\tthis._addInternal(key, item);\n\t\t\t}\n\t\t\tthis._unsortedItems.clear();\n\t\t}\n\t\tthis._keys.sort();\n\t\tconst key = this._keys.values().next().value;\n\t\tconst entry = this._map.get(key);\n\t\tif (this._leaf) {\n\t\t\tconst leafEntry = /** @type {SortableSet<T>} */ (entry);\n\t\t\tleafEntry.sort();\n\t\t\tconst item = leafEntry.values().next().value;\n\t\t\tleafEntry.delete(item);\n\t\t\tif (leafEntry.size === 0) {\n\t\t\t\tthis._deleteKey(key);\n\t\t\t}\n\t\t\treturn item;\n\t\t} else {\n\t\t\tconst nodeEntry = /** @type {LazyBucketSortedSet<T, any>} */ (entry);\n\t\t\tconst item = nodeEntry.popFirst();\n\t\t\tif (nodeEntry.size === 0) {\n\t\t\t\tthis._deleteKey(key);\n\t\t\t}\n\t\t\treturn item;\n\t\t}\n\t}\n\n\t/**\n\t * @param {T} item to be updated item\n\t * @returns {function(true=): void} finish update\n\t */\n\tstartUpdate(item) {\n\t\tif (this._unsortedItems.has(item)) {\n\t\t\treturn remove => {\n\t\t\t\tif (remove) {\n\t\t\t\t\tthis._unsortedItems.delete(item);\n\t\t\t\t\tthis.size--;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\t\tconst key = this._getKey(item);\n\t\tif (this._leaf) {\n\t\t\tconst oldEntry = /** @type {SortableSet<T>} */ (this._map.get(key));\n\t\t\treturn remove => {\n\t\t\t\tif (remove) {\n\t\t\t\t\tthis.size--;\n\t\t\t\t\toldEntry.delete(item);\n\t\t\t\t\tif (oldEntry.size === 0) {\n\t\t\t\t\t\tthis._deleteKey(key);\n\t\t\t\t\t}\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tconst newKey = this._getKey(item);\n\t\t\t\tif (key === newKey) {\n\t\t\t\t\t// This flags the sortable set as unordered\n\t\t\t\t\toldEntry.add(item);\n\t\t\t\t} else {\n\t\t\t\t\toldEntry.delete(item);\n\t\t\t\t\tif (oldEntry.size === 0) {\n\t\t\t\t\t\tthis._deleteKey(key);\n\t\t\t\t\t}\n\t\t\t\t\tthis._addInternal(newKey, item);\n\t\t\t\t}\n\t\t\t};\n\t\t} else {\n\t\t\tconst oldEntry = /** @type {LazyBucketSortedSet<T, any>} */ (this._map.get(\n\t\t\t\tkey\n\t\t\t));\n\t\t\tconst finishUpdate = oldEntry.startUpdate(item);\n\t\t\treturn remove => {\n\t\t\t\tif (remove) {\n\t\t\t\t\tthis.size--;\n\t\t\t\t\tfinishUpdate(true);\n\t\t\t\t\tif (oldEntry.size === 0) {\n\t\t\t\t\t\tthis._deleteKey(key);\n\t\t\t\t\t}\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tconst newKey = this._getKey(item);\n\t\t\t\tif (key === newKey) {\n\t\t\t\t\tfinishUpdate();\n\t\t\t\t} else {\n\t\t\t\t\tfinishUpdate(true);\n\t\t\t\t\tif (oldEntry.size === 0) {\n\t\t\t\t\t\tthis._deleteKey(key);\n\t\t\t\t\t}\n\t\t\t\t\tthis._addInternal(newKey, item);\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\t}\n\n\t/**\n\t * @param {Iterator<T>[]} iterators list of iterators to append to\n\t * @returns {void}\n\t */\n\t_appendIterators(iterators) {\n\t\tif (this._unsortedItems.size > 0)\n\t\t\titerators.push(this._unsortedItems[Symbol.iterator]());\n\t\tfor (const key of this._keys) {\n\t\t\tconst entry = this._map.get(key);\n\t\t\tif (this._leaf) {\n\t\t\t\tconst leafEntry = /** @type {SortableSet<T>} */ (entry);\n\t\t\t\tconst iterator = leafEntry[Symbol.iterator]();\n\t\t\t\titerators.push(iterator);\n\t\t\t} else {\n\t\t\t\tconst nodeEntry = /** @type {LazyBucketSortedSet<T, any>} */ (entry);\n\t\t\t\tnodeEntry._appendIterators(iterators);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @returns {Iterator<T>} the iterator\n\t */\n\t[Symbol.iterator]() {\n\t\tconst iterators = [];\n\t\tthis._appendIterators(iterators);\n\t\titerators.reverse();\n\t\tlet currentIterator = iterators.pop();\n\t\treturn {\n\t\t\tnext: () => {\n\t\t\t\tconst res = currentIterator.next();\n\t\t\t\tif (res.done) {\n\t\t\t\t\tif (iterators.length === 0) return res;\n\t\t\t\t\tcurrentIterator = iterators.pop();\n\t\t\t\t\treturn currentIterator.next();\n\t\t\t\t}\n\t\t\t\treturn res;\n\t\t\t}\n\t\t};\n\t}\n}\n\nmodule.exports = LazyBucketSortedSet;\n"]},"metadata":{},"sourceType":"script"}