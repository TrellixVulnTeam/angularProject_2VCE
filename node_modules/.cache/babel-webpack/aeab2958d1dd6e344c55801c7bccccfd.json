{"ast":null,"code":"(function (factory) {\n  if (typeof module === \"object\" && typeof module.exports === \"object\") {\n    var v = factory(require, exports);\n    if (v !== undefined) module.exports = v;\n  } else if (typeof define === \"function\" && define.amd) {\n    define(\"@angular/compiler-cli/src/ngtsc/file_system/src/util\", [\"require\", \"exports\"], factory);\n  }\n})(function (require, exports) {\n  \"use strict\";\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.getSourceFileOrError = exports.stripExtension = exports.normalizeSeparators = void 0;\n  var TS_DTS_JS_EXTENSION = /(?:\\.d)?\\.ts$|\\.js$/;\n  /**\n   * Convert Windows-style separators to POSIX separators.\n   */\n\n  function normalizeSeparators(path) {\n    // TODO: normalize path only for OS that need it.\n    return path.replace(/\\\\/g, '/');\n  }\n\n  exports.normalizeSeparators = normalizeSeparators;\n  /**\n   * Remove a .ts, .d.ts, or .js extension from a file name.\n   */\n\n  function stripExtension(path) {\n    return path.replace(TS_DTS_JS_EXTENSION, '');\n  }\n\n  exports.stripExtension = stripExtension;\n\n  function getSourceFileOrError(program, fileName) {\n    var sf = program.getSourceFile(fileName);\n\n    if (sf === undefined) {\n      throw new Error(\"Program does not contain \\\"\" + fileName + \"\\\" - available files are \" + program.getSourceFiles().map(function (sf) {\n        return sf.fileName;\n      }).join(', '));\n    }\n\n    return sf;\n  }\n\n  exports.getSourceFileOrError = getSourceFileOrError;\n});","map":{"version":3,"sources":["../../../../../../../../../packages/compiler-cli/src/ngtsc/file_system/src/util.ts"],"names":[],"mappings":";;;;;;;;;;;;;;AAUA,MAAM,mBAAmB,GAAG,qBAA5B;AAEA;;AAEG;;AACH,WAAgB,mBAAhB,CAAoC,IAApC,EAAgD;AAC9C;AACA,WAAO,IAAI,CAAC,OAAL,CAAa,KAAb,EAAoB,GAApB,CAAP;AACD;;AAHD,EAAA,OAAA,CAAA,mBAAA,GAAA,mBAAA;AAKA;;AAEG;;AACH,WAAgB,cAAhB,CAAqD,IAArD,EAA4D;AAC1D,WAAO,IAAI,CAAC,OAAL,CAAa,mBAAb,EAAkC,EAAlC,CAAP;AACD;;AAFD,EAAA,OAAA,CAAA,cAAA,GAAA,cAAA;;AAIA,WAAgB,oBAAhB,CAAqC,OAArC,EAA0D,QAA1D,EAAkF;AAChF,QAAM,EAAE,GAAG,OAAO,CAAC,aAAR,CAAsB,QAAtB,CAAX;;AACA,QAAI,EAAE,KAAK,SAAX,EAAsB;AACpB,YAAM,IAAI,KAAJ,CAAU,gCAA6B,QAA7B,GAAqC,2BAArC,GACZ,OAAO,CAAC,cAAR,GAAyB,GAAzB,CAA6B,UAAA,EAAA,EAAE;AAAI,eAAA,EAAE,CAAF,QAAA;AAAW,OAA9C,EAAgD,IAAhD,CAAqD,IAArD,CADE,CAAN;AAED;;AACD,WAAO,EAAP;AACD;;AAPD,EAAA,OAAA,CAAA,oBAAA,GAAA,oBAAA","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as ts from 'typescript';\nimport {AbsoluteFsPath, PathString} from './types';\n\nconst TS_DTS_JS_EXTENSION = /(?:\\.d)?\\.ts$|\\.js$/;\n\n/**\n * Convert Windows-style separators to POSIX separators.\n */\nexport function normalizeSeparators(path: string): string {\n  // TODO: normalize path only for OS that need it.\n  return path.replace(/\\\\/g, '/');\n}\n\n/**\n * Remove a .ts, .d.ts, or .js extension from a file name.\n */\nexport function stripExtension<T extends PathString>(path: T): T {\n  return path.replace(TS_DTS_JS_EXTENSION, '') as T;\n}\n\nexport function getSourceFileOrError(program: ts.Program, fileName: AbsoluteFsPath): ts.SourceFile {\n  const sf = program.getSourceFile(fileName);\n  if (sf === undefined) {\n    throw new Error(`Program does not contain \"${fileName}\" - available files are ${\n        program.getSourceFiles().map(sf => sf.fileName).join(', ')}`);\n  }\n  return sf;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}