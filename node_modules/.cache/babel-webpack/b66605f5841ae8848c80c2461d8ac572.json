{"ast":null,"code":"'use strict';\n/**\n * `editor` type prompt\n */\n\nvar _classCallCheck = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar chalk = require('chalk');\n\nvar editAsync = require('external-editor').editAsync;\n\nvar Base = require('./base');\n\nvar observe = require('../utils/events');\n\nvar _require = require('rxjs'),\n    Subject = _require.Subject;\n\nvar EditorPrompt = /*#__PURE__*/function (_Base) {\n  _inherits(EditorPrompt, _Base);\n\n  var _super = _createSuper(EditorPrompt);\n\n  function EditorPrompt() {\n    _classCallCheck(this, EditorPrompt);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(EditorPrompt, [{\n    key: \"_run\",\n    value:\n    /**\n     * Start the Inquiry session\n     * @param  {Function} cb      Callback when prompt is done\n     * @return {this}\n     */\n    function _run(cb) {\n      this.done = cb;\n      this.editorResult = new Subject(); // Open Editor on \"line\" (Enter Key)\n\n      var events = observe(this.rl);\n      this.lineSubscription = events.line.subscribe(this.startExternalEditor.bind(this)); // Trigger Validation when editor closes\n\n      var validation = this.handleSubmitEvents(this.editorResult);\n      validation.success.forEach(this.onEnd.bind(this));\n      validation.error.forEach(this.onError.bind(this)); // Prevents default from being printed on screen (can look weird with multiple lines)\n\n      this.currentText = this.opt.default;\n      this.opt.default = null; // Init\n\n      this.render();\n      return this;\n    }\n    /**\n     * Render the prompt to screen\n     * @return {EditorPrompt} self\n     */\n\n  }, {\n    key: \"render\",\n    value: function render(error) {\n      var bottomContent = '';\n      var message = this.getQuestion();\n\n      if (this.status === 'answered') {\n        message += chalk.dim('Received');\n      } else {\n        message += chalk.dim('Press <enter> to launch your preferred editor.');\n      }\n\n      if (error) {\n        bottomContent = chalk.red('>> ') + error;\n      }\n\n      this.screen.render(message, bottomContent);\n    }\n    /**\n     * Launch $EDITOR on user press enter\n     */\n\n  }, {\n    key: \"startExternalEditor\",\n    value: function startExternalEditor() {\n      // Pause Readline to prevent stdin and stdout from being modified while the editor is showing\n      this.rl.pause();\n      editAsync(this.currentText, this.endExternalEditor.bind(this));\n    }\n  }, {\n    key: \"endExternalEditor\",\n    value: function endExternalEditor(error, result) {\n      this.rl.resume();\n\n      if (error) {\n        this.editorResult.error(error);\n      } else {\n        this.editorResult.next(result);\n      }\n    }\n  }, {\n    key: \"onEnd\",\n    value: function onEnd(state) {\n      this.editorResult.unsubscribe();\n      this.lineSubscription.unsubscribe();\n      this.answer = state.value;\n      this.status = 'answered'; // Re-render prompt\n\n      this.render();\n      this.screen.done();\n      this.done(this.answer);\n    }\n  }, {\n    key: \"onError\",\n    value: function onError(state) {\n      this.render(state.isValid);\n    }\n  }]);\n\n  return EditorPrompt;\n}(Base);\n\nmodule.exports = EditorPrompt;","map":{"version":3,"sources":["/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/inquirer/lib/prompts/editor.js"],"names":["chalk","require","editAsync","Base","observe","Subject","EditorPrompt","cb","done","editorResult","events","rl","lineSubscription","line","subscribe","startExternalEditor","bind","validation","handleSubmitEvents","success","forEach","onEnd","error","onError","currentText","opt","default","render","bottomContent","message","getQuestion","status","dim","red","screen","pause","endExternalEditor","result","resume","next","state","unsubscribe","answer","value","isValid","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n/**\n * `editor` type prompt\n */\n\nvar chalk = require('chalk');\nvar editAsync = require('external-editor').editAsync;\nvar Base = require('./base');\nvar observe = require('../utils/events');\nvar { Subject } = require('rxjs');\n\nclass EditorPrompt extends Base {\n  /**\n   * Start the Inquiry session\n   * @param  {Function} cb      Callback when prompt is done\n   * @return {this}\n   */\n\n  _run(cb) {\n    this.done = cb;\n\n    this.editorResult = new Subject();\n\n    // Open Editor on \"line\" (Enter Key)\n    var events = observe(this.rl);\n    this.lineSubscription = events.line.subscribe(this.startExternalEditor.bind(this));\n\n    // Trigger Validation when editor closes\n    var validation = this.handleSubmitEvents(this.editorResult);\n    validation.success.forEach(this.onEnd.bind(this));\n    validation.error.forEach(this.onError.bind(this));\n\n    // Prevents default from being printed on screen (can look weird with multiple lines)\n    this.currentText = this.opt.default;\n    this.opt.default = null;\n\n    // Init\n    this.render();\n\n    return this;\n  }\n\n  /**\n   * Render the prompt to screen\n   * @return {EditorPrompt} self\n   */\n\n  render(error) {\n    var bottomContent = '';\n    var message = this.getQuestion();\n\n    if (this.status === 'answered') {\n      message += chalk.dim('Received');\n    } else {\n      message += chalk.dim('Press <enter> to launch your preferred editor.');\n    }\n\n    if (error) {\n      bottomContent = chalk.red('>> ') + error;\n    }\n\n    this.screen.render(message, bottomContent);\n  }\n\n  /**\n   * Launch $EDITOR on user press enter\n   */\n\n  startExternalEditor() {\n    // Pause Readline to prevent stdin and stdout from being modified while the editor is showing\n    this.rl.pause();\n    editAsync(this.currentText, this.endExternalEditor.bind(this));\n  }\n\n  endExternalEditor(error, result) {\n    this.rl.resume();\n    if (error) {\n      this.editorResult.error(error);\n    } else {\n      this.editorResult.next(result);\n    }\n  }\n\n  onEnd(state) {\n    this.editorResult.unsubscribe();\n    this.lineSubscription.unsubscribe();\n    this.answer = state.value;\n    this.status = 'answered';\n    // Re-render prompt\n    this.render();\n    this.screen.done();\n    this.done(this.answer);\n  }\n\n  onError(state) {\n    this.render(state.isValid);\n  }\n}\n\nmodule.exports = EditorPrompt;\n"]},"metadata":{},"sourceType":"script"}