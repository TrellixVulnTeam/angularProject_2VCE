{"ast":null,"code":"/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n(function (factory) {\n  if (typeof module === \"object\" && typeof module.exports === \"object\") {\n    var v = factory(require, exports);\n    if (v !== undefined) module.exports = v;\n  } else if (typeof define === \"function\" && define.amd) {\n    define(\"@angular/compiler/src/shadow_css\", [\"require\", \"exports\", \"tslib\"], factory);\n  }\n})(function (require, exports) {\n  \"use strict\";\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.repeatGroups = exports.processRules = exports.CssRule = exports.ShadowCss = void 0;\n\n  var tslib_1 = require(\"tslib\");\n  /**\n   * This file is a port of shadowCSS from webcomponents.js to TypeScript.\n   *\n   * Please make sure to keep to edits in sync with the source file.\n   *\n   * Source:\n   * https://github.com/webcomponents/webcomponentsjs/blob/4efecd7e0e/src/ShadowCSS/ShadowCSS.js\n   *\n   * The original file level comment is reproduced below\n   */\n\n  /*\n    This is a limited shim for ShadowDOM css styling.\n    https://dvcs.w3.org/hg/webcomponents/raw-file/tip/spec/shadow/index.html#styles\n  \n    The intention here is to support only the styling features which can be\n    relatively simply implemented. The goal is to allow users to avoid the\n    most obvious pitfalls and do so without compromising performance significantly.\n    For ShadowDOM styling that's not covered here, a set of best practices\n    can be provided that should allow users to accomplish more complex styling.\n  \n    The following is a list of specific ShadowDOM styling features and a brief\n    discussion of the approach used to shim.\n  \n    Shimmed features:\n  \n    * :host, :host-context: ShadowDOM allows styling of the shadowRoot's host\n    element using the :host rule. To shim this feature, the :host styles are\n    reformatted and prefixed with a given scope name and promoted to a\n    document level stylesheet.\n    For example, given a scope name of .foo, a rule like this:\n  \n      :host {\n          background: red;\n        }\n      }\n  \n    becomes:\n  \n      .foo {\n        background: red;\n      }\n  \n    * encapsulation: Styles defined within ShadowDOM, apply only to\n    dom inside the ShadowDOM. Polymer uses one of two techniques to implement\n    this feature.\n  \n    By default, rules are prefixed with the host element tag name\n    as a descendant selector. This ensures styling does not leak out of the 'top'\n    of the element's ShadowDOM. For example,\n  \n    div {\n        font-weight: bold;\n      }\n  \n    becomes:\n  \n    x-foo div {\n        font-weight: bold;\n      }\n  \n    becomes:\n  \n  \n    Alternatively, if WebComponents.ShadowCSS.strictStyling is set to true then\n    selectors are scoped by adding an attribute selector suffix to each\n    simple selector that contains the host element tag name. Each element\n    in the element's ShadowDOM template is also given the scope attribute.\n    Thus, these rules match only elements that have the scope attribute.\n    For example, given a scope name of x-foo, a rule like this:\n  \n      div {\n        font-weight: bold;\n      }\n  \n    becomes:\n  \n      div[x-foo] {\n        font-weight: bold;\n      }\n  \n    Note that elements that are dynamically added to a scope must have the scope\n    selector added to them manually.\n  \n    * upper/lower bound encapsulation: Styles which are defined outside a\n    shadowRoot should not cross the ShadowDOM boundary and should not apply\n    inside a shadowRoot.\n  \n    This styling behavior is not emulated. Some possible ways to do this that\n    were rejected due to complexity and/or performance concerns include: (1) reset\n    every possible property for every possible selector for a given scope name;\n    (2) re-implement css in javascript.\n  \n    As an alternative, users should make sure to use selectors\n    specific to the scope in which they are working.\n  \n    * ::distributed: This behavior is not emulated. It's often not necessary\n    to style the contents of a specific insertion point and instead, descendants\n    of the host element can be styled selectively. Users can also create an\n    extra node around an insertion point and style that node's contents\n    via descendent selectors. For example, with a shadowRoot like this:\n  \n      <style>\n        ::content(div) {\n          background: red;\n        }\n      </style>\n      <content></content>\n  \n    could become:\n  \n      <style>\n        / *@polyfill .content-container div * /\n        ::content(div) {\n          background: red;\n        }\n      </style>\n      <div class=\"content-container\">\n        <content></content>\n      </div>\n  \n    Note the use of @polyfill in the comment above a ShadowDOM specific style\n    declaration. This is a directive to the styling shim to use the selector\n    in comments in lieu of the next selector when running under polyfill.\n  */\n\n\n  var ShadowCss =\n  /** @class */\n  function () {\n    function ShadowCss() {\n      this.strictStyling = true;\n    }\n    /*\n     * Shim some cssText with the given selector. Returns cssText that can\n     * be included in the document via WebComponents.ShadowCSS.addCssToDocument(css).\n     *\n     * When strictStyling is true:\n     * - selector is the attribute added to all elements inside the host,\n     * - hostSelector is the attribute added to the host itself.\n     */\n\n\n    ShadowCss.prototype.shimCssText = function (cssText, selector, hostSelector) {\n      if (hostSelector === void 0) {\n        hostSelector = '';\n      }\n\n      var commentsWithHash = extractCommentsWithHash(cssText);\n      cssText = stripComments(cssText);\n      cssText = this._insertDirectives(cssText);\n\n      var scopedCssText = this._scopeCssText(cssText, selector, hostSelector);\n\n      return tslib_1.__spread([scopedCssText], commentsWithHash).join('\\n');\n    };\n\n    ShadowCss.prototype._insertDirectives = function (cssText) {\n      cssText = this._insertPolyfillDirectivesInCssText(cssText);\n      return this._insertPolyfillRulesInCssText(cssText);\n    };\n    /*\n     * Process styles to convert native ShadowDOM rules that will trip\n     * up the css parser; we rely on decorating the stylesheet with inert rules.\n     *\n     * For example, we convert this rule:\n     *\n     * polyfill-next-selector { content: ':host menu-item'; }\n     * ::content menu-item {\n     *\n     * to this:\n     *\n     * scopeName menu-item {\n     *\n     **/\n\n\n    ShadowCss.prototype._insertPolyfillDirectivesInCssText = function (cssText) {\n      // Difference with webcomponents.js: does not handle comments\n      return cssText.replace(_cssContentNextSelectorRe, function () {\n        var m = [];\n\n        for (var _i = 0; _i < arguments.length; _i++) {\n          m[_i] = arguments[_i];\n        }\n\n        return m[2] + '{';\n      });\n    };\n    /*\n     * Process styles to add rules which will only apply under the polyfill\n     *\n     * For example, we convert this rule:\n     *\n     * polyfill-rule {\n     *   content: ':host menu-item';\n     * ...\n     * }\n     *\n     * to this:\n     *\n     * scopeName menu-item {...}\n     *\n     **/\n\n\n    ShadowCss.prototype._insertPolyfillRulesInCssText = function (cssText) {\n      // Difference with webcomponents.js: does not handle comments\n      return cssText.replace(_cssContentRuleRe, function () {\n        var m = [];\n\n        for (var _i = 0; _i < arguments.length; _i++) {\n          m[_i] = arguments[_i];\n        }\n\n        var rule = m[0].replace(m[1], '').replace(m[2], '');\n        return m[4] + rule;\n      });\n    };\n    /* Ensure styles are scoped. Pseudo-scoping takes a rule like:\n     *\n     *  .foo {... }\n     *\n     *  and converts this to\n     *\n     *  scopeName .foo { ... }\n     */\n\n\n    ShadowCss.prototype._scopeCssText = function (cssText, scopeSelector, hostSelector) {\n      var unscopedRules = this._extractUnscopedRulesFromCssText(cssText); // replace :host and :host-context -shadowcsshost and -shadowcsshost respectively\n\n\n      cssText = this._insertPolyfillHostInCssText(cssText);\n      cssText = this._convertColonHost(cssText);\n      cssText = this._convertColonHostContext(cssText);\n      cssText = this._convertShadowDOMSelectors(cssText);\n\n      if (scopeSelector) {\n        cssText = this._scopeSelectors(cssText, scopeSelector, hostSelector);\n      }\n\n      cssText = cssText + '\\n' + unscopedRules;\n      return cssText.trim();\n    };\n    /*\n     * Process styles to add rules which will only apply under the polyfill\n     * and do not process via CSSOM. (CSSOM is destructive to rules on rare\n     * occasions, e.g. -webkit-calc on Safari.)\n     * For example, we convert this rule:\n     *\n     * @polyfill-unscoped-rule {\n     *   content: 'menu-item';\n     * ... }\n     *\n     * to this:\n     *\n     * menu-item {...}\n     *\n     **/\n\n\n    ShadowCss.prototype._extractUnscopedRulesFromCssText = function (cssText) {\n      // Difference with webcomponents.js: does not handle comments\n      var r = '';\n      var m;\n      _cssContentUnscopedRuleRe.lastIndex = 0;\n\n      while ((m = _cssContentUnscopedRuleRe.exec(cssText)) !== null) {\n        var rule = m[0].replace(m[2], '').replace(m[1], m[4]);\n        r += rule + '\\n\\n';\n      }\n\n      return r;\n    };\n    /*\n     * convert a rule like :host(.foo) > .bar { }\n     *\n     * to\n     *\n     * .foo<scopeName> > .bar\n     */\n\n\n    ShadowCss.prototype._convertColonHost = function (cssText) {\n      return cssText.replace(_cssColonHostRe, function (_, hostSelectors, otherSelectors) {\n        var e_1, _a;\n\n        if (hostSelectors) {\n          var convertedSelectors = [];\n          var hostSelectorArray = hostSelectors.split(',').map(function (p) {\n            return p.trim();\n          });\n\n          try {\n            for (var hostSelectorArray_1 = tslib_1.__values(hostSelectorArray), hostSelectorArray_1_1 = hostSelectorArray_1.next(); !hostSelectorArray_1_1.done; hostSelectorArray_1_1 = hostSelectorArray_1.next()) {\n              var hostSelector = hostSelectorArray_1_1.value;\n              if (!hostSelector) break;\n              var convertedSelector = _polyfillHostNoCombinator + hostSelector.replace(_polyfillHost, '') + otherSelectors;\n              convertedSelectors.push(convertedSelector);\n            }\n          } catch (e_1_1) {\n            e_1 = {\n              error: e_1_1\n            };\n          } finally {\n            try {\n              if (hostSelectorArray_1_1 && !hostSelectorArray_1_1.done && (_a = hostSelectorArray_1.return)) _a.call(hostSelectorArray_1);\n            } finally {\n              if (e_1) throw e_1.error;\n            }\n          }\n\n          return convertedSelectors.join(',');\n        } else {\n          return _polyfillHostNoCombinator + otherSelectors;\n        }\n      });\n    };\n    /*\n     * convert a rule like :host-context(.foo) > .bar { }\n     *\n     * to\n     *\n     * .foo<scopeName> > .bar, .foo <scopeName> > .bar { }\n     *\n     * and\n     *\n     * :host-context(.foo:host) .bar { ... }\n     *\n     * to\n     *\n     * .foo<scopeName> .bar { ... }\n     */\n\n\n    ShadowCss.prototype._convertColonHostContext = function (cssText) {\n      return cssText.replace(_cssColonHostContextReGlobal, function (selectorText) {\n        // We have captured a selector that contains a `:host-context` rule.\n        var _a; // For backward compatibility `:host-context` may contain a comma separated list of selectors.\n        // Each context selector group will contain a list of host-context selectors that must match\n        // an ancestor of the host.\n        // (Normally `contextSelectorGroups` will only contain a single array of context selectors.)\n\n\n        var contextSelectorGroups = [[]]; // There may be more than `:host-context` in this selector so `selectorText` could look like:\n        // `:host-context(.one):host-context(.two)`.\n        // Execute `_cssColonHostContextRe` over and over until we have extracted all the\n        // `:host-context` selectors from this selector.\n\n        var match;\n\n        while (match = _cssColonHostContextRe.exec(selectorText)) {\n          // `match` = [':host-context(<selectors>)<rest>', <selectors>, <rest>]\n          // The `<selectors>` could actually be a comma separated list: `:host-context(.one, .two)`.\n          var newContextSelectors = ((_a = match[1]) !== null && _a !== void 0 ? _a : '').trim().split(',').map(function (m) {\n            return m.trim();\n          }).filter(function (m) {\n            return m !== '';\n          }); // We must duplicate the current selector group for each of these new selectors.\n          // For example if the current groups are:\n          // ```\n          // [\n          //   ['a', 'b', 'c'],\n          //   ['x', 'y', 'z'],\n          // ]\n          // ```\n          // And we have a new set of comma separated selectors: `:host-context(m,n)` then the new\n          // groups are:\n          // ```\n          // [\n          //   ['a', 'b', 'c', 'm'],\n          //   ['x', 'y', 'z', 'm'],\n          //   ['a', 'b', 'c', 'n'],\n          //   ['x', 'y', 'z', 'n'],\n          // ]\n          // ```\n\n          var contextSelectorGroupsLength = contextSelectorGroups.length;\n          repeatGroups(contextSelectorGroups, newContextSelectors.length);\n\n          for (var i = 0; i < newContextSelectors.length; i++) {\n            for (var j = 0; j < contextSelectorGroupsLength; j++) {\n              contextSelectorGroups[j + i * contextSelectorGroupsLength].push(newContextSelectors[i]);\n            }\n          } // Update the `selectorText` and see repeat to see if there are more `:host-context`s.\n\n\n          selectorText = match[2];\n        } // The context selectors now must be combined with each other to capture all the possible\n        // selectors that `:host-context` can match. See `combineHostContextSelectors()` for more\n        // info about how this is done.\n\n\n        return contextSelectorGroups.map(function (contextSelectors) {\n          return combineHostContextSelectors(contextSelectors, selectorText);\n        }).join(', ');\n      });\n    };\n    /*\n     * Convert combinators like ::shadow and pseudo-elements like ::content\n     * by replacing with space.\n     */\n\n\n    ShadowCss.prototype._convertShadowDOMSelectors = function (cssText) {\n      return _shadowDOMSelectorsRe.reduce(function (result, pattern) {\n        return result.replace(pattern, ' ');\n      }, cssText);\n    }; // change a selector like 'div' to 'name div'\n\n\n    ShadowCss.prototype._scopeSelectors = function (cssText, scopeSelector, hostSelector) {\n      var _this = this;\n\n      return processRules(cssText, function (rule) {\n        var selector = rule.selector;\n        var content = rule.content;\n\n        if (rule.selector[0] != '@') {\n          selector = _this._scopeSelector(rule.selector, scopeSelector, hostSelector, _this.strictStyling);\n        } else if (rule.selector.startsWith('@media') || rule.selector.startsWith('@supports') || rule.selector.startsWith('@page') || rule.selector.startsWith('@document')) {\n          content = _this._scopeSelectors(rule.content, scopeSelector, hostSelector);\n        } else if (rule.selector.startsWith('@font-face')) {\n          content = _this._stripScopingSelectors(rule.content, scopeSelector, hostSelector);\n        }\n\n        return new CssRule(selector, content);\n      });\n    };\n    /**\n     * Handle a css text that is within a rule that should not contain scope selectors by simply\n     * removing them! An example of such a rule is `@font-face`.\n     *\n     * `@font-face` rules cannot contain nested selectors. Nor can they be nested under a selector.\n     * Normally this would be a syntax error by the author of the styles. But in some rare cases, such\n     * as importing styles from a library, and applying `:host ::ng-deep` to the imported styles, we\n     * can end up with broken css if the imported styles happen to contain @font-face rules.\n     *\n     * For example:\n     *\n     * ```\n     * :host ::ng-deep {\n     *   import 'some/lib/containing/font-face';\n     * }\n     * ```\n     */\n\n\n    ShadowCss.prototype._stripScopingSelectors = function (cssText, scopeSelector, hostSelector) {\n      var _this = this;\n\n      return processRules(cssText, function (rule) {\n        var selector = rule.selector.replace(_shadowDeepSelectors, ' ').replace(_polyfillHostNoCombinatorRe, ' ');\n\n        var content = _this._scopeSelectors(rule.content, scopeSelector, hostSelector);\n\n        return new CssRule(selector, content);\n      });\n    };\n\n    ShadowCss.prototype._scopeSelector = function (selector, scopeSelector, hostSelector, strict) {\n      var _this = this;\n\n      return selector.split(',').map(function (part) {\n        return part.trim().split(_shadowDeepSelectors);\n      }).map(function (deepParts) {\n        var _a = tslib_1.__read(deepParts),\n            shallowPart = _a[0],\n            otherParts = _a.slice(1);\n\n        var applyScope = function applyScope(shallowPart) {\n          if (_this._selectorNeedsScoping(shallowPart, scopeSelector)) {\n            return strict ? _this._applyStrictSelectorScope(shallowPart, scopeSelector, hostSelector) : _this._applySelectorScope(shallowPart, scopeSelector, hostSelector);\n          } else {\n            return shallowPart;\n          }\n        };\n\n        return tslib_1.__spread([applyScope(shallowPart)], otherParts).join(' ');\n      }).join(', ');\n    };\n\n    ShadowCss.prototype._selectorNeedsScoping = function (selector, scopeSelector) {\n      var re = this._makeScopeMatcher(scopeSelector);\n\n      return !re.test(selector);\n    };\n\n    ShadowCss.prototype._makeScopeMatcher = function (scopeSelector) {\n      var lre = /\\[/g;\n      var rre = /\\]/g;\n      scopeSelector = scopeSelector.replace(lre, '\\\\[').replace(rre, '\\\\]');\n      return new RegExp('^(' + scopeSelector + ')' + _selectorReSuffix, 'm');\n    };\n\n    ShadowCss.prototype._applySelectorScope = function (selector, scopeSelector, hostSelector) {\n      // Difference from webcomponents.js: scopeSelector could not be an array\n      return this._applySimpleSelectorScope(selector, scopeSelector, hostSelector);\n    }; // scope via name and [is=name]\n\n\n    ShadowCss.prototype._applySimpleSelectorScope = function (selector, scopeSelector, hostSelector) {\n      // In Android browser, the lastIndex is not reset when the regex is used in String.replace()\n      _polyfillHostRe.lastIndex = 0;\n\n      if (_polyfillHostRe.test(selector)) {\n        var replaceBy_1 = this.strictStyling ? \"[\" + hostSelector + \"]\" : scopeSelector;\n        return selector.replace(_polyfillHostNoCombinatorRe, function (hnc, selector) {\n          return selector.replace(/([^:]*)(:*)(.*)/, function (_, before, colon, after) {\n            return before + replaceBy_1 + colon + after;\n          });\n        }).replace(_polyfillHostRe, replaceBy_1 + ' ');\n      }\n\n      return scopeSelector + ' ' + selector;\n    }; // return a selector with [name] suffix on each simple selector\n    // e.g. .foo.bar > .zot becomes .foo[name].bar[name] > .zot[name]  /** @internal */\n\n\n    ShadowCss.prototype._applyStrictSelectorScope = function (selector, scopeSelector, hostSelector) {\n      var _this = this;\n\n      var isRe = /\\[is=([^\\]]*)\\]/g;\n      scopeSelector = scopeSelector.replace(isRe, function (_) {\n        var parts = [];\n\n        for (var _i = 1; _i < arguments.length; _i++) {\n          parts[_i - 1] = arguments[_i];\n        }\n\n        return parts[0];\n      });\n      var attrName = '[' + scopeSelector + ']';\n\n      var _scopeSelectorPart = function _scopeSelectorPart(p) {\n        var scopedP = p.trim();\n\n        if (!scopedP) {\n          return '';\n        }\n\n        if (p.indexOf(_polyfillHostNoCombinator) > -1) {\n          scopedP = _this._applySimpleSelectorScope(p, scopeSelector, hostSelector);\n        } else {\n          // remove :host since it should be unnecessary\n          var t = p.replace(_polyfillHostRe, '');\n\n          if (t.length > 0) {\n            var matches = t.match(/([^:]*)(:*)(.*)/);\n\n            if (matches) {\n              scopedP = matches[1] + attrName + matches[2] + matches[3];\n            }\n          }\n        }\n\n        return scopedP;\n      };\n\n      var safeContent = new SafeSelector(selector);\n      selector = safeContent.content();\n      var scopedSelector = '';\n      var startIndex = 0;\n      var res;\n      var sep = /( |>|\\+|~(?!=))\\s*/g; // If a selector appears before :host it should not be shimmed as it\n      // matches on ancestor elements and not on elements in the host's shadow\n      // `:host-context(div)` is transformed to\n      // `-shadowcsshost-no-combinatordiv, div -shadowcsshost-no-combinator`\n      // the `div` is not part of the component in the 2nd selectors and should not be scoped.\n      // Historically `component-tag:host` was matching the component so we also want to preserve\n      // this behavior to avoid breaking legacy apps (it should not match).\n      // The behavior should be:\n      // - `tag:host` -> `tag[h]` (this is to avoid breaking legacy apps, should not match anything)\n      // - `tag :host` -> `tag [h]` (`tag` is not scoped because it's considered part of a\n      //   `:host-context(tag)`)\n\n      var hasHost = selector.indexOf(_polyfillHostNoCombinator) > -1; // Only scope parts after the first `-shadowcsshost-no-combinator` when it is present\n\n      var shouldScope = !hasHost;\n\n      while ((res = sep.exec(selector)) !== null) {\n        var separator = res[1];\n        var part_1 = selector.slice(startIndex, res.index).trim();\n        shouldScope = shouldScope || part_1.indexOf(_polyfillHostNoCombinator) > -1;\n        var scopedPart = shouldScope ? _scopeSelectorPart(part_1) : part_1;\n        scopedSelector += scopedPart + \" \" + separator + \" \";\n        startIndex = sep.lastIndex;\n      }\n\n      var part = selector.substring(startIndex);\n      shouldScope = shouldScope || part.indexOf(_polyfillHostNoCombinator) > -1;\n      scopedSelector += shouldScope ? _scopeSelectorPart(part) : part; // replace the placeholders with their original values\n\n      return safeContent.restore(scopedSelector);\n    };\n\n    ShadowCss.prototype._insertPolyfillHostInCssText = function (selector) {\n      return selector.replace(_colonHostContextRe, _polyfillHostContext).replace(_colonHostRe, _polyfillHost);\n    };\n\n    return ShadowCss;\n  }();\n\n  exports.ShadowCss = ShadowCss;\n\n  var SafeSelector =\n  /** @class */\n  function () {\n    function SafeSelector(selector) {\n      var _this = this;\n\n      this.placeholders = [];\n      this.index = 0; // Replaces attribute selectors with placeholders.\n      // The WS in [attr=\"va lue\"] would otherwise be interpreted as a selector separator.\n\n      selector = this._escapeRegexMatches(selector, /(\\[[^\\]]*\\])/g); // CSS allows for certain special characters to be used in selectors if they're escaped.\n      // E.g. `.foo:blue` won't match a class called `foo:blue`, because the colon denotes a\n      // pseudo-class, but writing `.foo\\:blue` will match, because the colon was escaped.\n      // Replace all escape sequences (`\\` followed by a character) with a placeholder so\n      // that our handling of pseudo-selectors doesn't mess with them.\n\n      selector = this._escapeRegexMatches(selector, /(\\\\.)/g); // Replaces the expression in `:nth-child(2n + 1)` with a placeholder.\n      // WS and \"+\" would otherwise be interpreted as selector separators.\n\n      this._content = selector.replace(/(:nth-[-\\w]+)(\\([^)]+\\))/g, function (_, pseudo, exp) {\n        var replaceBy = \"__ph-\" + _this.index + \"__\";\n\n        _this.placeholders.push(exp);\n\n        _this.index++;\n        return pseudo + replaceBy;\n      });\n    }\n\n    SafeSelector.prototype.restore = function (content) {\n      var _this = this;\n\n      return content.replace(/__ph-(\\d+)__/g, function (_ph, index) {\n        return _this.placeholders[+index];\n      });\n    };\n\n    SafeSelector.prototype.content = function () {\n      return this._content;\n    };\n    /**\n     * Replaces all of the substrings that match a regex within a\n     * special string (e.g. `__ph-0__`, `__ph-1__`, etc).\n     */\n\n\n    SafeSelector.prototype._escapeRegexMatches = function (content, pattern) {\n      var _this = this;\n\n      return content.replace(pattern, function (_, keep) {\n        var replaceBy = \"__ph-\" + _this.index + \"__\";\n\n        _this.placeholders.push(keep);\n\n        _this.index++;\n        return replaceBy;\n      });\n    };\n\n    return SafeSelector;\n  }();\n\n  var _cssContentNextSelectorRe = /polyfill-next-selector[^}]*content:[\\s]*?(['\"])(.*?)\\1[;\\s]*}([^{]*?){/gim;\n  var _cssContentRuleRe = /(polyfill-rule)[^}]*(content:[\\s]*(['\"])(.*?)\\3)[;\\s]*[^}]*}/gim;\n  var _cssContentUnscopedRuleRe = /(polyfill-unscoped-rule)[^}]*(content:[\\s]*(['\"])(.*?)\\3)[;\\s]*[^}]*}/gim;\n  var _polyfillHost = '-shadowcsshost'; // note: :host-context pre-processed to -shadowcsshostcontext.\n\n  var _polyfillHostContext = '-shadowcsscontext';\n\n  var _parenSuffix = '(?:\\\\((' + '(?:\\\\([^)(]*\\\\)|[^)(]*)+?' + ')\\\\))?([^,{]*)';\n\n  var _cssColonHostRe = new RegExp(_polyfillHost + _parenSuffix, 'gim');\n\n  var _cssColonHostContextReGlobal = new RegExp(_polyfillHostContext + _parenSuffix, 'gim');\n\n  var _cssColonHostContextRe = new RegExp(_polyfillHostContext + _parenSuffix, 'im');\n\n  var _polyfillHostNoCombinator = _polyfillHost + '-no-combinator';\n\n  var _polyfillHostNoCombinatorRe = /-shadowcsshost-no-combinator([^\\s]*)/;\n  var _shadowDOMSelectorsRe = [/::shadow/g, /::content/g, // Deprecated selectors\n  /\\/shadow-deep\\//g, /\\/shadow\\//g]; // The deep combinator is deprecated in the CSS spec\n  // Support for `>>>`, `deep`, `::ng-deep` is then also deprecated and will be removed in the future.\n  // see https://github.com/angular/angular/pull/17677\n\n  var _shadowDeepSelectors = /(?:>>>)|(?:\\/deep\\/)|(?:::ng-deep)/g;\n  var _selectorReSuffix = '([>\\\\s~+\\[.,{:][\\\\s\\\\S]*)?$';\n  var _polyfillHostRe = /-shadowcsshost/gim;\n  var _colonHostRe = /:host/gim;\n  var _colonHostContextRe = /:host-context/gim;\n  var _commentRe = /\\/\\*\\s*[\\s\\S]*?\\*\\//g;\n\n  function stripComments(input) {\n    return input.replace(_commentRe, '');\n  }\n\n  var _commentWithHashRe = /\\/\\*\\s*#\\s*source(Mapping)?URL=[\\s\\S]+?\\*\\//g;\n\n  function extractCommentsWithHash(input) {\n    return input.match(_commentWithHashRe) || [];\n  }\n\n  var BLOCK_PLACEHOLDER = '%BLOCK%';\n  var QUOTE_PLACEHOLDER = '%QUOTED%';\n  var _ruleRe = /(\\s*)([^;\\{\\}]+?)(\\s*)((?:{%BLOCK%}?\\s*;?)|(?:\\s*;))/g;\n  var _quotedRe = /%QUOTED%/g;\n  var CONTENT_PAIRS = new Map([['{', '}']]);\n  var QUOTE_PAIRS = new Map([[\"\\\"\", \"\\\"\"], [\"'\", \"'\"]]);\n\n  var CssRule =\n  /** @class */\n  function () {\n    function CssRule(selector, content) {\n      this.selector = selector;\n      this.content = content;\n    }\n\n    return CssRule;\n  }();\n\n  exports.CssRule = CssRule;\n\n  function processRules(input, ruleCallback) {\n    var inputWithEscapedQuotes = escapeBlocks(input, QUOTE_PAIRS, QUOTE_PLACEHOLDER);\n    var inputWithEscapedBlocks = escapeBlocks(inputWithEscapedQuotes.escapedString, CONTENT_PAIRS, BLOCK_PLACEHOLDER);\n    var nextBlockIndex = 0;\n    var nextQuoteIndex = 0;\n    return inputWithEscapedBlocks.escapedString.replace(_ruleRe, function () {\n      var m = [];\n\n      for (var _i = 0; _i < arguments.length; _i++) {\n        m[_i] = arguments[_i];\n      }\n\n      var selector = m[2];\n      var content = '';\n      var suffix = m[4];\n      var contentPrefix = '';\n\n      if (suffix && suffix.startsWith('{' + BLOCK_PLACEHOLDER)) {\n        content = inputWithEscapedBlocks.blocks[nextBlockIndex++];\n        suffix = suffix.substring(BLOCK_PLACEHOLDER.length + 1);\n        contentPrefix = '{';\n      }\n\n      var rule = ruleCallback(new CssRule(selector, content));\n      return \"\" + m[1] + rule.selector + m[3] + contentPrefix + rule.content + suffix;\n    }).replace(_quotedRe, function () {\n      return inputWithEscapedQuotes.blocks[nextQuoteIndex++];\n    });\n  }\n\n  exports.processRules = processRules;\n\n  var StringWithEscapedBlocks =\n  /** @class */\n  function () {\n    function StringWithEscapedBlocks(escapedString, blocks) {\n      this.escapedString = escapedString;\n      this.blocks = blocks;\n    }\n\n    return StringWithEscapedBlocks;\n  }();\n\n  function escapeBlocks(input, charPairs, placeholder) {\n    var resultParts = [];\n    var escapedBlocks = [];\n    var openCharCount = 0;\n    var nonBlockStartIndex = 0;\n    var blockStartIndex = -1;\n    var openChar;\n    var closeChar;\n\n    for (var i = 0; i < input.length; i++) {\n      var char = input[i];\n\n      if (char === '\\\\') {\n        i++;\n      } else if (char === closeChar) {\n        openCharCount--;\n\n        if (openCharCount === 0) {\n          escapedBlocks.push(input.substring(blockStartIndex, i));\n          resultParts.push(placeholder);\n          nonBlockStartIndex = i;\n          blockStartIndex = -1;\n          openChar = closeChar = undefined;\n        }\n      } else if (char === openChar) {\n        openCharCount++;\n      } else if (openCharCount === 0 && charPairs.has(char)) {\n        openChar = char;\n        closeChar = charPairs.get(char);\n        openCharCount = 1;\n        blockStartIndex = i + 1;\n        resultParts.push(input.substring(nonBlockStartIndex, blockStartIndex));\n      }\n    }\n\n    if (blockStartIndex !== -1) {\n      escapedBlocks.push(input.substring(blockStartIndex));\n      resultParts.push(placeholder);\n    } else {\n      resultParts.push(input.substring(nonBlockStartIndex));\n    }\n\n    return new StringWithEscapedBlocks(resultParts.join(''), escapedBlocks);\n  }\n  /**\n   * Combine the `contextSelectors` with the `hostMarker` and the `otherSelectors`\n   * to create a selector that matches the same as `:host-context()`.\n   *\n   * Given a single context selector `A` we need to output selectors that match on the host and as an\n   * ancestor of the host:\n   *\n   * ```\n   * A <hostMarker>, A<hostMarker> {}\n   * ```\n   *\n   * When there is more than one context selector we also have to create combinations of those\n   * selectors with each other. For example if there are `A` and `B` selectors the output is:\n   *\n   * ```\n   * AB<hostMarker>, AB <hostMarker>, A B<hostMarker>,\n   * B A<hostMarker>, A B <hostMarker>, B A <hostMarker> {}\n   * ```\n   *\n   * And so on...\n   *\n   * @param hostMarker the string that selects the host element.\n   * @param contextSelectors an array of context selectors that will be combined.\n   * @param otherSelectors the rest of the selectors that are not context selectors.\n   */\n\n\n  function combineHostContextSelectors(contextSelectors, otherSelectors) {\n    var hostMarker = _polyfillHostNoCombinator;\n    _polyfillHostRe.lastIndex = 0; // reset the regex to ensure we get an accurate test\n\n    var otherSelectorsHasHost = _polyfillHostRe.test(otherSelectors); // If there are no context selectors then just output a host marker\n\n\n    if (contextSelectors.length === 0) {\n      return hostMarker + otherSelectors;\n    }\n\n    var combined = [contextSelectors.pop() || ''];\n\n    while (contextSelectors.length > 0) {\n      var length_1 = combined.length;\n      var contextSelector = contextSelectors.pop();\n\n      for (var i = 0; i < length_1; i++) {\n        var previousSelectors = combined[i]; // Add the new selector as a descendant of the previous selectors\n\n        combined[length_1 * 2 + i] = previousSelectors + ' ' + contextSelector; // Add the new selector as an ancestor of the previous selectors\n\n        combined[length_1 + i] = contextSelector + ' ' + previousSelectors; // Add the new selector to act on the same element as the previous selectors\n\n        combined[i] = contextSelector + previousSelectors;\n      }\n    } // Finally connect the selector to the `hostMarker`s: either acting directly on the host\n    // (A<hostMarker>) or as an ancestor (A <hostMarker>).\n\n\n    return combined.map(function (s) {\n      return otherSelectorsHasHost ? \"\" + s + otherSelectors : \"\" + s + hostMarker + otherSelectors + \", \" + s + \" \" + hostMarker + otherSelectors;\n    }).join(',');\n  }\n  /**\n   * Mutate the given `groups` array so that there are `multiples` clones of the original array\n   * stored.\n   *\n   * For example `repeatGroups([a, b], 3)` will result in `[a, b, a, b, a, b]` - but importantly the\n   * newly added groups will be clones of the original.\n   *\n   * @param groups An array of groups of strings that will be repeated. This array is mutated\n   *     in-place.\n   * @param multiples The number of times the current groups should appear.\n   */\n\n\n  function repeatGroups(groups, multiples) {\n    var length = groups.length;\n\n    for (var i = 1; i < multiples; i++) {\n      for (var j = 0; j < length; j++) {\n        groups[j + i * length] = groups[j].slice(0);\n      }\n    }\n  }\n\n  exports.repeatGroups = repeatGroups;\n});","map":{"version":3,"sources":["../../../../../../packages/compiler/src/shadow_css.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * This file is a port of shadowCSS from webcomponents.js to TypeScript.\n *\n * Please make sure to keep to edits in sync with the source file.\n *\n * Source:\n * https://github.com/webcomponents/webcomponentsjs/blob/4efecd7e0e/src/ShadowCSS/ShadowCSS.js\n *\n * The original file level comment is reproduced below\n */\n\n/*\n  This is a limited shim for ShadowDOM css styling.\n  https://dvcs.w3.org/hg/webcomponents/raw-file/tip/spec/shadow/index.html#styles\n\n  The intention here is to support only the styling features which can be\n  relatively simply implemented. The goal is to allow users to avoid the\n  most obvious pitfalls and do so without compromising performance significantly.\n  For ShadowDOM styling that's not covered here, a set of best practices\n  can be provided that should allow users to accomplish more complex styling.\n\n  The following is a list of specific ShadowDOM styling features and a brief\n  discussion of the approach used to shim.\n\n  Shimmed features:\n\n  * :host, :host-context: ShadowDOM allows styling of the shadowRoot's host\n  element using the :host rule. To shim this feature, the :host styles are\n  reformatted and prefixed with a given scope name and promoted to a\n  document level stylesheet.\n  For example, given a scope name of .foo, a rule like this:\n\n    :host {\n        background: red;\n      }\n    }\n\n  becomes:\n\n    .foo {\n      background: red;\n    }\n\n  * encapsulation: Styles defined within ShadowDOM, apply only to\n  dom inside the ShadowDOM. Polymer uses one of two techniques to implement\n  this feature.\n\n  By default, rules are prefixed with the host element tag name\n  as a descendant selector. This ensures styling does not leak out of the 'top'\n  of the element's ShadowDOM. For example,\n\n  div {\n      font-weight: bold;\n    }\n\n  becomes:\n\n  x-foo div {\n      font-weight: bold;\n    }\n\n  becomes:\n\n\n  Alternatively, if WebComponents.ShadowCSS.strictStyling is set to true then\n  selectors are scoped by adding an attribute selector suffix to each\n  simple selector that contains the host element tag name. Each element\n  in the element's ShadowDOM template is also given the scope attribute.\n  Thus, these rules match only elements that have the scope attribute.\n  For example, given a scope name of x-foo, a rule like this:\n\n    div {\n      font-weight: bold;\n    }\n\n  becomes:\n\n    div[x-foo] {\n      font-weight: bold;\n    }\n\n  Note that elements that are dynamically added to a scope must have the scope\n  selector added to them manually.\n\n  * upper/lower bound encapsulation: Styles which are defined outside a\n  shadowRoot should not cross the ShadowDOM boundary and should not apply\n  inside a shadowRoot.\n\n  This styling behavior is not emulated. Some possible ways to do this that\n  were rejected due to complexity and/or performance concerns include: (1) reset\n  every possible property for every possible selector for a given scope name;\n  (2) re-implement css in javascript.\n\n  As an alternative, users should make sure to use selectors\n  specific to the scope in which they are working.\n\n  * ::distributed: This behavior is not emulated. It's often not necessary\n  to style the contents of a specific insertion point and instead, descendants\n  of the host element can be styled selectively. Users can also create an\n  extra node around an insertion point and style that node's contents\n  via descendent selectors. For example, with a shadowRoot like this:\n\n    <style>\n      ::content(div) {\n        background: red;\n      }\n    </style>\n    <content></content>\n\n  could become:\n\n    <style>\n      / *@polyfill .content-container div * /\n      ::content(div) {\n        background: red;\n      }\n    </style>\n    <div class=\"content-container\">\n      <content></content>\n    </div>\n\n  Note the use of @polyfill in the comment above a ShadowDOM specific style\n  declaration. This is a directive to the styling shim to use the selector\n  in comments in lieu of the next selector when running under polyfill.\n*/\n\nexport class ShadowCss {\n  strictStyling: boolean = true;\n\n  constructor() {}\n\n  /*\n   * Shim some cssText with the given selector. Returns cssText that can\n   * be included in the document via WebComponents.ShadowCSS.addCssToDocument(css).\n   *\n   * When strictStyling is true:\n   * - selector is the attribute added to all elements inside the host,\n   * - hostSelector is the attribute added to the host itself.\n   */\n  shimCssText(cssText: string, selector: string, hostSelector: string = ''): string {\n    const commentsWithHash = extractCommentsWithHash(cssText);\n    cssText = stripComments(cssText);\n    cssText = this._insertDirectives(cssText);\n\n    const scopedCssText = this._scopeCssText(cssText, selector, hostSelector);\n    return [scopedCssText, ...commentsWithHash].join('\\n');\n  }\n\n  private _insertDirectives(cssText: string): string {\n    cssText = this._insertPolyfillDirectivesInCssText(cssText);\n    return this._insertPolyfillRulesInCssText(cssText);\n  }\n\n  /*\n   * Process styles to convert native ShadowDOM rules that will trip\n   * up the css parser; we rely on decorating the stylesheet with inert rules.\n   *\n   * For example, we convert this rule:\n   *\n   * polyfill-next-selector { content: ':host menu-item'; }\n   * ::content menu-item {\n   *\n   * to this:\n   *\n   * scopeName menu-item {\n   *\n   **/\n  private _insertPolyfillDirectivesInCssText(cssText: string): string {\n    // Difference with webcomponents.js: does not handle comments\n    return cssText.replace(_cssContentNextSelectorRe, function(...m: string[]) {\n      return m[2] + '{';\n    });\n  }\n\n  /*\n   * Process styles to add rules which will only apply under the polyfill\n   *\n   * For example, we convert this rule:\n   *\n   * polyfill-rule {\n   *   content: ':host menu-item';\n   * ...\n   * }\n   *\n   * to this:\n   *\n   * scopeName menu-item {...}\n   *\n   **/\n  private _insertPolyfillRulesInCssText(cssText: string): string {\n    // Difference with webcomponents.js: does not handle comments\n    return cssText.replace(_cssContentRuleRe, (...m: string[]) => {\n      const rule = m[0].replace(m[1], '').replace(m[2], '');\n      return m[4] + rule;\n    });\n  }\n\n  /* Ensure styles are scoped. Pseudo-scoping takes a rule like:\n   *\n   *  .foo {... }\n   *\n   *  and converts this to\n   *\n   *  scopeName .foo { ... }\n   */\n  private _scopeCssText(cssText: string, scopeSelector: string, hostSelector: string): string {\n    const unscopedRules = this._extractUnscopedRulesFromCssText(cssText);\n    // replace :host and :host-context -shadowcsshost and -shadowcsshost respectively\n    cssText = this._insertPolyfillHostInCssText(cssText);\n    cssText = this._convertColonHost(cssText);\n    cssText = this._convertColonHostContext(cssText);\n    cssText = this._convertShadowDOMSelectors(cssText);\n    if (scopeSelector) {\n      cssText = this._scopeSelectors(cssText, scopeSelector, hostSelector);\n    }\n    cssText = cssText + '\\n' + unscopedRules;\n    return cssText.trim();\n  }\n\n  /*\n   * Process styles to add rules which will only apply under the polyfill\n   * and do not process via CSSOM. (CSSOM is destructive to rules on rare\n   * occasions, e.g. -webkit-calc on Safari.)\n   * For example, we convert this rule:\n   *\n   * @polyfill-unscoped-rule {\n   *   content: 'menu-item';\n   * ... }\n   *\n   * to this:\n   *\n   * menu-item {...}\n   *\n   **/\n  private _extractUnscopedRulesFromCssText(cssText: string): string {\n    // Difference with webcomponents.js: does not handle comments\n    let r = '';\n    let m: RegExpExecArray|null;\n    _cssContentUnscopedRuleRe.lastIndex = 0;\n    while ((m = _cssContentUnscopedRuleRe.exec(cssText)) !== null) {\n      const rule = m[0].replace(m[2], '').replace(m[1], m[4]);\n      r += rule + '\\n\\n';\n    }\n    return r;\n  }\n\n  /*\n   * convert a rule like :host(.foo) > .bar { }\n   *\n   * to\n   *\n   * .foo<scopeName> > .bar\n   */\n  private _convertColonHost(cssText: string): string {\n    return cssText.replace(_cssColonHostRe, (_, hostSelectors: string, otherSelectors: string) => {\n      if (hostSelectors) {\n        const convertedSelectors: string[] = [];\n        const hostSelectorArray = hostSelectors.split(',').map(p => p.trim());\n        for (const hostSelector of hostSelectorArray) {\n          if (!hostSelector) break;\n          const convertedSelector =\n              _polyfillHostNoCombinator + hostSelector.replace(_polyfillHost, '') + otherSelectors;\n          convertedSelectors.push(convertedSelector);\n        }\n        return convertedSelectors.join(',');\n      } else {\n        return _polyfillHostNoCombinator + otherSelectors;\n      }\n    });\n  }\n\n  /*\n   * convert a rule like :host-context(.foo) > .bar { }\n   *\n   * to\n   *\n   * .foo<scopeName> > .bar, .foo <scopeName> > .bar { }\n   *\n   * and\n   *\n   * :host-context(.foo:host) .bar { ... }\n   *\n   * to\n   *\n   * .foo<scopeName> .bar { ... }\n   */\n  private _convertColonHostContext(cssText: string): string {\n    return cssText.replace(_cssColonHostContextReGlobal, selectorText => {\n      // We have captured a selector that contains a `:host-context` rule.\n\n      // For backward compatibility `:host-context` may contain a comma separated list of selectors.\n      // Each context selector group will contain a list of host-context selectors that must match\n      // an ancestor of the host.\n      // (Normally `contextSelectorGroups` will only contain a single array of context selectors.)\n      const contextSelectorGroups: string[][] = [[]];\n\n      // There may be more than `:host-context` in this selector so `selectorText` could look like:\n      // `:host-context(.one):host-context(.two)`.\n      // Execute `_cssColonHostContextRe` over and over until we have extracted all the\n      // `:host-context` selectors from this selector.\n      let match: RegExpMatchArray|null;\n      while (match = _cssColonHostContextRe.exec(selectorText)) {\n        // `match` = [':host-context(<selectors>)<rest>', <selectors>, <rest>]\n\n        // The `<selectors>` could actually be a comma separated list: `:host-context(.one, .two)`.\n        const newContextSelectors =\n            (match[1] ?? '').trim().split(',').map(m => m.trim()).filter(m => m !== '');\n\n        // We must duplicate the current selector group for each of these new selectors.\n        // For example if the current groups are:\n        // ```\n        // [\n        //   ['a', 'b', 'c'],\n        //   ['x', 'y', 'z'],\n        // ]\n        // ```\n        // And we have a new set of comma separated selectors: `:host-context(m,n)` then the new\n        // groups are:\n        // ```\n        // [\n        //   ['a', 'b', 'c', 'm'],\n        //   ['x', 'y', 'z', 'm'],\n        //   ['a', 'b', 'c', 'n'],\n        //   ['x', 'y', 'z', 'n'],\n        // ]\n        // ```\n        const contextSelectorGroupsLength = contextSelectorGroups.length;\n        repeatGroups(contextSelectorGroups, newContextSelectors.length);\n        for (let i = 0; i < newContextSelectors.length; i++) {\n          for (let j = 0; j < contextSelectorGroupsLength; j++) {\n            contextSelectorGroups[j + (i * contextSelectorGroupsLength)].push(\n                newContextSelectors[i]);\n          }\n        }\n\n        // Update the `selectorText` and see repeat to see if there are more `:host-context`s.\n        selectorText = match[2];\n      }\n\n      // The context selectors now must be combined with each other to capture all the possible\n      // selectors that `:host-context` can match. See `combineHostContextSelectors()` for more\n      // info about how this is done.\n      return contextSelectorGroups\n          .map(contextSelectors => combineHostContextSelectors(contextSelectors, selectorText))\n          .join(', ');\n    });\n  }\n\n  /*\n   * Convert combinators like ::shadow and pseudo-elements like ::content\n   * by replacing with space.\n   */\n  private _convertShadowDOMSelectors(cssText: string): string {\n    return _shadowDOMSelectorsRe.reduce((result, pattern) => result.replace(pattern, ' '), cssText);\n  }\n\n  // change a selector like 'div' to 'name div'\n  private _scopeSelectors(cssText: string, scopeSelector: string, hostSelector: string): string {\n    return processRules(cssText, (rule: CssRule) => {\n      let selector = rule.selector;\n      let content = rule.content;\n      if (rule.selector[0] != '@') {\n        selector =\n            this._scopeSelector(rule.selector, scopeSelector, hostSelector, this.strictStyling);\n      } else if (\n          rule.selector.startsWith('@media') || rule.selector.startsWith('@supports') ||\n          rule.selector.startsWith('@page') || rule.selector.startsWith('@document')) {\n        content = this._scopeSelectors(rule.content, scopeSelector, hostSelector);\n      } else if (rule.selector.startsWith('@font-face')) {\n        content = this._stripScopingSelectors(rule.content, scopeSelector, hostSelector);\n      }\n      return new CssRule(selector, content);\n    });\n  }\n\n  /**\n   * Handle a css text that is within a rule that should not contain scope selectors by simply\n   * removing them! An example of such a rule is `@font-face`.\n   *\n   * `@font-face` rules cannot contain nested selectors. Nor can they be nested under a selector.\n   * Normally this would be a syntax error by the author of the styles. But in some rare cases, such\n   * as importing styles from a library, and applying `:host ::ng-deep` to the imported styles, we\n   * can end up with broken css if the imported styles happen to contain @font-face rules.\n   *\n   * For example:\n   *\n   * ```\n   * :host ::ng-deep {\n   *   import 'some/lib/containing/font-face';\n   * }\n   * ```\n   */\n  private _stripScopingSelectors(cssText: string, scopeSelector: string, hostSelector: string):\n      string {\n    return processRules(cssText, rule => {\n      const selector = rule.selector.replace(_shadowDeepSelectors, ' ')\n                           .replace(_polyfillHostNoCombinatorRe, ' ');\n      const content = this._scopeSelectors(rule.content, scopeSelector, hostSelector);\n      return new CssRule(selector, content);\n    });\n  }\n\n  private _scopeSelector(\n      selector: string, scopeSelector: string, hostSelector: string, strict: boolean): string {\n    return selector.split(',')\n        .map(part => part.trim().split(_shadowDeepSelectors))\n        .map((deepParts) => {\n          const [shallowPart, ...otherParts] = deepParts;\n          const applyScope = (shallowPart: string) => {\n            if (this._selectorNeedsScoping(shallowPart, scopeSelector)) {\n              return strict ?\n                  this._applyStrictSelectorScope(shallowPart, scopeSelector, hostSelector) :\n                  this._applySelectorScope(shallowPart, scopeSelector, hostSelector);\n            } else {\n              return shallowPart;\n            }\n          };\n          return [applyScope(shallowPart), ...otherParts].join(' ');\n        })\n        .join(', ');\n  }\n\n  private _selectorNeedsScoping(selector: string, scopeSelector: string): boolean {\n    const re = this._makeScopeMatcher(scopeSelector);\n    return !re.test(selector);\n  }\n\n  private _makeScopeMatcher(scopeSelector: string): RegExp {\n    const lre = /\\[/g;\n    const rre = /\\]/g;\n    scopeSelector = scopeSelector.replace(lre, '\\\\[').replace(rre, '\\\\]');\n    return new RegExp('^(' + scopeSelector + ')' + _selectorReSuffix, 'm');\n  }\n\n  private _applySelectorScope(selector: string, scopeSelector: string, hostSelector: string):\n      string {\n    // Difference from webcomponents.js: scopeSelector could not be an array\n    return this._applySimpleSelectorScope(selector, scopeSelector, hostSelector);\n  }\n\n  // scope via name and [is=name]\n  private _applySimpleSelectorScope(selector: string, scopeSelector: string, hostSelector: string):\n      string {\n    // In Android browser, the lastIndex is not reset when the regex is used in String.replace()\n    _polyfillHostRe.lastIndex = 0;\n    if (_polyfillHostRe.test(selector)) {\n      const replaceBy = this.strictStyling ? `[${hostSelector}]` : scopeSelector;\n      return selector\n          .replace(\n              _polyfillHostNoCombinatorRe,\n              (hnc, selector) => {\n                return selector.replace(\n                    /([^:]*)(:*)(.*)/,\n                    (_: string, before: string, colon: string, after: string) => {\n                      return before + replaceBy + colon + after;\n                    });\n              })\n          .replace(_polyfillHostRe, replaceBy + ' ');\n    }\n\n    return scopeSelector + ' ' + selector;\n  }\n\n  // return a selector with [name] suffix on each simple selector\n  // e.g. .foo.bar > .zot becomes .foo[name].bar[name] > .zot[name]  /** @internal */\n  private _applyStrictSelectorScope(selector: string, scopeSelector: string, hostSelector: string):\n      string {\n    const isRe = /\\[is=([^\\]]*)\\]/g;\n    scopeSelector = scopeSelector.replace(isRe, (_: string, ...parts: string[]) => parts[0]);\n\n    const attrName = '[' + scopeSelector + ']';\n\n    const _scopeSelectorPart = (p: string) => {\n      let scopedP = p.trim();\n\n      if (!scopedP) {\n        return '';\n      }\n\n      if (p.indexOf(_polyfillHostNoCombinator) > -1) {\n        scopedP = this._applySimpleSelectorScope(p, scopeSelector, hostSelector);\n      } else {\n        // remove :host since it should be unnecessary\n        const t = p.replace(_polyfillHostRe, '');\n        if (t.length > 0) {\n          const matches = t.match(/([^:]*)(:*)(.*)/);\n          if (matches) {\n            scopedP = matches[1] + attrName + matches[2] + matches[3];\n          }\n        }\n      }\n\n      return scopedP;\n    };\n\n    const safeContent = new SafeSelector(selector);\n    selector = safeContent.content();\n\n    let scopedSelector = '';\n    let startIndex = 0;\n    let res: RegExpExecArray|null;\n    const sep = /( |>|\\+|~(?!=))\\s*/g;\n\n    // If a selector appears before :host it should not be shimmed as it\n    // matches on ancestor elements and not on elements in the host's shadow\n    // `:host-context(div)` is transformed to\n    // `-shadowcsshost-no-combinatordiv, div -shadowcsshost-no-combinator`\n    // the `div` is not part of the component in the 2nd selectors and should not be scoped.\n    // Historically `component-tag:host` was matching the component so we also want to preserve\n    // this behavior to avoid breaking legacy apps (it should not match).\n    // The behavior should be:\n    // - `tag:host` -> `tag[h]` (this is to avoid breaking legacy apps, should not match anything)\n    // - `tag :host` -> `tag [h]` (`tag` is not scoped because it's considered part of a\n    //   `:host-context(tag)`)\n    const hasHost = selector.indexOf(_polyfillHostNoCombinator) > -1;\n    // Only scope parts after the first `-shadowcsshost-no-combinator` when it is present\n    let shouldScope = !hasHost;\n\n    while ((res = sep.exec(selector)) !== null) {\n      const separator = res[1];\n      const part = selector.slice(startIndex, res.index).trim();\n      shouldScope = shouldScope || part.indexOf(_polyfillHostNoCombinator) > -1;\n      const scopedPart = shouldScope ? _scopeSelectorPart(part) : part;\n      scopedSelector += `${scopedPart} ${separator} `;\n      startIndex = sep.lastIndex;\n    }\n\n    const part = selector.substring(startIndex);\n    shouldScope = shouldScope || part.indexOf(_polyfillHostNoCombinator) > -1;\n    scopedSelector += shouldScope ? _scopeSelectorPart(part) : part;\n\n    // replace the placeholders with their original values\n    return safeContent.restore(scopedSelector);\n  }\n\n  private _insertPolyfillHostInCssText(selector: string): string {\n    return selector.replace(_colonHostContextRe, _polyfillHostContext)\n        .replace(_colonHostRe, _polyfillHost);\n  }\n}\n\nclass SafeSelector {\n  private placeholders: string[] = [];\n  private index = 0;\n  private _content: string;\n\n  constructor(selector: string) {\n    // Replaces attribute selectors with placeholders.\n    // The WS in [attr=\"va lue\"] would otherwise be interpreted as a selector separator.\n    selector = this._escapeRegexMatches(selector, /(\\[[^\\]]*\\])/g);\n\n    // CSS allows for certain special characters to be used in selectors if they're escaped.\n    // E.g. `.foo:blue` won't match a class called `foo:blue`, because the colon denotes a\n    // pseudo-class, but writing `.foo\\:blue` will match, because the colon was escaped.\n    // Replace all escape sequences (`\\` followed by a character) with a placeholder so\n    // that our handling of pseudo-selectors doesn't mess with them.\n    selector = this._escapeRegexMatches(selector, /(\\\\.)/g);\n\n    // Replaces the expression in `:nth-child(2n + 1)` with a placeholder.\n    // WS and \"+\" would otherwise be interpreted as selector separators.\n    this._content = selector.replace(/(:nth-[-\\w]+)(\\([^)]+\\))/g, (_, pseudo, exp) => {\n      const replaceBy = `__ph-${this.index}__`;\n      this.placeholders.push(exp);\n      this.index++;\n      return pseudo + replaceBy;\n    });\n  }\n\n  restore(content: string): string {\n    return content.replace(/__ph-(\\d+)__/g, (_ph, index) => this.placeholders[+index]);\n  }\n\n  content(): string {\n    return this._content;\n  }\n\n  /**\n   * Replaces all of the substrings that match a regex within a\n   * special string (e.g. `__ph-0__`, `__ph-1__`, etc).\n   */\n  private _escapeRegexMatches(content: string, pattern: RegExp): string {\n    return content.replace(pattern, (_, keep) => {\n      const replaceBy = `__ph-${this.index}__`;\n      this.placeholders.push(keep);\n      this.index++;\n      return replaceBy;\n    });\n  }\n}\n\nconst _cssContentNextSelectorRe =\n    /polyfill-next-selector[^}]*content:[\\s]*?(['\"])(.*?)\\1[;\\s]*}([^{]*?){/gim;\nconst _cssContentRuleRe = /(polyfill-rule)[^}]*(content:[\\s]*(['\"])(.*?)\\3)[;\\s]*[^}]*}/gim;\nconst _cssContentUnscopedRuleRe =\n    /(polyfill-unscoped-rule)[^}]*(content:[\\s]*(['\"])(.*?)\\3)[;\\s]*[^}]*}/gim;\nconst _polyfillHost = '-shadowcsshost';\n// note: :host-context pre-processed to -shadowcsshostcontext.\nconst _polyfillHostContext = '-shadowcsscontext';\nconst _parenSuffix = '(?:\\\\((' +\n    '(?:\\\\([^)(]*\\\\)|[^)(]*)+?' +\n    ')\\\\))?([^,{]*)';\nconst _cssColonHostRe = new RegExp(_polyfillHost + _parenSuffix, 'gim');\nconst _cssColonHostContextReGlobal = new RegExp(_polyfillHostContext + _parenSuffix, 'gim');\nconst _cssColonHostContextRe = new RegExp(_polyfillHostContext + _parenSuffix, 'im');\nconst _polyfillHostNoCombinator = _polyfillHost + '-no-combinator';\nconst _polyfillHostNoCombinatorRe = /-shadowcsshost-no-combinator([^\\s]*)/;\nconst _shadowDOMSelectorsRe = [\n  /::shadow/g,\n  /::content/g,\n  // Deprecated selectors\n  /\\/shadow-deep\\//g,\n  /\\/shadow\\//g,\n];\n\n// The deep combinator is deprecated in the CSS spec\n// Support for `>>>`, `deep`, `::ng-deep` is then also deprecated and will be removed in the future.\n// see https://github.com/angular/angular/pull/17677\nconst _shadowDeepSelectors = /(?:>>>)|(?:\\/deep\\/)|(?:::ng-deep)/g;\nconst _selectorReSuffix = '([>\\\\s~+\\[.,{:][\\\\s\\\\S]*)?$';\nconst _polyfillHostRe = /-shadowcsshost/gim;\nconst _colonHostRe = /:host/gim;\nconst _colonHostContextRe = /:host-context/gim;\n\nconst _commentRe = /\\/\\*\\s*[\\s\\S]*?\\*\\//g;\n\nfunction stripComments(input: string): string {\n  return input.replace(_commentRe, '');\n}\n\nconst _commentWithHashRe = /\\/\\*\\s*#\\s*source(Mapping)?URL=[\\s\\S]+?\\*\\//g;\n\nfunction extractCommentsWithHash(input: string): string[] {\n  return input.match(_commentWithHashRe) || [];\n}\n\nconst BLOCK_PLACEHOLDER = '%BLOCK%';\nconst QUOTE_PLACEHOLDER = '%QUOTED%';\nconst _ruleRe = /(\\s*)([^;\\{\\}]+?)(\\s*)((?:{%BLOCK%}?\\s*;?)|(?:\\s*;))/g;\nconst _quotedRe = /%QUOTED%/g;\nconst CONTENT_PAIRS = new Map([['{', '}']]);\nconst QUOTE_PAIRS = new Map([[`\"`, `\"`], [`'`, `'`]]);\n\nexport class CssRule {\n  constructor(public selector: string, public content: string) {}\n}\n\nexport function processRules(input: string, ruleCallback: (rule: CssRule) => CssRule): string {\n  const inputWithEscapedQuotes = escapeBlocks(input, QUOTE_PAIRS, QUOTE_PLACEHOLDER);\n  const inputWithEscapedBlocks =\n      escapeBlocks(inputWithEscapedQuotes.escapedString, CONTENT_PAIRS, BLOCK_PLACEHOLDER);\n  let nextBlockIndex = 0;\n  let nextQuoteIndex = 0;\n  return inputWithEscapedBlocks.escapedString\n      .replace(\n          _ruleRe,\n          (...m: string[]) => {\n            const selector = m[2];\n            let content = '';\n            let suffix = m[4];\n            let contentPrefix = '';\n            if (suffix && suffix.startsWith('{' + BLOCK_PLACEHOLDER)) {\n              content = inputWithEscapedBlocks.blocks[nextBlockIndex++];\n              suffix = suffix.substring(BLOCK_PLACEHOLDER.length + 1);\n              contentPrefix = '{';\n            }\n            const rule = ruleCallback(new CssRule(selector, content));\n            return `${m[1]}${rule.selector}${m[3]}${contentPrefix}${rule.content}${suffix}`;\n          })\n      .replace(_quotedRe, () => inputWithEscapedQuotes.blocks[nextQuoteIndex++]);\n}\n\nclass StringWithEscapedBlocks {\n  constructor(public escapedString: string, public blocks: string[]) {}\n}\n\nfunction escapeBlocks(\n    input: string, charPairs: Map<string, string>, placeholder: string): StringWithEscapedBlocks {\n  const resultParts: string[] = [];\n  const escapedBlocks: string[] = [];\n  let openCharCount = 0;\n  let nonBlockStartIndex = 0;\n  let blockStartIndex = -1;\n  let openChar: string|undefined;\n  let closeChar: string|undefined;\n  for (let i = 0; i < input.length; i++) {\n    const char = input[i];\n    if (char === '\\\\') {\n      i++;\n    } else if (char === closeChar) {\n      openCharCount--;\n      if (openCharCount === 0) {\n        escapedBlocks.push(input.substring(blockStartIndex, i));\n        resultParts.push(placeholder);\n        nonBlockStartIndex = i;\n        blockStartIndex = -1;\n        openChar = closeChar = undefined;\n      }\n    } else if (char === openChar) {\n      openCharCount++;\n    } else if (openCharCount === 0 && charPairs.has(char)) {\n      openChar = char;\n      closeChar = charPairs.get(char);\n      openCharCount = 1;\n      blockStartIndex = i + 1;\n      resultParts.push(input.substring(nonBlockStartIndex, blockStartIndex));\n    }\n  }\n  if (blockStartIndex !== -1) {\n    escapedBlocks.push(input.substring(blockStartIndex));\n    resultParts.push(placeholder);\n  } else {\n    resultParts.push(input.substring(nonBlockStartIndex));\n  }\n  return new StringWithEscapedBlocks(resultParts.join(''), escapedBlocks);\n}\n\n/**\n * Combine the `contextSelectors` with the `hostMarker` and the `otherSelectors`\n * to create a selector that matches the same as `:host-context()`.\n *\n * Given a single context selector `A` we need to output selectors that match on the host and as an\n * ancestor of the host:\n *\n * ```\n * A <hostMarker>, A<hostMarker> {}\n * ```\n *\n * When there is more than one context selector we also have to create combinations of those\n * selectors with each other. For example if there are `A` and `B` selectors the output is:\n *\n * ```\n * AB<hostMarker>, AB <hostMarker>, A B<hostMarker>,\n * B A<hostMarker>, A B <hostMarker>, B A <hostMarker> {}\n * ```\n *\n * And so on...\n *\n * @param hostMarker the string that selects the host element.\n * @param contextSelectors an array of context selectors that will be combined.\n * @param otherSelectors the rest of the selectors that are not context selectors.\n */\nfunction combineHostContextSelectors(contextSelectors: string[], otherSelectors: string): string {\n  const hostMarker = _polyfillHostNoCombinator;\n  _polyfillHostRe.lastIndex = 0;  // reset the regex to ensure we get an accurate test\n  const otherSelectorsHasHost = _polyfillHostRe.test(otherSelectors);\n\n  // If there are no context selectors then just output a host marker\n  if (contextSelectors.length === 0) {\n    return hostMarker + otherSelectors;\n  }\n\n  const combined: string[] = [contextSelectors.pop() || ''];\n  while (contextSelectors.length > 0) {\n    const length = combined.length;\n    const contextSelector = contextSelectors.pop();\n    for (let i = 0; i < length; i++) {\n      const previousSelectors = combined[i];\n      // Add the new selector as a descendant of the previous selectors\n      combined[length * 2 + i] = previousSelectors + ' ' + contextSelector;\n      // Add the new selector as an ancestor of the previous selectors\n      combined[length + i] = contextSelector + ' ' + previousSelectors;\n      // Add the new selector to act on the same element as the previous selectors\n      combined[i] = contextSelector + previousSelectors;\n    }\n  }\n  // Finally connect the selector to the `hostMarker`s: either acting directly on the host\n  // (A<hostMarker>) or as an ancestor (A <hostMarker>).\n  return combined\n      .map(\n          s => otherSelectorsHasHost ?\n              `${s}${otherSelectors}` :\n              `${s}${hostMarker}${otherSelectors}, ${s} ${hostMarker}${otherSelectors}`)\n      .join(',');\n}\n\n/**\n * Mutate the given `groups` array so that there are `multiples` clones of the original array\n * stored.\n *\n * For example `repeatGroups([a, b], 3)` will result in `[a, b, a, b, a, b]` - but importantly the\n * newly added groups will be clones of the original.\n *\n * @param groups An array of groups of strings that will be repeated. This array is mutated\n *     in-place.\n * @param multiples The number of times the current groups should appear.\n */\nexport function repeatGroups<T>(groups: string[][], multiples: number): void {\n  const length = groups.length;\n  for (let i = 1; i < multiples; i++) {\n    for (let j = 0; j < length; j++) {\n      groups[j + (i * length)] = groups[j].slice(0);\n    }\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}