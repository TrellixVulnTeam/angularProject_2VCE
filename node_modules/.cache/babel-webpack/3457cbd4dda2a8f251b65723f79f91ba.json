{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nvar _classCallCheck = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar DependencyReference = require(\"./DependencyReference\");\n\nvar ModuleDependency = require(\"./ModuleDependency\");\n\nvar UnsupportedWebAssemblyFeatureError = require(\"../wasm/UnsupportedWebAssemblyFeatureError\");\n/** @typedef {import(\"@webassemblyjs/ast\").ModuleImportDescription} ModuleImportDescription */\n\n\nvar WebAssemblyImportDependency = /*#__PURE__*/function (_ModuleDependency) {\n  _inherits(WebAssemblyImportDependency, _ModuleDependency);\n\n  var _super = _createSuper(WebAssemblyImportDependency);\n\n  /**\n   * @param {string} request the request\n   * @param {string} name the imported name\n   * @param {ModuleImportDescription} description the WASM ast node\n   * @param {false | string} onlyDirectImport if only direct imports are allowed\n   */\n  function WebAssemblyImportDependency(request, name, description, onlyDirectImport) {\n    var _this;\n\n    _classCallCheck(this, WebAssemblyImportDependency);\n\n    _this = _super.call(this, request);\n    /** @type {string} */\n\n    _this.name = name;\n    /** @type {ModuleImportDescription} */\n\n    _this.description = description;\n    /** @type {false | string} */\n\n    _this.onlyDirectImport = onlyDirectImport;\n    return _this;\n  }\n\n  _createClass(WebAssemblyImportDependency, [{\n    key: \"getReference\",\n    value: function getReference() {\n      if (!this.module) return null;\n      return new DependencyReference(this.module, [this.name], false);\n    }\n  }, {\n    key: \"getErrors\",\n    value: function getErrors() {\n      if (this.onlyDirectImport && this.module && !this.module.type.startsWith(\"webassembly\")) {\n        return [new UnsupportedWebAssemblyFeatureError(\"Import \\\"\".concat(this.name, \"\\\" from \\\"\").concat(this.request, \"\\\" with \").concat(this.onlyDirectImport, \" can only be used for direct wasm to wasm dependencies\"))];\n      }\n    }\n  }, {\n    key: \"type\",\n    get: function get() {\n      return \"wasm import\";\n    }\n  }]);\n\n  return WebAssemblyImportDependency;\n}(ModuleDependency);\n\nmodule.exports = WebAssemblyImportDependency;","map":{"version":3,"sources":["/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/webpack/lib/dependencies/WebAssemblyImportDependency.js"],"names":["DependencyReference","require","ModuleDependency","UnsupportedWebAssemblyFeatureError","WebAssemblyImportDependency","request","name","description","onlyDirectImport","module","type","startsWith","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;;;;;;;;;AAEA,IAAMA,mBAAmB,GAAGC,OAAO,CAAC,uBAAD,CAAnC;;AACA,IAAMC,gBAAgB,GAAGD,OAAO,CAAC,oBAAD,CAAhC;;AACA,IAAME,kCAAkC,GAAGF,OAAO,CAAC,4CAAD,CAAlD;AAEA;;;IAEMG,2B;;;;;AACL;AACD;AACA;AACA;AACA;AACA;AACC,uCAAYC,OAAZ,EAAqBC,IAArB,EAA2BC,WAA3B,EAAwCC,gBAAxC,EAA0D;AAAA;;AAAA;;AACzD,8BAAMH,OAAN;AACA;;AACA,UAAKC,IAAL,GAAYA,IAAZ;AACA;;AACA,UAAKC,WAAL,GAAmBA,WAAnB;AACA;;AACA,UAAKC,gBAAL,GAAwBA,gBAAxB;AAPyD;AAQzD;;;;WAED,wBAAe;AACd,UAAI,CAAC,KAAKC,MAAV,EAAkB,OAAO,IAAP;AAClB,aAAO,IAAIT,mBAAJ,CAAwB,KAAKS,MAA7B,EAAqC,CAAC,KAAKH,IAAN,CAArC,EAAkD,KAAlD,CAAP;AACA;;;WAED,qBAAY;AACX,UACC,KAAKE,gBAAL,IACA,KAAKC,MADL,IAEA,CAAC,KAAKA,MAAL,CAAYC,IAAZ,CAAiBC,UAAjB,CAA4B,aAA5B,CAHF,EAIE;AACD,eAAO,CACN,IAAIR,kCAAJ,oBACY,KAAKG,IADjB,uBACgC,KAAKD,OADrC,qBACsD,KAAKG,gBAD3D,4DADM,CAAP;AAKA;AACD;;;SAED,eAAW;AACV,aAAO,aAAP;AACA;;;;EAtCwCN,gB;;AAyC1CO,MAAM,CAACG,OAAP,GAAiBR,2BAAjB","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst DependencyReference = require(\"./DependencyReference\");\nconst ModuleDependency = require(\"./ModuleDependency\");\nconst UnsupportedWebAssemblyFeatureError = require(\"../wasm/UnsupportedWebAssemblyFeatureError\");\n\n/** @typedef {import(\"@webassemblyjs/ast\").ModuleImportDescription} ModuleImportDescription */\n\nclass WebAssemblyImportDependency extends ModuleDependency {\n\t/**\n\t * @param {string} request the request\n\t * @param {string} name the imported name\n\t * @param {ModuleImportDescription} description the WASM ast node\n\t * @param {false | string} onlyDirectImport if only direct imports are allowed\n\t */\n\tconstructor(request, name, description, onlyDirectImport) {\n\t\tsuper(request);\n\t\t/** @type {string} */\n\t\tthis.name = name;\n\t\t/** @type {ModuleImportDescription} */\n\t\tthis.description = description;\n\t\t/** @type {false | string} */\n\t\tthis.onlyDirectImport = onlyDirectImport;\n\t}\n\n\tgetReference() {\n\t\tif (!this.module) return null;\n\t\treturn new DependencyReference(this.module, [this.name], false);\n\t}\n\n\tgetErrors() {\n\t\tif (\n\t\t\tthis.onlyDirectImport &&\n\t\t\tthis.module &&\n\t\t\t!this.module.type.startsWith(\"webassembly\")\n\t\t) {\n\t\t\treturn [\n\t\t\t\tnew UnsupportedWebAssemblyFeatureError(\n\t\t\t\t\t`Import \"${this.name}\" from \"${this.request}\" with ${this.onlyDirectImport} can only be used for direct wasm to wasm dependencies`\n\t\t\t\t)\n\t\t\t];\n\t\t}\n\t}\n\n\tget type() {\n\t\treturn \"wasm import\";\n\t}\n}\n\nmodule.exports = WebAssemblyImportDependency;\n"]},"metadata":{},"sourceType":"script"}