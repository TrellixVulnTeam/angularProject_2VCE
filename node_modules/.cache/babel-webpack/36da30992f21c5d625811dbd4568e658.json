{"ast":null,"code":"//      \n'use strict';\n\nvar parseJson = require('parse-json');\n\nvar yaml = require('js-yaml');\n\nvar importFresh = require('import-fresh');\n\nfunction loadJs(filepath) {\n  var result = importFresh(filepath);\n  return result;\n}\n\nfunction loadJson(filepath, content) {\n  try {\n    return parseJson(content);\n  } catch (err) {\n    err.message = \"JSON Error in \".concat(filepath, \":\\n\").concat(err.message);\n    throw err;\n  }\n}\n\nfunction loadYaml(filepath, content) {\n  return yaml.safeLoad(content, {\n    filename: filepath\n  });\n}\n\nmodule.exports = {\n  loadJs: loadJs,\n  loadJson: loadJson,\n  loadYaml: loadYaml\n};","map":{"version":3,"sources":["/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/cosmiconfig/dist/loaders.js"],"names":["parseJson","require","yaml","importFresh","loadJs","filepath","result","loadJson","content","err","message","loadYaml","safeLoad","filename","module","exports"],"mappings":"AAAA;AACA;;AAEA,IAAMA,SAAS,GAAGC,OAAO,CAAC,YAAD,CAAzB;;AACA,IAAMC,IAAI,GAAGD,OAAO,CAAC,SAAD,CAApB;;AACA,IAAME,WAAW,GAAGF,OAAO,CAAC,cAAD,CAA3B;;AAEA,SAASG,MAAT,CAAgBC,QAAhB,EAA0C;AACxC,MAAMC,MAAM,GAAGH,WAAW,CAACE,QAAD,CAA1B;AACA,SAAOC,MAAP;AACD;;AAED,SAASC,QAAT,CAAkBF,QAAlB,EAAoCG,OAApC,EAA6D;AAC3D,MAAI;AACF,WAAOR,SAAS,CAACQ,OAAD,CAAhB;AACD,GAFD,CAEE,OAAOC,GAAP,EAAY;AACZA,IAAAA,GAAG,CAACC,OAAJ,2BAA+BL,QAA/B,gBAA6CI,GAAG,CAACC,OAAjD;AACA,UAAMD,GAAN;AACD;AACF;;AAED,SAASE,QAAT,CAAkBN,QAAlB,EAAoCG,OAApC,EAA6D;AAC3D,SAAON,IAAI,CAACU,QAAL,CAAcJ,OAAd,EAAuB;AAAEK,IAAAA,QAAQ,EAAER;AAAZ,GAAvB,CAAP;AACD;;AAEDS,MAAM,CAACC,OAAP,GAAiB;AACfX,EAAAA,MAAM,EAANA,MADe;AAEfG,EAAAA,QAAQ,EAARA,QAFe;AAGfI,EAAAA,QAAQ,EAARA;AAHe,CAAjB","sourcesContent":["//      \n'use strict';\n\nconst parseJson = require('parse-json');\nconst yaml = require('js-yaml');\nconst importFresh = require('import-fresh');\n\nfunction loadJs(filepath        )         {\n  const result = importFresh(filepath);\n  return result;\n}\n\nfunction loadJson(filepath        , content        )         {\n  try {\n    return parseJson(content);\n  } catch (err) {\n    err.message = `JSON Error in ${filepath}:\\n${err.message}`;\n    throw err;\n  }\n}\n\nfunction loadYaml(filepath        , content        )         {\n  return yaml.safeLoad(content, { filename: filepath });\n}\n\nmodule.exports = {\n  loadJs,\n  loadJson,\n  loadYaml,\n};\n"]},"metadata":{},"sourceType":"script"}