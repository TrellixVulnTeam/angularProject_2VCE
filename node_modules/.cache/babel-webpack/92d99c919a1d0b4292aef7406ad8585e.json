{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/regenerator\");\n\nvar _toConsumableArray = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/toConsumableArray\");\n\nvar _slicedToArray = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nvar _asyncToGenerator = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _createForOfIteratorHelper = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _util = require(\"util\");\n\nvar _postcss = _interopRequireDefault(require(\"postcss\"));\n\nvar _postcssValueParser = _interopRequireDefault(require(\"postcss-value-parser\"));\n\nvar _utils = require(\"../utils\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar pluginName = 'postcss-url-parser';\nvar isUrlFunc = /url/i;\nvar isImageSetFunc = /^(?:-webkit-)?image-set$/i;\nvar needParseDecl = /(?:url|(?:-webkit-)?image-set)\\(/i;\n\nfunction getNodeFromUrlFunc(node) {\n  return node.nodes && node.nodes[0];\n}\n\nfunction shouldHandleRule(rule, decl, result) {\n  // https://www.w3.org/TR/css-syntax-3/#typedef-url-token\n  if (rule.url.replace(/^[\\s]+|[\\s]+$/g, '').length === 0) {\n    result.warn(\"Unable to find uri in '\".concat(decl.toString(), \"'\"), {\n      node: decl\n    });\n    return false;\n  }\n\n  if (!(0, _utils.isUrlRequestable)(rule.url)) {\n    return false;\n  }\n\n  return true;\n}\n\nfunction walkCss(css, result, options, callback) {\n  var accumulator = [];\n  css.walkDecls(function (decl) {\n    if (!needParseDecl.test(decl.value)) {\n      return;\n    }\n\n    var parsed = (0, _postcssValueParser.default)(decl.value);\n    parsed.walk(function (node) {\n      if (node.type !== 'function') {\n        return;\n      }\n\n      if (isUrlFunc.test(node.value)) {\n        var nodes = node.nodes;\n        var isStringValue = nodes.length !== 0 && nodes[0].type === 'string';\n        var url = isStringValue ? nodes[0].value : _postcssValueParser.default.stringify(nodes);\n        var rule = {\n          node: getNodeFromUrlFunc(node),\n          url: url,\n          needQuotes: false,\n          isStringValue: isStringValue\n        };\n\n        if (shouldHandleRule(rule, decl, result)) {\n          accumulator.push({\n            decl: decl,\n            rule: rule,\n            parsed: parsed\n          });\n        } // Do not traverse inside `url`\n        // eslint-disable-next-line consistent-return\n\n\n        return false;\n      } else if (isImageSetFunc.test(node.value)) {\n        var _iterator = _createForOfIteratorHelper(node.nodes),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var nNode = _step.value;\n            var type = nNode.type,\n                value = nNode.value;\n\n            if (type === 'function' && isUrlFunc.test(value)) {\n              var _nodes = nNode.nodes;\n\n              var _isStringValue = _nodes.length !== 0 && _nodes[0].type === 'string';\n\n              var _url = _isStringValue ? _nodes[0].value : _postcssValueParser.default.stringify(_nodes);\n\n              var _rule = {\n                node: getNodeFromUrlFunc(nNode),\n                url: _url,\n                needQuotes: false,\n                isStringValue: _isStringValue\n              };\n\n              if (shouldHandleRule(_rule, decl, result)) {\n                accumulator.push({\n                  decl: decl,\n                  rule: _rule,\n                  parsed: parsed\n                });\n              }\n            } else if (type === 'string') {\n              var _rule2 = {\n                node: nNode,\n                url: value,\n                needQuotes: true,\n                isStringValue: true\n              };\n\n              if (shouldHandleRule(_rule2, decl, result)) {\n                accumulator.push({\n                  decl: decl,\n                  rule: _rule2,\n                  parsed: parsed\n                });\n              }\n            }\n          } // Do not traverse inside `image-set`\n          // eslint-disable-next-line consistent-return\n\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n\n        return false;\n      }\n    });\n  });\n  callback(null, accumulator);\n}\n\nvar asyncWalkCss = (0, _util.promisify)(walkCss);\n\nvar _default = _postcss.default.plugin(pluginName, function (options) {\n  return /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(css, result) {\n      var parsedResults, tasks, imports, replacements, hasUrlImportHelper, _iterator2, _step2, _loop, _ret, results, index, _results$index, url, prefix, hash, _results$index$parsed, decl, rule, parsed, newUrl, importKey, importName, needQuotes, replacementKey, replacementName;\n\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return asyncWalkCss(css, result, options);\n\n            case 2:\n              parsedResults = _context2.sent;\n\n              if (!(parsedResults.length === 0)) {\n                _context2.next = 5;\n                break;\n              }\n\n              return _context2.abrupt(\"return\", Promise.resolve());\n\n            case 5:\n              tasks = [];\n              imports = new Map();\n              replacements = new Map();\n              hasUrlImportHelper = false;\n              _iterator2 = _createForOfIteratorHelper(parsedResults);\n              _context2.prev = 10;\n\n              _loop = function _loop() {\n                var parsedResult = _step2.value;\n                var _parsedResult$rule = parsedResult.rule,\n                    url = _parsedResult$rule.url,\n                    isStringValue = _parsedResult$rule.isStringValue;\n                var normalizedUrl = url;\n                var prefix = '';\n                var queryParts = normalizedUrl.split('!');\n\n                if (queryParts.length > 1) {\n                  normalizedUrl = queryParts.pop();\n                  prefix = queryParts.join('!');\n                }\n\n                normalizedUrl = (0, _utils.normalizeUrl)(normalizedUrl, isStringValue);\n\n                if (!options.filter(normalizedUrl)) {\n                  // eslint-disable-next-line no-continue\n                  return \"continue\";\n                }\n\n                if (!hasUrlImportHelper) {\n                  options.imports.push({\n                    importName: '___CSS_LOADER_GET_URL_IMPORT___',\n                    url: options.urlHandler(require.resolve('../runtime/getUrl.js')),\n                    index: -1\n                  });\n                  hasUrlImportHelper = true;\n                }\n\n                var splittedUrl = normalizedUrl.split(/(\\?)?#/);\n\n                var _splittedUrl = _slicedToArray(splittedUrl, 3),\n                    pathname = _splittedUrl[0],\n                    query = _splittedUrl[1],\n                    hashOrQuery = _splittedUrl[2];\n\n                var hash = query ? '?' : '';\n                hash += hashOrQuery ? \"#\".concat(hashOrQuery) : '';\n                var request = (0, _utils.requestify)(pathname, options.rootContext);\n                tasks.push(_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n                  var resolver, context, resolvedUrl;\n                  return _regeneratorRuntime.wrap(function _callee$(_context) {\n                    while (1) {\n                      switch (_context.prev = _context.next) {\n                        case 0:\n                          resolver = options.resolver, context = options.context;\n                          _context.next = 3;\n                          return (0, _utils.resolveRequests)(resolver, context, _toConsumableArray(new Set([request, normalizedUrl])));\n\n                        case 3:\n                          resolvedUrl = _context.sent;\n                          return _context.abrupt(\"return\", {\n                            url: resolvedUrl,\n                            prefix: prefix,\n                            hash: hash,\n                            parsedResult: parsedResult\n                          });\n\n                        case 5:\n                        case \"end\":\n                          return _context.stop();\n                      }\n                    }\n                  }, _callee);\n                }))());\n              };\n\n              _iterator2.s();\n\n            case 13:\n              if ((_step2 = _iterator2.n()).done) {\n                _context2.next = 19;\n                break;\n              }\n\n              _ret = _loop();\n\n              if (!(_ret === \"continue\")) {\n                _context2.next = 17;\n                break;\n              }\n\n              return _context2.abrupt(\"continue\", 17);\n\n            case 17:\n              _context2.next = 13;\n              break;\n\n            case 19:\n              _context2.next = 24;\n              break;\n\n            case 21:\n              _context2.prev = 21;\n              _context2.t0 = _context2[\"catch\"](10);\n\n              _iterator2.e(_context2.t0);\n\n            case 24:\n              _context2.prev = 24;\n\n              _iterator2.f();\n\n              return _context2.finish(24);\n\n            case 27:\n              _context2.next = 29;\n              return Promise.all(tasks);\n\n            case 29:\n              results = _context2.sent;\n\n              for (index = 0; index <= results.length - 1; index++) {\n                _results$index = results[index], url = _results$index.url, prefix = _results$index.prefix, hash = _results$index.hash, _results$index$parsed = _results$index.parsedResult, decl = _results$index$parsed.decl, rule = _results$index$parsed.rule, parsed = _results$index$parsed.parsed;\n                newUrl = prefix ? \"\".concat(prefix, \"!\").concat(url) : url;\n                importKey = newUrl;\n                importName = imports.get(importKey);\n\n                if (!importName) {\n                  importName = \"___CSS_LOADER_URL_IMPORT_\".concat(imports.size, \"___\");\n                  imports.set(importKey, importName);\n                  options.imports.push({\n                    importName: importName,\n                    url: options.urlHandler(newUrl),\n                    index: index\n                  });\n                }\n\n                needQuotes = rule.needQuotes;\n                replacementKey = JSON.stringify({\n                  newUrl: newUrl,\n                  hash: hash,\n                  needQuotes: needQuotes\n                });\n                replacementName = replacements.get(replacementKey);\n\n                if (!replacementName) {\n                  replacementName = \"___CSS_LOADER_URL_REPLACEMENT_\".concat(replacements.size, \"___\");\n                  replacements.set(replacementKey, replacementName);\n                  options.replacements.push({\n                    replacementName: replacementName,\n                    importName: importName,\n                    hash: hash,\n                    needQuotes: needQuotes\n                  });\n                } // eslint-disable-next-line no-param-reassign\n\n\n                rule.node.type = 'word'; // eslint-disable-next-line no-param-reassign\n\n                rule.node.value = replacementName; // eslint-disable-next-line no-param-reassign\n\n                decl.value = parsed.toString();\n              }\n\n              return _context2.abrupt(\"return\", Promise.resolve());\n\n            case 32:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, null, [[10, 21, 24, 27]]);\n    }));\n\n    return function (_x, _x2) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n});\n\nexports.default = _default;","map":{"version":3,"sources":["/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/css-loader/dist/plugins/postcss-url-parser.js"],"names":["Object","defineProperty","exports","value","default","_util","require","_postcss","_interopRequireDefault","_postcssValueParser","_utils","obj","__esModule","pluginName","isUrlFunc","isImageSetFunc","needParseDecl","getNodeFromUrlFunc","node","nodes","shouldHandleRule","rule","decl","result","url","replace","length","warn","toString","isUrlRequestable","walkCss","css","options","callback","accumulator","walkDecls","test","parsed","walk","type","isStringValue","stringify","needQuotes","push","nNode","asyncWalkCss","promisify","_default","plugin","parsedResults","Promise","resolve","tasks","imports","Map","replacements","hasUrlImportHelper","parsedResult","normalizedUrl","prefix","queryParts","split","pop","join","normalizeUrl","filter","importName","urlHandler","index","splittedUrl","pathname","query","hashOrQuery","hash","request","requestify","rootContext","resolver","context","resolveRequests","Set","resolvedUrl","all","results","newUrl","importKey","get","size","set","replacementKey","JSON","replacementName"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _util = require(\"util\");\n\nvar _postcss = _interopRequireDefault(require(\"postcss\"));\n\nvar _postcssValueParser = _interopRequireDefault(require(\"postcss-value-parser\"));\n\nvar _utils = require(\"../utils\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nconst pluginName = 'postcss-url-parser';\nconst isUrlFunc = /url/i;\nconst isImageSetFunc = /^(?:-webkit-)?image-set$/i;\nconst needParseDecl = /(?:url|(?:-webkit-)?image-set)\\(/i;\n\nfunction getNodeFromUrlFunc(node) {\n  return node.nodes && node.nodes[0];\n}\n\nfunction shouldHandleRule(rule, decl, result) {\n  // https://www.w3.org/TR/css-syntax-3/#typedef-url-token\n  if (rule.url.replace(/^[\\s]+|[\\s]+$/g, '').length === 0) {\n    result.warn(`Unable to find uri in '${decl.toString()}'`, {\n      node: decl\n    });\n    return false;\n  }\n\n  if (!(0, _utils.isUrlRequestable)(rule.url)) {\n    return false;\n  }\n\n  return true;\n}\n\nfunction walkCss(css, result, options, callback) {\n  const accumulator = [];\n  css.walkDecls(decl => {\n    if (!needParseDecl.test(decl.value)) {\n      return;\n    }\n\n    const parsed = (0, _postcssValueParser.default)(decl.value);\n    parsed.walk(node => {\n      if (node.type !== 'function') {\n        return;\n      }\n\n      if (isUrlFunc.test(node.value)) {\n        const {\n          nodes\n        } = node;\n        const isStringValue = nodes.length !== 0 && nodes[0].type === 'string';\n        const url = isStringValue ? nodes[0].value : _postcssValueParser.default.stringify(nodes);\n        const rule = {\n          node: getNodeFromUrlFunc(node),\n          url,\n          needQuotes: false,\n          isStringValue\n        };\n\n        if (shouldHandleRule(rule, decl, result)) {\n          accumulator.push({\n            decl,\n            rule,\n            parsed\n          });\n        } // Do not traverse inside `url`\n        // eslint-disable-next-line consistent-return\n\n\n        return false;\n      } else if (isImageSetFunc.test(node.value)) {\n        for (const nNode of node.nodes) {\n          const {\n            type,\n            value\n          } = nNode;\n\n          if (type === 'function' && isUrlFunc.test(value)) {\n            const {\n              nodes\n            } = nNode;\n            const isStringValue = nodes.length !== 0 && nodes[0].type === 'string';\n            const url = isStringValue ? nodes[0].value : _postcssValueParser.default.stringify(nodes);\n            const rule = {\n              node: getNodeFromUrlFunc(nNode),\n              url,\n              needQuotes: false,\n              isStringValue\n            };\n\n            if (shouldHandleRule(rule, decl, result)) {\n              accumulator.push({\n                decl,\n                rule,\n                parsed\n              });\n            }\n          } else if (type === 'string') {\n            const rule = {\n              node: nNode,\n              url: value,\n              needQuotes: true,\n              isStringValue: true\n            };\n\n            if (shouldHandleRule(rule, decl, result)) {\n              accumulator.push({\n                decl,\n                rule,\n                parsed\n              });\n            }\n          }\n        } // Do not traverse inside `image-set`\n        // eslint-disable-next-line consistent-return\n\n\n        return false;\n      }\n    });\n  });\n  callback(null, accumulator);\n}\n\nconst asyncWalkCss = (0, _util.promisify)(walkCss);\n\nvar _default = _postcss.default.plugin(pluginName, options => async (css, result) => {\n  const parsedResults = await asyncWalkCss(css, result, options);\n\n  if (parsedResults.length === 0) {\n    return Promise.resolve();\n  }\n\n  const tasks = [];\n  const imports = new Map();\n  const replacements = new Map();\n  let hasUrlImportHelper = false;\n\n  for (const parsedResult of parsedResults) {\n    const {\n      url,\n      isStringValue\n    } = parsedResult.rule;\n    let normalizedUrl = url;\n    let prefix = '';\n    const queryParts = normalizedUrl.split('!');\n\n    if (queryParts.length > 1) {\n      normalizedUrl = queryParts.pop();\n      prefix = queryParts.join('!');\n    }\n\n    normalizedUrl = (0, _utils.normalizeUrl)(normalizedUrl, isStringValue);\n\n    if (!options.filter(normalizedUrl)) {\n      // eslint-disable-next-line no-continue\n      continue;\n    }\n\n    if (!hasUrlImportHelper) {\n      options.imports.push({\n        importName: '___CSS_LOADER_GET_URL_IMPORT___',\n        url: options.urlHandler(require.resolve('../runtime/getUrl.js')),\n        index: -1\n      });\n      hasUrlImportHelper = true;\n    }\n\n    const splittedUrl = normalizedUrl.split(/(\\?)?#/);\n    const [pathname, query, hashOrQuery] = splittedUrl;\n    let hash = query ? '?' : '';\n    hash += hashOrQuery ? `#${hashOrQuery}` : '';\n    const request = (0, _utils.requestify)(pathname, options.rootContext);\n    tasks.push((async () => {\n      const {\n        resolver,\n        context\n      } = options;\n      const resolvedUrl = await (0, _utils.resolveRequests)(resolver, context, [...new Set([request, normalizedUrl])]);\n      return {\n        url: resolvedUrl,\n        prefix,\n        hash,\n        parsedResult\n      };\n    })());\n  }\n\n  const results = await Promise.all(tasks);\n\n  for (let index = 0; index <= results.length - 1; index++) {\n    const {\n      url,\n      prefix,\n      hash,\n      parsedResult: {\n        decl,\n        rule,\n        parsed\n      }\n    } = results[index];\n    const newUrl = prefix ? `${prefix}!${url}` : url;\n    const importKey = newUrl;\n    let importName = imports.get(importKey);\n\n    if (!importName) {\n      importName = `___CSS_LOADER_URL_IMPORT_${imports.size}___`;\n      imports.set(importKey, importName);\n      options.imports.push({\n        importName,\n        url: options.urlHandler(newUrl),\n        index\n      });\n    }\n\n    const {\n      needQuotes\n    } = rule;\n    const replacementKey = JSON.stringify({\n      newUrl,\n      hash,\n      needQuotes\n    });\n    let replacementName = replacements.get(replacementKey);\n\n    if (!replacementName) {\n      replacementName = `___CSS_LOADER_URL_REPLACEMENT_${replacements.size}___`;\n      replacements.set(replacementKey, replacementName);\n      options.replacements.push({\n        replacementName,\n        importName,\n        hash,\n        needQuotes\n      });\n    } // eslint-disable-next-line no-param-reassign\n\n\n    rule.node.type = 'word'; // eslint-disable-next-line no-param-reassign\n\n    rule.node.value = replacementName; // eslint-disable-next-line no-param-reassign\n\n    decl.value = parsed.toString();\n  }\n\n  return Promise.resolve();\n});\n\nexports.default = _default;"]},"metadata":{},"sourceType":"script"}