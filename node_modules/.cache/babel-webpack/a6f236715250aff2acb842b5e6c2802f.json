{"ast":null,"code":"/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n(function (factory) {\n  if (typeof module === \"object\" && typeof module.exports === \"object\") {\n    var v = factory(require, exports);\n    if (v !== undefined) module.exports = v;\n  } else if (typeof define === \"function\" && define.amd) {\n    define(\"@angular/compiler/src/i18n/serializers/xliff\", [\"require\", \"exports\", \"tslib\", \"@angular/compiler/src/ml_parser/ast\", \"@angular/compiler/src/ml_parser/xml_parser\", \"@angular/compiler/src/i18n/digest\", \"@angular/compiler/src/i18n/i18n_ast\", \"@angular/compiler/src/i18n/parse_util\", \"@angular/compiler/src/i18n/serializers/serializer\", \"@angular/compiler/src/i18n/serializers/xml_helper\"], factory);\n  }\n})(function (require, exports) {\n  \"use strict\";\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.Xliff = void 0;\n\n  var tslib_1 = require(\"tslib\");\n\n  var ml = require(\"@angular/compiler/src/ml_parser/ast\");\n\n  var xml_parser_1 = require(\"@angular/compiler/src/ml_parser/xml_parser\");\n\n  var digest_1 = require(\"@angular/compiler/src/i18n/digest\");\n\n  var i18n = require(\"@angular/compiler/src/i18n/i18n_ast\");\n\n  var parse_util_1 = require(\"@angular/compiler/src/i18n/parse_util\");\n\n  var serializer_1 = require(\"@angular/compiler/src/i18n/serializers/serializer\");\n\n  var xml = require(\"@angular/compiler/src/i18n/serializers/xml_helper\");\n\n  var _VERSION = '1.2';\n  var _XMLNS = 'urn:oasis:names:tc:xliff:document:1.2'; // TODO(vicb): make this a param (s/_/-/)\n\n  var _DEFAULT_SOURCE_LANG = 'en';\n  var _PLACEHOLDER_TAG = 'x';\n  var _MARKER_TAG = 'mrk';\n  var _FILE_TAG = 'file';\n  var _SOURCE_TAG = 'source';\n  var _SEGMENT_SOURCE_TAG = 'seg-source';\n  var _ALT_TRANS_TAG = 'alt-trans';\n  var _TARGET_TAG = 'target';\n  var _UNIT_TAG = 'trans-unit';\n  var _CONTEXT_GROUP_TAG = 'context-group';\n  var _CONTEXT_TAG = 'context'; // https://docs.oasis-open.org/xliff/v1.2/os/xliff-core.html\n  // https://docs.oasis-open.org/xliff/v1.2/xliff-profile-html/xliff-profile-html-1.2.html\n\n  var Xliff =\n  /** @class */\n  function (_super) {\n    tslib_1.__extends(Xliff, _super);\n\n    function Xliff() {\n      return _super !== null && _super.apply(this, arguments) || this;\n    }\n\n    Xliff.prototype.write = function (messages, locale) {\n      var visitor = new _WriteVisitor();\n      var transUnits = [];\n      messages.forEach(function (message) {\n        var _a;\n\n        var contextTags = [];\n        message.sources.forEach(function (source) {\n          var contextGroupTag = new xml.Tag(_CONTEXT_GROUP_TAG, {\n            purpose: 'location'\n          });\n          contextGroupTag.children.push(new xml.CR(10), new xml.Tag(_CONTEXT_TAG, {\n            'context-type': 'sourcefile'\n          }, [new xml.Text(source.filePath)]), new xml.CR(10), new xml.Tag(_CONTEXT_TAG, {\n            'context-type': 'linenumber'\n          }, [new xml.Text(\"\" + source.startLine)]), new xml.CR(8));\n          contextTags.push(new xml.CR(8), contextGroupTag);\n        });\n        var transUnit = new xml.Tag(_UNIT_TAG, {\n          id: message.id,\n          datatype: 'html'\n        });\n\n        (_a = transUnit.children).push.apply(_a, tslib_1.__spread([new xml.CR(8), new xml.Tag(_SOURCE_TAG, {}, visitor.serialize(message.nodes))], contextTags));\n\n        if (message.description) {\n          transUnit.children.push(new xml.CR(8), new xml.Tag('note', {\n            priority: '1',\n            from: 'description'\n          }, [new xml.Text(message.description)]));\n        }\n\n        if (message.meaning) {\n          transUnit.children.push(new xml.CR(8), new xml.Tag('note', {\n            priority: '1',\n            from: 'meaning'\n          }, [new xml.Text(message.meaning)]));\n        }\n\n        transUnit.children.push(new xml.CR(6));\n        transUnits.push(new xml.CR(6), transUnit);\n      });\n      var body = new xml.Tag('body', {}, tslib_1.__spread(transUnits, [new xml.CR(4)]));\n      var file = new xml.Tag('file', {\n        'source-language': locale || _DEFAULT_SOURCE_LANG,\n        datatype: 'plaintext',\n        original: 'ng2.template'\n      }, [new xml.CR(4), body, new xml.CR(2)]);\n      var xliff = new xml.Tag('xliff', {\n        version: _VERSION,\n        xmlns: _XMLNS\n      }, [new xml.CR(2), file, new xml.CR()]);\n      return xml.serialize([new xml.Declaration({\n        version: '1.0',\n        encoding: 'UTF-8'\n      }), new xml.CR(), xliff, new xml.CR()]);\n    };\n\n    Xliff.prototype.load = function (content, url) {\n      // xliff to xml nodes\n      var xliffParser = new XliffParser();\n\n      var _a = xliffParser.parse(content, url),\n          locale = _a.locale,\n          msgIdToHtml = _a.msgIdToHtml,\n          errors = _a.errors; // xml nodes to i18n nodes\n\n\n      var i18nNodesByMsgId = {};\n      var converter = new XmlToI18n();\n      Object.keys(msgIdToHtml).forEach(function (msgId) {\n        var _a = converter.convert(msgIdToHtml[msgId], url),\n            i18nNodes = _a.i18nNodes,\n            e = _a.errors;\n\n        errors.push.apply(errors, tslib_1.__spread(e));\n        i18nNodesByMsgId[msgId] = i18nNodes;\n      });\n\n      if (errors.length) {\n        throw new Error(\"xliff parse errors:\\n\" + errors.join('\\n'));\n      }\n\n      return {\n        locale: locale,\n        i18nNodesByMsgId: i18nNodesByMsgId\n      };\n    };\n\n    Xliff.prototype.digest = function (message) {\n      return digest_1.digest(message);\n    };\n\n    return Xliff;\n  }(serializer_1.Serializer);\n\n  exports.Xliff = Xliff;\n\n  var _WriteVisitor =\n  /** @class */\n  function () {\n    function _WriteVisitor() {}\n\n    _WriteVisitor.prototype.visitText = function (text, context) {\n      return [new xml.Text(text.value)];\n    };\n\n    _WriteVisitor.prototype.visitContainer = function (container, context) {\n      var _this = this;\n\n      var nodes = [];\n      container.children.forEach(function (node) {\n        return nodes.push.apply(nodes, tslib_1.__spread(node.visit(_this)));\n      });\n      return nodes;\n    };\n\n    _WriteVisitor.prototype.visitIcu = function (icu, context) {\n      var _this = this;\n\n      var nodes = [new xml.Text(\"{\" + icu.expressionPlaceholder + \", \" + icu.type + \", \")];\n      Object.keys(icu.cases).forEach(function (c) {\n        nodes.push.apply(nodes, tslib_1.__spread([new xml.Text(c + \" {\")], icu.cases[c].visit(_this), [new xml.Text(\"} \")]));\n      });\n      nodes.push(new xml.Text(\"}\"));\n      return nodes;\n    };\n\n    _WriteVisitor.prototype.visitTagPlaceholder = function (ph, context) {\n      var ctype = getCtypeForTag(ph.tag);\n\n      if (ph.isVoid) {\n        // void tags have no children nor closing tags\n        return [new xml.Tag(_PLACEHOLDER_TAG, {\n          id: ph.startName,\n          ctype: ctype,\n          'equiv-text': \"<\" + ph.tag + \"/>\"\n        })];\n      }\n\n      var startTagPh = new xml.Tag(_PLACEHOLDER_TAG, {\n        id: ph.startName,\n        ctype: ctype,\n        'equiv-text': \"<\" + ph.tag + \">\"\n      });\n      var closeTagPh = new xml.Tag(_PLACEHOLDER_TAG, {\n        id: ph.closeName,\n        ctype: ctype,\n        'equiv-text': \"</\" + ph.tag + \">\"\n      });\n      return tslib_1.__spread([startTagPh], this.serialize(ph.children), [closeTagPh]);\n    };\n\n    _WriteVisitor.prototype.visitPlaceholder = function (ph, context) {\n      return [new xml.Tag(_PLACEHOLDER_TAG, {\n        id: ph.name,\n        'equiv-text': \"{{\" + ph.value + \"}}\"\n      })];\n    };\n\n    _WriteVisitor.prototype.visitIcuPlaceholder = function (ph, context) {\n      var equivText = \"{\" + ph.value.expression + \", \" + ph.value.type + \", \" + Object.keys(ph.value.cases).map(function (value) {\n        return value + ' {...}';\n      }).join(' ') + \"}\";\n      return [new xml.Tag(_PLACEHOLDER_TAG, {\n        id: ph.name,\n        'equiv-text': equivText\n      })];\n    };\n\n    _WriteVisitor.prototype.serialize = function (nodes) {\n      var _this = this;\n\n      return [].concat.apply([], tslib_1.__spread(nodes.map(function (node) {\n        return node.visit(_this);\n      })));\n    };\n\n    return _WriteVisitor;\n  }(); // TODO(vicb): add error management (structure)\n  // Extract messages as xml nodes from the xliff file\n\n\n  var XliffParser =\n  /** @class */\n  function () {\n    function XliffParser() {\n      this._locale = null;\n    }\n\n    XliffParser.prototype.parse = function (xliff, url) {\n      this._unitMlString = null;\n      this._msgIdToHtml = {};\n      var xml = new xml_parser_1.XmlParser().parse(xliff, url);\n      this._errors = xml.errors;\n      ml.visitAll(this, xml.rootNodes, null);\n      return {\n        msgIdToHtml: this._msgIdToHtml,\n        errors: this._errors,\n        locale: this._locale\n      };\n    };\n\n    XliffParser.prototype.visitElement = function (element, context) {\n      switch (element.name) {\n        case _UNIT_TAG:\n          this._unitMlString = null;\n          var idAttr = element.attrs.find(function (attr) {\n            return attr.name === 'id';\n          });\n\n          if (!idAttr) {\n            this._addError(element, \"<\" + _UNIT_TAG + \"> misses the \\\"id\\\" attribute\");\n          } else {\n            var id = idAttr.value;\n\n            if (this._msgIdToHtml.hasOwnProperty(id)) {\n              this._addError(element, \"Duplicated translations for msg \" + id);\n            } else {\n              ml.visitAll(this, element.children, null);\n\n              if (typeof this._unitMlString === 'string') {\n                this._msgIdToHtml[id] = this._unitMlString;\n              } else {\n                this._addError(element, \"Message \" + id + \" misses a translation\");\n              }\n            }\n          }\n\n          break;\n        // ignore those tags\n\n        case _SOURCE_TAG:\n        case _SEGMENT_SOURCE_TAG:\n        case _ALT_TRANS_TAG:\n          break;\n\n        case _TARGET_TAG:\n          var innerTextStart = element.startSourceSpan.end.offset;\n          var innerTextEnd = element.endSourceSpan.start.offset;\n          var content = element.startSourceSpan.start.file.content;\n          var innerText = content.slice(innerTextStart, innerTextEnd);\n          this._unitMlString = innerText;\n          break;\n\n        case _FILE_TAG:\n          var localeAttr = element.attrs.find(function (attr) {\n            return attr.name === 'target-language';\n          });\n\n          if (localeAttr) {\n            this._locale = localeAttr.value;\n          }\n\n          ml.visitAll(this, element.children, null);\n          break;\n\n        default:\n          // TODO(vicb): assert file structure, xliff version\n          // For now only recurse on unhandled nodes\n          ml.visitAll(this, element.children, null);\n      }\n    };\n\n    XliffParser.prototype.visitAttribute = function (attribute, context) {};\n\n    XliffParser.prototype.visitText = function (text, context) {};\n\n    XliffParser.prototype.visitComment = function (comment, context) {};\n\n    XliffParser.prototype.visitExpansion = function (expansion, context) {};\n\n    XliffParser.prototype.visitExpansionCase = function (expansionCase, context) {};\n\n    XliffParser.prototype._addError = function (node, message) {\n      this._errors.push(new parse_util_1.I18nError(node.sourceSpan, message));\n    };\n\n    return XliffParser;\n  }(); // Convert ml nodes (xliff syntax) to i18n nodes\n\n\n  var XmlToI18n =\n  /** @class */\n  function () {\n    function XmlToI18n() {}\n\n    XmlToI18n.prototype.convert = function (message, url) {\n      var xmlIcu = new xml_parser_1.XmlParser().parse(message, url, {\n        tokenizeExpansionForms: true\n      });\n      this._errors = xmlIcu.errors;\n      var i18nNodes = this._errors.length > 0 || xmlIcu.rootNodes.length == 0 ? [] : [].concat.apply([], tslib_1.__spread(ml.visitAll(this, xmlIcu.rootNodes)));\n      return {\n        i18nNodes: i18nNodes,\n        errors: this._errors\n      };\n    };\n\n    XmlToI18n.prototype.visitText = function (text, context) {\n      return new i18n.Text(text.value, text.sourceSpan);\n    };\n\n    XmlToI18n.prototype.visitElement = function (el, context) {\n      if (el.name === _PLACEHOLDER_TAG) {\n        var nameAttr = el.attrs.find(function (attr) {\n          return attr.name === 'id';\n        });\n\n        if (nameAttr) {\n          return new i18n.Placeholder('', nameAttr.value, el.sourceSpan);\n        }\n\n        this._addError(el, \"<\" + _PLACEHOLDER_TAG + \"> misses the \\\"id\\\" attribute\");\n\n        return null;\n      }\n\n      if (el.name === _MARKER_TAG) {\n        return [].concat.apply([], tslib_1.__spread(ml.visitAll(this, el.children)));\n      }\n\n      this._addError(el, \"Unexpected tag\");\n\n      return null;\n    };\n\n    XmlToI18n.prototype.visitExpansion = function (icu, context) {\n      var caseMap = {};\n      ml.visitAll(this, icu.cases).forEach(function (c) {\n        caseMap[c.value] = new i18n.Container(c.nodes, icu.sourceSpan);\n      });\n      return new i18n.Icu(icu.switchValue, icu.type, caseMap, icu.sourceSpan);\n    };\n\n    XmlToI18n.prototype.visitExpansionCase = function (icuCase, context) {\n      return {\n        value: icuCase.value,\n        nodes: ml.visitAll(this, icuCase.expression)\n      };\n    };\n\n    XmlToI18n.prototype.visitComment = function (comment, context) {};\n\n    XmlToI18n.prototype.visitAttribute = function (attribute, context) {};\n\n    XmlToI18n.prototype._addError = function (node, message) {\n      this._errors.push(new parse_util_1.I18nError(node.sourceSpan, message));\n    };\n\n    return XmlToI18n;\n  }();\n\n  function getCtypeForTag(tag) {\n    switch (tag.toLowerCase()) {\n      case 'br':\n        return 'lb';\n\n      case 'img':\n        return 'image';\n\n      default:\n        return \"x-\" + tag;\n    }\n  }\n});","map":{"version":3,"sources":["../../../../../../../../packages/compiler/src/i18n/serializers/xliff.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport * as ml from '../../ml_parser/ast';\nimport {XmlParser} from '../../ml_parser/xml_parser';\nimport {digest} from '../digest';\nimport * as i18n from '../i18n_ast';\nimport {I18nError} from '../parse_util';\n\nimport {Serializer} from './serializer';\nimport * as xml from './xml_helper';\n\nconst _VERSION = '1.2';\nconst _XMLNS = 'urn:oasis:names:tc:xliff:document:1.2';\n// TODO(vicb): make this a param (s/_/-/)\nconst _DEFAULT_SOURCE_LANG = 'en';\nconst _PLACEHOLDER_TAG = 'x';\nconst _MARKER_TAG = 'mrk';\n\nconst _FILE_TAG = 'file';\nconst _SOURCE_TAG = 'source';\nconst _SEGMENT_SOURCE_TAG = 'seg-source';\nconst _ALT_TRANS_TAG = 'alt-trans';\nconst _TARGET_TAG = 'target';\nconst _UNIT_TAG = 'trans-unit';\nconst _CONTEXT_GROUP_TAG = 'context-group';\nconst _CONTEXT_TAG = 'context';\n\n// https://docs.oasis-open.org/xliff/v1.2/os/xliff-core.html\n// https://docs.oasis-open.org/xliff/v1.2/xliff-profile-html/xliff-profile-html-1.2.html\nexport class Xliff extends Serializer {\n  write(messages: i18n.Message[], locale: string|null): string {\n    const visitor = new _WriteVisitor();\n    const transUnits: xml.Node[] = [];\n\n    messages.forEach(message => {\n      let contextTags: xml.Node[] = [];\n      message.sources.forEach((source: i18n.MessageSpan) => {\n        let contextGroupTag = new xml.Tag(_CONTEXT_GROUP_TAG, {purpose: 'location'});\n        contextGroupTag.children.push(\n            new xml.CR(10),\n            new xml.Tag(\n                _CONTEXT_TAG, {'context-type': 'sourcefile'}, [new xml.Text(source.filePath)]),\n            new xml.CR(10),\n            new xml.Tag(_CONTEXT_TAG, {'context-type': 'linenumber'}, [new xml.Text(\n                                                                          `${source.startLine}`)]),\n            new xml.CR(8));\n        contextTags.push(new xml.CR(8), contextGroupTag);\n      });\n\n      const transUnit = new xml.Tag(_UNIT_TAG, {id: message.id, datatype: 'html'});\n      transUnit.children.push(\n          new xml.CR(8), new xml.Tag(_SOURCE_TAG, {}, visitor.serialize(message.nodes)),\n          ...contextTags);\n\n      if (message.description) {\n        transUnit.children.push(\n            new xml.CR(8),\n            new xml.Tag(\n                'note', {priority: '1', from: 'description'}, [new xml.Text(message.description)]));\n      }\n\n      if (message.meaning) {\n        transUnit.children.push(\n            new xml.CR(8),\n            new xml.Tag('note', {priority: '1', from: 'meaning'}, [new xml.Text(message.meaning)]));\n      }\n\n      transUnit.children.push(new xml.CR(6));\n\n      transUnits.push(new xml.CR(6), transUnit);\n    });\n\n    const body = new xml.Tag('body', {}, [...transUnits, new xml.CR(4)]);\n    const file = new xml.Tag(\n        'file', {\n          'source-language': locale || _DEFAULT_SOURCE_LANG,\n          datatype: 'plaintext',\n          original: 'ng2.template',\n        },\n        [new xml.CR(4), body, new xml.CR(2)]);\n    const xliff = new xml.Tag(\n        'xliff', {version: _VERSION, xmlns: _XMLNS}, [new xml.CR(2), file, new xml.CR()]);\n\n    return xml.serialize([\n      new xml.Declaration({version: '1.0', encoding: 'UTF-8'}), new xml.CR(), xliff, new xml.CR()\n    ]);\n  }\n\n  load(content: string, url: string):\n      {locale: string, i18nNodesByMsgId: {[msgId: string]: i18n.Node[]}} {\n    // xliff to xml nodes\n    const xliffParser = new XliffParser();\n    const {locale, msgIdToHtml, errors} = xliffParser.parse(content, url);\n\n    // xml nodes to i18n nodes\n    const i18nNodesByMsgId: {[msgId: string]: i18n.Node[]} = {};\n    const converter = new XmlToI18n();\n\n    Object.keys(msgIdToHtml).forEach(msgId => {\n      const {i18nNodes, errors: e} = converter.convert(msgIdToHtml[msgId], url);\n      errors.push(...e);\n      i18nNodesByMsgId[msgId] = i18nNodes;\n    });\n\n    if (errors.length) {\n      throw new Error(`xliff parse errors:\\n${errors.join('\\n')}`);\n    }\n\n    return {locale: locale!, i18nNodesByMsgId};\n  }\n\n  digest(message: i18n.Message): string {\n    return digest(message);\n  }\n}\n\nclass _WriteVisitor implements i18n.Visitor {\n  visitText(text: i18n.Text, context?: any): xml.Node[] {\n    return [new xml.Text(text.value)];\n  }\n\n  visitContainer(container: i18n.Container, context?: any): xml.Node[] {\n    const nodes: xml.Node[] = [];\n    container.children.forEach((node: i18n.Node) => nodes.push(...node.visit(this)));\n    return nodes;\n  }\n\n  visitIcu(icu: i18n.Icu, context?: any): xml.Node[] {\n    const nodes = [new xml.Text(`{${icu.expressionPlaceholder}, ${icu.type}, `)];\n\n    Object.keys(icu.cases).forEach((c: string) => {\n      nodes.push(new xml.Text(`${c} {`), ...icu.cases[c].visit(this), new xml.Text(`} `));\n    });\n\n    nodes.push(new xml.Text(`}`));\n\n    return nodes;\n  }\n\n  visitTagPlaceholder(ph: i18n.TagPlaceholder, context?: any): xml.Node[] {\n    const ctype = getCtypeForTag(ph.tag);\n\n    if (ph.isVoid) {\n      // void tags have no children nor closing tags\n      return [new xml.Tag(\n          _PLACEHOLDER_TAG, {id: ph.startName, ctype, 'equiv-text': `<${ph.tag}/>`})];\n    }\n\n    const startTagPh =\n        new xml.Tag(_PLACEHOLDER_TAG, {id: ph.startName, ctype, 'equiv-text': `<${ph.tag}>`});\n    const closeTagPh =\n        new xml.Tag(_PLACEHOLDER_TAG, {id: ph.closeName, ctype, 'equiv-text': `</${ph.tag}>`});\n\n    return [startTagPh, ...this.serialize(ph.children), closeTagPh];\n  }\n\n  visitPlaceholder(ph: i18n.Placeholder, context?: any): xml.Node[] {\n    return [new xml.Tag(_PLACEHOLDER_TAG, {id: ph.name, 'equiv-text': `{{${ph.value}}}`})];\n  }\n\n  visitIcuPlaceholder(ph: i18n.IcuPlaceholder, context?: any): xml.Node[] {\n    const equivText = `{${ph.value.expression}, ${ph.value.type}, ${\n        Object.keys(ph.value.cases).map((value: string) => value + ' {...}').join(' ')}}`;\n    return [new xml.Tag(_PLACEHOLDER_TAG, {id: ph.name, 'equiv-text': equivText})];\n  }\n\n  serialize(nodes: i18n.Node[]): xml.Node[] {\n    return [].concat(...nodes.map(node => node.visit(this)));\n  }\n}\n\n// TODO(vicb): add error management (structure)\n// Extract messages as xml nodes from the xliff file\nclass XliffParser implements ml.Visitor {\n  // TODO(issue/24571): remove '!'.\n  private _unitMlString!: string|null;\n  // TODO(issue/24571): remove '!'.\n  private _errors!: I18nError[];\n  // TODO(issue/24571): remove '!'.\n  private _msgIdToHtml!: {[msgId: string]: string};\n  private _locale: string|null = null;\n\n  parse(xliff: string, url: string) {\n    this._unitMlString = null;\n    this._msgIdToHtml = {};\n\n    const xml = new XmlParser().parse(xliff, url);\n\n    this._errors = xml.errors;\n    ml.visitAll(this, xml.rootNodes, null);\n\n    return {\n      msgIdToHtml: this._msgIdToHtml,\n      errors: this._errors,\n      locale: this._locale,\n    };\n  }\n\n  visitElement(element: ml.Element, context: any): any {\n    switch (element.name) {\n      case _UNIT_TAG:\n        this._unitMlString = null!;\n        const idAttr = element.attrs.find((attr) => attr.name === 'id');\n        if (!idAttr) {\n          this._addError(element, `<${_UNIT_TAG}> misses the \"id\" attribute`);\n        } else {\n          const id = idAttr.value;\n          if (this._msgIdToHtml.hasOwnProperty(id)) {\n            this._addError(element, `Duplicated translations for msg ${id}`);\n          } else {\n            ml.visitAll(this, element.children, null);\n            if (typeof this._unitMlString === 'string') {\n              this._msgIdToHtml[id] = this._unitMlString;\n            } else {\n              this._addError(element, `Message ${id} misses a translation`);\n            }\n          }\n        }\n        break;\n\n      // ignore those tags\n      case _SOURCE_TAG:\n      case _SEGMENT_SOURCE_TAG:\n      case _ALT_TRANS_TAG:\n        break;\n\n      case _TARGET_TAG:\n        const innerTextStart = element.startSourceSpan.end.offset;\n        const innerTextEnd = element.endSourceSpan!.start.offset;\n        const content = element.startSourceSpan.start.file.content;\n        const innerText = content.slice(innerTextStart, innerTextEnd);\n        this._unitMlString = innerText;\n        break;\n\n      case _FILE_TAG:\n        const localeAttr = element.attrs.find((attr) => attr.name === 'target-language');\n        if (localeAttr) {\n          this._locale = localeAttr.value;\n        }\n        ml.visitAll(this, element.children, null);\n        break;\n\n      default:\n        // TODO(vicb): assert file structure, xliff version\n        // For now only recurse on unhandled nodes\n        ml.visitAll(this, element.children, null);\n    }\n  }\n\n  visitAttribute(attribute: ml.Attribute, context: any): any {}\n\n  visitText(text: ml.Text, context: any): any {}\n\n  visitComment(comment: ml.Comment, context: any): any {}\n\n  visitExpansion(expansion: ml.Expansion, context: any): any {}\n\n  visitExpansionCase(expansionCase: ml.ExpansionCase, context: any): any {}\n\n  private _addError(node: ml.Node, message: string): void {\n    this._errors.push(new I18nError(node.sourceSpan, message));\n  }\n}\n\n// Convert ml nodes (xliff syntax) to i18n nodes\nclass XmlToI18n implements ml.Visitor {\n  // TODO(issue/24571): remove '!'.\n  private _errors!: I18nError[];\n\n  convert(message: string, url: string) {\n    const xmlIcu = new XmlParser().parse(message, url, {tokenizeExpansionForms: true});\n    this._errors = xmlIcu.errors;\n\n    const i18nNodes = this._errors.length > 0 || xmlIcu.rootNodes.length == 0 ?\n        [] :\n        [].concat(...ml.visitAll(this, xmlIcu.rootNodes));\n\n    return {\n      i18nNodes: i18nNodes,\n      errors: this._errors,\n    };\n  }\n\n  visitText(text: ml.Text, context: any) {\n    return new i18n.Text(text.value, text.sourceSpan);\n  }\n\n  visitElement(el: ml.Element, context: any): i18n.Placeholder|ml.Node[]|null {\n    if (el.name === _PLACEHOLDER_TAG) {\n      const nameAttr = el.attrs.find((attr) => attr.name === 'id');\n      if (nameAttr) {\n        return new i18n.Placeholder('', nameAttr.value, el.sourceSpan);\n      }\n\n      this._addError(el, `<${_PLACEHOLDER_TAG}> misses the \"id\" attribute`);\n      return null;\n    }\n\n    if (el.name === _MARKER_TAG) {\n      return [].concat(...ml.visitAll(this, el.children));\n    }\n\n    this._addError(el, `Unexpected tag`);\n    return null;\n  }\n\n  visitExpansion(icu: ml.Expansion, context: any) {\n    const caseMap: {[value: string]: i18n.Node} = {};\n\n    ml.visitAll(this, icu.cases).forEach((c: any) => {\n      caseMap[c.value] = new i18n.Container(c.nodes, icu.sourceSpan);\n    });\n\n    return new i18n.Icu(icu.switchValue, icu.type, caseMap, icu.sourceSpan);\n  }\n\n  visitExpansionCase(icuCase: ml.ExpansionCase, context: any): any {\n    return {\n      value: icuCase.value,\n      nodes: ml.visitAll(this, icuCase.expression),\n    };\n  }\n\n  visitComment(comment: ml.Comment, context: any) {}\n\n  visitAttribute(attribute: ml.Attribute, context: any) {}\n\n  private _addError(node: ml.Node, message: string): void {\n    this._errors.push(new I18nError(node.sourceSpan, message));\n  }\n}\n\nfunction getCtypeForTag(tag: string): string {\n  switch (tag.toLowerCase()) {\n    case 'br':\n      return 'lb';\n    case 'img':\n      return 'image';\n    default:\n      return `x-${tag}`;\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}