{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nvar _classCallCheck = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar Hook = require(\"./Hook\");\n\nvar HookCodeFactory = require(\"./HookCodeFactory\");\n\nvar SyncHookCodeFactory = /*#__PURE__*/function (_HookCodeFactory) {\n  _inherits(SyncHookCodeFactory, _HookCodeFactory);\n\n  var _super = _createSuper(SyncHookCodeFactory);\n\n  function SyncHookCodeFactory() {\n    _classCallCheck(this, SyncHookCodeFactory);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(SyncHookCodeFactory, [{\n    key: \"content\",\n    value: function content(_ref) {\n      var _onError = _ref.onError,\n          onDone = _ref.onDone,\n          rethrowIfPossible = _ref.rethrowIfPossible;\n      return this.callTapsSeries({\n        onError: function onError(i, err) {\n          return _onError(err);\n        },\n        onDone: onDone,\n        rethrowIfPossible: rethrowIfPossible\n      });\n    }\n  }]);\n\n  return SyncHookCodeFactory;\n}(HookCodeFactory);\n\nvar factory = new SyncHookCodeFactory();\n\nvar TAP_ASYNC = function TAP_ASYNC() {\n  throw new Error(\"tapAsync is not supported on a SyncHook\");\n};\n\nvar TAP_PROMISE = function TAP_PROMISE() {\n  throw new Error(\"tapPromise is not supported on a SyncHook\");\n};\n\nvar COMPILE = function COMPILE(options) {\n  factory.setup(this, options);\n  return factory.create(options);\n};\n\nfunction SyncHook() {\n  var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;\n  var hook = new Hook(args, name);\n  hook.constructor = SyncHook;\n  hook.tapAsync = TAP_ASYNC;\n  hook.tapPromise = TAP_PROMISE;\n  hook.compile = COMPILE;\n  return hook;\n}\n\nSyncHook.prototype = null;\nmodule.exports = SyncHook;","map":{"version":3,"sources":["/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/enhanced-resolve/node_modules/tapable/lib/SyncHook.js"],"names":["Hook","require","HookCodeFactory","SyncHookCodeFactory","onError","onDone","rethrowIfPossible","callTapsSeries","i","err","factory","TAP_ASYNC","Error","TAP_PROMISE","COMPILE","options","setup","create","SyncHook","args","name","undefined","hook","constructor","tapAsync","tapPromise","compile","prototype","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;;;;;;;;;AAEA,IAAMA,IAAI,GAAGC,OAAO,CAAC,QAAD,CAApB;;AACA,IAAMC,eAAe,GAAGD,OAAO,CAAC,mBAAD,CAA/B;;IAEME,mB;;;;;;;;;;;;;WACL,uBAAgD;AAAA,UAAtCC,QAAsC,QAAtCA,OAAsC;AAAA,UAA7BC,MAA6B,QAA7BA,MAA6B;AAAA,UAArBC,iBAAqB,QAArBA,iBAAqB;AAC/C,aAAO,KAAKC,cAAL,CAAoB;AAC1BH,QAAAA,OAAO,EAAE,iBAACI,CAAD,EAAIC,GAAJ;AAAA,iBAAYL,QAAO,CAACK,GAAD,CAAnB;AAAA,SADiB;AAE1BJ,QAAAA,MAAM,EAANA,MAF0B;AAG1BC,QAAAA,iBAAiB,EAAjBA;AAH0B,OAApB,CAAP;AAKA;;;;EAPgCJ,e;;AAUlC,IAAMQ,OAAO,GAAG,IAAIP,mBAAJ,EAAhB;;AAEA,IAAMQ,SAAS,GAAG,SAAZA,SAAY,GAAM;AACvB,QAAM,IAAIC,KAAJ,CAAU,yCAAV,CAAN;AACA,CAFD;;AAIA,IAAMC,WAAW,GAAG,SAAdA,WAAc,GAAM;AACzB,QAAM,IAAID,KAAJ,CAAU,2CAAV,CAAN;AACA,CAFD;;AAIA,IAAME,OAAO,GAAG,SAAVA,OAAU,CAASC,OAAT,EAAkB;AACjCL,EAAAA,OAAO,CAACM,KAAR,CAAc,IAAd,EAAoBD,OAApB;AACA,SAAOL,OAAO,CAACO,MAAR,CAAeF,OAAf,CAAP;AACA,CAHD;;AAKA,SAASG,QAAT,GAA+C;AAAA,MAA7BC,IAA6B,uEAAtB,EAAsB;AAAA,MAAlBC,IAAkB,uEAAXC,SAAW;AAC9C,MAAMC,IAAI,GAAG,IAAItB,IAAJ,CAASmB,IAAT,EAAeC,IAAf,CAAb;AACAE,EAAAA,IAAI,CAACC,WAAL,GAAmBL,QAAnB;AACAI,EAAAA,IAAI,CAACE,QAAL,GAAgBb,SAAhB;AACAW,EAAAA,IAAI,CAACG,UAAL,GAAkBZ,WAAlB;AACAS,EAAAA,IAAI,CAACI,OAAL,GAAeZ,OAAf;AACA,SAAOQ,IAAP;AACA;;AAEDJ,QAAQ,CAACS,SAAT,GAAqB,IAArB;AAEAC,MAAM,CAACC,OAAP,GAAiBX,QAAjB","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst Hook = require(\"./Hook\");\nconst HookCodeFactory = require(\"./HookCodeFactory\");\n\nclass SyncHookCodeFactory extends HookCodeFactory {\n\tcontent({ onError, onDone, rethrowIfPossible }) {\n\t\treturn this.callTapsSeries({\n\t\t\tonError: (i, err) => onError(err),\n\t\t\tonDone,\n\t\t\trethrowIfPossible\n\t\t});\n\t}\n}\n\nconst factory = new SyncHookCodeFactory();\n\nconst TAP_ASYNC = () => {\n\tthrow new Error(\"tapAsync is not supported on a SyncHook\");\n};\n\nconst TAP_PROMISE = () => {\n\tthrow new Error(\"tapPromise is not supported on a SyncHook\");\n};\n\nconst COMPILE = function(options) {\n\tfactory.setup(this, options);\n\treturn factory.create(options);\n};\n\nfunction SyncHook(args = [], name = undefined) {\n\tconst hook = new Hook(args, name);\n\thook.constructor = SyncHook;\n\thook.tapAsync = TAP_ASYNC;\n\thook.tapPromise = TAP_PROMISE;\n\thook.compile = COMPILE;\n\treturn hook;\n}\n\nSyncHook.prototype = null;\n\nmodule.exports = SyncHook;\n"]},"metadata":{},"sourceType":"script"}