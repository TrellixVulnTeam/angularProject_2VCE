{"ast":null,"code":"/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n(function (factory) {\n  if (typeof module === \"object\" && typeof module.exports === \"object\") {\n    var v = factory(require, exports);\n    if (v !== undefined) module.exports = v;\n  } else if (typeof define === \"function\" && define.amd) {\n    define(\"@angular/compiler-cli/src/ngtsc/typecheck/api/completion\", [\"require\", \"exports\"], factory);\n  }\n})(function (require, exports) {\n  \"use strict\";\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.CompletionKind = void 0;\n  /**\n   * Discriminant of an autocompletion source (a `Completion`).\n   */\n\n  var CompletionKind;\n\n  (function (CompletionKind) {\n    CompletionKind[CompletionKind[\"Reference\"] = 0] = \"Reference\";\n    CompletionKind[CompletionKind[\"Variable\"] = 1] = \"Variable\";\n  })(CompletionKind = exports.CompletionKind || (exports.CompletionKind = {}));\n});","map":{"version":3,"sources":["../../../../../../../../../packages/compiler-cli/src/ngtsc/typecheck/api/completion.ts"],"names":[],"mappings":"AAAA;;;;;;AAMG;;;;;;;;;;;;;;;AAWH;;AAEG;;AAEH,MAAY,cAAZ;;AAAA,GAAA,UAAY,cAAZ,EAA0B;AACxB,IAAA,cAAA,CAAA,cAAA,CAAA,WAAA,CAAA,GAAA,CAAA,CAAA,GAAA,WAAA;AACA,IAAA,cAAA,CAAA,cAAA,CAAA,UAAA,CAAA,GAAA,CAAA,CAAA,GAAA,UAAA;AACD,GAHD,EAAY,cAAc,GAAd,OAAA,CAAA,cAAA,KAAA,OAAA,CAAA,cAAA,GAAc,EAAd,CAAZ","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TmplAstReference, TmplAstVariable} from '@angular/compiler';\n\nimport {ShimLocation} from './symbols';\n\n/**\n * An autocompletion source of any kind.\n */\nexport type Completion = ReferenceCompletion|VariableCompletion;\n\n/**\n * Discriminant of an autocompletion source (a `Completion`).\n */\n\nexport enum CompletionKind {\n  Reference,\n  Variable,\n}\n\n/**\n * An autocompletion result representing a local reference declared in the template.\n */\nexport interface ReferenceCompletion {\n  kind: CompletionKind.Reference;\n\n  /**\n   * The `TmplAstReference` from the template which should be available as a completion.\n   */\n  node: TmplAstReference;\n}\n\n/**\n * An autocompletion result representing a variable declared in the template.\n */\nexport interface VariableCompletion {\n  kind: CompletionKind.Variable;\n\n  /**\n   * The `TmplAstVariable` from the template which should be available as a completion.\n   */\n  node: TmplAstVariable;\n}\n\n/**\n * Autocompletion data for an expression in the global scope.\n *\n * Global completion is accomplished by merging data from two sources:\n *  * TypeScript completion of the component's class members.\n *  * Local references and variables that are in scope at a given template level.\n */\nexport interface GlobalCompletion {\n  /**\n   * A location within the type-checking shim where TypeScript's completion APIs can be used to\n   * access completions for the template's component context (component class members).\n   */\n  componentContext: ShimLocation;\n\n  /**\n   * `Map` of local references and variables that are visible at the requested level of the\n   * template.\n   *\n   * Shadowing of references/variables from multiple levels of the template has already been\n   * accounted for in the preparation of `templateContext`. Entries here shadow component members of\n   * the same name (from the `componentContext` completions).\n   */\n  templateContext: Map<string, ReferenceCompletion|VariableCompletion>;\n\n  /**\n   * A location within the type-checking shim where TypeScript's completion APIs can be used to\n   * access completions for the AST node of the cursor position (primitive constants).\n   */\n  nodeContext: ShimLocation|null;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}