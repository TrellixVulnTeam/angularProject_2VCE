{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Maël Nison @arcanis\n*/\n\"use strict\";\n/** @typedef {import(\"./Resolver\")} Resolver */\n\n/** @typedef {import(\"./Resolver\").ResolveStepHook} ResolveStepHook */\n\n/**\n * @typedef {Object} PnpApiImpl\n * @property {function(string, string, Object): string} resolveToUnqualified\n */\n\nvar _objectSpread = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/objectSpread2\");\n\nvar _createForOfIteratorHelper = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _classCallCheck = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/createClass\");\n\nmodule.exports = /*#__PURE__*/function () {\n  /**\n   * @param {string | ResolveStepHook} source source\n   * @param {PnpApiImpl} pnpApi pnpApi\n   * @param {string | ResolveStepHook} target target\n   */\n  function PnpPlugin(source, pnpApi, target) {\n    _classCallCheck(this, PnpPlugin);\n\n    this.source = source;\n    this.pnpApi = pnpApi;\n    this.target = target;\n  }\n  /**\n   * @param {Resolver} resolver the resolver\n   * @returns {void}\n   */\n\n\n  _createClass(PnpPlugin, [{\n    key: \"apply\",\n    value: function apply(resolver) {\n      var _this = this;\n\n      var target = resolver.ensureHook(this.target);\n      resolver.getHook(this.source).tapAsync(\"PnpPlugin\", function (request, resolveContext, callback) {\n        var req = request.request;\n        if (!req) return callback(); // The trailing slash indicates to PnP that this value is a folder rather than a file\n\n        var issuer = \"\".concat(request.path, \"/\");\n        var resolution;\n        var apiResolution;\n\n        try {\n          resolution = _this.pnpApi.resolveToUnqualified(req, issuer, {\n            considerBuiltins: false\n          });\n\n          if (resolveContext.fileDependencies) {\n            apiResolution = _this.pnpApi.resolveToUnqualified(\"pnpapi\", issuer, {\n              considerBuiltins: false\n            });\n          }\n        } catch (error) {\n          if (error.code === \"MODULE_NOT_FOUND\" && error.pnpCode === \"UNDECLARED_DEPENDENCY\") {\n            // This is not a PnP managed dependency.\n            // Try to continue resolving with our alternatives\n            if (resolveContext.log) {\n              resolveContext.log(\"request is not managed by the pnpapi\");\n\n              var _iterator = _createForOfIteratorHelper(error.message.split(\"\\n\").filter(Boolean)),\n                  _step;\n\n              try {\n                for (_iterator.s(); !(_step = _iterator.n()).done;) {\n                  var line = _step.value;\n                  resolveContext.log(\"  \".concat(line));\n                }\n              } catch (err) {\n                _iterator.e(err);\n              } finally {\n                _iterator.f();\n              }\n            }\n\n            return callback();\n          }\n\n          return callback(error);\n        }\n\n        if (resolution === req) return callback();\n\n        if (apiResolution && resolveContext.fileDependencies) {\n          resolveContext.fileDependencies.add(apiResolution);\n        }\n\n        var obj = _objectSpread(_objectSpread({}, request), {}, {\n          path: resolution,\n          request: undefined,\n          ignoreSymlinks: true\n        });\n\n        resolver.doResolve(target, obj, \"resolved by pnp to \".concat(resolution), resolveContext, function (err, result) {\n          if (err) return callback(err);\n          if (result) return callback(null, result); // Skip alternatives\n\n          return callback(null, null);\n        });\n      });\n    }\n  }]);\n\n  return PnpPlugin;\n}();","map":{"version":3,"sources":["/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/enhanced-resolve/lib/PnpPlugin.js"],"names":["module","exports","source","pnpApi","target","resolver","ensureHook","getHook","tapAsync","request","resolveContext","callback","req","issuer","path","resolution","apiResolution","resolveToUnqualified","considerBuiltins","fileDependencies","error","code","pnpCode","log","message","split","filter","Boolean","line","add","obj","undefined","ignoreSymlinks","doResolve","err","result"],"mappings":"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","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Maël Nison @arcanis\n*/\n\n\"use strict\";\n\n/** @typedef {import(\"./Resolver\")} Resolver */\n/** @typedef {import(\"./Resolver\").ResolveStepHook} ResolveStepHook */\n/**\n * @typedef {Object} PnpApiImpl\n * @property {function(string, string, Object): string} resolveToUnqualified\n */\n\nmodule.exports = class PnpPlugin {\n\t/**\n\t * @param {string | ResolveStepHook} source source\n\t * @param {PnpApiImpl} pnpApi pnpApi\n\t * @param {string | ResolveStepHook} target target\n\t */\n\tconstructor(source, pnpApi, target) {\n\t\tthis.source = source;\n\t\tthis.pnpApi = pnpApi;\n\t\tthis.target = target;\n\t}\n\n\t/**\n\t * @param {Resolver} resolver the resolver\n\t * @returns {void}\n\t */\n\tapply(resolver) {\n\t\tconst target = resolver.ensureHook(this.target);\n\t\tresolver\n\t\t\t.getHook(this.source)\n\t\t\t.tapAsync(\"PnpPlugin\", (request, resolveContext, callback) => {\n\t\t\t\tconst req = request.request;\n\t\t\t\tif (!req) return callback();\n\n\t\t\t\t// The trailing slash indicates to PnP that this value is a folder rather than a file\n\t\t\t\tconst issuer = `${request.path}/`;\n\n\t\t\t\tlet resolution;\n\t\t\t\tlet apiResolution;\n\t\t\t\ttry {\n\t\t\t\t\tresolution = this.pnpApi.resolveToUnqualified(req, issuer, {\n\t\t\t\t\t\tconsiderBuiltins: false\n\t\t\t\t\t});\n\t\t\t\t\tif (resolveContext.fileDependencies) {\n\t\t\t\t\t\tapiResolution = this.pnpApi.resolveToUnqualified(\"pnpapi\", issuer, {\n\t\t\t\t\t\t\tconsiderBuiltins: false\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t} catch (error) {\n\t\t\t\t\tif (\n\t\t\t\t\t\terror.code === \"MODULE_NOT_FOUND\" &&\n\t\t\t\t\t\terror.pnpCode === \"UNDECLARED_DEPENDENCY\"\n\t\t\t\t\t) {\n\t\t\t\t\t\t// This is not a PnP managed dependency.\n\t\t\t\t\t\t// Try to continue resolving with our alternatives\n\t\t\t\t\t\tif (resolveContext.log) {\n\t\t\t\t\t\t\tresolveContext.log(`request is not managed by the pnpapi`);\n\t\t\t\t\t\t\tfor (const line of error.message.split(\"\\n\").filter(Boolean))\n\t\t\t\t\t\t\t\tresolveContext.log(`  ${line}`);\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn callback();\n\t\t\t\t\t}\n\t\t\t\t\treturn callback(error);\n\t\t\t\t}\n\n\t\t\t\tif (resolution === req) return callback();\n\n\t\t\t\tif (apiResolution && resolveContext.fileDependencies) {\n\t\t\t\t\tresolveContext.fileDependencies.add(apiResolution);\n\t\t\t\t}\n\n\t\t\t\tconst obj = {\n\t\t\t\t\t...request,\n\t\t\t\t\tpath: resolution,\n\t\t\t\t\trequest: undefined,\n\t\t\t\t\tignoreSymlinks: true\n\t\t\t\t};\n\t\t\t\tresolver.doResolve(\n\t\t\t\t\ttarget,\n\t\t\t\t\tobj,\n\t\t\t\t\t`resolved by pnp to ${resolution}`,\n\t\t\t\t\tresolveContext,\n\t\t\t\t\t(err, result) => {\n\t\t\t\t\t\tif (err) return callback(err);\n\t\t\t\t\t\tif (result) return callback(null, result);\n\t\t\t\t\t\t// Skip alternatives\n\t\t\t\t\t\treturn callback(null, null);\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t});\n\t}\n};\n"]},"metadata":{},"sourceType":"script"}