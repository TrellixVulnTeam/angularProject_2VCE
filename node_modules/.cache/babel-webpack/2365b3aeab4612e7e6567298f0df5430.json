{"ast":null,"code":"(function (factory) {\n  if (typeof module === \"object\" && typeof module.exports === \"object\") {\n    var v = factory(require, exports);\n    if (v !== undefined) module.exports = v;\n  } else if (typeof define === \"function\" && define.amd) {\n    define(\"@angular/compiler-cli/src/ngtsc/logging/src/console_logger\", [\"require\", \"exports\", \"tslib\", \"@angular/compiler-cli/src/ngtsc/logging/src/logger\"], factory);\n  }\n})(function (require, exports) {\n  \"use strict\";\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.ConsoleLogger = exports.ERROR = exports.WARN = exports.DEBUG = void 0;\n\n  var tslib_1 = require(\"tslib\");\n  /**\n   * @license\n   * Copyright Google LLC All Rights Reserved.\n   *\n   * Use of this source code is governed by an MIT-style license that can be\n   * found in the LICENSE file at https://angular.io/license\n   */\n\n\n  var logger_1 = require(\"@angular/compiler-cli/src/ngtsc/logging/src/logger\");\n\n  var RESET = '\\x1b[0m';\n  var RED = '\\x1b[31m';\n  var YELLOW = '\\x1b[33m';\n  var BLUE = '\\x1b[36m';\n  exports.DEBUG = BLUE + \"Debug:\" + RESET;\n  exports.WARN = YELLOW + \"Warning:\" + RESET;\n  exports.ERROR = RED + \"Error:\" + RESET;\n  /**\n   * A simple logger that outputs directly to the Console.\n   *\n   * The log messages can be filtered based on severity via the `logLevel`\n   * constructor parameter.\n   */\n\n  var ConsoleLogger =\n  /** @class */\n  function () {\n    function ConsoleLogger(level) {\n      this.level = level;\n    }\n\n    ConsoleLogger.prototype.debug = function () {\n      var args = [];\n\n      for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n      }\n\n      if (this.level <= logger_1.LogLevel.debug) console.debug.apply(console, tslib_1.__spread([exports.DEBUG], args));\n    };\n\n    ConsoleLogger.prototype.info = function () {\n      var args = [];\n\n      for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n      }\n\n      if (this.level <= logger_1.LogLevel.info) console.info.apply(console, tslib_1.__spread(args));\n    };\n\n    ConsoleLogger.prototype.warn = function () {\n      var args = [];\n\n      for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n      }\n\n      if (this.level <= logger_1.LogLevel.warn) console.warn.apply(console, tslib_1.__spread([exports.WARN], args));\n    };\n\n    ConsoleLogger.prototype.error = function () {\n      var args = [];\n\n      for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n      }\n\n      if (this.level <= logger_1.LogLevel.error) console.error.apply(console, tslib_1.__spread([exports.ERROR], args));\n    };\n\n    return ConsoleLogger;\n  }();\n\n  exports.ConsoleLogger = ConsoleLogger;\n});","map":{"version":3,"sources":["../../../../../../../../../packages/compiler-cli/src/ngtsc/logging/src/console_logger.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;AAAA;;;;;;AAMG;;;AACH,MAAA,QAAA,GAAA,OAAA,CAAA,oDAAA,CAAA;;AAEA,MAAM,KAAK,GAAG,SAAd;AACA,MAAM,GAAG,GAAG,UAAZ;AACA,MAAM,MAAM,GAAG,UAAf;AACA,MAAM,IAAI,GAAG,UAAb;AAEa,EAAA,OAAA,CAAA,KAAA,GAAW,IAAI,GAAA,QAAJ,GAAa,KAAxB;AACA,EAAA,OAAA,CAAA,IAAA,GAAU,MAAM,GAAA,UAAN,GAAiB,KAA3B;AACA,EAAA,OAAA,CAAA,KAAA,GAAW,GAAG,GAAA,QAAH,GAAY,KAAvB;AAEb;;;;;AAKG;;AACH,MAAA,aAAA;AAAA;AAAA,cAAA;AACE,aAAA,aAAA,CAAmB,KAAnB,EAAkC;AAAf,WAAA,KAAA,GAAA,KAAA;AAAmB;;AACtC,IAAA,aAAA,CAAA,SAAA,CAAA,KAAA,GAAA,YAAA;AAAM,UAAA,IAAA,GAAA,EAAA;;WAAA,IAAA,EAAA,GAAA,C,EAAA,EAAA,GAAA,SAAA,CAAA,M,EAAA,EAAA,E,EAAiB;AAAjB,QAAA,IAAA,CAAA,EAAA,CAAA,GAAA,SAAA,CAAA,EAAA,CAAA;;;AACJ,UAAI,KAAK,KAAL,IAAc,QAAA,CAAA,QAAA,CAAS,KAA3B,EAAkC,OAAO,CAAC,KAAR,CAAa,KAAb,CAAA,OAAA,EAAO,OAAA,CAAA,QAAA,CAAA,CAAO,OAAA,CAAA,KAAP,CAAA,EAAiB,IAAjB,CAAP;AACnC,KAFD;;AAGA,IAAA,aAAA,CAAA,SAAA,CAAA,IAAA,GAAA,YAAA;AAAK,UAAA,IAAA,GAAA,EAAA;;WAAA,IAAA,EAAA,GAAA,C,EAAA,EAAA,GAAA,SAAA,CAAA,M,EAAA,EAAA,E,EAAiB;AAAjB,QAAA,IAAA,CAAA,EAAA,CAAA,GAAA,SAAA,CAAA,EAAA,CAAA;;;AACH,UAAI,KAAK,KAAL,IAAc,QAAA,CAAA,QAAA,CAAS,IAA3B,EAAiC,OAAO,CAAC,IAAR,CAAY,KAAZ,CAAA,OAAA,EAAO,OAAA,CAAA,QAAA,CAAS,IAAT,CAAP;AAClC,KAFD;;AAGA,IAAA,aAAA,CAAA,SAAA,CAAA,IAAA,GAAA,YAAA;AAAK,UAAA,IAAA,GAAA,EAAA;;WAAA,IAAA,EAAA,GAAA,C,EAAA,EAAA,GAAA,SAAA,CAAA,M,EAAA,EAAA,E,EAAiB;AAAjB,QAAA,IAAA,CAAA,EAAA,CAAA,GAAA,SAAA,CAAA,EAAA,CAAA;;;AACH,UAAI,KAAK,KAAL,IAAc,QAAA,CAAA,QAAA,CAAS,IAA3B,EAAiC,OAAO,CAAC,IAAR,CAAY,KAAZ,CAAA,OAAA,EAAO,OAAA,CAAA,QAAA,CAAA,CAAM,OAAA,CAAA,IAAN,CAAA,EAAe,IAAf,CAAP;AAClC,KAFD;;AAGA,IAAA,aAAA,CAAA,SAAA,CAAA,KAAA,GAAA,YAAA;AAAM,UAAA,IAAA,GAAA,EAAA;;WAAA,IAAA,EAAA,GAAA,C,EAAA,EAAA,GAAA,SAAA,CAAA,M,EAAA,EAAA,E,EAAiB;AAAjB,QAAA,IAAA,CAAA,EAAA,CAAA,GAAA,SAAA,CAAA,EAAA,CAAA;;;AACJ,UAAI,KAAK,KAAL,IAAc,QAAA,CAAA,QAAA,CAAS,KAA3B,EAAkC,OAAO,CAAC,KAAR,CAAa,KAAb,CAAA,OAAA,EAAO,OAAA,CAAA,QAAA,CAAA,CAAO,OAAA,CAAA,KAAP,CAAA,EAAiB,IAAjB,CAAP;AACnC,KAFD;;AAGF,WAAA,aAAA;AAAC,GAdD,EAAA;;AAAa,EAAA,OAAA,CAAA,aAAA,GAAA,aAAA","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Logger, LogLevel} from './logger';\n\nconst RESET = '\\x1b[0m';\nconst RED = '\\x1b[31m';\nconst YELLOW = '\\x1b[33m';\nconst BLUE = '\\x1b[36m';\n\nexport const DEBUG = `${BLUE}Debug:${RESET}`;\nexport const WARN = `${YELLOW}Warning:${RESET}`;\nexport const ERROR = `${RED}Error:${RESET}`;\n\n/**\n * A simple logger that outputs directly to the Console.\n *\n * The log messages can be filtered based on severity via the `logLevel`\n * constructor parameter.\n */\nexport class ConsoleLogger implements Logger {\n  constructor(public level: LogLevel) {}\n  debug(...args: string[]) {\n    if (this.level <= LogLevel.debug) console.debug(DEBUG, ...args);\n  }\n  info(...args: string[]) {\n    if (this.level <= LogLevel.info) console.info(...args);\n  }\n  warn(...args: string[]) {\n    if (this.level <= LogLevel.warn) console.warn(WARN, ...args);\n  }\n  error(...args: string[]) {\n    if (this.level <= LogLevel.error) console.error(ERROR, ...args);\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}