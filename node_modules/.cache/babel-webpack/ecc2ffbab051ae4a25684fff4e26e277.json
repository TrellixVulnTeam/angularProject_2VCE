{"ast":null,"code":"/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n(function (factory) {\n  if (typeof module === \"object\" && typeof module.exports === \"object\") {\n    var v = factory(require, exports);\n    if (v !== undefined) module.exports = v;\n  } else if (typeof define === \"function\" && define.amd) {\n    define(\"@angular/compiler/src/ml_parser/parser\", [\"require\", \"exports\", \"tslib\", \"@angular/compiler/src/parse_util\", \"@angular/compiler/src/ml_parser/ast\", \"@angular/compiler/src/ml_parser/lexer\", \"@angular/compiler/src/ml_parser/tags\"], factory);\n  }\n})(function (require, exports) {\n  \"use strict\";\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.Parser = exports.ParseTreeResult = exports.TreeError = void 0;\n\n  var tslib_1 = require(\"tslib\");\n\n  var parse_util_1 = require(\"@angular/compiler/src/parse_util\");\n\n  var html = require(\"@angular/compiler/src/ml_parser/ast\");\n\n  var lex = require(\"@angular/compiler/src/ml_parser/lexer\");\n\n  var tags_1 = require(\"@angular/compiler/src/ml_parser/tags\");\n\n  var TreeError =\n  /** @class */\n  function (_super) {\n    tslib_1.__extends(TreeError, _super);\n\n    function TreeError(elementName, span, msg) {\n      var _this = _super.call(this, span, msg) || this;\n\n      _this.elementName = elementName;\n      return _this;\n    }\n\n    TreeError.create = function (elementName, span, msg) {\n      return new TreeError(elementName, span, msg);\n    };\n\n    return TreeError;\n  }(parse_util_1.ParseError);\n\n  exports.TreeError = TreeError;\n\n  var ParseTreeResult =\n  /** @class */\n  function () {\n    function ParseTreeResult(rootNodes, errors) {\n      this.rootNodes = rootNodes;\n      this.errors = errors;\n    }\n\n    return ParseTreeResult;\n  }();\n\n  exports.ParseTreeResult = ParseTreeResult;\n\n  var Parser =\n  /** @class */\n  function () {\n    function Parser(getTagDefinition) {\n      this.getTagDefinition = getTagDefinition;\n    }\n\n    Parser.prototype.parse = function (source, url, options) {\n      var tokenizeResult = lex.tokenize(source, url, this.getTagDefinition, options);\n      var parser = new _TreeBuilder(tokenizeResult.tokens, this.getTagDefinition);\n      parser.build();\n      return new ParseTreeResult(parser.rootNodes, tokenizeResult.errors.concat(parser.errors));\n    };\n\n    return Parser;\n  }();\n\n  exports.Parser = Parser;\n\n  var _TreeBuilder =\n  /** @class */\n  function () {\n    function _TreeBuilder(tokens, getTagDefinition) {\n      this.tokens = tokens;\n      this.getTagDefinition = getTagDefinition;\n      this._index = -1;\n      this._elementStack = [];\n      this.rootNodes = [];\n      this.errors = [];\n\n      this._advance();\n    }\n\n    _TreeBuilder.prototype.build = function () {\n      while (this._peek.type !== lex.TokenType.EOF) {\n        if (this._peek.type === lex.TokenType.TAG_OPEN_START || this._peek.type === lex.TokenType.INCOMPLETE_TAG_OPEN) {\n          this._consumeStartTag(this._advance());\n        } else if (this._peek.type === lex.TokenType.TAG_CLOSE) {\n          this._consumeEndTag(this._advance());\n        } else if (this._peek.type === lex.TokenType.CDATA_START) {\n          this._closeVoidElement();\n\n          this._consumeCdata(this._advance());\n        } else if (this._peek.type === lex.TokenType.COMMENT_START) {\n          this._closeVoidElement();\n\n          this._consumeComment(this._advance());\n        } else if (this._peek.type === lex.TokenType.TEXT || this._peek.type === lex.TokenType.RAW_TEXT || this._peek.type === lex.TokenType.ESCAPABLE_RAW_TEXT) {\n          this._closeVoidElement();\n\n          this._consumeText(this._advance());\n        } else if (this._peek.type === lex.TokenType.EXPANSION_FORM_START) {\n          this._consumeExpansion(this._advance());\n        } else {\n          // Skip all other tokens...\n          this._advance();\n        }\n      }\n    };\n\n    _TreeBuilder.prototype._advance = function () {\n      var prev = this._peek;\n\n      if (this._index < this.tokens.length - 1) {\n        // Note: there is always an EOF token at the end\n        this._index++;\n      }\n\n      this._peek = this.tokens[this._index];\n      return prev;\n    };\n\n    _TreeBuilder.prototype._advanceIf = function (type) {\n      if (this._peek.type === type) {\n        return this._advance();\n      }\n\n      return null;\n    };\n\n    _TreeBuilder.prototype._consumeCdata = function (_startToken) {\n      this._consumeText(this._advance());\n\n      this._advanceIf(lex.TokenType.CDATA_END);\n    };\n\n    _TreeBuilder.prototype._consumeComment = function (token) {\n      var text = this._advanceIf(lex.TokenType.RAW_TEXT);\n\n      this._advanceIf(lex.TokenType.COMMENT_END);\n\n      var value = text != null ? text.parts[0].trim() : null;\n\n      this._addToParent(new html.Comment(value, token.sourceSpan));\n    };\n\n    _TreeBuilder.prototype._consumeExpansion = function (token) {\n      var switchValue = this._advance();\n\n      var type = this._advance();\n\n      var cases = []; // read =\n\n      while (this._peek.type === lex.TokenType.EXPANSION_CASE_VALUE) {\n        var expCase = this._parseExpansionCase();\n\n        if (!expCase) return; // error\n\n        cases.push(expCase);\n      } // read the final }\n\n\n      if (this._peek.type !== lex.TokenType.EXPANSION_FORM_END) {\n        this.errors.push(TreeError.create(null, this._peek.sourceSpan, \"Invalid ICU message. Missing '}'.\"));\n        return;\n      }\n\n      var sourceSpan = new parse_util_1.ParseSourceSpan(token.sourceSpan.start, this._peek.sourceSpan.end, token.sourceSpan.fullStart);\n\n      this._addToParent(new html.Expansion(switchValue.parts[0], type.parts[0], cases, sourceSpan, switchValue.sourceSpan));\n\n      this._advance();\n    };\n\n    _TreeBuilder.prototype._parseExpansionCase = function () {\n      var value = this._advance(); // read {\n\n\n      if (this._peek.type !== lex.TokenType.EXPANSION_CASE_EXP_START) {\n        this.errors.push(TreeError.create(null, this._peek.sourceSpan, \"Invalid ICU message. Missing '{'.\"));\n        return null;\n      } // read until }\n\n\n      var start = this._advance();\n\n      var exp = this._collectExpansionExpTokens(start);\n\n      if (!exp) return null;\n\n      var end = this._advance();\n\n      exp.push(new lex.Token(lex.TokenType.EOF, [], end.sourceSpan)); // parse everything in between { and }\n\n      var expansionCaseParser = new _TreeBuilder(exp, this.getTagDefinition);\n      expansionCaseParser.build();\n\n      if (expansionCaseParser.errors.length > 0) {\n        this.errors = this.errors.concat(expansionCaseParser.errors);\n        return null;\n      }\n\n      var sourceSpan = new parse_util_1.ParseSourceSpan(value.sourceSpan.start, end.sourceSpan.end, value.sourceSpan.fullStart);\n      var expSourceSpan = new parse_util_1.ParseSourceSpan(start.sourceSpan.start, end.sourceSpan.end, start.sourceSpan.fullStart);\n      return new html.ExpansionCase(value.parts[0], expansionCaseParser.rootNodes, sourceSpan, value.sourceSpan, expSourceSpan);\n    };\n\n    _TreeBuilder.prototype._collectExpansionExpTokens = function (start) {\n      var exp = [];\n      var expansionFormStack = [lex.TokenType.EXPANSION_CASE_EXP_START];\n\n      while (true) {\n        if (this._peek.type === lex.TokenType.EXPANSION_FORM_START || this._peek.type === lex.TokenType.EXPANSION_CASE_EXP_START) {\n          expansionFormStack.push(this._peek.type);\n        }\n\n        if (this._peek.type === lex.TokenType.EXPANSION_CASE_EXP_END) {\n          if (lastOnStack(expansionFormStack, lex.TokenType.EXPANSION_CASE_EXP_START)) {\n            expansionFormStack.pop();\n            if (expansionFormStack.length == 0) return exp;\n          } else {\n            this.errors.push(TreeError.create(null, start.sourceSpan, \"Invalid ICU message. Missing '}'.\"));\n            return null;\n          }\n        }\n\n        if (this._peek.type === lex.TokenType.EXPANSION_FORM_END) {\n          if (lastOnStack(expansionFormStack, lex.TokenType.EXPANSION_FORM_START)) {\n            expansionFormStack.pop();\n          } else {\n            this.errors.push(TreeError.create(null, start.sourceSpan, \"Invalid ICU message. Missing '}'.\"));\n            return null;\n          }\n        }\n\n        if (this._peek.type === lex.TokenType.EOF) {\n          this.errors.push(TreeError.create(null, start.sourceSpan, \"Invalid ICU message. Missing '}'.\"));\n          return null;\n        }\n\n        exp.push(this._advance());\n      }\n    };\n\n    _TreeBuilder.prototype._consumeText = function (token) {\n      var text = token.parts[0];\n\n      if (text.length > 0 && text[0] == '\\n') {\n        var parent_1 = this._getParentElement();\n\n        if (parent_1 != null && parent_1.children.length == 0 && this.getTagDefinition(parent_1.name).ignoreFirstLf) {\n          text = text.substring(1);\n        }\n      }\n\n      if (text.length > 0) {\n        this._addToParent(new html.Text(text, token.sourceSpan));\n      }\n    };\n\n    _TreeBuilder.prototype._closeVoidElement = function () {\n      var el = this._getParentElement();\n\n      if (el && this.getTagDefinition(el.name).isVoid) {\n        this._elementStack.pop();\n      }\n    };\n\n    _TreeBuilder.prototype._consumeStartTag = function (startTagToken) {\n      var _a = tslib_1.__read(startTagToken.parts, 2),\n          prefix = _a[0],\n          name = _a[1];\n\n      var attrs = [];\n\n      while (this._peek.type === lex.TokenType.ATTR_NAME) {\n        attrs.push(this._consumeAttr(this._advance()));\n      }\n\n      var fullName = this._getElementFullName(prefix, name, this._getParentElement());\n\n      var selfClosing = false; // Note: There could have been a tokenizer error\n      // so that we don't get a token for the end tag...\n\n      if (this._peek.type === lex.TokenType.TAG_OPEN_END_VOID) {\n        this._advance();\n\n        selfClosing = true;\n        var tagDef = this.getTagDefinition(fullName);\n\n        if (!(tagDef.canSelfClose || tags_1.getNsPrefix(fullName) !== null || tagDef.isVoid)) {\n          this.errors.push(TreeError.create(fullName, startTagToken.sourceSpan, \"Only void and foreign elements can be self closed \\\"\" + startTagToken.parts[1] + \"\\\"\"));\n        }\n      } else if (this._peek.type === lex.TokenType.TAG_OPEN_END) {\n        this._advance();\n\n        selfClosing = false;\n      }\n\n      var end = this._peek.sourceSpan.fullStart;\n      var span = new parse_util_1.ParseSourceSpan(startTagToken.sourceSpan.start, end, startTagToken.sourceSpan.fullStart); // Create a separate `startSpan` because `span` will be modified when there is an `end` span.\n\n      var startSpan = new parse_util_1.ParseSourceSpan(startTagToken.sourceSpan.start, end, startTagToken.sourceSpan.fullStart);\n      var el = new html.Element(fullName, attrs, [], span, startSpan, undefined);\n\n      this._pushElement(el);\n\n      if (selfClosing) {\n        // Elements that are self-closed have their `endSourceSpan` set to the full span, as the\n        // element start tag also represents the end tag.\n        this._popElement(fullName, span);\n      } else if (startTagToken.type === lex.TokenType.INCOMPLETE_TAG_OPEN) {\n        // We already know the opening tag is not complete, so it is unlikely it has a corresponding\n        // close tag. Let's optimistically parse it as a full element and emit an error.\n        this._popElement(fullName, null);\n\n        this.errors.push(TreeError.create(fullName, span, \"Opening tag \\\"\" + fullName + \"\\\" not terminated.\"));\n      }\n    };\n\n    _TreeBuilder.prototype._pushElement = function (el) {\n      var parentEl = this._getParentElement();\n\n      if (parentEl && this.getTagDefinition(parentEl.name).isClosedByChild(el.name)) {\n        this._elementStack.pop();\n      }\n\n      this._addToParent(el);\n\n      this._elementStack.push(el);\n    };\n\n    _TreeBuilder.prototype._consumeEndTag = function (endTagToken) {\n      var fullName = this._getElementFullName(endTagToken.parts[0], endTagToken.parts[1], this._getParentElement());\n\n      if (this.getTagDefinition(fullName).isVoid) {\n        this.errors.push(TreeError.create(fullName, endTagToken.sourceSpan, \"Void elements do not have end tags \\\"\" + endTagToken.parts[1] + \"\\\"\"));\n      } else if (!this._popElement(fullName, endTagToken.sourceSpan)) {\n        var errMsg = \"Unexpected closing tag \\\"\" + fullName + \"\\\". It may happen when the tag has already been closed by another tag. For more info see https://www.w3.org/TR/html5/syntax.html#closing-elements-that-have-implied-end-tags\";\n        this.errors.push(TreeError.create(fullName, endTagToken.sourceSpan, errMsg));\n      }\n    };\n    /**\n     * Closes the nearest element with the tag name `fullName` in the parse tree.\n     * `endSourceSpan` is the span of the closing tag, or null if the element does\n     * not have a closing tag (for example, this happens when an incomplete\n     * opening tag is recovered).\n     */\n\n\n    _TreeBuilder.prototype._popElement = function (fullName, endSourceSpan) {\n      for (var stackIndex = this._elementStack.length - 1; stackIndex >= 0; stackIndex--) {\n        var el = this._elementStack[stackIndex];\n\n        if (el.name == fullName) {\n          // Record the parse span with the element that is being closed. Any elements that are\n          // removed from the element stack at this point are closed implicitly, so they won't get\n          // an end source span (as there is no explicit closing element).\n          el.endSourceSpan = endSourceSpan;\n          el.sourceSpan.end = endSourceSpan !== null ? endSourceSpan.end : el.sourceSpan.end;\n\n          this._elementStack.splice(stackIndex, this._elementStack.length - stackIndex);\n\n          return true;\n        }\n\n        if (!this.getTagDefinition(el.name).closedByParent) {\n          return false;\n        }\n      }\n\n      return false;\n    };\n\n    _TreeBuilder.prototype._consumeAttr = function (attrName) {\n      var fullName = tags_1.mergeNsAndName(attrName.parts[0], attrName.parts[1]);\n      var end = attrName.sourceSpan.end;\n      var value = '';\n      var valueSpan = undefined;\n\n      if (this._peek.type === lex.TokenType.ATTR_QUOTE) {\n        this._advance();\n      }\n\n      if (this._peek.type === lex.TokenType.ATTR_VALUE) {\n        var valueToken = this._advance();\n\n        value = valueToken.parts[0];\n        end = valueToken.sourceSpan.end;\n        valueSpan = valueToken.sourceSpan;\n      }\n\n      if (this._peek.type === lex.TokenType.ATTR_QUOTE) {\n        var quoteToken = this._advance();\n\n        end = quoteToken.sourceSpan.end;\n      }\n\n      var keySpan = new parse_util_1.ParseSourceSpan(attrName.sourceSpan.start, attrName.sourceSpan.end);\n      return new html.Attribute(fullName, value, new parse_util_1.ParseSourceSpan(attrName.sourceSpan.start, end, attrName.sourceSpan.fullStart), keySpan, valueSpan);\n    };\n\n    _TreeBuilder.prototype._getParentElement = function () {\n      return this._elementStack.length > 0 ? this._elementStack[this._elementStack.length - 1] : null;\n    };\n\n    _TreeBuilder.prototype._addToParent = function (node) {\n      var parent = this._getParentElement();\n\n      if (parent != null) {\n        parent.children.push(node);\n      } else {\n        this.rootNodes.push(node);\n      }\n    };\n\n    _TreeBuilder.prototype._getElementFullName = function (prefix, localName, parentElement) {\n      if (prefix === '') {\n        prefix = this.getTagDefinition(localName).implicitNamespacePrefix || '';\n\n        if (prefix === '' && parentElement != null) {\n          var parentTagName = tags_1.splitNsName(parentElement.name)[1];\n          var parentTagDefinition = this.getTagDefinition(parentTagName);\n\n          if (!parentTagDefinition.preventNamespaceInheritance) {\n            prefix = tags_1.getNsPrefix(parentElement.name);\n          }\n        }\n      }\n\n      return tags_1.mergeNsAndName(prefix, localName);\n    };\n\n    return _TreeBuilder;\n  }();\n\n  function lastOnStack(stack, element) {\n    return stack.length > 0 && stack[stack.length - 1] === element;\n  }\n});","map":{"version":3,"sources":["../../../../../../../packages/compiler/src/ml_parser/parser.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ParseError, ParseSourceSpan} from '../parse_util';\n\nimport * as html from './ast';\nimport * as lex from './lexer';\nimport {getNsPrefix, mergeNsAndName, splitNsName, TagDefinition} from './tags';\n\nexport class TreeError extends ParseError {\n  static create(elementName: string|null, span: ParseSourceSpan, msg: string): TreeError {\n    return new TreeError(elementName, span, msg);\n  }\n\n  constructor(public elementName: string|null, span: ParseSourceSpan, msg: string) {\n    super(span, msg);\n  }\n}\n\nexport class ParseTreeResult {\n  constructor(public rootNodes: html.Node[], public errors: ParseError[]) {}\n}\n\nexport class Parser {\n  constructor(public getTagDefinition: (tagName: string) => TagDefinition) {}\n\n  parse(source: string, url: string, options?: lex.TokenizeOptions): ParseTreeResult {\n    const tokenizeResult = lex.tokenize(source, url, this.getTagDefinition, options);\n    const parser = new _TreeBuilder(tokenizeResult.tokens, this.getTagDefinition);\n    parser.build();\n    return new ParseTreeResult(\n        parser.rootNodes,\n        (tokenizeResult.errors as ParseError[]).concat(parser.errors),\n    );\n  }\n}\n\nclass _TreeBuilder {\n  private _index: number = -1;\n  // `_peek` will be initialized by the call to `advance()` in the constructor.\n  private _peek!: lex.Token;\n  private _elementStack: html.Element[] = [];\n\n  rootNodes: html.Node[] = [];\n  errors: TreeError[] = [];\n\n  constructor(\n      private tokens: lex.Token[], private getTagDefinition: (tagName: string) => TagDefinition) {\n    this._advance();\n  }\n\n  build(): void {\n    while (this._peek.type !== lex.TokenType.EOF) {\n      if (this._peek.type === lex.TokenType.TAG_OPEN_START ||\n          this._peek.type === lex.TokenType.INCOMPLETE_TAG_OPEN) {\n        this._consumeStartTag(this._advance());\n      } else if (this._peek.type === lex.TokenType.TAG_CLOSE) {\n        this._consumeEndTag(this._advance());\n      } else if (this._peek.type === lex.TokenType.CDATA_START) {\n        this._closeVoidElement();\n        this._consumeCdata(this._advance());\n      } else if (this._peek.type === lex.TokenType.COMMENT_START) {\n        this._closeVoidElement();\n        this._consumeComment(this._advance());\n      } else if (\n          this._peek.type === lex.TokenType.TEXT || this._peek.type === lex.TokenType.RAW_TEXT ||\n          this._peek.type === lex.TokenType.ESCAPABLE_RAW_TEXT) {\n        this._closeVoidElement();\n        this._consumeText(this._advance());\n      } else if (this._peek.type === lex.TokenType.EXPANSION_FORM_START) {\n        this._consumeExpansion(this._advance());\n      } else {\n        // Skip all other tokens...\n        this._advance();\n      }\n    }\n  }\n\n  private _advance(): lex.Token {\n    const prev = this._peek;\n    if (this._index < this.tokens.length - 1) {\n      // Note: there is always an EOF token at the end\n      this._index++;\n    }\n    this._peek = this.tokens[this._index];\n    return prev;\n  }\n\n  private _advanceIf(type: lex.TokenType): lex.Token|null {\n    if (this._peek.type === type) {\n      return this._advance();\n    }\n    return null;\n  }\n\n  private _consumeCdata(_startToken: lex.Token) {\n    this._consumeText(this._advance());\n    this._advanceIf(lex.TokenType.CDATA_END);\n  }\n\n  private _consumeComment(token: lex.Token) {\n    const text = this._advanceIf(lex.TokenType.RAW_TEXT);\n    this._advanceIf(lex.TokenType.COMMENT_END);\n    const value = text != null ? text.parts[0].trim() : null;\n    this._addToParent(new html.Comment(value, token.sourceSpan));\n  }\n\n  private _consumeExpansion(token: lex.Token) {\n    const switchValue = this._advance();\n\n    const type = this._advance();\n    const cases: html.ExpansionCase[] = [];\n\n    // read =\n    while (this._peek.type === lex.TokenType.EXPANSION_CASE_VALUE) {\n      const expCase = this._parseExpansionCase();\n      if (!expCase) return;  // error\n      cases.push(expCase);\n    }\n\n    // read the final }\n    if (this._peek.type !== lex.TokenType.EXPANSION_FORM_END) {\n      this.errors.push(\n          TreeError.create(null, this._peek.sourceSpan, `Invalid ICU message. Missing '}'.`));\n      return;\n    }\n    const sourceSpan = new ParseSourceSpan(\n        token.sourceSpan.start, this._peek.sourceSpan.end, token.sourceSpan.fullStart);\n    this._addToParent(new html.Expansion(\n        switchValue.parts[0], type.parts[0], cases, sourceSpan, switchValue.sourceSpan));\n\n    this._advance();\n  }\n\n  private _parseExpansionCase(): html.ExpansionCase|null {\n    const value = this._advance();\n\n    // read {\n    if (this._peek.type !== lex.TokenType.EXPANSION_CASE_EXP_START) {\n      this.errors.push(\n          TreeError.create(null, this._peek.sourceSpan, `Invalid ICU message. Missing '{'.`));\n      return null;\n    }\n\n    // read until }\n    const start = this._advance();\n\n    const exp = this._collectExpansionExpTokens(start);\n    if (!exp) return null;\n\n    const end = this._advance();\n    exp.push(new lex.Token(lex.TokenType.EOF, [], end.sourceSpan));\n\n    // parse everything in between { and }\n    const expansionCaseParser = new _TreeBuilder(exp, this.getTagDefinition);\n    expansionCaseParser.build();\n    if (expansionCaseParser.errors.length > 0) {\n      this.errors = this.errors.concat(expansionCaseParser.errors);\n      return null;\n    }\n\n    const sourceSpan =\n        new ParseSourceSpan(value.sourceSpan.start, end.sourceSpan.end, value.sourceSpan.fullStart);\n    const expSourceSpan =\n        new ParseSourceSpan(start.sourceSpan.start, end.sourceSpan.end, start.sourceSpan.fullStart);\n    return new html.ExpansionCase(\n        value.parts[0], expansionCaseParser.rootNodes, sourceSpan, value.sourceSpan, expSourceSpan);\n  }\n\n  private _collectExpansionExpTokens(start: lex.Token): lex.Token[]|null {\n    const exp: lex.Token[] = [];\n    const expansionFormStack = [lex.TokenType.EXPANSION_CASE_EXP_START];\n\n    while (true) {\n      if (this._peek.type === lex.TokenType.EXPANSION_FORM_START ||\n          this._peek.type === lex.TokenType.EXPANSION_CASE_EXP_START) {\n        expansionFormStack.push(this._peek.type);\n      }\n\n      if (this._peek.type === lex.TokenType.EXPANSION_CASE_EXP_END) {\n        if (lastOnStack(expansionFormStack, lex.TokenType.EXPANSION_CASE_EXP_START)) {\n          expansionFormStack.pop();\n          if (expansionFormStack.length == 0) return exp;\n\n        } else {\n          this.errors.push(\n              TreeError.create(null, start.sourceSpan, `Invalid ICU message. Missing '}'.`));\n          return null;\n        }\n      }\n\n      if (this._peek.type === lex.TokenType.EXPANSION_FORM_END) {\n        if (lastOnStack(expansionFormStack, lex.TokenType.EXPANSION_FORM_START)) {\n          expansionFormStack.pop();\n        } else {\n          this.errors.push(\n              TreeError.create(null, start.sourceSpan, `Invalid ICU message. Missing '}'.`));\n          return null;\n        }\n      }\n\n      if (this._peek.type === lex.TokenType.EOF) {\n        this.errors.push(\n            TreeError.create(null, start.sourceSpan, `Invalid ICU message. Missing '}'.`));\n        return null;\n      }\n\n      exp.push(this._advance());\n    }\n  }\n\n  private _consumeText(token: lex.Token) {\n    let text = token.parts[0];\n    if (text.length > 0 && text[0] == '\\n') {\n      const parent = this._getParentElement();\n      if (parent != null && parent.children.length == 0 &&\n          this.getTagDefinition(parent.name).ignoreFirstLf) {\n        text = text.substring(1);\n      }\n    }\n\n    if (text.length > 0) {\n      this._addToParent(new html.Text(text, token.sourceSpan));\n    }\n  }\n\n  private _closeVoidElement(): void {\n    const el = this._getParentElement();\n    if (el && this.getTagDefinition(el.name).isVoid) {\n      this._elementStack.pop();\n    }\n  }\n\n  private _consumeStartTag(startTagToken: lex.Token) {\n    const [prefix, name] = startTagToken.parts;\n    const attrs: html.Attribute[] = [];\n    while (this._peek.type === lex.TokenType.ATTR_NAME) {\n      attrs.push(this._consumeAttr(this._advance()));\n    }\n    const fullName = this._getElementFullName(prefix, name, this._getParentElement());\n    let selfClosing = false;\n    // Note: There could have been a tokenizer error\n    // so that we don't get a token for the end tag...\n    if (this._peek.type === lex.TokenType.TAG_OPEN_END_VOID) {\n      this._advance();\n      selfClosing = true;\n      const tagDef = this.getTagDefinition(fullName);\n      if (!(tagDef.canSelfClose || getNsPrefix(fullName) !== null || tagDef.isVoid)) {\n        this.errors.push(TreeError.create(\n            fullName, startTagToken.sourceSpan,\n            `Only void and foreign elements can be self closed \"${startTagToken.parts[1]}\"`));\n      }\n    } else if (this._peek.type === lex.TokenType.TAG_OPEN_END) {\n      this._advance();\n      selfClosing = false;\n    }\n    const end = this._peek.sourceSpan.fullStart;\n    const span = new ParseSourceSpan(\n        startTagToken.sourceSpan.start, end, startTagToken.sourceSpan.fullStart);\n    // Create a separate `startSpan` because `span` will be modified when there is an `end` span.\n    const startSpan = new ParseSourceSpan(\n        startTagToken.sourceSpan.start, end, startTagToken.sourceSpan.fullStart);\n    const el = new html.Element(fullName, attrs, [], span, startSpan, undefined);\n    this._pushElement(el);\n    if (selfClosing) {\n      // Elements that are self-closed have their `endSourceSpan` set to the full span, as the\n      // element start tag also represents the end tag.\n      this._popElement(fullName, span);\n    } else if (startTagToken.type === lex.TokenType.INCOMPLETE_TAG_OPEN) {\n      // We already know the opening tag is not complete, so it is unlikely it has a corresponding\n      // close tag. Let's optimistically parse it as a full element and emit an error.\n      this._popElement(fullName, null);\n      this.errors.push(\n          TreeError.create(fullName, span, `Opening tag \"${fullName}\" not terminated.`));\n    }\n  }\n\n  private _pushElement(el: html.Element) {\n    const parentEl = this._getParentElement();\n\n    if (parentEl && this.getTagDefinition(parentEl.name).isClosedByChild(el.name)) {\n      this._elementStack.pop();\n    }\n\n    this._addToParent(el);\n    this._elementStack.push(el);\n  }\n\n  private _consumeEndTag(endTagToken: lex.Token) {\n    const fullName = this._getElementFullName(\n        endTagToken.parts[0], endTagToken.parts[1], this._getParentElement());\n\n    if (this.getTagDefinition(fullName).isVoid) {\n      this.errors.push(TreeError.create(\n          fullName, endTagToken.sourceSpan,\n          `Void elements do not have end tags \"${endTagToken.parts[1]}\"`));\n    } else if (!this._popElement(fullName, endTagToken.sourceSpan)) {\n      const errMsg = `Unexpected closing tag \"${\n          fullName}\". It may happen when the tag has already been closed by another tag. For more info see https://www.w3.org/TR/html5/syntax.html#closing-elements-that-have-implied-end-tags`;\n      this.errors.push(TreeError.create(fullName, endTagToken.sourceSpan, errMsg));\n    }\n  }\n\n  /**\n   * Closes the nearest element with the tag name `fullName` in the parse tree.\n   * `endSourceSpan` is the span of the closing tag, or null if the element does\n   * not have a closing tag (for example, this happens when an incomplete\n   * opening tag is recovered).\n   */\n  private _popElement(fullName: string, endSourceSpan: ParseSourceSpan|null): boolean {\n    for (let stackIndex = this._elementStack.length - 1; stackIndex >= 0; stackIndex--) {\n      const el = this._elementStack[stackIndex];\n      if (el.name == fullName) {\n        // Record the parse span with the element that is being closed. Any elements that are\n        // removed from the element stack at this point are closed implicitly, so they won't get\n        // an end source span (as there is no explicit closing element).\n        el.endSourceSpan = endSourceSpan;\n        el.sourceSpan.end = endSourceSpan !== null ? endSourceSpan.end : el.sourceSpan.end;\n\n        this._elementStack.splice(stackIndex, this._elementStack.length - stackIndex);\n        return true;\n      }\n\n      if (!this.getTagDefinition(el.name).closedByParent) {\n        return false;\n      }\n    }\n    return false;\n  }\n\n  private _consumeAttr(attrName: lex.Token): html.Attribute {\n    const fullName = mergeNsAndName(attrName.parts[0], attrName.parts[1]);\n    let end = attrName.sourceSpan.end;\n    let value = '';\n    let valueSpan: ParseSourceSpan = undefined!;\n    if (this._peek.type === lex.TokenType.ATTR_QUOTE) {\n      this._advance();\n    }\n    if (this._peek.type === lex.TokenType.ATTR_VALUE) {\n      const valueToken = this._advance();\n      value = valueToken.parts[0];\n      end = valueToken.sourceSpan.end;\n      valueSpan = valueToken.sourceSpan;\n    }\n    if (this._peek.type === lex.TokenType.ATTR_QUOTE) {\n      const quoteToken = this._advance();\n      end = quoteToken.sourceSpan.end;\n    }\n    const keySpan = new ParseSourceSpan(attrName.sourceSpan.start, attrName.sourceSpan.end);\n    return new html.Attribute(\n        fullName, value,\n        new ParseSourceSpan(attrName.sourceSpan.start, end, attrName.sourceSpan.fullStart), keySpan,\n        valueSpan);\n  }\n\n  private _getParentElement(): html.Element|null {\n    return this._elementStack.length > 0 ? this._elementStack[this._elementStack.length - 1] : null;\n  }\n\n  private _addToParent(node: html.Node) {\n    const parent = this._getParentElement();\n    if (parent != null) {\n      parent.children.push(node);\n    } else {\n      this.rootNodes.push(node);\n    }\n  }\n\n  private _getElementFullName(prefix: string, localName: string, parentElement: html.Element|null):\n      string {\n    if (prefix === '') {\n      prefix = this.getTagDefinition(localName).implicitNamespacePrefix || '';\n      if (prefix === '' && parentElement != null) {\n        const parentTagName = splitNsName(parentElement.name)[1];\n        const parentTagDefinition = this.getTagDefinition(parentTagName);\n        if (!parentTagDefinition.preventNamespaceInheritance) {\n          prefix = getNsPrefix(parentElement.name);\n        }\n      }\n    }\n\n    return mergeNsAndName(prefix, localName);\n  }\n}\n\nfunction lastOnStack(stack: any[], element: any): boolean {\n  return stack.length > 0 && stack[stack.length - 1] === element;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}