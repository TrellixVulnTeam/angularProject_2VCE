{"ast":null,"code":"\"use strict\";\n\nvar _toConsumableArray = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/toConsumableArray\");\n\nvar _inherits = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar _slicedToArray = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nvar _regeneratorRuntime = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _createForOfIteratorHelper = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _objectSpread = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/objectSpread2\");\n\nvar _classCallCheck = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AngularCompilerPlugin = void 0;\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nvar core_1 = require(\"@angular-devkit/core\");\n\nvar node_1 = require(\"@angular-devkit/core/node\");\n\nvar compiler_cli_1 = require(\"@angular/compiler-cli\");\n\nvar tooling_1 = require(\"@angular/compiler-cli/src/tooling\");\n\nvar child_process_1 = require(\"child_process\");\n\nvar fs = require(\"fs\");\n\nvar path = require(\"path\");\n\nvar ts = require(\"typescript\");\n\nvar benchmark_1 = require(\"./benchmark\");\n\nvar compiler_host_1 = require(\"./compiler_host\");\n\nvar diagnostics_1 = require(\"./diagnostics\");\n\nvar entry_resolver_1 = require(\"./entry_resolver\");\n\nvar interfaces_1 = require(\"./interfaces\");\n\nvar lazy_routes_1 = require(\"./lazy_routes\");\n\nvar ngcc_processor_1 = require(\"./ngcc_processor\");\n\nvar paths_plugin_1 = require(\"./paths-plugin\");\n\nvar resource_loader_1 = require(\"./resource_loader\");\n\nvar transformers_1 = require(\"./transformers\");\n\nvar ast_helpers_1 = require(\"./transformers/ast_helpers\");\n\nvar remove_ivy_jit_support_calls_1 = require(\"./transformers/remove-ivy-jit-support-calls\");\n\nvar type_checker_1 = require(\"./type_checker\");\n\nvar type_checker_messages_1 = require(\"./type_checker_messages\");\n\nvar utils_1 = require(\"./utils\");\n\nvar virtual_file_system_decorator_1 = require(\"./virtual_file_system_decorator\");\n\nvar webpack_diagnostics_1 = require(\"./webpack-diagnostics\");\n\nvar webpack_input_host_1 = require(\"./webpack-input-host\");\n\nvar webpack_version_1 = require(\"./webpack-version\");\n\nvar AngularCompilerPlugin = /*#__PURE__*/function () {\n  function AngularCompilerPlugin(options) {\n    _classCallCheck(this, AngularCompilerPlugin);\n\n    this._discoverLazyRoutes = true;\n    this._useFactories = false; // Contains `moduleImportPath#exportName` => `fullModulePath`.\n\n    this._lazyRoutes = {};\n    this._entryModule = null;\n    this._transformers = [];\n    this._platformTransformers = null;\n    this._JitMode = false;\n    this._emitSkipped = true;\n    this._unusedFiles = new Set();\n    this._typeDeps = new Set();\n    this._changedFileExtensions = new Set(['ts', 'tsx', 'html', 'css', 'js', 'json']);\n    this._nodeModulesRegExp = /[\\\\\\/]node_modules[\\\\\\/]/; // Webpack plugin.\n\n    this._firstRun = true;\n    this._donePromise = null;\n    this._normalizedLocale = null;\n    this._warnings = [];\n    this._errors = []; // TypeChecker process.\n\n    this._forkTypeChecker = true;\n    this._typeCheckerProcess = null;\n    this._forkedTypeCheckerInitialized = false;\n    this._mainFields = [];\n    this._options = Object.assign({}, options);\n    this._logger = options.logger || node_1.createConsoleLogger();\n\n    this._setupOptions(this._options);\n  }\n\n  _createClass(AngularCompilerPlugin, [{\n    key: \"options\",\n    get: function get() {\n      return this._options;\n    }\n  }, {\n    key: \"done\",\n    get: function get() {\n      return this._donePromise;\n    }\n  }, {\n    key: \"entryModule\",\n    get: function get() {\n      if (!this._entryModule) {\n        return null;\n      }\n\n      var splitted = this._entryModule.split(/(#[a-zA-Z_]([\\w]+))$/);\n\n      var path = splitted[0];\n      var className = !!splitted[1] ? splitted[1].substring(1) : 'default';\n      return {\n        path: path,\n        className: className\n      };\n    }\n  }, {\n    key: \"typeChecker\",\n    get: function get() {\n      var tsProgram = this._getTsProgram();\n\n      return tsProgram ? tsProgram.getTypeChecker() : null;\n    }\n  }, {\n    key: \"_setupOptions\",\n    value: function _setupOptions(options) {\n      benchmark_1.time('AngularCompilerPlugin._setupOptions'); // Fill in the missing options.\n\n      if (!options.hasOwnProperty('tsConfigPath')) {\n        throw new Error('Must specify \"tsConfigPath\" in the configuration of @ngtools/webpack.');\n      } // TS represents paths internally with '/' and expects the tsconfig path to be in this format\n\n\n      this._tsConfigPath = utils_1.forwardSlashPath(options.tsConfigPath); // Check the base path.\n\n      var maybeBasePath = path.resolve(process.cwd(), this._tsConfigPath);\n      var basePath = maybeBasePath;\n\n      if (fs.statSync(maybeBasePath).isFile()) {\n        basePath = path.dirname(basePath);\n      }\n\n      if (options.basePath !== undefined) {\n        basePath = path.resolve(process.cwd(), options.basePath);\n      } // Parse the tsconfig contents.\n\n\n      var config = compiler_cli_1.readConfiguration(this._tsConfigPath);\n\n      if (config.errors && config.errors.length) {\n        throw new Error(compiler_cli_1.formatDiagnostics(config.errors));\n      }\n\n      this._rootNames = config.rootNames;\n      this._compilerOptions = _objectSpread(_objectSpread({}, config.options), options.compilerOptions);\n      this._basePath = config.options.basePath || basePath || ''; // Overwrite outDir so we can find generated files next to their .ts origin in compilerHost.\n\n      this._compilerOptions.outDir = '';\n      this._compilerOptions.suppressOutputPathCheck = true; // Default plugin sourceMap to compiler options setting.\n\n      if (!options.hasOwnProperty('sourceMap')) {\n        options.sourceMap = this._compilerOptions.sourceMap || false;\n      } // Force the right sourcemap options.\n\n\n      if (options.sourceMap) {\n        this._compilerOptions.sourceMap = true;\n        this._compilerOptions.inlineSources = true;\n        this._compilerOptions.inlineSourceMap = false;\n        this._compilerOptions.mapRoot = undefined; // We will set the source to the full path of the file in the loader, so we don't\n        // need sourceRoot here.\n\n        this._compilerOptions.sourceRoot = undefined;\n      } else {\n        this._compilerOptions.sourceMap = false;\n        this._compilerOptions.sourceRoot = undefined;\n        this._compilerOptions.inlineSources = undefined;\n        this._compilerOptions.inlineSourceMap = undefined;\n        this._compilerOptions.mapRoot = undefined;\n        this._compilerOptions.sourceRoot = undefined;\n      } // We want to allow emitting with errors so that imports can be added\n      // to the webpack dependency tree and rebuilds triggered by file edits.\n\n\n      this._compilerOptions.noEmitOnError = false; // Set JIT (no code generation) or AOT mode.\n\n      if (options.skipCodeGeneration !== undefined) {\n        this._JitMode = options.skipCodeGeneration;\n      } // Process i18n options.\n\n\n      if (options.i18nInFile !== undefined) {\n        this._compilerOptions.i18nInFile = options.i18nInFile;\n      }\n\n      if (options.i18nInFormat !== undefined) {\n        this._compilerOptions.i18nInFormat = options.i18nInFormat;\n      }\n\n      if (options.i18nOutFile !== undefined) {\n        this._compilerOptions.i18nOutFile = options.i18nOutFile;\n      }\n\n      if (options.i18nOutFormat !== undefined) {\n        this._compilerOptions.i18nOutFormat = options.i18nOutFormat;\n      }\n\n      if (options.locale !== undefined) {\n        this._compilerOptions.i18nInLocale = options.locale;\n        this._compilerOptions.i18nOutLocale = options.locale;\n        this._normalizedLocale = this._validateLocale(options.locale);\n      }\n\n      if (options.missingTranslation !== undefined) {\n        this._compilerOptions.i18nInMissingTranslations = options.missingTranslation;\n      } // For performance, disable AOT decorator downleveling transformer for applications in the CLI.\n      // The transformer is not needed for VE or Ivy in this plugin since Angular decorators are removed.\n      // While the transformer would make no changes, it would still need to walk each source file AST.\n\n\n      this._compilerOptions.annotationsAs = 'decorators'; // Process forked type checker options.\n\n      if (options.forkTypeChecker !== undefined) {\n        this._forkTypeChecker = options.forkTypeChecker;\n      } // this._forkTypeChecker = false;\n      // Add custom platform transformers.\n\n\n      if (options.platformTransformers !== undefined) {\n        this._platformTransformers = options.platformTransformers;\n      } // Determine if lazy route discovery via Compiler CLI private API should be attempted.\n      // The default is to discover routes, but it can be overriden.\n\n\n      if (options.discoverLazyRoutes !== undefined) {\n        this._discoverLazyRoutes = options.discoverLazyRoutes;\n      }\n\n      if (!this.options.suppressZoneJsIncompatibilityWarning && this._compilerOptions.target !== undefined && this._compilerOptions.target >= ts.ScriptTarget.ES2017) {\n        this._warnings.push('Zone.js does not support native async/await in ES2017+.\\n' + 'These blocks are not intercepted by zone.js and will not triggering change detection.\\n' + 'See: https://github.com/angular/zone.js/pull/1140 for more information.');\n      }\n\n      if (this._discoverLazyRoutes === false && this.options.additionalLazyModuleResources && this.options.additionalLazyModuleResources.length > 0) {\n        this._warnings.push(\"Lazy route discovery is disabled but additional Lazy Module Resources were\" + \" provided. These will be ignored.\");\n      }\n\n      if (this._compilerOptions.strictMetadataEmit) {\n        this._warnings.push(\"Using Angular compiler option 'strictMetadataEmit' for applications might cause undefined behavior.\");\n      }\n\n      if (this._discoverLazyRoutes === false && this.options.additionalLazyModules && Object.keys(this.options.additionalLazyModules).length > 0) {\n        this._warnings.push(\"Lazy route discovery is disabled but additional lazy modules were provided.\" + \"These will be ignored.\");\n      }\n\n      if (!this._JitMode && !this._compilerOptions.enableIvy) {\n        // Only attempt to use factories when AOT and not Ivy.\n        this._useFactories = true;\n      } // Default ContextElementDependency to the one we can import from here.\n      // Failing to use the right ContextElementDependency will throw the error below:\n      // \"No module factory available for dependency type: ContextElementDependency\"\n      // Hoisting together with peer dependencies can make it so the imported\n      // ContextElementDependency does not come from the same Webpack instance that is used\n      // in the compilation. In that case, we can pass the right one as an option to the plugin.\n\n\n      this._contextElementDependencyConstructor = options.contextElementDependencyConstructor || require('webpack/lib/dependencies/ContextElementDependency'); // Use entryModule if available in options, otherwise resolve it from mainPath after program\n      // creation.\n\n      if (this._options.entryModule) {\n        this._entryModule = this._options.entryModule;\n      } else if (this._compilerOptions.entryModule) {\n        this._entryModule = path.resolve(this._basePath, this._compilerOptions.entryModule); // temporary cast for type issue\n      } // Set platform.\n\n\n      this._platform = options.platform || interfaces_1.PLATFORM.Browser; // Make transformers.\n\n      this._makeTransformers();\n\n      benchmark_1.timeEnd('AngularCompilerPlugin._setupOptions');\n    }\n  }, {\n    key: \"_getTsProgram\",\n    value: function _getTsProgram() {\n      if (!this._program) {\n        return undefined;\n      }\n\n      return this._JitMode ? this._program : this._program.getTsProgram();\n    }\n  }, {\n    key: \"updateChangedFileExtensions\",\n    value: function updateChangedFileExtensions(extension) {\n      if (extension) {\n        this._changedFileExtensions.add(extension);\n      }\n    }\n  }, {\n    key: \"_getChangedCompilationFiles\",\n    value: function _getChangedCompilationFiles() {\n      var _this = this;\n\n      return this._compilerHost.getChangedFilePaths().filter(function (k) {\n        var _iterator = _createForOfIteratorHelper(_this._changedFileExtensions),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var ext = _step.value;\n\n            if (k.endsWith(ext)) {\n              return true;\n            }\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n\n        return false;\n      });\n    }\n  }, {\n    key: \"_createOrUpdateProgram\",\n    value: function () {\n      var _createOrUpdateProgram2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var _this2 = this;\n\n        var config, oldTsProgram, newTsProgram, newProgramSourceFiles, localDtsFiles, _iterator2, _step2, dts, oldFiles, newProgramFiles, _iterator3, _step3, dependency, _iterator4, _step4, fileName, denormalizedFileName;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                // Get the root files from the ts config.\n                // When a new root name (like a lazy route) is added, it won't be available from\n                // following imports on the existing files, so we need to get the new list of root files.\n                config = compiler_cli_1.readConfiguration(this._tsConfigPath);\n                this._rootNames = config.rootNames; // Update the forked type checker with all changed compilation files.\n                // This includes templates, that also need to be reloaded on the type checker.\n\n                if (this._forkTypeChecker && this._typeCheckerProcess && !this._firstRun) {\n                  this._updateForkedTypeChecker(this._rootNames, this._getChangedCompilationFiles());\n                }\n\n                oldTsProgram = this._getTsProgram();\n\n                if (!this._JitMode) {\n                  _context.next = 10;\n                  break;\n                }\n\n                // Create the TypeScript program.\n                benchmark_1.time('AngularCompilerPlugin._createOrUpdateProgram.ts.createProgram');\n                this._program = ts.createProgram(this._rootNames, this._compilerOptions, this._compilerHost, oldTsProgram);\n                benchmark_1.timeEnd('AngularCompilerPlugin._createOrUpdateProgram.ts.createProgram');\n                _context.next = 17;\n                break;\n\n              case 10:\n                benchmark_1.time('AngularCompilerPlugin._createOrUpdateProgram.ng.createProgram'); // Create the Angular program.\n\n                this._program = compiler_cli_1.createProgram({\n                  rootNames: this._rootNames,\n                  options: this._compilerOptions,\n                  host: this._compilerHost,\n                  oldProgram: this._program\n                });\n                benchmark_1.timeEnd('AngularCompilerPlugin._createOrUpdateProgram.ng.createProgram');\n                benchmark_1.time('AngularCompilerPlugin._createOrUpdateProgram.ng.loadNgStructureAsync');\n                _context.next = 16;\n                return this._program.loadNgStructureAsync();\n\n              case 16:\n                benchmark_1.timeEnd('AngularCompilerPlugin._createOrUpdateProgram.ng.loadNgStructureAsync');\n\n              case 17:\n                newTsProgram = this._getTsProgram();\n                newProgramSourceFiles = newTsProgram === null || newTsProgram === void 0 ? void 0 : newTsProgram.getSourceFiles();\n                localDtsFiles = new Set(newProgramSourceFiles === null || newProgramSourceFiles === void 0 ? void 0 : newProgramSourceFiles.filter(function (f) {\n                  return f.isDeclarationFile && !_this2._nodeModulesRegExp.test(f.fileName);\n                }).map(function (f) {\n                  return _this2._compilerHost.denormalizePath(f.fileName);\n                }));\n\n                if (oldTsProgram) {\n                  _context.next = 25;\n                  break;\n                }\n\n                // Add all non node package dts files as depedencies when not having an old program\n                _iterator2 = _createForOfIteratorHelper(localDtsFiles);\n\n                try {\n                  for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n                    dts = _step2.value;\n\n                    this._typeDeps.add(dts);\n                  }\n                } catch (err) {\n                  _iterator2.e(err);\n                } finally {\n                  _iterator2.f();\n                }\n\n                _context.next = 50;\n                break;\n\n              case 25:\n                if (!(oldTsProgram && newProgramSourceFiles)) {\n                  _context.next = 50;\n                  break;\n                }\n\n                // The invalidation should only happen if we have an old program\n                // as otherwise we will invalidate all the sourcefiles.\n                oldFiles = new Set(oldTsProgram.getSourceFiles().map(function (sf) {\n                  return sf.fileName;\n                }));\n                newProgramFiles = new Set(newProgramSourceFiles.map(function (sf) {\n                  return sf.fileName;\n                }));\n                _iterator3 = _createForOfIteratorHelper(this._typeDeps);\n\n                try {\n                  for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n                    dependency = _step3.value;\n\n                    // Remove type dependencies of no longer existing files\n                    if (!newProgramFiles.has(utils_1.forwardSlashPath(dependency))) {\n                      this._typeDeps.delete(dependency);\n                    }\n                  }\n                } catch (err) {\n                  _iterator3.e(err);\n                } finally {\n                  _iterator3.f();\n                }\n\n                _iterator4 = _createForOfIteratorHelper(newProgramFiles);\n                _context.prev = 31;\n\n                _iterator4.s();\n\n              case 33:\n                if ((_step4 = _iterator4.n()).done) {\n                  _context.next = 42;\n                  break;\n                }\n\n                fileName = _step4.value;\n\n                if (!oldFiles.has(fileName)) {\n                  _context.next = 37;\n                  break;\n                }\n\n                return _context.abrupt(\"continue\", 40);\n\n              case 37:\n                this._compilerHost.invalidate(fileName);\n\n                denormalizedFileName = this._compilerHost.denormalizePath(fileName);\n\n                if (localDtsFiles.has(denormalizedFileName)) {\n                  // Add new dts file as a type depedency\n                  this._typeDeps.add(denormalizedFileName);\n                }\n\n              case 40:\n                _context.next = 33;\n                break;\n\n              case 42:\n                _context.next = 47;\n                break;\n\n              case 44:\n                _context.prev = 44;\n                _context.t0 = _context[\"catch\"](31);\n\n                _iterator4.e(_context.t0);\n\n              case 47:\n                _context.prev = 47;\n\n                _iterator4.f();\n\n                return _context.finish(47);\n\n              case 50:\n                // If there's still no entryModule try to resolve from mainPath.\n                if (!this._entryModule && this._mainPath) {\n                  benchmark_1.time('AngularCompilerPlugin._make.resolveEntryModuleFromMain');\n                  this._entryModule = entry_resolver_1.resolveEntryModuleFromMain(this._mainPath, this._compilerHost, this._getTsProgram());\n\n                  if (this._discoverLazyRoutes && !this.entryModule && !this._compilerOptions.enableIvy) {\n                    this._warnings.push('Lazy routes discovery is not enabled. ' + 'Because there is neither an entryModule nor a ' + 'statically analyzable bootstrap code in the main file.');\n                  }\n\n                  benchmark_1.timeEnd('AngularCompilerPlugin._make.resolveEntryModuleFromMain');\n                }\n\n              case 51:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[31, 44, 47, 50]]);\n      }));\n\n      function _createOrUpdateProgram() {\n        return _createOrUpdateProgram2.apply(this, arguments);\n      }\n\n      return _createOrUpdateProgram;\n    }()\n  }, {\n    key: \"_findLazyRoutesInAst\",\n    value: function _findLazyRoutesInAst(changedFilePaths) {\n      benchmark_1.time('AngularCompilerPlugin._findLazyRoutesInAst');\n      var result = {};\n\n      var _iterator5 = _createForOfIteratorHelper(changedFilePaths),\n          _step5;\n\n      try {\n        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n          var filePath = _step5.value;\n          var fileLazyRoutes = lazy_routes_1.findLazyRoutes(filePath, this._compilerHost, undefined, this._compilerOptions);\n\n          for (var _i = 0, _Object$keys = Object.keys(fileLazyRoutes); _i < _Object$keys.length; _i++) {\n            var routeKey = _Object$keys[_i];\n            var route = fileLazyRoutes[routeKey];\n            result[routeKey] = route;\n          }\n        }\n      } catch (err) {\n        _iterator5.e(err);\n      } finally {\n        _iterator5.f();\n      }\n\n      benchmark_1.timeEnd('AngularCompilerPlugin._findLazyRoutesInAst');\n      return result;\n    }\n  }, {\n    key: \"_listLazyRoutesFromProgram\",\n    value: function _listLazyRoutesFromProgram() {\n      var entryRoute;\n      var ngProgram;\n\n      if (this._JitMode) {\n        if (!this.entryModule) {\n          return {};\n        }\n\n        benchmark_1.time('AngularCompilerPlugin._listLazyRoutesFromProgram.createProgram');\n        ngProgram = compiler_cli_1.createProgram({\n          rootNames: this._rootNames,\n          options: _objectSpread(_objectSpread({}, this._compilerOptions), {}, {\n            genDir: '',\n            collectAllErrors: true,\n            enableIvy: false\n          }),\n          host: this._compilerHost\n        });\n        benchmark_1.timeEnd('AngularCompilerPlugin._listLazyRoutesFromProgram.createProgram');\n        entryRoute = utils_1.workaroundResolve(this.entryModule.path) + '#' + this.entryModule.className;\n      } else {\n        ngProgram = this._program;\n      }\n\n      benchmark_1.time('AngularCompilerPlugin._listLazyRoutesFromProgram.listLazyRoutes'); // entryRoute will only be defined in JIT.\n      // In AOT all routes within the program are returned.\n\n      var lazyRoutes = ngProgram.listLazyRoutes(entryRoute);\n      benchmark_1.timeEnd('AngularCompilerPlugin._listLazyRoutesFromProgram.listLazyRoutes');\n      return lazyRoutes.reduce(function (acc, curr) {\n        var ref = curr.route;\n\n        if (ref in acc && acc[ref] !== curr.referencedModule.filePath) {\n          throw new Error(+\"Duplicated path in loadChildren detected: \\\"\".concat(ref, \"\\\" is used in 2 loadChildren, \") + \"but they point to different modules \\\"(\".concat(acc[ref], \" and \") + \"\\\"\".concat(curr.referencedModule.filePath, \"\\\"). Webpack cannot distinguish on context and \") + 'would fail to load the proper one.');\n        }\n\n        acc[ref] = curr.referencedModule.filePath;\n        return acc;\n      }, {});\n    } // Process the lazy routes discovered, adding then to _lazyRoutes.\n    // TODO: find a way to remove lazy routes that don't exist anymore.\n    // This will require a registry of known references to a lazy route, removing it when no\n    // module references it anymore.\n\n  }, {\n    key: \"_processLazyRoutes\",\n    value: function _processLazyRoutes(discoveredLazyRoutes) {\n      var _this3 = this;\n\n      Object.keys(discoveredLazyRoutes).forEach(function (lazyRouteKey) {\n        var _lazyRouteKey$split = lazyRouteKey.split('#'),\n            _lazyRouteKey$split2 = _slicedToArray(_lazyRouteKey$split, 2),\n            lazyRouteModule = _lazyRouteKey$split2[0],\n            moduleName = _lazyRouteKey$split2[1];\n\n        if (!lazyRouteModule) {\n          return;\n        }\n\n        var lazyRouteTSFile = utils_1.forwardSlashPath(discoveredLazyRoutes[lazyRouteKey]);\n        var modulePath, moduleKey;\n\n        if (_this3._useFactories) {\n          modulePath = lazyRouteTSFile.replace(/(\\.d)?\\.tsx?$/, '');\n          modulePath += '.ngfactory.js';\n          var factoryModuleName = moduleName ? \"#\".concat(moduleName, \"NgFactory\") : '';\n          moduleKey = \"\".concat(lazyRouteModule, \".ngfactory\").concat(factoryModuleName);\n        } else {\n          modulePath = lazyRouteTSFile;\n          moduleKey = \"\".concat(lazyRouteModule).concat(moduleName ? '#' + moduleName : '');\n        }\n\n        modulePath = utils_1.workaroundResolve(modulePath);\n\n        if (moduleKey in _this3._lazyRoutes) {\n          if (_this3._lazyRoutes[moduleKey] !== modulePath) {\n            // Found a duplicate, this is an error.\n            _this3._warnings.push(\"Duplicated path in loadChildren detected during a rebuild. \" + \"We will take the latest version detected and override it to save rebuild time. \" + \"You should perform a full build to validate that your routes don't overlap.\");\n          }\n        } else {\n          // Found a new route, add it to the map.\n          _this3._lazyRoutes[moduleKey] = modulePath;\n        }\n      });\n    }\n  }, {\n    key: \"_createForkedTypeChecker\",\n    value: function _createForkedTypeChecker() {\n      var _this4 = this;\n\n      var typeCheckerFile = './type_checker_worker.js';\n      var debugArgRegex = /--inspect(?:-brk|-port)?|--debug(?:-brk|-port)/;\n      var execArgv = process.execArgv.filter(function (arg) {\n        // Remove debug args.\n        // Workaround for https://github.com/nodejs/node/issues/9435\n        return !debugArgRegex.test(arg);\n      }); // Signal the process to start listening for messages\n      // Solves https://github.com/angular/angular-cli/issues/9071\n\n      var forkArgs = [type_checker_1.AUTO_START_ARG];\n      var forkOptions = {\n        execArgv: execArgv\n      };\n      this._typeCheckerProcess = child_process_1.fork(path.resolve(__dirname, typeCheckerFile), forkArgs, forkOptions); // Handle child messages.\n\n      this._typeCheckerProcess.on('message', function (message) {\n        switch (message.kind) {\n          case type_checker_messages_1.MESSAGE_KIND.Log:\n            var logMessage = message;\n\n            _this4._logger.log(logMessage.level, \"\\n\".concat(logMessage.message));\n\n            break;\n\n          default:\n            throw new Error(\"TypeChecker: Unexpected message received: \".concat(message, \".\"));\n        }\n      }); // Handle child process exit.\n\n\n      this._typeCheckerProcess.once('exit', function (_, signal) {\n        _this4._typeCheckerProcess = null; // If process exited not because of SIGTERM (see _killForkedTypeChecker), than something\n        // went wrong and it should fallback to type checking on the main thread.\n\n        if (signal !== 'SIGTERM') {\n          _this4._forkTypeChecker = false;\n          var msg = 'AngularCompilerPlugin: Forked Type Checker exited unexpectedly. ' + 'Falling back to type checking on main thread.';\n\n          _this4._warnings.push(msg);\n        }\n      });\n    }\n  }, {\n    key: \"_killForkedTypeChecker\",\n    value: function _killForkedTypeChecker() {\n      if (this._typeCheckerProcess && !this._typeCheckerProcess.killed) {\n        try {\n          this._typeCheckerProcess.kill();\n        } catch (_a) {}\n\n        this._typeCheckerProcess = null;\n      }\n    }\n  }, {\n    key: \"_updateForkedTypeChecker\",\n    value: function _updateForkedTypeChecker(rootNames, changedCompilationFiles) {\n      if (this._typeCheckerProcess) {\n        if (!this._forkedTypeCheckerInitialized) {\n          var hostReplacementPaths = {};\n\n          if (this._options.hostReplacementPaths && typeof this._options.hostReplacementPaths != 'function') {\n            hostReplacementPaths = this._options.hostReplacementPaths;\n          }\n\n          this._typeCheckerProcess.send(new type_checker_messages_1.InitMessage(this._compilerOptions, this._basePath, this._JitMode, this._rootNames, hostReplacementPaths));\n\n          this._forkedTypeCheckerInitialized = true;\n        }\n\n        this._typeCheckerProcess.send(new type_checker_messages_1.UpdateMessage(rootNames, changedCompilationFiles));\n      }\n    }\n  }, {\n    key: \"_checkUnusedFiles\",\n    value: function _checkUnusedFiles(compilation) {\n      var _this5 = this;\n\n      // Only do the unused TS files checks when under Ivy\n      // since previously we did include unused files in the compilation\n      // See: https://github.com/angular/angular-cli/pull/15030\n      // Don't do checks for compilations with errors, since that can result in a partial compilation.\n      if (!this._compilerOptions.enableIvy || compilation.errors.length > 0) {\n        return;\n      } // Bail if there's no TS program. Nothing to do in that case.\n\n\n      var program = this._getTsProgram();\n\n      if (!program) {\n        return;\n      } // Exclude the following files from unused checks\n      // - ngfactories & ngstyle might not have a correspondent\n      //   JS file example `@angular/core/core.ngfactory.ts`.\n      // - ngtypecheck.ts and __ng_typecheck__.ts are used for type-checking in Ivy.\n\n\n      var fileExcludeRegExp = /(\\.(ngfactory|ngstyle|ngsummary|ngtypecheck)\\.ts|ng_typecheck__\\.ts)$/; // Start all the source file names we care about.\n      // Ignore matches to the regexp above, files we've already reported once before, and\n      // node_modules.\n\n      var sourceFiles = program.getSourceFiles().map(function (x) {\n        return _this5._compilerHost.denormalizePath(x.fileName);\n      }).filter(function (f) {\n        return !(fileExcludeRegExp.test(f) || _this5._unusedFiles.has(f) || _this5._nodeModulesRegExp.test(f));\n      }); // Make a set with the sources, but exclude .d.ts files since those are type-only.\n\n      var unusedSourceFileNames = new Set(sourceFiles.filter(function (f) {\n        return !f.endsWith('.d.ts');\n      })); // Separately keep track of type-only deps.\n\n      var typeDepFileNames = new Set(sourceFiles); // This function removes a source file name and all its dependencies from the set.\n\n      var removeSourceFile = function removeSourceFile(fileName) {\n        var originalModule = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n        if (unusedSourceFileNames.has(fileName) || originalModule && typeDepFileNames.has(fileName)) {\n          unusedSourceFileNames.delete(fileName);\n\n          if (originalModule) {\n            typeDepFileNames.delete(fileName);\n          }\n\n          _this5.getDependencies(fileName, false).forEach(function (f) {\n            return removeSourceFile(f);\n          });\n        }\n      }; // Go over all the modules in the webpack compilation and remove them from the sets.\n\n\n      compilation.modules.forEach(function (m) {\n        return m.resource ? removeSourceFile(m.resource, true) : null;\n      }); // Anything that remains is unused, because it wasn't referenced directly or transitively\n      // on the files in the compilation.\n\n      var _iterator6 = _createForOfIteratorHelper(unusedSourceFileNames),\n          _step6;\n\n      try {\n        for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n          var fileName = _step6.value;\n          webpack_diagnostics_1.addWarning(compilation, \"\".concat(fileName, \" is part of the TypeScript compilation but it's unused.\\n\") + \"Add only entry points to the 'files' or 'include' properties in your tsconfig.\");\n\n          this._unusedFiles.add(fileName); // Remove the truly unused from the type dep list.\n\n\n          typeDepFileNames.delete(fileName);\n        } // At this point we know what the type deps are.\n        // These are the TS files that weren't part of the compilation modules, aren't unused, but were\n        // part of the TS original source list.\n        // Next build we add them to the TS entry points so that they trigger rebuilds.\n\n      } catch (err) {\n        _iterator6.e(err);\n      } finally {\n        _iterator6.f();\n      }\n\n      var _iterator7 = _createForOfIteratorHelper(typeDepFileNames),\n          _step7;\n\n      try {\n        for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n          var _fileName = _step7.value;\n\n          this._typeDeps.add(_fileName);\n        }\n      } catch (err) {\n        _iterator7.e(err);\n      } finally {\n        _iterator7.f();\n      }\n    } // Registration hook for webpack plugin.\n    // tslint:disable-next-line:no-big-function\n\n  }, {\n    key: \"apply\",\n    value: function apply(compiler) {\n      var _this6 = this;\n\n      // The below is require by NGCC processor\n      // since we need to know which fields we need to process\n      compiler.hooks.environment.tap('angular-compiler', function () {\n        var options = compiler.options;\n        var mainFields = options.resolve && options.resolve.mainFields;\n\n        if (mainFields) {\n          _this6._mainFields = utils_1.flattenArray(mainFields);\n        }\n      }); // cleanup if not watching\n\n      compiler.hooks.thisCompilation.tap('angular-compiler', function (compilation) {\n        compilation.hooks.finishModules.tap('angular-compiler', function () {\n          _this6._checkUnusedFiles(compilation);\n\n          var rootCompiler = compiler;\n\n          while (rootCompiler.parentCompilation) {\n            // tslint:disable-next-line:no-any\n            rootCompiler = compiler.parentCompilation;\n          } // only present for webpack 4.23.0+, assume true otherwise\n\n\n          var watchMode = rootCompiler.watchMode === undefined ? true : rootCompiler.watchMode;\n\n          if (!watchMode) {\n            _this6._program = undefined;\n            _this6._transformers = [];\n            _this6._resourceLoader = undefined;\n\n            _this6._compilerHost.reset();\n          }\n        });\n      }); // Decorate inputFileSystem to serve contents of CompilerHost.\n      // Use decorated inputFileSystem in watchFileSystem.\n\n      compiler.hooks.environment.tap('angular-compiler', function () {\n        var _a; // The webpack types currently do not include these\n\n\n        var compilerWithFileSystems = compiler;\n        var host = _this6._options.host || webpack_input_host_1.createWebpackInputHost(compilerWithFileSystems.inputFileSystem);\n        var replacements;\n\n        if (_this6._options.hostReplacementPaths) {\n          if (typeof _this6._options.hostReplacementPaths == 'function') {\n            var replacementResolver = _this6._options.hostReplacementPaths;\n\n            replacements = function replacements(path) {\n              return core_1.normalize(replacementResolver(core_1.getSystemPath(path)));\n            };\n\n            host = new ( /*#__PURE__*/function (_core_1$virtualFs$Res) {\n              _inherits(_class, _core_1$virtualFs$Res);\n\n              var _super = _createSuper(_class);\n\n              function _class() {\n                _classCallCheck(this, _class);\n\n                return _super.apply(this, arguments);\n              }\n\n              _createClass(_class, [{\n                key: \"_resolve\",\n                value: function _resolve(path) {\n                  return core_1.normalize(replacementResolver(core_1.getSystemPath(path)));\n                }\n              }]);\n\n              return _class;\n            }(core_1.virtualFs.ResolverHost))(host);\n          } else {\n            replacements = new Map();\n            var aliasHost = new core_1.virtualFs.AliasHost(host);\n\n            for (var from in _this6._options.hostReplacementPaths) {\n              var normalizedFrom = core_1.resolve(core_1.normalize(_this6._basePath), core_1.normalize(from));\n              var normalizedWith = core_1.resolve(core_1.normalize(_this6._basePath), core_1.normalize(_this6._options.hostReplacementPaths[from]));\n              aliasHost.aliases.set(normalizedFrom, normalizedWith);\n              replacements.set(normalizedFrom, normalizedWith);\n            }\n\n            host = aliasHost;\n          }\n        }\n\n        var ngccProcessor;\n\n        if (_this6._compilerOptions.enableIvy) {\n          ngccProcessor = new ngcc_processor_1.NgccProcessor(_this6._mainFields, _this6._warnings, _this6._errors, _this6._basePath, _this6._tsConfigPath, compilerWithFileSystems.inputFileSystem, (_a = compiler.options.resolve) === null || _a === void 0 ? void 0 : _a.symlinks);\n          ngccProcessor.process();\n        } // Use an identity function as all our paths are absolute already.\n\n\n        _this6._moduleResolutionCache = ts.createModuleResolutionCache(_this6._basePath, function (x) {\n          return x;\n        }); // Create the webpack compiler host.\n\n        var webpackCompilerHost = new compiler_host_1.WebpackCompilerHost(_this6._compilerOptions, _this6._basePath, host, true, _this6._options.directTemplateLoading, ngccProcessor, _this6._moduleResolutionCache); // Create and set a new WebpackResourceLoader in AOT\n\n        if (!_this6._JitMode) {\n          _this6._resourceLoader = new resource_loader_1.WebpackResourceLoader();\n          webpackCompilerHost.setResourceLoader(_this6._resourceLoader);\n        } // Use the WebpackCompilerHost with a resource loader to create an AngularCompilerHost.\n\n\n        _this6._compilerHost = compiler_cli_1.createCompilerHost({\n          options: _this6._compilerOptions,\n          tsHost: webpackCompilerHost\n        }); // Resolve mainPath if provided.\n\n        if (_this6._options.mainPath) {\n          _this6._mainPath = _this6._compilerHost.resolve(_this6._options.mainPath);\n        }\n\n        var inputDecorator = new virtual_file_system_decorator_1.VirtualFileSystemDecorator(compilerWithFileSystems.inputFileSystem, _this6._compilerHost);\n        compilerWithFileSystems.inputFileSystem = inputDecorator;\n        compilerWithFileSystems.watchFileSystem = new virtual_file_system_decorator_1.VirtualWatchFileSystemDecorator(inputDecorator, replacements);\n      });\n\n      if (this._discoverLazyRoutes) {\n        // Add lazy modules to the context module for @angular/core\n        compiler.hooks.contextModuleFactory.tap('angular-compiler', function (cmf) {\n          var angularCorePackagePath = require.resolve('@angular/core/package.json', {\n            paths: [_this6._basePath]\n          }); // APFv6 does not have single FESM anymore. Instead of verifying if we're pointing to\n          // FESMs, we resolve the `@angular/core` path and verify that the path for the\n          // module starts with it.\n          // This may be slower but it will be compatible with both APF5, 6 and potential future\n          // versions (until the dynamic import appears outside of core I suppose).\n          // We resolve symbolic links in order to get the real path that would be used in webpack.\n\n\n          var angularCoreResourceRoot = fs.realpathSync(path.dirname(angularCorePackagePath));\n          cmf.hooks.afterResolve.tapPromise('angular-compiler', /*#__PURE__*/function () {\n            var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(result) {\n              var isLazyModuleResource;\n              return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n                while (1) {\n                  switch (_context2.prev = _context2.next) {\n                    case 0:\n                      // Alter only existing request from Angular or the additional lazy module resources.\n                      isLazyModuleResource = function isLazyModuleResource(resource) {\n                        return resource.startsWith(angularCoreResourceRoot) || _this6.options.additionalLazyModuleResources && _this6.options.additionalLazyModuleResources.includes(resource);\n                      };\n\n                      if (!(!result || !_this6.done || !isLazyModuleResource(result.resource))) {\n                        _context2.next = 3;\n                        break;\n                      }\n\n                      return _context2.abrupt(\"return\", result);\n\n                    case 3:\n                      _context2.next = 5;\n                      return _this6.done;\n\n                    case 5:\n                      // This folder does not exist, but we need to give webpack a resource.\n                      // TODO: check if we can't just leave it as is (angularCoreModuleDir).\n                      result.resource = path.join(_this6._basePath, '$$_lazy_route_resource'); // tslint:disable-next-line:no-any\n\n                      result.dependencies.forEach(function (d) {\n                        return d.critical = false;\n                      }); // tslint:disable-next-line:no-any\n\n                      result.resolveDependencies = function (_fs, options, callback) {\n                        var dependencies = Object.keys(_this6._lazyRoutes).map(function (key) {\n                          var modulePath = _this6._lazyRoutes[key];\n\n                          if (modulePath !== null) {\n                            var name = key.split('#')[0];\n                            return new _this6._contextElementDependencyConstructor(modulePath, name);\n                          } else {\n                            return null;\n                          }\n                        }).filter(function (x) {\n                          return !!x;\n                        });\n\n                        if (_this6._options.nameLazyFiles) {\n                          options.chunkName = '[request]';\n                        }\n\n                        callback(null, dependencies);\n                      };\n\n                      return _context2.abrupt(\"return\", result);\n\n                    case 9:\n                    case \"end\":\n                      return _context2.stop();\n                  }\n                }\n              }, _callee2);\n            }));\n\n            return function (_x) {\n              return _ref.apply(this, arguments);\n            };\n          }());\n        });\n      } // Create and destroy forked type checker on watch mode.\n\n\n      compiler.hooks.watchRun.tap('angular-compiler', function () {\n        if (_this6._forkTypeChecker && !_this6._typeCheckerProcess) {\n          _this6._createForkedTypeChecker();\n        }\n      });\n      compiler.hooks.watchClose.tap('angular-compiler', function () {\n        return _this6._killForkedTypeChecker();\n      }); // Remake the plugin on each compilation.\n\n      compiler.hooks.make.tapPromise('angular-compiler', function (compilation) {\n        return _this6._donePromise = _this6._make(compilation);\n      });\n      compiler.hooks.invalid.tap('angular-compiler', function () {\n        return _this6._firstRun = false;\n      });\n      compiler.hooks.afterEmit.tap('angular-compiler', function (compilation) {\n        // tslint:disable-next-line:no-any\n        compilation._ngToolsWebpackPluginInstance = null;\n      });\n      compiler.hooks.done.tap('angular-compiler', function () {\n        _this6._donePromise = null;\n      });\n      compiler.hooks.afterResolvers.tap('angular-compiler', function (compiler) {\n        if (_this6._compilerOptions.enableIvy) {\n          // When Ivy is enabled we need to add the fields added by NGCC\n          // to take precedence over the provided mainFields.\n          // NGCC adds fields in package.json suffixed with '_ivy_ngcc'\n          // Example: module -> module_ivy_ngcc\n          // tslint:disable-next-line:no-any\n          compiler.resolverFactory.hooks.resolveOptions.for('normal') // tslint:disable-next-line:no-any\n          .tap('WebpackOptionsApply', function (resolveOptions) {\n            var originalMainFields = resolveOptions.mainFields;\n            var ivyMainFields = originalMainFields.map(function (f) {\n              return \"\".concat(f, \"_ivy_ngcc\");\n            });\n            return webpack_version_1.mergeResolverMainFields(resolveOptions, originalMainFields, ivyMainFields);\n          });\n        } // tslint:disable-next-line:no-any\n\n\n        compiler.resolverFactory.hooks.resolver.for('normal') // tslint:disable-next-line:no-any\n        .tap('angular-compiler', function (resolver) {\n          new paths_plugin_1.TypeScriptPathsPlugin(_this6._compilerOptions).apply(resolver);\n        });\n        compiler.hooks.normalModuleFactory.tap('angular-compiler', function (nmf) {\n          // Virtual file system.\n          // TODO: consider if it's better to remove this plugin and instead make it wait on the\n          // VirtualFileSystemDecorator.\n          // Wait for the plugin to be done when requesting `.ts` files directly (entry points), or\n          // when the issuer is a `.ts` or `.ngfactory.js` file.\n          nmf.hooks.beforeResolve.tapPromise('angular-compiler', /*#__PURE__*/function () {\n            var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(request) {\n              var name, issuer;\n              return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n                while (1) {\n                  switch (_context3.prev = _context3.next) {\n                    case 0:\n                      if (!(_this6.done && request)) {\n                        _context3.next = 11;\n                        break;\n                      }\n\n                      name = request.request;\n                      issuer = request.contextInfo.issuer;\n\n                      if (!(name.endsWith('.ts') || name.endsWith('.tsx') || issuer && /\\.ts|ngfactory\\.js$/.test(issuer))) {\n                        _context3.next = 11;\n                        break;\n                      }\n\n                      _context3.prev = 4;\n                      _context3.next = 7;\n                      return _this6.done;\n\n                    case 7:\n                      _context3.next = 11;\n                      break;\n\n                    case 9:\n                      _context3.prev = 9;\n                      _context3.t0 = _context3[\"catch\"](4);\n\n                    case 11:\n                      if (webpack_version_1.isWebpackFiveOrHigher()) {\n                        _context3.next = 13;\n                        break;\n                      }\n\n                      return _context3.abrupt(\"return\", request);\n\n                    case 13:\n                    case \"end\":\n                      return _context3.stop();\n                  }\n                }\n              }, _callee3, null, [[4, 9]]);\n            }));\n\n            return function (_x2) {\n              return _ref2.apply(this, arguments);\n            };\n          }());\n        });\n      });\n    }\n  }, {\n    key: \"_make\",\n    value: function () {\n      var _make2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(compilation) {\n        var inputFs;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                benchmark_1.time('AngularCompilerPlugin._make'); // tslint:disable-next-line:no-any\n\n                if (!compilation._ngToolsWebpackPluginInstance) {\n                  _context4.next = 3;\n                  break;\n                }\n\n                throw new Error('An @ngtools/webpack plugin already exist for this compilation.');\n\n              case 3:\n                if (!(this._compilerHost === undefined)) {\n                  _context4.next = 8;\n                  break;\n                }\n\n                inputFs = compilation.compiler.inputFileSystem;\n\n                if (inputFs.getWebpackCompilerHost) {\n                  _context4.next = 7;\n                  break;\n                }\n\n                throw new Error('AngularCompilerPlugin is running in a child compilation, but could' + 'not find a WebpackCompilerHost in the parent compilation.');\n\n              case 7:\n                // Use the existing WebpackCompilerHost to ensure builds and rebuilds work.\n                this._compilerHost = compiler_cli_1.createCompilerHost({\n                  options: this._compilerOptions,\n                  tsHost: inputFs.getWebpackCompilerHost()\n                });\n\n              case 8:\n                // Set a private variable for this plugin instance.\n                // tslint:disable-next-line:no-any\n                compilation._ngToolsWebpackPluginInstance = this; // Update the resource loader with the new webpack compilation.\n\n                if (this._resourceLoader) {\n                  this._resourceLoader.update(compilation);\n                }\n\n                _context4.prev = 10;\n                _context4.next = 13;\n                return this._update();\n\n              case 13:\n                this.pushCompilationErrors(compilation);\n                _context4.next = 20;\n                break;\n\n              case 16:\n                _context4.prev = 16;\n                _context4.t0 = _context4[\"catch\"](10);\n                webpack_diagnostics_1.addError(compilation, _context4.t0.message || _context4.t0);\n                this.pushCompilationErrors(compilation);\n\n              case 20:\n                benchmark_1.timeEnd('AngularCompilerPlugin._make');\n\n              case 21:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this, [[10, 16]]);\n      }));\n\n      function _make(_x3) {\n        return _make2.apply(this, arguments);\n      }\n\n      return _make;\n    }()\n  }, {\n    key: \"pushCompilationErrors\",\n    value: function pushCompilationErrors(compilation) {\n      this._errors.forEach(function (error) {\n        return webpack_diagnostics_1.addError(compilation, error);\n      });\n\n      this._warnings.forEach(function (warning) {\n        return webpack_diagnostics_1.addWarning(compilation, warning);\n      });\n\n      this._errors = [];\n      this._warnings = [];\n    }\n  }, {\n    key: \"_makeTransformers\",\n    value: function _makeTransformers() {\n      var _this7 = this;\n\n      var isAppPath = function isAppPath(fileName) {\n        return !fileName.endsWith('.ngfactory.ts') && !fileName.endsWith('.ngstyle.ts');\n      };\n\n      var isMainPath = function isMainPath(fileName) {\n        return fileName === (_this7._mainPath ? utils_1.workaroundResolve(_this7._mainPath) : _this7._mainPath);\n      };\n\n      var getEntryModule = function getEntryModule() {\n        return _this7.entryModule ? {\n          path: utils_1.workaroundResolve(_this7.entryModule.path),\n          className: _this7.entryModule.className\n        } : _this7.entryModule;\n      };\n\n      var getLazyRoutes = function getLazyRoutes() {\n        return _this7._lazyRoutes;\n      };\n\n      var getTypeChecker = function getTypeChecker() {\n        return _this7._getTsProgram().getTypeChecker();\n      };\n\n      if (this._JitMode) {\n        // Replace resources in JIT.\n        this._transformers.push(transformers_1.replaceResources(isAppPath, getTypeChecker, this._options.directTemplateLoading)); // Downlevel constructor parameters for DI support\n        // This is required to support forwardRef in ES2015 due to TDZ issues\n        // This wrapper is needed here due to the program not being available until after the transformers are created.\n\n\n        var downlevelFactory = function downlevelFactory(context) {\n          var factory = tooling_1.constructorParametersDownlevelTransform(_this7._getTsProgram());\n          return factory(context);\n        };\n\n        this._transformers.push(downlevelFactory);\n      } else {\n        if (!this._compilerOptions.enableIvy) {\n          // Remove unneeded angular decorators in VE.\n          // In Ivy they are removed in ngc directly.\n          this._transformers.push(transformers_1.removeDecorators(isAppPath, getTypeChecker));\n        } else {\n          // Default for both options is to emit (undefined means true)\n          var removeClassMetadata = this._options.emitClassMetadata === false;\n          var removeNgModuleScope = this._options.emitNgModuleScope === false;\n\n          if (removeClassMetadata || removeNgModuleScope) {\n            this._transformers.push(remove_ivy_jit_support_calls_1.removeIvyJitSupportCalls(removeClassMetadata, removeNgModuleScope, getTypeChecker));\n          }\n        } // Import ngfactory in loadChildren import syntax\n\n\n        if (this._useFactories) {\n          // Only transform imports to use factories with View Engine.\n          this._transformers.push(transformers_1.importFactory(function (msg) {\n            return _this7._warnings.push(msg);\n          }, getTypeChecker));\n        }\n      }\n\n      if (this._platformTransformers !== null) {\n        var _this$_transformers;\n\n        (_this$_transformers = this._transformers).push.apply(_this$_transformers, _toConsumableArray(this._platformTransformers));\n      } else {\n        if (this._platform === interfaces_1.PLATFORM.Browser) {\n          // If we have a locale, auto import the locale data file.\n          // This transform must go before replaceBootstrap because it looks for the entry module\n          // import, which will be replaced.\n          if (this._normalizedLocale) {\n            this._transformers.push(transformers_1.registerLocaleData(isAppPath, getEntryModule, this._normalizedLocale));\n          }\n\n          if (!this._JitMode) {\n            // Replace bootstrap in browser non JIT Mode.\n            this._transformers.push(transformers_1.replaceBootstrap(isAppPath, getEntryModule, getTypeChecker, this._useFactories));\n          }\n        } else if (this._platform === interfaces_1.PLATFORM.Server) {\n          // The export lazy module map is required only for string based lazy loading\n          // which is not supported in Ivy\n          if (!this._compilerOptions.enableIvy) {\n            this._transformers.push(transformers_1.exportLazyModuleMap(isMainPath, getLazyRoutes));\n          }\n\n          if (this._useFactories) {\n            this._transformers.push(transformers_1.exportNgFactory(isMainPath, getEntryModule), transformers_1.replaceServerBootstrap(isMainPath, getEntryModule, getTypeChecker));\n          }\n        }\n      }\n    }\n  }, {\n    key: \"_getChangedTsFiles\",\n    value: function _getChangedTsFiles() {\n      var _this8 = this;\n\n      return this._getChangedCompilationFiles().filter(function (k) {\n        return (k.endsWith('.ts') || k.endsWith('.tsx')) && !k.endsWith('.d.ts');\n      }).filter(function (k) {\n        return _this8._compilerHost.fileExists(k);\n      });\n    }\n  }, {\n    key: \"_update\",\n    value: function () {\n      var _update2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n        var _this9 = this;\n\n        var changedFiles, lazyRouteMap, changedTsFiles, _this$_emit, emitResult, diagnostics;\n\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                benchmark_1.time('AngularCompilerPlugin._update'); // We only want to update on TS and template changes, but all kinds of files are on this\n                // list, like package.json and .ngsummary.json files.\n\n                changedFiles = this._getChangedCompilationFiles(); // If nothing we care about changed and it isn't the first run, don't do anything.\n\n                if (!(changedFiles.length === 0 && !this._firstRun)) {\n                  _context5.next = 4;\n                  break;\n                }\n\n                return _context5.abrupt(\"return\");\n\n              case 4:\n                _context5.next = 6;\n                return this._createOrUpdateProgram();\n\n              case 6:\n                if (this._discoverLazyRoutes) {\n                  // Try to find lazy routes if we have an entry module.\n                  // We need to run the `listLazyRoutes` the first time because it also navigates libraries\n                  // and other things that we might miss using the (faster) findLazyRoutesInAst.\n                  // Lazy routes modules will be read with compilerHost and added to the changed files.\n                  lazyRouteMap = {};\n\n                  if (!this._JitMode || this._firstRun) {\n                    lazyRouteMap = this._listLazyRoutesFromProgram();\n                  } else {\n                    changedTsFiles = this._getChangedTsFiles();\n\n                    if (changedTsFiles.length > 0) {\n                      lazyRouteMap = this._findLazyRoutesInAst(changedTsFiles);\n                    }\n                  } // Find lazy routes\n\n\n                  lazyRouteMap = _objectSpread(_objectSpread({}, lazyRouteMap), this._options.additionalLazyModules);\n\n                  this._processLazyRoutes(lazyRouteMap);\n                } // Emit files.\n\n\n                benchmark_1.time('AngularCompilerPlugin._update._emit');\n                _this$_emit = this._emit(), emitResult = _this$_emit.emitResult, diagnostics = _this$_emit.diagnostics;\n                benchmark_1.timeEnd('AngularCompilerPlugin._update._emit'); // Report any diagnostics.\n\n                diagnostics_1.reportDiagnostics(diagnostics, function (msg) {\n                  return _this9._errors.push(msg);\n                }, function (msg) {\n                  return _this9._warnings.push(msg);\n                });\n                this._emitSkipped = !emitResult || emitResult.emitSkipped; // Reset changed files on successful compilation.\n\n                if (!this._emitSkipped && this._errors.length === 0) {\n                  this._compilerHost.resetChangedFileTracker();\n                }\n\n                benchmark_1.timeEnd('AngularCompilerPlugin._update');\n\n              case 14:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function _update() {\n        return _update2.apply(this, arguments);\n      }\n\n      return _update;\n    }()\n  }, {\n    key: \"writeI18nOutFile\",\n    value: function writeI18nOutFile() {\n      function _recursiveMkDir(p) {\n        if (!fs.existsSync(p)) {\n          _recursiveMkDir(path.dirname(p));\n\n          fs.mkdirSync(p);\n        }\n      } // Write the extracted messages to disk.\n\n\n      if (this._compilerOptions.i18nOutFile) {\n        var i18nOutFilePath = path.resolve(this._basePath, this._compilerOptions.i18nOutFile);\n\n        var i18nOutFileContent = this._compilerHost.readFile(i18nOutFilePath);\n\n        if (i18nOutFileContent) {\n          _recursiveMkDir(path.dirname(i18nOutFilePath));\n\n          fs.writeFileSync(i18nOutFilePath, i18nOutFileContent);\n        }\n      }\n    }\n  }, {\n    key: \"getCompiledFile\",\n    value: function getCompiledFile(fileName) {\n      var _this10 = this;\n\n      var outputFile = fileName.replace(/.tsx?$/, '.js');\n      var outputText;\n      var sourceMap;\n      var errorDependencies = [];\n\n      if (this._emitSkipped) {\n        var text = this._compilerHost.readFile(outputFile);\n\n        if (text) {\n          // If the compilation didn't emit files this time, try to return the cached files from the\n          // last compilation and let the compilation errors show what's wrong.\n          outputText = text;\n          sourceMap = this._compilerHost.readFile(outputFile + '.map');\n        } else {\n          // There's nothing we can serve. Return an empty string to prevent lenghty webpack errors,\n          // add the rebuild warning if it's not there yet.\n          // We also need to all changed files as dependencies of this file, so that all of them\n          // will be watched and trigger a rebuild next time.\n          outputText = '';\n\n          var program = this._getTsProgram();\n\n          errorDependencies = (program ? program.getSourceFiles().map(function (x) {\n            return x.fileName;\n          }) : []). // These paths are used by the loader so we must denormalize them.\n          map(function (p) {\n            return _this10._compilerHost.denormalizePath(p);\n          });\n        }\n      } else {\n        // Check if the TS input file and the JS output file exist.\n        if ((fileName.endsWith('.ts') || fileName.endsWith('.tsx')) && !this._compilerHost.fileExists(fileName) || !this._compilerHost.fileExists(outputFile, false)) {\n          var msg = \"\".concat(fileName, \" is missing from the TypeScript compilation. \") + \"Please make sure it is in your tsconfig via the 'files' or 'include' property.\";\n\n          if (this._nodeModulesRegExp.test(fileName)) {\n            msg += '\\nThe missing file seems to be part of a third party library. ' + 'TS files in published libraries are often a sign of a badly packaged library. ' + 'Please open an issue in the library repository to alert its author and ask them ' + 'to package the library using the Angular Package Format (https://goo.gl/jB3GVv).';\n          }\n\n          throw new Error(msg);\n        }\n\n        outputText = this._compilerHost.readFile(outputFile) || '';\n        sourceMap = this._compilerHost.readFile(outputFile + '.map');\n      }\n\n      return {\n        outputText: outputText,\n        sourceMap: sourceMap,\n        errorDependencies: errorDependencies\n      };\n    }\n  }, {\n    key: \"getDependencies\",\n    value: function getDependencies(fileName) {\n      var _this11 = this;\n\n      var includeResources = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n      var resolvedFileName = this._compilerHost.resolve(fileName);\n\n      var sourceFile = this._compilerHost.getSourceFile(resolvedFileName, ts.ScriptTarget.Latest);\n\n      if (!sourceFile) {\n        return [];\n      }\n\n      var options = this._compilerOptions;\n      var host = this._compilerHost;\n      var cache = this._moduleResolutionCache;\n      var esImports = ast_helpers_1.collectDeepNodes(sourceFile, [ts.SyntaxKind.ImportDeclaration, ts.SyntaxKind.ExportDeclaration]).map(function (decl) {\n        if (!decl.moduleSpecifier) {\n          return null;\n        }\n\n        var moduleName = decl.moduleSpecifier.text;\n        var resolved = ts.resolveModuleName(moduleName, resolvedFileName, options, host, cache);\n\n        if (resolved.resolvedModule) {\n          return resolved.resolvedModule.resolvedFileName;\n        } else {\n          return null;\n        }\n      }).filter(function (x) {\n        return x;\n      });\n      var resourceImports = [];\n      var resourceDependencies = [];\n\n      if (includeResources) {\n        resourceImports = transformers_1.findResources(sourceFile).map(function (resourcePath) {\n          return core_1.resolve(core_1.dirname(resolvedFileName), core_1.normalize(resourcePath));\n        });\n\n        var _iterator8 = _createForOfIteratorHelper(resourceImports),\n            _step8;\n\n        try {\n          for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {\n            var resource = _step8.value;\n\n            var _iterator9 = _createForOfIteratorHelper(this.getResourceDependencies(this._compilerHost.denormalizePath(resource))),\n                _step9;\n\n            try {\n              for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {\n                var dep = _step9.value;\n                resourceDependencies.push(dep);\n              }\n            } catch (err) {\n              _iterator9.e(err);\n            } finally {\n              _iterator9.f();\n            }\n          }\n        } catch (err) {\n          _iterator8.e(err);\n        } finally {\n          _iterator8.f();\n        }\n      } // These paths are meant to be used by the loader so we must denormalize them.\n\n\n      var uniqueDependencies = new Set([].concat(_toConsumableArray(esImports), _toConsumableArray(resourceImports), resourceDependencies).map(function (p) {\n        return p && _this11._compilerHost.denormalizePath(p);\n      }));\n      return _toConsumableArray(uniqueDependencies);\n    }\n  }, {\n    key: \"getResourceDependencies\",\n    value: function getResourceDependencies(fileName) {\n      if (!this._resourceLoader) {\n        return [];\n      } // The source loader uses TS-style forward slash paths for all platforms.\n\n\n      var resolvedFileName = utils_1.forwardSlashPath(fileName);\n      return this._resourceLoader.getResourceDependencies(resolvedFileName);\n    }\n  }, {\n    key: \"getTypeDependencies\",\n    value: function getTypeDependencies(fileName) {\n      // We currently add all type deps directly to the main path.\n      // If there's no main path or the lookup isn't the main path, bail.\n      if (!this._mainPath || this._compilerHost.resolve(fileName) != this._mainPath) {\n        return [];\n      } // Note: this set is always for the previous build, not the current build.\n      // It should be better than not having rebuilds on type deps but isn't 100% correct.\n\n\n      return Array.from(this._typeDeps);\n    } // This code mostly comes from `performCompilation` in `@angular/compiler-cli`.\n    // It skips the program creation because we need to use `loadNgStructureAsync()`,\n    // and uses CustomTransformers.\n\n  }, {\n    key: \"_emit\",\n    value: function _emit() {\n      benchmark_1.time('AngularCompilerPlugin._emit');\n      var program = this._program;\n      var allDiagnostics = [];\n      var diagMode = this._firstRun || !this._forkTypeChecker ? diagnostics_1.DiagnosticMode.All : diagnostics_1.DiagnosticMode.Syntactic;\n      var emitResult;\n\n      try {\n        if (this._JitMode) {\n          var tsProgram = program;\n          var changedTsFiles = new Set();\n\n          if (this._firstRun) {\n            // Check parameter diagnostics.\n            benchmark_1.time('AngularCompilerPlugin._emit.ts.getOptionsDiagnostics');\n            allDiagnostics.push.apply(allDiagnostics, _toConsumableArray(tsProgram.getOptionsDiagnostics()));\n            benchmark_1.timeEnd('AngularCompilerPlugin._emit.ts.getOptionsDiagnostics');\n          } else {\n            // generate a list of changed files for emit\n            // not needed on first run since a full program emit is required\n            var _iterator10 = _createForOfIteratorHelper(this._compilerHost.getChangedFilePaths()),\n                _step10;\n\n            try {\n              for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {\n                var changedFile = _step10.value;\n\n                if (!/.(tsx|ts|json|js)$/.test(changedFile)) {\n                  continue;\n                } // existing type definitions are not emitted\n\n\n                if (changedFile.endsWith('.d.ts')) {\n                  continue;\n                }\n\n                changedTsFiles.add(changedFile);\n              }\n            } catch (err) {\n              _iterator10.e(err);\n            } finally {\n              _iterator10.f();\n            }\n          }\n\n          allDiagnostics.push.apply(allDiagnostics, _toConsumableArray(diagnostics_1.gatherDiagnostics(tsProgram, this._JitMode, 'AngularCompilerPlugin._emit.ts', diagMode)));\n\n          if (!diagnostics_1.hasErrors(allDiagnostics)) {\n            if (this._firstRun || changedTsFiles.size > 20 || !this._hadFullJitEmit) {\n              emitResult = tsProgram.emit(undefined, undefined, undefined, undefined, {\n                before: this._transformers\n              });\n              this._hadFullJitEmit = !emitResult.emitSkipped;\n              allDiagnostics.push.apply(allDiagnostics, _toConsumableArray(emitResult.diagnostics));\n            } else {\n              var _iterator11 = _createForOfIteratorHelper(changedTsFiles),\n                  _step11;\n\n              try {\n                for (_iterator11.s(); !(_step11 = _iterator11.n()).done;) {\n                  var _changedFile = _step11.value;\n                  var sourceFile = tsProgram.getSourceFile(_changedFile);\n\n                  if (!sourceFile) {\n                    continue;\n                  }\n\n                  var timeLabel = \"AngularCompilerPlugin._emit.ts+\".concat(sourceFile.fileName, \"+.emit\");\n                  benchmark_1.time(timeLabel);\n                  emitResult = tsProgram.emit(sourceFile, undefined, undefined, undefined, {\n                    before: this._transformers\n                  });\n                  allDiagnostics.push.apply(allDiagnostics, _toConsumableArray(emitResult.diagnostics));\n                  benchmark_1.timeEnd(timeLabel);\n                }\n              } catch (err) {\n                _iterator11.e(err);\n              } finally {\n                _iterator11.f();\n              }\n            }\n          }\n        } else {\n          var angularProgram = program; // Check Angular structural diagnostics.\n\n          benchmark_1.time('AngularCompilerPlugin._emit.ng.getNgStructuralDiagnostics');\n          allDiagnostics.push.apply(allDiagnostics, _toConsumableArray(angularProgram.getNgStructuralDiagnostics()));\n          benchmark_1.timeEnd('AngularCompilerPlugin._emit.ng.getNgStructuralDiagnostics');\n\n          if (this._firstRun) {\n            // Check TypeScript parameter diagnostics.\n            benchmark_1.time('AngularCompilerPlugin._emit.ng.getTsOptionDiagnostics');\n            allDiagnostics.push.apply(allDiagnostics, _toConsumableArray(angularProgram.getTsOptionDiagnostics()));\n            benchmark_1.timeEnd('AngularCompilerPlugin._emit.ng.getTsOptionDiagnostics'); // Check Angular parameter diagnostics.\n\n            benchmark_1.time('AngularCompilerPlugin._emit.ng.getNgOptionDiagnostics');\n            allDiagnostics.push.apply(allDiagnostics, _toConsumableArray(angularProgram.getNgOptionDiagnostics()));\n            benchmark_1.timeEnd('AngularCompilerPlugin._emit.ng.getNgOptionDiagnostics');\n          }\n\n          allDiagnostics.push.apply(allDiagnostics, _toConsumableArray(diagnostics_1.gatherDiagnostics(angularProgram, this._JitMode, 'AngularCompilerPlugin._emit.ng', diagMode)));\n\n          if (!diagnostics_1.hasErrors(allDiagnostics)) {\n            benchmark_1.time('AngularCompilerPlugin._emit.ng.emit');\n            var extractI18n = !!this._compilerOptions.i18nOutFile;\n            var emitFlags = extractI18n ? compiler_cli_1.EmitFlags.I18nBundle : compiler_cli_1.EmitFlags.Default;\n            emitResult = angularProgram.emit({\n              emitFlags: emitFlags,\n              customTransformers: {\n                beforeTs: this._transformers\n              }\n            });\n            allDiagnostics.push.apply(allDiagnostics, _toConsumableArray(emitResult.diagnostics));\n\n            if (extractI18n) {\n              this.writeI18nOutFile();\n            }\n\n            benchmark_1.timeEnd('AngularCompilerPlugin._emit.ng.emit');\n          }\n        }\n      } catch (e) {\n        // This function is available in the import below, but this way we avoid the dependency.\n        // import { isSyntaxError } from '@angular/compiler';\n        var isSyntaxError = function isSyntaxError(error) {\n          return error['ngSyntaxError']; // tslint:disable-line:no-any\n        };\n\n        benchmark_1.time('AngularCompilerPlugin._emit.catch');\n        var errMsg;\n        var code;\n\n        if (isSyntaxError(e)) {\n          // don't report the stack for syntax errors as they are well known errors.\n          errMsg = e.message;\n          code = compiler_cli_1.DEFAULT_ERROR_CODE;\n        } else {\n          errMsg = e.stack; // It is not a syntax error we might have a program with unknown state, discard it.\n\n          this._program = undefined;\n          code = compiler_cli_1.UNKNOWN_ERROR_CODE;\n        }\n\n        allDiagnostics.push({\n          category: ts.DiagnosticCategory.Error,\n          messageText: errMsg,\n          code: code,\n          source: compiler_cli_1.SOURCE\n        });\n        benchmark_1.timeEnd('AngularCompilerPlugin._emit.catch');\n      }\n\n      benchmark_1.timeEnd('AngularCompilerPlugin._emit');\n      return {\n        program: program,\n        emitResult: emitResult,\n        diagnostics: allDiagnostics\n      };\n    }\n  }, {\n    key: \"_validateLocale\",\n    value: function _validateLocale(locale) {\n      // Get the path of the common module.\n      var commonPath = path.dirname(require.resolve('@angular/common/package.json')); // Check if the locale file exists\n\n      if (!fs.existsSync(path.resolve(commonPath, 'locales', \"\".concat(locale, \".js\")))) {\n        // Check for an alternative locale (if the locale id was badly formatted).\n        var locales = fs.readdirSync(path.resolve(commonPath, 'locales')).filter(function (file) {\n          return file.endsWith('.js');\n        }).map(function (file) {\n          return file.replace('.js', '');\n        });\n        var newLocale;\n        var normalizedLocale = locale.toLowerCase().replace(/_/g, '-');\n\n        var _iterator12 = _createForOfIteratorHelper(locales),\n            _step12;\n\n        try {\n          for (_iterator12.s(); !(_step12 = _iterator12.n()).done;) {\n            var l = _step12.value;\n\n            if (l.toLowerCase() === normalizedLocale) {\n              newLocale = l;\n              break;\n            }\n          }\n        } catch (err) {\n          _iterator12.e(err);\n        } finally {\n          _iterator12.f();\n        }\n\n        if (newLocale) {\n          locale = newLocale;\n        } else {\n          // Check for a parent locale\n          var parentLocale = normalizedLocale.split('-')[0];\n\n          if (locales.indexOf(parentLocale) !== -1) {\n            locale = parentLocale;\n          } else {\n            this._warnings.push(\"AngularCompilerPlugin: Unable to load the locale data file \" + \"\\\"@angular/common/locales/\".concat(locale, \"\\\", \") + \"please check that \\\"\".concat(locale, \"\\\" is a valid locale id.\\n            If needed, you can use \\\"registerLocaleData\\\" manually.\"));\n\n            return null;\n          }\n        }\n      }\n\n      return locale;\n    }\n  }]);\n\n  return AngularCompilerPlugin;\n}();\n\nexports.AngularCompilerPlugin = AngularCompilerPlugin;","map":{"version":3,"sources":["/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@ngtools/webpack/src/angular_compiler_plugin.js"],"names":["Object","defineProperty","exports","value","AngularCompilerPlugin","core_1","require","node_1","compiler_cli_1","tooling_1","child_process_1","fs","path","ts","benchmark_1","compiler_host_1","diagnostics_1","entry_resolver_1","interfaces_1","lazy_routes_1","ngcc_processor_1","paths_plugin_1","resource_loader_1","transformers_1","ast_helpers_1","remove_ivy_jit_support_calls_1","type_checker_1","type_checker_messages_1","utils_1","virtual_file_system_decorator_1","webpack_diagnostics_1","webpack_input_host_1","webpack_version_1","options","_discoverLazyRoutes","_useFactories","_lazyRoutes","_entryModule","_transformers","_platformTransformers","_JitMode","_emitSkipped","_unusedFiles","Set","_typeDeps","_changedFileExtensions","_nodeModulesRegExp","_firstRun","_donePromise","_normalizedLocale","_warnings","_errors","_forkTypeChecker","_typeCheckerProcess","_forkedTypeCheckerInitialized","_mainFields","_options","assign","_logger","logger","createConsoleLogger","_setupOptions","splitted","split","className","substring","tsProgram","_getTsProgram","getTypeChecker","time","hasOwnProperty","Error","_tsConfigPath","forwardSlashPath","tsConfigPath","maybeBasePath","resolve","process","cwd","basePath","statSync","isFile","dirname","undefined","config","readConfiguration","errors","length","formatDiagnostics","_rootNames","rootNames","_compilerOptions","compilerOptions","_basePath","outDir","suppressOutputPathCheck","sourceMap","inlineSources","inlineSourceMap","mapRoot","sourceRoot","noEmitOnError","skipCodeGeneration","i18nInFile","i18nInFormat","i18nOutFile","i18nOutFormat","locale","i18nInLocale","i18nOutLocale","_validateLocale","missingTranslation","i18nInMissingTranslations","annotationsAs","forkTypeChecker","platformTransformers","discoverLazyRoutes","suppressZoneJsIncompatibilityWarning","target","ScriptTarget","ES2017","push","additionalLazyModuleResources","strictMetadataEmit","additionalLazyModules","keys","enableIvy","_contextElementDependencyConstructor","contextElementDependencyConstructor","entryModule","_platform","platform","PLATFORM","Browser","_makeTransformers","timeEnd","_program","getTsProgram","extension","add","_compilerHost","getChangedFilePaths","filter","k","ext","endsWith","_updateForkedTypeChecker","_getChangedCompilationFiles","oldTsProgram","createProgram","host","oldProgram","loadNgStructureAsync","newTsProgram","newProgramSourceFiles","getSourceFiles","localDtsFiles","f","isDeclarationFile","test","fileName","map","denormalizePath","dts","oldFiles","sf","newProgramFiles","dependency","has","delete","invalidate","denormalizedFileName","_mainPath","resolveEntryModuleFromMain","changedFilePaths","result","filePath","fileLazyRoutes","findLazyRoutes","routeKey","route","entryRoute","ngProgram","genDir","collectAllErrors","workaroundResolve","lazyRoutes","listLazyRoutes","reduce","acc","curr","ref","referencedModule","discoveredLazyRoutes","forEach","lazyRouteKey","lazyRouteModule","moduleName","lazyRouteTSFile","modulePath","moduleKey","replace","factoryModuleName","typeCheckerFile","debugArgRegex","execArgv","arg","forkArgs","AUTO_START_ARG","forkOptions","fork","__dirname","on","message","kind","MESSAGE_KIND","Log","logMessage","log","level","once","_","signal","msg","killed","kill","_a","changedCompilationFiles","hostReplacementPaths","send","InitMessage","UpdateMessage","compilation","program","fileExcludeRegExp","sourceFiles","x","unusedSourceFileNames","typeDepFileNames","removeSourceFile","originalModule","getDependencies","modules","m","resource","addWarning","compiler","hooks","environment","tap","mainFields","flattenArray","thisCompilation","finishModules","_checkUnusedFiles","rootCompiler","parentCompilation","watchMode","_resourceLoader","reset","compilerWithFileSystems","createWebpackInputHost","inputFileSystem","replacements","replacementResolver","normalize","getSystemPath","virtualFs","ResolverHost","Map","aliasHost","AliasHost","from","normalizedFrom","normalizedWith","aliases","set","ngccProcessor","NgccProcessor","symlinks","_moduleResolutionCache","createModuleResolutionCache","webpackCompilerHost","WebpackCompilerHost","directTemplateLoading","WebpackResourceLoader","setResourceLoader","createCompilerHost","tsHost","mainPath","inputDecorator","VirtualFileSystemDecorator","watchFileSystem","VirtualWatchFileSystemDecorator","contextModuleFactory","cmf","angularCorePackagePath","paths","angularCoreResourceRoot","realpathSync","afterResolve","tapPromise","isLazyModuleResource","startsWith","includes","done","join","dependencies","d","critical","resolveDependencies","_fs","callback","key","name","nameLazyFiles","chunkName","watchRun","_createForkedTypeChecker","watchClose","_killForkedTypeChecker","make","_make","invalid","afterEmit","_ngToolsWebpackPluginInstance","afterResolvers","resolverFactory","resolveOptions","for","originalMainFields","ivyMainFields","mergeResolverMainFields","resolver","TypeScriptPathsPlugin","apply","normalModuleFactory","nmf","beforeResolve","request","issuer","contextInfo","isWebpackFiveOrHigher","inputFs","getWebpackCompilerHost","update","_update","pushCompilationErrors","addError","error","warning","isAppPath","isMainPath","getEntryModule","getLazyRoutes","replaceResources","downlevelFactory","context","factory","constructorParametersDownlevelTransform","removeDecorators","removeClassMetadata","emitClassMetadata","removeNgModuleScope","emitNgModuleScope","removeIvyJitSupportCalls","importFactory","registerLocaleData","replaceBootstrap","Server","exportLazyModuleMap","exportNgFactory","replaceServerBootstrap","fileExists","changedFiles","_createOrUpdateProgram","lazyRouteMap","_listLazyRoutesFromProgram","changedTsFiles","_getChangedTsFiles","_findLazyRoutesInAst","_processLazyRoutes","_emit","emitResult","diagnostics","reportDiagnostics","emitSkipped","resetChangedFileTracker","_recursiveMkDir","p","existsSync","mkdirSync","i18nOutFilePath","i18nOutFileContent","readFile","writeFileSync","outputFile","outputText","errorDependencies","text","includeResources","resolvedFileName","sourceFile","getSourceFile","Latest","cache","esImports","collectDeepNodes","SyntaxKind","ImportDeclaration","ExportDeclaration","decl","moduleSpecifier","resolved","resolveModuleName","resolvedModule","resourceImports","resourceDependencies","findResources","resourcePath","getResourceDependencies","dep","uniqueDependencies","Array","allDiagnostics","diagMode","DiagnosticMode","All","Syntactic","getOptionsDiagnostics","changedFile","gatherDiagnostics","hasErrors","size","_hadFullJitEmit","emit","before","timeLabel","angularProgram","getNgStructuralDiagnostics","getTsOptionDiagnostics","getNgOptionDiagnostics","extractI18n","emitFlags","EmitFlags","I18nBundle","Default","customTransformers","beforeTs","writeI18nOutFile","e","isSyntaxError","errMsg","code","DEFAULT_ERROR_CODE","stack","UNKNOWN_ERROR_CODE","category","DiagnosticCategory","messageText","source","SOURCE","commonPath","locales","readdirSync","file","newLocale","normalizedLocale","toLowerCase","l","parentLocale","indexOf"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.AngularCompilerPlugin = void 0;\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst core_1 = require(\"@angular-devkit/core\");\nconst node_1 = require(\"@angular-devkit/core/node\");\nconst compiler_cli_1 = require(\"@angular/compiler-cli\");\nconst tooling_1 = require(\"@angular/compiler-cli/src/tooling\");\nconst child_process_1 = require(\"child_process\");\nconst fs = require(\"fs\");\nconst path = require(\"path\");\nconst ts = require(\"typescript\");\nconst benchmark_1 = require(\"./benchmark\");\nconst compiler_host_1 = require(\"./compiler_host\");\nconst diagnostics_1 = require(\"./diagnostics\");\nconst entry_resolver_1 = require(\"./entry_resolver\");\nconst interfaces_1 = require(\"./interfaces\");\nconst lazy_routes_1 = require(\"./lazy_routes\");\nconst ngcc_processor_1 = require(\"./ngcc_processor\");\nconst paths_plugin_1 = require(\"./paths-plugin\");\nconst resource_loader_1 = require(\"./resource_loader\");\nconst transformers_1 = require(\"./transformers\");\nconst ast_helpers_1 = require(\"./transformers/ast_helpers\");\nconst remove_ivy_jit_support_calls_1 = require(\"./transformers/remove-ivy-jit-support-calls\");\nconst type_checker_1 = require(\"./type_checker\");\nconst type_checker_messages_1 = require(\"./type_checker_messages\");\nconst utils_1 = require(\"./utils\");\nconst virtual_file_system_decorator_1 = require(\"./virtual_file_system_decorator\");\nconst webpack_diagnostics_1 = require(\"./webpack-diagnostics\");\nconst webpack_input_host_1 = require(\"./webpack-input-host\");\nconst webpack_version_1 = require(\"./webpack-version\");\nclass AngularCompilerPlugin {\n    constructor(options) {\n        this._discoverLazyRoutes = true;\n        this._useFactories = false;\n        // Contains `moduleImportPath#exportName` => `fullModulePath`.\n        this._lazyRoutes = {};\n        this._entryModule = null;\n        this._transformers = [];\n        this._platformTransformers = null;\n        this._JitMode = false;\n        this._emitSkipped = true;\n        this._unusedFiles = new Set();\n        this._typeDeps = new Set();\n        this._changedFileExtensions = new Set(['ts', 'tsx', 'html', 'css', 'js', 'json']);\n        this._nodeModulesRegExp = /[\\\\\\/]node_modules[\\\\\\/]/;\n        // Webpack plugin.\n        this._firstRun = true;\n        this._donePromise = null;\n        this._normalizedLocale = null;\n        this._warnings = [];\n        this._errors = [];\n        // TypeChecker process.\n        this._forkTypeChecker = true;\n        this._typeCheckerProcess = null;\n        this._forkedTypeCheckerInitialized = false;\n        this._mainFields = [];\n        this._options = Object.assign({}, options);\n        this._logger = options.logger || node_1.createConsoleLogger();\n        this._setupOptions(this._options);\n    }\n    get options() { return this._options; }\n    get done() { return this._donePromise; }\n    get entryModule() {\n        if (!this._entryModule) {\n            return null;\n        }\n        const splitted = this._entryModule.split(/(#[a-zA-Z_]([\\w]+))$/);\n        const path = splitted[0];\n        const className = !!splitted[1] ? splitted[1].substring(1) : 'default';\n        return { path, className };\n    }\n    get typeChecker() {\n        const tsProgram = this._getTsProgram();\n        return tsProgram ? tsProgram.getTypeChecker() : null;\n    }\n    _setupOptions(options) {\n        benchmark_1.time('AngularCompilerPlugin._setupOptions');\n        // Fill in the missing options.\n        if (!options.hasOwnProperty('tsConfigPath')) {\n            throw new Error('Must specify \"tsConfigPath\" in the configuration of @ngtools/webpack.');\n        }\n        // TS represents paths internally with '/' and expects the tsconfig path to be in this format\n        this._tsConfigPath = utils_1.forwardSlashPath(options.tsConfigPath);\n        // Check the base path.\n        const maybeBasePath = path.resolve(process.cwd(), this._tsConfigPath);\n        let basePath = maybeBasePath;\n        if (fs.statSync(maybeBasePath).isFile()) {\n            basePath = path.dirname(basePath);\n        }\n        if (options.basePath !== undefined) {\n            basePath = path.resolve(process.cwd(), options.basePath);\n        }\n        // Parse the tsconfig contents.\n        const config = compiler_cli_1.readConfiguration(this._tsConfigPath);\n        if (config.errors && config.errors.length) {\n            throw new Error(compiler_cli_1.formatDiagnostics(config.errors));\n        }\n        this._rootNames = config.rootNames;\n        this._compilerOptions = { ...config.options, ...options.compilerOptions };\n        this._basePath = config.options.basePath || basePath || '';\n        // Overwrite outDir so we can find generated files next to their .ts origin in compilerHost.\n        this._compilerOptions.outDir = '';\n        this._compilerOptions.suppressOutputPathCheck = true;\n        // Default plugin sourceMap to compiler options setting.\n        if (!options.hasOwnProperty('sourceMap')) {\n            options.sourceMap = this._compilerOptions.sourceMap || false;\n        }\n        // Force the right sourcemap options.\n        if (options.sourceMap) {\n            this._compilerOptions.sourceMap = true;\n            this._compilerOptions.inlineSources = true;\n            this._compilerOptions.inlineSourceMap = false;\n            this._compilerOptions.mapRoot = undefined;\n            // We will set the source to the full path of the file in the loader, so we don't\n            // need sourceRoot here.\n            this._compilerOptions.sourceRoot = undefined;\n        }\n        else {\n            this._compilerOptions.sourceMap = false;\n            this._compilerOptions.sourceRoot = undefined;\n            this._compilerOptions.inlineSources = undefined;\n            this._compilerOptions.inlineSourceMap = undefined;\n            this._compilerOptions.mapRoot = undefined;\n            this._compilerOptions.sourceRoot = undefined;\n        }\n        // We want to allow emitting with errors so that imports can be added\n        // to the webpack dependency tree and rebuilds triggered by file edits.\n        this._compilerOptions.noEmitOnError = false;\n        // Set JIT (no code generation) or AOT mode.\n        if (options.skipCodeGeneration !== undefined) {\n            this._JitMode = options.skipCodeGeneration;\n        }\n        // Process i18n options.\n        if (options.i18nInFile !== undefined) {\n            this._compilerOptions.i18nInFile = options.i18nInFile;\n        }\n        if (options.i18nInFormat !== undefined) {\n            this._compilerOptions.i18nInFormat = options.i18nInFormat;\n        }\n        if (options.i18nOutFile !== undefined) {\n            this._compilerOptions.i18nOutFile = options.i18nOutFile;\n        }\n        if (options.i18nOutFormat !== undefined) {\n            this._compilerOptions.i18nOutFormat = options.i18nOutFormat;\n        }\n        if (options.locale !== undefined) {\n            this._compilerOptions.i18nInLocale = options.locale;\n            this._compilerOptions.i18nOutLocale = options.locale;\n            this._normalizedLocale = this._validateLocale(options.locale);\n        }\n        if (options.missingTranslation !== undefined) {\n            this._compilerOptions.i18nInMissingTranslations =\n                options.missingTranslation;\n        }\n        // For performance, disable AOT decorator downleveling transformer for applications in the CLI.\n        // The transformer is not needed for VE or Ivy in this plugin since Angular decorators are removed.\n        // While the transformer would make no changes, it would still need to walk each source file AST.\n        this._compilerOptions.annotationsAs = 'decorators';\n        // Process forked type checker options.\n        if (options.forkTypeChecker !== undefined) {\n            this._forkTypeChecker = options.forkTypeChecker;\n        }\n        // this._forkTypeChecker = false;\n        // Add custom platform transformers.\n        if (options.platformTransformers !== undefined) {\n            this._platformTransformers = options.platformTransformers;\n        }\n        // Determine if lazy route discovery via Compiler CLI private API should be attempted.\n        // The default is to discover routes, but it can be overriden.\n        if (options.discoverLazyRoutes !== undefined) {\n            this._discoverLazyRoutes = options.discoverLazyRoutes;\n        }\n        if (!this.options.suppressZoneJsIncompatibilityWarning &&\n            this._compilerOptions.target !== undefined &&\n            this._compilerOptions.target >= ts.ScriptTarget.ES2017) {\n            this._warnings.push('Zone.js does not support native async/await in ES2017+.\\n' +\n                'These blocks are not intercepted by zone.js and will not triggering change detection.\\n' +\n                'See: https://github.com/angular/zone.js/pull/1140 for more information.');\n        }\n        if (this._discoverLazyRoutes === false && this.options.additionalLazyModuleResources\n            && this.options.additionalLazyModuleResources.length > 0) {\n            this._warnings.push(`Lazy route discovery is disabled but additional Lazy Module Resources were` +\n                ` provided. These will be ignored.`);\n        }\n        if (this._compilerOptions.strictMetadataEmit) {\n            this._warnings.push(`Using Angular compiler option 'strictMetadataEmit' for applications might cause undefined behavior.`);\n        }\n        if (this._discoverLazyRoutes === false && this.options.additionalLazyModules\n            && Object.keys(this.options.additionalLazyModules).length > 0) {\n            this._warnings.push(`Lazy route discovery is disabled but additional lazy modules were provided.` +\n                `These will be ignored.`);\n        }\n        if (!this._JitMode && !this._compilerOptions.enableIvy) {\n            // Only attempt to use factories when AOT and not Ivy.\n            this._useFactories = true;\n        }\n        // Default ContextElementDependency to the one we can import from here.\n        // Failing to use the right ContextElementDependency will throw the error below:\n        // \"No module factory available for dependency type: ContextElementDependency\"\n        // Hoisting together with peer dependencies can make it so the imported\n        // ContextElementDependency does not come from the same Webpack instance that is used\n        // in the compilation. In that case, we can pass the right one as an option to the plugin.\n        this._contextElementDependencyConstructor = options.contextElementDependencyConstructor\n            || require('webpack/lib/dependencies/ContextElementDependency');\n        // Use entryModule if available in options, otherwise resolve it from mainPath after program\n        // creation.\n        if (this._options.entryModule) {\n            this._entryModule = this._options.entryModule;\n        }\n        else if (this._compilerOptions.entryModule) {\n            this._entryModule = path.resolve(this._basePath, this._compilerOptions.entryModule); // temporary cast for type issue\n        }\n        // Set platform.\n        this._platform = options.platform || interfaces_1.PLATFORM.Browser;\n        // Make transformers.\n        this._makeTransformers();\n        benchmark_1.timeEnd('AngularCompilerPlugin._setupOptions');\n    }\n    _getTsProgram() {\n        if (!this._program) {\n            return undefined;\n        }\n        return this._JitMode ? this._program : this._program.getTsProgram();\n    }\n    updateChangedFileExtensions(extension) {\n        if (extension) {\n            this._changedFileExtensions.add(extension);\n        }\n    }\n    _getChangedCompilationFiles() {\n        return this._compilerHost.getChangedFilePaths()\n            .filter(k => {\n            for (const ext of this._changedFileExtensions) {\n                if (k.endsWith(ext)) {\n                    return true;\n                }\n            }\n            return false;\n        });\n    }\n    async _createOrUpdateProgram() {\n        // Get the root files from the ts config.\n        // When a new root name (like a lazy route) is added, it won't be available from\n        // following imports on the existing files, so we need to get the new list of root files.\n        const config = compiler_cli_1.readConfiguration(this._tsConfigPath);\n        this._rootNames = config.rootNames;\n        // Update the forked type checker with all changed compilation files.\n        // This includes templates, that also need to be reloaded on the type checker.\n        if (this._forkTypeChecker && this._typeCheckerProcess && !this._firstRun) {\n            this._updateForkedTypeChecker(this._rootNames, this._getChangedCompilationFiles());\n        }\n        const oldTsProgram = this._getTsProgram();\n        if (this._JitMode) {\n            // Create the TypeScript program.\n            benchmark_1.time('AngularCompilerPlugin._createOrUpdateProgram.ts.createProgram');\n            this._program = ts.createProgram(this._rootNames, this._compilerOptions, this._compilerHost, oldTsProgram);\n            benchmark_1.timeEnd('AngularCompilerPlugin._createOrUpdateProgram.ts.createProgram');\n        }\n        else {\n            benchmark_1.time('AngularCompilerPlugin._createOrUpdateProgram.ng.createProgram');\n            // Create the Angular program.\n            this._program = compiler_cli_1.createProgram({\n                rootNames: this._rootNames,\n                options: this._compilerOptions,\n                host: this._compilerHost,\n                oldProgram: this._program,\n            });\n            benchmark_1.timeEnd('AngularCompilerPlugin._createOrUpdateProgram.ng.createProgram');\n            benchmark_1.time('AngularCompilerPlugin._createOrUpdateProgram.ng.loadNgStructureAsync');\n            await this._program.loadNgStructureAsync();\n            benchmark_1.timeEnd('AngularCompilerPlugin._createOrUpdateProgram.ng.loadNgStructureAsync');\n        }\n        const newTsProgram = this._getTsProgram();\n        const newProgramSourceFiles = newTsProgram === null || newTsProgram === void 0 ? void 0 : newTsProgram.getSourceFiles();\n        const localDtsFiles = new Set(newProgramSourceFiles === null || newProgramSourceFiles === void 0 ? void 0 : newProgramSourceFiles.filter(f => f.isDeclarationFile && !this._nodeModulesRegExp.test(f.fileName)).map(f => this._compilerHost.denormalizePath(f.fileName)));\n        if (!oldTsProgram) {\n            // Add all non node package dts files as depedencies when not having an old program\n            for (const dts of localDtsFiles) {\n                this._typeDeps.add(dts);\n            }\n        }\n        else if (oldTsProgram && newProgramSourceFiles) {\n            // The invalidation should only happen if we have an old program\n            // as otherwise we will invalidate all the sourcefiles.\n            const oldFiles = new Set(oldTsProgram.getSourceFiles().map(sf => sf.fileName));\n            const newProgramFiles = new Set(newProgramSourceFiles.map(sf => sf.fileName));\n            for (const dependency of this._typeDeps) {\n                // Remove type dependencies of no longer existing files\n                if (!newProgramFiles.has(utils_1.forwardSlashPath(dependency))) {\n                    this._typeDeps.delete(dependency);\n                }\n            }\n            for (const fileName of newProgramFiles) {\n                if (oldFiles.has(fileName)) {\n                    continue;\n                }\n                this._compilerHost.invalidate(fileName);\n                const denormalizedFileName = this._compilerHost.denormalizePath(fileName);\n                if (localDtsFiles.has(denormalizedFileName)) {\n                    // Add new dts file as a type depedency\n                    this._typeDeps.add(denormalizedFileName);\n                }\n            }\n        }\n        // If there's still no entryModule try to resolve from mainPath.\n        if (!this._entryModule && this._mainPath) {\n            benchmark_1.time('AngularCompilerPlugin._make.resolveEntryModuleFromMain');\n            this._entryModule = entry_resolver_1.resolveEntryModuleFromMain(this._mainPath, this._compilerHost, this._getTsProgram());\n            if (this._discoverLazyRoutes && !this.entryModule && !this._compilerOptions.enableIvy) {\n                this._warnings.push('Lazy routes discovery is not enabled. '\n                    + 'Because there is neither an entryModule nor a '\n                    + 'statically analyzable bootstrap code in the main file.');\n            }\n            benchmark_1.timeEnd('AngularCompilerPlugin._make.resolveEntryModuleFromMain');\n        }\n    }\n    _findLazyRoutesInAst(changedFilePaths) {\n        benchmark_1.time('AngularCompilerPlugin._findLazyRoutesInAst');\n        const result = {};\n        for (const filePath of changedFilePaths) {\n            const fileLazyRoutes = lazy_routes_1.findLazyRoutes(filePath, this._compilerHost, undefined, this._compilerOptions);\n            for (const routeKey of Object.keys(fileLazyRoutes)) {\n                const route = fileLazyRoutes[routeKey];\n                result[routeKey] = route;\n            }\n        }\n        benchmark_1.timeEnd('AngularCompilerPlugin._findLazyRoutesInAst');\n        return result;\n    }\n    _listLazyRoutesFromProgram() {\n        let entryRoute;\n        let ngProgram;\n        if (this._JitMode) {\n            if (!this.entryModule) {\n                return {};\n            }\n            benchmark_1.time('AngularCompilerPlugin._listLazyRoutesFromProgram.createProgram');\n            ngProgram = compiler_cli_1.createProgram({\n                rootNames: this._rootNames,\n                options: { ...this._compilerOptions, genDir: '', collectAllErrors: true, enableIvy: false },\n                host: this._compilerHost,\n            });\n            benchmark_1.timeEnd('AngularCompilerPlugin._listLazyRoutesFromProgram.createProgram');\n            entryRoute = utils_1.workaroundResolve(this.entryModule.path) + '#' + this.entryModule.className;\n        }\n        else {\n            ngProgram = this._program;\n        }\n        benchmark_1.time('AngularCompilerPlugin._listLazyRoutesFromProgram.listLazyRoutes');\n        // entryRoute will only be defined in JIT.\n        // In AOT all routes within the program are returned.\n        const lazyRoutes = ngProgram.listLazyRoutes(entryRoute);\n        benchmark_1.timeEnd('AngularCompilerPlugin._listLazyRoutesFromProgram.listLazyRoutes');\n        return lazyRoutes.reduce((acc, curr) => {\n            const ref = curr.route;\n            if (ref in acc && acc[ref] !== curr.referencedModule.filePath) {\n                throw new Error(+`Duplicated path in loadChildren detected: \"${ref}\" is used in 2 loadChildren, `\n                    + `but they point to different modules \"(${acc[ref]} and `\n                    + `\"${curr.referencedModule.filePath}\"). Webpack cannot distinguish on context and `\n                    + 'would fail to load the proper one.');\n            }\n            acc[ref] = curr.referencedModule.filePath;\n            return acc;\n        }, {});\n    }\n    // Process the lazy routes discovered, adding then to _lazyRoutes.\n    // TODO: find a way to remove lazy routes that don't exist anymore.\n    // This will require a registry of known references to a lazy route, removing it when no\n    // module references it anymore.\n    _processLazyRoutes(discoveredLazyRoutes) {\n        Object.keys(discoveredLazyRoutes)\n            .forEach(lazyRouteKey => {\n            const [lazyRouteModule, moduleName] = lazyRouteKey.split('#');\n            if (!lazyRouteModule) {\n                return;\n            }\n            const lazyRouteTSFile = utils_1.forwardSlashPath(discoveredLazyRoutes[lazyRouteKey]);\n            let modulePath, moduleKey;\n            if (this._useFactories) {\n                modulePath = lazyRouteTSFile.replace(/(\\.d)?\\.tsx?$/, '');\n                modulePath += '.ngfactory.js';\n                const factoryModuleName = moduleName ? `#${moduleName}NgFactory` : '';\n                moduleKey = `${lazyRouteModule}.ngfactory${factoryModuleName}`;\n            }\n            else {\n                modulePath = lazyRouteTSFile;\n                moduleKey = `${lazyRouteModule}${moduleName ? '#' + moduleName : ''}`;\n            }\n            modulePath = utils_1.workaroundResolve(modulePath);\n            if (moduleKey in this._lazyRoutes) {\n                if (this._lazyRoutes[moduleKey] !== modulePath) {\n                    // Found a duplicate, this is an error.\n                    this._warnings.push(`Duplicated path in loadChildren detected during a rebuild. ` +\n                        `We will take the latest version detected and override it to save rebuild time. ` +\n                        `You should perform a full build to validate that your routes don't overlap.`);\n                }\n            }\n            else {\n                // Found a new route, add it to the map.\n                this._lazyRoutes[moduleKey] = modulePath;\n            }\n        });\n    }\n    _createForkedTypeChecker() {\n        const typeCheckerFile = './type_checker_worker.js';\n        const debugArgRegex = /--inspect(?:-brk|-port)?|--debug(?:-brk|-port)/;\n        const execArgv = process.execArgv.filter((arg) => {\n            // Remove debug args.\n            // Workaround for https://github.com/nodejs/node/issues/9435\n            return !debugArgRegex.test(arg);\n        });\n        // Signal the process to start listening for messages\n        // Solves https://github.com/angular/angular-cli/issues/9071\n        const forkArgs = [type_checker_1.AUTO_START_ARG];\n        const forkOptions = { execArgv };\n        this._typeCheckerProcess = child_process_1.fork(path.resolve(__dirname, typeCheckerFile), forkArgs, forkOptions);\n        // Handle child messages.\n        this._typeCheckerProcess.on('message', message => {\n            switch (message.kind) {\n                case type_checker_messages_1.MESSAGE_KIND.Log:\n                    const logMessage = message;\n                    this._logger.log(logMessage.level, `\\n${logMessage.message}`);\n                    break;\n                default:\n                    throw new Error(`TypeChecker: Unexpected message received: ${message}.`);\n            }\n        });\n        // Handle child process exit.\n        this._typeCheckerProcess.once('exit', (_, signal) => {\n            this._typeCheckerProcess = null;\n            // If process exited not because of SIGTERM (see _killForkedTypeChecker), than something\n            // went wrong and it should fallback to type checking on the main thread.\n            if (signal !== 'SIGTERM') {\n                this._forkTypeChecker = false;\n                const msg = 'AngularCompilerPlugin: Forked Type Checker exited unexpectedly. ' +\n                    'Falling back to type checking on main thread.';\n                this._warnings.push(msg);\n            }\n        });\n    }\n    _killForkedTypeChecker() {\n        if (this._typeCheckerProcess && !this._typeCheckerProcess.killed) {\n            try {\n                this._typeCheckerProcess.kill();\n            }\n            catch (_a) { }\n            this._typeCheckerProcess = null;\n        }\n    }\n    _updateForkedTypeChecker(rootNames, changedCompilationFiles) {\n        if (this._typeCheckerProcess) {\n            if (!this._forkedTypeCheckerInitialized) {\n                let hostReplacementPaths = {};\n                if (this._options.hostReplacementPaths\n                    && typeof this._options.hostReplacementPaths != 'function') {\n                    hostReplacementPaths = this._options.hostReplacementPaths;\n                }\n                this._typeCheckerProcess.send(new type_checker_messages_1.InitMessage(this._compilerOptions, this._basePath, this._JitMode, this._rootNames, hostReplacementPaths));\n                this._forkedTypeCheckerInitialized = true;\n            }\n            this._typeCheckerProcess.send(new type_checker_messages_1.UpdateMessage(rootNames, changedCompilationFiles));\n        }\n    }\n    _checkUnusedFiles(compilation) {\n        // Only do the unused TS files checks when under Ivy\n        // since previously we did include unused files in the compilation\n        // See: https://github.com/angular/angular-cli/pull/15030\n        // Don't do checks for compilations with errors, since that can result in a partial compilation.\n        if (!this._compilerOptions.enableIvy || compilation.errors.length > 0) {\n            return;\n        }\n        // Bail if there's no TS program. Nothing to do in that case.\n        const program = this._getTsProgram();\n        if (!program) {\n            return;\n        }\n        // Exclude the following files from unused checks\n        // - ngfactories & ngstyle might not have a correspondent\n        //   JS file example `@angular/core/core.ngfactory.ts`.\n        // - ngtypecheck.ts and __ng_typecheck__.ts are used for type-checking in Ivy.\n        const fileExcludeRegExp = /(\\.(ngfactory|ngstyle|ngsummary|ngtypecheck)\\.ts|ng_typecheck__\\.ts)$/;\n        // Start all the source file names we care about.\n        // Ignore matches to the regexp above, files we've already reported once before, and\n        // node_modules.\n        const sourceFiles = program.getSourceFiles()\n            .map(x => this._compilerHost.denormalizePath(x.fileName))\n            .filter(f => !(fileExcludeRegExp.test(f) || this._unusedFiles.has(f)\n            || this._nodeModulesRegExp.test(f)));\n        // Make a set with the sources, but exclude .d.ts files since those are type-only.\n        const unusedSourceFileNames = new Set(sourceFiles.filter(f => !f.endsWith('.d.ts')));\n        // Separately keep track of type-only deps.\n        const typeDepFileNames = new Set(sourceFiles);\n        // This function removes a source file name and all its dependencies from the set.\n        const removeSourceFile = (fileName, originalModule = false) => {\n            if (unusedSourceFileNames.has(fileName) || (originalModule && typeDepFileNames.has(fileName))) {\n                unusedSourceFileNames.delete(fileName);\n                if (originalModule) {\n                    typeDepFileNames.delete(fileName);\n                }\n                this.getDependencies(fileName, false).forEach(f => removeSourceFile(f));\n            }\n        };\n        // Go over all the modules in the webpack compilation and remove them from the sets.\n        compilation.modules.forEach(m => m.resource ? removeSourceFile(m.resource, true) : null);\n        // Anything that remains is unused, because it wasn't referenced directly or transitively\n        // on the files in the compilation.\n        for (const fileName of unusedSourceFileNames) {\n            webpack_diagnostics_1.addWarning(compilation, `${fileName} is part of the TypeScript compilation but it's unused.\\n` +\n                `Add only entry points to the 'files' or 'include' properties in your tsconfig.`);\n            this._unusedFiles.add(fileName);\n            // Remove the truly unused from the type dep list.\n            typeDepFileNames.delete(fileName);\n        }\n        // At this point we know what the type deps are.\n        // These are the TS files that weren't part of the compilation modules, aren't unused, but were\n        // part of the TS original source list.\n        // Next build we add them to the TS entry points so that they trigger rebuilds.\n        for (const fileName of typeDepFileNames) {\n            this._typeDeps.add(fileName);\n        }\n    }\n    // Registration hook for webpack plugin.\n    // tslint:disable-next-line:no-big-function\n    apply(compiler) {\n        // The below is require by NGCC processor\n        // since we need to know which fields we need to process\n        compiler.hooks.environment.tap('angular-compiler', () => {\n            const { options } = compiler;\n            const mainFields = options.resolve && options.resolve.mainFields;\n            if (mainFields) {\n                this._mainFields = utils_1.flattenArray(mainFields);\n            }\n        });\n        // cleanup if not watching\n        compiler.hooks.thisCompilation.tap('angular-compiler', compilation => {\n            compilation.hooks.finishModules.tap('angular-compiler', () => {\n                this._checkUnusedFiles(compilation);\n                let rootCompiler = compiler;\n                while (rootCompiler.parentCompilation) {\n                    // tslint:disable-next-line:no-any\n                    rootCompiler = compiler.parentCompilation;\n                }\n                // only present for webpack 4.23.0+, assume true otherwise\n                const watchMode = rootCompiler.watchMode === undefined ? true : rootCompiler.watchMode;\n                if (!watchMode) {\n                    this._program = undefined;\n                    this._transformers = [];\n                    this._resourceLoader = undefined;\n                    this._compilerHost.reset();\n                }\n            });\n        });\n        // Decorate inputFileSystem to serve contents of CompilerHost.\n        // Use decorated inputFileSystem in watchFileSystem.\n        compiler.hooks.environment.tap('angular-compiler', () => {\n            var _a;\n            // The webpack types currently do not include these\n            const compilerWithFileSystems = compiler;\n            let host = this._options.host || webpack_input_host_1.createWebpackInputHost(compilerWithFileSystems.inputFileSystem);\n            let replacements;\n            if (this._options.hostReplacementPaths) {\n                if (typeof this._options.hostReplacementPaths == 'function') {\n                    const replacementResolver = this._options.hostReplacementPaths;\n                    replacements = path => core_1.normalize(replacementResolver(core_1.getSystemPath(path)));\n                    host = new class extends core_1.virtualFs.ResolverHost {\n                        _resolve(path) {\n                            return core_1.normalize(replacementResolver(core_1.getSystemPath(path)));\n                        }\n                    }(host);\n                }\n                else {\n                    replacements = new Map();\n                    const aliasHost = new core_1.virtualFs.AliasHost(host);\n                    for (const from in this._options.hostReplacementPaths) {\n                        const normalizedFrom = core_1.resolve(core_1.normalize(this._basePath), core_1.normalize(from));\n                        const normalizedWith = core_1.resolve(core_1.normalize(this._basePath), core_1.normalize(this._options.hostReplacementPaths[from]));\n                        aliasHost.aliases.set(normalizedFrom, normalizedWith);\n                        replacements.set(normalizedFrom, normalizedWith);\n                    }\n                    host = aliasHost;\n                }\n            }\n            let ngccProcessor;\n            if (this._compilerOptions.enableIvy) {\n                ngccProcessor = new ngcc_processor_1.NgccProcessor(this._mainFields, this._warnings, this._errors, this._basePath, this._tsConfigPath, compilerWithFileSystems.inputFileSystem, (_a = compiler.options.resolve) === null || _a === void 0 ? void 0 : _a.symlinks);\n                ngccProcessor.process();\n            }\n            // Use an identity function as all our paths are absolute already.\n            this._moduleResolutionCache = ts.createModuleResolutionCache(this._basePath, x => x);\n            // Create the webpack compiler host.\n            const webpackCompilerHost = new compiler_host_1.WebpackCompilerHost(this._compilerOptions, this._basePath, host, true, this._options.directTemplateLoading, ngccProcessor, this._moduleResolutionCache);\n            // Create and set a new WebpackResourceLoader in AOT\n            if (!this._JitMode) {\n                this._resourceLoader = new resource_loader_1.WebpackResourceLoader();\n                webpackCompilerHost.setResourceLoader(this._resourceLoader);\n            }\n            // Use the WebpackCompilerHost with a resource loader to create an AngularCompilerHost.\n            this._compilerHost = compiler_cli_1.createCompilerHost({\n                options: this._compilerOptions,\n                tsHost: webpackCompilerHost,\n            });\n            // Resolve mainPath if provided.\n            if (this._options.mainPath) {\n                this._mainPath = this._compilerHost.resolve(this._options.mainPath);\n            }\n            const inputDecorator = new virtual_file_system_decorator_1.VirtualFileSystemDecorator(compilerWithFileSystems.inputFileSystem, this._compilerHost);\n            compilerWithFileSystems.inputFileSystem = inputDecorator;\n            compilerWithFileSystems.watchFileSystem = new virtual_file_system_decorator_1.VirtualWatchFileSystemDecorator(inputDecorator, replacements);\n        });\n        if (this._discoverLazyRoutes) {\n            // Add lazy modules to the context module for @angular/core\n            compiler.hooks.contextModuleFactory.tap('angular-compiler', cmf => {\n                const angularCorePackagePath = require.resolve('@angular/core/package.json', {\n                    paths: [this._basePath],\n                });\n                // APFv6 does not have single FESM anymore. Instead of verifying if we're pointing to\n                // FESMs, we resolve the `@angular/core` path and verify that the path for the\n                // module starts with it.\n                // This may be slower but it will be compatible with both APF5, 6 and potential future\n                // versions (until the dynamic import appears outside of core I suppose).\n                // We resolve symbolic links in order to get the real path that would be used in webpack.\n                const angularCoreResourceRoot = fs.realpathSync(path.dirname(angularCorePackagePath));\n                cmf.hooks.afterResolve.tapPromise('angular-compiler', async (result) => {\n                    // Alter only existing request from Angular or the additional lazy module resources.\n                    const isLazyModuleResource = (resource) => resource.startsWith(angularCoreResourceRoot) ||\n                        (this.options.additionalLazyModuleResources &&\n                            this.options.additionalLazyModuleResources.includes(resource));\n                    if (!result || !this.done || !isLazyModuleResource(result.resource)) {\n                        return result;\n                    }\n                    await this.done;\n                    // This folder does not exist, but we need to give webpack a resource.\n                    // TODO: check if we can't just leave it as is (angularCoreModuleDir).\n                    result.resource = path.join(this._basePath, '$$_lazy_route_resource');\n                    // tslint:disable-next-line:no-any\n                    result.dependencies.forEach((d) => d.critical = false);\n                    // tslint:disable-next-line:no-any\n                    result.resolveDependencies = (_fs, options, callback) => {\n                        const dependencies = Object.keys(this._lazyRoutes)\n                            .map((key) => {\n                            const modulePath = this._lazyRoutes[key];\n                            if (modulePath !== null) {\n                                const name = key.split('#')[0];\n                                return new this._contextElementDependencyConstructor(modulePath, name);\n                            }\n                            else {\n                                return null;\n                            }\n                        })\n                            .filter(x => !!x);\n                        if (this._options.nameLazyFiles) {\n                            options.chunkName = '[request]';\n                        }\n                        callback(null, dependencies);\n                    };\n                    return result;\n                });\n            });\n        }\n        // Create and destroy forked type checker on watch mode.\n        compiler.hooks.watchRun.tap('angular-compiler', () => {\n            if (this._forkTypeChecker && !this._typeCheckerProcess) {\n                this._createForkedTypeChecker();\n            }\n        });\n        compiler.hooks.watchClose.tap('angular-compiler', () => this._killForkedTypeChecker());\n        // Remake the plugin on each compilation.\n        compiler.hooks.make.tapPromise('angular-compiler', compilation => this._donePromise = this._make(compilation));\n        compiler.hooks.invalid.tap('angular-compiler', () => this._firstRun = false);\n        compiler.hooks.afterEmit.tap('angular-compiler', compilation => {\n            // tslint:disable-next-line:no-any\n            compilation._ngToolsWebpackPluginInstance = null;\n        });\n        compiler.hooks.done.tap('angular-compiler', () => {\n            this._donePromise = null;\n        });\n        compiler.hooks.afterResolvers.tap('angular-compiler', compiler => {\n            if (this._compilerOptions.enableIvy) {\n                // When Ivy is enabled we need to add the fields added by NGCC\n                // to take precedence over the provided mainFields.\n                // NGCC adds fields in package.json suffixed with '_ivy_ngcc'\n                // Example: module -> module_ivy_ngcc\n                // tslint:disable-next-line:no-any\n                compiler.resolverFactory.hooks.resolveOptions\n                    .for('normal')\n                    // tslint:disable-next-line:no-any\n                    .tap('WebpackOptionsApply', (resolveOptions) => {\n                    const originalMainFields = resolveOptions.mainFields;\n                    const ivyMainFields = originalMainFields.map(f => `${f}_ivy_ngcc`);\n                    return webpack_version_1.mergeResolverMainFields(resolveOptions, originalMainFields, ivyMainFields);\n                });\n            }\n            // tslint:disable-next-line:no-any\n            compiler.resolverFactory.hooks.resolver\n                .for('normal')\n                // tslint:disable-next-line:no-any\n                .tap('angular-compiler', (resolver) => {\n                new paths_plugin_1.TypeScriptPathsPlugin(this._compilerOptions).apply(resolver);\n            });\n            compiler.hooks.normalModuleFactory.tap('angular-compiler', nmf => {\n                // Virtual file system.\n                // TODO: consider if it's better to remove this plugin and instead make it wait on the\n                // VirtualFileSystemDecorator.\n                // Wait for the plugin to be done when requesting `.ts` files directly (entry points), or\n                // when the issuer is a `.ts` or `.ngfactory.js` file.\n                nmf.hooks.beforeResolve.tapPromise('angular-compiler', async (request) => {\n                    if (this.done && request) {\n                        const name = request.request;\n                        const issuer = request.contextInfo.issuer;\n                        if (name.endsWith('.ts') || name.endsWith('.tsx')\n                            || (issuer && /\\.ts|ngfactory\\.js$/.test(issuer))) {\n                            try {\n                                await this.done;\n                            }\n                            catch (_a) { }\n                        }\n                    }\n                    if (!webpack_version_1.isWebpackFiveOrHigher()) {\n                        return request;\n                    }\n                });\n            });\n        });\n    }\n    async _make(compilation) {\n        benchmark_1.time('AngularCompilerPlugin._make');\n        // tslint:disable-next-line:no-any\n        if (compilation._ngToolsWebpackPluginInstance) {\n            throw new Error('An @ngtools/webpack plugin already exist for this compilation.');\n        }\n        // If there is no compiler host at this point, it means that the environment hook did not run.\n        // This happens in child compilations that inherit the parent compilation file system.\n        // Node: child compilations also do not run most webpack compiler hooks, including almost all\n        // we use here. The child compiler will always run as if it was the first build.\n        if (this._compilerHost === undefined) {\n            const inputFs = compilation.compiler.inputFileSystem;\n            if (!inputFs.getWebpackCompilerHost) {\n                throw new Error('AngularCompilerPlugin is running in a child compilation, but could' +\n                    'not find a WebpackCompilerHost in the parent compilation.');\n            }\n            // Use the existing WebpackCompilerHost to ensure builds and rebuilds work.\n            this._compilerHost = compiler_cli_1.createCompilerHost({\n                options: this._compilerOptions,\n                tsHost: inputFs.getWebpackCompilerHost(),\n            });\n        }\n        // Set a private variable for this plugin instance.\n        // tslint:disable-next-line:no-any\n        compilation._ngToolsWebpackPluginInstance = this;\n        // Update the resource loader with the new webpack compilation.\n        if (this._resourceLoader) {\n            this._resourceLoader.update(compilation);\n        }\n        try {\n            await this._update();\n            this.pushCompilationErrors(compilation);\n        }\n        catch (err) {\n            webpack_diagnostics_1.addError(compilation, err.message || err);\n            this.pushCompilationErrors(compilation);\n        }\n        benchmark_1.timeEnd('AngularCompilerPlugin._make');\n    }\n    pushCompilationErrors(compilation) {\n        this._errors.forEach((error) => webpack_diagnostics_1.addError(compilation, error));\n        this._warnings.forEach((warning) => webpack_diagnostics_1.addWarning(compilation, warning));\n        this._errors = [];\n        this._warnings = [];\n    }\n    _makeTransformers() {\n        const isAppPath = (fileName) => !fileName.endsWith('.ngfactory.ts') && !fileName.endsWith('.ngstyle.ts');\n        const isMainPath = (fileName) => fileName === (this._mainPath ? utils_1.workaroundResolve(this._mainPath) : this._mainPath);\n        const getEntryModule = () => this.entryModule\n            ? { path: utils_1.workaroundResolve(this.entryModule.path), className: this.entryModule.className }\n            : this.entryModule;\n        const getLazyRoutes = () => this._lazyRoutes;\n        const getTypeChecker = () => this._getTsProgram().getTypeChecker();\n        if (this._JitMode) {\n            // Replace resources in JIT.\n            this._transformers.push(transformers_1.replaceResources(isAppPath, getTypeChecker, this._options.directTemplateLoading));\n            // Downlevel constructor parameters for DI support\n            // This is required to support forwardRef in ES2015 due to TDZ issues\n            // This wrapper is needed here due to the program not being available until after the transformers are created.\n            const downlevelFactory = (context) => {\n                const factory = tooling_1.constructorParametersDownlevelTransform(this._getTsProgram());\n                return factory(context);\n            };\n            this._transformers.push(downlevelFactory);\n        }\n        else {\n            if (!this._compilerOptions.enableIvy) {\n                // Remove unneeded angular decorators in VE.\n                // In Ivy they are removed in ngc directly.\n                this._transformers.push(transformers_1.removeDecorators(isAppPath, getTypeChecker));\n            }\n            else {\n                // Default for both options is to emit (undefined means true)\n                const removeClassMetadata = this._options.emitClassMetadata === false;\n                const removeNgModuleScope = this._options.emitNgModuleScope === false;\n                if (removeClassMetadata || removeNgModuleScope) {\n                    this._transformers.push(remove_ivy_jit_support_calls_1.removeIvyJitSupportCalls(removeClassMetadata, removeNgModuleScope, getTypeChecker));\n                }\n            }\n            // Import ngfactory in loadChildren import syntax\n            if (this._useFactories) {\n                // Only transform imports to use factories with View Engine.\n                this._transformers.push(transformers_1.importFactory(msg => this._warnings.push(msg), getTypeChecker));\n            }\n        }\n        if (this._platformTransformers !== null) {\n            this._transformers.push(...this._platformTransformers);\n        }\n        else {\n            if (this._platform === interfaces_1.PLATFORM.Browser) {\n                // If we have a locale, auto import the locale data file.\n                // This transform must go before replaceBootstrap because it looks for the entry module\n                // import, which will be replaced.\n                if (this._normalizedLocale) {\n                    this._transformers.push(transformers_1.registerLocaleData(isAppPath, getEntryModule, this._normalizedLocale));\n                }\n                if (!this._JitMode) {\n                    // Replace bootstrap in browser non JIT Mode.\n                    this._transformers.push(transformers_1.replaceBootstrap(isAppPath, getEntryModule, getTypeChecker, this._useFactories));\n                }\n            }\n            else if (this._platform === interfaces_1.PLATFORM.Server) {\n                // The export lazy module map is required only for string based lazy loading\n                // which is not supported in Ivy\n                if (!this._compilerOptions.enableIvy) {\n                    this._transformers.push(transformers_1.exportLazyModuleMap(isMainPath, getLazyRoutes));\n                }\n                if (this._useFactories) {\n                    this._transformers.push(transformers_1.exportNgFactory(isMainPath, getEntryModule), transformers_1.replaceServerBootstrap(isMainPath, getEntryModule, getTypeChecker));\n                }\n            }\n        }\n    }\n    _getChangedTsFiles() {\n        return this._getChangedCompilationFiles()\n            .filter(k => (k.endsWith('.ts') || k.endsWith('.tsx')) && !k.endsWith('.d.ts'))\n            .filter(k => this._compilerHost.fileExists(k));\n    }\n    async _update() {\n        benchmark_1.time('AngularCompilerPlugin._update');\n        // We only want to update on TS and template changes, but all kinds of files are on this\n        // list, like package.json and .ngsummary.json files.\n        const changedFiles = this._getChangedCompilationFiles();\n        // If nothing we care about changed and it isn't the first run, don't do anything.\n        if (changedFiles.length === 0 && !this._firstRun) {\n            return;\n        }\n        // Make a new program and load the Angular structure.\n        await this._createOrUpdateProgram();\n        if (this._discoverLazyRoutes) {\n            // Try to find lazy routes if we have an entry module.\n            // We need to run the `listLazyRoutes` the first time because it also navigates libraries\n            // and other things that we might miss using the (faster) findLazyRoutesInAst.\n            // Lazy routes modules will be read with compilerHost and added to the changed files.\n            let lazyRouteMap = {};\n            if (!this._JitMode || this._firstRun) {\n                lazyRouteMap = this._listLazyRoutesFromProgram();\n            }\n            else {\n                const changedTsFiles = this._getChangedTsFiles();\n                if (changedTsFiles.length > 0) {\n                    lazyRouteMap = this._findLazyRoutesInAst(changedTsFiles);\n                }\n            }\n            // Find lazy routes\n            lazyRouteMap = {\n                ...lazyRouteMap,\n                ...this._options.additionalLazyModules,\n            };\n            this._processLazyRoutes(lazyRouteMap);\n        }\n        // Emit files.\n        benchmark_1.time('AngularCompilerPlugin._update._emit');\n        const { emitResult, diagnostics } = this._emit();\n        benchmark_1.timeEnd('AngularCompilerPlugin._update._emit');\n        // Report any diagnostics.\n        diagnostics_1.reportDiagnostics(diagnostics, msg => this._errors.push(msg), msg => this._warnings.push(msg));\n        this._emitSkipped = !emitResult || emitResult.emitSkipped;\n        // Reset changed files on successful compilation.\n        if (!this._emitSkipped && this._errors.length === 0) {\n            this._compilerHost.resetChangedFileTracker();\n        }\n        benchmark_1.timeEnd('AngularCompilerPlugin._update');\n    }\n    writeI18nOutFile() {\n        function _recursiveMkDir(p) {\n            if (!fs.existsSync(p)) {\n                _recursiveMkDir(path.dirname(p));\n                fs.mkdirSync(p);\n            }\n        }\n        // Write the extracted messages to disk.\n        if (this._compilerOptions.i18nOutFile) {\n            const i18nOutFilePath = path.resolve(this._basePath, this._compilerOptions.i18nOutFile);\n            const i18nOutFileContent = this._compilerHost.readFile(i18nOutFilePath);\n            if (i18nOutFileContent) {\n                _recursiveMkDir(path.dirname(i18nOutFilePath));\n                fs.writeFileSync(i18nOutFilePath, i18nOutFileContent);\n            }\n        }\n    }\n    getCompiledFile(fileName) {\n        const outputFile = fileName.replace(/.tsx?$/, '.js');\n        let outputText;\n        let sourceMap;\n        let errorDependencies = [];\n        if (this._emitSkipped) {\n            const text = this._compilerHost.readFile(outputFile);\n            if (text) {\n                // If the compilation didn't emit files this time, try to return the cached files from the\n                // last compilation and let the compilation errors show what's wrong.\n                outputText = text;\n                sourceMap = this._compilerHost.readFile(outputFile + '.map');\n            }\n            else {\n                // There's nothing we can serve. Return an empty string to prevent lenghty webpack errors,\n                // add the rebuild warning if it's not there yet.\n                // We also need to all changed files as dependencies of this file, so that all of them\n                // will be watched and trigger a rebuild next time.\n                outputText = '';\n                const program = this._getTsProgram();\n                errorDependencies = (program ? program.getSourceFiles().map(x => x.fileName) : [])\n                    // These paths are used by the loader so we must denormalize them.\n                    .map((p) => this._compilerHost.denormalizePath(p));\n            }\n        }\n        else {\n            // Check if the TS input file and the JS output file exist.\n            if (((fileName.endsWith('.ts') || fileName.endsWith('.tsx'))\n                && !this._compilerHost.fileExists(fileName))\n                || !this._compilerHost.fileExists(outputFile, false)) {\n                let msg = `${fileName} is missing from the TypeScript compilation. `\n                    + `Please make sure it is in your tsconfig via the 'files' or 'include' property.`;\n                if (this._nodeModulesRegExp.test(fileName)) {\n                    msg += '\\nThe missing file seems to be part of a third party library. '\n                        + 'TS files in published libraries are often a sign of a badly packaged library. '\n                        + 'Please open an issue in the library repository to alert its author and ask them '\n                        + 'to package the library using the Angular Package Format (https://goo.gl/jB3GVv).';\n                }\n                throw new Error(msg);\n            }\n            outputText = this._compilerHost.readFile(outputFile) || '';\n            sourceMap = this._compilerHost.readFile(outputFile + '.map');\n        }\n        return { outputText, sourceMap, errorDependencies };\n    }\n    getDependencies(fileName, includeResources = true) {\n        const resolvedFileName = this._compilerHost.resolve(fileName);\n        const sourceFile = this._compilerHost.getSourceFile(resolvedFileName, ts.ScriptTarget.Latest);\n        if (!sourceFile) {\n            return [];\n        }\n        const options = this._compilerOptions;\n        const host = this._compilerHost;\n        const cache = this._moduleResolutionCache;\n        const esImports = ast_helpers_1.collectDeepNodes(sourceFile, [\n            ts.SyntaxKind.ImportDeclaration,\n            ts.SyntaxKind.ExportDeclaration,\n        ])\n            .map(decl => {\n            if (!decl.moduleSpecifier) {\n                return null;\n            }\n            const moduleName = decl.moduleSpecifier.text;\n            const resolved = ts.resolveModuleName(moduleName, resolvedFileName, options, host, cache);\n            if (resolved.resolvedModule) {\n                return resolved.resolvedModule.resolvedFileName;\n            }\n            else {\n                return null;\n            }\n        })\n            .filter(x => x);\n        let resourceImports = [];\n        const resourceDependencies = [];\n        if (includeResources) {\n            resourceImports = transformers_1.findResources(sourceFile)\n                .map(resourcePath => core_1.resolve(core_1.dirname(resolvedFileName), core_1.normalize(resourcePath)));\n            for (const resource of resourceImports) {\n                for (const dep of this.getResourceDependencies(this._compilerHost.denormalizePath(resource))) {\n                    resourceDependencies.push(dep);\n                }\n            }\n        }\n        // These paths are meant to be used by the loader so we must denormalize them.\n        const uniqueDependencies = new Set([\n            ...esImports,\n            ...resourceImports,\n            ...resourceDependencies,\n        ].map((p) => p && this._compilerHost.denormalizePath(p)));\n        return [...uniqueDependencies];\n    }\n    getResourceDependencies(fileName) {\n        if (!this._resourceLoader) {\n            return [];\n        }\n        // The source loader uses TS-style forward slash paths for all platforms.\n        const resolvedFileName = utils_1.forwardSlashPath(fileName);\n        return this._resourceLoader.getResourceDependencies(resolvedFileName);\n    }\n    getTypeDependencies(fileName) {\n        // We currently add all type deps directly to the main path.\n        // If there's no main path or the lookup isn't the main path, bail.\n        if (!this._mainPath || this._compilerHost.resolve(fileName) != this._mainPath) {\n            return [];\n        }\n        // Note: this set is always for the previous build, not the current build.\n        // It should be better than not having rebuilds on type deps but isn't 100% correct.\n        return Array.from(this._typeDeps);\n    }\n    // This code mostly comes from `performCompilation` in `@angular/compiler-cli`.\n    // It skips the program creation because we need to use `loadNgStructureAsync()`,\n    // and uses CustomTransformers.\n    _emit() {\n        benchmark_1.time('AngularCompilerPlugin._emit');\n        const program = this._program;\n        const allDiagnostics = [];\n        const diagMode = (this._firstRun || !this._forkTypeChecker) ?\n            diagnostics_1.DiagnosticMode.All : diagnostics_1.DiagnosticMode.Syntactic;\n        let emitResult;\n        try {\n            if (this._JitMode) {\n                const tsProgram = program;\n                const changedTsFiles = new Set();\n                if (this._firstRun) {\n                    // Check parameter diagnostics.\n                    benchmark_1.time('AngularCompilerPlugin._emit.ts.getOptionsDiagnostics');\n                    allDiagnostics.push(...tsProgram.getOptionsDiagnostics());\n                    benchmark_1.timeEnd('AngularCompilerPlugin._emit.ts.getOptionsDiagnostics');\n                }\n                else {\n                    // generate a list of changed files for emit\n                    // not needed on first run since a full program emit is required\n                    for (const changedFile of this._compilerHost.getChangedFilePaths()) {\n                        if (!/.(tsx|ts|json|js)$/.test(changedFile)) {\n                            continue;\n                        }\n                        // existing type definitions are not emitted\n                        if (changedFile.endsWith('.d.ts')) {\n                            continue;\n                        }\n                        changedTsFiles.add(changedFile);\n                    }\n                }\n                allDiagnostics.push(...diagnostics_1.gatherDiagnostics(tsProgram, this._JitMode, 'AngularCompilerPlugin._emit.ts', diagMode));\n                if (!diagnostics_1.hasErrors(allDiagnostics)) {\n                    if (this._firstRun || changedTsFiles.size > 20 || !this._hadFullJitEmit) {\n                        emitResult = tsProgram.emit(undefined, undefined, undefined, undefined, { before: this._transformers });\n                        this._hadFullJitEmit = !emitResult.emitSkipped;\n                        allDiagnostics.push(...emitResult.diagnostics);\n                    }\n                    else {\n                        for (const changedFile of changedTsFiles) {\n                            const sourceFile = tsProgram.getSourceFile(changedFile);\n                            if (!sourceFile) {\n                                continue;\n                            }\n                            const timeLabel = `AngularCompilerPlugin._emit.ts+${sourceFile.fileName}+.emit`;\n                            benchmark_1.time(timeLabel);\n                            emitResult = tsProgram.emit(sourceFile, undefined, undefined, undefined, { before: this._transformers });\n                            allDiagnostics.push(...emitResult.diagnostics);\n                            benchmark_1.timeEnd(timeLabel);\n                        }\n                    }\n                }\n            }\n            else {\n                const angularProgram = program;\n                // Check Angular structural diagnostics.\n                benchmark_1.time('AngularCompilerPlugin._emit.ng.getNgStructuralDiagnostics');\n                allDiagnostics.push(...angularProgram.getNgStructuralDiagnostics());\n                benchmark_1.timeEnd('AngularCompilerPlugin._emit.ng.getNgStructuralDiagnostics');\n                if (this._firstRun) {\n                    // Check TypeScript parameter diagnostics.\n                    benchmark_1.time('AngularCompilerPlugin._emit.ng.getTsOptionDiagnostics');\n                    allDiagnostics.push(...angularProgram.getTsOptionDiagnostics());\n                    benchmark_1.timeEnd('AngularCompilerPlugin._emit.ng.getTsOptionDiagnostics');\n                    // Check Angular parameter diagnostics.\n                    benchmark_1.time('AngularCompilerPlugin._emit.ng.getNgOptionDiagnostics');\n                    allDiagnostics.push(...angularProgram.getNgOptionDiagnostics());\n                    benchmark_1.timeEnd('AngularCompilerPlugin._emit.ng.getNgOptionDiagnostics');\n                }\n                allDiagnostics.push(...diagnostics_1.gatherDiagnostics(angularProgram, this._JitMode, 'AngularCompilerPlugin._emit.ng', diagMode));\n                if (!diagnostics_1.hasErrors(allDiagnostics)) {\n                    benchmark_1.time('AngularCompilerPlugin._emit.ng.emit');\n                    const extractI18n = !!this._compilerOptions.i18nOutFile;\n                    const emitFlags = extractI18n ? compiler_cli_1.EmitFlags.I18nBundle : compiler_cli_1.EmitFlags.Default;\n                    emitResult = angularProgram.emit({\n                        emitFlags, customTransformers: {\n                            beforeTs: this._transformers,\n                        },\n                    });\n                    allDiagnostics.push(...emitResult.diagnostics);\n                    if (extractI18n) {\n                        this.writeI18nOutFile();\n                    }\n                    benchmark_1.timeEnd('AngularCompilerPlugin._emit.ng.emit');\n                }\n            }\n        }\n        catch (e) {\n            benchmark_1.time('AngularCompilerPlugin._emit.catch');\n            // This function is available in the import below, but this way we avoid the dependency.\n            // import { isSyntaxError } from '@angular/compiler';\n            function isSyntaxError(error) {\n                return error['ngSyntaxError']; // tslint:disable-line:no-any\n            }\n            let errMsg;\n            let code;\n            if (isSyntaxError(e)) {\n                // don't report the stack for syntax errors as they are well known errors.\n                errMsg = e.message;\n                code = compiler_cli_1.DEFAULT_ERROR_CODE;\n            }\n            else {\n                errMsg = e.stack;\n                // It is not a syntax error we might have a program with unknown state, discard it.\n                this._program = undefined;\n                code = compiler_cli_1.UNKNOWN_ERROR_CODE;\n            }\n            allDiagnostics.push({ category: ts.DiagnosticCategory.Error, messageText: errMsg, code, source: compiler_cli_1.SOURCE });\n            benchmark_1.timeEnd('AngularCompilerPlugin._emit.catch');\n        }\n        benchmark_1.timeEnd('AngularCompilerPlugin._emit');\n        return { program, emitResult, diagnostics: allDiagnostics };\n    }\n    _validateLocale(locale) {\n        // Get the path of the common module.\n        const commonPath = path.dirname(require.resolve('@angular/common/package.json'));\n        // Check if the locale file exists\n        if (!fs.existsSync(path.resolve(commonPath, 'locales', `${locale}.js`))) {\n            // Check for an alternative locale (if the locale id was badly formatted).\n            const locales = fs.readdirSync(path.resolve(commonPath, 'locales'))\n                .filter(file => file.endsWith('.js'))\n                .map(file => file.replace('.js', ''));\n            let newLocale;\n            const normalizedLocale = locale.toLowerCase().replace(/_/g, '-');\n            for (const l of locales) {\n                if (l.toLowerCase() === normalizedLocale) {\n                    newLocale = l;\n                    break;\n                }\n            }\n            if (newLocale) {\n                locale = newLocale;\n            }\n            else {\n                // Check for a parent locale\n                const parentLocale = normalizedLocale.split('-')[0];\n                if (locales.indexOf(parentLocale) !== -1) {\n                    locale = parentLocale;\n                }\n                else {\n                    this._warnings.push(`AngularCompilerPlugin: Unable to load the locale data file ` +\n                        `\"@angular/common/locales/${locale}\", ` +\n                        `please check that \"${locale}\" is a valid locale id.\n            If needed, you can use \"registerLocaleData\" manually.`);\n                    return null;\n                }\n            }\n        }\n        return locale;\n    }\n}\nexports.AngularCompilerPlugin = AngularCompilerPlugin;\n"]},"metadata":{},"sourceType":"script"}