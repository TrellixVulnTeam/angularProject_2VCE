{"ast":null,"code":"\"use strict\";\n\nvar _createForOfIteratorHelper = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _toConsumableArray = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/toConsumableArray\");\n\nvar _classCallCheck = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.WebpackCompilerHost = void 0;\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nvar core_1 = require(\"@angular-devkit/core\");\n\nvar fs_1 = require(\"fs\");\n\nvar ts = require(\"typescript\");\n\nvar utils_1 = require(\"./utils\");\n\nvar dev = Math.floor(Math.random() * 10000);\n\nvar WebpackCompilerHost = /*#__PURE__*/function () {\n  function WebpackCompilerHost(_options, basePath, host, cacheSourceFiles) {\n    var directTemplateLoading = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n    var ngccProcessor = arguments.length > 5 ? arguments[5] : undefined;\n    var moduleResolutionCache = arguments.length > 6 ? arguments[6] : undefined;\n\n    _classCallCheck(this, WebpackCompilerHost);\n\n    this._options = _options;\n    this.cacheSourceFiles = cacheSourceFiles;\n    this.directTemplateLoading = directTemplateLoading;\n    this.ngccProcessor = ngccProcessor;\n    this.moduleResolutionCache = moduleResolutionCache;\n    this._changedFiles = new Set();\n    this._readResourceFiles = new Set();\n    this._sourceFileCache = new Map();\n    this._virtualFileExtensions = ['.js', '.js.map', '.ngfactory.js', '.ngfactory.js.map', '.ngsummary.json'];\n    this._virtualStyleFileExtensions = ['.shim.ngstyle.js', '.shim.ngstyle.js.map'];\n    this._syncHost = new core_1.virtualFs.SyncDelegateHost(host);\n    this._innerMemoryHost = new core_1.virtualFs.SimpleMemoryHost();\n    this._memoryHost = new core_1.virtualFs.SyncDelegateHost(this._innerMemoryHost);\n    this._basePath = core_1.normalize(basePath);\n  }\n\n  _createClass(WebpackCompilerHost, [{\n    key: \"virtualFiles\",\n    get: function get() {\n      return _toConsumableArray(this._memoryHost.delegate._cache.keys());\n    }\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      this._innerMemoryHost.reset();\n\n      this._changedFiles.clear();\n\n      this._readResourceFiles.clear();\n\n      this._sourceFileCache.clear();\n\n      this._resourceLoader = undefined;\n    }\n  }, {\n    key: \"denormalizePath\",\n    value: function denormalizePath(path) {\n      return core_1.getSystemPath(core_1.normalize(path));\n    }\n  }, {\n    key: \"resolve\",\n    value: function resolve(path) {\n      var p = core_1.normalize(path);\n\n      if (core_1.isAbsolute(p)) {\n        return p;\n      } else {\n        return core_1.join(this._basePath, p);\n      }\n    }\n  }, {\n    key: \"resetChangedFileTracker\",\n    value: function resetChangedFileTracker() {\n      this._changedFiles.clear();\n    }\n  }, {\n    key: \"getChangedFilePaths\",\n    value: function getChangedFilePaths() {\n      return _toConsumableArray(this._changedFiles);\n    }\n  }, {\n    key: \"getNgFactoryPaths\",\n    value: function getNgFactoryPaths() {\n      var _this = this;\n\n      return this.virtualFiles.filter(function (fileName) {\n        return fileName.endsWith('.ngfactory.js') || fileName.endsWith('.ngstyle.js');\n      }) // These paths are used by the virtual file system decorator so we must denormalize them.\n      .map(function (path) {\n        return _this.denormalizePath(path);\n      });\n    }\n  }, {\n    key: \"invalidate\",\n    value: function invalidate(fileName) {\n      var _this2 = this;\n\n      var fullPath = this.resolve(fileName);\n\n      this._sourceFileCache.delete(fullPath);\n\n      if (this.ngccProcessor) {\n        // Delete the ngcc processor cache using the TS-format file names.\n        this.ngccProcessor.invalidate(utils_1.forwardSlashPath(fileName));\n      }\n\n      var exists = false;\n\n      try {\n        exists = this._syncHost.isFile(fullPath);\n\n        if (exists) {\n          this._changedFiles.add(utils_1.workaroundResolve(fullPath));\n        }\n      } catch (_a) {} // File doesn't exist anymore and is not a factory, so we should delete the related\n      // virtual files.\n\n\n      if (!exists && fullPath.endsWith('.ts') && !(fullPath.endsWith('.ngfactory.ts') || fullPath.endsWith('.shim.ngstyle.ts'))) {\n        this._virtualFileExtensions.forEach(function (ext) {\n          var virtualFile = fullPath.slice(0, -3) + ext;\n\n          if (_this2._memoryHost.exists(virtualFile)) {\n            _this2._memoryHost.delete(virtualFile);\n          }\n        });\n      }\n\n      if (fullPath.endsWith('.ts')) {\n        return;\n      } // In case resolveJsonModule and allowJs we also need to remove virtual emitted files\n      // both if they exists or not.\n\n\n      if ((fullPath.endsWith('.js') || fullPath.endsWith('.json')) && !/(\\.(ngfactory|ngstyle)\\.js|ngsummary\\.json)$/.test(fullPath)) {\n        if (this._memoryHost.exists(fullPath)) {\n          this._memoryHost.delete(fullPath);\n        }\n\n        return;\n      }\n\n      if (!exists) {\n        // At this point we're only looking at resource files (html/css/scss/etc).\n        // If the original was deleted, we should delete the virtual files too.\n        // If the original wasn't deleted we should leave them to be overwritten, because webpack\n        // might begin the loading process before our plugin has re-emitted them.\n        var _iterator = _createForOfIteratorHelper(this._virtualStyleFileExtensions),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var ext = _step.value;\n            var virtualFile = fullPath + ext;\n\n            if (this._memoryHost.exists(virtualFile)) {\n              this._memoryHost.delete(virtualFile);\n            }\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n      }\n    }\n  }, {\n    key: \"fileExists\",\n    value: function fileExists(fileName) {\n      var delegate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      var p = this.resolve(fileName);\n\n      if (this._memoryHost.isFile(p)) {\n        return true;\n      }\n\n      if (!delegate) {\n        return false;\n      }\n\n      var exists = false;\n\n      try {\n        exists = this._syncHost.isFile(p);\n      } catch (_a) {}\n\n      return exists;\n    }\n  }, {\n    key: \"readFile\",\n    value: function readFile(fileName) {\n      var filePath = this.resolve(fileName);\n\n      try {\n        var content;\n\n        if (this._memoryHost.isFile(filePath)) {\n          content = this._memoryHost.read(filePath);\n        } else {\n          content = this._syncHost.read(filePath);\n        } // strip BOM\n\n\n        return core_1.virtualFs.fileBufferToString(content).replace(/^\\uFEFF/, '');\n      } catch (_a) {\n        return undefined;\n      }\n    }\n  }, {\n    key: \"readFileBuffer\",\n    value: function readFileBuffer(fileName) {\n      var filePath = this.resolve(fileName);\n\n      if (this._memoryHost.isFile(filePath)) {\n        return Buffer.from(this._memoryHost.read(filePath));\n      } else {\n        var content = this._syncHost.read(filePath);\n\n        return Buffer.from(content);\n      }\n    }\n  }, {\n    key: \"_makeStats\",\n    value: function _makeStats(stats) {\n      return {\n        isFile: function isFile() {\n          return stats.isFile();\n        },\n        isDirectory: function isDirectory() {\n          return stats.isDirectory();\n        },\n        isBlockDevice: function isBlockDevice() {\n          return stats.isBlockDevice && stats.isBlockDevice() || false;\n        },\n        isCharacterDevice: function isCharacterDevice() {\n          return stats.isCharacterDevice && stats.isCharacterDevice() || false;\n        },\n        isFIFO: function isFIFO() {\n          return stats.isFIFO && stats.isFIFO() || false;\n        },\n        isSymbolicLink: function isSymbolicLink() {\n          return stats.isSymbolicLink && stats.isSymbolicLink() || false;\n        },\n        isSocket: function isSocket() {\n          return stats.isSocket && stats.isSocket() || false;\n        },\n        dev: stats.dev === undefined ? dev : stats.dev,\n        ino: stats.ino === undefined ? Math.floor(Math.random() * 100000) : stats.ino,\n        mode: stats.mode === undefined ? parseInt('777', 8) : stats.mode,\n        nlink: stats.nlink === undefined ? 1 : stats.nlink,\n        uid: stats.uid || 0,\n        gid: stats.gid || 0,\n        rdev: stats.rdev || 0,\n        size: stats.size,\n        blksize: stats.blksize === undefined ? 512 : stats.blksize,\n        blocks: stats.blocks === undefined ? Math.ceil(stats.size / 512) : stats.blocks,\n        atime: stats.atime,\n        atimeMs: stats.atime.getTime(),\n        mtime: stats.mtime,\n        mtimeMs: stats.mtime.getTime(),\n        ctime: stats.ctime,\n        ctimeMs: stats.ctime.getTime(),\n        birthtime: stats.birthtime,\n        birthtimeMs: stats.birthtime.getTime()\n      };\n    }\n  }, {\n    key: \"stat\",\n    value: function stat(path) {\n      var p = this.resolve(path);\n      var stats = null;\n\n      try {\n        stats = this._memoryHost.stat(p) || this._syncHost.stat(p);\n      } catch (_a) {}\n\n      if (!stats) {\n        return null;\n      }\n\n      if (stats instanceof fs_1.Stats) {\n        return stats;\n      }\n\n      return this._makeStats(stats);\n    }\n  }, {\n    key: \"directoryExists\",\n    value: function directoryExists(directoryName) {\n      var p = this.resolve(directoryName);\n\n      try {\n        return this._memoryHost.isDirectory(p) || this._syncHost.isDirectory(p);\n      } catch (_a) {\n        return false;\n      }\n    }\n  }, {\n    key: \"getDirectories\",\n    value: function getDirectories(path) {\n      var _this3 = this;\n\n      var p = this.resolve(path);\n      var delegated;\n\n      try {\n        delegated = this._syncHost.list(p).filter(function (x) {\n          try {\n            return _this3._syncHost.isDirectory(core_1.join(p, x));\n          } catch (_a) {\n            return false;\n          }\n        });\n      } catch (_a) {\n        delegated = [];\n      }\n\n      var memory;\n\n      try {\n        memory = this._memoryHost.list(p).filter(function (x) {\n          try {\n            return _this3._memoryHost.isDirectory(core_1.join(p, x));\n          } catch (_a) {\n            return false;\n          }\n        });\n      } catch (_b) {\n        memory = [];\n      }\n\n      return _toConsumableArray(new Set([].concat(_toConsumableArray(delegated), _toConsumableArray(memory))));\n    }\n  }, {\n    key: \"getSourceFile\",\n    value: function getSourceFile(fileName, languageVersion, onError) {\n      var p = this.resolve(fileName);\n\n      try {\n        var cached = this._sourceFileCache.get(p);\n\n        if (cached) {\n          return cached;\n        }\n\n        var content = this.readFile(fileName);\n\n        if (content !== undefined) {\n          var sf = ts.createSourceFile(utils_1.workaroundResolve(fileName), content, languageVersion, true);\n\n          if (this.cacheSourceFiles) {\n            this._sourceFileCache.set(p, sf);\n          }\n\n          return sf;\n        }\n      } catch (e) {\n        if (onError) {\n          onError(e.message);\n        }\n      }\n\n      return undefined;\n    }\n  }, {\n    key: \"getDefaultLibFileName\",\n    value: function getDefaultLibFileName(options) {\n      return ts.createCompilerHost(options).getDefaultLibFileName(options);\n    } // This is due to typescript CompilerHost interface being weird on writeFile. This shuts down\n    // typings in WebStorm.\n\n  }, {\n    key: \"writeFile\",\n    get: function get() {\n      var _this4 = this;\n\n      return function (fileName, data, _writeByteOrderMark, onError, _sourceFiles) {\n        var p = _this4.resolve(fileName);\n\n        try {\n          _this4._memoryHost.write(p, core_1.virtualFs.stringToFileBuffer(data));\n        } catch (e) {\n          if (onError) {\n            onError(e.message);\n          }\n        }\n      };\n    }\n  }, {\n    key: \"getCurrentDirectory\",\n    value: function getCurrentDirectory() {\n      return utils_1.workaroundResolve(this._basePath);\n    }\n  }, {\n    key: \"getCanonicalFileName\",\n    value: function getCanonicalFileName(fileName) {\n      var path = utils_1.workaroundResolve(this.resolve(fileName));\n      return this.useCaseSensitiveFileNames() ? path : path.toLowerCase();\n    }\n  }, {\n    key: \"useCaseSensitiveFileNames\",\n    value: function useCaseSensitiveFileNames() {\n      return !process.platform.startsWith('win32');\n    }\n  }, {\n    key: \"getNewLine\",\n    value: function getNewLine() {\n      return '\\n';\n    }\n  }, {\n    key: \"setResourceLoader\",\n    value: function setResourceLoader(resourceLoader) {\n      this._resourceLoader = resourceLoader;\n    }\n  }, {\n    key: \"readResource\",\n    value: function readResource(fileName) {\n      // These paths are meant to be used by the loader so we must denormalize them\n      var denormalizedFileName = utils_1.workaroundResolve(fileName);\n\n      this._readResourceFiles.add(denormalizedFileName);\n\n      if (this.directTemplateLoading && (fileName.endsWith('.html') || fileName.endsWith('.svg'))) {\n        return this.readFile(fileName);\n      }\n\n      if (this._resourceLoader) {\n        return this._resourceLoader.get(denormalizedFileName);\n      } else {\n        return this.readFile(fileName);\n      }\n    }\n  }, {\n    key: \"getModifiedResourceFiles\",\n    value: function getModifiedResourceFiles() {\n      var modifiedFiles = new Set();\n\n      var _iterator2 = _createForOfIteratorHelper(this._changedFiles),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var changedFile = _step2.value;\n          var denormalizedFileName = utils_1.workaroundResolve(changedFile);\n\n          if (this._readResourceFiles.has(denormalizedFileName)) {\n            modifiedFiles.add(denormalizedFileName);\n          }\n\n          if (!this._resourceLoader) {\n            continue;\n          }\n\n          var _iterator3 = _createForOfIteratorHelper(this._resourceLoader.getAffectedResources(denormalizedFileName)),\n              _step3;\n\n          try {\n            for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n              var resourcePath = _step3.value;\n              modifiedFiles.add(resourcePath);\n            }\n          } catch (err) {\n            _iterator3.e(err);\n          } finally {\n            _iterator3.f();\n          }\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n\n      return modifiedFiles;\n    }\n  }, {\n    key: \"trace\",\n    value: function trace(message) {\n      // tslint:disable-next-line: no-console\n      console.log(message);\n    }\n  }, {\n    key: \"resolveModuleNames\",\n    value: function resolveModuleNames(moduleNames, containingFile) {\n      var _this5 = this;\n\n      return moduleNames.map(function (moduleName) {\n        var _ts$resolveModuleName = ts.resolveModuleName(moduleName, utils_1.workaroundResolve(containingFile), _this5._options, _this5, _this5.moduleResolutionCache),\n            resolvedModule = _ts$resolveModuleName.resolvedModule;\n\n        if (_this5._options.enableIvy && resolvedModule && _this5.ngccProcessor) {\n          _this5.ngccProcessor.processModule(moduleName, resolvedModule);\n        }\n\n        return resolvedModule;\n      });\n    }\n  }, {\n    key: \"resolveTypeReferenceDirectives\",\n    value: function resolveTypeReferenceDirectives(typeReferenceDirectiveNames, containingFile, redirectedReference) {\n      var _this6 = this;\n\n      return typeReferenceDirectiveNames.map(function (moduleName) {\n        var _ts$resolveTypeRefere = ts.resolveTypeReferenceDirective(moduleName, utils_1.workaroundResolve(containingFile), _this6._options, _this6, redirectedReference),\n            resolvedTypeReferenceDirective = _ts$resolveTypeRefere.resolvedTypeReferenceDirective;\n\n        if (_this6._options.enableIvy && resolvedTypeReferenceDirective && _this6.ngccProcessor) {\n          _this6.ngccProcessor.processModule(moduleName, resolvedTypeReferenceDirective);\n        }\n\n        return resolvedTypeReferenceDirective;\n      });\n    }\n  }]);\n\n  return WebpackCompilerHost;\n}();\n\nexports.WebpackCompilerHost = WebpackCompilerHost;","map":{"version":3,"sources":["/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@ngtools/webpack/src/compiler_host.js"],"names":["Object","defineProperty","exports","value","WebpackCompilerHost","core_1","require","fs_1","ts","utils_1","dev","Math","floor","random","_options","basePath","host","cacheSourceFiles","directTemplateLoading","ngccProcessor","moduleResolutionCache","_changedFiles","Set","_readResourceFiles","_sourceFileCache","Map","_virtualFileExtensions","_virtualStyleFileExtensions","_syncHost","virtualFs","SyncDelegateHost","_innerMemoryHost","SimpleMemoryHost","_memoryHost","_basePath","normalize","delegate","_cache","keys","reset","clear","_resourceLoader","undefined","path","getSystemPath","p","isAbsolute","join","virtualFiles","filter","fileName","endsWith","map","denormalizePath","fullPath","resolve","delete","invalidate","forwardSlashPath","exists","isFile","add","workaroundResolve","_a","forEach","ext","virtualFile","slice","test","filePath","content","read","fileBufferToString","replace","Buffer","from","stats","isDirectory","isBlockDevice","isCharacterDevice","isFIFO","isSymbolicLink","isSocket","ino","mode","parseInt","nlink","uid","gid","rdev","size","blksize","blocks","ceil","atime","atimeMs","getTime","mtime","mtimeMs","ctime","ctimeMs","birthtime","birthtimeMs","stat","Stats","_makeStats","directoryName","delegated","list","x","memory","_b","languageVersion","onError","cached","get","readFile","sf","createSourceFile","set","e","message","options","createCompilerHost","getDefaultLibFileName","data","_writeByteOrderMark","_sourceFiles","write","stringToFileBuffer","useCaseSensitiveFileNames","toLowerCase","process","platform","startsWith","resourceLoader","denormalizedFileName","modifiedFiles","changedFile","has","getAffectedResources","resourcePath","console","log","moduleNames","containingFile","moduleName","resolveModuleName","resolvedModule","enableIvy","processModule","typeReferenceDirectiveNames","redirectedReference","resolveTypeReferenceDirective","resolvedTypeReferenceDirective"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.WebpackCompilerHost = void 0;\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst core_1 = require(\"@angular-devkit/core\");\nconst fs_1 = require(\"fs\");\nconst ts = require(\"typescript\");\nconst utils_1 = require(\"./utils\");\nconst dev = Math.floor(Math.random() * 10000);\nclass WebpackCompilerHost {\n    constructor(_options, basePath, host, cacheSourceFiles, directTemplateLoading = false, ngccProcessor, moduleResolutionCache) {\n        this._options = _options;\n        this.cacheSourceFiles = cacheSourceFiles;\n        this.directTemplateLoading = directTemplateLoading;\n        this.ngccProcessor = ngccProcessor;\n        this.moduleResolutionCache = moduleResolutionCache;\n        this._changedFiles = new Set();\n        this._readResourceFiles = new Set();\n        this._sourceFileCache = new Map();\n        this._virtualFileExtensions = [\n            '.js',\n            '.js.map',\n            '.ngfactory.js',\n            '.ngfactory.js.map',\n            '.ngsummary.json',\n        ];\n        this._virtualStyleFileExtensions = [\n            '.shim.ngstyle.js',\n            '.shim.ngstyle.js.map',\n        ];\n        this._syncHost = new core_1.virtualFs.SyncDelegateHost(host);\n        this._innerMemoryHost = new core_1.virtualFs.SimpleMemoryHost();\n        this._memoryHost = new core_1.virtualFs.SyncDelegateHost(this._innerMemoryHost);\n        this._basePath = core_1.normalize(basePath);\n    }\n    get virtualFiles() {\n        return [...this._memoryHost.delegate._cache.keys()];\n    }\n    reset() {\n        this._innerMemoryHost.reset();\n        this._changedFiles.clear();\n        this._readResourceFiles.clear();\n        this._sourceFileCache.clear();\n        this._resourceLoader = undefined;\n    }\n    denormalizePath(path) {\n        return core_1.getSystemPath(core_1.normalize(path));\n    }\n    resolve(path) {\n        const p = core_1.normalize(path);\n        if (core_1.isAbsolute(p)) {\n            return p;\n        }\n        else {\n            return core_1.join(this._basePath, p);\n        }\n    }\n    resetChangedFileTracker() {\n        this._changedFiles.clear();\n    }\n    getChangedFilePaths() {\n        return [...this._changedFiles];\n    }\n    getNgFactoryPaths() {\n        return (this.virtualFiles\n            .filter(fileName => fileName.endsWith('.ngfactory.js') || fileName.endsWith('.ngstyle.js'))\n            // These paths are used by the virtual file system decorator so we must denormalize them.\n            .map(path => this.denormalizePath(path)));\n    }\n    invalidate(fileName) {\n        const fullPath = this.resolve(fileName);\n        this._sourceFileCache.delete(fullPath);\n        if (this.ngccProcessor) {\n            // Delete the ngcc processor cache using the TS-format file names.\n            this.ngccProcessor.invalidate(utils_1.forwardSlashPath(fileName));\n        }\n        let exists = false;\n        try {\n            exists = this._syncHost.isFile(fullPath);\n            if (exists) {\n                this._changedFiles.add(utils_1.workaroundResolve(fullPath));\n            }\n        }\n        catch (_a) { }\n        // File doesn't exist anymore and is not a factory, so we should delete the related\n        // virtual files.\n        if (!exists &&\n            fullPath.endsWith('.ts') &&\n            !(fullPath.endsWith('.ngfactory.ts') || fullPath.endsWith('.shim.ngstyle.ts'))) {\n            this._virtualFileExtensions.forEach(ext => {\n                const virtualFile = (fullPath.slice(0, -3) + ext);\n                if (this._memoryHost.exists(virtualFile)) {\n                    this._memoryHost.delete(virtualFile);\n                }\n            });\n        }\n        if (fullPath.endsWith('.ts')) {\n            return;\n        }\n        // In case resolveJsonModule and allowJs we also need to remove virtual emitted files\n        // both if they exists or not.\n        if ((fullPath.endsWith('.js') || fullPath.endsWith('.json')) &&\n            !/(\\.(ngfactory|ngstyle)\\.js|ngsummary\\.json)$/.test(fullPath)) {\n            if (this._memoryHost.exists(fullPath)) {\n                this._memoryHost.delete(fullPath);\n            }\n            return;\n        }\n        if (!exists) {\n            // At this point we're only looking at resource files (html/css/scss/etc).\n            // If the original was deleted, we should delete the virtual files too.\n            // If the original wasn't deleted we should leave them to be overwritten, because webpack\n            // might begin the loading process before our plugin has re-emitted them.\n            for (const ext of this._virtualStyleFileExtensions) {\n                const virtualFile = (fullPath + ext);\n                if (this._memoryHost.exists(virtualFile)) {\n                    this._memoryHost.delete(virtualFile);\n                }\n            }\n        }\n    }\n    fileExists(fileName, delegate = true) {\n        const p = this.resolve(fileName);\n        if (this._memoryHost.isFile(p)) {\n            return true;\n        }\n        if (!delegate) {\n            return false;\n        }\n        let exists = false;\n        try {\n            exists = this._syncHost.isFile(p);\n        }\n        catch (_a) { }\n        return exists;\n    }\n    readFile(fileName) {\n        const filePath = this.resolve(fileName);\n        try {\n            let content;\n            if (this._memoryHost.isFile(filePath)) {\n                content = this._memoryHost.read(filePath);\n            }\n            else {\n                content = this._syncHost.read(filePath);\n            }\n            // strip BOM\n            return core_1.virtualFs.fileBufferToString(content).replace(/^\\uFEFF/, '');\n        }\n        catch (_a) {\n            return undefined;\n        }\n    }\n    readFileBuffer(fileName) {\n        const filePath = this.resolve(fileName);\n        if (this._memoryHost.isFile(filePath)) {\n            return Buffer.from(this._memoryHost.read(filePath));\n        }\n        else {\n            const content = this._syncHost.read(filePath);\n            return Buffer.from(content);\n        }\n    }\n    _makeStats(stats) {\n        return {\n            isFile: () => stats.isFile(),\n            isDirectory: () => stats.isDirectory(),\n            isBlockDevice: () => (stats.isBlockDevice && stats.isBlockDevice()) || false,\n            isCharacterDevice: () => (stats.isCharacterDevice && stats.isCharacterDevice()) || false,\n            isFIFO: () => (stats.isFIFO && stats.isFIFO()) || false,\n            isSymbolicLink: () => (stats.isSymbolicLink && stats.isSymbolicLink()) || false,\n            isSocket: () => (stats.isSocket && stats.isSocket()) || false,\n            dev: stats.dev === undefined ? dev : stats.dev,\n            ino: stats.ino === undefined ? Math.floor(Math.random() * 100000) : stats.ino,\n            mode: stats.mode === undefined ? parseInt('777', 8) : stats.mode,\n            nlink: stats.nlink === undefined ? 1 : stats.nlink,\n            uid: stats.uid || 0,\n            gid: stats.gid || 0,\n            rdev: stats.rdev || 0,\n            size: stats.size,\n            blksize: stats.blksize === undefined ? 512 : stats.blksize,\n            blocks: stats.blocks === undefined ? Math.ceil(stats.size / 512) : stats.blocks,\n            atime: stats.atime,\n            atimeMs: stats.atime.getTime(),\n            mtime: stats.mtime,\n            mtimeMs: stats.mtime.getTime(),\n            ctime: stats.ctime,\n            ctimeMs: stats.ctime.getTime(),\n            birthtime: stats.birthtime,\n            birthtimeMs: stats.birthtime.getTime(),\n        };\n    }\n    stat(path) {\n        const p = this.resolve(path);\n        let stats = null;\n        try {\n            stats = this._memoryHost.stat(p) || this._syncHost.stat(p);\n        }\n        catch (_a) { }\n        if (!stats) {\n            return null;\n        }\n        if (stats instanceof fs_1.Stats) {\n            return stats;\n        }\n        return this._makeStats(stats);\n    }\n    directoryExists(directoryName) {\n        const p = this.resolve(directoryName);\n        try {\n            return this._memoryHost.isDirectory(p) || this._syncHost.isDirectory(p);\n        }\n        catch (_a) {\n            return false;\n        }\n    }\n    getDirectories(path) {\n        const p = this.resolve(path);\n        let delegated;\n        try {\n            delegated = this._syncHost.list(p).filter(x => {\n                try {\n                    return this._syncHost.isDirectory(core_1.join(p, x));\n                }\n                catch (_a) {\n                    return false;\n                }\n            });\n        }\n        catch (_a) {\n            delegated = [];\n        }\n        let memory;\n        try {\n            memory = this._memoryHost.list(p).filter(x => {\n                try {\n                    return this._memoryHost.isDirectory(core_1.join(p, x));\n                }\n                catch (_a) {\n                    return false;\n                }\n            });\n        }\n        catch (_b) {\n            memory = [];\n        }\n        return [...new Set([...delegated, ...memory])];\n    }\n    getSourceFile(fileName, languageVersion, onError) {\n        const p = this.resolve(fileName);\n        try {\n            const cached = this._sourceFileCache.get(p);\n            if (cached) {\n                return cached;\n            }\n            const content = this.readFile(fileName);\n            if (content !== undefined) {\n                const sf = ts.createSourceFile(utils_1.workaroundResolve(fileName), content, languageVersion, true);\n                if (this.cacheSourceFiles) {\n                    this._sourceFileCache.set(p, sf);\n                }\n                return sf;\n            }\n        }\n        catch (e) {\n            if (onError) {\n                onError(e.message);\n            }\n        }\n        return undefined;\n    }\n    getDefaultLibFileName(options) {\n        return ts.createCompilerHost(options).getDefaultLibFileName(options);\n    }\n    // This is due to typescript CompilerHost interface being weird on writeFile. This shuts down\n    // typings in WebStorm.\n    get writeFile() {\n        return (fileName, data, _writeByteOrderMark, onError, _sourceFiles) => {\n            const p = this.resolve(fileName);\n            try {\n                this._memoryHost.write(p, core_1.virtualFs.stringToFileBuffer(data));\n            }\n            catch (e) {\n                if (onError) {\n                    onError(e.message);\n                }\n            }\n        };\n    }\n    getCurrentDirectory() {\n        return utils_1.workaroundResolve(this._basePath);\n    }\n    getCanonicalFileName(fileName) {\n        const path = utils_1.workaroundResolve(this.resolve(fileName));\n        return this.useCaseSensitiveFileNames() ? path : path.toLowerCase();\n    }\n    useCaseSensitiveFileNames() {\n        return !process.platform.startsWith('win32');\n    }\n    getNewLine() {\n        return '\\n';\n    }\n    setResourceLoader(resourceLoader) {\n        this._resourceLoader = resourceLoader;\n    }\n    readResource(fileName) {\n        // These paths are meant to be used by the loader so we must denormalize them\n        const denormalizedFileName = utils_1.workaroundResolve(fileName);\n        this._readResourceFiles.add(denormalizedFileName);\n        if (this.directTemplateLoading && (fileName.endsWith('.html') || fileName.endsWith('.svg'))) {\n            return this.readFile(fileName);\n        }\n        if (this._resourceLoader) {\n            return this._resourceLoader.get(denormalizedFileName);\n        }\n        else {\n            return this.readFile(fileName);\n        }\n    }\n    getModifiedResourceFiles() {\n        const modifiedFiles = new Set();\n        for (const changedFile of this._changedFiles) {\n            const denormalizedFileName = utils_1.workaroundResolve(changedFile);\n            if (this._readResourceFiles.has(denormalizedFileName)) {\n                modifiedFiles.add(denormalizedFileName);\n            }\n            if (!this._resourceLoader) {\n                continue;\n            }\n            for (const resourcePath of this._resourceLoader.getAffectedResources(denormalizedFileName)) {\n                modifiedFiles.add(resourcePath);\n            }\n        }\n        return modifiedFiles;\n    }\n    trace(message) {\n        // tslint:disable-next-line: no-console\n        console.log(message);\n    }\n    resolveModuleNames(moduleNames, containingFile) {\n        return moduleNames.map(moduleName => {\n            const { resolvedModule } = ts.resolveModuleName(moduleName, utils_1.workaroundResolve(containingFile), this._options, this, this.moduleResolutionCache);\n            if (this._options.enableIvy && resolvedModule && this.ngccProcessor) {\n                this.ngccProcessor.processModule(moduleName, resolvedModule);\n            }\n            return resolvedModule;\n        });\n    }\n    resolveTypeReferenceDirectives(typeReferenceDirectiveNames, containingFile, redirectedReference) {\n        return typeReferenceDirectiveNames.map(moduleName => {\n            const { resolvedTypeReferenceDirective } = ts.resolveTypeReferenceDirective(moduleName, utils_1.workaroundResolve(containingFile), this._options, this, redirectedReference);\n            if (this._options.enableIvy && resolvedTypeReferenceDirective && this.ngccProcessor) {\n                this.ngccProcessor.processModule(moduleName, resolvedTypeReferenceDirective);\n            }\n            return resolvedTypeReferenceDirective;\n        });\n    }\n}\nexports.WebpackCompilerHost = WebpackCompilerHost;\n"]},"metadata":{},"sourceType":"script"}