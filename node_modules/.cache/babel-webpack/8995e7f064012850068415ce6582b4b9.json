{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nvar _classCallCheck = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/createClass\");\n\nvar concord = require(\"./concord\");\n\nvar DescriptionFileUtils = require(\"./DescriptionFileUtils\");\n\nvar forEachBail = require(\"./forEachBail\");\n\nmodule.exports = /*#__PURE__*/function () {\n  function ConcordExtensionsPlugin(source, options, target) {\n    _classCallCheck(this, ConcordExtensionsPlugin);\n\n    this.source = source;\n    this.options = options;\n    this.target = target;\n  }\n\n  _createClass(ConcordExtensionsPlugin, [{\n    key: \"apply\",\n    value: function apply(resolver) {\n      var target = resolver.ensureHook(this.target);\n      resolver.getHook(this.source).tapAsync(\"ConcordExtensionsPlugin\", function (request, resolveContext, callback) {\n        var concordField = DescriptionFileUtils.getField(request.descriptionFileData, \"concord\");\n        if (!concordField) return callback();\n        var extensions = concord.getExtensions(request.context, concordField);\n        if (!extensions) return callback();\n        forEachBail(extensions, function (appending, callback) {\n          var obj = Object.assign({}, request, {\n            path: request.path + appending,\n            relativePath: request.relativePath && request.relativePath + appending\n          });\n          resolver.doResolve(target, obj, \"concord extension: \" + appending, resolveContext, callback);\n        }, function (err, result) {\n          if (err) return callback(err); // Don't allow other processing\n\n          if (result === undefined) return callback(null, null);\n          callback(null, result);\n        });\n      });\n    }\n  }]);\n\n  return ConcordExtensionsPlugin;\n}();","map":{"version":3,"sources":["/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/webpack/node_modules/enhanced-resolve/lib/ConcordExtensionsPlugin.js"],"names":["concord","require","DescriptionFileUtils","forEachBail","module","exports","source","options","target","resolver","ensureHook","getHook","tapAsync","request","resolveContext","callback","concordField","getField","descriptionFileData","extensions","getExtensions","context","appending","obj","Object","assign","path","relativePath","doResolve","err","result","undefined"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;;;;;AAEA,IAAMA,OAAO,GAAGC,OAAO,CAAC,WAAD,CAAvB;;AACA,IAAMC,oBAAoB,GAAGD,OAAO,CAAC,wBAAD,CAApC;;AACA,IAAME,WAAW,GAAGF,OAAO,CAAC,eAAD,CAA3B;;AAEAG,MAAM,CAACC,OAAP;AACC,mCAAYC,MAAZ,EAAoBC,OAApB,EAA6BC,MAA7B,EAAqC;AAAA;;AACpC,SAAKF,MAAL,GAAcA,MAAd;AACA,SAAKC,OAAL,GAAeA,OAAf;AACA,SAAKC,MAAL,GAAcA,MAAd;AACA;;AALF;AAAA;AAAA,WAOC,eAAMC,QAAN,EAAgB;AACf,UAAMD,MAAM,GAAGC,QAAQ,CAACC,UAAT,CAAoB,KAAKF,MAAzB,CAAf;AACAC,MAAAA,QAAQ,CACNE,OADF,CACU,KAAKL,MADf,EAEEM,QAFF,CAGE,yBAHF,EAIE,UAACC,OAAD,EAAUC,cAAV,EAA0BC,QAA1B,EAAuC;AACtC,YAAMC,YAAY,GAAGd,oBAAoB,CAACe,QAArB,CACpBJ,OAAO,CAACK,mBADY,EAEpB,SAFoB,CAArB;AAIA,YAAI,CAACF,YAAL,EAAmB,OAAOD,QAAQ,EAAf;AACnB,YAAMI,UAAU,GAAGnB,OAAO,CAACoB,aAAR,CAClBP,OAAO,CAACQ,OADU,EAElBL,YAFkB,CAAnB;AAIA,YAAI,CAACG,UAAL,EAAiB,OAAOJ,QAAQ,EAAf;AACjBZ,QAAAA,WAAW,CACVgB,UADU,EAEV,UAACG,SAAD,EAAYP,QAAZ,EAAyB;AACxB,cAAMQ,GAAG,GAAGC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBZ,OAAlB,EAA2B;AACtCa,YAAAA,IAAI,EAAEb,OAAO,CAACa,IAAR,GAAeJ,SADiB;AAEtCK,YAAAA,YAAY,EACXd,OAAO,CAACc,YAAR,IAAwBd,OAAO,CAACc,YAAR,GAAuBL;AAHV,WAA3B,CAAZ;AAKAb,UAAAA,QAAQ,CAACmB,SAAT,CACCpB,MADD,EAECe,GAFD,EAGC,wBAAwBD,SAHzB,EAICR,cAJD,EAKCC,QALD;AAOA,SAfS,EAgBV,UAACc,GAAD,EAAMC,MAAN,EAAiB;AAChB,cAAID,GAAJ,EAAS,OAAOd,QAAQ,CAACc,GAAD,CAAf,CADO,CAGhB;;AACA,cAAIC,MAAM,KAAKC,SAAf,EAA0B,OAAOhB,QAAQ,CAAC,IAAD,EAAO,IAAP,CAAf;AAC1BA,UAAAA,QAAQ,CAAC,IAAD,EAAOe,MAAP,CAAR;AACA,SAtBS,CAAX;AAwBA,OAvCH;AAyCA;AAlDF;;AAAA;AAAA","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst concord = require(\"./concord\");\nconst DescriptionFileUtils = require(\"./DescriptionFileUtils\");\nconst forEachBail = require(\"./forEachBail\");\n\nmodule.exports = class ConcordExtensionsPlugin {\n\tconstructor(source, options, target) {\n\t\tthis.source = source;\n\t\tthis.options = options;\n\t\tthis.target = target;\n\t}\n\n\tapply(resolver) {\n\t\tconst target = resolver.ensureHook(this.target);\n\t\tresolver\n\t\t\t.getHook(this.source)\n\t\t\t.tapAsync(\n\t\t\t\t\"ConcordExtensionsPlugin\",\n\t\t\t\t(request, resolveContext, callback) => {\n\t\t\t\t\tconst concordField = DescriptionFileUtils.getField(\n\t\t\t\t\t\trequest.descriptionFileData,\n\t\t\t\t\t\t\"concord\"\n\t\t\t\t\t);\n\t\t\t\t\tif (!concordField) return callback();\n\t\t\t\t\tconst extensions = concord.getExtensions(\n\t\t\t\t\t\trequest.context,\n\t\t\t\t\t\tconcordField\n\t\t\t\t\t);\n\t\t\t\t\tif (!extensions) return callback();\n\t\t\t\t\tforEachBail(\n\t\t\t\t\t\textensions,\n\t\t\t\t\t\t(appending, callback) => {\n\t\t\t\t\t\t\tconst obj = Object.assign({}, request, {\n\t\t\t\t\t\t\t\tpath: request.path + appending,\n\t\t\t\t\t\t\t\trelativePath:\n\t\t\t\t\t\t\t\t\trequest.relativePath && request.relativePath + appending\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\tresolver.doResolve(\n\t\t\t\t\t\t\t\ttarget,\n\t\t\t\t\t\t\t\tobj,\n\t\t\t\t\t\t\t\t\"concord extension: \" + appending,\n\t\t\t\t\t\t\t\tresolveContext,\n\t\t\t\t\t\t\t\tcallback\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t},\n\t\t\t\t\t\t(err, result) => {\n\t\t\t\t\t\t\tif (err) return callback(err);\n\n\t\t\t\t\t\t\t// Don't allow other processing\n\t\t\t\t\t\t\tif (result === undefined) return callback(null, null);\n\t\t\t\t\t\t\tcallback(null, result);\n\t\t\t\t\t\t}\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t);\n\t}\n};\n"]},"metadata":{},"sourceType":"script"}