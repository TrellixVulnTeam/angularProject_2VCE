{"ast":null,"code":"var _regeneratorRuntime = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\n/**\n * Runner middleware is responsible for communication with `karma run`.\n *\n * It basically triggers a test run and streams stdout back.\n */\nvar _ = require('lodash');\n\nvar path = require('path');\n\nvar helper = require('../helper');\n\nvar log = require('../logger').create();\n\nvar constant = require('../constants');\n\nvar json = require('body-parser').json(); // TODO(vojta): disable when single-run mode\n\n\nfunction createRunnerMiddleware(emitter, fileList, capturedBrowsers, reporter, executor,\n/* config.protocol */\nprotocol,\n/* config.hostname */\nhostname,\n/* config.port */\nport,\n/* config.urlRoot */\nurlRoot, config) {\n  helper.saveOriginalArgs(config);\n  return function (request, response, next) {\n    if (request.url !== '/__run__' && request.url !== urlRoot + 'run') {\n      return next();\n    }\n\n    log.debug('Execution (fired by runner)');\n    response.writeHead(200);\n\n    if (!capturedBrowsers.length) {\n      var url = \"\".concat(protocol, \"//\").concat(hostname, \":\").concat(port).concat(urlRoot);\n      return response.end(\"No captured browser, open \".concat(url, \"\\n\"));\n    }\n\n    json(request, response, function () {\n      if (!capturedBrowsers.areAllReady([])) {\n        response.write('Waiting for previous execution...\\n');\n      }\n\n      var data = request.body;\n      updateClientArgs(data);\n      handleRun(data);\n      refreshFileList(data).then(function () {\n        executor.schedule();\n      }).catch(function (error) {\n        var errorMessage = \"Error during refresh file list. \".concat(error.stack || error);\n        executor.scheduleError(errorMessage);\n      });\n    });\n\n    function updateClientArgs(data) {\n      helper.restoreOriginalArgs(config);\n\n      if (_.isEmpty(data.args)) {\n        log.debug('Ignoring empty client.args from run command');\n      } else if (_.isArray(data.args) && _.isArray(config.client.args) || _.isPlainObject(data.args) && _.isPlainObject(config.client.args)) {\n        log.debug('Merging client.args with ', data.args);\n        config.client.args = _.merge(config.client.args, data.args);\n      } else {\n        log.warn('Replacing client.args with ', data.args, ' as their types do not match.');\n        config.client.args = data.args;\n      }\n    }\n\n    function refreshFileList(_x) {\n      return _refreshFileList.apply(this, arguments);\n    }\n\n    function _refreshFileList() {\n      _refreshFileList = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(data) {\n        var fullRefresh;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                fullRefresh = true;\n\n                if (!helper.isArray(data.changedFiles)) {\n                  _context4.next = 4;\n                  break;\n                }\n\n                _context4.next = 4;\n                return Promise.all(data.changedFiles.map( /*#__PURE__*/function () {\n                  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(filepath) {\n                    return _regeneratorRuntime.wrap(function _callee$(_context) {\n                      while (1) {\n                        switch (_context.prev = _context.next) {\n                          case 0:\n                            _context.next = 2;\n                            return fileList.changeFile(path.resolve(config.basePath, filepath));\n\n                          case 2:\n                            fullRefresh = false;\n\n                          case 3:\n                          case \"end\":\n                            return _context.stop();\n                        }\n                      }\n                    }, _callee);\n                  }));\n\n                  return function (_x2) {\n                    return _ref.apply(this, arguments);\n                  };\n                }()));\n\n              case 4:\n                if (!helper.isArray(data.addedFiles)) {\n                  _context4.next = 7;\n                  break;\n                }\n\n                _context4.next = 7;\n                return Promise.all(data.addedFiles.map( /*#__PURE__*/function () {\n                  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(filepath) {\n                    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n                      while (1) {\n                        switch (_context2.prev = _context2.next) {\n                          case 0:\n                            _context2.next = 2;\n                            return fileList.addFile(path.resolve(config.basePath, filepath));\n\n                          case 2:\n                            fullRefresh = false;\n\n                          case 3:\n                          case \"end\":\n                            return _context2.stop();\n                        }\n                      }\n                    }, _callee2);\n                  }));\n\n                  return function (_x3) {\n                    return _ref2.apply(this, arguments);\n                  };\n                }()));\n\n              case 7:\n                if (!helper.isArray(data.removedFiles)) {\n                  _context4.next = 10;\n                  break;\n                }\n\n                _context4.next = 10;\n                return Promise.all(data.removedFiles.map( /*#__PURE__*/function () {\n                  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(filepath) {\n                    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n                      while (1) {\n                        switch (_context3.prev = _context3.next) {\n                          case 0:\n                            _context3.next = 2;\n                            return fileList.removeFile(path.resolve(config.basePath, filepath));\n\n                          case 2:\n                            fullRefresh = false;\n\n                          case 3:\n                          case \"end\":\n                            return _context3.stop();\n                        }\n                      }\n                    }, _callee3);\n                  }));\n\n                  return function (_x4) {\n                    return _ref3.apply(this, arguments);\n                  };\n                }()));\n\n              case 10:\n                if (!(fullRefresh && data.refresh !== false)) {\n                  _context4.next = 14;\n                  break;\n                }\n\n                log.debug('Refreshing all the files / patterns');\n                _context4.next = 14;\n                return fileList.refresh();\n\n              case 14:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4);\n      }));\n      return _refreshFileList.apply(this, arguments);\n    }\n\n    function handleRun(data) {\n      emitter.once('run_start', function () {\n        var responseWrite = response.write.bind(response);\n        responseWrite.colors = data.colors;\n        reporter.addAdapter(responseWrite); // clean up, close runner response\n\n        emitter.once('run_complete', function (_browsers, results) {\n          reporter.removeAdapter(responseWrite);\n          var emptyTestSuite = results.failed + results.success === 0 ? 0 : 1;\n          response.end(constant.EXIT_CODE + emptyTestSuite + results.exitCode);\n        });\n      });\n    }\n  };\n}\n\ncreateRunnerMiddleware.$inject = ['emitter', 'fileList', 'capturedBrowsers', 'reporter', 'executor', 'config.protocol', 'config.hostname', 'config.port', 'config.urlRoot', 'config']; // PUBLIC API\n\nexports.create = createRunnerMiddleware;","map":{"version":3,"sources":["/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/karma/lib/middleware/runner.js"],"names":["_","require","path","helper","log","create","constant","json","createRunnerMiddleware","emitter","fileList","capturedBrowsers","reporter","executor","protocol","hostname","port","urlRoot","config","saveOriginalArgs","request","response","next","url","debug","writeHead","length","end","areAllReady","write","data","body","updateClientArgs","handleRun","refreshFileList","then","schedule","catch","error","errorMessage","stack","scheduleError","restoreOriginalArgs","isEmpty","args","isArray","client","isPlainObject","merge","warn","fullRefresh","changedFiles","Promise","all","map","filepath","changeFile","resolve","basePath","addedFiles","addFile","removedFiles","removeFile","refresh","once","responseWrite","bind","colors","addAdapter","_browsers","results","removeAdapter","emptyTestSuite","failed","success","EXIT_CODE","exitCode","$inject","exports"],"mappings":"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","sourcesContent":["/**\n * Runner middleware is responsible for communication with `karma run`.\n *\n * It basically triggers a test run and streams stdout back.\n */\n\nconst _ = require('lodash')\nconst path = require('path')\nconst helper = require('../helper')\nconst log = require('../logger').create()\nconst constant = require('../constants')\nconst json = require('body-parser').json()\n\n// TODO(vojta): disable when single-run mode\nfunction createRunnerMiddleware (emitter, fileList, capturedBrowsers, reporter, executor,\n  /* config.protocol */ protocol, /* config.hostname */ hostname, /* config.port */\n  port, /* config.urlRoot */ urlRoot, config) {\n  helper.saveOriginalArgs(config)\n  return function (request, response, next) {\n    if (request.url !== '/__run__' && request.url !== urlRoot + 'run') {\n      return next()\n    }\n\n    log.debug('Execution (fired by runner)')\n    response.writeHead(200)\n\n    if (!capturedBrowsers.length) {\n      const url = `${protocol}//${hostname}:${port}${urlRoot}`\n      return response.end(`No captured browser, open ${url}\\n`)\n    }\n\n    json(request, response, function () {\n      if (!capturedBrowsers.areAllReady([])) {\n        response.write('Waiting for previous execution...\\n')\n      }\n\n      const data = request.body\n\n      updateClientArgs(data)\n      handleRun(data)\n      refreshFileList(data).then(() => {\n        executor.schedule()\n      }).catch((error) => {\n        const errorMessage = `Error during refresh file list. ${error.stack || error}`\n        executor.scheduleError(errorMessage)\n      })\n    })\n\n    function updateClientArgs (data) {\n      helper.restoreOriginalArgs(config)\n      if (_.isEmpty(data.args)) {\n        log.debug('Ignoring empty client.args from run command')\n      } else if ((_.isArray(data.args) && _.isArray(config.client.args)) ||\n        (_.isPlainObject(data.args) && _.isPlainObject(config.client.args))) {\n        log.debug('Merging client.args with ', data.args)\n        config.client.args = _.merge(config.client.args, data.args)\n      } else {\n        log.warn('Replacing client.args with ', data.args, ' as their types do not match.')\n        config.client.args = data.args\n      }\n    }\n\n    async function refreshFileList (data) {\n      let fullRefresh = true\n\n      if (helper.isArray(data.changedFiles)) {\n        await Promise.all(data.changedFiles.map(async function (filepath) {\n          await fileList.changeFile(path.resolve(config.basePath, filepath))\n          fullRefresh = false\n        }))\n      }\n\n      if (helper.isArray(data.addedFiles)) {\n        await Promise.all(data.addedFiles.map(async function (filepath) {\n          await fileList.addFile(path.resolve(config.basePath, filepath))\n          fullRefresh = false\n        }))\n      }\n\n      if (helper.isArray(data.removedFiles)) {\n        await Promise.all(data.removedFiles.map(async function (filepath) {\n          await fileList.removeFile(path.resolve(config.basePath, filepath))\n          fullRefresh = false\n        }))\n      }\n\n      if (fullRefresh && data.refresh !== false) {\n        log.debug('Refreshing all the files / patterns')\n        await fileList.refresh()\n      }\n    }\n\n    function handleRun (data) {\n      emitter.once('run_start', function () {\n        const responseWrite = response.write.bind(response)\n        responseWrite.colors = data.colors\n        reporter.addAdapter(responseWrite)\n\n        // clean up, close runner response\n        emitter.once('run_complete', function (_browsers, results) {\n          reporter.removeAdapter(responseWrite)\n          const emptyTestSuite = (results.failed + results.success) === 0 ? 0 : 1\n          response.end(constant.EXIT_CODE + emptyTestSuite + results.exitCode)\n        })\n      })\n    }\n  }\n}\n\ncreateRunnerMiddleware.$inject = ['emitter', 'fileList', 'capturedBrowsers', 'reporter', 'executor',\n  'config.protocol', 'config.hostname', 'config.port', 'config.urlRoot', 'config']\n\n// PUBLIC API\nexports.create = createRunnerMiddleware\n"]},"metadata":{},"sourceType":"script"}