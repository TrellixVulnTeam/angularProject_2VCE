{"ast":null,"code":"//      \n'use strict';\n\nvar os = require('os');\n\nvar createExplorer = require('./createExplorer');\n\nvar loaders = require('./loaders');\n\nmodule.exports = cosmiconfig;\n\nfunction cosmiconfig(moduleName, options) {\n  options = options || {};\n  var defaults = {\n    packageProp: moduleName,\n    searchPlaces: ['package.json', \".\".concat(moduleName, \"rc\"), \".\".concat(moduleName, \"rc.json\"), \".\".concat(moduleName, \"rc.yaml\"), \".\".concat(moduleName, \"rc.yml\"), \".\".concat(moduleName, \"rc.js\"), \"\".concat(moduleName, \".config.js\")],\n    ignoreEmptySearchPlaces: true,\n    stopDir: os.homedir(),\n    cache: true,\n    transform: identity\n  };\n  var normalizedOptions = Object.assign({}, defaults, options, {\n    loaders: normalizeLoaders(options.loaders)\n  });\n  return createExplorer(normalizedOptions);\n}\n\ncosmiconfig.loadJs = loaders.loadJs;\ncosmiconfig.loadJson = loaders.loadJson;\ncosmiconfig.loadYaml = loaders.loadYaml;\n\nfunction normalizeLoaders(rawLoaders) {\n  var defaults = {\n    '.js': {\n      sync: loaders.loadJs,\n      async: loaders.loadJs\n    },\n    '.json': {\n      sync: loaders.loadJson,\n      async: loaders.loadJson\n    },\n    '.yaml': {\n      sync: loaders.loadYaml,\n      async: loaders.loadYaml\n    },\n    '.yml': {\n      sync: loaders.loadYaml,\n      async: loaders.loadYaml\n    },\n    noExt: {\n      sync: loaders.loadYaml,\n      async: loaders.loadYaml\n    }\n  };\n\n  if (!rawLoaders) {\n    return defaults;\n  }\n\n  return Object.keys(rawLoaders).reduce(function (result, ext) {\n    var entry = rawLoaders && rawLoaders[ext];\n\n    if (typeof entry === 'function') {\n      result[ext] = {\n        sync: entry,\n        async: entry\n      };\n    } else {\n      result[ext] = entry;\n    }\n\n    return result;\n  }, defaults);\n}\n\nfunction identity(x) {\n  return x;\n}","map":{"version":3,"sources":["/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/cosmiconfig/dist/index.js"],"names":["os","require","createExplorer","loaders","module","exports","cosmiconfig","moduleName","options","defaults","packageProp","searchPlaces","ignoreEmptySearchPlaces","stopDir","homedir","cache","transform","identity","normalizedOptions","Object","assign","normalizeLoaders","loadJs","loadJson","loadYaml","rawLoaders","sync","async","noExt","keys","reduce","result","ext","entry","x"],"mappings":"AAAA;AACA;;AAEA,IAAMA,EAAE,GAAGC,OAAO,CAAC,IAAD,CAAlB;;AACA,IAAMC,cAAc,GAAGD,OAAO,CAAC,kBAAD,CAA9B;;AACA,IAAME,OAAO,GAAGF,OAAO,CAAC,WAAD,CAAvB;;AAEAG,MAAM,CAACC,OAAP,GAAiBC,WAAjB;;AAEA,SAASA,WAAT,CACEC,UADF,EAEEC,OAFF,EAWE;AACAA,EAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;AACA,MAAMC,QAAQ,GAAG;AACfC,IAAAA,WAAW,EAAEH,UADE;AAEfI,IAAAA,YAAY,EAAE,CACZ,cADY,aAERJ,UAFQ,oBAGRA,UAHQ,yBAIRA,UAJQ,yBAKRA,UALQ,wBAMRA,UANQ,sBAOTA,UAPS,gBAFC;AAWfK,IAAAA,uBAAuB,EAAE,IAXV;AAYfC,IAAAA,OAAO,EAAEb,EAAE,CAACc,OAAH,EAZM;AAafC,IAAAA,KAAK,EAAE,IAbQ;AAcfC,IAAAA,SAAS,EAAEC;AAdI,GAAjB;AAgBA,MAAMC,iBAAiB,GAAoBC,MAAM,CAACC,MAAP,CACzC,EADyC,EAEzCX,QAFyC,EAGzCD,OAHyC,EAIzC;AACEL,IAAAA,OAAO,EAAEkB,gBAAgB,CAACb,OAAO,CAACL,OAAT;AAD3B,GAJyC,CAA3C;AASA,SAAOD,cAAc,CAACgB,iBAAD,CAArB;AACD;;AAEDZ,WAAW,CAACgB,MAAZ,GAAqBnB,OAAO,CAACmB,MAA7B;AACAhB,WAAW,CAACiB,QAAZ,GAAuBpB,OAAO,CAACoB,QAA/B;AACAjB,WAAW,CAACkB,QAAZ,GAAuBrB,OAAO,CAACqB,QAA/B;;AAEA,SAASH,gBAAT,CAA0BI,UAA1B,EAAwD;AACtD,MAAMhB,QAAQ,GAAG;AACf,WAAO;AAAEiB,MAAAA,IAAI,EAAEvB,OAAO,CAACmB,MAAhB;AAAwBK,MAAAA,KAAK,EAAExB,OAAO,CAACmB;AAAvC,KADQ;AAEf,aAAS;AAAEI,MAAAA,IAAI,EAAEvB,OAAO,CAACoB,QAAhB;AAA0BI,MAAAA,KAAK,EAAExB,OAAO,CAACoB;AAAzC,KAFM;AAGf,aAAS;AAAEG,MAAAA,IAAI,EAAEvB,OAAO,CAACqB,QAAhB;AAA0BG,MAAAA,KAAK,EAAExB,OAAO,CAACqB;AAAzC,KAHM;AAIf,YAAQ;AAAEE,MAAAA,IAAI,EAAEvB,OAAO,CAACqB,QAAhB;AAA0BG,MAAAA,KAAK,EAAExB,OAAO,CAACqB;AAAzC,KAJO;AAKfI,IAAAA,KAAK,EAAE;AAAEF,MAAAA,IAAI,EAAEvB,OAAO,CAACqB,QAAhB;AAA0BG,MAAAA,KAAK,EAAExB,OAAO,CAACqB;AAAzC;AALQ,GAAjB;;AAQA,MAAI,CAACC,UAAL,EAAiB;AACf,WAAOhB,QAAP;AACD;;AAED,SAAOU,MAAM,CAACU,IAAP,CAAYJ,UAAZ,EAAwBK,MAAxB,CAA+B,UAACC,MAAD,EAASC,GAAT,EAAiB;AACrD,QAAMC,KAAK,GAAGR,UAAU,IAAIA,UAAU,CAACO,GAAD,CAAtC;;AACA,QAAI,OAAOC,KAAP,KAAiB,UAArB,EAAiC;AAC/BF,MAAAA,MAAM,CAACC,GAAD,CAAN,GAAc;AAAEN,QAAAA,IAAI,EAAEO,KAAR;AAAeN,QAAAA,KAAK,EAAEM;AAAtB,OAAd;AACD,KAFD,MAEO;AACLF,MAAAA,MAAM,CAACC,GAAD,CAAN,GAAcC,KAAd;AACD;;AACD,WAAOF,MAAP;AACD,GARM,EAQJtB,QARI,CAAP;AASD;;AAED,SAASQ,QAAT,CAAkBiB,CAAlB,EAAqB;AACnB,SAAOA,CAAP;AACD","sourcesContent":["//      \n'use strict';\n\nconst os = require('os');\nconst createExplorer = require('./createExplorer');\nconst loaders = require('./loaders');\n\nmodule.exports = cosmiconfig;\n\nfunction cosmiconfig(\n  moduleName        ,\n  options   \n                         \n                     \n                                 \n                                      \n                     \n                    \n                                                       \n   \n) {\n  options = options || {};\n  const defaults = {\n    packageProp: moduleName,\n    searchPlaces: [\n      'package.json',\n      `.${moduleName}rc`,\n      `.${moduleName}rc.json`,\n      `.${moduleName}rc.yaml`,\n      `.${moduleName}rc.yml`,\n      `.${moduleName}rc.js`,\n      `${moduleName}.config.js`,\n    ],\n    ignoreEmptySearchPlaces: true,\n    stopDir: os.homedir(),\n    cache: true,\n    transform: identity,\n  };\n  const normalizedOptions                  = Object.assign(\n    {},\n    defaults,\n    options,\n    {\n      loaders: normalizeLoaders(options.loaders),\n    }\n  );\n\n  return createExplorer(normalizedOptions);\n}\n\ncosmiconfig.loadJs = loaders.loadJs;\ncosmiconfig.loadJson = loaders.loadJson;\ncosmiconfig.loadYaml = loaders.loadYaml;\n\nfunction normalizeLoaders(rawLoaders         )          {\n  const defaults = {\n    '.js': { sync: loaders.loadJs, async: loaders.loadJs },\n    '.json': { sync: loaders.loadJson, async: loaders.loadJson },\n    '.yaml': { sync: loaders.loadYaml, async: loaders.loadYaml },\n    '.yml': { sync: loaders.loadYaml, async: loaders.loadYaml },\n    noExt: { sync: loaders.loadYaml, async: loaders.loadYaml },\n  };\n\n  if (!rawLoaders) {\n    return defaults;\n  }\n\n  return Object.keys(rawLoaders).reduce((result, ext) => {\n    const entry = rawLoaders && rawLoaders[ext];\n    if (typeof entry === 'function') {\n      result[ext] = { sync: entry, async: entry };\n    } else {\n      result[ext] = entry;\n    }\n    return result;\n  }, defaults);\n}\n\nfunction identity(x) {\n  return x;\n}\n"]},"metadata":{},"sourceType":"script"}