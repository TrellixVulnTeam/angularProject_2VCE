{"ast":null,"code":"var http = require('http');\n\nvar cfg = require('./config');\n\nvar logger = require('./logger');\n\nvar helper = require('./helper');\n\nexports.stop = function (config, done) {\n  config = config || {};\n  logger.setupFromConfig(config);\n  var log = logger.create('stopper');\n  done = helper.isFunction(done) ? done : process.exit;\n  config = cfg.parseConfig(config.configFile, config);\n  var request = http.request({\n    hostname: config.hostname,\n    path: config.urlRoot + 'stop',\n    port: config.port,\n    method: 'GET'\n  });\n  request.on('response', function (response) {\n    if (response.statusCode === 200) {\n      log.info('Server stopped.');\n      done(0);\n    } else {\n      log.error(\"Server returned status code: \".concat(response.statusCode));\n      done(1);\n    }\n  });\n  request.on('error', function (e) {\n    if (e.code === 'ECONNREFUSED') {\n      log.error(\"There is no server listening on port \".concat(config.port));\n      done(1, e.code);\n    } else {\n      throw e;\n    }\n  });\n  request.end();\n};","map":{"version":3,"sources":["/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/karma/lib/stopper.js"],"names":["http","require","cfg","logger","helper","exports","stop","config","done","setupFromConfig","log","create","isFunction","process","exit","parseConfig","configFile","request","hostname","path","urlRoot","port","method","on","response","statusCode","info","error","e","code","end"],"mappings":"AAAA,IAAMA,IAAI,GAAGC,OAAO,CAAC,MAAD,CAApB;;AACA,IAAMC,GAAG,GAAGD,OAAO,CAAC,UAAD,CAAnB;;AACA,IAAME,MAAM,GAAGF,OAAO,CAAC,UAAD,CAAtB;;AACA,IAAMG,MAAM,GAAGH,OAAO,CAAC,UAAD,CAAtB;;AAEAI,OAAO,CAACC,IAAR,GAAe,UAAUC,MAAV,EAAkBC,IAAlB,EAAwB;AACrCD,EAAAA,MAAM,GAAGA,MAAM,IAAI,EAAnB;AACAJ,EAAAA,MAAM,CAACM,eAAP,CAAuBF,MAAvB;AACA,MAAMG,GAAG,GAAGP,MAAM,CAACQ,MAAP,CAAc,SAAd,CAAZ;AACAH,EAAAA,IAAI,GAAGJ,MAAM,CAACQ,UAAP,CAAkBJ,IAAlB,IAA0BA,IAA1B,GAAiCK,OAAO,CAACC,IAAhD;AACAP,EAAAA,MAAM,GAAGL,GAAG,CAACa,WAAJ,CAAgBR,MAAM,CAACS,UAAvB,EAAmCT,MAAnC,CAAT;AAEA,MAAMU,OAAO,GAAGjB,IAAI,CAACiB,OAAL,CAAa;AAC3BC,IAAAA,QAAQ,EAAEX,MAAM,CAACW,QADU;AAE3BC,IAAAA,IAAI,EAAEZ,MAAM,CAACa,OAAP,GAAiB,MAFI;AAG3BC,IAAAA,IAAI,EAAEd,MAAM,CAACc,IAHc;AAI3BC,IAAAA,MAAM,EAAE;AAJmB,GAAb,CAAhB;AAOAL,EAAAA,OAAO,CAACM,EAAR,CAAW,UAAX,EAAuB,UAAUC,QAAV,EAAoB;AACzC,QAAIA,QAAQ,CAACC,UAAT,KAAwB,GAA5B,EAAiC;AAC/Bf,MAAAA,GAAG,CAACgB,IAAJ,CAAS,iBAAT;AACAlB,MAAAA,IAAI,CAAC,CAAD,CAAJ;AACD,KAHD,MAGO;AACLE,MAAAA,GAAG,CAACiB,KAAJ,wCAA0CH,QAAQ,CAACC,UAAnD;AACAjB,MAAAA,IAAI,CAAC,CAAD,CAAJ;AACD;AACF,GARD;AAUAS,EAAAA,OAAO,CAACM,EAAR,CAAW,OAAX,EAAoB,UAAUK,CAAV,EAAa;AAC/B,QAAIA,CAAC,CAACC,IAAF,KAAW,cAAf,EAA+B;AAC7BnB,MAAAA,GAAG,CAACiB,KAAJ,gDAAkDpB,MAAM,CAACc,IAAzD;AACAb,MAAAA,IAAI,CAAC,CAAD,EAAIoB,CAAC,CAACC,IAAN,CAAJ;AACD,KAHD,MAGO;AACL,YAAMD,CAAN;AACD;AACF,GAPD;AAQAX,EAAAA,OAAO,CAACa,GAAR;AACD,CAjCD","sourcesContent":["const http = require('http')\nconst cfg = require('./config')\nconst logger = require('./logger')\nconst helper = require('./helper')\n\nexports.stop = function (config, done) {\n  config = config || {}\n  logger.setupFromConfig(config)\n  const log = logger.create('stopper')\n  done = helper.isFunction(done) ? done : process.exit\n  config = cfg.parseConfig(config.configFile, config)\n\n  const request = http.request({\n    hostname: config.hostname,\n    path: config.urlRoot + 'stop',\n    port: config.port,\n    method: 'GET'\n  })\n\n  request.on('response', function (response) {\n    if (response.statusCode === 200) {\n      log.info('Server stopped.')\n      done(0)\n    } else {\n      log.error(`Server returned status code: ${response.statusCode}`)\n      done(1)\n    }\n  })\n\n  request.on('error', function (e) {\n    if (e.code === 'ECONNREFUSED') {\n      log.error(`There is no server listening on port ${config.port}`)\n      done(1, e.code)\n    } else {\n      throw e\n    }\n  })\n  request.end()\n}\n"]},"metadata":{},"sourceType":"script"}