{"ast":null,"code":"/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n(function (factory) {\n  if (typeof module === \"object\" && typeof module.exports === \"object\") {\n    var v = factory(require, exports);\n    if (v !== undefined) module.exports = v;\n  } else if (typeof define === \"function\" && define.amd) {\n    define(\"@angular/compiler-cli/src/ngtsc/partial_evaluator/src/interface\", [\"require\", \"exports\", \"@angular/compiler-cli/src/ngtsc/partial_evaluator/src/interpreter\"], factory);\n  }\n})(function (require, exports) {\n  \"use strict\";\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.PartialEvaluator = void 0;\n\n  var interpreter_1 = require(\"@angular/compiler-cli/src/ngtsc/partial_evaluator/src/interpreter\");\n\n  var PartialEvaluator =\n  /** @class */\n  function () {\n    function PartialEvaluator(host, checker, dependencyTracker) {\n      this.host = host;\n      this.checker = checker;\n      this.dependencyTracker = dependencyTracker;\n    }\n\n    PartialEvaluator.prototype.evaluate = function (expr, foreignFunctionResolver) {\n      var interpreter = new interpreter_1.StaticInterpreter(this.host, this.checker, this.dependencyTracker);\n      var sourceFile = expr.getSourceFile();\n      return interpreter.visit(expr, {\n        originatingFile: sourceFile,\n        absoluteModuleName: null,\n        resolutionContext: sourceFile.fileName,\n        scope: new Map(),\n        foreignFunctionResolver: foreignFunctionResolver\n      });\n    };\n\n    return PartialEvaluator;\n  }();\n\n  exports.PartialEvaluator = PartialEvaluator;\n});","map":{"version":3,"sources":["../../../../../../../../../packages/compiler-cli/src/ngtsc/partial_evaluator/src/interface.ts"],"names":[],"mappings":"AAAA;;;;;;AAMG;;;;;;;;;;;;;;;;AAQH,MAAA,aAAA,GAAA,OAAA,CAAA,mEAAA,CAAA;;AAOA,MAAA,gBAAA;AAAA;AAAA,cAAA;AACE,aAAA,gBAAA,CACY,IADZ,EAC0C,OAD1C,EAEY,iBAFZ,EAEqD;AADzC,WAAA,IAAA,GAAA,IAAA;AAA8B,WAAA,OAAA,GAAA,OAAA;AAC9B,WAAA,iBAAA,GAAA,iBAAA;AAA6C;;AAEzD,IAAA,gBAAA,CAAA,SAAA,CAAA,QAAA,GAAA,UAAS,IAAT,EAA8B,uBAA9B,EAA+E;AAC7E,UAAM,WAAW,GAAG,IAAI,aAAA,CAAA,iBAAJ,CAAsB,KAAK,IAA3B,EAAiC,KAAK,OAAtC,EAA+C,KAAK,iBAApD,CAApB;AACA,UAAM,UAAU,GAAG,IAAI,CAAC,aAAL,EAAnB;AACA,aAAO,WAAW,CAAC,KAAZ,CAAkB,IAAlB,EAAwB;AAC7B,QAAA,eAAe,EAAE,UADY;AAE7B,QAAA,kBAAkB,EAAE,IAFS;AAG7B,QAAA,iBAAiB,EAAE,UAAU,CAAC,QAHD;AAI7B,QAAA,KAAK,EAAE,IAAI,GAAJ,EAJsB;AAK7B,QAAA,uBAAuB,EAAA;AALM,OAAxB,CAAP;AAOD,KAVD;;AAWF,WAAA,gBAAA;AAAC,GAhBD,EAAA;;AAAa,EAAA,OAAA,CAAA,gBAAA,GAAA,gBAAA","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport * as ts from 'typescript';\n\nimport {Reference} from '../../imports';\nimport {DependencyTracker} from '../../incremental/api';\nimport {ReflectionHost} from '../../reflection';\n\nimport {StaticInterpreter} from './interpreter';\nimport {ResolvedValue} from './result';\n\nexport type ForeignFunctionResolver =\n    (node: Reference<ts.FunctionDeclaration|ts.MethodDeclaration|ts.FunctionExpression>,\n     args: ReadonlyArray<ts.Expression>) => ts.Expression|null;\n\nexport class PartialEvaluator {\n  constructor(\n      private host: ReflectionHost, private checker: ts.TypeChecker,\n      private dependencyTracker: DependencyTracker|null) {}\n\n  evaluate(expr: ts.Expression, foreignFunctionResolver?: ForeignFunctionResolver): ResolvedValue {\n    const interpreter = new StaticInterpreter(this.host, this.checker, this.dependencyTracker);\n    const sourceFile = expr.getSourceFile();\n    return interpreter.visit(expr, {\n      originatingFile: sourceFile,\n      absoluteModuleName: null,\n      resolutionContext: sourceFile.fileName,\n      scope: new Map<ts.ParameterDeclaration, ResolvedValue>(),\n      foreignFunctionResolver,\n    });\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}