{"ast":null,"code":"var url = require('url');\n\nvar _require = require('http'),\n    httpAgent = _require.Agent;\n\nvar _require2 = require('https'),\n    httpsAgent = _require2.Agent;\n\nvar httpProxy = require('http-proxy');\n\nvar _ = require('lodash');\n\nvar log = require('../logger').create('proxy');\n\nfunction parseProxyConfig(proxies, config) {\n  proxies = proxies || [];\n  return _.sortBy(_.map(proxies, function (proxyConfiguration, proxyPath) {\n    if (typeof proxyConfiguration === 'string') {\n      proxyConfiguration = {\n        target: proxyConfiguration\n      };\n    }\n\n    var proxyUrl = proxyConfiguration.target; // eslint-disable-next-line node/no-deprecated-api\n\n    var proxyDetails = url.parse(proxyUrl);\n    var pathname = proxyDetails.pathname;\n\n    if (proxyPath.endsWith('/') && !proxyUrl.endsWith('/')) {\n      log.warn(\"proxy \\\"\".concat(proxyUrl, \"\\\" normalized to \\\"\").concat(proxyUrl, \"/\\\"\"));\n      proxyUrl += '/';\n      pathname += '/';\n    }\n\n    if (!proxyPath.endsWith('/') && proxyUrl.endsWith('/')) {\n      log.warn(\"proxy \\\"\".concat(proxyPath, \"\\\" normalized to \\\"\").concat(proxyPath, \"/\\\"\"));\n      proxyPath += '/';\n    }\n\n    if (pathname === '/' && !proxyUrl.endsWith('/')) {\n      pathname = '';\n    }\n\n    var hostname = proxyDetails.hostname || config.hostname;\n    var protocol = proxyDetails.protocol || config.protocol;\n    var https = proxyDetails.protocol === 'https:';\n    var port;\n\n    if (proxyDetails.port) {\n      port = proxyDetails.port;\n    } else if (proxyDetails.protocol) {\n      port = https ? '443' : '80';\n    } else {\n      port = config.port;\n    }\n\n    var changeOrigin = proxyConfiguration.changeOrigin || false;\n    var Agent = https ? httpsAgent : httpAgent;\n    var agent = new Agent({\n      keepAlive: true\n    });\n    var proxy = httpProxy.createProxyServer({\n      target: {\n        host: hostname,\n        port: port,\n        https: https,\n        protocol: protocol\n      },\n      xfwd: true,\n      changeOrigin: changeOrigin,\n      secure: config.proxyValidateSSL,\n      agent: agent\n    });\n    ['proxyReq', 'proxyRes'].forEach(function (name) {\n      var callback = proxyDetails[name] || config[name];\n\n      if (callback) {\n        proxy.on(name, callback);\n      }\n    });\n    proxy.on('error', function proxyError(err, req, res) {\n      if (err.code === 'ECONNRESET' && req.socket.destroyed) {\n        log.debug(\"failed to proxy \".concat(req.url, \" (browser hung up the socket)\"));\n      } else {\n        log.warn(\"failed to proxy \".concat(req.url, \" (\").concat(err.message, \")\"));\n      }\n\n      res.destroy();\n    });\n    return {\n      path: proxyPath,\n      baseUrl: pathname,\n      host: hostname,\n      port: port,\n      https: https,\n      proxy: proxy,\n      agent: agent\n    };\n  }), 'path').reverse();\n}\n/**\n * Returns a handler which understands the proxies and its redirects, along with the proxy to use\n * @param proxies An array of proxy record objects\n * @param urlRoot The URL root that karma is mounted on\n * @return {Function} handler function\n */\n\n\nfunction createProxyHandler(proxies, urlRoot) {\n  if (!proxies.length) {\n    var nullProxy = function nullProxy(request, response, next) {\n      return next();\n    };\n\n    nullProxy.upgrade = function () {};\n\n    return nullProxy;\n  }\n\n  function createProxy(request, response, next) {\n    var proxyRecord = proxies.find(function (p) {\n      return request.url.startsWith(p.path);\n    });\n\n    if (proxyRecord) {\n      log.debug(\"proxying request - \".concat(request.url, \" to \").concat(proxyRecord.host, \":\").concat(proxyRecord.port));\n      request.url = request.url.replace(proxyRecord.path, proxyRecord.baseUrl);\n      proxyRecord.proxy.web(request, response);\n    } else {\n      return next();\n    }\n  }\n\n  createProxy.upgrade = function (request, socket, head) {\n    // special-case karma's route to avoid upgrading it\n    if (request.url.startsWith(urlRoot)) {\n      log.debug(\"NOT upgrading proxyWebSocketRequest \".concat(request.url));\n      return;\n    }\n\n    var proxyRecord = proxies.find(function (p) {\n      return request.url.startsWith(p.path);\n    });\n\n    if (proxyRecord) {\n      log.debug(\"upgrade proxyWebSocketRequest \".concat(request.url, \" to \").concat(proxyRecord.host, \":\").concat(proxyRecord.port));\n      request.url = request.url.replace(proxyRecord.path, proxyRecord.baseUrl);\n      proxyRecord.proxy.ws(request, socket, head);\n    }\n  };\n\n  return createProxy;\n}\n\nexports.create = function (\n/* config */\nconfig,\n/* config.proxies */\nproxies,\n/* emitter */\nemitter) {\n  var proxyRecords = parseProxyConfig(proxies, config);\n  emitter.on('exit', function (done) {\n    log.debug('Destroying proxy agents');\n    proxyRecords.forEach(function (proxyRecord) {\n      proxyRecord.agent.destroy();\n    });\n    done();\n  });\n  return createProxyHandler(proxyRecords, config.urlRoot);\n};","map":{"version":3,"sources":["/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/karma/lib/middleware/proxy.js"],"names":["url","require","httpAgent","Agent","httpsAgent","httpProxy","_","log","create","parseProxyConfig","proxies","config","sortBy","map","proxyConfiguration","proxyPath","target","proxyUrl","proxyDetails","parse","pathname","endsWith","warn","hostname","protocol","https","port","changeOrigin","agent","keepAlive","proxy","createProxyServer","host","xfwd","secure","proxyValidateSSL","forEach","name","callback","on","proxyError","err","req","res","code","socket","destroyed","debug","message","destroy","path","baseUrl","reverse","createProxyHandler","urlRoot","length","nullProxy","request","response","next","upgrade","createProxy","proxyRecord","find","p","startsWith","replace","web","head","ws","exports","emitter","proxyRecords","done"],"mappings":"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","sourcesContent":["const url = require('url')\nconst { Agent: httpAgent } = require('http')\nconst { Agent: httpsAgent } = require('https')\nconst httpProxy = require('http-proxy')\nconst _ = require('lodash')\n\nconst log = require('../logger').create('proxy')\n\nfunction parseProxyConfig (proxies, config) {\n  proxies = proxies || []\n  return _.sortBy(_.map(proxies, function (proxyConfiguration, proxyPath) {\n    if (typeof proxyConfiguration === 'string') {\n      proxyConfiguration = { target: proxyConfiguration }\n    }\n    let proxyUrl = proxyConfiguration.target\n    // eslint-disable-next-line node/no-deprecated-api\n    const proxyDetails = url.parse(proxyUrl)\n    let pathname = proxyDetails.pathname\n\n    if (proxyPath.endsWith('/') && !proxyUrl.endsWith('/')) {\n      log.warn(`proxy \"${proxyUrl}\" normalized to \"${proxyUrl}/\"`)\n      proxyUrl += '/'\n      pathname += '/'\n    }\n\n    if (!proxyPath.endsWith('/') && proxyUrl.endsWith('/')) {\n      log.warn(`proxy \"${proxyPath}\" normalized to \"${proxyPath}/\"`)\n      proxyPath += '/'\n    }\n\n    if (pathname === '/' && !proxyUrl.endsWith('/')) {\n      pathname = ''\n    }\n\n    const hostname = proxyDetails.hostname || config.hostname\n    const protocol = proxyDetails.protocol || config.protocol\n    const https = proxyDetails.protocol === 'https:'\n    let port\n    if (proxyDetails.port) {\n      port = proxyDetails.port\n    } else if (proxyDetails.protocol) {\n      port = https ? '443' : '80'\n    } else {\n      port = config.port\n    }\n    const changeOrigin = proxyConfiguration.changeOrigin || false\n    const Agent = https ? httpsAgent : httpAgent\n    const agent = new Agent({ keepAlive: true })\n    const proxy = httpProxy.createProxyServer({\n      target: { host: hostname, port, https, protocol },\n      xfwd: true,\n      changeOrigin: changeOrigin,\n      secure: config.proxyValidateSSL,\n      agent\n    })\n\n    ;['proxyReq', 'proxyRes'].forEach(function (name) {\n      const callback = proxyDetails[name] || config[name]\n      if (callback) {\n        proxy.on(name, callback)\n      }\n    })\n\n    proxy.on('error', function proxyError (err, req, res) {\n      if (err.code === 'ECONNRESET' && req.socket.destroyed) {\n        log.debug(`failed to proxy ${req.url} (browser hung up the socket)`)\n      } else {\n        log.warn(`failed to proxy ${req.url} (${err.message})`)\n      }\n\n      res.destroy()\n    })\n\n    return { path: proxyPath, baseUrl: pathname, host: hostname, port, https, proxy, agent }\n  }), 'path').reverse()\n}\n\n/**\n * Returns a handler which understands the proxies and its redirects, along with the proxy to use\n * @param proxies An array of proxy record objects\n * @param urlRoot The URL root that karma is mounted on\n * @return {Function} handler function\n */\nfunction createProxyHandler (proxies, urlRoot) {\n  if (!proxies.length) {\n    const nullProxy = (request, response, next) => next()\n    nullProxy.upgrade = () => {}\n    return nullProxy\n  }\n\n  function createProxy (request, response, next) {\n    const proxyRecord = proxies.find((p) => request.url.startsWith(p.path))\n    if (proxyRecord) {\n      log.debug(`proxying request - ${request.url} to ${proxyRecord.host}:${proxyRecord.port}`)\n      request.url = request.url.replace(proxyRecord.path, proxyRecord.baseUrl)\n      proxyRecord.proxy.web(request, response)\n    } else {\n      return next()\n    }\n  }\n\n  createProxy.upgrade = function (request, socket, head) {\n    // special-case karma's route to avoid upgrading it\n    if (request.url.startsWith(urlRoot)) {\n      log.debug(`NOT upgrading proxyWebSocketRequest ${request.url}`)\n      return\n    }\n\n    const proxyRecord = proxies.find((p) => request.url.startsWith(p.path))\n    if (proxyRecord) {\n      log.debug(`upgrade proxyWebSocketRequest ${request.url} to ${proxyRecord.host}:${proxyRecord.port}`)\n      request.url = request.url.replace(proxyRecord.path, proxyRecord.baseUrl)\n      proxyRecord.proxy.ws(request, socket, head)\n    }\n  }\n\n  return createProxy\n}\n\nexports.create = function (/* config */config, /* config.proxies */proxies, /* emitter */emitter) {\n  const proxyRecords = parseProxyConfig(proxies, config)\n  emitter.on('exit', (done) => {\n    log.debug('Destroying proxy agents')\n    proxyRecords.forEach((proxyRecord) => {\n      proxyRecord.agent.destroy()\n    })\n    done()\n  })\n  return createProxyHandler(proxyRecords, config.urlRoot)\n}\n"]},"metadata":{},"sourceType":"script"}