{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/regenerator\");\n\nvar _createForOfIteratorHelper = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _objectSpread = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/objectSpread2\");\n\nvar _asyncToGenerator = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = loader;\n\nvar _loaderUtils = require(\"loader-utils\");\n\nvar _schemaUtils = require(\"schema-utils\");\n\nvar _postcss = _interopRequireDefault(require(\"postcss\"));\n\nvar _semver = require(\"semver\");\n\nvar _package = _interopRequireDefault(require(\"postcss/package.json\"));\n\nvar _Warning = _interopRequireDefault(require(\"./Warning\"));\n\nvar _Error = _interopRequireDefault(require(\"./Error\"));\n\nvar _options = _interopRequireDefault(require(\"./options.json\"));\n\nvar _utils = require(\"./utils\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n * **PostCSS Loader**\n *\n * Loads && processes CSS with [PostCSS](https://github.com/postcss/postcss)\n *\n * @method loader\n *\n * @param {String} content Source\n * @param {Object} sourceMap Source Map\n * @param {Object} meta Meta\n *\n * @return {callback} callback Result\n */\n\n\nfunction loader(_x, _x2, _x3) {\n  return _loader.apply(this, arguments);\n}\n\nfunction _loader() {\n  _loader = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(content, sourceMap, meta) {\n    var options, callback, configOption, loadedConfig, useSourceMap, _ref, plugins, processOptions, root, result, _iterator, _step, warning, _iterator2, _step2, message, map, ast;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            options = (0, _loaderUtils.getOptions)(this);\n            (0, _schemaUtils.validate)(_options.default, options, {\n              name: 'PostCSS Loader',\n              baseDataPath: 'options'\n            });\n            callback = this.async();\n            configOption = typeof options.postcssOptions === 'undefined' || typeof options.postcssOptions.config === 'undefined' ? true : options.postcssOptions.config;\n\n            if (!configOption) {\n              _context.next = 15;\n              break;\n            }\n\n            _context.prev = 5;\n            _context.next = 8;\n            return (0, _utils.loadConfig)(this, configOption);\n\n          case 8:\n            loadedConfig = _context.sent;\n            _context.next = 15;\n            break;\n\n          case 11:\n            _context.prev = 11;\n            _context.t0 = _context[\"catch\"](5);\n            callback(_context.t0);\n            return _context.abrupt(\"return\");\n\n          case 15:\n            useSourceMap = typeof options.sourceMap !== 'undefined' ? options.sourceMap : this.sourceMap;\n            _ref = (0, _utils.getPostcssOptions)(this, loadedConfig, options.postcssOptions), plugins = _ref.plugins, processOptions = _ref.processOptions;\n\n            if (useSourceMap) {\n              processOptions.map = _objectSpread({\n                inline: false,\n                annotation: false\n              }, processOptions.map);\n            }\n\n            if (sourceMap && processOptions.map) {\n              processOptions.map.prev = (0, _utils.normalizeSourceMap)(sourceMap, this.context);\n            }\n\n            // Reuse PostCSS AST from other loaders\n            if (meta && meta.ast && meta.ast.type === 'postcss' && (0, _semver.satisfies)(meta.ast.version, \"^\".concat(_package.default.version))) {\n              root = meta.ast.root;\n            }\n\n            if (!root && options.execute) {\n              // eslint-disable-next-line no-param-reassign\n              content = (0, _utils.exec)(content, this);\n            }\n\n            _context.prev = 21;\n            _context.next = 24;\n            return (0, _postcss.default)(plugins).process(root || content, processOptions);\n\n          case 24:\n            result = _context.sent;\n            _context.next = 32;\n            break;\n\n          case 27:\n            _context.prev = 27;\n            _context.t1 = _context[\"catch\"](21);\n\n            if (_context.t1.file) {\n              this.addDependency(_context.t1.file);\n            }\n\n            if (_context.t1.name === 'CssSyntaxError') {\n              callback(new _Error.default(_context.t1));\n            } else {\n              callback(_context.t1);\n            }\n\n            return _context.abrupt(\"return\");\n\n          case 32:\n            _iterator = _createForOfIteratorHelper(result.warnings());\n\n            try {\n              for (_iterator.s(); !(_step = _iterator.n()).done;) {\n                warning = _step.value;\n                this.emitWarning(new _Warning.default(warning));\n              }\n            } catch (err) {\n              _iterator.e(err);\n            } finally {\n              _iterator.f();\n            }\n\n            _iterator2 = _createForOfIteratorHelper(result.messages);\n\n            try {\n              for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n                message = _step2.value;\n\n                if (message.type === 'dependency') {\n                  this.addDependency(message.file);\n                }\n\n                if (message.type === 'asset' && message.content && message.file) {\n                  this.emitFile(message.file, message.content, message.sourceMap, message.info);\n                }\n              } // eslint-disable-next-line no-undefined\n\n            } catch (err) {\n              _iterator2.e(err);\n            } finally {\n              _iterator2.f();\n            }\n\n            map = result.map ? result.map.toJSON() : undefined;\n\n            if (map && useSourceMap) {\n              map = (0, _utils.normalizeSourceMapAfterPostcss)(map, this.context);\n            }\n\n            ast = {\n              type: 'postcss',\n              version: result.processor.version,\n              root: result.root\n            };\n            callback(null, result.css, map, {\n              ast: ast\n            });\n\n          case 40:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, this, [[5, 11], [21, 27]]);\n  }));\n  return _loader.apply(this, arguments);\n}","map":{"version":3,"sources":["/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@angular-devkit/build-angular/node_modules/postcss-loader/dist/index.js"],"names":["Object","defineProperty","exports","value","default","loader","_loaderUtils","require","_schemaUtils","_postcss","_interopRequireDefault","_semver","_package","_Warning","_Error","_options","_utils","obj","__esModule","content","sourceMap","meta","options","getOptions","validate","name","baseDataPath","callback","async","configOption","postcssOptions","config","loadConfig","loadedConfig","useSourceMap","getPostcssOptions","plugins","processOptions","map","inline","annotation","prev","normalizeSourceMap","context","ast","type","satisfies","version","root","execute","exec","process","result","file","addDependency","warnings","warning","emitWarning","messages","message","emitFile","info","toJSON","undefined","normalizeSourceMapAfterPostcss","processor","css"],"mappings":"AAAA;;;;;;;;;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkBC,MAAlB;;AAEA,IAAIC,YAAY,GAAGC,OAAO,CAAC,cAAD,CAA1B;;AAEA,IAAIC,YAAY,GAAGD,OAAO,CAAC,cAAD,CAA1B;;AAEA,IAAIE,QAAQ,GAAGC,sBAAsB,CAACH,OAAO,CAAC,SAAD,CAAR,CAArC;;AAEA,IAAII,OAAO,GAAGJ,OAAO,CAAC,QAAD,CAArB;;AAEA,IAAIK,QAAQ,GAAGF,sBAAsB,CAACH,OAAO,CAAC,sBAAD,CAAR,CAArC;;AAEA,IAAIM,QAAQ,GAAGH,sBAAsB,CAACH,OAAO,CAAC,WAAD,CAAR,CAArC;;AAEA,IAAIO,MAAM,GAAGJ,sBAAsB,CAACH,OAAO,CAAC,SAAD,CAAR,CAAnC;;AAEA,IAAIQ,QAAQ,GAAGL,sBAAsB,CAACH,OAAO,CAAC,gBAAD,CAAR,CAArC;;AAEA,IAAIS,MAAM,GAAGT,OAAO,CAAC,SAAD,CAApB;;AAEA,SAASG,sBAAT,CAAgCO,GAAhC,EAAqC;AAAE,SAAOA,GAAG,IAAIA,GAAG,CAACC,UAAX,GAAwBD,GAAxB,GAA8B;AAAEb,IAAAA,OAAO,EAAEa;AAAX,GAArC;AAAwD;AAE/F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;SACeZ,M;;;;;qEAAf,iBAAsBc,OAAtB,EAA+BC,SAA/B,EAA0CC,IAA1C;AAAA;;AAAA;AAAA;AAAA;AAAA;AACQC,YAAAA,OADR,GACkB,CAAC,GAAGhB,YAAY,CAACiB,UAAjB,EAA6B,IAA7B,CADlB;AAEE,aAAC,GAAGf,YAAY,CAACgB,QAAjB,EAA2BT,QAAQ,CAACX,OAApC,EAA6CkB,OAA7C,EAAsD;AACpDG,cAAAA,IAAI,EAAE,gBAD8C;AAEpDC,cAAAA,YAAY,EAAE;AAFsC,aAAtD;AAIMC,YAAAA,QANR,GAMmB,KAAKC,KAAL,EANnB;AAOQC,YAAAA,YAPR,GAOuB,OAAOP,OAAO,CAACQ,cAAf,KAAkC,WAAlC,IAAiD,OAAOR,OAAO,CAACQ,cAAR,CAAuBC,MAA9B,KAAyC,WAA1F,GAAwG,IAAxG,GAA+GT,OAAO,CAACQ,cAAR,CAAuBC,MAP7J;;AAAA,iBAUMF,YAVN;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,mBAY2B,CAAC,GAAGb,MAAM,CAACgB,UAAX,EAAuB,IAAvB,EAA6BH,YAA7B,CAZ3B;;AAAA;AAYMI,YAAAA,YAZN;AAAA;AAAA;;AAAA;AAAA;AAAA;AAcMN,YAAAA,QAAQ,aAAR;AAdN;;AAAA;AAmBQO,YAAAA,YAnBR,GAmBuB,OAAOZ,OAAO,CAACF,SAAf,KAA6B,WAA7B,GAA2CE,OAAO,CAACF,SAAnD,GAA+D,KAAKA,SAnB3F;AAAA,mBAuBM,CAAC,GAAGJ,MAAM,CAACmB,iBAAX,EAA8B,IAA9B,EAAoCF,YAApC,EAAkDX,OAAO,CAACQ,cAA1D,CAvBN,EAqBIM,OArBJ,QAqBIA,OArBJ,EAsBIC,cAtBJ,QAsBIA,cAtBJ;;AAyBE,gBAAIH,YAAJ,EAAkB;AAChBG,cAAAA,cAAc,CAACC,GAAf;AACEC,gBAAAA,MAAM,EAAE,KADV;AAEEC,gBAAAA,UAAU,EAAE;AAFd,iBAGKH,cAAc,CAACC,GAHpB;AAKD;;AAED,gBAAIlB,SAAS,IAAIiB,cAAc,CAACC,GAAhC,EAAqC;AACnCD,cAAAA,cAAc,CAACC,GAAf,CAAmBG,IAAnB,GAA0B,CAAC,GAAGzB,MAAM,CAAC0B,kBAAX,EAA+BtB,SAA/B,EAA0C,KAAKuB,OAA/C,CAA1B;AACD;;AAES;AAEV,gBAAItB,IAAI,IAAIA,IAAI,CAACuB,GAAb,IAAoBvB,IAAI,CAACuB,GAAL,CAASC,IAAT,KAAkB,SAAtC,IAAmD,CAAC,GAAGlC,OAAO,CAACmC,SAAZ,EAAuBzB,IAAI,CAACuB,GAAL,CAASG,OAAhC,aAA6CnC,QAAQ,CAACR,OAAT,CAAiB2C,OAA9D,EAAvD,EAAiI;AAE7HC,cAAAA,IAF6H,GAG3H3B,IAAI,CAACuB,GAHsH,CAE7HI,IAF6H;AAIhI;;AAED,gBAAI,CAACA,IAAD,IAAS1B,OAAO,CAAC2B,OAArB,EAA8B;AAC5B;AACA9B,cAAAA,OAAO,GAAG,CAAC,GAAGH,MAAM,CAACkC,IAAX,EAAiB/B,OAAjB,EAA0B,IAA1B,CAAV;AACD;;AAhDH;AAAA;AAAA,mBAqDmB,CAAC,GAAGV,QAAQ,CAACL,OAAb,EAAsBgC,OAAtB,EAA+Be,OAA/B,CAAuCH,IAAI,IAAI7B,OAA/C,EAAwDkB,cAAxD,CArDnB;;AAAA;AAqDIe,YAAAA,MArDJ;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAuDI,gBAAI,YAAMC,IAAV,EAAgB;AACd,mBAAKC,aAAL,CAAmB,YAAMD,IAAzB;AACD;;AAED,gBAAI,YAAM5B,IAAN,KAAe,gBAAnB,EAAqC;AACnCE,cAAAA,QAAQ,CAAC,IAAIb,MAAM,CAACV,OAAX,aAAD,CAAR;AACD,aAFD,MAEO;AACLuB,cAAAA,QAAQ,aAAR;AACD;;AA/DL;;AAAA;AAAA,mDAoEwByB,MAAM,CAACG,QAAP,EApExB;;AAAA;AAoEE,kEAAyC;AAA9BC,gBAAAA,OAA8B;AACvC,qBAAKC,WAAL,CAAiB,IAAI5C,QAAQ,CAACT,OAAb,CAAqBoD,OAArB,CAAjB;AACD;AAtEH;AAAA;AAAA;AAAA;AAAA;;AAAA,oDAwEwBJ,MAAM,CAACM,QAxE/B;;AAAA;AAwEE,qEAAuC;AAA5BC,gBAAAA,OAA4B;;AACrC,oBAAIA,OAAO,CAACd,IAAR,KAAiB,YAArB,EAAmC;AACjC,uBAAKS,aAAL,CAAmBK,OAAO,CAACN,IAA3B;AACD;;AAED,oBAAIM,OAAO,CAACd,IAAR,KAAiB,OAAjB,IAA4Bc,OAAO,CAACxC,OAApC,IAA+CwC,OAAO,CAACN,IAA3D,EAAiE;AAC/D,uBAAKO,QAAL,CAAcD,OAAO,CAACN,IAAtB,EAA4BM,OAAO,CAACxC,OAApC,EAA6CwC,OAAO,CAACvC,SAArD,EAAgEuC,OAAO,CAACE,IAAxE;AACD;AACF,eAhFH,CAgFI;;AAhFJ;AAAA;AAAA;AAAA;AAAA;;AAmFMvB,YAAAA,GAnFN,GAmFYc,MAAM,CAACd,GAAP,GAAac,MAAM,CAACd,GAAP,CAAWwB,MAAX,EAAb,GAAmCC,SAnF/C;;AAqFE,gBAAIzB,GAAG,IAAIJ,YAAX,EAAyB;AACvBI,cAAAA,GAAG,GAAG,CAAC,GAAGtB,MAAM,CAACgD,8BAAX,EAA2C1B,GAA3C,EAAgD,KAAKK,OAArD,CAAN;AACD;;AAEKC,YAAAA,GAzFR,GAyFc;AACVC,cAAAA,IAAI,EAAE,SADI;AAEVE,cAAAA,OAAO,EAAEK,MAAM,CAACa,SAAP,CAAiBlB,OAFhB;AAGVC,cAAAA,IAAI,EAAEI,MAAM,CAACJ;AAHH,aAzFd;AA8FErB,YAAAA,QAAQ,CAAC,IAAD,EAAOyB,MAAM,CAACc,GAAd,EAAmB5B,GAAnB,EAAwB;AAC9BM,cAAAA,GAAG,EAAHA;AAD8B,aAAxB,CAAR;;AA9FF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = loader;\n\nvar _loaderUtils = require(\"loader-utils\");\n\nvar _schemaUtils = require(\"schema-utils\");\n\nvar _postcss = _interopRequireDefault(require(\"postcss\"));\n\nvar _semver = require(\"semver\");\n\nvar _package = _interopRequireDefault(require(\"postcss/package.json\"));\n\nvar _Warning = _interopRequireDefault(require(\"./Warning\"));\n\nvar _Error = _interopRequireDefault(require(\"./Error\"));\n\nvar _options = _interopRequireDefault(require(\"./options.json\"));\n\nvar _utils = require(\"./utils\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * **PostCSS Loader**\n *\n * Loads && processes CSS with [PostCSS](https://github.com/postcss/postcss)\n *\n * @method loader\n *\n * @param {String} content Source\n * @param {Object} sourceMap Source Map\n * @param {Object} meta Meta\n *\n * @return {callback} callback Result\n */\nasync function loader(content, sourceMap, meta) {\n  const options = (0, _loaderUtils.getOptions)(this);\n  (0, _schemaUtils.validate)(_options.default, options, {\n    name: 'PostCSS Loader',\n    baseDataPath: 'options'\n  });\n  const callback = this.async();\n  const configOption = typeof options.postcssOptions === 'undefined' || typeof options.postcssOptions.config === 'undefined' ? true : options.postcssOptions.config;\n  let loadedConfig;\n\n  if (configOption) {\n    try {\n      loadedConfig = await (0, _utils.loadConfig)(this, configOption);\n    } catch (error) {\n      callback(error);\n      return;\n    }\n  }\n\n  const useSourceMap = typeof options.sourceMap !== 'undefined' ? options.sourceMap : this.sourceMap;\n  const {\n    plugins,\n    processOptions\n  } = (0, _utils.getPostcssOptions)(this, loadedConfig, options.postcssOptions);\n\n  if (useSourceMap) {\n    processOptions.map = {\n      inline: false,\n      annotation: false,\n      ...processOptions.map\n    };\n  }\n\n  if (sourceMap && processOptions.map) {\n    processOptions.map.prev = (0, _utils.normalizeSourceMap)(sourceMap, this.context);\n  }\n\n  let root; // Reuse PostCSS AST from other loaders\n\n  if (meta && meta.ast && meta.ast.type === 'postcss' && (0, _semver.satisfies)(meta.ast.version, `^${_package.default.version}`)) {\n    ({\n      root\n    } = meta.ast);\n  }\n\n  if (!root && options.execute) {\n    // eslint-disable-next-line no-param-reassign\n    content = (0, _utils.exec)(content, this);\n  }\n\n  let result;\n\n  try {\n    result = await (0, _postcss.default)(plugins).process(root || content, processOptions);\n  } catch (error) {\n    if (error.file) {\n      this.addDependency(error.file);\n    }\n\n    if (error.name === 'CssSyntaxError') {\n      callback(new _Error.default(error));\n    } else {\n      callback(error);\n    }\n\n    return;\n  }\n\n  for (const warning of result.warnings()) {\n    this.emitWarning(new _Warning.default(warning));\n  }\n\n  for (const message of result.messages) {\n    if (message.type === 'dependency') {\n      this.addDependency(message.file);\n    }\n\n    if (message.type === 'asset' && message.content && message.file) {\n      this.emitFile(message.file, message.content, message.sourceMap, message.info);\n    }\n  } // eslint-disable-next-line no-undefined\n\n\n  let map = result.map ? result.map.toJSON() : undefined;\n\n  if (map && useSourceMap) {\n    map = (0, _utils.normalizeSourceMapAfterPostcss)(map, this.context);\n  }\n\n  const ast = {\n    type: 'postcss',\n    version: result.processor.version,\n    root: result.root\n  };\n  callback(null, result.css, map, {\n    ast\n  });\n}"]},"metadata":{},"sourceType":"script"}