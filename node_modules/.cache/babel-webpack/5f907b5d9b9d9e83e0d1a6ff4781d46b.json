{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/regenerator\");\n\nvar _toArray = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/toArray\");\n\nvar _asyncToGenerator = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _toConsumableArray = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/toConsumableArray\");\n\nvar _slicedToArray = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getSassImplementation = getSassImplementation;\nexports.getSassOptions = getSassOptions;\nexports.getWebpackResolver = getWebpackResolver;\nexports.getWebpackImporter = getWebpackImporter;\nexports.getRenderFunctionFromSassImplementation = getRenderFunctionFromSassImplementation;\nexports.normalizeSourceMap = normalizeSourceMap;\n\nvar _url = _interopRequireDefault(require(\"url\"));\n\nvar _path = _interopRequireDefault(require(\"path\"));\n\nvar _semver = _interopRequireDefault(require(\"semver\"));\n\nvar _full = require(\"klona/full\");\n\nvar _loaderUtils = require(\"loader-utils\");\n\nvar _neoAsync = _interopRequireDefault(require(\"neo-async\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction getDefaultSassImplementation() {\n  var sassImplPkg = 'sass';\n\n  try {\n    require.resolve('sass');\n  } catch (error) {\n    try {\n      require.resolve('node-sass');\n\n      sassImplPkg = 'node-sass';\n    } catch (ignoreError) {\n      sassImplPkg = 'sass';\n    }\n  } // eslint-disable-next-line import/no-dynamic-require, global-require\n\n\n  return require(sassImplPkg);\n}\n/**\n * @public\n * This function is not Webpack-specific and can be used by tools wishing to\n * mimic `sass-loader`'s behaviour, so its signature should not be changed.\n */\n\n\nfunction getSassImplementation(implementation) {\n  var resolvedImplementation = implementation;\n\n  if (!resolvedImplementation) {\n    // eslint-disable-next-line no-param-reassign\n    resolvedImplementation = getDefaultSassImplementation();\n  }\n\n  var _resolvedImplementati = resolvedImplementation,\n      info = _resolvedImplementati.info;\n\n  if (!info) {\n    throw new Error('Unknown Sass implementation.');\n  }\n\n  var infoParts = info.split('\\t');\n\n  if (infoParts.length < 2) {\n    throw new Error(\"Unknown Sass implementation \\\"\".concat(info, \"\\\".\"));\n  }\n\n  var _infoParts = _slicedToArray(infoParts, 2),\n      implementationName = _infoParts[0],\n      version = _infoParts[1];\n\n  if (implementationName === 'dart-sass') {\n    if (!_semver.default.satisfies(version, '^1.3.0')) {\n      throw new Error(\"Dart Sass version \".concat(version, \" is incompatible with ^1.3.0.\"));\n    }\n\n    return resolvedImplementation;\n  } else if (implementationName === 'node-sass') {\n    if (!_semver.default.satisfies(version, '^4.0.0 || ^5.0.0')) {\n      throw new Error(\"Node Sass version \".concat(version, \" is incompatible with ^4.0.0 || ^5.0.0.\"));\n    }\n\n    return resolvedImplementation;\n  }\n\n  throw new Error(\"Unknown Sass implementation \\\"\".concat(implementationName, \"\\\".\"));\n}\n\nfunction isProductionLikeMode(loaderContext) {\n  return loaderContext.mode === 'production' || !loaderContext.mode;\n}\n\nfunction proxyCustomImporters(importers, loaderContext) {\n  return [].concat(importers).map(function (importer) {\n    return function proxyImporter() {\n      this.webpackLoaderContext = loaderContext;\n\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      return importer.apply(this, args);\n    };\n  });\n}\n/**\n * Derives the sass options from the loader context and normalizes its values with sane defaults.\n *\n * @param {object} loaderContext\n * @param {object} loaderOptions\n * @param {string} content\n * @param {object} implementation\n * @param {boolean} useSourceMap\n * @returns {Object}\n */\n\n\nfunction getSassOptions(loaderContext, loaderOptions, content, implementation, useSourceMap) {\n  var options = (0, _full.klona)(loaderOptions.sassOptions ? typeof loaderOptions.sassOptions === 'function' ? loaderOptions.sassOptions(loaderContext) || {} : loaderOptions.sassOptions : {});\n  var isDartSass = implementation.info.includes('dart-sass');\n\n  if (isDartSass) {\n    var shouldTryToResolveFibers = !options.fiber && options.fiber !== false;\n\n    if (shouldTryToResolveFibers) {\n      var fibers;\n\n      try {\n        fibers = require.resolve('fibers');\n      } catch (_error) {// Nothing\n      }\n\n      if (fibers) {\n        // eslint-disable-next-line global-require, import/no-dynamic-require\n        options.fiber = require(fibers);\n      }\n    } else if (options.fiber === false) {\n      // Don't pass the `fiber` option for `sass` (`Dart Sass`)\n      delete options.fiber;\n    }\n  } else {\n    // Don't pass the `fiber` option for `node-sass`\n    delete options.fiber;\n  }\n\n  options.file = loaderContext.resourcePath;\n  options.data = loaderOptions.additionalData ? typeof loaderOptions.additionalData === 'function' ? loaderOptions.additionalData(content, loaderContext) : \"\".concat(loaderOptions.additionalData, \"\\n\").concat(content) : content; // opt.outputStyle\n\n  if (!options.outputStyle && isProductionLikeMode(loaderContext)) {\n    options.outputStyle = 'compressed';\n  }\n\n  if (useSourceMap) {\n    // Deliberately overriding the sourceMap option here.\n    // node-sass won't produce source maps if the data option is used and options.sourceMap is not a string.\n    // In case it is a string, options.sourceMap should be a path where the source map is written.\n    // But since we're using the data option, the source map will not actually be written, but\n    // all paths in sourceMap.sources will be relative to that path.\n    // Pretty complicated... :(\n    options.sourceMap = true;\n    options.outFile = _path.default.join(loaderContext.rootContext, 'style.css.map');\n    options.sourceMapContents = true;\n    options.omitSourceMapUrl = true;\n    options.sourceMapEmbed = false;\n  }\n\n  var resourcePath = loaderContext.resourcePath;\n\n  var ext = _path.default.extname(resourcePath); // If we are compiling sass and indentedSyntax isn't set, automatically set it.\n\n\n  if (ext && ext.toLowerCase() === '.sass' && typeof options.indentedSyntax === 'undefined') {\n    options.indentedSyntax = true;\n  } else {\n    options.indentedSyntax = Boolean(options.indentedSyntax);\n  } // Allow passing custom importers to `sass`/`node-sass`. Accepts `Function` or an array of `Function`s.\n\n\n  options.importer = options.importer ? proxyCustomImporters(Array.isArray(options.importer) ? options.importer : [options.importer], loaderContext) : [];\n  options.includePaths = [].concat(process.cwd()).concat(options.includePaths || []).concat(process.env.SASS_PATH ? process.env.SASS_PATH.split(process.platform === 'win32' ? ';' : ':') : []);\n  return options;\n} // Examples:\n// - ~package\n// - ~package/\n// - ~@org\n// - ~@org/\n// - ~@org/package\n// - ~@org/package/\n\n\nvar isModuleImport = /^~([^/]+|[^/]+\\/|@[^/]+[/][^/]+|@[^/]+\\/?|@[^/]+[/][^/]+\\/)$/;\n/**\n * When `sass`/`node-sass` tries to resolve an import, it uses a special algorithm.\n * Since the `sass-loader` uses webpack to resolve the modules, we need to simulate that algorithm.\n * This function returns an array of import paths to try.\n * The last entry in the array is always the original url to enable straight-forward webpack.config aliases.\n *\n * We don't need emulate `dart-sass` \"It's not clear which file to import.\" errors (when \"file.ext\" and \"_file.ext\" files are present simultaneously in the same directory).\n * This reduces performance and `dart-sass` always do it on own side.\n *\n * @param {string} url\n * @param {boolean} forWebpackResolver\n * @param {string} rootContext\n * @returns {Array<string>}\n */\n\nfunction getPossibleRequests( // eslint-disable-next-line no-shadow\nurl) {\n  var forWebpackResolver = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  var rootContext = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  var request = (0, _loaderUtils.urlToRequest)(url, // Maybe it is server-relative URLs\n  forWebpackResolver && rootContext); // In case there is module request, send this to webpack resolver\n\n  if (forWebpackResolver && isModuleImport.test(url)) {\n    return _toConsumableArray(new Set([request, url]));\n  } // Keep in mind: ext can also be something like '.datepicker' when the true extension is omitted and the filename contains a dot.\n  // @see https://github.com/webpack-contrib/sass-loader/issues/167\n\n\n  var ext = _path.default.extname(request).toLowerCase(); // Because @import is also defined in CSS, Sass needs a way of compiling plain CSS @imports without trying to import the files at compile time.\n  // To accomplish this, and to ensure SCSS is as much of a superset of CSS as possible, Sass will compile any @imports with the following characteristics to plain CSS imports:\n  //  - imports where the URL ends with .css.\n  //  - imports where the URL begins http:// or https://.\n  //  - imports where the URL is written as a url().\n  //  - imports that have media queries.\n  //\n  // The `node-sass` package sends `@import` ending on `.css` to importer, it is bug, so we skip resolve\n\n\n  if (ext === '.css') {\n    return [];\n  }\n\n  var dirname = _path.default.dirname(request);\n\n  var basename = _path.default.basename(request);\n\n  return _toConsumableArray(new Set([\"\".concat(dirname, \"/_\").concat(basename), request].concat(forWebpackResolver ? [\"\".concat(_path.default.dirname(url), \"/_\").concat(basename), url] : [])));\n}\n\nfunction promiseResolve(callbackResolve) {\n  return function (context, request) {\n    return new Promise(function (resolve, reject) {\n      callbackResolve(context, request, function (error, result) {\n        if (error) {\n          reject(error);\n        } else {\n          resolve(result);\n        }\n      });\n    });\n  };\n}\n\nvar IS_SPECIAL_MODULE_IMPORT = /^~[^/]+$/; // `[drive_letter]:\\` + `\\\\[server]\\[sharename]\\`\n\nvar IS_NATIVE_WIN32_PATH = /^[a-z]:[/\\\\]|^\\\\\\\\/i;\n/**\n * @public\n * Create the resolve function used in the custom Sass importer.\n *\n * Can be used by external tools to mimic how `sass-loader` works, for example\n * in a Jest transform. Such usages will want to wrap `resolve.create` from\n * [`enhanced-resolve`]{@link https://github.com/webpack/enhanced-resolve} to\n * pass as the `resolverFactory` argument.\n *\n * @param {Function} resolverFactory - A factory function for creating a Webpack\n *   resolver.\n * @param {Object} implementation - The imported Sass implementation, both\n *   `sass` (Dart Sass) and `node-sass` are supported.\n * @param {string[]} [includePaths] - The list of include paths passed to Sass.\n * @param {boolean} [rootContext] - The configured Webpack root context.\n *\n * @throws If a compatible Sass implementation cannot be found.\n */\n\nfunction getWebpackResolver(resolverFactory, implementation) {\n  var includePaths = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n  var rootContext = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n\n  function startResolving(_x) {\n    return _startResolving.apply(this, arguments);\n  }\n\n  function _startResolving() {\n    _startResolving = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(resolutionMap) {\n      var _resolutionMap, possibleRequests, _resolutionMap2, _resolutionMap2$, resolve, context, _possibleRequests, tailResult, _resolutionMap3, tailResolutionMap;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (!(resolutionMap.length === 0)) {\n                _context.next = 2;\n                break;\n              }\n\n              return _context.abrupt(\"return\", Promise.reject());\n\n            case 2:\n              _resolutionMap = _slicedToArray(resolutionMap, 1), possibleRequests = _resolutionMap[0].possibleRequests;\n\n              if (!(possibleRequests.length === 0)) {\n                _context.next = 5;\n                break;\n              }\n\n              return _context.abrupt(\"return\", Promise.reject());\n\n            case 5:\n              _resolutionMap2 = _slicedToArray(resolutionMap, 1), _resolutionMap2$ = _resolutionMap2[0], resolve = _resolutionMap2$.resolve, context = _resolutionMap2$.context;\n              _context.prev = 6;\n              _context.next = 9;\n              return resolve(context, possibleRequests[0]);\n\n            case 9:\n              return _context.abrupt(\"return\", _context.sent);\n\n            case 12:\n              _context.prev = 12;\n              _context.t0 = _context[\"catch\"](6);\n              _possibleRequests = _toArray(possibleRequests), tailResult = _possibleRequests.slice(1);\n\n              if (!(tailResult.length === 0)) {\n                _context.next = 18;\n                break;\n              }\n\n              _resolutionMap3 = _toArray(resolutionMap), tailResolutionMap = _resolutionMap3.slice(1);\n              return _context.abrupt(\"return\", startResolving(tailResolutionMap));\n\n            case 18:\n              // eslint-disable-next-line no-param-reassign\n              resolutionMap[0].possibleRequests = tailResult;\n              return _context.abrupt(\"return\", startResolving(resolutionMap));\n\n            case 20:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[6, 12]]);\n    }));\n    return _startResolving.apply(this, arguments);\n  }\n\n  var isDartSass = implementation.info.includes('dart-sass');\n  var sassResolve = promiseResolve(resolverFactory({\n    alias: [],\n    aliasFields: [],\n    conditionNames: [],\n    descriptionFiles: [],\n    extensions: ['.sass', '.scss', '.css'],\n    exportsFields: [],\n    mainFields: [],\n    mainFiles: ['_index', 'index'],\n    modules: [],\n    restrictions: [/\\.((sa|sc|c)ss)$/i]\n  }));\n  var webpackResolve = promiseResolve(resolverFactory({\n    conditionNames: ['sass', 'style'],\n    mainFields: ['sass', 'style', 'main', '...'],\n    mainFiles: ['_index', 'index', '...'],\n    extensions: ['.sass', '.scss', '.css'],\n    restrictions: [/\\.((sa|sc|c)ss)$/i]\n  }));\n  return function (context, request) {\n    var originalRequest = request;\n    var isFileScheme = originalRequest.slice(0, 5).toLowerCase() === 'file:';\n\n    if (isFileScheme) {\n      try {\n        // eslint-disable-next-line no-param-reassign\n        request = _url.default.fileURLToPath(originalRequest);\n      } catch (ignoreError) {\n        // eslint-disable-next-line no-param-reassign\n        request = request.slice(7);\n      }\n    }\n\n    var resolutionMap = [];\n    var needEmulateSassResolver = // `sass` doesn't support module import\n    !IS_SPECIAL_MODULE_IMPORT.test(request) && // We need improve absolute paths handling.\n    // Absolute paths should be resolved:\n    // - Server-relative URLs - `<context>/path/to/file.ext` (where `<context>` is root context)\n    // - Absolute path - `/full/path/to/file.ext` or `C:\\\\full\\path\\to\\file.ext`\n    !isFileScheme && !originalRequest.startsWith('/') && !IS_NATIVE_WIN32_PATH.test(originalRequest);\n\n    if (includePaths.length > 0 && needEmulateSassResolver) {\n      // The order of import precedence is as follows:\n      //\n      // 1. Filesystem imports relative to the base file.\n      // 2. Custom importer imports.\n      // 3. Filesystem imports relative to the working directory.\n      // 4. Filesystem imports relative to an `includePaths` path.\n      // 5. Filesystem imports relative to a `SASS_PATH` path.\n      //\n      // Because `sass`/`node-sass` run custom importers before `3`, `4` and `5` points, we need to emulate this behavior to avoid wrong resolution.\n      var sassPossibleRequests = getPossibleRequests(request); // `node-sass` calls our importer before `1. Filesystem imports relative to the base file.`, so we need emulate this too\n\n      if (!isDartSass) {\n        resolutionMap = resolutionMap.concat({\n          resolve: sassResolve,\n          context: _path.default.dirname(context),\n          possibleRequests: sassPossibleRequests\n        });\n      }\n\n      resolutionMap = resolutionMap.concat( // eslint-disable-next-line no-shadow\n      includePaths.map(function (context) {\n        return {\n          resolve: sassResolve,\n          context: context,\n          possibleRequests: sassPossibleRequests\n        };\n      }));\n    }\n\n    var webpackPossibleRequests = getPossibleRequests(request, true, rootContext);\n    resolutionMap = resolutionMap.concat({\n      resolve: webpackResolve,\n      context: _path.default.dirname(context),\n      possibleRequests: webpackPossibleRequests\n    });\n    return startResolving(resolutionMap);\n  };\n}\n\nvar matchCss = /\\.css$/i;\n\nfunction getWebpackImporter(loaderContext, implementation, includePaths) {\n  var resolve = getWebpackResolver(loaderContext.getResolve, implementation, includePaths, loaderContext.rootContext);\n  return function (originalUrl, prev, done) {\n    resolve(prev, originalUrl).then(function (result) {\n      // Add the result as dependency.\n      // Although we're also using stats.includedFiles, this might come in handy when an error occurs.\n      // In this case, we don't get stats.includedFiles from node-sass/sass.\n      loaderContext.addDependency(_path.default.normalize(result)); // By removing the CSS file extension, we trigger node-sass to include the CSS file instead of just linking it.\n\n      done({\n        file: result.replace(matchCss, '')\n      });\n    }) // Catch all resolving errors, return the original file and pass responsibility back to other custom importers\n    .catch(function () {\n      done({\n        file: originalUrl\n      });\n    });\n  };\n}\n\nvar nodeSassJobQueue = null;\n/**\n * Verifies that the implementation and version of Sass is supported by this loader.\n *\n * @param {Object} implementation\n * @returns {Function}\n */\n\nfunction getRenderFunctionFromSassImplementation(implementation) {\n  var isDartSass = implementation.info.includes('dart-sass');\n\n  if (isDartSass) {\n    return implementation.render.bind(implementation);\n  } // There is an issue with node-sass when async custom importers are used\n  // See https://github.com/sass/node-sass/issues/857#issuecomment-93594360\n  // We need to use a job queue to make sure that one thread is always available to the UV lib\n\n\n  if (nodeSassJobQueue === null) {\n    var threadPoolSize = Number(process.env.UV_THREADPOOL_SIZE || 4);\n    nodeSassJobQueue = _neoAsync.default.queue(implementation.render.bind(implementation), threadPoolSize - 1);\n  }\n\n  return nodeSassJobQueue.push.bind(nodeSassJobQueue);\n}\n\nvar ABSOLUTE_SCHEME = /^[A-Za-z0-9+\\-.]+:/;\n\nfunction getURLType(source) {\n  if (source[0] === '/') {\n    if (source[1] === '/') {\n      return 'scheme-relative';\n    }\n\n    return 'path-absolute';\n  }\n\n  if (IS_NATIVE_WIN32_PATH.test(source)) {\n    return 'path-absolute';\n  }\n\n  return ABSOLUTE_SCHEME.test(source) ? 'absolute' : 'path-relative';\n}\n\nfunction normalizeSourceMap(map, rootContext) {\n  var newMap = map; // result.map.file is an optional property that provides the output filename.\n  // Since we don't know the final filename in the webpack build chain yet, it makes no sense to have it.\n  // eslint-disable-next-line no-param-reassign\n\n  delete newMap.file; // eslint-disable-next-line no-param-reassign\n\n  newMap.sourceRoot = ''; // node-sass returns POSIX paths, that's why we need to transform them back to native paths.\n  // This fixes an error on windows where the source-map module cannot resolve the source maps.\n  // @see https://github.com/webpack-contrib/sass-loader/issues/366#issuecomment-279460722\n  // eslint-disable-next-line no-param-reassign\n\n  newMap.sources = newMap.sources.map(function (source) {\n    var sourceType = getURLType(source); // Do no touch `scheme-relative`, `path-absolute` and `absolute` types\n\n    if (sourceType === 'path-relative') {\n      return _path.default.resolve(rootContext, _path.default.normalize(source));\n    }\n\n    return source;\n  });\n  return newMap;\n}","map":{"version":3,"sources":["/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/sass-loader/dist/utils.js"],"names":["Object","defineProperty","exports","value","getSassImplementation","getSassOptions","getWebpackResolver","getWebpackImporter","getRenderFunctionFromSassImplementation","normalizeSourceMap","_url","_interopRequireDefault","require","_path","_semver","_full","_loaderUtils","_neoAsync","obj","__esModule","default","getDefaultSassImplementation","sassImplPkg","resolve","error","ignoreError","implementation","resolvedImplementation","info","Error","infoParts","split","length","implementationName","version","satisfies","isProductionLikeMode","loaderContext","mode","proxyCustomImporters","importers","concat","map","importer","proxyImporter","webpackLoaderContext","args","apply","loaderOptions","content","useSourceMap","options","klona","sassOptions","isDartSass","includes","shouldTryToResolveFibers","fiber","fibers","_error","file","resourcePath","data","additionalData","outputStyle","sourceMap","outFile","join","rootContext","sourceMapContents","omitSourceMapUrl","sourceMapEmbed","ext","extname","toLowerCase","indentedSyntax","Boolean","Array","isArray","includePaths","process","cwd","env","SASS_PATH","platform","isModuleImport","getPossibleRequests","url","forWebpackResolver","request","urlToRequest","test","Set","dirname","basename","promiseResolve","callbackResolve","context","Promise","reject","result","IS_SPECIAL_MODULE_IMPORT","IS_NATIVE_WIN32_PATH","resolverFactory","startResolving","resolutionMap","possibleRequests","tailResult","tailResolutionMap","sassResolve","alias","aliasFields","conditionNames","descriptionFiles","extensions","exportsFields","mainFields","mainFiles","modules","restrictions","webpackResolve","originalRequest","isFileScheme","slice","fileURLToPath","needEmulateSassResolver","startsWith","sassPossibleRequests","webpackPossibleRequests","matchCss","getResolve","originalUrl","prev","done","then","addDependency","normalize","replace","catch","nodeSassJobQueue","render","bind","threadPoolSize","Number","UV_THREADPOOL_SIZE","queue","push","ABSOLUTE_SCHEME","getURLType","source","newMap","sourceRoot","sources","sourceType"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getSassImplementation = getSassImplementation;\nexports.getSassOptions = getSassOptions;\nexports.getWebpackResolver = getWebpackResolver;\nexports.getWebpackImporter = getWebpackImporter;\nexports.getRenderFunctionFromSassImplementation = getRenderFunctionFromSassImplementation;\nexports.normalizeSourceMap = normalizeSourceMap;\n\nvar _url = _interopRequireDefault(require(\"url\"));\n\nvar _path = _interopRequireDefault(require(\"path\"));\n\nvar _semver = _interopRequireDefault(require(\"semver\"));\n\nvar _full = require(\"klona/full\");\n\nvar _loaderUtils = require(\"loader-utils\");\n\nvar _neoAsync = _interopRequireDefault(require(\"neo-async\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction getDefaultSassImplementation() {\n  let sassImplPkg = 'sass';\n\n  try {\n    require.resolve('sass');\n  } catch (error) {\n    try {\n      require.resolve('node-sass');\n\n      sassImplPkg = 'node-sass';\n    } catch (ignoreError) {\n      sassImplPkg = 'sass';\n    }\n  } // eslint-disable-next-line import/no-dynamic-require, global-require\n\n\n  return require(sassImplPkg);\n}\n/**\n * @public\n * This function is not Webpack-specific and can be used by tools wishing to\n * mimic `sass-loader`'s behaviour, so its signature should not be changed.\n */\n\n\nfunction getSassImplementation(implementation) {\n  let resolvedImplementation = implementation;\n\n  if (!resolvedImplementation) {\n    // eslint-disable-next-line no-param-reassign\n    resolvedImplementation = getDefaultSassImplementation();\n  }\n\n  const {\n    info\n  } = resolvedImplementation;\n\n  if (!info) {\n    throw new Error('Unknown Sass implementation.');\n  }\n\n  const infoParts = info.split('\\t');\n\n  if (infoParts.length < 2) {\n    throw new Error(`Unknown Sass implementation \"${info}\".`);\n  }\n\n  const [implementationName, version] = infoParts;\n\n  if (implementationName === 'dart-sass') {\n    if (!_semver.default.satisfies(version, '^1.3.0')) {\n      throw new Error(`Dart Sass version ${version} is incompatible with ^1.3.0.`);\n    }\n\n    return resolvedImplementation;\n  } else if (implementationName === 'node-sass') {\n    if (!_semver.default.satisfies(version, '^4.0.0 || ^5.0.0')) {\n      throw new Error(`Node Sass version ${version} is incompatible with ^4.0.0 || ^5.0.0.`);\n    }\n\n    return resolvedImplementation;\n  }\n\n  throw new Error(`Unknown Sass implementation \"${implementationName}\".`);\n}\n\nfunction isProductionLikeMode(loaderContext) {\n  return loaderContext.mode === 'production' || !loaderContext.mode;\n}\n\nfunction proxyCustomImporters(importers, loaderContext) {\n  return [].concat(importers).map(importer => {\n    return function proxyImporter(...args) {\n      this.webpackLoaderContext = loaderContext;\n      return importer.apply(this, args);\n    };\n  });\n}\n/**\n * Derives the sass options from the loader context and normalizes its values with sane defaults.\n *\n * @param {object} loaderContext\n * @param {object} loaderOptions\n * @param {string} content\n * @param {object} implementation\n * @param {boolean} useSourceMap\n * @returns {Object}\n */\n\n\nfunction getSassOptions(loaderContext, loaderOptions, content, implementation, useSourceMap) {\n  const options = (0, _full.klona)(loaderOptions.sassOptions ? typeof loaderOptions.sassOptions === 'function' ? loaderOptions.sassOptions(loaderContext) || {} : loaderOptions.sassOptions : {});\n  const isDartSass = implementation.info.includes('dart-sass');\n\n  if (isDartSass) {\n    const shouldTryToResolveFibers = !options.fiber && options.fiber !== false;\n\n    if (shouldTryToResolveFibers) {\n      let fibers;\n\n      try {\n        fibers = require.resolve('fibers');\n      } catch (_error) {// Nothing\n      }\n\n      if (fibers) {\n        // eslint-disable-next-line global-require, import/no-dynamic-require\n        options.fiber = require(fibers);\n      }\n    } else if (options.fiber === false) {\n      // Don't pass the `fiber` option for `sass` (`Dart Sass`)\n      delete options.fiber;\n    }\n  } else {\n    // Don't pass the `fiber` option for `node-sass`\n    delete options.fiber;\n  }\n\n  options.file = loaderContext.resourcePath;\n  options.data = loaderOptions.additionalData ? typeof loaderOptions.additionalData === 'function' ? loaderOptions.additionalData(content, loaderContext) : `${loaderOptions.additionalData}\\n${content}` : content; // opt.outputStyle\n\n  if (!options.outputStyle && isProductionLikeMode(loaderContext)) {\n    options.outputStyle = 'compressed';\n  }\n\n  if (useSourceMap) {\n    // Deliberately overriding the sourceMap option here.\n    // node-sass won't produce source maps if the data option is used and options.sourceMap is not a string.\n    // In case it is a string, options.sourceMap should be a path where the source map is written.\n    // But since we're using the data option, the source map will not actually be written, but\n    // all paths in sourceMap.sources will be relative to that path.\n    // Pretty complicated... :(\n    options.sourceMap = true;\n    options.outFile = _path.default.join(loaderContext.rootContext, 'style.css.map');\n    options.sourceMapContents = true;\n    options.omitSourceMapUrl = true;\n    options.sourceMapEmbed = false;\n  }\n\n  const {\n    resourcePath\n  } = loaderContext;\n\n  const ext = _path.default.extname(resourcePath); // If we are compiling sass and indentedSyntax isn't set, automatically set it.\n\n\n  if (ext && ext.toLowerCase() === '.sass' && typeof options.indentedSyntax === 'undefined') {\n    options.indentedSyntax = true;\n  } else {\n    options.indentedSyntax = Boolean(options.indentedSyntax);\n  } // Allow passing custom importers to `sass`/`node-sass`. Accepts `Function` or an array of `Function`s.\n\n\n  options.importer = options.importer ? proxyCustomImporters(Array.isArray(options.importer) ? options.importer : [options.importer], loaderContext) : [];\n  options.includePaths = [].concat(process.cwd()).concat(options.includePaths || []).concat(process.env.SASS_PATH ? process.env.SASS_PATH.split(process.platform === 'win32' ? ';' : ':') : []);\n  return options;\n} // Examples:\n// - ~package\n// - ~package/\n// - ~@org\n// - ~@org/\n// - ~@org/package\n// - ~@org/package/\n\n\nconst isModuleImport = /^~([^/]+|[^/]+\\/|@[^/]+[/][^/]+|@[^/]+\\/?|@[^/]+[/][^/]+\\/)$/;\n/**\n * When `sass`/`node-sass` tries to resolve an import, it uses a special algorithm.\n * Since the `sass-loader` uses webpack to resolve the modules, we need to simulate that algorithm.\n * This function returns an array of import paths to try.\n * The last entry in the array is always the original url to enable straight-forward webpack.config aliases.\n *\n * We don't need emulate `dart-sass` \"It's not clear which file to import.\" errors (when \"file.ext\" and \"_file.ext\" files are present simultaneously in the same directory).\n * This reduces performance and `dart-sass` always do it on own side.\n *\n * @param {string} url\n * @param {boolean} forWebpackResolver\n * @param {string} rootContext\n * @returns {Array<string>}\n */\n\nfunction getPossibleRequests( // eslint-disable-next-line no-shadow\nurl, forWebpackResolver = false, rootContext = false) {\n  const request = (0, _loaderUtils.urlToRequest)(url, // Maybe it is server-relative URLs\n  forWebpackResolver && rootContext); // In case there is module request, send this to webpack resolver\n\n  if (forWebpackResolver && isModuleImport.test(url)) {\n    return [...new Set([request, url])];\n  } // Keep in mind: ext can also be something like '.datepicker' when the true extension is omitted and the filename contains a dot.\n  // @see https://github.com/webpack-contrib/sass-loader/issues/167\n\n\n  const ext = _path.default.extname(request).toLowerCase(); // Because @import is also defined in CSS, Sass needs a way of compiling plain CSS @imports without trying to import the files at compile time.\n  // To accomplish this, and to ensure SCSS is as much of a superset of CSS as possible, Sass will compile any @imports with the following characteristics to plain CSS imports:\n  //  - imports where the URL ends with .css.\n  //  - imports where the URL begins http:// or https://.\n  //  - imports where the URL is written as a url().\n  //  - imports that have media queries.\n  //\n  // The `node-sass` package sends `@import` ending on `.css` to importer, it is bug, so we skip resolve\n\n\n  if (ext === '.css') {\n    return [];\n  }\n\n  const dirname = _path.default.dirname(request);\n\n  const basename = _path.default.basename(request);\n\n  return [...new Set([`${dirname}/_${basename}`, request].concat(forWebpackResolver ? [`${_path.default.dirname(url)}/_${basename}`, url] : []))];\n}\n\nfunction promiseResolve(callbackResolve) {\n  return (context, request) => new Promise((resolve, reject) => {\n    callbackResolve(context, request, (error, result) => {\n      if (error) {\n        reject(error);\n      } else {\n        resolve(result);\n      }\n    });\n  });\n}\n\nconst IS_SPECIAL_MODULE_IMPORT = /^~[^/]+$/; // `[drive_letter]:\\` + `\\\\[server]\\[sharename]\\`\n\nconst IS_NATIVE_WIN32_PATH = /^[a-z]:[/\\\\]|^\\\\\\\\/i;\n/**\n * @public\n * Create the resolve function used in the custom Sass importer.\n *\n * Can be used by external tools to mimic how `sass-loader` works, for example\n * in a Jest transform. Such usages will want to wrap `resolve.create` from\n * [`enhanced-resolve`]{@link https://github.com/webpack/enhanced-resolve} to\n * pass as the `resolverFactory` argument.\n *\n * @param {Function} resolverFactory - A factory function for creating a Webpack\n *   resolver.\n * @param {Object} implementation - The imported Sass implementation, both\n *   `sass` (Dart Sass) and `node-sass` are supported.\n * @param {string[]} [includePaths] - The list of include paths passed to Sass.\n * @param {boolean} [rootContext] - The configured Webpack root context.\n *\n * @throws If a compatible Sass implementation cannot be found.\n */\n\nfunction getWebpackResolver(resolverFactory, implementation, includePaths = [], rootContext = false) {\n  async function startResolving(resolutionMap) {\n    if (resolutionMap.length === 0) {\n      return Promise.reject();\n    }\n\n    const [{\n      possibleRequests\n    }] = resolutionMap;\n\n    if (possibleRequests.length === 0) {\n      return Promise.reject();\n    }\n\n    const [{\n      resolve,\n      context\n    }] = resolutionMap;\n\n    try {\n      return await resolve(context, possibleRequests[0]);\n    } catch (_ignoreError) {\n      const [, ...tailResult] = possibleRequests;\n\n      if (tailResult.length === 0) {\n        const [, ...tailResolutionMap] = resolutionMap;\n        return startResolving(tailResolutionMap);\n      } // eslint-disable-next-line no-param-reassign\n\n\n      resolutionMap[0].possibleRequests = tailResult;\n      return startResolving(resolutionMap);\n    }\n  }\n\n  const isDartSass = implementation.info.includes('dart-sass');\n  const sassResolve = promiseResolve(resolverFactory({\n    alias: [],\n    aliasFields: [],\n    conditionNames: [],\n    descriptionFiles: [],\n    extensions: ['.sass', '.scss', '.css'],\n    exportsFields: [],\n    mainFields: [],\n    mainFiles: ['_index', 'index'],\n    modules: [],\n    restrictions: [/\\.((sa|sc|c)ss)$/i]\n  }));\n  const webpackResolve = promiseResolve(resolverFactory({\n    conditionNames: ['sass', 'style'],\n    mainFields: ['sass', 'style', 'main', '...'],\n    mainFiles: ['_index', 'index', '...'],\n    extensions: ['.sass', '.scss', '.css'],\n    restrictions: [/\\.((sa|sc|c)ss)$/i]\n  }));\n  return (context, request) => {\n    const originalRequest = request;\n    const isFileScheme = originalRequest.slice(0, 5).toLowerCase() === 'file:';\n\n    if (isFileScheme) {\n      try {\n        // eslint-disable-next-line no-param-reassign\n        request = _url.default.fileURLToPath(originalRequest);\n      } catch (ignoreError) {\n        // eslint-disable-next-line no-param-reassign\n        request = request.slice(7);\n      }\n    }\n\n    let resolutionMap = [];\n    const needEmulateSassResolver = // `sass` doesn't support module import\n    !IS_SPECIAL_MODULE_IMPORT.test(request) && // We need improve absolute paths handling.\n    // Absolute paths should be resolved:\n    // - Server-relative URLs - `<context>/path/to/file.ext` (where `<context>` is root context)\n    // - Absolute path - `/full/path/to/file.ext` or `C:\\\\full\\path\\to\\file.ext`\n    !isFileScheme && !originalRequest.startsWith('/') && !IS_NATIVE_WIN32_PATH.test(originalRequest);\n\n    if (includePaths.length > 0 && needEmulateSassResolver) {\n      // The order of import precedence is as follows:\n      //\n      // 1. Filesystem imports relative to the base file.\n      // 2. Custom importer imports.\n      // 3. Filesystem imports relative to the working directory.\n      // 4. Filesystem imports relative to an `includePaths` path.\n      // 5. Filesystem imports relative to a `SASS_PATH` path.\n      //\n      // Because `sass`/`node-sass` run custom importers before `3`, `4` and `5` points, we need to emulate this behavior to avoid wrong resolution.\n      const sassPossibleRequests = getPossibleRequests(request); // `node-sass` calls our importer before `1. Filesystem imports relative to the base file.`, so we need emulate this too\n\n      if (!isDartSass) {\n        resolutionMap = resolutionMap.concat({\n          resolve: sassResolve,\n          context: _path.default.dirname(context),\n          possibleRequests: sassPossibleRequests\n        });\n      }\n\n      resolutionMap = resolutionMap.concat( // eslint-disable-next-line no-shadow\n      includePaths.map(context => ({\n        resolve: sassResolve,\n        context,\n        possibleRequests: sassPossibleRequests\n      })));\n    }\n\n    const webpackPossibleRequests = getPossibleRequests(request, true, rootContext);\n    resolutionMap = resolutionMap.concat({\n      resolve: webpackResolve,\n      context: _path.default.dirname(context),\n      possibleRequests: webpackPossibleRequests\n    });\n    return startResolving(resolutionMap);\n  };\n}\n\nconst matchCss = /\\.css$/i;\n\nfunction getWebpackImporter(loaderContext, implementation, includePaths) {\n  const resolve = getWebpackResolver(loaderContext.getResolve, implementation, includePaths, loaderContext.rootContext);\n  return (originalUrl, prev, done) => {\n    resolve(prev, originalUrl).then(result => {\n      // Add the result as dependency.\n      // Although we're also using stats.includedFiles, this might come in handy when an error occurs.\n      // In this case, we don't get stats.includedFiles from node-sass/sass.\n      loaderContext.addDependency(_path.default.normalize(result)); // By removing the CSS file extension, we trigger node-sass to include the CSS file instead of just linking it.\n\n      done({\n        file: result.replace(matchCss, '')\n      });\n    }) // Catch all resolving errors, return the original file and pass responsibility back to other custom importers\n    .catch(() => {\n      done({\n        file: originalUrl\n      });\n    });\n  };\n}\n\nlet nodeSassJobQueue = null;\n/**\n * Verifies that the implementation and version of Sass is supported by this loader.\n *\n * @param {Object} implementation\n * @returns {Function}\n */\n\nfunction getRenderFunctionFromSassImplementation(implementation) {\n  const isDartSass = implementation.info.includes('dart-sass');\n\n  if (isDartSass) {\n    return implementation.render.bind(implementation);\n  } // There is an issue with node-sass when async custom importers are used\n  // See https://github.com/sass/node-sass/issues/857#issuecomment-93594360\n  // We need to use a job queue to make sure that one thread is always available to the UV lib\n\n\n  if (nodeSassJobQueue === null) {\n    const threadPoolSize = Number(process.env.UV_THREADPOOL_SIZE || 4);\n    nodeSassJobQueue = _neoAsync.default.queue(implementation.render.bind(implementation), threadPoolSize - 1);\n  }\n\n  return nodeSassJobQueue.push.bind(nodeSassJobQueue);\n}\n\nconst ABSOLUTE_SCHEME = /^[A-Za-z0-9+\\-.]+:/;\n\nfunction getURLType(source) {\n  if (source[0] === '/') {\n    if (source[1] === '/') {\n      return 'scheme-relative';\n    }\n\n    return 'path-absolute';\n  }\n\n  if (IS_NATIVE_WIN32_PATH.test(source)) {\n    return 'path-absolute';\n  }\n\n  return ABSOLUTE_SCHEME.test(source) ? 'absolute' : 'path-relative';\n}\n\nfunction normalizeSourceMap(map, rootContext) {\n  const newMap = map; // result.map.file is an optional property that provides the output filename.\n  // Since we don't know the final filename in the webpack build chain yet, it makes no sense to have it.\n  // eslint-disable-next-line no-param-reassign\n\n  delete newMap.file; // eslint-disable-next-line no-param-reassign\n\n  newMap.sourceRoot = ''; // node-sass returns POSIX paths, that's why we need to transform them back to native paths.\n  // This fixes an error on windows where the source-map module cannot resolve the source maps.\n  // @see https://github.com/webpack-contrib/sass-loader/issues/366#issuecomment-279460722\n  // eslint-disable-next-line no-param-reassign\n\n  newMap.sources = newMap.sources.map(source => {\n    const sourceType = getURLType(source); // Do no touch `scheme-relative`, `path-absolute` and `absolute` types\n\n    if (sourceType === 'path-relative') {\n      return _path.default.resolve(rootContext, _path.default.normalize(source));\n    }\n\n    return source;\n  });\n  return newMap;\n}"]},"metadata":{},"sourceType":"script"}