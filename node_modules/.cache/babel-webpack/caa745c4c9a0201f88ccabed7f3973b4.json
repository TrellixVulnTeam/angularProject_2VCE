{"ast":null,"code":"(function (factory) {\n  if (typeof module === \"object\" && typeof module.exports === \"object\") {\n    var v = factory(require, exports);\n    if (v !== undefined) module.exports = v;\n  } else if (typeof define === \"function\" && define.amd) {\n    define(\"@angular/compiler-cli/ngcc/src/dependencies/dts_dependency_host\", [\"require\", \"exports\", \"tslib\", \"@angular/compiler-cli/ngcc/src/dependencies/esm_dependency_host\", \"@angular/compiler-cli/ngcc/src/dependencies/module_resolver\"], factory);\n  }\n})(function (require, exports) {\n  \"use strict\";\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.DtsDependencyHost = void 0;\n\n  var tslib_1 = require(\"tslib\");\n\n  var esm_dependency_host_1 = require(\"@angular/compiler-cli/ngcc/src/dependencies/esm_dependency_host\");\n\n  var module_resolver_1 = require(\"@angular/compiler-cli/ngcc/src/dependencies/module_resolver\");\n  /**\n   * Helper functions for computing dependencies via typings files.\n   */\n\n\n  var DtsDependencyHost =\n  /** @class */\n  function (_super) {\n    tslib_1.__extends(DtsDependencyHost, _super);\n\n    function DtsDependencyHost(fs, pathMappings) {\n      return _super.call(this, fs, new module_resolver_1.ModuleResolver(fs, pathMappings, ['', '.d.ts', '/index.d.ts', '.js', '/index.js']), false) || this;\n    }\n    /**\n     * Attempts to process the `importPath` directly and also inside `@types/...`.\n     */\n\n\n    DtsDependencyHost.prototype.processImport = function (importPath, file, dependencies, missing, deepImports, alreadySeen) {\n      return _super.prototype.processImport.call(this, importPath, file, dependencies, missing, deepImports, alreadySeen) || _super.prototype.processImport.call(this, \"@types/\" + importPath, file, dependencies, missing, deepImports, alreadySeen);\n    };\n\n    return DtsDependencyHost;\n  }(esm_dependency_host_1.EsmDependencyHost);\n\n  exports.DtsDependencyHost = DtsDependencyHost;\n});","map":{"version":3,"sources":["../../../../../../../../packages/compiler-cli/ngcc/src/dependencies/dts_dependency_host.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;AASA,MAAA,qBAAA,GAAA,OAAA,CAAA,iEAAA,CAAA;;AACA,MAAA,iBAAA,GAAA,OAAA,CAAA,6DAAA,CAAA;AAEA;;AAEG;;;AACH,MAAA,iBAAA;AAAA;AAAA,YAAA,MAAA,EAAA;AAAuC,IAAA,OAAA,CAAA,SAAA,CAAA,iBAAA,EAAA,MAAA;;AACrC,aAAA,iBAAA,CAAY,EAAZ,EAAoC,YAApC,EAA+D;aAC7D,MAAA,CAAA,IAAA,CAAA,IAAA,EACI,EADJ,EACQ,IAAI,iBAAA,CAAA,cAAJ,CAAmB,EAAnB,EAAuB,YAAvB,EAAqC,CAAC,EAAD,EAAK,OAAL,EAAc,aAAd,EAA6B,KAA7B,EAAoC,WAApC,CAArC,CADR,EAEI,KAFJ,KAEU,I;AACX;AAED;;AAEG;;;AACO,IAAA,iBAAA,CAAA,SAAA,CAAA,aAAA,GAAV,UACI,UADJ,EACwB,IADxB,EAC8C,YAD9C,EAEI,OAFJ,EAE0B,WAF1B,EAEoD,WAFpD,EAEoF;AAClF,aAAO,MAAA,CAAA,SAAA,CAAM,aAAN,CAAmB,IAAnB,CAAmB,IAAnB,EAAoB,UAApB,EAAgC,IAAhC,EAAsC,YAAtC,EAAoD,OAApD,EAA6D,WAA7D,EAA0E,WAA1E,KACH,MAAA,CAAA,SAAA,CAAM,aAAN,CAAmB,IAAnB,CAAmB,IAAnB,EACI,YAAU,UADd,EAC4B,IAD5B,EACkC,YADlC,EACgD,OADhD,EACyD,WADzD,EACsE,WADtE,CADJ;AAGD,KANS;;AAOZ,WAAA,iBAAA;AAAC,GAjBD,CAAuC,qBAAA,CAAA,iBAAvC,CAAA;;AAAa,EAAA,OAAA,CAAA,iBAAA,GAAA,iBAAA","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AbsoluteFsPath, ReadonlyFileSystem} from '../../../src/ngtsc/file_system';\nimport {PathMappings} from '../path_mappings';\nimport {EsmDependencyHost} from './esm_dependency_host';\nimport {ModuleResolver} from './module_resolver';\n\n/**\n * Helper functions for computing dependencies via typings files.\n */\nexport class DtsDependencyHost extends EsmDependencyHost {\n  constructor(fs: ReadonlyFileSystem, pathMappings?: PathMappings) {\n    super(\n        fs, new ModuleResolver(fs, pathMappings, ['', '.d.ts', '/index.d.ts', '.js', '/index.js']),\n        false);\n  }\n\n  /**\n   * Attempts to process the `importPath` directly and also inside `@types/...`.\n   */\n  protected processImport(\n      importPath: string, file: AbsoluteFsPath, dependencies: Set<AbsoluteFsPath>,\n      missing: Set<string>, deepImports: Set<string>, alreadySeen: Set<AbsoluteFsPath>): boolean {\n    return super.processImport(importPath, file, dependencies, missing, deepImports, alreadySeen) ||\n        super.processImport(\n            `@types/${importPath}`, file, dependencies, missing, deepImports, alreadySeen);\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}