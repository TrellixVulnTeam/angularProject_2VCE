{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nvar _classCallCheck = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/createClass\");\n\nvar path = require(\"path\");\n\nvar concord = require(\"./concord\");\n\nvar DescriptionFileUtils = require(\"./DescriptionFileUtils\");\n\nmodule.exports = /*#__PURE__*/function () {\n  function ConcordMainPlugin(source, options, target) {\n    _classCallCheck(this, ConcordMainPlugin);\n\n    this.source = source;\n    this.options = options;\n    this.target = target;\n  }\n\n  _createClass(ConcordMainPlugin, [{\n    key: \"apply\",\n    value: function apply(resolver) {\n      var target = resolver.ensureHook(this.target);\n      resolver.getHook(this.source).tapAsync(\"ConcordMainPlugin\", function (request, resolveContext, callback) {\n        if (request.path !== request.descriptionFileRoot) return callback();\n        var concordField = DescriptionFileUtils.getField(request.descriptionFileData, \"concord\");\n        if (!concordField) return callback();\n        var mainModule = concord.getMain(request.context, concordField);\n        if (!mainModule) return callback();\n        var obj = Object.assign({}, request, {\n          request: mainModule\n        });\n        var filename = path.basename(request.descriptionFilePath);\n        return resolver.doResolve(target, obj, \"use \" + mainModule + \" from \" + filename, resolveContext, callback);\n      });\n    }\n  }]);\n\n  return ConcordMainPlugin;\n}();","map":{"version":3,"sources":["/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/webpack/node_modules/enhanced-resolve/lib/ConcordMainPlugin.js"],"names":["path","require","concord","DescriptionFileUtils","module","exports","source","options","target","resolver","ensureHook","getHook","tapAsync","request","resolveContext","callback","descriptionFileRoot","concordField","getField","descriptionFileData","mainModule","getMain","context","obj","Object","assign","filename","basename","descriptionFilePath","doResolve"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;;;;;AAEA,IAAMA,IAAI,GAAGC,OAAO,CAAC,MAAD,CAApB;;AACA,IAAMC,OAAO,GAAGD,OAAO,CAAC,WAAD,CAAvB;;AACA,IAAME,oBAAoB,GAAGF,OAAO,CAAC,wBAAD,CAApC;;AAEAG,MAAM,CAACC,OAAP;AACC,6BAAYC,MAAZ,EAAoBC,OAApB,EAA6BC,MAA7B,EAAqC;AAAA;;AACpC,SAAKF,MAAL,GAAcA,MAAd;AACA,SAAKC,OAAL,GAAeA,OAAf;AACA,SAAKC,MAAL,GAAcA,MAAd;AACA;;AALF;AAAA;AAAA,WAOC,eAAMC,QAAN,EAAgB;AACf,UAAMD,MAAM,GAAGC,QAAQ,CAACC,UAAT,CAAoB,KAAKF,MAAzB,CAAf;AACAC,MAAAA,QAAQ,CACNE,OADF,CACU,KAAKL,MADf,EAEEM,QAFF,CAEW,mBAFX,EAEgC,UAACC,OAAD,EAAUC,cAAV,EAA0BC,QAA1B,EAAuC;AACrE,YAAIF,OAAO,CAACb,IAAR,KAAiBa,OAAO,CAACG,mBAA7B,EAAkD,OAAOD,QAAQ,EAAf;AAClD,YAAME,YAAY,GAAGd,oBAAoB,CAACe,QAArB,CACpBL,OAAO,CAACM,mBADY,EAEpB,SAFoB,CAArB;AAIA,YAAI,CAACF,YAAL,EAAmB,OAAOF,QAAQ,EAAf;AACnB,YAAMK,UAAU,GAAGlB,OAAO,CAACmB,OAAR,CAAgBR,OAAO,CAACS,OAAxB,EAAiCL,YAAjC,CAAnB;AACA,YAAI,CAACG,UAAL,EAAiB,OAAOL,QAAQ,EAAf;AACjB,YAAMQ,GAAG,GAAGC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBZ,OAAlB,EAA2B;AACtCA,UAAAA,OAAO,EAAEO;AAD6B,SAA3B,CAAZ;AAGA,YAAMM,QAAQ,GAAG1B,IAAI,CAAC2B,QAAL,CAAcd,OAAO,CAACe,mBAAtB,CAAjB;AACA,eAAOnB,QAAQ,CAACoB,SAAT,CACNrB,MADM,EAENe,GAFM,EAGN,SAASH,UAAT,GAAsB,QAAtB,GAAiCM,QAH3B,EAINZ,cAJM,EAKNC,QALM,CAAP;AAOA,OAtBF;AAuBA;AAhCF;;AAAA;AAAA","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst path = require(\"path\");\nconst concord = require(\"./concord\");\nconst DescriptionFileUtils = require(\"./DescriptionFileUtils\");\n\nmodule.exports = class ConcordMainPlugin {\n\tconstructor(source, options, target) {\n\t\tthis.source = source;\n\t\tthis.options = options;\n\t\tthis.target = target;\n\t}\n\n\tapply(resolver) {\n\t\tconst target = resolver.ensureHook(this.target);\n\t\tresolver\n\t\t\t.getHook(this.source)\n\t\t\t.tapAsync(\"ConcordMainPlugin\", (request, resolveContext, callback) => {\n\t\t\t\tif (request.path !== request.descriptionFileRoot) return callback();\n\t\t\t\tconst concordField = DescriptionFileUtils.getField(\n\t\t\t\t\trequest.descriptionFileData,\n\t\t\t\t\t\"concord\"\n\t\t\t\t);\n\t\t\t\tif (!concordField) return callback();\n\t\t\t\tconst mainModule = concord.getMain(request.context, concordField);\n\t\t\t\tif (!mainModule) return callback();\n\t\t\t\tconst obj = Object.assign({}, request, {\n\t\t\t\t\trequest: mainModule\n\t\t\t\t});\n\t\t\t\tconst filename = path.basename(request.descriptionFilePath);\n\t\t\t\treturn resolver.doResolve(\n\t\t\t\t\ttarget,\n\t\t\t\t\tobj,\n\t\t\t\t\t\"use \" + mainModule + \" from \" + filename,\n\t\t\t\t\tresolveContext,\n\t\t\t\t\tcallback\n\t\t\t\t);\n\t\t\t});\n\t}\n};\n"]},"metadata":{},"sourceType":"script"}