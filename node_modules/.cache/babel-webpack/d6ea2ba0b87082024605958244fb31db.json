{"ast":null,"code":"(function (factory) {\n  if (typeof module === \"object\" && typeof module.exports === \"object\") {\n    var v = factory(require, exports);\n    if (v !== undefined) module.exports = v;\n  } else if (typeof define === \"function\" && define.amd) {\n    define(\"@angular/compiler/src/render3/partial/directive\", [\"require\", \"exports\", \"@angular/compiler/src/output/output_ast\", \"@angular/compiler/src/render3/r3_identifiers\", \"@angular/compiler/src/render3/view/compiler\", \"@angular/compiler/src/render3/view/util\", \"@angular/compiler/src/render3/partial/util\"], factory);\n  }\n})(function (require, exports) {\n  \"use strict\";\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.createDirectiveDefinitionMap = exports.compileDeclareDirectiveFromMetadata = void 0;\n  /**\n   * @license\n   * Copyright Google LLC All Rights Reserved.\n   *\n   * Use of this source code is governed by an MIT-style license that can be\n   * found in the LICENSE file at https://angular.io/license\n   */\n\n  var o = require(\"@angular/compiler/src/output/output_ast\");\n\n  var r3_identifiers_1 = require(\"@angular/compiler/src/render3/r3_identifiers\");\n\n  var compiler_1 = require(\"@angular/compiler/src/render3/view/compiler\");\n\n  var util_1 = require(\"@angular/compiler/src/render3/view/util\");\n\n  var util_2 = require(\"@angular/compiler/src/render3/partial/util\");\n  /**\n   * Compile a directive declaration defined by the `R3DirectiveMetadata`.\n   */\n\n\n  function compileDeclareDirectiveFromMetadata(meta) {\n    var definitionMap = createDirectiveDefinitionMap(meta);\n    var expression = o.importExpr(r3_identifiers_1.Identifiers.declareDirective).callFn([definitionMap.toLiteralMap()]);\n    var type = compiler_1.createDirectiveType(meta);\n    return {\n      expression: expression,\n      type: type\n    };\n  }\n\n  exports.compileDeclareDirectiveFromMetadata = compileDeclareDirectiveFromMetadata;\n  /**\n   * Gathers the declaration fields for a directive into a `DefinitionMap`. This allows for reusing\n   * this logic for components, as they extend the directive metadata.\n   */\n\n  function createDirectiveDefinitionMap(meta) {\n    var definitionMap = new util_1.DefinitionMap();\n    definitionMap.set('version', o.literal('11.2.14')); // e.g. `type: MyDirective`\n\n    definitionMap.set('type', meta.internalType); // e.g. `selector: 'some-dir'`\n\n    if (meta.selector !== null) {\n      definitionMap.set('selector', o.literal(meta.selector));\n    }\n\n    definitionMap.set('inputs', util_1.conditionallyCreateMapObjectLiteral(meta.inputs, true));\n    definitionMap.set('outputs', util_1.conditionallyCreateMapObjectLiteral(meta.outputs));\n    definitionMap.set('host', compileHostMetadata(meta.host));\n    definitionMap.set('providers', meta.providers);\n\n    if (meta.queries.length > 0) {\n      definitionMap.set('queries', o.literalArr(meta.queries.map(compileQuery)));\n    }\n\n    if (meta.viewQueries.length > 0) {\n      definitionMap.set('viewQueries', o.literalArr(meta.viewQueries.map(compileQuery)));\n    }\n\n    if (meta.exportAs !== null) {\n      definitionMap.set('exportAs', util_1.asLiteral(meta.exportAs));\n    }\n\n    if (meta.usesInheritance) {\n      definitionMap.set('usesInheritance', o.literal(true));\n    }\n\n    if (meta.lifecycle.usesOnChanges) {\n      definitionMap.set('usesOnChanges', o.literal(true));\n    }\n\n    definitionMap.set('ngImport', o.importExpr(r3_identifiers_1.Identifiers.core));\n    return definitionMap;\n  }\n\n  exports.createDirectiveDefinitionMap = createDirectiveDefinitionMap;\n  /**\n   * Compiles the metadata of a single query into its partial declaration form as declared\n   * by `R3DeclareQueryMetadata`.\n   */\n\n  function compileQuery(query) {\n    var meta = new util_1.DefinitionMap();\n    meta.set('propertyName', o.literal(query.propertyName));\n\n    if (query.first) {\n      meta.set('first', o.literal(true));\n    }\n\n    meta.set('predicate', Array.isArray(query.predicate) ? util_1.asLiteral(query.predicate) : query.predicate);\n\n    if (!query.emitDistinctChangesOnly) {\n      // `emitDistinctChangesOnly` is special because in future we expect it to be `true`. For this\n      // reason the absence should be interpreted as `true`.\n      meta.set('emitDistinctChangesOnly', o.literal(false));\n    }\n\n    if (query.descendants) {\n      meta.set('descendants', o.literal(true));\n    }\n\n    meta.set('read', query.read);\n\n    if (query.static) {\n      meta.set('static', o.literal(true));\n    }\n\n    return meta.toLiteralMap();\n  }\n  /**\n   * Compiles the host metadata into its partial declaration form as declared\n   * in `R3DeclareDirectiveMetadata['host']`\n   */\n\n\n  function compileHostMetadata(meta) {\n    var hostMetadata = new util_1.DefinitionMap();\n    hostMetadata.set('attributes', util_2.toOptionalLiteralMap(meta.attributes, function (expression) {\n      return expression;\n    }));\n    hostMetadata.set('listeners', util_2.toOptionalLiteralMap(meta.listeners, o.literal));\n    hostMetadata.set('properties', util_2.toOptionalLiteralMap(meta.properties, o.literal));\n\n    if (meta.specialAttributes.styleAttr) {\n      hostMetadata.set('styleAttribute', o.literal(meta.specialAttributes.styleAttr));\n    }\n\n    if (meta.specialAttributes.classAttr) {\n      hostMetadata.set('classAttribute', o.literal(meta.specialAttributes.classAttr));\n    }\n\n    if (hostMetadata.values.length > 0) {\n      return hostMetadata.toLiteralMap();\n    } else {\n      return null;\n    }\n  }\n});","map":{"version":3,"sources":["../../../../../../../../packages/compiler/src/render3/partial/directive.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as o from '../../output/output_ast';\nimport {Identifiers as R3} from '../r3_identifiers';\nimport {R3DirectiveDef, R3DirectiveMetadata, R3HostMetadata, R3QueryMetadata} from '../view/api';\nimport {createDirectiveType} from '../view/compiler';\nimport {asLiteral, conditionallyCreateMapObjectLiteral, DefinitionMap} from '../view/util';\nimport {R3DeclareDirectiveMetadata, R3DeclareQueryMetadata} from './api';\nimport {toOptionalLiteralMap} from './util';\n\n\n/**\n * Compile a directive declaration defined by the `R3DirectiveMetadata`.\n */\nexport function compileDeclareDirectiveFromMetadata(meta: R3DirectiveMetadata): R3DirectiveDef {\n  const definitionMap = createDirectiveDefinitionMap(meta);\n\n  const expression = o.importExpr(R3.declareDirective).callFn([definitionMap.toLiteralMap()]);\n  const type = createDirectiveType(meta);\n\n  return {expression, type};\n}\n\n/**\n * Gathers the declaration fields for a directive into a `DefinitionMap`. This allows for reusing\n * this logic for components, as they extend the directive metadata.\n */\nexport function createDirectiveDefinitionMap(meta: R3DirectiveMetadata):\n    DefinitionMap<R3DeclareDirectiveMetadata> {\n  const definitionMap = new DefinitionMap<R3DeclareDirectiveMetadata>();\n\n  definitionMap.set('version', o.literal('0.0.0-PLACEHOLDER'));\n\n  // e.g. `type: MyDirective`\n  definitionMap.set('type', meta.internalType);\n\n  // e.g. `selector: 'some-dir'`\n  if (meta.selector !== null) {\n    definitionMap.set('selector', o.literal(meta.selector));\n  }\n\n  definitionMap.set('inputs', conditionallyCreateMapObjectLiteral(meta.inputs, true));\n  definitionMap.set('outputs', conditionallyCreateMapObjectLiteral(meta.outputs));\n\n  definitionMap.set('host', compileHostMetadata(meta.host));\n\n  definitionMap.set('providers', meta.providers);\n\n  if (meta.queries.length > 0) {\n    definitionMap.set('queries', o.literalArr(meta.queries.map(compileQuery)));\n  }\n  if (meta.viewQueries.length > 0) {\n    definitionMap.set('viewQueries', o.literalArr(meta.viewQueries.map(compileQuery)));\n  }\n\n  if (meta.exportAs !== null) {\n    definitionMap.set('exportAs', asLiteral(meta.exportAs));\n  }\n\n  if (meta.usesInheritance) {\n    definitionMap.set('usesInheritance', o.literal(true));\n  }\n  if (meta.lifecycle.usesOnChanges) {\n    definitionMap.set('usesOnChanges', o.literal(true));\n  }\n\n  definitionMap.set('ngImport', o.importExpr(R3.core));\n\n  return definitionMap;\n}\n\n/**\n * Compiles the metadata of a single query into its partial declaration form as declared\n * by `R3DeclareQueryMetadata`.\n */\nfunction compileQuery(query: R3QueryMetadata): o.LiteralMapExpr {\n  const meta = new DefinitionMap<R3DeclareQueryMetadata>();\n  meta.set('propertyName', o.literal(query.propertyName));\n  if (query.first) {\n    meta.set('first', o.literal(true));\n  }\n  meta.set(\n      'predicate', Array.isArray(query.predicate) ? asLiteral(query.predicate) : query.predicate);\n  if (!query.emitDistinctChangesOnly) {\n    // `emitDistinctChangesOnly` is special because in future we expect it to be `true`. For this\n    // reason the absence should be interpreted as `true`.\n    meta.set('emitDistinctChangesOnly', o.literal(false));\n  }\n  if (query.descendants) {\n    meta.set('descendants', o.literal(true));\n  }\n  meta.set('read', query.read);\n  if (query.static) {\n    meta.set('static', o.literal(true));\n  }\n  return meta.toLiteralMap();\n}\n\n/**\n * Compiles the host metadata into its partial declaration form as declared\n * in `R3DeclareDirectiveMetadata['host']`\n */\nfunction compileHostMetadata(meta: R3HostMetadata): o.LiteralMapExpr|null {\n  const hostMetadata = new DefinitionMap<NonNullable<R3DeclareDirectiveMetadata['host']>>();\n  hostMetadata.set('attributes', toOptionalLiteralMap(meta.attributes, expression => expression));\n  hostMetadata.set('listeners', toOptionalLiteralMap(meta.listeners, o.literal));\n  hostMetadata.set('properties', toOptionalLiteralMap(meta.properties, o.literal));\n\n  if (meta.specialAttributes.styleAttr) {\n    hostMetadata.set('styleAttribute', o.literal(meta.specialAttributes.styleAttr));\n  }\n  if (meta.specialAttributes.classAttr) {\n    hostMetadata.set('classAttribute', o.literal(meta.specialAttributes.classAttr));\n  }\n\n  if (hostMetadata.values.length > 0) {\n    return hostMetadata.toLiteralMap();\n  } else {\n    return null;\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}