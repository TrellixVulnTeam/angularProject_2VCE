{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar matchValueName = /[$]?[\\w-]+/g;\n\nvar replaceValueSymbols = function replaceValueSymbols(value, replacements) {\n  var matches;\n\n  while (matches = matchValueName.exec(value)) {\n    var replacement = replacements[matches[0]];\n\n    if (replacement) {\n      value = value.slice(0, matches.index) + replacement + value.slice(matchValueName.lastIndex);\n      matchValueName.lastIndex -= matches[0].length - replacement.length;\n    }\n  }\n\n  return value;\n};\n\nvar _default = replaceValueSymbols;\nexports.default = _default;","map":{"version":3,"sources":["/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/icss-utils/lib/replaceValueSymbols.js"],"names":["Object","defineProperty","exports","value","default","matchValueName","replaceValueSymbols","replacements","matches","exec","replacement","slice","index","lastIndex","length","_default"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkB,KAAK,CAAvB;AACA,IAAMC,cAAc,GAAG,aAAvB;;AAEA,IAAMC,mBAAmB,GAAG,SAAtBA,mBAAsB,CAACH,KAAD,EAAQI,YAAR,EAAyB;AACnD,MAAIC,OAAJ;;AAEA,SAAOA,OAAO,GAAGH,cAAc,CAACI,IAAf,CAAoBN,KAApB,CAAjB,EAA6C;AAC3C,QAAMO,WAAW,GAAGH,YAAY,CAACC,OAAO,CAAC,CAAD,CAAR,CAAhC;;AAEA,QAAIE,WAAJ,EAAiB;AACfP,MAAAA,KAAK,GAAGA,KAAK,CAACQ,KAAN,CAAY,CAAZ,EAAeH,OAAO,CAACI,KAAvB,IAAgCF,WAAhC,GAA8CP,KAAK,CAACQ,KAAN,CAAYN,cAAc,CAACQ,SAA3B,CAAtD;AACAR,MAAAA,cAAc,CAACQ,SAAf,IAA4BL,OAAO,CAAC,CAAD,CAAP,CAAWM,MAAX,GAAoBJ,WAAW,CAACI,MAA5D;AACD;AACF;;AAED,SAAOX,KAAP;AACD,CAbD;;AAeA,IAAIY,QAAQ,GAAGT,mBAAf;AACAJ,OAAO,CAACE,OAAR,GAAkBW,QAAlB","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nconst matchValueName = /[$]?[\\w-]+/g;\n\nconst replaceValueSymbols = (value, replacements) => {\n  let matches;\n\n  while (matches = matchValueName.exec(value)) {\n    const replacement = replacements[matches[0]];\n\n    if (replacement) {\n      value = value.slice(0, matches.index) + replacement + value.slice(matchValueName.lastIndex);\n      matchValueName.lastIndex -= matches[0].length - replacement.length;\n    }\n  }\n\n  return value;\n};\n\nvar _default = replaceValueSymbols;\nexports.default = _default;"]},"metadata":{},"sourceType":"script"}