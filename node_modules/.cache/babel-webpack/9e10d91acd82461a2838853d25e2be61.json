{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nvar _createForOfIteratorHelper = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _classCallCheck = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/createClass\");\n\nvar validateOptions = require(\"schema-utils\");\n\nvar schema = require(\"../../schemas/plugins/optimize/OccurrenceOrderChunkIdsPlugin.json\");\n/** @typedef {import(\"../../declarations/plugins/optimize/OccurrenceOrderChunkIdsPlugin\").OccurrenceOrderChunkIdsPluginOptions} OccurrenceOrderChunkIdsPluginOptions */\n\n\nvar OccurrenceOrderChunkIdsPlugin = /*#__PURE__*/function () {\n  /**\n   * @param {OccurrenceOrderChunkIdsPluginOptions=} options options object\n   */\n  function OccurrenceOrderChunkIdsPlugin() {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, OccurrenceOrderChunkIdsPlugin);\n\n    validateOptions(schema, options, \"Occurrence Order Chunk Ids Plugin\");\n    this.options = options;\n  }\n\n  _createClass(OccurrenceOrderChunkIdsPlugin, [{\n    key: \"apply\",\n    value: function apply(compiler) {\n      var prioritiseInitial = this.options.prioritiseInitial;\n      compiler.hooks.compilation.tap(\"OccurrenceOrderChunkIdsPlugin\", function (compilation) {\n        compilation.hooks.optimizeChunkOrder.tap(\"OccurrenceOrderChunkIdsPlugin\", function (chunks) {\n          var occursInInitialChunksMap = new Map();\n          var originalOrder = new Map();\n          var i = 0;\n\n          var _iterator = _createForOfIteratorHelper(chunks),\n              _step;\n\n          try {\n            for (_iterator.s(); !(_step = _iterator.n()).done;) {\n              var c = _step.value;\n              var occurs = 0;\n\n              var _iterator2 = _createForOfIteratorHelper(c.groupsIterable),\n                  _step2;\n\n              try {\n                for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n                  var chunkGroup = _step2.value;\n\n                  var _iterator3 = _createForOfIteratorHelper(chunkGroup.parentsIterable),\n                      _step3;\n\n                  try {\n                    for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n                      var parent = _step3.value;\n                      if (parent.isInitial()) occurs++;\n                    }\n                  } catch (err) {\n                    _iterator3.e(err);\n                  } finally {\n                    _iterator3.f();\n                  }\n                }\n              } catch (err) {\n                _iterator2.e(err);\n              } finally {\n                _iterator2.f();\n              }\n\n              occursInInitialChunksMap.set(c, occurs);\n              originalOrder.set(c, i++);\n            }\n          } catch (err) {\n            _iterator.e(err);\n          } finally {\n            _iterator.f();\n          }\n\n          chunks.sort(function (a, b) {\n            if (prioritiseInitial) {\n              var aEntryOccurs = occursInInitialChunksMap.get(a);\n              var bEntryOccurs = occursInInitialChunksMap.get(b);\n              if (aEntryOccurs > bEntryOccurs) return -1;\n              if (aEntryOccurs < bEntryOccurs) return 1;\n            }\n\n            var aOccurs = a.getNumberOfGroups();\n            var bOccurs = b.getNumberOfGroups();\n            if (aOccurs > bOccurs) return -1;\n            if (aOccurs < bOccurs) return 1;\n            var orgA = originalOrder.get(a);\n            var orgB = originalOrder.get(b);\n            return orgA - orgB;\n          });\n        });\n      });\n    }\n  }]);\n\n  return OccurrenceOrderChunkIdsPlugin;\n}();\n\nmodule.exports = OccurrenceOrderChunkIdsPlugin;","map":{"version":3,"sources":["/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/webpack/lib/optimize/OccurrenceChunkOrderPlugin.js"],"names":["validateOptions","require","schema","OccurrenceOrderChunkIdsPlugin","options","compiler","prioritiseInitial","hooks","compilation","tap","optimizeChunkOrder","chunks","occursInInitialChunksMap","Map","originalOrder","i","c","occurs","groupsIterable","chunkGroup","parentsIterable","parent","isInitial","set","sort","a","b","aEntryOccurs","get","bEntryOccurs","aOccurs","getNumberOfGroups","bOccurs","orgA","orgB","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;;;;;;;AAEA,IAAMA,eAAe,GAAGC,OAAO,CAAC,cAAD,CAA/B;;AACA,IAAMC,MAAM,GAAGD,OAAO,CAAC,mEAAD,CAAtB;AAEA;;;IAEME,6B;AACL;AACD;AACA;AACC,2CAA0B;AAAA,QAAdC,OAAc,uEAAJ,EAAI;;AAAA;;AACzBJ,IAAAA,eAAe,CAACE,MAAD,EAASE,OAAT,EAAkB,mCAAlB,CAAf;AACA,SAAKA,OAAL,GAAeA,OAAf;AACA;;;;WAED,eAAMC,QAAN,EAAgB;AACf,UAAMC,iBAAiB,GAAG,KAAKF,OAAL,CAAaE,iBAAvC;AACAD,MAAAA,QAAQ,CAACE,KAAT,CAAeC,WAAf,CAA2BC,GAA3B,CACC,+BADD,EAEC,UAAAD,WAAW,EAAI;AACdA,QAAAA,WAAW,CAACD,KAAZ,CAAkBG,kBAAlB,CAAqCD,GAArC,CACC,+BADD,EAEC,UAAAE,MAAM,EAAI;AACT,cAAMC,wBAAwB,GAAG,IAAIC,GAAJ,EAAjC;AACA,cAAMC,aAAa,GAAG,IAAID,GAAJ,EAAtB;AAEA,cAAIE,CAAC,GAAG,CAAR;;AAJS,qDAKOJ,MALP;AAAA;;AAAA;AAKT,gEAAwB;AAAA,kBAAbK,CAAa;AACvB,kBAAIC,MAAM,GAAG,CAAb;;AADuB,0DAEED,CAAC,CAACE,cAFJ;AAAA;;AAAA;AAEvB,uEAA2C;AAAA,sBAAhCC,UAAgC;;AAAA,8DACrBA,UAAU,CAACC,eADU;AAAA;;AAAA;AAC1C,2EAAiD;AAAA,0BAAtCC,MAAsC;AAChD,0BAAIA,MAAM,CAACC,SAAP,EAAJ,EAAwBL,MAAM;AAC9B;AAHyC;AAAA;AAAA;AAAA;AAAA;AAI1C;AANsB;AAAA;AAAA;AAAA;AAAA;;AAOvBL,cAAAA,wBAAwB,CAACW,GAAzB,CAA6BP,CAA7B,EAAgCC,MAAhC;AACAH,cAAAA,aAAa,CAACS,GAAd,CAAkBP,CAAlB,EAAqBD,CAAC,EAAtB;AACA;AAdQ;AAAA;AAAA;AAAA;AAAA;;AAgBTJ,UAAAA,MAAM,CAACa,IAAP,CAAY,UAACC,CAAD,EAAIC,CAAJ,EAAU;AACrB,gBAAIpB,iBAAJ,EAAuB;AACtB,kBAAMqB,YAAY,GAAGf,wBAAwB,CAACgB,GAAzB,CAA6BH,CAA7B,CAArB;AACA,kBAAMI,YAAY,GAAGjB,wBAAwB,CAACgB,GAAzB,CAA6BF,CAA7B,CAArB;AACA,kBAAIC,YAAY,GAAGE,YAAnB,EAAiC,OAAO,CAAC,CAAR;AACjC,kBAAIF,YAAY,GAAGE,YAAnB,EAAiC,OAAO,CAAP;AACjC;;AACD,gBAAMC,OAAO,GAAGL,CAAC,CAACM,iBAAF,EAAhB;AACA,gBAAMC,OAAO,GAAGN,CAAC,CAACK,iBAAF,EAAhB;AACA,gBAAID,OAAO,GAAGE,OAAd,EAAuB,OAAO,CAAC,CAAR;AACvB,gBAAIF,OAAO,GAAGE,OAAd,EAAuB,OAAO,CAAP;AACvB,gBAAMC,IAAI,GAAGnB,aAAa,CAACc,GAAd,CAAkBH,CAAlB,CAAb;AACA,gBAAMS,IAAI,GAAGpB,aAAa,CAACc,GAAd,CAAkBF,CAAlB,CAAb;AACA,mBAAOO,IAAI,GAAGC,IAAd;AACA,WAdD;AAeA,SAjCF;AAmCA,OAtCF;AAwCA;;;;;;AAGFC,MAAM,CAACC,OAAP,GAAiBjC,6BAAjB","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst validateOptions = require(\"schema-utils\");\nconst schema = require(\"../../schemas/plugins/optimize/OccurrenceOrderChunkIdsPlugin.json\");\n\n/** @typedef {import(\"../../declarations/plugins/optimize/OccurrenceOrderChunkIdsPlugin\").OccurrenceOrderChunkIdsPluginOptions} OccurrenceOrderChunkIdsPluginOptions */\n\nclass OccurrenceOrderChunkIdsPlugin {\n\t/**\n\t * @param {OccurrenceOrderChunkIdsPluginOptions=} options options object\n\t */\n\tconstructor(options = {}) {\n\t\tvalidateOptions(schema, options, \"Occurrence Order Chunk Ids Plugin\");\n\t\tthis.options = options;\n\t}\n\n\tapply(compiler) {\n\t\tconst prioritiseInitial = this.options.prioritiseInitial;\n\t\tcompiler.hooks.compilation.tap(\n\t\t\t\"OccurrenceOrderChunkIdsPlugin\",\n\t\t\tcompilation => {\n\t\t\t\tcompilation.hooks.optimizeChunkOrder.tap(\n\t\t\t\t\t\"OccurrenceOrderChunkIdsPlugin\",\n\t\t\t\t\tchunks => {\n\t\t\t\t\t\tconst occursInInitialChunksMap = new Map();\n\t\t\t\t\t\tconst originalOrder = new Map();\n\n\t\t\t\t\t\tlet i = 0;\n\t\t\t\t\t\tfor (const c of chunks) {\n\t\t\t\t\t\t\tlet occurs = 0;\n\t\t\t\t\t\t\tfor (const chunkGroup of c.groupsIterable) {\n\t\t\t\t\t\t\t\tfor (const parent of chunkGroup.parentsIterable) {\n\t\t\t\t\t\t\t\t\tif (parent.isInitial()) occurs++;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\toccursInInitialChunksMap.set(c, occurs);\n\t\t\t\t\t\t\toriginalOrder.set(c, i++);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tchunks.sort((a, b) => {\n\t\t\t\t\t\t\tif (prioritiseInitial) {\n\t\t\t\t\t\t\t\tconst aEntryOccurs = occursInInitialChunksMap.get(a);\n\t\t\t\t\t\t\t\tconst bEntryOccurs = occursInInitialChunksMap.get(b);\n\t\t\t\t\t\t\t\tif (aEntryOccurs > bEntryOccurs) return -1;\n\t\t\t\t\t\t\t\tif (aEntryOccurs < bEntryOccurs) return 1;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tconst aOccurs = a.getNumberOfGroups();\n\t\t\t\t\t\t\tconst bOccurs = b.getNumberOfGroups();\n\t\t\t\t\t\t\tif (aOccurs > bOccurs) return -1;\n\t\t\t\t\t\t\tif (aOccurs < bOccurs) return 1;\n\t\t\t\t\t\t\tconst orgA = originalOrder.get(a);\n\t\t\t\t\t\t\tconst orgB = originalOrder.get(b);\n\t\t\t\t\t\t\treturn orgA - orgB;\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t}\n\t\t);\n\t}\n}\n\nmodule.exports = OccurrenceOrderChunkIdsPlugin;\n"]},"metadata":{},"sourceType":"script"}