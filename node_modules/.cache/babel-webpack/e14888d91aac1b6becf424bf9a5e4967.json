{"ast":null,"code":"'use strict';\n\nvar fs = require('fs');\n\nvar util = require('util');\n\nvar chmod = util.promisify(fs.chmod);\nvar unlink = util.promisify(fs.unlink);\nvar stat = util.promisify(fs.stat);\n\nvar move = require('@npmcli/move-file');\n\nvar pinflight = require('promise-inflight');\n\nmodule.exports = moveFile;\n\nfunction moveFile(src, dest) {\n  var isWindows = global.__CACACHE_TEST_FAKE_WINDOWS__ || process.platform === 'win32'; // This isn't quite an fs.rename -- the assumption is that\n  // if `dest` already exists, and we get certain errors while\n  // trying to move it, we should just not bother.\n  //\n  // In the case of cache corruption, users will receive an\n  // EINTEGRITY error elsewhere, and can remove the offending\n  // content their own way.\n  //\n  // Note that, as the name suggests, this strictly only supports file moves.\n\n  return new Promise(function (resolve, reject) {\n    fs.link(src, dest, function (err) {\n      if (err) {\n        if (isWindows && err.code === 'EPERM') {\n          // XXX This is a really weird way to handle this situation, as it\n          // results in the src file being deleted even though the dest\n          // might not exist.  Since we pretty much always write files to\n          // deterministic locations based on content hash, this is likely\n          // ok (or at worst, just ends in a future cache miss).  But it would\n          // be worth investigating at some time in the future if this is\n          // really what we want to do here.\n          return resolve();\n        } else if (err.code === 'EEXIST' || err.code === 'EBUSY') {\n          // file already exists, so whatever\n          return resolve();\n        } else {\n          return reject(err);\n        }\n      } else {\n        return resolve();\n      }\n    });\n  }).then(function () {\n    // content should never change for any reason, so make it read-only\n    return Promise.all([unlink(src), !isWindows && chmod(dest, '0444')]);\n  }).catch(function () {\n    return pinflight('cacache-move-file:' + dest, function () {\n      return stat(dest).catch(function (err) {\n        if (err.code !== 'ENOENT') {\n          // Something else is wrong here. Bail bail bail\n          throw err;\n        } // file doesn't already exist! let's try a rename -> copy fallback\n        // only delete if it successfully copies\n\n\n        return move(src, dest);\n      });\n    });\n  });\n}","map":{"version":3,"sources":["/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@angular-devkit/build-angular/node_modules/cacache/lib/util/move-file.js"],"names":["fs","require","util","chmod","promisify","unlink","stat","move","pinflight","module","exports","moveFile","src","dest","isWindows","global","__CACACHE_TEST_FAKE_WINDOWS__","process","platform","Promise","resolve","reject","link","err","code","then","all","catch"],"mappings":"AAAA;;AAEA,IAAMA,EAAE,GAAGC,OAAO,CAAC,IAAD,CAAlB;;AACA,IAAMC,IAAI,GAAGD,OAAO,CAAC,MAAD,CAApB;;AACA,IAAME,KAAK,GAAGD,IAAI,CAACE,SAAL,CAAeJ,EAAE,CAACG,KAAlB,CAAd;AACA,IAAME,MAAM,GAAGH,IAAI,CAACE,SAAL,CAAeJ,EAAE,CAACK,MAAlB,CAAf;AACA,IAAMC,IAAI,GAAGJ,IAAI,CAACE,SAAL,CAAeJ,EAAE,CAACM,IAAlB,CAAb;;AACA,IAAMC,IAAI,GAAGN,OAAO,CAAC,mBAAD,CAApB;;AACA,IAAMO,SAAS,GAAGP,OAAO,CAAC,kBAAD,CAAzB;;AAEAQ,MAAM,CAACC,OAAP,GAAiBC,QAAjB;;AAEA,SAASA,QAAT,CAAmBC,GAAnB,EAAwBC,IAAxB,EAA8B;AAC5B,MAAMC,SAAS,GAAGC,MAAM,CAACC,6BAAP,IAChBC,OAAO,CAACC,QAAR,KAAqB,OADvB,CAD4B,CAI5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtCrB,IAAAA,EAAE,CAACsB,IAAH,CAAQV,GAAR,EAAaC,IAAb,EAAmB,UAACU,GAAD,EAAS;AAC1B,UAAIA,GAAJ,EAAS;AACP,YAAIT,SAAS,IAAIS,GAAG,CAACC,IAAJ,KAAa,OAA9B,EAAuC;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAOJ,OAAO,EAAd;AACD,SATD,MASO,IAAIG,GAAG,CAACC,IAAJ,KAAa,QAAb,IAAyBD,GAAG,CAACC,IAAJ,KAAa,OAA1C,EAAmD;AACxD;AACA,iBAAOJ,OAAO,EAAd;AACD,SAHM,MAGA;AACL,iBAAOC,MAAM,CAACE,GAAD,CAAb;AACD;AACF,OAhBD,MAgBO;AACL,eAAOH,OAAO,EAAd;AACD;AACF,KApBD;AAqBD,GAtBM,EAuBJK,IAvBI,CAuBC,YAAM;AACV;AACA,WAAON,OAAO,CAACO,GAAR,CAAY,CACjBrB,MAAM,CAACO,GAAD,CADW,EAEjB,CAACE,SAAD,IAAcX,KAAK,CAACU,IAAD,EAAO,MAAP,CAFF,CAAZ,CAAP;AAID,GA7BI,EA8BJc,KA9BI,CA8BE,YAAM;AACX,WAAOnB,SAAS,CAAC,uBAAuBK,IAAxB,EAA8B,YAAM;AAClD,aAAOP,IAAI,CAACO,IAAD,CAAJ,CAAWc,KAAX,CAAiB,UAACJ,GAAD,EAAS;AAC/B,YAAIA,GAAG,CAACC,IAAJ,KAAa,QAAjB,EAA2B;AACzB;AACA,gBAAMD,GAAN;AACD,SAJ8B,CAK/B;AACA;;;AACA,eAAOhB,IAAI,CAACK,GAAD,EAAMC,IAAN,CAAX;AACD,OARM,CAAP;AASD,KAVe,CAAhB;AAWD,GA1CI,CAAP;AA2CD","sourcesContent":["'use strict'\n\nconst fs = require('fs')\nconst util = require('util')\nconst chmod = util.promisify(fs.chmod)\nconst unlink = util.promisify(fs.unlink)\nconst stat = util.promisify(fs.stat)\nconst move = require('@npmcli/move-file')\nconst pinflight = require('promise-inflight')\n\nmodule.exports = moveFile\n\nfunction moveFile (src, dest) {\n  const isWindows = global.__CACACHE_TEST_FAKE_WINDOWS__ ||\n    process.platform === 'win32'\n\n  // This isn't quite an fs.rename -- the assumption is that\n  // if `dest` already exists, and we get certain errors while\n  // trying to move it, we should just not bother.\n  //\n  // In the case of cache corruption, users will receive an\n  // EINTEGRITY error elsewhere, and can remove the offending\n  // content their own way.\n  //\n  // Note that, as the name suggests, this strictly only supports file moves.\n  return new Promise((resolve, reject) => {\n    fs.link(src, dest, (err) => {\n      if (err) {\n        if (isWindows && err.code === 'EPERM') {\n          // XXX This is a really weird way to handle this situation, as it\n          // results in the src file being deleted even though the dest\n          // might not exist.  Since we pretty much always write files to\n          // deterministic locations based on content hash, this is likely\n          // ok (or at worst, just ends in a future cache miss).  But it would\n          // be worth investigating at some time in the future if this is\n          // really what we want to do here.\n          return resolve()\n        } else if (err.code === 'EEXIST' || err.code === 'EBUSY') {\n          // file already exists, so whatever\n          return resolve()\n        } else {\n          return reject(err)\n        }\n      } else {\n        return resolve()\n      }\n    })\n  })\n    .then(() => {\n      // content should never change for any reason, so make it read-only\n      return Promise.all([\n        unlink(src),\n        !isWindows && chmod(dest, '0444')\n      ])\n    })\n    .catch(() => {\n      return pinflight('cacache-move-file:' + dest, () => {\n        return stat(dest).catch((err) => {\n          if (err.code !== 'ENOENT') {\n            // Something else is wrong here. Bail bail bail\n            throw err\n          }\n          // file doesn't already exist! let's try a rename -> copy fallback\n          // only delete if it successfully copies\n          return move(src, dest)\n        })\n      })\n    })\n}\n"]},"metadata":{},"sourceType":"script"}