{"ast":null,"code":"\"use strict\";\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.readTsconfig = void 0;\n\nvar path = require(\"path\");\n/**\n * Reads and parses a given TsConfig file.\n *\n * @param tsconfigPath - An absolute or relative path from 'workspaceRoot' of the tsconfig file.\n * @param workspaceRoot - workspaceRoot root location when provided\n * it will resolve 'tsconfigPath' from this path.\n */\n\n\nfunction readTsconfig(tsconfigPath, workspaceRoot) {\n  var tsConfigFullPath = workspaceRoot ? path.resolve(workspaceRoot, tsconfigPath) : tsconfigPath; // We use 'ng' instead of 'ts' here because 'ts' is not aware of 'angularCompilerOptions'\n  // and will not merged them if they are at un upper level tsconfig file when using `extends`.\n\n  var ng = require('@angular/compiler-cli');\n\n  var configResult = ng.readConfiguration(tsConfigFullPath);\n\n  if (configResult.errors && configResult.errors.length) {\n    throw new Error(ng.formatDiagnostics(configResult.errors));\n  }\n\n  return configResult;\n}\n\nexports.readTsconfig = readTsconfig;","map":{"version":3,"sources":["/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@angular-devkit/build-angular/src/utils/read-tsconfig.js"],"names":["Object","defineProperty","exports","value","readTsconfig","path","require","tsconfigPath","workspaceRoot","tsConfigFullPath","resolve","ng","configResult","readConfiguration","errors","length","Error","formatDiagnostics"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,YAAR,GAAuB,KAAK,CAA5B;;AACA,IAAMC,IAAI,GAAGC,OAAO,CAAC,MAAD,CAApB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASF,YAAT,CAAsBG,YAAtB,EAAoCC,aAApC,EAAmD;AAC/C,MAAMC,gBAAgB,GAAGD,aAAa,GAChCH,IAAI,CAACK,OAAL,CAAaF,aAAb,EAA4BD,YAA5B,CADgC,GAEhCA,YAFN,CAD+C,CAI/C;AACA;;AACA,MAAMI,EAAE,GAAGL,OAAO,CAAC,uBAAD,CAAlB;;AACA,MAAMM,YAAY,GAAGD,EAAE,CAACE,iBAAH,CAAqBJ,gBAArB,CAArB;;AACA,MAAIG,YAAY,CAACE,MAAb,IAAuBF,YAAY,CAACE,MAAb,CAAoBC,MAA/C,EAAuD;AACnD,UAAM,IAAIC,KAAJ,CAAUL,EAAE,CAACM,iBAAH,CAAqBL,YAAY,CAACE,MAAlC,CAAV,CAAN;AACH;;AACD,SAAOF,YAAP;AACH;;AACDV,OAAO,CAACE,YAAR,GAAuBA,YAAvB","sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.readTsconfig = void 0;\nconst path = require(\"path\");\n/**\n * Reads and parses a given TsConfig file.\n *\n * @param tsconfigPath - An absolute or relative path from 'workspaceRoot' of the tsconfig file.\n * @param workspaceRoot - workspaceRoot root location when provided\n * it will resolve 'tsconfigPath' from this path.\n */\nfunction readTsconfig(tsconfigPath, workspaceRoot) {\n    const tsConfigFullPath = workspaceRoot\n        ? path.resolve(workspaceRoot, tsconfigPath)\n        : tsconfigPath;\n    // We use 'ng' instead of 'ts' here because 'ts' is not aware of 'angularCompilerOptions'\n    // and will not merged them if they are at un upper level tsconfig file when using `extends`.\n    const ng = require('@angular/compiler-cli');\n    const configResult = ng.readConfiguration(tsConfigFullPath);\n    if (configResult.errors && configResult.errors.length) {\n        throw new Error(ng.formatDiagnostics(configResult.errors));\n    }\n    return configResult;\n}\nexports.readTsconfig = readTsconfig;\n"]},"metadata":{},"sourceType":"script"}