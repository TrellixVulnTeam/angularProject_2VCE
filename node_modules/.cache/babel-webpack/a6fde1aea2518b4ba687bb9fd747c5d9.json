{"ast":null,"code":"\"use strict\";\n\nvar _toConsumableArray = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/toConsumableArray\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.replaceBootstrap = void 0;\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nvar path_1 = require(\"path\");\n\nvar ts = require(\"typescript\");\n\nvar utils_1 = require(\"../utils\");\n\nvar ast_helpers_1 = require(\"./ast_helpers\");\n\nvar insert_import_1 = require(\"./insert_import\");\n\nvar interfaces_1 = require(\"./interfaces\");\n\nvar make_transform_1 = require(\"./make_transform\");\n\nfunction replaceBootstrap(shouldTransform, getEntryModule, getTypeChecker) {\n  var useFactories = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n\n  var standardTransform = function standardTransform(sourceFile) {\n    var ops = [];\n    var entryModule = getEntryModule();\n\n    if (!shouldTransform(sourceFile.fileName) || !entryModule) {\n      return ops;\n    } // Find all identifiers.\n\n\n    var entryModuleIdentifiers = ast_helpers_1.collectDeepNodes(sourceFile, ts.SyntaxKind.Identifier).filter(function (identifier) {\n      return identifier.text === entryModule.className;\n    });\n\n    if (entryModuleIdentifiers.length === 0) {\n      return [];\n    } // Find the bootstrap calls.\n\n\n    entryModuleIdentifiers.forEach(function (entryModuleIdentifier) {\n      // Figure out if it's a `platformBrowserDynamic().bootstrapModule(AppModule)` call.\n      if (!(entryModuleIdentifier.parent && entryModuleIdentifier.parent.kind === ts.SyntaxKind.CallExpression)) {\n        return;\n      }\n\n      var callExpr = entryModuleIdentifier.parent;\n\n      if (callExpr.expression.kind !== ts.SyntaxKind.PropertyAccessExpression) {\n        return;\n      }\n\n      var propAccessExpr = callExpr.expression;\n\n      if (propAccessExpr.name.text !== 'bootstrapModule' || propAccessExpr.expression.kind !== ts.SyntaxKind.CallExpression) {\n        return;\n      }\n\n      var bootstrapModuleIdentifier = propAccessExpr.name;\n      var innerCallExpr = propAccessExpr.expression;\n\n      if (!(innerCallExpr.expression.kind === ts.SyntaxKind.Identifier && innerCallExpr.expression.text === 'platformBrowserDynamic')) {\n        return;\n      }\n\n      var platformBrowserDynamicIdentifier = innerCallExpr.expression;\n      var idPlatformBrowser = ts.createUniqueName('__NgCli_bootstrap_');\n      var idNgFactory = ts.createUniqueName('__NgCli_bootstrap_'); // Add the transform operations.\n\n      var relativeEntryModulePath = path_1.relative(path_1.dirname(sourceFile.fileName), entryModule.path);\n      var className = entryModule.className;\n      var modulePath = utils_1.forwardSlashPath(\"./\".concat(relativeEntryModulePath));\n      var bootstrapIdentifier = 'bootstrapModule';\n\n      if (useFactories) {\n        className += 'NgFactory';\n        modulePath += '.ngfactory';\n        bootstrapIdentifier = 'bootstrapModuleFactory';\n      }\n\n      ops.push.apply(ops, _toConsumableArray(insert_import_1.insertStarImport(sourceFile, idNgFactory, modulePath)).concat([new interfaces_1.ReplaceNodeOperation(sourceFile, entryModuleIdentifier, ts.createPropertyAccess(idNgFactory, ts.createIdentifier(className)))], _toConsumableArray(insert_import_1.insertStarImport(sourceFile, idPlatformBrowser, '@angular/platform-browser')), [new interfaces_1.ReplaceNodeOperation(sourceFile, platformBrowserDynamicIdentifier, ts.createPropertyAccess(idPlatformBrowser, 'platformBrowser')), new interfaces_1.ReplaceNodeOperation(sourceFile, bootstrapModuleIdentifier, ts.createIdentifier(bootstrapIdentifier))]));\n    });\n    return ops;\n  };\n\n  return make_transform_1.makeTransform(standardTransform, getTypeChecker);\n}\n\nexports.replaceBootstrap = replaceBootstrap;","map":{"version":3,"sources":["/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@ngtools/webpack/src/transformers/replace_bootstrap.js"],"names":["Object","defineProperty","exports","value","replaceBootstrap","path_1","require","ts","utils_1","ast_helpers_1","insert_import_1","interfaces_1","make_transform_1","shouldTransform","getEntryModule","getTypeChecker","useFactories","standardTransform","sourceFile","ops","entryModule","fileName","entryModuleIdentifiers","collectDeepNodes","SyntaxKind","Identifier","filter","identifier","text","className","length","forEach","entryModuleIdentifier","parent","kind","CallExpression","callExpr","expression","PropertyAccessExpression","propAccessExpr","name","bootstrapModuleIdentifier","innerCallExpr","platformBrowserDynamicIdentifier","idPlatformBrowser","createUniqueName","idNgFactory","relativeEntryModulePath","relative","dirname","path","modulePath","forwardSlashPath","bootstrapIdentifier","push","insertStarImport","ReplaceNodeOperation","createPropertyAccess","createIdentifier","makeTransform"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.replaceBootstrap = void 0;\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst path_1 = require(\"path\");\nconst ts = require(\"typescript\");\nconst utils_1 = require(\"../utils\");\nconst ast_helpers_1 = require(\"./ast_helpers\");\nconst insert_import_1 = require(\"./insert_import\");\nconst interfaces_1 = require(\"./interfaces\");\nconst make_transform_1 = require(\"./make_transform\");\nfunction replaceBootstrap(shouldTransform, getEntryModule, getTypeChecker, useFactories = true) {\n    const standardTransform = function (sourceFile) {\n        const ops = [];\n        const entryModule = getEntryModule();\n        if (!shouldTransform(sourceFile.fileName) || !entryModule) {\n            return ops;\n        }\n        // Find all identifiers.\n        const entryModuleIdentifiers = ast_helpers_1.collectDeepNodes(sourceFile, ts.SyntaxKind.Identifier)\n            .filter(identifier => identifier.text === entryModule.className);\n        if (entryModuleIdentifiers.length === 0) {\n            return [];\n        }\n        // Find the bootstrap calls.\n        entryModuleIdentifiers.forEach(entryModuleIdentifier => {\n            // Figure out if it's a `platformBrowserDynamic().bootstrapModule(AppModule)` call.\n            if (!(entryModuleIdentifier.parent\n                && entryModuleIdentifier.parent.kind === ts.SyntaxKind.CallExpression)) {\n                return;\n            }\n            const callExpr = entryModuleIdentifier.parent;\n            if (callExpr.expression.kind !== ts.SyntaxKind.PropertyAccessExpression) {\n                return;\n            }\n            const propAccessExpr = callExpr.expression;\n            if (propAccessExpr.name.text !== 'bootstrapModule'\n                || propAccessExpr.expression.kind !== ts.SyntaxKind.CallExpression) {\n                return;\n            }\n            const bootstrapModuleIdentifier = propAccessExpr.name;\n            const innerCallExpr = propAccessExpr.expression;\n            if (!(innerCallExpr.expression.kind === ts.SyntaxKind.Identifier\n                && innerCallExpr.expression.text === 'platformBrowserDynamic')) {\n                return;\n            }\n            const platformBrowserDynamicIdentifier = innerCallExpr.expression;\n            const idPlatformBrowser = ts.createUniqueName('__NgCli_bootstrap_');\n            const idNgFactory = ts.createUniqueName('__NgCli_bootstrap_');\n            // Add the transform operations.\n            const relativeEntryModulePath = path_1.relative(path_1.dirname(sourceFile.fileName), entryModule.path);\n            let className = entryModule.className;\n            let modulePath = utils_1.forwardSlashPath(`./${relativeEntryModulePath}`);\n            let bootstrapIdentifier = 'bootstrapModule';\n            if (useFactories) {\n                className += 'NgFactory';\n                modulePath += '.ngfactory';\n                bootstrapIdentifier = 'bootstrapModuleFactory';\n            }\n            ops.push(\n            // Replace the entry module import.\n            ...insert_import_1.insertStarImport(sourceFile, idNgFactory, modulePath), new interfaces_1.ReplaceNodeOperation(sourceFile, entryModuleIdentifier, ts.createPropertyAccess(idNgFactory, ts.createIdentifier(className))), \n            // Replace the platformBrowserDynamic import.\n            ...insert_import_1.insertStarImport(sourceFile, idPlatformBrowser, '@angular/platform-browser'), new interfaces_1.ReplaceNodeOperation(sourceFile, platformBrowserDynamicIdentifier, ts.createPropertyAccess(idPlatformBrowser, 'platformBrowser')), new interfaces_1.ReplaceNodeOperation(sourceFile, bootstrapModuleIdentifier, ts.createIdentifier(bootstrapIdentifier)));\n        });\n        return ops;\n    };\n    return make_transform_1.makeTransform(standardTransform, getTypeChecker);\n}\nexports.replaceBootstrap = replaceBootstrap;\n"]},"metadata":{},"sourceType":"script"}