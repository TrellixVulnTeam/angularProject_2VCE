{"ast":null,"code":"'use strict';\n/**\n * `rawlist` type prompt\n */\n\nvar _classCallCheck = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar _ = {\n  uniq: require('lodash/uniq'),\n  isString: require('lodash/isString'),\n  isNumber: require('lodash/isNumber'),\n  findIndex: require('lodash/findIndex')\n};\n\nvar chalk = require('chalk');\n\nvar _require = require('rxjs/operators'),\n    map = _require.map,\n    takeUntil = _require.takeUntil;\n\nvar Base = require('./base');\n\nvar Separator = require('../objects/separator');\n\nvar observe = require('../utils/events');\n\nvar Paginator = require('../utils/paginator');\n\nvar ExpandPrompt = /*#__PURE__*/function (_Base) {\n  _inherits(ExpandPrompt, _Base);\n\n  var _super = _createSuper(ExpandPrompt);\n\n  function ExpandPrompt(questions, rl, answers) {\n    var _this;\n\n    _classCallCheck(this, ExpandPrompt);\n\n    _this = _super.call(this, questions, rl, answers);\n\n    if (!_this.opt.choices) {\n      _this.throwParamError('choices');\n    }\n\n    _this.validateChoices(_this.opt.choices); // Add the default `help` (/expand) option\n\n\n    _this.opt.choices.push({\n      key: 'h',\n      name: 'Help, list all options',\n      value: 'help'\n    });\n\n    _this.opt.validate = function (choice) {\n      if (choice == null) {\n        return 'Please enter a valid command';\n      }\n\n      return choice !== 'help';\n    }; // Setup the default string (capitalize the default key)\n\n\n    _this.opt.default = _this.generateChoicesString(_this.opt.choices, _this.opt.default);\n    _this.paginator = new Paginator(_this.screen);\n    return _this;\n  }\n  /**\n   * Start the Inquiry session\n   * @param  {Function} cb      Callback when prompt is done\n   * @return {this}\n   */\n\n\n  _createClass(ExpandPrompt, [{\n    key: \"_run\",\n    value: function _run(cb) {\n      this.done = cb; // Save user answer and update prompt to show selected option.\n\n      var events = observe(this.rl);\n      var validation = this.handleSubmitEvents(events.line.pipe(map(this.getCurrentValue.bind(this))));\n      validation.success.forEach(this.onSubmit.bind(this));\n      validation.error.forEach(this.onError.bind(this));\n      this.keypressObs = events.keypress.pipe(takeUntil(validation.success)).forEach(this.onKeypress.bind(this)); // Init the prompt\n\n      this.render();\n      return this;\n    }\n    /**\n     * Render the prompt to screen\n     * @return {ExpandPrompt} self\n     */\n\n  }, {\n    key: \"render\",\n    value: function render(error, hint) {\n      var message = this.getQuestion();\n      var bottomContent = '';\n\n      if (this.status === 'answered') {\n        message += chalk.cyan(this.answer);\n      } else if (this.status === 'expanded') {\n        var choicesStr = renderChoices(this.opt.choices, this.selectedKey);\n        message += this.paginator.paginate(choicesStr, this.selectedKey, this.opt.pageSize);\n        message += '\\n  Answer: ';\n      }\n\n      message += this.rl.line;\n\n      if (error) {\n        bottomContent = chalk.red('>> ') + error;\n      }\n\n      if (hint) {\n        bottomContent = chalk.cyan('>> ') + hint;\n      }\n\n      this.screen.render(message, bottomContent);\n    }\n  }, {\n    key: \"getCurrentValue\",\n    value: function getCurrentValue(input) {\n      if (!input) {\n        input = this.rawDefault;\n      }\n\n      var selected = this.opt.choices.where({\n        key: input.toLowerCase().trim()\n      })[0];\n\n      if (!selected) {\n        return null;\n      }\n\n      return selected.value;\n    }\n    /**\n     * Generate the prompt choices string\n     * @return {String}  Choices string\n     */\n\n  }, {\n    key: \"getChoices\",\n    value: function getChoices() {\n      var _this2 = this;\n\n      var output = '';\n      this.opt.choices.forEach(function (choice) {\n        output += '\\n  ';\n\n        if (choice.type === 'separator') {\n          output += ' ' + choice;\n          return;\n        }\n\n        var choiceStr = choice.key + ') ' + choice.name;\n\n        if (_this2.selectedKey === choice.key) {\n          choiceStr = chalk.cyan(choiceStr);\n        }\n\n        output += choiceStr;\n      });\n      return output;\n    }\n  }, {\n    key: \"onError\",\n    value: function onError(state) {\n      if (state.value === 'help') {\n        this.selectedKey = '';\n        this.status = 'expanded';\n        this.render();\n        return;\n      }\n\n      this.render(state.isValid);\n    }\n    /**\n     * When user press `enter` key\n     */\n\n  }, {\n    key: \"onSubmit\",\n    value: function onSubmit(state) {\n      this.status = 'answered';\n      var choice = this.opt.choices.where({\n        value: state.value\n      })[0];\n      this.answer = choice.short || choice.name; // Re-render prompt\n\n      this.render();\n      this.screen.done();\n      this.done(state.value);\n    }\n    /**\n     * When user press a key\n     */\n\n  }, {\n    key: \"onKeypress\",\n    value: function onKeypress() {\n      this.selectedKey = this.rl.line.toLowerCase();\n      var selected = this.opt.choices.where({\n        key: this.selectedKey\n      })[0];\n\n      if (this.status === 'expanded') {\n        this.render();\n      } else {\n        this.render(null, selected ? selected.name : null);\n      }\n    }\n    /**\n     * Validate the choices\n     * @param {Array} choices\n     */\n\n  }, {\n    key: \"validateChoices\",\n    value: function validateChoices(choices) {\n      var formatError;\n      var errors = [];\n      var keymap = {};\n      choices.filter(Separator.exclude).forEach(function (choice) {\n        if (!choice.key || choice.key.length !== 1) {\n          formatError = true;\n        }\n\n        if (keymap[choice.key]) {\n          errors.push(choice.key);\n        }\n\n        keymap[choice.key] = true;\n        choice.key = String(choice.key).toLowerCase();\n      });\n\n      if (formatError) {\n        throw new Error('Format error: `key` param must be a single letter and is required.');\n      }\n\n      if (keymap.h) {\n        throw new Error('Reserved key error: `key` param cannot be `h` - this value is reserved.');\n      }\n\n      if (errors.length) {\n        throw new Error('Duplicate key error: `key` param must be unique. Duplicates: ' + _.uniq(errors).join(', '));\n      }\n    }\n    /**\n     * Generate a string out of the choices keys\n     * @param  {Array}  choices\n     * @param  {Number|String} default - the choice index or name to capitalize\n     * @return {String} The rendered choices key string\n     */\n\n  }, {\n    key: \"generateChoicesString\",\n    value: function generateChoicesString(choices, defaultChoice) {\n      var defIndex = choices.realLength - 1;\n\n      if (_.isNumber(defaultChoice) && this.opt.choices.getChoice(defaultChoice)) {\n        defIndex = defaultChoice;\n      } else if (_.isString(defaultChoice)) {\n        var index = _.findIndex(choices.realChoices, function (_ref) {\n          var value = _ref.value;\n          return value === defaultChoice;\n        });\n\n        defIndex = index === -1 ? defIndex : index;\n      }\n\n      var defStr = this.opt.choices.pluck('key');\n      this.rawDefault = defStr[defIndex];\n      defStr[defIndex] = String(defStr[defIndex]).toUpperCase();\n      return defStr.join('');\n    }\n  }]);\n\n  return ExpandPrompt;\n}(Base);\n/**\n * Function for rendering checkbox choices\n * @param  {String} pointer Selected key\n * @return {String}         Rendered content\n */\n\n\nfunction renderChoices(choices, pointer) {\n  var output = '';\n  choices.forEach(function (choice) {\n    output += '\\n  ';\n\n    if (choice.type === 'separator') {\n      output += ' ' + choice;\n      return;\n    }\n\n    var choiceStr = choice.key + ') ' + choice.name;\n\n    if (pointer === choice.key) {\n      choiceStr = chalk.cyan(choiceStr);\n    }\n\n    output += choiceStr;\n  });\n  return output;\n}\n\nmodule.exports = ExpandPrompt;","map":{"version":3,"sources":["/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/inquirer/lib/prompts/expand.js"],"names":["_","uniq","require","isString","isNumber","findIndex","chalk","map","takeUntil","Base","Separator","observe","Paginator","ExpandPrompt","questions","rl","answers","opt","choices","throwParamError","validateChoices","push","key","name","value","validate","choice","default","generateChoicesString","paginator","screen","cb","done","events","validation","handleSubmitEvents","line","pipe","getCurrentValue","bind","success","forEach","onSubmit","error","onError","keypressObs","keypress","onKeypress","render","hint","message","getQuestion","bottomContent","status","cyan","answer","choicesStr","renderChoices","selectedKey","paginate","pageSize","red","input","rawDefault","selected","where","toLowerCase","trim","output","type","choiceStr","state","isValid","short","formatError","errors","keymap","filter","exclude","length","String","Error","h","join","defaultChoice","defIndex","realLength","getChoice","index","realChoices","defStr","pluck","toUpperCase","pointer","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n/**\n * `rawlist` type prompt\n */\n\nvar _ = {\n  uniq: require('lodash/uniq'),\n  isString: require('lodash/isString'),\n  isNumber: require('lodash/isNumber'),\n  findIndex: require('lodash/findIndex'),\n};\nvar chalk = require('chalk');\nvar { map, takeUntil } = require('rxjs/operators');\nvar Base = require('./base');\nvar Separator = require('../objects/separator');\nvar observe = require('../utils/events');\nvar Paginator = require('../utils/paginator');\n\nclass ExpandPrompt extends Base {\n  constructor(questions, rl, answers) {\n    super(questions, rl, answers);\n\n    if (!this.opt.choices) {\n      this.throwParamError('choices');\n    }\n\n    this.validateChoices(this.opt.choices);\n\n    // Add the default `help` (/expand) option\n    this.opt.choices.push({\n      key: 'h',\n      name: 'Help, list all options',\n      value: 'help',\n    });\n\n    this.opt.validate = (choice) => {\n      if (choice == null) {\n        return 'Please enter a valid command';\n      }\n\n      return choice !== 'help';\n    };\n\n    // Setup the default string (capitalize the default key)\n    this.opt.default = this.generateChoicesString(this.opt.choices, this.opt.default);\n\n    this.paginator = new Paginator(this.screen);\n  }\n\n  /**\n   * Start the Inquiry session\n   * @param  {Function} cb      Callback when prompt is done\n   * @return {this}\n   */\n\n  _run(cb) {\n    this.done = cb;\n\n    // Save user answer and update prompt to show selected option.\n    var events = observe(this.rl);\n    var validation = this.handleSubmitEvents(\n      events.line.pipe(map(this.getCurrentValue.bind(this)))\n    );\n    validation.success.forEach(this.onSubmit.bind(this));\n    validation.error.forEach(this.onError.bind(this));\n    this.keypressObs = events.keypress\n      .pipe(takeUntil(validation.success))\n      .forEach(this.onKeypress.bind(this));\n\n    // Init the prompt\n    this.render();\n\n    return this;\n  }\n\n  /**\n   * Render the prompt to screen\n   * @return {ExpandPrompt} self\n   */\n\n  render(error, hint) {\n    var message = this.getQuestion();\n    var bottomContent = '';\n\n    if (this.status === 'answered') {\n      message += chalk.cyan(this.answer);\n    } else if (this.status === 'expanded') {\n      var choicesStr = renderChoices(this.opt.choices, this.selectedKey);\n      message += this.paginator.paginate(choicesStr, this.selectedKey, this.opt.pageSize);\n      message += '\\n  Answer: ';\n    }\n\n    message += this.rl.line;\n\n    if (error) {\n      bottomContent = chalk.red('>> ') + error;\n    }\n\n    if (hint) {\n      bottomContent = chalk.cyan('>> ') + hint;\n    }\n\n    this.screen.render(message, bottomContent);\n  }\n\n  getCurrentValue(input) {\n    if (!input) {\n      input = this.rawDefault;\n    }\n\n    var selected = this.opt.choices.where({ key: input.toLowerCase().trim() })[0];\n    if (!selected) {\n      return null;\n    }\n\n    return selected.value;\n  }\n\n  /**\n   * Generate the prompt choices string\n   * @return {String}  Choices string\n   */\n\n  getChoices() {\n    var output = '';\n\n    this.opt.choices.forEach((choice) => {\n      output += '\\n  ';\n\n      if (choice.type === 'separator') {\n        output += ' ' + choice;\n        return;\n      }\n\n      var choiceStr = choice.key + ') ' + choice.name;\n      if (this.selectedKey === choice.key) {\n        choiceStr = chalk.cyan(choiceStr);\n      }\n\n      output += choiceStr;\n    });\n\n    return output;\n  }\n\n  onError(state) {\n    if (state.value === 'help') {\n      this.selectedKey = '';\n      this.status = 'expanded';\n      this.render();\n      return;\n    }\n\n    this.render(state.isValid);\n  }\n\n  /**\n   * When user press `enter` key\n   */\n\n  onSubmit(state) {\n    this.status = 'answered';\n    var choice = this.opt.choices.where({ value: state.value })[0];\n    this.answer = choice.short || choice.name;\n\n    // Re-render prompt\n    this.render();\n    this.screen.done();\n    this.done(state.value);\n  }\n\n  /**\n   * When user press a key\n   */\n\n  onKeypress() {\n    this.selectedKey = this.rl.line.toLowerCase();\n    var selected = this.opt.choices.where({ key: this.selectedKey })[0];\n    if (this.status === 'expanded') {\n      this.render();\n    } else {\n      this.render(null, selected ? selected.name : null);\n    }\n  }\n\n  /**\n   * Validate the choices\n   * @param {Array} choices\n   */\n\n  validateChoices(choices) {\n    var formatError;\n    var errors = [];\n    var keymap = {};\n    choices.filter(Separator.exclude).forEach((choice) => {\n      if (!choice.key || choice.key.length !== 1) {\n        formatError = true;\n      }\n\n      if (keymap[choice.key]) {\n        errors.push(choice.key);\n      }\n\n      keymap[choice.key] = true;\n      choice.key = String(choice.key).toLowerCase();\n    });\n\n    if (formatError) {\n      throw new Error(\n        'Format error: `key` param must be a single letter and is required.'\n      );\n    }\n\n    if (keymap.h) {\n      throw new Error(\n        'Reserved key error: `key` param cannot be `h` - this value is reserved.'\n      );\n    }\n\n    if (errors.length) {\n      throw new Error(\n        'Duplicate key error: `key` param must be unique. Duplicates: ' +\n          _.uniq(errors).join(', ')\n      );\n    }\n  }\n\n  /**\n   * Generate a string out of the choices keys\n   * @param  {Array}  choices\n   * @param  {Number|String} default - the choice index or name to capitalize\n   * @return {String} The rendered choices key string\n   */\n  generateChoicesString(choices, defaultChoice) {\n    var defIndex = choices.realLength - 1;\n    if (_.isNumber(defaultChoice) && this.opt.choices.getChoice(defaultChoice)) {\n      defIndex = defaultChoice;\n    } else if (_.isString(defaultChoice)) {\n      let index = _.findIndex(\n        choices.realChoices,\n        ({ value }) => value === defaultChoice\n      );\n      defIndex = index === -1 ? defIndex : index;\n    }\n\n    var defStr = this.opt.choices.pluck('key');\n    this.rawDefault = defStr[defIndex];\n    defStr[defIndex] = String(defStr[defIndex]).toUpperCase();\n    return defStr.join('');\n  }\n}\n\n/**\n * Function for rendering checkbox choices\n * @param  {String} pointer Selected key\n * @return {String}         Rendered content\n */\n\nfunction renderChoices(choices, pointer) {\n  var output = '';\n\n  choices.forEach((choice) => {\n    output += '\\n  ';\n\n    if (choice.type === 'separator') {\n      output += ' ' + choice;\n      return;\n    }\n\n    var choiceStr = choice.key + ') ' + choice.name;\n    if (pointer === choice.key) {\n      choiceStr = chalk.cyan(choiceStr);\n    }\n\n    output += choiceStr;\n  });\n\n  return output;\n}\n\nmodule.exports = ExpandPrompt;\n"]},"metadata":{},"sourceType":"script"}