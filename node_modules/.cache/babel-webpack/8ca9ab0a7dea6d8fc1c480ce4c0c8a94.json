{"ast":null,"code":"/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n(function (factory) {\n  if (typeof module === \"object\" && typeof module.exports === \"object\") {\n    var v = factory(require, exports);\n    if (v !== undefined) module.exports = v;\n  } else if (typeof define === \"function\" && define.amd) {\n    define(\"@angular/compiler/src/i18n/i18n_html_parser\", [\"require\", \"exports\", \"tslib\", \"@angular/compiler/src/core\", \"@angular/compiler/src/ml_parser/interpolation_config\", \"@angular/compiler/src/ml_parser/parser\", \"@angular/compiler/src/i18n/digest\", \"@angular/compiler/src/i18n/extractor_merger\", \"@angular/compiler/src/i18n/serializers/xliff\", \"@angular/compiler/src/i18n/serializers/xliff2\", \"@angular/compiler/src/i18n/serializers/xmb\", \"@angular/compiler/src/i18n/serializers/xtb\", \"@angular/compiler/src/i18n/translation_bundle\"], factory);\n  }\n})(function (require, exports) {\n  \"use strict\";\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.I18NHtmlParser = void 0;\n\n  var tslib_1 = require(\"tslib\");\n\n  var core_1 = require(\"@angular/compiler/src/core\");\n\n  var interpolation_config_1 = require(\"@angular/compiler/src/ml_parser/interpolation_config\");\n\n  var parser_1 = require(\"@angular/compiler/src/ml_parser/parser\");\n\n  var digest_1 = require(\"@angular/compiler/src/i18n/digest\");\n\n  var extractor_merger_1 = require(\"@angular/compiler/src/i18n/extractor_merger\");\n\n  var xliff_1 = require(\"@angular/compiler/src/i18n/serializers/xliff\");\n\n  var xliff2_1 = require(\"@angular/compiler/src/i18n/serializers/xliff2\");\n\n  var xmb_1 = require(\"@angular/compiler/src/i18n/serializers/xmb\");\n\n  var xtb_1 = require(\"@angular/compiler/src/i18n/serializers/xtb\");\n\n  var translation_bundle_1 = require(\"@angular/compiler/src/i18n/translation_bundle\");\n\n  var I18NHtmlParser =\n  /** @class */\n  function () {\n    function I18NHtmlParser(_htmlParser, translations, translationsFormat, missingTranslation, console) {\n      if (missingTranslation === void 0) {\n        missingTranslation = core_1.MissingTranslationStrategy.Warning;\n      }\n\n      this._htmlParser = _htmlParser;\n\n      if (translations) {\n        var serializer = createSerializer(translationsFormat);\n        this._translationBundle = translation_bundle_1.TranslationBundle.load(translations, 'i18n', serializer, missingTranslation, console);\n      } else {\n        this._translationBundle = new translation_bundle_1.TranslationBundle({}, null, digest_1.digest, undefined, missingTranslation, console);\n      }\n    }\n\n    I18NHtmlParser.prototype.parse = function (source, url, options) {\n      if (options === void 0) {\n        options = {};\n      }\n\n      var interpolationConfig = options.interpolationConfig || interpolation_config_1.DEFAULT_INTERPOLATION_CONFIG;\n\n      var parseResult = this._htmlParser.parse(source, url, tslib_1.__assign({\n        interpolationConfig: interpolationConfig\n      }, options));\n\n      if (parseResult.errors.length) {\n        return new parser_1.ParseTreeResult(parseResult.rootNodes, parseResult.errors);\n      }\n\n      return extractor_merger_1.mergeTranslations(parseResult.rootNodes, this._translationBundle, interpolationConfig, [], {});\n    };\n\n    return I18NHtmlParser;\n  }();\n\n  exports.I18NHtmlParser = I18NHtmlParser;\n\n  function createSerializer(format) {\n    format = (format || 'xlf').toLowerCase();\n\n    switch (format) {\n      case 'xmb':\n        return new xmb_1.Xmb();\n\n      case 'xtb':\n        return new xtb_1.Xtb();\n\n      case 'xliff2':\n      case 'xlf2':\n        return new xliff2_1.Xliff2();\n\n      case 'xliff':\n      case 'xlf':\n      default:\n        return new xliff_1.Xliff();\n    }\n  }\n});","map":{"version":3,"sources":["../../../../../../../packages/compiler/src/i18n/i18n_html_parser.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MissingTranslationStrategy} from '../core';\nimport {HtmlParser} from '../ml_parser/html_parser';\nimport {DEFAULT_INTERPOLATION_CONFIG} from '../ml_parser/interpolation_config';\nimport {TokenizeOptions} from '../ml_parser/lexer';\nimport {ParseTreeResult} from '../ml_parser/parser';\nimport {Console} from '../util';\n\nimport {digest} from './digest';\nimport {mergeTranslations} from './extractor_merger';\nimport {Serializer} from './serializers/serializer';\nimport {Xliff} from './serializers/xliff';\nimport {Xliff2} from './serializers/xliff2';\nimport {Xmb} from './serializers/xmb';\nimport {Xtb} from './serializers/xtb';\nimport {TranslationBundle} from './translation_bundle';\n\nexport class I18NHtmlParser implements HtmlParser {\n  // @override\n  getTagDefinition: any;\n\n  private _translationBundle: TranslationBundle;\n\n  constructor(\n      private _htmlParser: HtmlParser, translations?: string, translationsFormat?: string,\n      missingTranslation: MissingTranslationStrategy = MissingTranslationStrategy.Warning,\n      console?: Console) {\n    if (translations) {\n      const serializer = createSerializer(translationsFormat);\n      this._translationBundle =\n          TranslationBundle.load(translations, 'i18n', serializer, missingTranslation, console);\n    } else {\n      this._translationBundle =\n          new TranslationBundle({}, null, digest, undefined, missingTranslation, console);\n    }\n  }\n\n  parse(source: string, url: string, options: TokenizeOptions = {}): ParseTreeResult {\n    const interpolationConfig = options.interpolationConfig || DEFAULT_INTERPOLATION_CONFIG;\n    const parseResult = this._htmlParser.parse(source, url, {interpolationConfig, ...options});\n\n    if (parseResult.errors.length) {\n      return new ParseTreeResult(parseResult.rootNodes, parseResult.errors);\n    }\n\n    return mergeTranslations(\n        parseResult.rootNodes, this._translationBundle, interpolationConfig, [], {});\n  }\n}\n\nfunction createSerializer(format?: string): Serializer {\n  format = (format || 'xlf').toLowerCase();\n\n  switch (format) {\n    case 'xmb':\n      return new Xmb();\n    case 'xtb':\n      return new Xtb();\n    case 'xliff2':\n    case 'xlf2':\n      return new Xliff2();\n    case 'xliff':\n    case 'xlf':\n    default:\n      return new Xliff();\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}