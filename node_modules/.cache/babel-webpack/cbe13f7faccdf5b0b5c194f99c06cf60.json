{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n/** @typedef {import(\"./Resolver\")} Resolver */\n\n/** @typedef {import(\"./Resolver\").ResolveStepHook} ResolveStepHook */\n\nvar _objectSpread = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/objectSpread2\");\n\nvar _classCallCheck = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/createClass\");\n\nmodule.exports = /*#__PURE__*/function () {\n  /**\n   * @param {string | ResolveStepHook} source source\n   * @param {string} filename filename\n   * @param {string | ResolveStepHook} target target\n   */\n  function UseFilePlugin(source, filename, target) {\n    _classCallCheck(this, UseFilePlugin);\n\n    this.source = source;\n    this.filename = filename;\n    this.target = target;\n  }\n  /**\n   * @param {Resolver} resolver the resolver\n   * @returns {void}\n   */\n\n\n  _createClass(UseFilePlugin, [{\n    key: \"apply\",\n    value: function apply(resolver) {\n      var _this = this;\n\n      var target = resolver.ensureHook(this.target);\n      resolver.getHook(this.source).tapAsync(\"UseFilePlugin\", function (request, resolveContext, callback) {\n        var filePath = resolver.join(request.path, _this.filename);\n\n        var obj = _objectSpread(_objectSpread({}, request), {}, {\n          path: filePath,\n          relativePath: request.relativePath && resolver.join(request.relativePath, _this.filename)\n        });\n\n        resolver.doResolve(target, obj, \"using path: \" + filePath, resolveContext, callback);\n      });\n    }\n  }]);\n\n  return UseFilePlugin;\n}();","map":{"version":3,"sources":["/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/enhanced-resolve/lib/UseFilePlugin.js"],"names":["module","exports","source","filename","target","resolver","ensureHook","getHook","tapAsync","request","resolveContext","callback","filePath","join","path","obj","relativePath","doResolve"],"mappings":"AAAA;AACA;AACA;AACA;AAEA;AAEA;;AACA;;;;;;;;AAEAA,MAAM,CAACC,OAAP;AACC;AACD;AACA;AACA;AACA;AACC,yBAAYC,MAAZ,EAAoBC,QAApB,EAA8BC,MAA9B,EAAsC;AAAA;;AACrC,SAAKF,MAAL,GAAcA,MAAd;AACA,SAAKC,QAAL,GAAgBA,QAAhB;AACA,SAAKC,MAAL,GAAcA,MAAd;AACA;AAED;AACD;AACA;AACA;;;AAfA;AAAA;AAAA,WAgBC,eAAMC,QAAN,EAAgB;AAAA;;AACf,UAAMD,MAAM,GAAGC,QAAQ,CAACC,UAAT,CAAoB,KAAKF,MAAzB,CAAf;AACAC,MAAAA,QAAQ,CACNE,OADF,CACU,KAAKL,MADf,EAEEM,QAFF,CAEW,eAFX,EAE4B,UAACC,OAAD,EAAUC,cAAV,EAA0BC,QAA1B,EAAuC;AACjE,YAAMC,QAAQ,GAAGP,QAAQ,CAACQ,IAAT,CAAcJ,OAAO,CAACK,IAAtB,EAA4B,KAAI,CAACX,QAAjC,CAAjB;;AACA,YAAMY,GAAG,mCACLN,OADK;AAERK,UAAAA,IAAI,EAAEF,QAFE;AAGRI,UAAAA,YAAY,EACXP,OAAO,CAACO,YAAR,IACAX,QAAQ,CAACQ,IAAT,CAAcJ,OAAO,CAACO,YAAtB,EAAoC,KAAI,CAACb,QAAzC;AALO,UAAT;;AAOAE,QAAAA,QAAQ,CAACY,SAAT,CACCb,MADD,EAECW,GAFD,EAGC,iBAAiBH,QAHlB,EAICF,cAJD,EAKCC,QALD;AAOA,OAlBF;AAmBA;AArCF;;AAAA;AAAA","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\n/** @typedef {import(\"./Resolver\")} Resolver */\n/** @typedef {import(\"./Resolver\").ResolveStepHook} ResolveStepHook */\n\nmodule.exports = class UseFilePlugin {\n\t/**\n\t * @param {string | ResolveStepHook} source source\n\t * @param {string} filename filename\n\t * @param {string | ResolveStepHook} target target\n\t */\n\tconstructor(source, filename, target) {\n\t\tthis.source = source;\n\t\tthis.filename = filename;\n\t\tthis.target = target;\n\t}\n\n\t/**\n\t * @param {Resolver} resolver the resolver\n\t * @returns {void}\n\t */\n\tapply(resolver) {\n\t\tconst target = resolver.ensureHook(this.target);\n\t\tresolver\n\t\t\t.getHook(this.source)\n\t\t\t.tapAsync(\"UseFilePlugin\", (request, resolveContext, callback) => {\n\t\t\t\tconst filePath = resolver.join(request.path, this.filename);\n\t\t\t\tconst obj = {\n\t\t\t\t\t...request,\n\t\t\t\t\tpath: filePath,\n\t\t\t\t\trelativePath:\n\t\t\t\t\t\trequest.relativePath &&\n\t\t\t\t\t\tresolver.join(request.relativePath, this.filename)\n\t\t\t\t};\n\t\t\t\tresolver.doResolve(\n\t\t\t\t\ttarget,\n\t\t\t\t\tobj,\n\t\t\t\t\t\"using path: \" + filePath,\n\t\t\t\t\tresolveContext,\n\t\t\t\t\tcallback\n\t\t\t\t);\n\t\t\t});\n\t}\n};\n"]},"metadata":{},"sourceType":"script"}