{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nvar _classCallCheck = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/createClass\");\n\nvar base64VLQ = require(\"./base64-vlq\");\n\nvar getNumberOfLines = require(\"./helpers\").getNumberOfLines;\n\nvar getUnfinishedLine = require(\"./helpers\").getUnfinishedLine;\n\nvar LINE_MAPPING = \";AAAA\";\n\nvar SingleLineNode = /*#__PURE__*/function () {\n  function SingleLineNode(generatedCode, source, originalSource, line) {\n    _classCallCheck(this, SingleLineNode);\n\n    this.generatedCode = generatedCode;\n    this.originalSource = originalSource;\n    this.source = source;\n    this.line = line || 1;\n    this._numberOfLines = getNumberOfLines(this.generatedCode);\n    this._endsWithNewLine = generatedCode[generatedCode.length - 1] === \"\\n\";\n  }\n\n  _createClass(SingleLineNode, [{\n    key: \"clone\",\n    value: function clone() {\n      return new SingleLineNode(this.generatedCode, this.source, this.originalSource, this.line);\n    }\n  }, {\n    key: \"getGeneratedCode\",\n    value: function getGeneratedCode() {\n      return this.generatedCode;\n    }\n  }, {\n    key: \"getMappings\",\n    value: function getMappings(mappingsContext) {\n      if (!this.generatedCode) return \"\";\n      var lines = this._numberOfLines;\n      var sourceIdx = mappingsContext.ensureSource(this.source, this.originalSource);\n      var mappings = \"A\"; // generated column 0\n\n      if (mappingsContext.unfinishedGeneratedLine) mappings = \",\" + base64VLQ.encode(mappingsContext.unfinishedGeneratedLine);\n      mappings += base64VLQ.encode(sourceIdx - mappingsContext.currentSource); // source index\n\n      mappings += base64VLQ.encode(this.line - mappingsContext.currentOriginalLine); // original line index\n\n      mappings += \"A\"; // original column 0\n\n      mappingsContext.currentSource = sourceIdx;\n      mappingsContext.currentOriginalLine = this.line;\n      var unfinishedGeneratedLine = mappingsContext.unfinishedGeneratedLine = getUnfinishedLine(this.generatedCode);\n      mappings += Array(lines).join(LINE_MAPPING);\n\n      if (unfinishedGeneratedLine === 0) {\n        mappings += \";\";\n      } else {\n        if (lines !== 0) mappings += LINE_MAPPING;\n      }\n\n      return mappings;\n    }\n  }, {\n    key: \"getNormalizedNodes\",\n    value: function getNormalizedNodes() {\n      return [this];\n    }\n  }, {\n    key: \"mapGeneratedCode\",\n    value: function mapGeneratedCode(fn) {\n      var generatedCode = fn(this.generatedCode);\n      return new SingleLineNode(generatedCode, this.source, this.originalSource, this.line);\n    }\n  }, {\n    key: \"merge\",\n    value: function merge(otherNode) {\n      if (otherNode instanceof SingleLineNode) {\n        return this.mergeSingleLineNode(otherNode);\n      }\n\n      return false;\n    }\n  }, {\n    key: \"mergeSingleLineNode\",\n    value: function mergeSingleLineNode(otherNode) {\n      if (this.source === otherNode.source && this.originalSource === otherNode.originalSource) {\n        if (this.line === otherNode.line) {\n          this.generatedCode += otherNode.generatedCode;\n          this._numberOfLines += otherNode._numberOfLines;\n          this._endsWithNewLine = otherNode._endsWithNewLine;\n          return this;\n        } else if (this.line + 1 === otherNode.line && this._endsWithNewLine && this._numberOfLines === 1 && otherNode._numberOfLines <= 1) {\n          return new SourceNode(this.generatedCode + otherNode.generatedCode, this.source, this.originalSource, this.line);\n        }\n      }\n\n      return false;\n    }\n  }]);\n\n  return SingleLineNode;\n}();\n\nmodule.exports = SingleLineNode;\n\nvar SourceNode = require(\"./SourceNode\"); // circular dependency","map":{"version":3,"sources":["/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/source-list-map/lib/SingleLineNode.js"],"names":["base64VLQ","require","getNumberOfLines","getUnfinishedLine","LINE_MAPPING","SingleLineNode","generatedCode","source","originalSource","line","_numberOfLines","_endsWithNewLine","length","mappingsContext","lines","sourceIdx","ensureSource","mappings","unfinishedGeneratedLine","encode","currentSource","currentOriginalLine","Array","join","fn","otherNode","mergeSingleLineNode","SourceNode","module","exports"],"mappings":"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","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst base64VLQ = require(\"./base64-vlq\");\nconst getNumberOfLines = require(\"./helpers\").getNumberOfLines;\nconst getUnfinishedLine = require(\"./helpers\").getUnfinishedLine;\n\nconst LINE_MAPPING = \";AAAA\";\n\nclass SingleLineNode {\n\n\tconstructor(generatedCode, source, originalSource, line) {\n\t\tthis.generatedCode = generatedCode;\n\t\tthis.originalSource = originalSource;\n\t\tthis.source = source;\n\t\tthis.line = line || 1;\n\t\tthis._numberOfLines = getNumberOfLines(this.generatedCode);\n\t\tthis._endsWithNewLine = generatedCode[generatedCode.length - 1] === \"\\n\";\n\t}\n\n\tclone() {\n\t\treturn new SingleLineNode(this.generatedCode, this.source, this.originalSource, this.line);\n\t}\n\n\tgetGeneratedCode() {\n\t\treturn this.generatedCode;\n\t}\n\n\tgetMappings(mappingsContext) {\n\t\tif(!this.generatedCode)\n\t\t\treturn \"\";\n\t\tconst lines = this._numberOfLines;\n\t\tconst sourceIdx = mappingsContext.ensureSource(this.source, this.originalSource);\n\t\tlet mappings = \"A\"; // generated column 0\n\t\tif(mappingsContext.unfinishedGeneratedLine)\n\t\t\tmappings = \",\" + base64VLQ.encode(mappingsContext.unfinishedGeneratedLine);\n\t\tmappings += base64VLQ.encode(sourceIdx - mappingsContext.currentSource); // source index\n\t\tmappings += base64VLQ.encode(this.line - mappingsContext.currentOriginalLine); // original line index\n\t\tmappings += \"A\"; // original column 0\n\t\tmappingsContext.currentSource = sourceIdx;\n\t\tmappingsContext.currentOriginalLine = this.line;\n\t\tconst unfinishedGeneratedLine = mappingsContext.unfinishedGeneratedLine = getUnfinishedLine(this.generatedCode)\n\t\tmappings += Array(lines).join(LINE_MAPPING);\n\t\tif(unfinishedGeneratedLine === 0) {\n\t\t\tmappings += \";\";\n\t\t} else {\n\t\t\tif(lines !== 0)\n\t\t\t\tmappings += LINE_MAPPING;\n\t\t}\n\t\treturn mappings;\n\t}\n\n\tgetNormalizedNodes() {\n\t\treturn [this];\n\t}\n\n\tmapGeneratedCode(fn) {\n\t\tconst generatedCode = fn(this.generatedCode);\n\t\treturn new SingleLineNode(generatedCode, this.source, this.originalSource, this.line);\n\t}\n\n\tmerge(otherNode) {\n\t\tif(otherNode instanceof SingleLineNode) {\n\t\t\treturn this.mergeSingleLineNode(otherNode);\n\t\t}\n\t\treturn false;\n\t}\n\n\tmergeSingleLineNode(otherNode) {\n\t\tif(this.source === otherNode.source &&\n\t\t\tthis.originalSource === otherNode.originalSource) {\n\t\t\tif(this.line === otherNode.line) {\n\t\t\t\tthis.generatedCode += otherNode.generatedCode;\n\t\t\t\tthis._numberOfLines += otherNode._numberOfLines;\n\t\t\t\tthis._endsWithNewLine = otherNode._endsWithNewLine;\n\t\t\t\treturn this;\n\t\t\t} else if(this.line + 1 === otherNode.line && \n\t\t\t\tthis._endsWithNewLine &&\n\t\t\t\tthis._numberOfLines === 1 && \n\t\t\t\totherNode._numberOfLines <= 1) {\n\t\t\t\treturn new SourceNode(this.generatedCode + otherNode.generatedCode, this.source, this.originalSource, this.line);\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n}\n\nmodule.exports = SingleLineNode;\n\nconst SourceNode = require(\"./SourceNode\"); // circular dependency\n"]},"metadata":{},"sourceType":"script"}