{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.cacheWrapper = cacheWrapper;\nexports.cacheWrapperSync = cacheWrapperSync;\n\nfunction cacheWrapper(_x, _x2, _x3) {\n  return _cacheWrapper.apply(this, arguments);\n}\n\nfunction _cacheWrapper() {\n  _cacheWrapper = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(cache, key, fn) {\n    var cached, result;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            cached = cache.get(key);\n\n            if (!(cached !== undefined)) {\n              _context.next = 3;\n              break;\n            }\n\n            return _context.abrupt(\"return\", cached);\n\n          case 3:\n            _context.next = 5;\n            return fn();\n\n          case 5:\n            result = _context.sent;\n            cache.set(key, result);\n            return _context.abrupt(\"return\", result);\n\n          case 8:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _cacheWrapper.apply(this, arguments);\n}\n\nfunction cacheWrapperSync(cache, key, fn) {\n  var cached = cache.get(key);\n\n  if (cached !== undefined) {\n    return cached;\n  }\n\n  var result = fn();\n  cache.set(key, result);\n  return result;\n}","map":{"version":3,"sources":["../src/cacheWrapper.ts"],"names":["cached","cache","result","fn"],"mappings":";;;;;;;;;;;;SAEA,Y;;;;;2EAAA,iBAAA,KAAA,EAAA,GAAA,EAAA,EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKQA,YAAAA,MALR,GAKiBC,KAAK,CAALA,GAAAA,CAAf,GAAeA,CALjB;;AAAA,kBAMMD,MAAM,KAAV,SANF;AAAA;AAAA;AAAA;;AAAA,6CAOI,MAPJ;;AAAA;AAAA;AAAA,mBAUuBG,EAArB,EAVF;;AAAA;AAUQD,YAAAA,MAVR;AAWED,YAAAA,KAAK,CAALA,GAAAA,CAAAA,GAAAA,EAAAA,MAAAA;AAXF,6CAYE,MAZF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAeA,SAAA,gBAAA,CAAA,KAAA,EAAA,GAAA,EAAA,EAAA,EAIqB;AACnB,MAAMD,MAAM,GAAGC,KAAK,CAALA,GAAAA,CAAf,GAAeA,CAAf;;AACA,MAAID,MAAM,KAAV,SAAA,EAA0B;AACxB,WAAA,MAAA;AACD;;AAED,MAAME,MAAM,GAAGC,EAAf,EAAA;AACAF,EAAAA,KAAK,CAALA,GAAAA,CAAAA,GAAAA,EAAAA,MAAAA;AACA,SAAA,MAAA;AACD","sourcesContent":["import { Cache, CosmiconfigResult } from './types';\n\nasync function cacheWrapper(\n  cache: Cache,\n  key: string,\n  fn: () => Promise<CosmiconfigResult>,\n): Promise<CosmiconfigResult> {\n  const cached = cache.get(key);\n  if (cached !== undefined) {\n    return cached;\n  }\n\n  const result = await fn();\n  cache.set(key, result);\n  return result;\n}\n\nfunction cacheWrapperSync(\n  cache: Cache,\n  key: string,\n  fn: () => CosmiconfigResult,\n): CosmiconfigResult {\n  const cached = cache.get(key);\n  if (cached !== undefined) {\n    return cached;\n  }\n\n  const result = fn();\n  cache.set(key, result);\n  return result;\n}\n\nexport { cacheWrapper, cacheWrapperSync };\n"]},"metadata":{},"sourceType":"script"}