{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ResolverHost = void 0;\n/**\n * A Host that runs a method before calling its delegate. This is an abstract class and its actual\n * behaviour is entirely dependant of the subclass.\n */\n\nvar ResolverHost = /*#__PURE__*/function () {\n  function ResolverHost(_delegate) {\n    _classCallCheck(this, ResolverHost);\n\n    this._delegate = _delegate;\n  }\n\n  _createClass(ResolverHost, [{\n    key: \"capabilities\",\n    get: function get() {\n      return this._delegate.capabilities;\n    }\n  }, {\n    key: \"write\",\n    value: function write(path, content) {\n      return this._delegate.write(this._resolve(path), content);\n    }\n  }, {\n    key: \"read\",\n    value: function read(path) {\n      return this._delegate.read(this._resolve(path));\n    }\n  }, {\n    key: \"delete\",\n    value: function _delete(path) {\n      return this._delegate.delete(this._resolve(path));\n    }\n  }, {\n    key: \"rename\",\n    value: function rename(from, to) {\n      return this._delegate.rename(this._resolve(from), this._resolve(to));\n    }\n  }, {\n    key: \"list\",\n    value: function list(path) {\n      return this._delegate.list(this._resolve(path));\n    }\n  }, {\n    key: \"exists\",\n    value: function exists(path) {\n      return this._delegate.exists(this._resolve(path));\n    }\n  }, {\n    key: \"isDirectory\",\n    value: function isDirectory(path) {\n      return this._delegate.isDirectory(this._resolve(path));\n    }\n  }, {\n    key: \"isFile\",\n    value: function isFile(path) {\n      return this._delegate.isFile(this._resolve(path));\n    } // Some hosts may not support stat.\n\n  }, {\n    key: \"stat\",\n    value: function stat(path) {\n      return this._delegate.stat(this._resolve(path));\n    } // Some hosts may not support watching.\n\n  }, {\n    key: \"watch\",\n    value: function watch(path, options) {\n      return this._delegate.watch(this._resolve(path), options);\n    }\n  }]);\n\n  return ResolverHost;\n}();\n\nexports.ResolverHost = ResolverHost;","map":{"version":3,"sources":["/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@angular-devkit/build-angular/node_modules/@angular-devkit/core/src/virtual-fs/host/resolver.js"],"names":["Object","defineProperty","exports","value","ResolverHost","_delegate","capabilities","path","content","write","_resolve","read","delete","from","to","rename","list","exists","isDirectory","isFile","stat","options","watch"],"mappings":"AAAA;;;;;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,YAAR,GAAuB,KAAK,CAA5B;AACA;AACA;AACA;AACA;;IACMA,Y;AACF,wBAAYC,SAAZ,EAAuB;AAAA;;AACnB,SAAKA,SAAL,GAAiBA,SAAjB;AACH;;;;SACD,eAAmB;AAAE,aAAO,KAAKA,SAAL,CAAeC,YAAtB;AAAqC;;;WAC1D,eAAMC,IAAN,EAAYC,OAAZ,EAAqB;AACjB,aAAO,KAAKH,SAAL,CAAeI,KAAf,CAAqB,KAAKC,QAAL,CAAcH,IAAd,CAArB,EAA0CC,OAA1C,CAAP;AACH;;;WACD,cAAKD,IAAL,EAAW;AACP,aAAO,KAAKF,SAAL,CAAeM,IAAf,CAAoB,KAAKD,QAAL,CAAcH,IAAd,CAApB,CAAP;AACH;;;WACD,iBAAOA,IAAP,EAAa;AACT,aAAO,KAAKF,SAAL,CAAeO,MAAf,CAAsB,KAAKF,QAAL,CAAcH,IAAd,CAAtB,CAAP;AACH;;;WACD,gBAAOM,IAAP,EAAaC,EAAb,EAAiB;AACb,aAAO,KAAKT,SAAL,CAAeU,MAAf,CAAsB,KAAKL,QAAL,CAAcG,IAAd,CAAtB,EAA2C,KAAKH,QAAL,CAAcI,EAAd,CAA3C,CAAP;AACH;;;WACD,cAAKP,IAAL,EAAW;AACP,aAAO,KAAKF,SAAL,CAAeW,IAAf,CAAoB,KAAKN,QAAL,CAAcH,IAAd,CAApB,CAAP;AACH;;;WACD,gBAAOA,IAAP,EAAa;AACT,aAAO,KAAKF,SAAL,CAAeY,MAAf,CAAsB,KAAKP,QAAL,CAAcH,IAAd,CAAtB,CAAP;AACH;;;WACD,qBAAYA,IAAZ,EAAkB;AACd,aAAO,KAAKF,SAAL,CAAea,WAAf,CAA2B,KAAKR,QAAL,CAAcH,IAAd,CAA3B,CAAP;AACH;;;WACD,gBAAOA,IAAP,EAAa;AACT,aAAO,KAAKF,SAAL,CAAec,MAAf,CAAsB,KAAKT,QAAL,CAAcH,IAAd,CAAtB,CAAP;AACH,K,CACD;;;;WACA,cAAKA,IAAL,EAAW;AACP,aAAO,KAAKF,SAAL,CAAee,IAAf,CAAoB,KAAKV,QAAL,CAAcH,IAAd,CAApB,CAAP;AACH,K,CACD;;;;WACA,eAAMA,IAAN,EAAYc,OAAZ,EAAqB;AACjB,aAAO,KAAKhB,SAAL,CAAeiB,KAAf,CAAqB,KAAKZ,QAAL,CAAcH,IAAd,CAArB,EAA0Cc,OAA1C,CAAP;AACH;;;;;;AAELnB,OAAO,CAACE,YAAR,GAAuBA,YAAvB","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ResolverHost = void 0;\n/**\n * A Host that runs a method before calling its delegate. This is an abstract class and its actual\n * behaviour is entirely dependant of the subclass.\n */\nclass ResolverHost {\n    constructor(_delegate) {\n        this._delegate = _delegate;\n    }\n    get capabilities() { return this._delegate.capabilities; }\n    write(path, content) {\n        return this._delegate.write(this._resolve(path), content);\n    }\n    read(path) {\n        return this._delegate.read(this._resolve(path));\n    }\n    delete(path) {\n        return this._delegate.delete(this._resolve(path));\n    }\n    rename(from, to) {\n        return this._delegate.rename(this._resolve(from), this._resolve(to));\n    }\n    list(path) {\n        return this._delegate.list(this._resolve(path));\n    }\n    exists(path) {\n        return this._delegate.exists(this._resolve(path));\n    }\n    isDirectory(path) {\n        return this._delegate.isDirectory(this._resolve(path));\n    }\n    isFile(path) {\n        return this._delegate.isFile(this._resolve(path));\n    }\n    // Some hosts may not support stat.\n    stat(path) {\n        return this._delegate.stat(this._resolve(path));\n    }\n    // Some hosts may not support watching.\n    watch(path, options) {\n        return this._delegate.watch(this._resolve(path), options);\n    }\n}\nexports.ResolverHost = ResolverHost;\n"]},"metadata":{},"sourceType":"script"}