{"ast":null,"code":"/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n(function (factory) {\n  if (typeof module === \"object\" && typeof module.exports === \"object\") {\n    var v = factory(require, exports);\n    if (v !== undefined) module.exports = v;\n  } else if (typeof define === \"function\" && define.amd) {\n    define(\"@angular/compiler/src/ng_module_compiler\", [\"require\", \"exports\", \"@angular/compiler/src/compile_metadata\", \"@angular/compiler/src/identifiers\", \"@angular/compiler/src/output/output_ast\", \"@angular/compiler/src/parse_util\", \"@angular/compiler/src/provider_analyzer\", \"@angular/compiler/src/view_compiler/provider_compiler\"], factory);\n  }\n})(function (require, exports) {\n  \"use strict\";\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.NgModuleCompiler = exports.NgModuleCompileResult = void 0;\n\n  var compile_metadata_1 = require(\"@angular/compiler/src/compile_metadata\");\n\n  var identifiers_1 = require(\"@angular/compiler/src/identifiers\");\n\n  var o = require(\"@angular/compiler/src/output/output_ast\");\n\n  var parse_util_1 = require(\"@angular/compiler/src/parse_util\");\n\n  var provider_analyzer_1 = require(\"@angular/compiler/src/provider_analyzer\");\n\n  var provider_compiler_1 = require(\"@angular/compiler/src/view_compiler/provider_compiler\");\n\n  var NgModuleCompileResult =\n  /** @class */\n  function () {\n    function NgModuleCompileResult(ngModuleFactoryVar) {\n      this.ngModuleFactoryVar = ngModuleFactoryVar;\n    }\n\n    return NgModuleCompileResult;\n  }();\n\n  exports.NgModuleCompileResult = NgModuleCompileResult;\n  var LOG_VAR = o.variable('_l');\n\n  var NgModuleCompiler =\n  /** @class */\n  function () {\n    function NgModuleCompiler(reflector) {\n      this.reflector = reflector;\n    }\n\n    NgModuleCompiler.prototype.compile = function (ctx, ngModuleMeta, extraProviders) {\n      var sourceSpan = parse_util_1.typeSourceSpan('NgModule', ngModuleMeta.type);\n      var entryComponentFactories = ngModuleMeta.transitiveModule.entryComponents;\n      var bootstrapComponents = ngModuleMeta.bootstrapComponents;\n      var providerParser = new provider_analyzer_1.NgModuleProviderAnalyzer(this.reflector, ngModuleMeta, extraProviders, sourceSpan);\n      var providerDefs = [provider_compiler_1.componentFactoryResolverProviderDef(this.reflector, ctx, 0\n      /* None */\n      , entryComponentFactories)].concat(providerParser.parse().map(function (provider) {\n        return provider_compiler_1.providerDef(ctx, provider);\n      })).map(function (_a) {\n        var providerExpr = _a.providerExpr,\n            depsExpr = _a.depsExpr,\n            flags = _a.flags,\n            tokenExpr = _a.tokenExpr;\n        return o.importExpr(identifiers_1.Identifiers.moduleProviderDef).callFn([o.literal(flags), tokenExpr, providerExpr, depsExpr]);\n      });\n      var ngModuleDef = o.importExpr(identifiers_1.Identifiers.moduleDef).callFn([o.literalArr(providerDefs)]);\n      var ngModuleDefFactory = o.fn([new o.FnParam(LOG_VAR.name)], [new o.ReturnStatement(ngModuleDef)], o.INFERRED_TYPE);\n      var ngModuleFactoryVar = compile_metadata_1.identifierName(ngModuleMeta.type) + \"NgFactory\";\n\n      this._createNgModuleFactory(ctx, ngModuleMeta.type.reference, o.importExpr(identifiers_1.Identifiers.createModuleFactory).callFn([ctx.importExpr(ngModuleMeta.type.reference), o.literalArr(bootstrapComponents.map(function (id) {\n        return ctx.importExpr(id.reference);\n      })), ngModuleDefFactory]));\n\n      if (ngModuleMeta.id) {\n        var id = typeof ngModuleMeta.id === 'string' ? o.literal(ngModuleMeta.id) : ctx.importExpr(ngModuleMeta.id);\n        var registerFactoryStmt = o.importExpr(identifiers_1.Identifiers.RegisterModuleFactoryFn).callFn([id, o.variable(ngModuleFactoryVar)]).toStmt();\n        ctx.statements.push(registerFactoryStmt);\n      }\n\n      return new NgModuleCompileResult(ngModuleFactoryVar);\n    };\n\n    NgModuleCompiler.prototype.createStub = function (ctx, ngModuleReference) {\n      this._createNgModuleFactory(ctx, ngModuleReference, o.NULL_EXPR);\n    };\n\n    NgModuleCompiler.prototype._createNgModuleFactory = function (ctx, reference, value) {\n      var ngModuleFactoryVar = compile_metadata_1.identifierName({\n        reference: reference\n      }) + \"NgFactory\";\n      var ngModuleFactoryStmt = o.variable(ngModuleFactoryVar).set(value).toDeclStmt(o.importType(identifiers_1.Identifiers.NgModuleFactory, [o.expressionType(ctx.importExpr(reference))], [o.TypeModifier.Const]), [o.StmtModifier.Final, o.StmtModifier.Exported]);\n      ctx.statements.push(ngModuleFactoryStmt);\n    };\n\n    return NgModuleCompiler;\n  }();\n\n  exports.NgModuleCompiler = NgModuleCompiler;\n});","map":{"version":3,"sources":["../../../../../../packages/compiler/src/ng_module_compiler.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CompileNgModuleMetadata, CompileProviderMetadata, identifierName} from './compile_metadata';\nimport {CompileReflector} from './compile_reflector';\nimport {NodeFlags} from './core';\nimport {Identifiers} from './identifiers';\nimport * as o from './output/output_ast';\nimport {typeSourceSpan} from './parse_util';\nimport {NgModuleProviderAnalyzer} from './provider_analyzer';\nimport {OutputContext} from './util';\nimport {componentFactoryResolverProviderDef, depDef, providerDef} from './view_compiler/provider_compiler';\n\nexport class NgModuleCompileResult {\n  constructor(public ngModuleFactoryVar: string) {}\n}\n\nconst LOG_VAR = o.variable('_l');\n\nexport class NgModuleCompiler {\n  constructor(private reflector: CompileReflector) {}\n  compile(\n      ctx: OutputContext, ngModuleMeta: CompileNgModuleMetadata,\n      extraProviders: CompileProviderMetadata[]): NgModuleCompileResult {\n    const sourceSpan = typeSourceSpan('NgModule', ngModuleMeta.type);\n    const entryComponentFactories = ngModuleMeta.transitiveModule.entryComponents;\n    const bootstrapComponents = ngModuleMeta.bootstrapComponents;\n    const providerParser =\n        new NgModuleProviderAnalyzer(this.reflector, ngModuleMeta, extraProviders, sourceSpan);\n    const providerDefs =\n        [componentFactoryResolverProviderDef(\n             this.reflector, ctx, NodeFlags.None, entryComponentFactories)]\n            .concat(providerParser.parse().map((provider) => providerDef(ctx, provider)))\n            .map(({providerExpr, depsExpr, flags, tokenExpr}) => {\n              return o.importExpr(Identifiers.moduleProviderDef).callFn([\n                o.literal(flags), tokenExpr, providerExpr, depsExpr\n              ]);\n            });\n\n    const ngModuleDef = o.importExpr(Identifiers.moduleDef).callFn([o.literalArr(providerDefs)]);\n    const ngModuleDefFactory =\n        o.fn([new o.FnParam(LOG_VAR.name!)], [new o.ReturnStatement(ngModuleDef)], o.INFERRED_TYPE);\n\n    const ngModuleFactoryVar = `${identifierName(ngModuleMeta.type)}NgFactory`;\n    this._createNgModuleFactory(\n        ctx, ngModuleMeta.type.reference, o.importExpr(Identifiers.createModuleFactory).callFn([\n          ctx.importExpr(ngModuleMeta.type.reference),\n          o.literalArr(bootstrapComponents.map(id => ctx.importExpr(id.reference))),\n          ngModuleDefFactory\n        ]));\n\n    if (ngModuleMeta.id) {\n      const id = typeof ngModuleMeta.id === 'string' ? o.literal(ngModuleMeta.id) :\n                                                       ctx.importExpr(ngModuleMeta.id);\n      const registerFactoryStmt = o.importExpr(Identifiers.RegisterModuleFactoryFn)\n                                      .callFn([id, o.variable(ngModuleFactoryVar)])\n                                      .toStmt();\n      ctx.statements.push(registerFactoryStmt);\n    }\n\n    return new NgModuleCompileResult(ngModuleFactoryVar);\n  }\n\n  createStub(ctx: OutputContext, ngModuleReference: any) {\n    this._createNgModuleFactory(ctx, ngModuleReference, o.NULL_EXPR);\n  }\n\n  private _createNgModuleFactory(ctx: OutputContext, reference: any, value: o.Expression) {\n    const ngModuleFactoryVar = `${identifierName({reference: reference})}NgFactory`;\n    const ngModuleFactoryStmt =\n        o.variable(ngModuleFactoryVar)\n            .set(value)\n            .toDeclStmt(\n                o.importType(\n                    Identifiers.NgModuleFactory, [o.expressionType(ctx.importExpr(reference))!],\n                    [o.TypeModifier.Const]),\n                [o.StmtModifier.Final, o.StmtModifier.Exported]);\n\n    ctx.statements.push(ngModuleFactoryStmt);\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}