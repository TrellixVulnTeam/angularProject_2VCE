{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nvar _classCallCheck = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/createClass\");\n\nvar AliasPlugin = require(\"enhanced-resolve/lib/AliasPlugin\");\n\nvar ParserHelpers = require(\"../ParserHelpers\");\n\nvar nodeLibsBrowser = require(\"node-libs-browser\");\n\nmodule.exports = /*#__PURE__*/function () {\n  function NodeSourcePlugin(options) {\n    _classCallCheck(this, NodeSourcePlugin);\n\n    this.options = options;\n  }\n\n  _createClass(NodeSourcePlugin, [{\n    key: \"apply\",\n    value: function apply(compiler) {\n      var options = this.options;\n\n      if (options === false) {\n        // allow single kill switch to turn off this plugin\n        return;\n      }\n\n      var getPathToModule = function getPathToModule(module, type) {\n        if (type === true || type === undefined && nodeLibsBrowser[module]) {\n          if (!nodeLibsBrowser[module]) {\n            throw new Error(\"No browser version for node.js core module \".concat(module, \" available\"));\n          }\n\n          return nodeLibsBrowser[module];\n        } else if (type === \"mock\") {\n          return require.resolve(\"node-libs-browser/mock/\".concat(module));\n        } else if (type === \"empty\") {\n          return require.resolve(\"node-libs-browser/mock/empty\");\n        } else {\n          return module;\n        }\n      };\n\n      var addExpression = function addExpression(parser, name, module, type, suffix) {\n        suffix = suffix || \"\";\n        parser.hooks.expression.for(name).tap(\"NodeSourcePlugin\", function () {\n          if (parser.state.module && parser.state.module.resource === getPathToModule(module, type)) return;\n          var mockModule = ParserHelpers.requireFileAsExpression(parser.state.module.context, getPathToModule(module, type));\n          return ParserHelpers.addParsedVariableToModule(parser, name, mockModule + suffix);\n        });\n      };\n\n      compiler.hooks.compilation.tap(\"NodeSourcePlugin\", function (compilation, _ref) {\n        var normalModuleFactory = _ref.normalModuleFactory;\n\n        var handler = function handler(parser, parserOptions) {\n          if (parserOptions.node === false) return;\n          var localOptions = options;\n\n          if (parserOptions.node) {\n            localOptions = Object.assign({}, localOptions, parserOptions.node);\n          }\n\n          if (localOptions.global) {\n            parser.hooks.expression.for(\"global\").tap(\"NodeSourcePlugin\", function () {\n              var retrieveGlobalModule = ParserHelpers.requireFileAsExpression(parser.state.module.context, require.resolve(\"../../buildin/global\"));\n              return ParserHelpers.addParsedVariableToModule(parser, \"global\", retrieveGlobalModule);\n            });\n          }\n\n          if (localOptions.process) {\n            var processType = localOptions.process;\n            addExpression(parser, \"process\", \"process\", processType);\n          }\n\n          if (localOptions.console) {\n            var consoleType = localOptions.console;\n            addExpression(parser, \"console\", \"console\", consoleType);\n          }\n\n          var bufferType = localOptions.Buffer;\n\n          if (bufferType) {\n            addExpression(parser, \"Buffer\", \"buffer\", bufferType, \".Buffer\");\n          }\n\n          if (localOptions.setImmediate) {\n            var setImmediateType = localOptions.setImmediate;\n            addExpression(parser, \"setImmediate\", \"timers\", setImmediateType, \".setImmediate\");\n            addExpression(parser, \"clearImmediate\", \"timers\", setImmediateType, \".clearImmediate\");\n          }\n        };\n\n        normalModuleFactory.hooks.parser.for(\"javascript/auto\").tap(\"NodeSourcePlugin\", handler);\n        normalModuleFactory.hooks.parser.for(\"javascript/dynamic\").tap(\"NodeSourcePlugin\", handler);\n      });\n      compiler.hooks.afterResolvers.tap(\"NodeSourcePlugin\", function (compiler) {\n        var _loop = function _loop() {\n          var lib = _Object$keys[_i];\n\n          if (options[lib] !== false) {\n            compiler.resolverFactory.hooks.resolver.for(\"normal\").tap(\"NodeSourcePlugin\", function (resolver) {\n              new AliasPlugin(\"described-resolve\", {\n                name: lib,\n                onlyModule: true,\n                alias: getPathToModule(lib, options[lib])\n              }, \"resolve\").apply(resolver);\n            });\n          }\n        };\n\n        for (var _i = 0, _Object$keys = Object.keys(nodeLibsBrowser); _i < _Object$keys.length; _i++) {\n          _loop();\n        }\n      });\n    }\n  }]);\n\n  return NodeSourcePlugin;\n}();","map":{"version":3,"sources":["/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/webpack/lib/node/NodeSourcePlugin.js"],"names":["AliasPlugin","require","ParserHelpers","nodeLibsBrowser","module","exports","options","compiler","getPathToModule","type","undefined","Error","resolve","addExpression","parser","name","suffix","hooks","expression","for","tap","state","resource","mockModule","requireFileAsExpression","context","addParsedVariableToModule","compilation","normalModuleFactory","handler","parserOptions","node","localOptions","Object","assign","global","retrieveGlobalModule","process","processType","console","consoleType","bufferType","Buffer","setImmediate","setImmediateType","afterResolvers","lib","resolverFactory","resolver","onlyModule","alias","apply","keys"],"mappings":"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","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\nconst AliasPlugin = require(\"enhanced-resolve/lib/AliasPlugin\");\nconst ParserHelpers = require(\"../ParserHelpers\");\nconst nodeLibsBrowser = require(\"node-libs-browser\");\n\nmodule.exports = class NodeSourcePlugin {\n\tconstructor(options) {\n\t\tthis.options = options;\n\t}\n\tapply(compiler) {\n\t\tconst options = this.options;\n\t\tif (options === false) {\n\t\t\t// allow single kill switch to turn off this plugin\n\t\t\treturn;\n\t\t}\n\n\t\tconst getPathToModule = (module, type) => {\n\t\t\tif (type === true || (type === undefined && nodeLibsBrowser[module])) {\n\t\t\t\tif (!nodeLibsBrowser[module]) {\n\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t`No browser version for node.js core module ${module} available`\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\treturn nodeLibsBrowser[module];\n\t\t\t} else if (type === \"mock\") {\n\t\t\t\treturn require.resolve(`node-libs-browser/mock/${module}`);\n\t\t\t} else if (type === \"empty\") {\n\t\t\t\treturn require.resolve(\"node-libs-browser/mock/empty\");\n\t\t\t} else {\n\t\t\t\treturn module;\n\t\t\t}\n\t\t};\n\n\t\tconst addExpression = (parser, name, module, type, suffix) => {\n\t\t\tsuffix = suffix || \"\";\n\t\t\tparser.hooks.expression.for(name).tap(\"NodeSourcePlugin\", () => {\n\t\t\t\tif (\n\t\t\t\t\tparser.state.module &&\n\t\t\t\t\tparser.state.module.resource === getPathToModule(module, type)\n\t\t\t\t)\n\t\t\t\t\treturn;\n\t\t\t\tconst mockModule = ParserHelpers.requireFileAsExpression(\n\t\t\t\t\tparser.state.module.context,\n\t\t\t\t\tgetPathToModule(module, type)\n\t\t\t\t);\n\t\t\t\treturn ParserHelpers.addParsedVariableToModule(\n\t\t\t\t\tparser,\n\t\t\t\t\tname,\n\t\t\t\t\tmockModule + suffix\n\t\t\t\t);\n\t\t\t});\n\t\t};\n\n\t\tcompiler.hooks.compilation.tap(\n\t\t\t\"NodeSourcePlugin\",\n\t\t\t(compilation, { normalModuleFactory }) => {\n\t\t\t\tconst handler = (parser, parserOptions) => {\n\t\t\t\t\tif (parserOptions.node === false) return;\n\n\t\t\t\t\tlet localOptions = options;\n\t\t\t\t\tif (parserOptions.node) {\n\t\t\t\t\t\tlocalOptions = Object.assign({}, localOptions, parserOptions.node);\n\t\t\t\t\t}\n\t\t\t\t\tif (localOptions.global) {\n\t\t\t\t\t\tparser.hooks.expression\n\t\t\t\t\t\t\t.for(\"global\")\n\t\t\t\t\t\t\t.tap(\"NodeSourcePlugin\", () => {\n\t\t\t\t\t\t\t\tconst retrieveGlobalModule = ParserHelpers.requireFileAsExpression(\n\t\t\t\t\t\t\t\t\tparser.state.module.context,\n\t\t\t\t\t\t\t\t\trequire.resolve(\"../../buildin/global\")\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\treturn ParserHelpers.addParsedVariableToModule(\n\t\t\t\t\t\t\t\t\tparser,\n\t\t\t\t\t\t\t\t\t\"global\",\n\t\t\t\t\t\t\t\t\tretrieveGlobalModule\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t\tif (localOptions.process) {\n\t\t\t\t\t\tconst processType = localOptions.process;\n\t\t\t\t\t\taddExpression(parser, \"process\", \"process\", processType);\n\t\t\t\t\t}\n\t\t\t\t\tif (localOptions.console) {\n\t\t\t\t\t\tconst consoleType = localOptions.console;\n\t\t\t\t\t\taddExpression(parser, \"console\", \"console\", consoleType);\n\t\t\t\t\t}\n\t\t\t\t\tconst bufferType = localOptions.Buffer;\n\t\t\t\t\tif (bufferType) {\n\t\t\t\t\t\taddExpression(parser, \"Buffer\", \"buffer\", bufferType, \".Buffer\");\n\t\t\t\t\t}\n\t\t\t\t\tif (localOptions.setImmediate) {\n\t\t\t\t\t\tconst setImmediateType = localOptions.setImmediate;\n\t\t\t\t\t\taddExpression(\n\t\t\t\t\t\t\tparser,\n\t\t\t\t\t\t\t\"setImmediate\",\n\t\t\t\t\t\t\t\"timers\",\n\t\t\t\t\t\t\tsetImmediateType,\n\t\t\t\t\t\t\t\".setImmediate\"\n\t\t\t\t\t\t);\n\t\t\t\t\t\taddExpression(\n\t\t\t\t\t\t\tparser,\n\t\t\t\t\t\t\t\"clearImmediate\",\n\t\t\t\t\t\t\t\"timers\",\n\t\t\t\t\t\t\tsetImmediateType,\n\t\t\t\t\t\t\t\".clearImmediate\"\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\tnormalModuleFactory.hooks.parser\n\t\t\t\t\t.for(\"javascript/auto\")\n\t\t\t\t\t.tap(\"NodeSourcePlugin\", handler);\n\t\t\t\tnormalModuleFactory.hooks.parser\n\t\t\t\t\t.for(\"javascript/dynamic\")\n\t\t\t\t\t.tap(\"NodeSourcePlugin\", handler);\n\t\t\t}\n\t\t);\n\t\tcompiler.hooks.afterResolvers.tap(\"NodeSourcePlugin\", compiler => {\n\t\t\tfor (const lib of Object.keys(nodeLibsBrowser)) {\n\t\t\t\tif (options[lib] !== false) {\n\t\t\t\t\tcompiler.resolverFactory.hooks.resolver\n\t\t\t\t\t\t.for(\"normal\")\n\t\t\t\t\t\t.tap(\"NodeSourcePlugin\", resolver => {\n\t\t\t\t\t\t\tnew AliasPlugin(\n\t\t\t\t\t\t\t\t\"described-resolve\",\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tname: lib,\n\t\t\t\t\t\t\t\t\tonlyModule: true,\n\t\t\t\t\t\t\t\t\talias: getPathToModule(lib, options[lib])\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\"resolve\"\n\t\t\t\t\t\t\t).apply(resolver);\n\t\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n};\n"]},"metadata":{},"sourceType":"script"}