{"ast":null,"code":"'use strict';\n\nvar path = require('path');\n\nvar _require = require('url'),\n    parse = _require.parse;\n\nvar querystring = require('querystring');\n\nvar parseRange = require('range-parser');\n\nvar HASH_REGEXP = /[0-9a-f]{10,}/; // support for multi-compiler configuration\n// see: https://github.com/webpack/webpack-dev-server/issues/641\n\nfunction getPaths(publicPath, compiler, url) {\n  var compilers = compiler && compiler.compilers;\n\n  if (Array.isArray(compilers)) {\n    var compilerPublicPath; // the path portion of compilerPublicPath\n\n    var compilerPublicPathBase;\n\n    for (var i = 0; i < compilers.length; i++) {\n      compilerPublicPath = compilers[i].options && compilers[i].options.output && compilers[i].options.output.publicPath;\n\n      if (compilerPublicPath) {\n        compilerPublicPathBase = compilerPublicPath.indexOf('/') === 0 ? compilerPublicPath // eslint-disable-next-line\n        : // handle the case where compilerPublicPath is a URL with hostname\n        parse(compilerPublicPath).pathname; // check the url vs the path part of the compilerPublicPath\n\n        if (url.indexOf(compilerPublicPathBase) === 0) {\n          return {\n            publicPath: compilerPublicPath,\n            outputPath: compilers[i].outputPath\n          };\n        }\n      }\n    }\n  }\n\n  return {\n    publicPath: publicPath,\n    outputPath: compiler.outputPath\n  };\n} // eslint-disable-next-line consistent-return\n\n\nfunction ready(context, fn, req) {\n  if (context.state) {\n    return fn(context.webpackStats);\n  }\n\n  context.log.info(\"wait until bundle finished: \".concat(req.url || fn.name));\n  context.callbacks.push(fn);\n}\n\nmodule.exports = {\n  getFilenameFromUrl: function getFilenameFromUrl(pubPath, compiler, url) {\n    var _getPaths = getPaths(pubPath, compiler, url),\n        outputPath = _getPaths.outputPath,\n        publicPath = _getPaths.publicPath; // localPrefix is the folder our bundle should be in\n\n\n    var localPrefix = parse(publicPath || '/', false, true);\n    var urlObject = parse(url);\n    var filename;\n    var hostNameIsTheSame = localPrefix.hostname === urlObject.hostname; // publicPath has the hostname that is not the same as request url's, should fail\n\n    if (localPrefix.hostname !== null && urlObject.hostname !== null && !hostNameIsTheSame) {\n      return false;\n    } // publicPath is not in url, so it should fail\n\n\n    if (publicPath && hostNameIsTheSame && url.indexOf(publicPath) !== 0) {\n      return false;\n    } // strip localPrefix from the start of url\n\n\n    if (urlObject.pathname.indexOf(localPrefix.pathname) === 0) {\n      filename = urlObject.pathname.substr(localPrefix.pathname.length);\n    }\n\n    if (!urlObject.hostname && localPrefix.hostname && url.indexOf(localPrefix.path) !== 0) {\n      return false;\n    }\n\n    var uri = outputPath;\n    /* istanbul ignore if */\n\n    if (process.platform === 'win32') {\n      // Path Handling for Microsoft Windows\n      if (filename) {\n        uri = path.posix.join(outputPath || '', querystring.unescape(filename));\n\n        if (!path.win32.isAbsolute(uri)) {\n          uri = \"/\".concat(uri);\n        }\n      }\n\n      return uri;\n    } // Path Handling for all other operating systems\n\n\n    if (filename) {\n      uri = path.posix.join(outputPath || '', filename);\n\n      if (!path.posix.isAbsolute(uri)) {\n        uri = \"/\".concat(uri);\n      }\n    } // if no matches, use outputPath as filename\n\n\n    return querystring.unescape(uri);\n  },\n  handleRangeHeaders: function handleRangeHeaders(content, req, res) {\n    // assumes express API. For other servers, need to add logic to access\n    // alternative header APIs\n    res.setHeader('Accept-Ranges', 'bytes');\n\n    if (req.headers.range) {\n      var ranges = parseRange(content.length, req.headers.range); // unsatisfiable\n\n      if (ranges === -1) {\n        res.setHeader('Content-Range', \"bytes */\".concat(content.length)); // eslint-disable-next-line no-param-reassign\n\n        res.statusCode = 416;\n      } // valid (syntactically invalid/multiple ranges are treated as a\n      // regular response)\n\n\n      if (ranges !== -2 && ranges.length === 1) {\n        var _content = content,\n            length = _content.length; // Content-Range\n        // eslint-disable-next-line no-param-reassign\n\n        res.statusCode = 206;\n        res.setHeader('Content-Range', \"bytes \".concat(ranges[0].start, \"-\").concat(ranges[0].end, \"/\").concat(length)); // eslint-disable-next-line no-param-reassign\n\n        content = content.slice(ranges[0].start, ranges[0].end + 1);\n      }\n    }\n\n    return content;\n  },\n  handleRequest: function handleRequest(context, filename, processRequest, req) {\n    // in lazy mode, rebuild on bundle request\n    if (context.options.lazy && (!context.options.filename || context.options.filename.test(filename))) {\n      context.rebuild();\n    }\n\n    if (HASH_REGEXP.test(filename)) {\n      try {\n        if (context.fs.statSync(filename).isFile()) {\n          processRequest();\n          return;\n        }\n      } catch (e) {// eslint-disable-line\n      }\n    }\n\n    ready(context, processRequest, req);\n  },\n  noop: function noop() {},\n  ready: ready\n};","map":{"version":3,"sources":["/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/webpack-dev-server/node_modules/webpack-dev-middleware/lib/util.js"],"names":["path","require","parse","querystring","parseRange","HASH_REGEXP","getPaths","publicPath","compiler","url","compilers","Array","isArray","compilerPublicPath","compilerPublicPathBase","i","length","options","output","indexOf","pathname","outputPath","ready","context","fn","req","state","webpackStats","log","info","name","callbacks","push","module","exports","getFilenameFromUrl","pubPath","localPrefix","urlObject","filename","hostNameIsTheSame","hostname","substr","uri","process","platform","posix","join","unescape","win32","isAbsolute","handleRangeHeaders","content","res","setHeader","headers","range","ranges","statusCode","start","end","slice","handleRequest","processRequest","lazy","test","rebuild","fs","statSync","isFile","e","noop"],"mappings":"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","sourcesContent":["'use strict';\n\nconst path = require('path');\nconst { parse } = require('url');\nconst querystring = require('querystring');\n\nconst parseRange = require('range-parser');\n\nconst HASH_REGEXP = /[0-9a-f]{10,}/;\n\n// support for multi-compiler configuration\n// see: https://github.com/webpack/webpack-dev-server/issues/641\nfunction getPaths(publicPath, compiler, url) {\n  const compilers = compiler && compiler.compilers;\n  if (Array.isArray(compilers)) {\n    let compilerPublicPath;\n\n    // the path portion of compilerPublicPath\n    let compilerPublicPathBase;\n\n    for (let i = 0; i < compilers.length; i++) {\n      compilerPublicPath =\n        compilers[i].options &&\n        compilers[i].options.output &&\n        compilers[i].options.output.publicPath;\n\n      if (compilerPublicPath) {\n        compilerPublicPathBase =\n          compilerPublicPath.indexOf('/') === 0\n            ? compilerPublicPath // eslint-disable-next-line\n            : // handle the case where compilerPublicPath is a URL with hostname\n              parse(compilerPublicPath).pathname;\n\n        // check the url vs the path part of the compilerPublicPath\n        if (url.indexOf(compilerPublicPathBase) === 0) {\n          return {\n            publicPath: compilerPublicPath,\n            outputPath: compilers[i].outputPath,\n          };\n        }\n      }\n    }\n  }\n  return {\n    publicPath,\n    outputPath: compiler.outputPath,\n  };\n}\n\n// eslint-disable-next-line consistent-return\nfunction ready(context, fn, req) {\n  if (context.state) {\n    return fn(context.webpackStats);\n  }\n\n  context.log.info(`wait until bundle finished: ${req.url || fn.name}`);\n  context.callbacks.push(fn);\n}\n\nmodule.exports = {\n  getFilenameFromUrl(pubPath, compiler, url) {\n    const { outputPath, publicPath } = getPaths(pubPath, compiler, url);\n    // localPrefix is the folder our bundle should be in\n    const localPrefix = parse(publicPath || '/', false, true);\n    const urlObject = parse(url);\n    let filename;\n\n    const hostNameIsTheSame = localPrefix.hostname === urlObject.hostname;\n\n    // publicPath has the hostname that is not the same as request url's, should fail\n    if (\n      localPrefix.hostname !== null &&\n      urlObject.hostname !== null &&\n      !hostNameIsTheSame\n    ) {\n      return false;\n    }\n\n    // publicPath is not in url, so it should fail\n    if (publicPath && hostNameIsTheSame && url.indexOf(publicPath) !== 0) {\n      return false;\n    }\n\n    // strip localPrefix from the start of url\n    if (urlObject.pathname.indexOf(localPrefix.pathname) === 0) {\n      filename = urlObject.pathname.substr(localPrefix.pathname.length);\n    }\n\n    if (\n      !urlObject.hostname &&\n      localPrefix.hostname &&\n      url.indexOf(localPrefix.path) !== 0\n    ) {\n      return false;\n    }\n\n    let uri = outputPath;\n\n    /* istanbul ignore if */\n    if (process.platform === 'win32') {\n      // Path Handling for Microsoft Windows\n      if (filename) {\n        uri = path.posix.join(outputPath || '', querystring.unescape(filename));\n\n        if (!path.win32.isAbsolute(uri)) {\n          uri = `/${uri}`;\n        }\n      }\n\n      return uri;\n    }\n\n    // Path Handling for all other operating systems\n    if (filename) {\n      uri = path.posix.join(outputPath || '', filename);\n\n      if (!path.posix.isAbsolute(uri)) {\n        uri = `/${uri}`;\n      }\n    }\n\n    // if no matches, use outputPath as filename\n    return querystring.unescape(uri);\n  },\n\n  handleRangeHeaders(content, req, res) {\n    // assumes express API. For other servers, need to add logic to access\n    // alternative header APIs\n    res.setHeader('Accept-Ranges', 'bytes');\n\n    if (req.headers.range) {\n      const ranges = parseRange(content.length, req.headers.range);\n\n      // unsatisfiable\n      if (ranges === -1) {\n        res.setHeader('Content-Range', `bytes */${content.length}`);\n        // eslint-disable-next-line no-param-reassign\n        res.statusCode = 416;\n      }\n\n      // valid (syntactically invalid/multiple ranges are treated as a\n      // regular response)\n      if (ranges !== -2 && ranges.length === 1) {\n        const { length } = content;\n\n        // Content-Range\n        // eslint-disable-next-line no-param-reassign\n        res.statusCode = 206;\n        res.setHeader(\n          'Content-Range',\n          `bytes ${ranges[0].start}-${ranges[0].end}/${length}`\n        );\n\n        // eslint-disable-next-line no-param-reassign\n        content = content.slice(ranges[0].start, ranges[0].end + 1);\n      }\n    }\n\n    return content;\n  },\n\n  handleRequest(context, filename, processRequest, req) {\n    // in lazy mode, rebuild on bundle request\n    if (\n      context.options.lazy &&\n      (!context.options.filename || context.options.filename.test(filename))\n    ) {\n      context.rebuild();\n    }\n\n    if (HASH_REGEXP.test(filename)) {\n      try {\n        if (context.fs.statSync(filename).isFile()) {\n          processRequest();\n          return;\n        }\n      } catch (e) {\n        // eslint-disable-line\n      }\n    }\n\n    ready(context, processRequest, req);\n  },\n\n  noop: () => {},\n\n  ready,\n};\n"]},"metadata":{},"sourceType":"script"}