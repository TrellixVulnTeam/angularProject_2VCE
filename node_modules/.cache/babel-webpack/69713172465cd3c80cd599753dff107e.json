{"ast":null,"code":"var _createForOfIteratorHelper = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _classCallCheck = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/createClass\");\n\n/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n/** @typedef {import(\"./Module\")} Module */\n\n/** @typedef {import(\"./Chunk\")} Chunk */\n\n/** @typedef {import(\"./ModuleTemplate\")} ModuleTemplate */\n\n/** @typedef {import(\"webpack-sources\").ConcatSource} ConcatSource */\nvar _require = require(\"webpack-sources\"),\n    ConcatSource = _require.ConcatSource;\n\nvar HotUpdateChunk = require(\"./HotUpdateChunk\");\n\nvar START_LOWERCASE_ALPHABET_CODE = \"a\".charCodeAt(0);\nvar START_UPPERCASE_ALPHABET_CODE = \"A\".charCodeAt(0);\nvar DELTA_A_TO_Z = \"z\".charCodeAt(0) - START_LOWERCASE_ALPHABET_CODE + 1;\nvar FUNCTION_CONTENT_REGEX = /^function\\s?\\(\\)\\s?\\{\\r?\\n?|\\r?\\n?\\}$/g;\nvar INDENT_MULTILINE_REGEX = /^\\t/gm;\nvar LINE_SEPARATOR_REGEX = /\\r?\\n/g;\nvar IDENTIFIER_NAME_REPLACE_REGEX = /^([^a-zA-Z$_])/;\nvar IDENTIFIER_ALPHA_NUMERIC_NAME_REPLACE_REGEX = /[^a-zA-Z0-9$]+/g;\nvar COMMENT_END_REGEX = /\\*\\//g;\nvar PATH_NAME_NORMALIZE_REPLACE_REGEX = /[^a-zA-Z0-9_!§$()=\\-^°]+/g;\nvar MATCH_PADDED_HYPHENS_REPLACE_REGEX = /^-|-$/g;\n/** @typedef {import(\"webpack-sources\").Source} Source */\n\n/**\n * @typedef {Object} HasId\n * @property {number | string} id\n */\n\n/**\n * @typedef {function(Module, number): boolean} ModuleFilterPredicate\n */\n\n/**\n * @param {HasId} a first id object to be sorted\n * @param {HasId} b second id object to be sorted against\n * @returns {-1|0|1} the sort value\n */\n\nvar stringifyIdSortPredicate = function stringifyIdSortPredicate(a, b) {\n  var aId = a.id + \"\";\n  var bId = b.id + \"\";\n  if (aId < bId) return -1;\n  if (aId > bId) return 1;\n  return 0;\n};\n\nvar Template = /*#__PURE__*/function () {\n  \"use strict\";\n\n  function Template() {\n    _classCallCheck(this, Template);\n  }\n\n  _createClass(Template, null, [{\n    key: \"getFunctionContent\",\n    value:\n    /**\n     *\n     * @param {Function} fn a runtime function (.runtime.js) \"template\"\n     * @returns {string} the updated and normalized function string\n     */\n    function getFunctionContent(fn) {\n      return fn.toString().replace(FUNCTION_CONTENT_REGEX, \"\").replace(INDENT_MULTILINE_REGEX, \"\").replace(LINE_SEPARATOR_REGEX, \"\\n\");\n    }\n    /**\n     * @param {string} str the string converted to identifier\n     * @returns {string} created identifier\n     */\n\n  }, {\n    key: \"toIdentifier\",\n    value: function toIdentifier(str) {\n      if (typeof str !== \"string\") return \"\";\n      return str.replace(IDENTIFIER_NAME_REPLACE_REGEX, \"_$1\").replace(IDENTIFIER_ALPHA_NUMERIC_NAME_REPLACE_REGEX, \"_\");\n    }\n    /**\n     *\n     * @param {string} str string to be converted to commented in bundle code\n     * @returns {string} returns a commented version of string\n     */\n\n  }, {\n    key: \"toComment\",\n    value: function toComment(str) {\n      if (!str) return \"\";\n      return \"/*! \".concat(str.replace(COMMENT_END_REGEX, \"* /\"), \" */\");\n    }\n    /**\n     *\n     * @param {string} str string to be converted to \"normal comment\"\n     * @returns {string} returns a commented version of string\n     */\n\n  }, {\n    key: \"toNormalComment\",\n    value: function toNormalComment(str) {\n      if (!str) return \"\";\n      return \"/* \".concat(str.replace(COMMENT_END_REGEX, \"* /\"), \" */\");\n    }\n    /**\n     * @param {string} str string path to be normalized\n     * @returns {string} normalized bundle-safe path\n     */\n\n  }, {\n    key: \"toPath\",\n    value: function toPath(str) {\n      if (typeof str !== \"string\") return \"\";\n      return str.replace(PATH_NAME_NORMALIZE_REPLACE_REGEX, \"-\").replace(MATCH_PADDED_HYPHENS_REPLACE_REGEX, \"\");\n    } // map number to a single character a-z, A-Z or <_ + number> if number is too big\n\n    /**\n     *\n     * @param {number} n number to convert to ident\n     * @returns {string} returns single character ident\n     */\n\n  }, {\n    key: \"numberToIdentifer\",\n    value: function numberToIdentifer(n) {\n      // lower case\n      if (n < DELTA_A_TO_Z) {\n        return String.fromCharCode(START_LOWERCASE_ALPHABET_CODE + n);\n      } // upper case\n\n\n      if (n < DELTA_A_TO_Z * 2) {\n        return String.fromCharCode(START_UPPERCASE_ALPHABET_CODE + n - DELTA_A_TO_Z);\n      } // use multiple letters\n\n\n      return Template.numberToIdentifer(n % (2 * DELTA_A_TO_Z)) + Template.numberToIdentifer(Math.floor(n / (2 * DELTA_A_TO_Z)));\n    }\n    /**\n     *\n     * @param {string | string[]} s string to convert to identity\n     * @returns {string} converted identity\n     */\n\n  }, {\n    key: \"indent\",\n    value: function indent(s) {\n      if (Array.isArray(s)) {\n        return s.map(Template.indent).join(\"\\n\");\n      } else {\n        var str = s.trimRight();\n        if (!str) return \"\";\n        var ind = str[0] === \"\\n\" ? \"\" : \"\\t\";\n        return ind + str.replace(/\\n([^\\n])/g, \"\\n\\t$1\");\n      }\n    }\n    /**\n     *\n     * @param {string|string[]} s string to create prefix for\n     * @param {string} prefix prefix to compose\n     * @returns {string} returns new prefix string\n     */\n\n  }, {\n    key: \"prefix\",\n    value: function prefix(s, _prefix) {\n      var str = Template.asString(s).trim();\n      if (!str) return \"\";\n      var ind = str[0] === \"\\n\" ? \"\" : _prefix;\n      return ind + str.replace(/\\n([^\\n])/g, \"\\n\" + _prefix + \"$1\");\n    }\n    /**\n     *\n     * @param {string|string[]} str string or string collection\n     * @returns {string} returns a single string from array\n     */\n\n  }, {\n    key: \"asString\",\n    value: function asString(str) {\n      if (Array.isArray(str)) {\n        return str.join(\"\\n\");\n      }\n\n      return str;\n    }\n    /**\n     * @typedef {Object} WithId\n     * @property {string|number} id\n     */\n\n    /**\n     * @param {WithId[]} modules a collection of modules to get array bounds for\n     * @returns {[number, number] | false} returns the upper and lower array bounds\n     * or false if not every module has a number based id\n     */\n\n  }, {\n    key: \"getModulesArrayBounds\",\n    value: function getModulesArrayBounds(modules) {\n      var maxId = -Infinity;\n      var minId = Infinity;\n\n      var _iterator = _createForOfIteratorHelper(modules),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var _module = _step.value;\n          if (typeof _module.id !== \"number\") return false;\n          if (maxId < _module.id) maxId =\n          /** @type {number} */\n          _module.id;\n          if (minId > _module.id) minId =\n          /** @type {number} */\n          _module.id;\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      if (minId < 16 + (\"\" + minId).length) {\n        // add minId x ',' instead of 'Array(minId).concat(…)'\n        minId = 0;\n      }\n\n      var objectOverhead = modules.map(function (module) {\n        return (module.id + \"\").length + 2;\n      }).reduce(function (a, b) {\n        return a + b;\n      }, -1);\n      var arrayOverhead = minId === 0 ? maxId : 16 + (\"\" + minId).length + maxId;\n      return arrayOverhead < objectOverhead ? [minId, maxId] : false;\n    }\n    /**\n     * @param {Chunk} chunk chunk whose modules will be rendered\n     * @param {ModuleFilterPredicate} filterFn function used to filter modules from chunk to render\n     * @param {ModuleTemplate} moduleTemplate ModuleTemplate instance used to render modules\n     * @param {TODO | TODO[]} dependencyTemplates templates needed for each module to render dependencies\n     * @param {string=} prefix applying prefix strings\n     * @returns {ConcatSource} rendered chunk modules in a Source object\n     */\n\n  }, {\n    key: \"renderChunkModules\",\n    value: function renderChunkModules(chunk, filterFn, moduleTemplate, dependencyTemplates) {\n      var prefix = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : \"\";\n      var source = new ConcatSource();\n      var modules = chunk.getModules().filter(filterFn);\n      var removedModules;\n\n      if (chunk instanceof HotUpdateChunk) {\n        removedModules = chunk.removedModules;\n      }\n\n      if (modules.length === 0 && (!removedModules || removedModules.length === 0)) {\n        source.add(\"[]\");\n        return source;\n      }\n      /** @type {{id: string|number, source: Source|string}[]} */\n\n\n      var allModules = modules.map(function (module) {\n        return {\n          id: module.id,\n          source: moduleTemplate.render(module, dependencyTemplates, {\n            chunk: chunk\n          })\n        };\n      });\n\n      if (removedModules && removedModules.length > 0) {\n        var _iterator2 = _createForOfIteratorHelper(removedModules),\n            _step2;\n\n        try {\n          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n            var id = _step2.value;\n            allModules.push({\n              id: id,\n              source: \"false\"\n            });\n          }\n        } catch (err) {\n          _iterator2.e(err);\n        } finally {\n          _iterator2.f();\n        }\n      }\n\n      var bounds = Template.getModulesArrayBounds(allModules);\n\n      if (bounds) {\n        // Render a spare array\n        var minId = bounds[0];\n        var maxId = bounds[1];\n\n        if (minId !== 0) {\n          source.add(\"Array(\".concat(minId, \").concat(\"));\n        }\n\n        source.add(\"[\\n\");\n        /** @type {Map<string|number, {id: string|number, source: Source|string}>} */\n\n        var _modules = new Map();\n\n        var _iterator3 = _createForOfIteratorHelper(allModules),\n            _step3;\n\n        try {\n          for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n            var _module3 = _step3.value;\n\n            _modules.set(_module3.id, _module3);\n          }\n        } catch (err) {\n          _iterator3.e(err);\n        } finally {\n          _iterator3.f();\n        }\n\n        for (var idx = minId; idx <= maxId; idx++) {\n          var _module2 = _modules.get(idx);\n\n          if (idx !== minId) {\n            source.add(\",\\n\");\n          }\n\n          source.add(\"/* \".concat(idx, \" */\"));\n\n          if (_module2) {\n            source.add(\"\\n\");\n            source.add(_module2.source);\n          }\n        }\n\n        source.add(\"\\n\" + prefix + \"]\");\n\n        if (minId !== 0) {\n          source.add(\")\");\n        }\n      } else {\n        // Render an object\n        source.add(\"{\\n\");\n        allModules.sort(stringifyIdSortPredicate).forEach(function (module, idx) {\n          if (idx !== 0) {\n            source.add(\",\\n\");\n          }\n\n          source.add(\"\\n/***/ \".concat(JSON.stringify(module.id), \":\\n\"));\n          source.add(module.source);\n        });\n        source.add(\"\\n\\n\".concat(prefix, \"}\"));\n      }\n\n      return source;\n    }\n  }]);\n\n  return Template;\n}();\n\nmodule.exports = Template;","map":{"version":3,"sources":["/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/webpack/lib/Template.js"],"names":["require","ConcatSource","HotUpdateChunk","START_LOWERCASE_ALPHABET_CODE","charCodeAt","START_UPPERCASE_ALPHABET_CODE","DELTA_A_TO_Z","FUNCTION_CONTENT_REGEX","INDENT_MULTILINE_REGEX","LINE_SEPARATOR_REGEX","IDENTIFIER_NAME_REPLACE_REGEX","IDENTIFIER_ALPHA_NUMERIC_NAME_REPLACE_REGEX","COMMENT_END_REGEX","PATH_NAME_NORMALIZE_REPLACE_REGEX","MATCH_PADDED_HYPHENS_REPLACE_REGEX","stringifyIdSortPredicate","a","b","aId","id","bId","Template","fn","toString","replace","str","n","String","fromCharCode","numberToIdentifer","Math","floor","s","Array","isArray","map","indent","join","trimRight","ind","prefix","asString","trim","modules","maxId","Infinity","minId","module","length","objectOverhead","reduce","arrayOverhead","chunk","filterFn","moduleTemplate","dependencyTemplates","source","getModules","filter","removedModules","add","allModules","render","push","bounds","getModulesArrayBounds","Map","set","idx","get","sort","forEach","JSON","stringify","exports"],"mappings":"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","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n/** @typedef {import(\"./Module\")} Module */\n/** @typedef {import(\"./Chunk\")} Chunk */\n/** @typedef {import(\"./ModuleTemplate\")} ModuleTemplate */\n/** @typedef {import(\"webpack-sources\").ConcatSource} ConcatSource */\n\nconst { ConcatSource } = require(\"webpack-sources\");\nconst HotUpdateChunk = require(\"./HotUpdateChunk\");\n\nconst START_LOWERCASE_ALPHABET_CODE = \"a\".charCodeAt(0);\nconst START_UPPERCASE_ALPHABET_CODE = \"A\".charCodeAt(0);\nconst DELTA_A_TO_Z = \"z\".charCodeAt(0) - START_LOWERCASE_ALPHABET_CODE + 1;\nconst FUNCTION_CONTENT_REGEX = /^function\\s?\\(\\)\\s?\\{\\r?\\n?|\\r?\\n?\\}$/g;\nconst INDENT_MULTILINE_REGEX = /^\\t/gm;\nconst LINE_SEPARATOR_REGEX = /\\r?\\n/g;\nconst IDENTIFIER_NAME_REPLACE_REGEX = /^([^a-zA-Z$_])/;\nconst IDENTIFIER_ALPHA_NUMERIC_NAME_REPLACE_REGEX = /[^a-zA-Z0-9$]+/g;\nconst COMMENT_END_REGEX = /\\*\\//g;\nconst PATH_NAME_NORMALIZE_REPLACE_REGEX = /[^a-zA-Z0-9_!§$()=\\-^°]+/g;\nconst MATCH_PADDED_HYPHENS_REPLACE_REGEX = /^-|-$/g;\n\n/** @typedef {import(\"webpack-sources\").Source} Source */\n\n/**\n * @typedef {Object} HasId\n * @property {number | string} id\n */\n\n/**\n * @typedef {function(Module, number): boolean} ModuleFilterPredicate\n */\n\n/**\n * @param {HasId} a first id object to be sorted\n * @param {HasId} b second id object to be sorted against\n * @returns {-1|0|1} the sort value\n */\nconst stringifyIdSortPredicate = (a, b) => {\n\tconst aId = a.id + \"\";\n\tconst bId = b.id + \"\";\n\tif (aId < bId) return -1;\n\tif (aId > bId) return 1;\n\treturn 0;\n};\n\nclass Template {\n\t/**\n\t *\n\t * @param {Function} fn a runtime function (.runtime.js) \"template\"\n\t * @returns {string} the updated and normalized function string\n\t */\n\tstatic getFunctionContent(fn) {\n\t\treturn fn\n\t\t\t.toString()\n\t\t\t.replace(FUNCTION_CONTENT_REGEX, \"\")\n\t\t\t.replace(INDENT_MULTILINE_REGEX, \"\")\n\t\t\t.replace(LINE_SEPARATOR_REGEX, \"\\n\");\n\t}\n\n\t/**\n\t * @param {string} str the string converted to identifier\n\t * @returns {string} created identifier\n\t */\n\tstatic toIdentifier(str) {\n\t\tif (typeof str !== \"string\") return \"\";\n\t\treturn str\n\t\t\t.replace(IDENTIFIER_NAME_REPLACE_REGEX, \"_$1\")\n\t\t\t.replace(IDENTIFIER_ALPHA_NUMERIC_NAME_REPLACE_REGEX, \"_\");\n\t}\n\t/**\n\t *\n\t * @param {string} str string to be converted to commented in bundle code\n\t * @returns {string} returns a commented version of string\n\t */\n\tstatic toComment(str) {\n\t\tif (!str) return \"\";\n\t\treturn `/*! ${str.replace(COMMENT_END_REGEX, \"* /\")} */`;\n\t}\n\n\t/**\n\t *\n\t * @param {string} str string to be converted to \"normal comment\"\n\t * @returns {string} returns a commented version of string\n\t */\n\tstatic toNormalComment(str) {\n\t\tif (!str) return \"\";\n\t\treturn `/* ${str.replace(COMMENT_END_REGEX, \"* /\")} */`;\n\t}\n\n\t/**\n\t * @param {string} str string path to be normalized\n\t * @returns {string} normalized bundle-safe path\n\t */\n\tstatic toPath(str) {\n\t\tif (typeof str !== \"string\") return \"\";\n\t\treturn str\n\t\t\t.replace(PATH_NAME_NORMALIZE_REPLACE_REGEX, \"-\")\n\t\t\t.replace(MATCH_PADDED_HYPHENS_REPLACE_REGEX, \"\");\n\t}\n\n\t// map number to a single character a-z, A-Z or <_ + number> if number is too big\n\t/**\n\t *\n\t * @param {number} n number to convert to ident\n\t * @returns {string} returns single character ident\n\t */\n\tstatic numberToIdentifer(n) {\n\t\t// lower case\n\t\tif (n < DELTA_A_TO_Z) {\n\t\t\treturn String.fromCharCode(START_LOWERCASE_ALPHABET_CODE + n);\n\t\t}\n\n\t\t// upper case\n\t\tif (n < DELTA_A_TO_Z * 2) {\n\t\t\treturn String.fromCharCode(\n\t\t\t\tSTART_UPPERCASE_ALPHABET_CODE + n - DELTA_A_TO_Z\n\t\t\t);\n\t\t}\n\n\t\t// use multiple letters\n\t\treturn (\n\t\t\tTemplate.numberToIdentifer(n % (2 * DELTA_A_TO_Z)) +\n\t\t\tTemplate.numberToIdentifer(Math.floor(n / (2 * DELTA_A_TO_Z)))\n\t\t);\n\t}\n\n\t/**\n\t *\n\t * @param {string | string[]} s string to convert to identity\n\t * @returns {string} converted identity\n\t */\n\tstatic indent(s) {\n\t\tif (Array.isArray(s)) {\n\t\t\treturn s.map(Template.indent).join(\"\\n\");\n\t\t} else {\n\t\t\tconst str = s.trimRight();\n\t\t\tif (!str) return \"\";\n\t\t\tconst ind = str[0] === \"\\n\" ? \"\" : \"\\t\";\n\t\t\treturn ind + str.replace(/\\n([^\\n])/g, \"\\n\\t$1\");\n\t\t}\n\t}\n\n\t/**\n\t *\n\t * @param {string|string[]} s string to create prefix for\n\t * @param {string} prefix prefix to compose\n\t * @returns {string} returns new prefix string\n\t */\n\tstatic prefix(s, prefix) {\n\t\tconst str = Template.asString(s).trim();\n\t\tif (!str) return \"\";\n\t\tconst ind = str[0] === \"\\n\" ? \"\" : prefix;\n\t\treturn ind + str.replace(/\\n([^\\n])/g, \"\\n\" + prefix + \"$1\");\n\t}\n\n\t/**\n\t *\n\t * @param {string|string[]} str string or string collection\n\t * @returns {string} returns a single string from array\n\t */\n\tstatic asString(str) {\n\t\tif (Array.isArray(str)) {\n\t\t\treturn str.join(\"\\n\");\n\t\t}\n\t\treturn str;\n\t}\n\n\t/**\n\t * @typedef {Object} WithId\n\t * @property {string|number} id\n\t */\n\n\t/**\n\t * @param {WithId[]} modules a collection of modules to get array bounds for\n\t * @returns {[number, number] | false} returns the upper and lower array bounds\n\t * or false if not every module has a number based id\n\t */\n\tstatic getModulesArrayBounds(modules) {\n\t\tlet maxId = -Infinity;\n\t\tlet minId = Infinity;\n\t\tfor (const module of modules) {\n\t\t\tif (typeof module.id !== \"number\") return false;\n\t\t\tif (maxId < module.id) maxId = /** @type {number} */ (module.id);\n\t\t\tif (minId > module.id) minId = /** @type {number} */ (module.id);\n\t\t}\n\t\tif (minId < 16 + (\"\" + minId).length) {\n\t\t\t// add minId x ',' instead of 'Array(minId).concat(…)'\n\t\t\tminId = 0;\n\t\t}\n\t\tconst objectOverhead = modules\n\t\t\t.map(module => (module.id + \"\").length + 2)\n\t\t\t.reduce((a, b) => a + b, -1);\n\t\tconst arrayOverhead =\n\t\t\tminId === 0 ? maxId : 16 + (\"\" + minId).length + maxId;\n\t\treturn arrayOverhead < objectOverhead ? [minId, maxId] : false;\n\t}\n\n\t/**\n\t * @param {Chunk} chunk chunk whose modules will be rendered\n\t * @param {ModuleFilterPredicate} filterFn function used to filter modules from chunk to render\n\t * @param {ModuleTemplate} moduleTemplate ModuleTemplate instance used to render modules\n\t * @param {TODO | TODO[]} dependencyTemplates templates needed for each module to render dependencies\n\t * @param {string=} prefix applying prefix strings\n\t * @returns {ConcatSource} rendered chunk modules in a Source object\n\t */\n\tstatic renderChunkModules(\n\t\tchunk,\n\t\tfilterFn,\n\t\tmoduleTemplate,\n\t\tdependencyTemplates,\n\t\tprefix = \"\"\n\t) {\n\t\tconst source = new ConcatSource();\n\t\tconst modules = chunk.getModules().filter(filterFn);\n\t\tlet removedModules;\n\t\tif (chunk instanceof HotUpdateChunk) {\n\t\t\tremovedModules = chunk.removedModules;\n\t\t}\n\t\tif (\n\t\t\tmodules.length === 0 &&\n\t\t\t(!removedModules || removedModules.length === 0)\n\t\t) {\n\t\t\tsource.add(\"[]\");\n\t\t\treturn source;\n\t\t}\n\t\t/** @type {{id: string|number, source: Source|string}[]} */\n\t\tconst allModules = modules.map(module => {\n\t\t\treturn {\n\t\t\t\tid: module.id,\n\t\t\t\tsource: moduleTemplate.render(module, dependencyTemplates, {\n\t\t\t\t\tchunk\n\t\t\t\t})\n\t\t\t};\n\t\t});\n\t\tif (removedModules && removedModules.length > 0) {\n\t\t\tfor (const id of removedModules) {\n\t\t\t\tallModules.push({\n\t\t\t\t\tid,\n\t\t\t\t\tsource: \"false\"\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t\tconst bounds = Template.getModulesArrayBounds(allModules);\n\t\tif (bounds) {\n\t\t\t// Render a spare array\n\t\t\tconst minId = bounds[0];\n\t\t\tconst maxId = bounds[1];\n\t\t\tif (minId !== 0) {\n\t\t\t\tsource.add(`Array(${minId}).concat(`);\n\t\t\t}\n\t\t\tsource.add(\"[\\n\");\n\t\t\t/** @type {Map<string|number, {id: string|number, source: Source|string}>} */\n\t\t\tconst modules = new Map();\n\t\t\tfor (const module of allModules) {\n\t\t\t\tmodules.set(module.id, module);\n\t\t\t}\n\t\t\tfor (let idx = minId; idx <= maxId; idx++) {\n\t\t\t\tconst module = modules.get(idx);\n\t\t\t\tif (idx !== minId) {\n\t\t\t\t\tsource.add(\",\\n\");\n\t\t\t\t}\n\t\t\t\tsource.add(`/* ${idx} */`);\n\t\t\t\tif (module) {\n\t\t\t\t\tsource.add(\"\\n\");\n\t\t\t\t\tsource.add(module.source);\n\t\t\t\t}\n\t\t\t}\n\t\t\tsource.add(\"\\n\" + prefix + \"]\");\n\t\t\tif (minId !== 0) {\n\t\t\t\tsource.add(\")\");\n\t\t\t}\n\t\t} else {\n\t\t\t// Render an object\n\t\t\tsource.add(\"{\\n\");\n\t\t\tallModules.sort(stringifyIdSortPredicate).forEach((module, idx) => {\n\t\t\t\tif (idx !== 0) {\n\t\t\t\t\tsource.add(\",\\n\");\n\t\t\t\t}\n\t\t\t\tsource.add(`\\n/***/ ${JSON.stringify(module.id)}:\\n`);\n\t\t\t\tsource.add(module.source);\n\t\t\t});\n\t\t\tsource.add(`\\n\\n${prefix}}`);\n\t\t}\n\t\treturn source;\n\t}\n}\n\nmodule.exports = Template;\n"]},"metadata":{},"sourceType":"script"}