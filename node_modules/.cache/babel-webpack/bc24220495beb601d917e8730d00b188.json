{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n\t*/\n\"use strict\";\n\nvar _classCallCheck = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/createClass\");\n\nvar DllEntryPlugin = require(\"./DllEntryPlugin\");\n\nvar FlagAllModulesAsUsedPlugin = require(\"./FlagAllModulesAsUsedPlugin\");\n\nvar LibManifestPlugin = require(\"./LibManifestPlugin\");\n\nvar validateOptions = require(\"schema-utils\");\n\nvar schema = require(\"../schemas/plugins/DllPlugin.json\");\n/** @typedef {import(\"../declarations/plugins/DllPlugin\").DllPluginOptions} DllPluginOptions */\n\n\nvar DllPlugin = /*#__PURE__*/function () {\n  /**\n   * @param {DllPluginOptions} options options object\n   */\n  function DllPlugin(options) {\n    _classCallCheck(this, DllPlugin);\n\n    validateOptions(schema, options, \"Dll Plugin\");\n    this.options = options;\n  }\n\n  _createClass(DllPlugin, [{\n    key: \"apply\",\n    value: function apply(compiler) {\n      compiler.hooks.entryOption.tap(\"DllPlugin\", function (context, entry) {\n        var itemToPlugin = function itemToPlugin(item, name) {\n          if (Array.isArray(item)) {\n            return new DllEntryPlugin(context, item, name);\n          }\n\n          throw new Error(\"DllPlugin: supply an Array as entry\");\n        };\n\n        if (typeof entry === \"object\" && !Array.isArray(entry)) {\n          Object.keys(entry).forEach(function (name) {\n            itemToPlugin(entry[name], name).apply(compiler);\n          });\n        } else {\n          itemToPlugin(entry, \"main\").apply(compiler);\n        }\n\n        return true;\n      });\n      new LibManifestPlugin(this.options).apply(compiler);\n\n      if (!this.options.entryOnly) {\n        new FlagAllModulesAsUsedPlugin(\"DllPlugin\").apply(compiler);\n      }\n    }\n  }]);\n\n  return DllPlugin;\n}();\n\nmodule.exports = DllPlugin;","map":{"version":3,"sources":["/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/webpack/lib/DllPlugin.js"],"names":["DllEntryPlugin","require","FlagAllModulesAsUsedPlugin","LibManifestPlugin","validateOptions","schema","DllPlugin","options","compiler","hooks","entryOption","tap","context","entry","itemToPlugin","item","name","Array","isArray","Error","Object","keys","forEach","apply","entryOnly","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;;;;;AAEA,IAAMA,cAAc,GAAGC,OAAO,CAAC,kBAAD,CAA9B;;AACA,IAAMC,0BAA0B,GAAGD,OAAO,CAAC,8BAAD,CAA1C;;AACA,IAAME,iBAAiB,GAAGF,OAAO,CAAC,qBAAD,CAAjC;;AAEA,IAAMG,eAAe,GAAGH,OAAO,CAAC,cAAD,CAA/B;;AACA,IAAMI,MAAM,GAAGJ,OAAO,CAAC,mCAAD,CAAtB;AAEA;;;IAEMK,S;AACL;AACD;AACA;AACC,qBAAYC,OAAZ,EAAqB;AAAA;;AACpBH,IAAAA,eAAe,CAACC,MAAD,EAASE,OAAT,EAAkB,YAAlB,CAAf;AACA,SAAKA,OAAL,GAAeA,OAAf;AACA;;;;WAED,eAAMC,QAAN,EAAgB;AACfA,MAAAA,QAAQ,CAACC,KAAT,CAAeC,WAAf,CAA2BC,GAA3B,CAA+B,WAA/B,EAA4C,UAACC,OAAD,EAAUC,KAAV,EAAoB;AAC/D,YAAMC,YAAY,GAAG,SAAfA,YAAe,CAACC,IAAD,EAAOC,IAAP,EAAgB;AACpC,cAAIC,KAAK,CAACC,OAAN,CAAcH,IAAd,CAAJ,EAAyB;AACxB,mBAAO,IAAIf,cAAJ,CAAmBY,OAAnB,EAA4BG,IAA5B,EAAkCC,IAAlC,CAAP;AACA;;AACD,gBAAM,IAAIG,KAAJ,CAAU,qCAAV,CAAN;AACA,SALD;;AAMA,YAAI,OAAON,KAAP,KAAiB,QAAjB,IAA6B,CAACI,KAAK,CAACC,OAAN,CAAcL,KAAd,CAAlC,EAAwD;AACvDO,UAAAA,MAAM,CAACC,IAAP,CAAYR,KAAZ,EAAmBS,OAAnB,CAA2B,UAAAN,IAAI,EAAI;AAClCF,YAAAA,YAAY,CAACD,KAAK,CAACG,IAAD,CAAN,EAAcA,IAAd,CAAZ,CAAgCO,KAAhC,CAAsCf,QAAtC;AACA,WAFD;AAGA,SAJD,MAIO;AACNM,UAAAA,YAAY,CAACD,KAAD,EAAQ,MAAR,CAAZ,CAA4BU,KAA5B,CAAkCf,QAAlC;AACA;;AACD,eAAO,IAAP;AACA,OAfD;AAgBA,UAAIL,iBAAJ,CAAsB,KAAKI,OAA3B,EAAoCgB,KAApC,CAA0Cf,QAA1C;;AACA,UAAI,CAAC,KAAKD,OAAL,CAAaiB,SAAlB,EAA6B;AAC5B,YAAItB,0BAAJ,CAA+B,WAA/B,EAA4CqB,KAA5C,CAAkDf,QAAlD;AACA;AACD;;;;;;AAGFiB,MAAM,CAACC,OAAP,GAAiBpB,SAAjB","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n\t*/\n\"use strict\";\n\nconst DllEntryPlugin = require(\"./DllEntryPlugin\");\nconst FlagAllModulesAsUsedPlugin = require(\"./FlagAllModulesAsUsedPlugin\");\nconst LibManifestPlugin = require(\"./LibManifestPlugin\");\n\nconst validateOptions = require(\"schema-utils\");\nconst schema = require(\"../schemas/plugins/DllPlugin.json\");\n\n/** @typedef {import(\"../declarations/plugins/DllPlugin\").DllPluginOptions} DllPluginOptions */\n\nclass DllPlugin {\n\t/**\n\t * @param {DllPluginOptions} options options object\n\t */\n\tconstructor(options) {\n\t\tvalidateOptions(schema, options, \"Dll Plugin\");\n\t\tthis.options = options;\n\t}\n\n\tapply(compiler) {\n\t\tcompiler.hooks.entryOption.tap(\"DllPlugin\", (context, entry) => {\n\t\t\tconst itemToPlugin = (item, name) => {\n\t\t\t\tif (Array.isArray(item)) {\n\t\t\t\t\treturn new DllEntryPlugin(context, item, name);\n\t\t\t\t}\n\t\t\t\tthrow new Error(\"DllPlugin: supply an Array as entry\");\n\t\t\t};\n\t\t\tif (typeof entry === \"object\" && !Array.isArray(entry)) {\n\t\t\t\tObject.keys(entry).forEach(name => {\n\t\t\t\t\titemToPlugin(entry[name], name).apply(compiler);\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\titemToPlugin(entry, \"main\").apply(compiler);\n\t\t\t}\n\t\t\treturn true;\n\t\t});\n\t\tnew LibManifestPlugin(this.options).apply(compiler);\n\t\tif (!this.options.entryOnly) {\n\t\t\tnew FlagAllModulesAsUsedPlugin(\"DllPlugin\").apply(compiler);\n\t\t}\n\t}\n}\n\nmodule.exports = DllPlugin;\n"]},"metadata":{},"sourceType":"script"}