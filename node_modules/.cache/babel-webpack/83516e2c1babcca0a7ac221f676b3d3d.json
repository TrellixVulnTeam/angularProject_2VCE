{"ast":null,"code":"\"use strict\";\n\nvar _defineProperty2 = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/defineProperty\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _terser = require(\"terser\");\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nvar buildTerserOptions = function buildTerserOptions() {\n  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n      ecma = _ref.ecma,\n      warnings = _ref.warnings,\n      _ref$parse = _ref.parse,\n      parse = _ref$parse === void 0 ? {} : _ref$parse,\n      _ref$compress = _ref.compress,\n      compress = _ref$compress === void 0 ? {} : _ref$compress,\n      mangle = _ref.mangle,\n      module = _ref.module,\n      output = _ref.output,\n      toplevel = _ref.toplevel,\n      nameCache = _ref.nameCache,\n      ie8 = _ref.ie8,\n      keep_classnames = _ref.keep_classnames,\n      keep_fnames = _ref.keep_fnames,\n      safari10 = _ref.safari10;\n\n  return {\n    ecma: ecma,\n    warnings: warnings,\n    parse: _objectSpread({}, parse),\n    compress: typeof compress === 'boolean' ? compress : _objectSpread({}, compress),\n    // eslint-disable-next-line no-nested-ternary\n    mangle: mangle == null ? true : typeof mangle === 'boolean' ? mangle : _objectSpread({}, mangle),\n    output: _objectSpread({\n      shebang: true,\n      comments: false,\n      beautify: false,\n      semicolons: true\n    }, output),\n    module: module,\n    // Ignoring sourceMap from options\n    sourceMap: null,\n    toplevel: toplevel,\n    nameCache: nameCache,\n    ie8: ie8,\n    keep_classnames: keep_classnames,\n    keep_fnames: keep_fnames,\n    safari10: safari10\n  };\n};\n\nvar buildComments = function buildComments(options, terserOptions, extractedComments) {\n  var condition = {};\n  var commentsOpts = terserOptions.output.comments; // Use /^\\**!|@preserve|@license|@cc_on/i RegExp\n\n  if (typeof options.extractComments === 'boolean') {\n    condition.preserve = commentsOpts;\n    condition.extract = /^\\**!|@preserve|@license|@cc_on/i;\n  } else if (typeof options.extractComments === 'string' || options.extractComments instanceof RegExp) {\n    // extractComments specifies the extract condition and commentsOpts specifies the preserve condition\n    condition.preserve = commentsOpts;\n    condition.extract = options.extractComments;\n  } else if (typeof options.extractComments === 'function') {\n    condition.preserve = commentsOpts;\n    condition.extract = options.extractComments;\n  } else if (Object.prototype.hasOwnProperty.call(options.extractComments, 'condition')) {\n    // Extract condition is given in extractComments.condition\n    condition.preserve = commentsOpts;\n    condition.extract = options.extractComments.condition;\n  } else {\n    // No extract condition is given. Extract comments that match commentsOpts instead of preserving them\n    condition.preserve = false;\n    condition.extract = commentsOpts;\n  } // Ensure that both conditions are functions\n\n\n  ['preserve', 'extract'].forEach(function (key) {\n    var regexStr;\n    var regex;\n\n    switch (typeof condition[key]) {\n      case 'boolean':\n        condition[key] = condition[key] ? function () {\n          return true;\n        } : function () {\n          return false;\n        };\n        break;\n\n      case 'function':\n        break;\n\n      case 'string':\n        if (condition[key] === 'all') {\n          condition[key] = function () {\n            return true;\n          };\n\n          break;\n        }\n\n        if (condition[key] === 'some') {\n          condition[key] = function (astNode, comment) {\n            return comment.type === 'comment2' && /^\\**!|@preserve|@license|@cc_on/i.test(comment.value);\n          };\n\n          break;\n        }\n\n        regexStr = condition[key];\n\n        condition[key] = function (astNode, comment) {\n          return new RegExp(regexStr).test(comment.value);\n        };\n\n        break;\n\n      default:\n        regex = condition[key];\n\n        condition[key] = function (astNode, comment) {\n          return regex.test(comment.value);\n        };\n\n    }\n  }); // Redefine the comments function to extract and preserve\n  // comments according to the two conditions\n\n  return function (astNode, comment) {\n    if (condition.extract(astNode, comment)) {\n      var commentText = comment.type === 'comment2' ? \"/*\".concat(comment.value, \"*/\") : \"//\".concat(comment.value); // Don't include duplicate comments\n\n      if (!extractedComments.includes(commentText)) {\n        extractedComments.push(commentText);\n      }\n    }\n\n    return condition.preserve(astNode, comment);\n  };\n};\n\nvar minify = function minify(options) {\n  var file = options.file,\n      input = options.input,\n      inputSourceMap = options.inputSourceMap,\n      extractComments = options.extractComments,\n      minifyFn = options.minify;\n\n  if (minifyFn) {\n    return minifyFn(_defineProperty2({}, file, input), inputSourceMap);\n  } // Copy terser options\n\n\n  var terserOptions = buildTerserOptions(options.terserOptions); // Let terser generate a SourceMap\n\n  if (inputSourceMap) {\n    terserOptions.sourceMap = true;\n  }\n\n  var extractedComments = [];\n\n  if (extractComments) {\n    terserOptions.output.comments = buildComments(options, terserOptions, extractedComments);\n  }\n\n  var _ref2 = (0, _terser.minify)(_defineProperty2({}, file, input), terserOptions),\n      error = _ref2.error,\n      map = _ref2.map,\n      code = _ref2.code,\n      warnings = _ref2.warnings;\n\n  return {\n    error: error,\n    map: map,\n    code: code,\n    warnings: warnings,\n    extractedComments: extractedComments\n  };\n};\n\nvar _default = minify;\nexports.default = _default;","map":{"version":3,"sources":["/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/webpack/node_modules/terser-webpack-plugin/dist/minify.js"],"names":["Object","defineProperty","exports","value","default","_terser","require","ownKeys","object","enumerableOnly","keys","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","_defineProperty","getOwnPropertyDescriptors","defineProperties","obj","configurable","writable","buildTerserOptions","ecma","warnings","parse","compress","mangle","module","output","toplevel","nameCache","ie8","keep_classnames","keep_fnames","safari10","shebang","comments","beautify","semicolons","sourceMap","buildComments","options","terserOptions","extractedComments","condition","commentsOpts","extractComments","preserve","extract","RegExp","prototype","hasOwnProperty","call","regexStr","regex","astNode","comment","type","test","commentText","includes","minify","file","input","inputSourceMap","minifyFn","error","map","code","_default"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _terser = require(\"terser\");\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nconst buildTerserOptions = ({\n  ecma,\n  warnings,\n  parse = {},\n  compress = {},\n  mangle,\n  module,\n  output,\n  toplevel,\n  nameCache,\n  ie8,\n\n  /* eslint-disable camelcase */\n  keep_classnames,\n  keep_fnames,\n\n  /* eslint-enable camelcase */\n  safari10\n} = {}) => ({\n  ecma,\n  warnings,\n  parse: _objectSpread({}, parse),\n  compress: typeof compress === 'boolean' ? compress : _objectSpread({}, compress),\n  // eslint-disable-next-line no-nested-ternary\n  mangle: mangle == null ? true : typeof mangle === 'boolean' ? mangle : _objectSpread({}, mangle),\n  output: _objectSpread({\n    shebang: true,\n    comments: false,\n    beautify: false,\n    semicolons: true\n  }, output),\n  module,\n  // Ignoring sourceMap from options\n  sourceMap: null,\n  toplevel,\n  nameCache,\n  ie8,\n  keep_classnames,\n  keep_fnames,\n  safari10\n});\n\nconst buildComments = (options, terserOptions, extractedComments) => {\n  const condition = {};\n  const commentsOpts = terserOptions.output.comments; // Use /^\\**!|@preserve|@license|@cc_on/i RegExp\n\n  if (typeof options.extractComments === 'boolean') {\n    condition.preserve = commentsOpts;\n    condition.extract = /^\\**!|@preserve|@license|@cc_on/i;\n  } else if (typeof options.extractComments === 'string' || options.extractComments instanceof RegExp) {\n    // extractComments specifies the extract condition and commentsOpts specifies the preserve condition\n    condition.preserve = commentsOpts;\n    condition.extract = options.extractComments;\n  } else if (typeof options.extractComments === 'function') {\n    condition.preserve = commentsOpts;\n    condition.extract = options.extractComments;\n  } else if (Object.prototype.hasOwnProperty.call(options.extractComments, 'condition')) {\n    // Extract condition is given in extractComments.condition\n    condition.preserve = commentsOpts;\n    condition.extract = options.extractComments.condition;\n  } else {\n    // No extract condition is given. Extract comments that match commentsOpts instead of preserving them\n    condition.preserve = false;\n    condition.extract = commentsOpts;\n  } // Ensure that both conditions are functions\n\n\n  ['preserve', 'extract'].forEach(key => {\n    let regexStr;\n    let regex;\n\n    switch (typeof condition[key]) {\n      case 'boolean':\n        condition[key] = condition[key] ? () => true : () => false;\n        break;\n\n      case 'function':\n        break;\n\n      case 'string':\n        if (condition[key] === 'all') {\n          condition[key] = () => true;\n\n          break;\n        }\n\n        if (condition[key] === 'some') {\n          condition[key] = (astNode, comment) => {\n            return comment.type === 'comment2' && /^\\**!|@preserve|@license|@cc_on/i.test(comment.value);\n          };\n\n          break;\n        }\n\n        regexStr = condition[key];\n\n        condition[key] = (astNode, comment) => {\n          return new RegExp(regexStr).test(comment.value);\n        };\n\n        break;\n\n      default:\n        regex = condition[key];\n\n        condition[key] = (astNode, comment) => regex.test(comment.value);\n\n    }\n  }); // Redefine the comments function to extract and preserve\n  // comments according to the two conditions\n\n  return (astNode, comment) => {\n    if (condition.extract(astNode, comment)) {\n      const commentText = comment.type === 'comment2' ? `/*${comment.value}*/` : `//${comment.value}`; // Don't include duplicate comments\n\n      if (!extractedComments.includes(commentText)) {\n        extractedComments.push(commentText);\n      }\n    }\n\n    return condition.preserve(astNode, comment);\n  };\n};\n\nconst minify = options => {\n  const {\n    file,\n    input,\n    inputSourceMap,\n    extractComments,\n    minify: minifyFn\n  } = options;\n\n  if (minifyFn) {\n    return minifyFn({\n      [file]: input\n    }, inputSourceMap);\n  } // Copy terser options\n\n\n  const terserOptions = buildTerserOptions(options.terserOptions); // Let terser generate a SourceMap\n\n  if (inputSourceMap) {\n    terserOptions.sourceMap = true;\n  }\n\n  const extractedComments = [];\n\n  if (extractComments) {\n    terserOptions.output.comments = buildComments(options, terserOptions, extractedComments);\n  }\n\n  const {\n    error,\n    map,\n    code,\n    warnings\n  } = (0, _terser.minify)({\n    [file]: input\n  }, terserOptions);\n  return {\n    error,\n    map,\n    code,\n    warnings,\n    extractedComments\n  };\n};\n\nvar _default = minify;\nexports.default = _default;"]},"metadata":{},"sourceType":"script"}