{"ast":null,"code":"\"use strict\";\n\nvar _createForOfIteratorHelper = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _toConsumableArray = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/toConsumableArray\");\n\nvar _classCallCheck = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.reportDiagnostics = exports.gatherDiagnostics = exports.hasErrors = exports.CancellationToken = exports.DiagnosticMode = void 0;\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nvar compiler_cli_1 = require(\"@angular/compiler-cli\");\n\nvar ts = require(\"typescript\");\n\nvar benchmark_1 = require(\"./benchmark\");\n\nvar DiagnosticMode;\n\n(function (DiagnosticMode) {\n  DiagnosticMode[DiagnosticMode[\"Syntactic\"] = 1] = \"Syntactic\";\n  DiagnosticMode[DiagnosticMode[\"Semantic\"] = 2] = \"Semantic\";\n  DiagnosticMode[DiagnosticMode[\"All\"] = 3] = \"All\";\n  DiagnosticMode[DiagnosticMode[\"Default\"] = 3] = \"Default\";\n})(DiagnosticMode = exports.DiagnosticMode || (exports.DiagnosticMode = {}));\n\nvar CancellationToken = /*#__PURE__*/function () {\n  function CancellationToken() {\n    _classCallCheck(this, CancellationToken);\n\n    this._isCancelled = false;\n  }\n\n  _createClass(CancellationToken, [{\n    key: \"requestCancellation\",\n    value: function requestCancellation() {\n      this._isCancelled = true;\n    }\n  }, {\n    key: \"isCancellationRequested\",\n    value: function isCancellationRequested() {\n      return this._isCancelled;\n    }\n  }, {\n    key: \"throwIfCancellationRequested\",\n    value: function throwIfCancellationRequested() {\n      if (this.isCancellationRequested()) {\n        throw new ts.OperationCanceledException();\n      }\n    }\n  }]);\n\n  return CancellationToken;\n}();\n\nexports.CancellationToken = CancellationToken;\n\nfunction hasErrors(diags) {\n  return diags.some(function (d) {\n    return d.category === ts.DiagnosticCategory.Error;\n  });\n}\n\nexports.hasErrors = hasErrors;\n\nfunction gatherDiagnostics(program, jitMode, benchmarkLabel) {\n  var mode = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : DiagnosticMode.All;\n  var cancellationToken = arguments.length > 4 ? arguments[4] : undefined;\n  var allDiagnostics = [];\n  var checkOtherDiagnostics = true;\n\n  function checkDiagnostics(fn) {\n    if (checkOtherDiagnostics) {\n      var diags = fn(undefined, cancellationToken);\n\n      if (diags) {\n        allDiagnostics.push.apply(allDiagnostics, _toConsumableArray(diags));\n        checkOtherDiagnostics = !hasErrors(diags);\n      }\n    }\n  }\n\n  var gatherSyntacticDiagnostics = (mode & DiagnosticMode.Syntactic) != 0;\n  var gatherSemanticDiagnostics = (mode & DiagnosticMode.Semantic) != 0;\n\n  if (jitMode) {\n    var tsProgram = program;\n\n    if (gatherSyntacticDiagnostics) {\n      // Check syntactic diagnostics.\n      benchmark_1.time(\"\".concat(benchmarkLabel, \".gatherDiagnostics.ts.getSyntacticDiagnostics\"));\n      checkDiagnostics(tsProgram.getSyntacticDiagnostics.bind(tsProgram));\n      benchmark_1.timeEnd(\"\".concat(benchmarkLabel, \".gatherDiagnostics.ts.getSyntacticDiagnostics\"));\n    }\n\n    if (gatherSemanticDiagnostics) {\n      // Check semantic diagnostics.\n      benchmark_1.time(\"\".concat(benchmarkLabel, \".gatherDiagnostics.ts.getSemanticDiagnostics\"));\n      checkDiagnostics(tsProgram.getSemanticDiagnostics.bind(tsProgram));\n      benchmark_1.timeEnd(\"\".concat(benchmarkLabel, \".gatherDiagnostics.ts.getSemanticDiagnostics\"));\n    }\n  } else {\n    var angularProgram = program;\n\n    if (gatherSyntacticDiagnostics) {\n      // Check TypeScript syntactic diagnostics.\n      benchmark_1.time(\"\".concat(benchmarkLabel, \".gatherDiagnostics.ng.getTsSyntacticDiagnostics\"));\n      checkDiagnostics(angularProgram.getTsSyntacticDiagnostics.bind(angularProgram));\n      benchmark_1.timeEnd(\"\".concat(benchmarkLabel, \".gatherDiagnostics.ng.getTsSyntacticDiagnostics\"));\n    }\n\n    if (gatherSemanticDiagnostics) {\n      // Check TypeScript semantic and Angular structure diagnostics.\n      benchmark_1.time(\"\".concat(benchmarkLabel, \".gatherDiagnostics.ng.getTsSemanticDiagnostics\"));\n      checkDiagnostics(angularProgram.getTsSemanticDiagnostics.bind(angularProgram));\n      benchmark_1.timeEnd(\"\".concat(benchmarkLabel, \".gatherDiagnostics.ng.getTsSemanticDiagnostics\")); // Check Angular semantic diagnostics\n\n      benchmark_1.time(\"\".concat(benchmarkLabel, \".gatherDiagnostics.ng.getNgSemanticDiagnostics\"));\n      checkDiagnostics(angularProgram.getNgSemanticDiagnostics.bind(angularProgram));\n      benchmark_1.timeEnd(\"\".concat(benchmarkLabel, \".gatherDiagnostics.ng.getNgSemanticDiagnostics\"));\n    }\n  }\n\n  return allDiagnostics;\n}\n\nexports.gatherDiagnostics = gatherDiagnostics;\n\nfunction reportDiagnostics(diagnostics, reportError, reportWarning) {\n  var tsErrors = [];\n  var tsWarnings = [];\n  var ngErrors = [];\n  var ngWarnings = [];\n\n  var _iterator = _createForOfIteratorHelper(diagnostics),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var diagnostic = _step.value;\n\n      switch (diagnostic.category) {\n        case ts.DiagnosticCategory.Error:\n          if (compiler_cli_1.isNgDiagnostic(diagnostic)) {\n            ngErrors.push(diagnostic);\n          } else {\n            tsErrors.push(diagnostic);\n          }\n\n          break;\n\n        case ts.DiagnosticCategory.Message:\n        case ts.DiagnosticCategory.Suggestion: // Warnings?\n\n        case ts.DiagnosticCategory.Warning:\n          if (compiler_cli_1.isNgDiagnostic(diagnostic)) {\n            ngWarnings.push(diagnostic);\n          } else {\n            tsWarnings.push(diagnostic);\n          }\n\n          break;\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  if (tsErrors.length > 0) {\n    var message = compiler_cli_1.formatDiagnostics(tsErrors);\n    reportError(message);\n  }\n\n  if (tsWarnings.length > 0) {\n    var _message = compiler_cli_1.formatDiagnostics(tsWarnings);\n\n    reportWarning(_message);\n  }\n\n  if (ngErrors.length > 0) {\n    var _message2 = compiler_cli_1.formatDiagnostics(ngErrors);\n\n    reportError(_message2);\n  }\n\n  if (ngWarnings.length > 0) {\n    var _message3 = compiler_cli_1.formatDiagnostics(ngWarnings);\n\n    reportWarning(_message3);\n  }\n}\n\nexports.reportDiagnostics = reportDiagnostics;","map":{"version":3,"sources":["/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@ngtools/webpack/src/diagnostics.js"],"names":["Object","defineProperty","exports","value","reportDiagnostics","gatherDiagnostics","hasErrors","CancellationToken","DiagnosticMode","compiler_cli_1","require","ts","benchmark_1","_isCancelled","isCancellationRequested","OperationCanceledException","diags","some","d","category","DiagnosticCategory","Error","program","jitMode","benchmarkLabel","mode","All","cancellationToken","allDiagnostics","checkOtherDiagnostics","checkDiagnostics","fn","undefined","push","gatherSyntacticDiagnostics","Syntactic","gatherSemanticDiagnostics","Semantic","tsProgram","time","getSyntacticDiagnostics","bind","timeEnd","getSemanticDiagnostics","angularProgram","getTsSyntacticDiagnostics","getTsSemanticDiagnostics","getNgSemanticDiagnostics","diagnostics","reportError","reportWarning","tsErrors","tsWarnings","ngErrors","ngWarnings","diagnostic","isNgDiagnostic","Message","Suggestion","Warning","length","message","formatDiagnostics"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.reportDiagnostics = exports.gatherDiagnostics = exports.hasErrors = exports.CancellationToken = exports.DiagnosticMode = void 0;\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst compiler_cli_1 = require(\"@angular/compiler-cli\");\nconst ts = require(\"typescript\");\nconst benchmark_1 = require(\"./benchmark\");\nvar DiagnosticMode;\n(function (DiagnosticMode) {\n    DiagnosticMode[DiagnosticMode[\"Syntactic\"] = 1] = \"Syntactic\";\n    DiagnosticMode[DiagnosticMode[\"Semantic\"] = 2] = \"Semantic\";\n    DiagnosticMode[DiagnosticMode[\"All\"] = 3] = \"All\";\n    DiagnosticMode[DiagnosticMode[\"Default\"] = 3] = \"Default\";\n})(DiagnosticMode = exports.DiagnosticMode || (exports.DiagnosticMode = {}));\nclass CancellationToken {\n    constructor() {\n        this._isCancelled = false;\n    }\n    requestCancellation() {\n        this._isCancelled = true;\n    }\n    isCancellationRequested() {\n        return this._isCancelled;\n    }\n    throwIfCancellationRequested() {\n        if (this.isCancellationRequested()) {\n            throw new ts.OperationCanceledException();\n        }\n    }\n}\nexports.CancellationToken = CancellationToken;\nfunction hasErrors(diags) {\n    return diags.some(d => d.category === ts.DiagnosticCategory.Error);\n}\nexports.hasErrors = hasErrors;\nfunction gatherDiagnostics(program, jitMode, benchmarkLabel, mode = DiagnosticMode.All, cancellationToken) {\n    const allDiagnostics = [];\n    let checkOtherDiagnostics = true;\n    function checkDiagnostics(fn) {\n        if (checkOtherDiagnostics) {\n            const diags = fn(undefined, cancellationToken);\n            if (diags) {\n                allDiagnostics.push(...diags);\n                checkOtherDiagnostics = !hasErrors(diags);\n            }\n        }\n    }\n    const gatherSyntacticDiagnostics = (mode & DiagnosticMode.Syntactic) != 0;\n    const gatherSemanticDiagnostics = (mode & DiagnosticMode.Semantic) != 0;\n    if (jitMode) {\n        const tsProgram = program;\n        if (gatherSyntacticDiagnostics) {\n            // Check syntactic diagnostics.\n            benchmark_1.time(`${benchmarkLabel}.gatherDiagnostics.ts.getSyntacticDiagnostics`);\n            checkDiagnostics(tsProgram.getSyntacticDiagnostics.bind(tsProgram));\n            benchmark_1.timeEnd(`${benchmarkLabel}.gatherDiagnostics.ts.getSyntacticDiagnostics`);\n        }\n        if (gatherSemanticDiagnostics) {\n            // Check semantic diagnostics.\n            benchmark_1.time(`${benchmarkLabel}.gatherDiagnostics.ts.getSemanticDiagnostics`);\n            checkDiagnostics(tsProgram.getSemanticDiagnostics.bind(tsProgram));\n            benchmark_1.timeEnd(`${benchmarkLabel}.gatherDiagnostics.ts.getSemanticDiagnostics`);\n        }\n    }\n    else {\n        const angularProgram = program;\n        if (gatherSyntacticDiagnostics) {\n            // Check TypeScript syntactic diagnostics.\n            benchmark_1.time(`${benchmarkLabel}.gatherDiagnostics.ng.getTsSyntacticDiagnostics`);\n            checkDiagnostics(angularProgram.getTsSyntacticDiagnostics.bind(angularProgram));\n            benchmark_1.timeEnd(`${benchmarkLabel}.gatherDiagnostics.ng.getTsSyntacticDiagnostics`);\n        }\n        if (gatherSemanticDiagnostics) {\n            // Check TypeScript semantic and Angular structure diagnostics.\n            benchmark_1.time(`${benchmarkLabel}.gatherDiagnostics.ng.getTsSemanticDiagnostics`);\n            checkDiagnostics(angularProgram.getTsSemanticDiagnostics.bind(angularProgram));\n            benchmark_1.timeEnd(`${benchmarkLabel}.gatherDiagnostics.ng.getTsSemanticDiagnostics`);\n            // Check Angular semantic diagnostics\n            benchmark_1.time(`${benchmarkLabel}.gatherDiagnostics.ng.getNgSemanticDiagnostics`);\n            checkDiagnostics(angularProgram.getNgSemanticDiagnostics.bind(angularProgram));\n            benchmark_1.timeEnd(`${benchmarkLabel}.gatherDiagnostics.ng.getNgSemanticDiagnostics`);\n        }\n    }\n    return allDiagnostics;\n}\nexports.gatherDiagnostics = gatherDiagnostics;\nfunction reportDiagnostics(diagnostics, reportError, reportWarning) {\n    const tsErrors = [];\n    const tsWarnings = [];\n    const ngErrors = [];\n    const ngWarnings = [];\n    for (const diagnostic of diagnostics) {\n        switch (diagnostic.category) {\n            case ts.DiagnosticCategory.Error:\n                if (compiler_cli_1.isNgDiagnostic(diagnostic)) {\n                    ngErrors.push(diagnostic);\n                }\n                else {\n                    tsErrors.push(diagnostic);\n                }\n                break;\n            case ts.DiagnosticCategory.Message:\n            case ts.DiagnosticCategory.Suggestion:\n            // Warnings?\n            case ts.DiagnosticCategory.Warning:\n                if (compiler_cli_1.isNgDiagnostic(diagnostic)) {\n                    ngWarnings.push(diagnostic);\n                }\n                else {\n                    tsWarnings.push(diagnostic);\n                }\n                break;\n        }\n    }\n    if (tsErrors.length > 0) {\n        const message = compiler_cli_1.formatDiagnostics(tsErrors);\n        reportError(message);\n    }\n    if (tsWarnings.length > 0) {\n        const message = compiler_cli_1.formatDiagnostics(tsWarnings);\n        reportWarning(message);\n    }\n    if (ngErrors.length > 0) {\n        const message = compiler_cli_1.formatDiagnostics(ngErrors);\n        reportError(message);\n    }\n    if (ngWarnings.length > 0) {\n        const message = compiler_cli_1.formatDiagnostics(ngWarnings);\n        reportWarning(message);\n    }\n}\nexports.reportDiagnostics = reportDiagnostics;\n"]},"metadata":{},"sourceType":"script"}