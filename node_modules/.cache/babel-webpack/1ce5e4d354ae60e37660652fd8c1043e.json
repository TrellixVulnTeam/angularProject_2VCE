{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nvar _createForOfIteratorHelper = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _classCallCheck = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/createClass\");\n\nvar Generator = require(\"../Generator\");\n\nvar WebAssemblyExportImportedDependency = require(\"../dependencies/WebAssemblyExportImportedDependency\");\n\nvar WebAssemblyImportDependency = require(\"../dependencies/WebAssemblyImportDependency\");\n\nvar WebAssemblyInInitialChunkError = require(\"./WebAssemblyInInitialChunkError\");\n/** @typedef {import(\"../Compiler\")} Compiler */\n\n\nvar WebAssemblyGenerator;\nvar WebAssemblyJavascriptGenerator;\nvar WebAssemblyParser;\n\nvar WebAssemblyModulesPlugin = /*#__PURE__*/function () {\n  function WebAssemblyModulesPlugin(options) {\n    _classCallCheck(this, WebAssemblyModulesPlugin);\n\n    this.options = options;\n  }\n  /**\n   * @param {Compiler} compiler compiler\n   * @returns {void}\n   */\n\n\n  _createClass(WebAssemblyModulesPlugin, [{\n    key: \"apply\",\n    value: function apply(compiler) {\n      var _this = this;\n\n      compiler.hooks.compilation.tap(\"WebAssemblyModulesPlugin\", function (compilation, _ref) {\n        var normalModuleFactory = _ref.normalModuleFactory;\n        compilation.dependencyFactories.set(WebAssemblyImportDependency, normalModuleFactory);\n        compilation.dependencyFactories.set(WebAssemblyExportImportedDependency, normalModuleFactory);\n        normalModuleFactory.hooks.createParser.for(\"webassembly/experimental\").tap(\"WebAssemblyModulesPlugin\", function () {\n          if (WebAssemblyParser === undefined) {\n            WebAssemblyParser = require(\"./WebAssemblyParser\");\n          }\n\n          return new WebAssemblyParser();\n        });\n        normalModuleFactory.hooks.createGenerator.for(\"webassembly/experimental\").tap(\"WebAssemblyModulesPlugin\", function () {\n          if (WebAssemblyGenerator === undefined) {\n            WebAssemblyGenerator = require(\"./WebAssemblyGenerator\");\n          }\n\n          if (WebAssemblyJavascriptGenerator === undefined) {\n            WebAssemblyJavascriptGenerator = require(\"./WebAssemblyJavascriptGenerator\");\n          }\n\n          return Generator.byType({\n            javascript: new WebAssemblyJavascriptGenerator(),\n            webassembly: new WebAssemblyGenerator(_this.options)\n          });\n        });\n        compilation.chunkTemplate.hooks.renderManifest.tap(\"WebAssemblyModulesPlugin\", function (result, options) {\n          var chunk = options.chunk;\n          var outputOptions = options.outputOptions;\n          var moduleTemplates = options.moduleTemplates;\n          var dependencyTemplates = options.dependencyTemplates;\n\n          var _iterator = _createForOfIteratorHelper(chunk.modulesIterable),\n              _step;\n\n          try {\n            var _loop = function _loop() {\n              var module = _step.value;\n\n              if (module.type && module.type.startsWith(\"webassembly\")) {\n                var filenameTemplate = outputOptions.webassemblyModuleFilename;\n                result.push({\n                  render: function render() {\n                    return _this.renderWebAssembly(module, moduleTemplates.webassembly, dependencyTemplates);\n                  },\n                  filenameTemplate: filenameTemplate,\n                  pathOptions: {\n                    module: module\n                  },\n                  identifier: \"webassemblyModule\".concat(module.id),\n                  hash: module.hash\n                });\n              }\n            };\n\n            for (_iterator.s(); !(_step = _iterator.n()).done;) {\n              _loop();\n            }\n          } catch (err) {\n            _iterator.e(err);\n          } finally {\n            _iterator.f();\n          }\n\n          return result;\n        });\n        compilation.hooks.afterChunks.tap(\"WebAssemblyModulesPlugin\", function () {\n          var initialWasmModules = new Set();\n\n          var _iterator2 = _createForOfIteratorHelper(compilation.chunks),\n              _step2;\n\n          try {\n            for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n              var chunk = _step2.value;\n\n              if (chunk.canBeInitial()) {\n                var _iterator4 = _createForOfIteratorHelper(chunk.modulesIterable),\n                    _step4;\n\n                try {\n                  for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n                    var _module = _step4.value;\n\n                    if (_module.type.startsWith(\"webassembly\")) {\n                      initialWasmModules.add(_module);\n                    }\n                  }\n                } catch (err) {\n                  _iterator4.e(err);\n                } finally {\n                  _iterator4.f();\n                }\n              }\n            }\n          } catch (err) {\n            _iterator2.e(err);\n          } finally {\n            _iterator2.f();\n          }\n\n          var _iterator3 = _createForOfIteratorHelper(initialWasmModules),\n              _step3;\n\n          try {\n            for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n              var _module2 = _step3.value;\n              compilation.errors.push(new WebAssemblyInInitialChunkError(_module2, compilation.requestShortener));\n            }\n          } catch (err) {\n            _iterator3.e(err);\n          } finally {\n            _iterator3.f();\n          }\n        });\n      });\n    }\n  }, {\n    key: \"renderWebAssembly\",\n    value: function renderWebAssembly(module, moduleTemplate, dependencyTemplates) {\n      return moduleTemplate.render(module, dependencyTemplates, {});\n    }\n  }]);\n\n  return WebAssemblyModulesPlugin;\n}();\n\nmodule.exports = WebAssemblyModulesPlugin;","map":{"version":3,"sources":["/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/webpack/lib/wasm/WebAssemblyModulesPlugin.js"],"names":["Generator","require","WebAssemblyExportImportedDependency","WebAssemblyImportDependency","WebAssemblyInInitialChunkError","WebAssemblyGenerator","WebAssemblyJavascriptGenerator","WebAssemblyParser","WebAssemblyModulesPlugin","options","compiler","hooks","compilation","tap","normalModuleFactory","dependencyFactories","set","createParser","for","undefined","createGenerator","byType","javascript","webassembly","chunkTemplate","renderManifest","result","chunk","outputOptions","moduleTemplates","dependencyTemplates","modulesIterable","module","type","startsWith","filenameTemplate","webassemblyModuleFilename","push","render","renderWebAssembly","pathOptions","identifier","id","hash","afterChunks","initialWasmModules","Set","chunks","canBeInitial","add","errors","requestShortener","moduleTemplate","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;;;;;;;AAEA,IAAMA,SAAS,GAAGC,OAAO,CAAC,cAAD,CAAzB;;AACA,IAAMC,mCAAmC,GAAGD,OAAO,CAAC,qDAAD,CAAnD;;AACA,IAAME,2BAA2B,GAAGF,OAAO,CAAC,6CAAD,CAA3C;;AACA,IAAMG,8BAA8B,GAAGH,OAAO,CAAC,kCAAD,CAA9C;AAEA;;;AAEA,IAAII,oBAAJ;AACA,IAAIC,8BAAJ;AACA,IAAIC,iBAAJ;;IAEMC,wB;AACL,oCAAYC,OAAZ,EAAqB;AAAA;;AACpB,SAAKA,OAAL,GAAeA,OAAf;AACA;AAED;AACD;AACA;AACA;;;;;WACC,eAAMC,QAAN,EAAgB;AAAA;;AACfA,MAAAA,QAAQ,CAACC,KAAT,CAAeC,WAAf,CAA2BC,GAA3B,CACC,0BADD,EAEC,UAACD,WAAD,QAA0C;AAAA,YAA1BE,mBAA0B,QAA1BA,mBAA0B;AACzCF,QAAAA,WAAW,CAACG,mBAAZ,CAAgCC,GAAhC,CACCb,2BADD,EAECW,mBAFD;AAKAF,QAAAA,WAAW,CAACG,mBAAZ,CAAgCC,GAAhC,CACCd,mCADD,EAECY,mBAFD;AAKAA,QAAAA,mBAAmB,CAACH,KAApB,CAA0BM,YAA1B,CACEC,GADF,CACM,0BADN,EAEEL,GAFF,CAEM,0BAFN,EAEkC,YAAM;AACtC,cAAIN,iBAAiB,KAAKY,SAA1B,EAAqC;AACpCZ,YAAAA,iBAAiB,GAAGN,OAAO,CAAC,qBAAD,CAA3B;AACA;;AACD,iBAAO,IAAIM,iBAAJ,EAAP;AACA,SAPF;AASAO,QAAAA,mBAAmB,CAACH,KAApB,CAA0BS,eAA1B,CACEF,GADF,CACM,0BADN,EAEEL,GAFF,CAEM,0BAFN,EAEkC,YAAM;AACtC,cAAIR,oBAAoB,KAAKc,SAA7B,EAAwC;AACvCd,YAAAA,oBAAoB,GAAGJ,OAAO,CAAC,wBAAD,CAA9B;AACA;;AACD,cAAIK,8BAA8B,KAAKa,SAAvC,EAAkD;AACjDb,YAAAA,8BAA8B,GAAGL,OAAO,CAAC,kCAAD,CAAxC;AACA;;AACD,iBAAOD,SAAS,CAACqB,MAAV,CAAiB;AACvBC,YAAAA,UAAU,EAAE,IAAIhB,8BAAJ,EADW;AAEvBiB,YAAAA,WAAW,EAAE,IAAIlB,oBAAJ,CAAyB,KAAI,CAACI,OAA9B;AAFU,WAAjB,CAAP;AAIA,SAbF;AAeAG,QAAAA,WAAW,CAACY,aAAZ,CAA0Bb,KAA1B,CAAgCc,cAAhC,CAA+CZ,GAA/C,CACC,0BADD,EAEC,UAACa,MAAD,EAASjB,OAAT,EAAqB;AACpB,cAAMkB,KAAK,GAAGlB,OAAO,CAACkB,KAAtB;AACA,cAAMC,aAAa,GAAGnB,OAAO,CAACmB,aAA9B;AACA,cAAMC,eAAe,GAAGpB,OAAO,CAACoB,eAAhC;AACA,cAAMC,mBAAmB,GAAGrB,OAAO,CAACqB,mBAApC;;AAJoB,qDAMCH,KAAK,CAACI,eANP;AAAA;;AAAA;AAAA;AAAA,kBAMTC,MANS;;AAOnB,kBAAIA,MAAM,CAACC,IAAP,IAAeD,MAAM,CAACC,IAAP,CAAYC,UAAZ,CAAuB,aAAvB,CAAnB,EAA0D;AACzD,oBAAMC,gBAAgB,GACrBP,aAAa,CAACQ,yBADf;AAGAV,gBAAAA,MAAM,CAACW,IAAP,CAAY;AACXC,kBAAAA,MAAM,EAAE;AAAA,2BACP,KAAI,CAACC,iBAAL,CACCP,MADD,EAECH,eAAe,CAACN,WAFjB,EAGCO,mBAHD,CADO;AAAA,mBADG;AAOXK,kBAAAA,gBAAgB,EAAhBA,gBAPW;AAQXK,kBAAAA,WAAW,EAAE;AACZR,oBAAAA,MAAM,EAANA;AADY,mBARF;AAWXS,kBAAAA,UAAU,6BAAsBT,MAAM,CAACU,EAA7B,CAXC;AAYXC,kBAAAA,IAAI,EAAEX,MAAM,CAACW;AAZF,iBAAZ;AAcA;AAzBkB;;AAMpB,gEAA4C;AAAA;AAoB3C;AA1BmB;AAAA;AAAA;AAAA;AAAA;;AA4BpB,iBAAOjB,MAAP;AACA,SA/BF;AAkCAd,QAAAA,WAAW,CAACD,KAAZ,CAAkBiC,WAAlB,CAA8B/B,GAA9B,CAAkC,0BAAlC,EAA8D,YAAM;AACnE,cAAMgC,kBAAkB,GAAG,IAAIC,GAAJ,EAA3B;;AADmE,sDAE/ClC,WAAW,CAACmC,MAFmC;AAAA;;AAAA;AAEnE,mEAAwC;AAAA,kBAA7BpB,KAA6B;;AACvC,kBAAIA,KAAK,CAACqB,YAAN,EAAJ,EAA0B;AAAA,4DACJrB,KAAK,CAACI,eADF;AAAA;;AAAA;AACzB,yEAA4C;AAAA,wBAAjCC,OAAiC;;AAC3C,wBAAIA,OAAM,CAACC,IAAP,CAAYC,UAAZ,CAAuB,aAAvB,CAAJ,EAA2C;AAC1CW,sBAAAA,kBAAkB,CAACI,GAAnB,CAAuBjB,OAAvB;AACA;AACD;AALwB;AAAA;AAAA;AAAA;AAAA;AAMzB;AACD;AAVkE;AAAA;AAAA;AAAA;AAAA;;AAAA,sDAW9Ca,kBAX8C;AAAA;;AAAA;AAWnE,mEAAyC;AAAA,kBAA9Bb,QAA8B;AACxCpB,cAAAA,WAAW,CAACsC,MAAZ,CAAmBb,IAAnB,CACC,IAAIjC,8BAAJ,CACC4B,QADD,EAECpB,WAAW,CAACuC,gBAFb,CADD;AAMA;AAlBkE;AAAA;AAAA;AAAA;AAAA;AAmBnE,SAnBD;AAoBA,OA3FF;AA6FA;;;WAED,2BAAkBnB,MAAlB,EAA0BoB,cAA1B,EAA0CtB,mBAA1C,EAA+D;AAC9D,aAAOsB,cAAc,CAACd,MAAf,CAAsBN,MAAtB,EAA8BF,mBAA9B,EAAmD,EAAnD,CAAP;AACA;;;;;;AAGFE,MAAM,CAACqB,OAAP,GAAiB7C,wBAAjB","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst Generator = require(\"../Generator\");\nconst WebAssemblyExportImportedDependency = require(\"../dependencies/WebAssemblyExportImportedDependency\");\nconst WebAssemblyImportDependency = require(\"../dependencies/WebAssemblyImportDependency\");\nconst WebAssemblyInInitialChunkError = require(\"./WebAssemblyInInitialChunkError\");\n\n/** @typedef {import(\"../Compiler\")} Compiler */\n\nlet WebAssemblyGenerator;\nlet WebAssemblyJavascriptGenerator;\nlet WebAssemblyParser;\n\nclass WebAssemblyModulesPlugin {\n\tconstructor(options) {\n\t\tthis.options = options;\n\t}\n\n\t/**\n\t * @param {Compiler} compiler compiler\n\t * @returns {void}\n\t */\n\tapply(compiler) {\n\t\tcompiler.hooks.compilation.tap(\n\t\t\t\"WebAssemblyModulesPlugin\",\n\t\t\t(compilation, { normalModuleFactory }) => {\n\t\t\t\tcompilation.dependencyFactories.set(\n\t\t\t\t\tWebAssemblyImportDependency,\n\t\t\t\t\tnormalModuleFactory\n\t\t\t\t);\n\n\t\t\t\tcompilation.dependencyFactories.set(\n\t\t\t\t\tWebAssemblyExportImportedDependency,\n\t\t\t\t\tnormalModuleFactory\n\t\t\t\t);\n\n\t\t\t\tnormalModuleFactory.hooks.createParser\n\t\t\t\t\t.for(\"webassembly/experimental\")\n\t\t\t\t\t.tap(\"WebAssemblyModulesPlugin\", () => {\n\t\t\t\t\t\tif (WebAssemblyParser === undefined) {\n\t\t\t\t\t\t\tWebAssemblyParser = require(\"./WebAssemblyParser\");\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn new WebAssemblyParser();\n\t\t\t\t\t});\n\n\t\t\t\tnormalModuleFactory.hooks.createGenerator\n\t\t\t\t\t.for(\"webassembly/experimental\")\n\t\t\t\t\t.tap(\"WebAssemblyModulesPlugin\", () => {\n\t\t\t\t\t\tif (WebAssemblyGenerator === undefined) {\n\t\t\t\t\t\t\tWebAssemblyGenerator = require(\"./WebAssemblyGenerator\");\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (WebAssemblyJavascriptGenerator === undefined) {\n\t\t\t\t\t\t\tWebAssemblyJavascriptGenerator = require(\"./WebAssemblyJavascriptGenerator\");\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn Generator.byType({\n\t\t\t\t\t\t\tjavascript: new WebAssemblyJavascriptGenerator(),\n\t\t\t\t\t\t\twebassembly: new WebAssemblyGenerator(this.options)\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\n\t\t\t\tcompilation.chunkTemplate.hooks.renderManifest.tap(\n\t\t\t\t\t\"WebAssemblyModulesPlugin\",\n\t\t\t\t\t(result, options) => {\n\t\t\t\t\t\tconst chunk = options.chunk;\n\t\t\t\t\t\tconst outputOptions = options.outputOptions;\n\t\t\t\t\t\tconst moduleTemplates = options.moduleTemplates;\n\t\t\t\t\t\tconst dependencyTemplates = options.dependencyTemplates;\n\n\t\t\t\t\t\tfor (const module of chunk.modulesIterable) {\n\t\t\t\t\t\t\tif (module.type && module.type.startsWith(\"webassembly\")) {\n\t\t\t\t\t\t\t\tconst filenameTemplate =\n\t\t\t\t\t\t\t\t\toutputOptions.webassemblyModuleFilename;\n\n\t\t\t\t\t\t\t\tresult.push({\n\t\t\t\t\t\t\t\t\trender: () =>\n\t\t\t\t\t\t\t\t\t\tthis.renderWebAssembly(\n\t\t\t\t\t\t\t\t\t\t\tmodule,\n\t\t\t\t\t\t\t\t\t\t\tmoduleTemplates.webassembly,\n\t\t\t\t\t\t\t\t\t\t\tdependencyTemplates\n\t\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\tfilenameTemplate,\n\t\t\t\t\t\t\t\t\tpathOptions: {\n\t\t\t\t\t\t\t\t\t\tmodule\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\tidentifier: `webassemblyModule${module.id}`,\n\t\t\t\t\t\t\t\t\thash: module.hash\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn result;\n\t\t\t\t\t}\n\t\t\t\t);\n\n\t\t\t\tcompilation.hooks.afterChunks.tap(\"WebAssemblyModulesPlugin\", () => {\n\t\t\t\t\tconst initialWasmModules = new Set();\n\t\t\t\t\tfor (const chunk of compilation.chunks) {\n\t\t\t\t\t\tif (chunk.canBeInitial()) {\n\t\t\t\t\t\t\tfor (const module of chunk.modulesIterable) {\n\t\t\t\t\t\t\t\tif (module.type.startsWith(\"webassembly\")) {\n\t\t\t\t\t\t\t\t\tinitialWasmModules.add(module);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tfor (const module of initialWasmModules) {\n\t\t\t\t\t\tcompilation.errors.push(\n\t\t\t\t\t\t\tnew WebAssemblyInInitialChunkError(\n\t\t\t\t\t\t\t\tmodule,\n\t\t\t\t\t\t\t\tcompilation.requestShortener\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t);\n\t}\n\n\trenderWebAssembly(module, moduleTemplate, dependencyTemplates) {\n\t\treturn moduleTemplate.render(module, dependencyTemplates, {});\n\t}\n}\n\nmodule.exports = WebAssemblyModulesPlugin;\n"]},"metadata":{},"sourceType":"script"}