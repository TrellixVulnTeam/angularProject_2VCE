{"ast":null,"code":"(function (factory) {\n  if (typeof module === \"object\" && typeof module.exports === \"object\") {\n    var v = factory(require, exports);\n    if (v !== undefined) module.exports = v;\n  } else if (typeof define === \"function\" && define.amd) {\n    define(\"@angular/compiler-cli/src/ngtsc/util/src/ts_source_map_bug_29300\", [\"require\", \"exports\", \"typescript\"], factory);\n  }\n})(function (require, exports) {\n  \"use strict\";\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.tsSourceMapBug29300Fixed = void 0;\n  /**\n   * @license\n   * Copyright Google LLC All Rights Reserved.\n   *\n   * Use of this source code is governed by an MIT-style license that can be\n   * found in the LICENSE file at https://angular.io/license\n   */\n\n  var ts = require(\"typescript\");\n\n  var _tsSourceMapBug29300Fixed;\n  /**\n   * Test the current version of TypeScript to see if it has fixed the external SourceMap\n   * file bug: https://github.com/Microsoft/TypeScript/issues/29300.\n   *\n   * The bug is fixed in TS 3.3+ but this check avoid us having to rely upon the version number,\n   * and allows us to gracefully fail if the TS version still has the bug.\n   *\n   * We check for the bug by compiling a very small program `a;` and transforming it to `b;`,\n   * where we map the new `b` identifier to an external source file, which has different lines to\n   * the original source file.  If the bug is fixed then the output SourceMap should contain\n   * mappings that correspond ot the correct line/col pairs for this transformed node.\n   *\n   * @returns true if the bug is fixed.\n   */\n\n\n  function tsSourceMapBug29300Fixed() {\n    if (_tsSourceMapBug29300Fixed === undefined) {\n      var writtenFiles_1 = {};\n      var sourceFile_1 = ts.createSourceFile('test.ts', 'a;', ts.ScriptTarget.ES2015, true, ts.ScriptKind.TS);\n      var host = {\n        getSourceFile: function getSourceFile() {\n          return sourceFile_1;\n        },\n        fileExists: function fileExists() {\n          return true;\n        },\n        readFile: function readFile() {\n          return '';\n        },\n        writeFile: function writeFile(fileName, data) {\n          writtenFiles_1[fileName] = data;\n        },\n        getDefaultLibFileName: function getDefaultLibFileName() {\n          return '';\n        },\n        getCurrentDirectory: function getCurrentDirectory() {\n          return '';\n        },\n        getDirectories: function getDirectories() {\n          return [];\n        },\n        getCanonicalFileName: function getCanonicalFileName() {\n          return '';\n        },\n        useCaseSensitiveFileNames: function useCaseSensitiveFileNames() {\n          return true;\n        },\n        getNewLine: function getNewLine() {\n          return '\\n';\n        }\n      };\n\n      var transform = function transform(context) {\n        return function (node) {\n          return ts.visitNode(node, visitor);\n        };\n\n        function visitor(node) {\n          if (ts.isIdentifier(node) && node.text === 'a') {\n            var newNode = ts.createIdentifier('b');\n            ts.setSourceMapRange(newNode, {\n              pos: 16,\n              end: 16,\n              source: ts.createSourceMapSource('test.html', 'abc\\ndef\\nghi\\njkl\\nmno\\npqr')\n            });\n            return newNode;\n          }\n\n          return ts.visitEachChild(node, visitor, context);\n        }\n      };\n\n      var program = ts.createProgram(['test.ts'], {\n        sourceMap: true\n      }, host);\n      program.emit(sourceFile_1, undefined, undefined, undefined, {\n        after: [transform]\n      }); // The first two mappings in the source map should look like:\n      // [0,1,4,0] col 0 => source file 1, row 4, column 0)\n      // [1,0,0,0] col 1 => source file 1, row 4, column 0)\n\n      _tsSourceMapBug29300Fixed = /ACIA,CAAA/.test(writtenFiles_1['test.js.map']);\n    }\n\n    return _tsSourceMapBug29300Fixed;\n  }\n\n  exports.tsSourceMapBug29300Fixed = tsSourceMapBug29300Fixed;\n});","map":{"version":3,"sources":["../../../../../../../../../packages/compiler-cli/src/ngtsc/util/src/ts_source_map_bug_29300.ts"],"names":[],"mappings":";;;;;;;;;;;;;;AAAA;;;;;;AAMG;;AACH,MAAA,EAAA,GAAA,OAAA,CAAA,YAAA,CAAA;;AAEA,MAAI,yBAAJ;AAEA;;;;;;;;;;;;;AAaG;;;AACH,WAAgB,wBAAhB,GAAwC;AACtC,QAAI,yBAAyB,KAAK,SAAlC,EAA6C;AAC3C,UAAI,cAAY,GAAiC,EAAjD;AACA,UAAM,YAAU,GACZ,EAAE,CAAC,gBAAH,CAAoB,SAApB,EAA+B,IAA/B,EAAqC,EAAE,CAAC,YAAH,CAAgB,MAArD,EAA6D,IAA7D,EAAmE,EAAE,CAAC,UAAH,CAAc,EAAjF,CADJ;AAEA,UAAM,IAAI,GAAG;AACX,QAAA,aAAa,EAAb,yBAAA;AAEM,iBAAO,YAAP;AACD,SAJM;AAKX,QAAA,UAAU,EAAV,sBAAA;AACE,iBAAO,IAAP;AACD,SAPU;AAQX,QAAA,QAAQ,EAAR,oBAAA;AAEM,iBAAO,EAAP;AACD,SAXM;AAYX,QAAA,SAAS,EAAT,mBAAU,QAAV,EAA4B,IAA5B,EAAwC;AACtC,UAAA,cAAY,CAAC,QAAD,CAAZ,GAAyB,IAAzB;AACD,SAdU;AAeX,QAAA,qBAAqB,EAArB,iCAAA;AACE,iBAAO,EAAP;AACD,SAjBU;AAkBX,QAAA,mBAAmB,EAAnB,+BAAA;AACE,iBAAO,EAAP;AACD,SApBU;AAqBX,QAAA,cAAc,EAAd,0BAAA;AACE,iBAAO,EAAP;AACD,SAvBU;AAwBX,QAAA,oBAAoB,EAApB,gCAAA;AACE,iBAAO,EAAP;AACD,SA1BU;AA2BX,QAAA,yBAAyB,EAAzB,qCAAA;AACE,iBAAO,IAAP;AACD,SA7BU;AA8BX,QAAA,UAAU,EAAV,sBAAA;AACE,iBAAO,IAAP;AACD;AAhCU,OAAb;;AAmCA,UAAM,SAAS,GAAG,SAAZ,SAAY,CAAC,OAAD,EAAkC;AAClD,eAAO,UAAC,IAAD,EAAoB;AAAK,iBAAA,EAAE,CAAC,SAAH,CAAa,IAAb,EAAA,OAAA,CAAA;AAA2B,SAA3D;;AACA,iBAAS,OAAT,CAAiB,IAAjB,EAA8B;AAC5B,cAAI,EAAE,CAAC,YAAH,CAAgB,IAAhB,KAAyB,IAAI,CAAC,IAAL,KAAc,GAA3C,EAAgD;AAC9C,gBAAM,OAAO,GAAG,EAAE,CAAC,gBAAH,CAAoB,GAApB,CAAhB;AACA,YAAA,EAAE,CAAC,iBAAH,CAAqB,OAArB,EAA8B;AAC5B,cAAA,GAAG,EAAE,EADuB;AAE5B,cAAA,GAAG,EAAE,EAFuB;AAG5B,cAAA,MAAM,EAAE,EAAE,CAAC,qBAAH,CAAyB,WAAzB,EAAsC,8BAAtC;AAHoB,aAA9B;AAKA,mBAAO,OAAP;AACD;;AACD,iBAAO,EAAE,CAAC,cAAH,CAAkB,IAAlB,EAAwB,OAAxB,EAAiC,OAAjC,CAAP;AACD;AACF,OAdD;;AAgBA,UAAM,OAAO,GAAG,EAAE,CAAC,aAAH,CAAiB,CAAC,SAAD,CAAjB,EAA8B;AAAC,QAAA,SAAS,EAAE;AAAZ,OAA9B,EAAiD,IAAjD,CAAhB;AACA,MAAA,OAAO,CAAC,IAAR,CAAa,YAAb,EAAyB,SAAzB,EAAoC,SAApC,EAA+C,SAA/C,EAA0D;AAAC,QAAA,KAAK,EAAE,CAAC,SAAD;AAAR,OAA1D,EAxD2C,CAyD3C;AACA;AACA;;AACA,MAAA,yBAAyB,GAAG,YAAY,IAAZ,CAAiB,cAAY,CAAC,aAAD,CAA7B,CAA5B;AACD;;AACD,WAAO,yBAAP;AACD;;AAhED,EAAA,OAAA,CAAA,wBAAA,GAAA,wBAAA","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as ts from 'typescript';\n\nlet _tsSourceMapBug29300Fixed: boolean|undefined;\n\n/**\n * Test the current version of TypeScript to see if it has fixed the external SourceMap\n * file bug: https://github.com/Microsoft/TypeScript/issues/29300.\n *\n * The bug is fixed in TS 3.3+ but this check avoid us having to rely upon the version number,\n * and allows us to gracefully fail if the TS version still has the bug.\n *\n * We check for the bug by compiling a very small program `a;` and transforming it to `b;`,\n * where we map the new `b` identifier to an external source file, which has different lines to\n * the original source file.  If the bug is fixed then the output SourceMap should contain\n * mappings that correspond ot the correct line/col pairs for this transformed node.\n *\n * @returns true if the bug is fixed.\n */\nexport function tsSourceMapBug29300Fixed() {\n  if (_tsSourceMapBug29300Fixed === undefined) {\n    let writtenFiles: {[filename: string]: string} = {};\n    const sourceFile =\n        ts.createSourceFile('test.ts', 'a;', ts.ScriptTarget.ES2015, true, ts.ScriptKind.TS);\n    const host = {\n      getSourceFile(): ts.SourceFile |\n          undefined {\n            return sourceFile;\n          },\n      fileExists(): boolean {\n        return true;\n      },\n      readFile(): string |\n          undefined {\n            return '';\n          },\n      writeFile(fileName: string, data: string) {\n        writtenFiles[fileName] = data;\n      },\n      getDefaultLibFileName(): string {\n        return '';\n      },\n      getCurrentDirectory(): string {\n        return '';\n      },\n      getDirectories(): string[] {\n        return [];\n      },\n      getCanonicalFileName(): string {\n        return '';\n      },\n      useCaseSensitiveFileNames(): boolean {\n        return true;\n      },\n      getNewLine(): string {\n        return '\\n';\n      },\n    };\n\n    const transform = (context: ts.TransformationContext) => {\n      return (node: ts.SourceFile) => ts.visitNode(node, visitor);\n      function visitor(node: ts.Node): ts.Node {\n        if (ts.isIdentifier(node) && node.text === 'a') {\n          const newNode = ts.createIdentifier('b');\n          ts.setSourceMapRange(newNode, {\n            pos: 16,\n            end: 16,\n            source: ts.createSourceMapSource('test.html', 'abc\\ndef\\nghi\\njkl\\nmno\\npqr')\n          });\n          return newNode;\n        }\n        return ts.visitEachChild(node, visitor, context);\n      }\n    };\n\n    const program = ts.createProgram(['test.ts'], {sourceMap: true}, host);\n    program.emit(sourceFile, undefined, undefined, undefined, {after: [transform]});\n    // The first two mappings in the source map should look like:\n    // [0,1,4,0] col 0 => source file 1, row 4, column 0)\n    // [1,0,0,0] col 1 => source file 1, row 4, column 0)\n    _tsSourceMapBug29300Fixed = /ACIA,CAAA/.test(writtenFiles['test.js.map']);\n  }\n  return _tsSourceMapBug29300Fixed;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}