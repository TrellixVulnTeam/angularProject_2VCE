{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nvar _classCallCheck = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/createClass\");\n\nvar ModuleFilenameHelpers = require(\"./ModuleFilenameHelpers\");\n\nvar validateOptions = require(\"schema-utils\");\n\nvar schema = require(\"../schemas/plugins/LoaderOptionsPlugin.json\");\n/** @typedef {import(\"../declarations/plugins/LoaderOptionsPlugin\").LoaderOptionsPluginOptions} LoaderOptionsPluginOptions */\n\n\nvar LoaderOptionsPlugin = /*#__PURE__*/function () {\n  /**\n   * @param {LoaderOptionsPluginOptions} options options object\n   */\n  function LoaderOptionsPlugin(options) {\n    _classCallCheck(this, LoaderOptionsPlugin);\n\n    validateOptions(schema, options || {}, \"Loader Options Plugin\");\n    if (typeof options !== \"object\") options = {};\n\n    if (!options.test) {\n      options.test = {\n        test: function test() {\n          return true;\n        }\n      };\n    }\n\n    this.options = options;\n  }\n\n  _createClass(LoaderOptionsPlugin, [{\n    key: \"apply\",\n    value: function apply(compiler) {\n      var options = this.options;\n      compiler.hooks.compilation.tap(\"LoaderOptionsPlugin\", function (compilation) {\n        compilation.hooks.normalModuleLoader.tap(\"LoaderOptionsPlugin\", function (context, module) {\n          var resource = module.resource;\n          if (!resource) return;\n          var i = resource.indexOf(\"?\");\n\n          if (ModuleFilenameHelpers.matchObject(options, i < 0 ? resource : resource.substr(0, i))) {\n            for (var _i = 0, _Object$keys = Object.keys(options); _i < _Object$keys.length; _i++) {\n              var key = _Object$keys[_i];\n\n              if (key === \"include\" || key === \"exclude\" || key === \"test\") {\n                continue;\n              }\n\n              context[key] = options[key];\n            }\n          }\n        });\n      });\n    }\n  }]);\n\n  return LoaderOptionsPlugin;\n}();\n\nmodule.exports = LoaderOptionsPlugin;","map":{"version":3,"sources":["/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/webpack/lib/LoaderOptionsPlugin.js"],"names":["ModuleFilenameHelpers","require","validateOptions","schema","LoaderOptionsPlugin","options","test","compiler","hooks","compilation","tap","normalModuleLoader","context","module","resource","i","indexOf","matchObject","substr","Object","keys","key","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;;;;;AAEA,IAAMA,qBAAqB,GAAGC,OAAO,CAAC,yBAAD,CAArC;;AAEA,IAAMC,eAAe,GAAGD,OAAO,CAAC,cAAD,CAA/B;;AACA,IAAME,MAAM,GAAGF,OAAO,CAAC,6CAAD,CAAtB;AAEA;;;IAEMG,mB;AACL;AACD;AACA;AACC,+BAAYC,OAAZ,EAAqB;AAAA;;AACpBH,IAAAA,eAAe,CAACC,MAAD,EAASE,OAAO,IAAI,EAApB,EAAwB,uBAAxB,CAAf;AAEA,QAAI,OAAOA,OAAP,KAAmB,QAAvB,EAAiCA,OAAO,GAAG,EAAV;;AACjC,QAAI,CAACA,OAAO,CAACC,IAAb,EAAmB;AAClBD,MAAAA,OAAO,CAACC,IAAR,GAAe;AACdA,QAAAA,IAAI,EAAE;AAAA,iBAAM,IAAN;AAAA;AADQ,OAAf;AAGA;;AACD,SAAKD,OAAL,GAAeA,OAAf;AACA;;;;WAED,eAAME,QAAN,EAAgB;AACf,UAAMF,OAAO,GAAG,KAAKA,OAArB;AACAE,MAAAA,QAAQ,CAACC,KAAT,CAAeC,WAAf,CAA2BC,GAA3B,CAA+B,qBAA/B,EAAsD,UAAAD,WAAW,EAAI;AACpEA,QAAAA,WAAW,CAACD,KAAZ,CAAkBG,kBAAlB,CAAqCD,GAArC,CACC,qBADD,EAEC,UAACE,OAAD,EAAUC,MAAV,EAAqB;AACpB,cAAMC,QAAQ,GAAGD,MAAM,CAACC,QAAxB;AACA,cAAI,CAACA,QAAL,EAAe;AACf,cAAMC,CAAC,GAAGD,QAAQ,CAACE,OAAT,CAAiB,GAAjB,CAAV;;AACA,cACChB,qBAAqB,CAACiB,WAAtB,CACCZ,OADD,EAECU,CAAC,GAAG,CAAJ,GAAQD,QAAR,GAAmBA,QAAQ,CAACI,MAAT,CAAgB,CAAhB,EAAmBH,CAAnB,CAFpB,CADD,EAKE;AACD,4CAAkBI,MAAM,CAACC,IAAP,CAAYf,OAAZ,CAAlB,kCAAwC;AAAnC,kBAAMgB,GAAG,mBAAT;;AACJ,kBAAIA,GAAG,KAAK,SAAR,IAAqBA,GAAG,KAAK,SAA7B,IAA0CA,GAAG,KAAK,MAAtD,EAA8D;AAC7D;AACA;;AACDT,cAAAA,OAAO,CAACS,GAAD,CAAP,GAAehB,OAAO,CAACgB,GAAD,CAAtB;AACA;AACD;AACD,SAnBF;AAqBA,OAtBD;AAuBA;;;;;;AAGFR,MAAM,CAACS,OAAP,GAAiBlB,mBAAjB","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst ModuleFilenameHelpers = require(\"./ModuleFilenameHelpers\");\n\nconst validateOptions = require(\"schema-utils\");\nconst schema = require(\"../schemas/plugins/LoaderOptionsPlugin.json\");\n\n/** @typedef {import(\"../declarations/plugins/LoaderOptionsPlugin\").LoaderOptionsPluginOptions} LoaderOptionsPluginOptions */\n\nclass LoaderOptionsPlugin {\n\t/**\n\t * @param {LoaderOptionsPluginOptions} options options object\n\t */\n\tconstructor(options) {\n\t\tvalidateOptions(schema, options || {}, \"Loader Options Plugin\");\n\n\t\tif (typeof options !== \"object\") options = {};\n\t\tif (!options.test) {\n\t\t\toptions.test = {\n\t\t\t\ttest: () => true\n\t\t\t};\n\t\t}\n\t\tthis.options = options;\n\t}\n\n\tapply(compiler) {\n\t\tconst options = this.options;\n\t\tcompiler.hooks.compilation.tap(\"LoaderOptionsPlugin\", compilation => {\n\t\t\tcompilation.hooks.normalModuleLoader.tap(\n\t\t\t\t\"LoaderOptionsPlugin\",\n\t\t\t\t(context, module) => {\n\t\t\t\t\tconst resource = module.resource;\n\t\t\t\t\tif (!resource) return;\n\t\t\t\t\tconst i = resource.indexOf(\"?\");\n\t\t\t\t\tif (\n\t\t\t\t\t\tModuleFilenameHelpers.matchObject(\n\t\t\t\t\t\t\toptions,\n\t\t\t\t\t\t\ti < 0 ? resource : resource.substr(0, i)\n\t\t\t\t\t\t)\n\t\t\t\t\t) {\n\t\t\t\t\t\tfor (const key of Object.keys(options)) {\n\t\t\t\t\t\t\tif (key === \"include\" || key === \"exclude\" || key === \"test\") {\n\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tcontext[key] = options[key];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t);\n\t\t});\n\t}\n}\n\nmodule.exports = LoaderOptionsPlugin;\n"]},"metadata":{},"sourceType":"script"}