{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nvar _classCallCheck = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/createClass\");\n\nvar getPaths = require(\"./getPaths\");\n\nvar forEachBail = require(\"./forEachBail\");\n\nmodule.exports = /*#__PURE__*/function () {\n  function SymlinkPlugin(source, target) {\n    _classCallCheck(this, SymlinkPlugin);\n\n    this.source = source;\n    this.target = target;\n  }\n\n  _createClass(SymlinkPlugin, [{\n    key: \"apply\",\n    value: function apply(resolver) {\n      var target = resolver.ensureHook(this.target);\n      var fs = resolver.fileSystem;\n      resolver.getHook(this.source).tapAsync(\"SymlinkPlugin\", function (request, resolveContext, callback) {\n        var pathsResult = getPaths(request.path);\n        var pathSeqments = pathsResult.seqments;\n        var paths = pathsResult.paths;\n        var containsSymlink = false;\n        forEachBail.withIndex(paths, function (path, idx, callback) {\n          fs.readlink(path, function (err, result) {\n            if (!err && result) {\n              pathSeqments[idx] = result;\n              containsSymlink = true; // Shortcut when absolute symlink found\n\n              if (/^(\\/|[a-zA-Z]:($|\\\\))/.test(result)) return callback(null, idx);\n            }\n\n            callback();\n          });\n        }, function (err, idx) {\n          if (!containsSymlink) return callback();\n          var resultSeqments = typeof idx === \"number\" ? pathSeqments.slice(0, idx + 1) : pathSeqments.slice();\n          var result = resultSeqments.reverse().reduce(function (a, b) {\n            return resolver.join(a, b);\n          });\n          var obj = Object.assign({}, request, {\n            path: result\n          });\n          resolver.doResolve(target, obj, \"resolved symlink to \" + result, resolveContext, callback);\n        });\n      });\n    }\n  }]);\n\n  return SymlinkPlugin;\n}();","map":{"version":3,"sources":["/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/webpack/node_modules/enhanced-resolve/lib/SymlinkPlugin.js"],"names":["getPaths","require","forEachBail","module","exports","source","target","resolver","ensureHook","fs","fileSystem","getHook","tapAsync","request","resolveContext","callback","pathsResult","path","pathSeqments","seqments","paths","containsSymlink","withIndex","idx","readlink","err","result","test","resultSeqments","slice","reverse","reduce","a","b","join","obj","Object","assign","doResolve"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;;;;;AAEA,IAAMA,QAAQ,GAAGC,OAAO,CAAC,YAAD,CAAxB;;AACA,IAAMC,WAAW,GAAGD,OAAO,CAAC,eAAD,CAA3B;;AAEAE,MAAM,CAACC,OAAP;AACC,yBAAYC,MAAZ,EAAoBC,MAApB,EAA4B;AAAA;;AAC3B,SAAKD,MAAL,GAAcA,MAAd;AACA,SAAKC,MAAL,GAAcA,MAAd;AACA;;AAJF;AAAA;AAAA,WAMC,eAAMC,QAAN,EAAgB;AACf,UAAMD,MAAM,GAAGC,QAAQ,CAACC,UAAT,CAAoB,KAAKF,MAAzB,CAAf;AACA,UAAMG,EAAE,GAAGF,QAAQ,CAACG,UAApB;AACAH,MAAAA,QAAQ,CACNI,OADF,CACU,KAAKN,MADf,EAEEO,QAFF,CAEW,eAFX,EAE4B,UAACC,OAAD,EAAUC,cAAV,EAA0BC,QAA1B,EAAuC;AACjE,YAAMC,WAAW,GAAGhB,QAAQ,CAACa,OAAO,CAACI,IAAT,CAA5B;AACA,YAAMC,YAAY,GAAGF,WAAW,CAACG,QAAjC;AACA,YAAMC,KAAK,GAAGJ,WAAW,CAACI,KAA1B;AAEA,YAAIC,eAAe,GAAG,KAAtB;AACAnB,QAAAA,WAAW,CAACoB,SAAZ,CACCF,KADD,EAEC,UAACH,IAAD,EAAOM,GAAP,EAAYR,QAAZ,EAAyB;AACxBN,UAAAA,EAAE,CAACe,QAAH,CAAYP,IAAZ,EAAkB,UAACQ,GAAD,EAAMC,MAAN,EAAiB;AAClC,gBAAI,CAACD,GAAD,IAAQC,MAAZ,EAAoB;AACnBR,cAAAA,YAAY,CAACK,GAAD,CAAZ,GAAoBG,MAApB;AACAL,cAAAA,eAAe,GAAG,IAAlB,CAFmB,CAGnB;;AACA,kBAAI,wBAAwBM,IAAxB,CAA6BD,MAA7B,CAAJ,EACC,OAAOX,QAAQ,CAAC,IAAD,EAAOQ,GAAP,CAAf;AACD;;AACDR,YAAAA,QAAQ;AACR,WATD;AAUA,SAbF,EAcC,UAACU,GAAD,EAAMF,GAAN,EAAc;AACb,cAAI,CAACF,eAAL,EAAsB,OAAON,QAAQ,EAAf;AACtB,cAAMa,cAAc,GACnB,OAAOL,GAAP,KAAe,QAAf,GACGL,YAAY,CAACW,KAAb,CAAmB,CAAnB,EAAsBN,GAAG,GAAG,CAA5B,CADH,GAEGL,YAAY,CAACW,KAAb,EAHJ;AAIA,cAAMH,MAAM,GAAGE,cAAc,CAACE,OAAf,GAAyBC,MAAzB,CAAgC,UAACC,CAAD,EAAIC,CAAJ,EAAU;AACxD,mBAAO1B,QAAQ,CAAC2B,IAAT,CAAcF,CAAd,EAAiBC,CAAjB,CAAP;AACA,WAFc,CAAf;AAGA,cAAME,GAAG,GAAGC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBxB,OAAlB,EAA2B;AACtCI,YAAAA,IAAI,EAAES;AADgC,WAA3B,CAAZ;AAGAnB,UAAAA,QAAQ,CAAC+B,SAAT,CACChC,MADD,EAEC6B,GAFD,EAGC,yBAAyBT,MAH1B,EAICZ,cAJD,EAKCC,QALD;AAOA,SAjCF;AAmCA,OA3CF;AA4CA;AArDF;;AAAA;AAAA","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst getPaths = require(\"./getPaths\");\nconst forEachBail = require(\"./forEachBail\");\n\nmodule.exports = class SymlinkPlugin {\n\tconstructor(source, target) {\n\t\tthis.source = source;\n\t\tthis.target = target;\n\t}\n\n\tapply(resolver) {\n\t\tconst target = resolver.ensureHook(this.target);\n\t\tconst fs = resolver.fileSystem;\n\t\tresolver\n\t\t\t.getHook(this.source)\n\t\t\t.tapAsync(\"SymlinkPlugin\", (request, resolveContext, callback) => {\n\t\t\t\tconst pathsResult = getPaths(request.path);\n\t\t\t\tconst pathSeqments = pathsResult.seqments;\n\t\t\t\tconst paths = pathsResult.paths;\n\n\t\t\t\tlet containsSymlink = false;\n\t\t\t\tforEachBail.withIndex(\n\t\t\t\t\tpaths,\n\t\t\t\t\t(path, idx, callback) => {\n\t\t\t\t\t\tfs.readlink(path, (err, result) => {\n\t\t\t\t\t\t\tif (!err && result) {\n\t\t\t\t\t\t\t\tpathSeqments[idx] = result;\n\t\t\t\t\t\t\t\tcontainsSymlink = true;\n\t\t\t\t\t\t\t\t// Shortcut when absolute symlink found\n\t\t\t\t\t\t\t\tif (/^(\\/|[a-zA-Z]:($|\\\\))/.test(result))\n\t\t\t\t\t\t\t\t\treturn callback(null, idx);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tcallback();\n\t\t\t\t\t\t});\n\t\t\t\t\t},\n\t\t\t\t\t(err, idx) => {\n\t\t\t\t\t\tif (!containsSymlink) return callback();\n\t\t\t\t\t\tconst resultSeqments =\n\t\t\t\t\t\t\ttypeof idx === \"number\"\n\t\t\t\t\t\t\t\t? pathSeqments.slice(0, idx + 1)\n\t\t\t\t\t\t\t\t: pathSeqments.slice();\n\t\t\t\t\t\tconst result = resultSeqments.reverse().reduce((a, b) => {\n\t\t\t\t\t\t\treturn resolver.join(a, b);\n\t\t\t\t\t\t});\n\t\t\t\t\t\tconst obj = Object.assign({}, request, {\n\t\t\t\t\t\t\tpath: result\n\t\t\t\t\t\t});\n\t\t\t\t\t\tresolver.doResolve(\n\t\t\t\t\t\t\ttarget,\n\t\t\t\t\t\t\tobj,\n\t\t\t\t\t\t\t\"resolved symlink to \" + result,\n\t\t\t\t\t\t\tresolveContext,\n\t\t\t\t\t\t\tcallback\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t});\n\t}\n};\n"]},"metadata":{},"sourceType":"script"}