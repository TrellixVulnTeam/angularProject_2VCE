{"ast":null,"code":"'use strict';\n\nvar net = require('net');\n\nvar NetUtils = {\n  bindAvailablePort: function bindAvailablePort(port, listenAddress) {\n    return new Promise(function (resolve, reject) {\n      var server = net.createServer();\n      server.on('error', function (err) {\n        server.close();\n\n        if (err.code === 'EADDRINUSE' || err.code === 'EACCES') {\n          server.listen(++port, listenAddress);\n        } else {\n          reject(new Error(\"Failed to bind \".concat(port, \": \") + (err.stack || err)));\n        }\n      }).on('listening', function () {\n        resolve(server);\n      }).listen(port, listenAddress);\n    });\n  }\n};\nmodule.exports = NetUtils;","map":{"version":3,"sources":["/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/karma/lib/utils/net-utils.js"],"names":["net","require","NetUtils","bindAvailablePort","port","listenAddress","Promise","resolve","reject","server","createServer","on","err","close","code","listen","Error","stack","module","exports"],"mappings":"AAAA;;AAEA,IAAMA,GAAG,GAAGC,OAAO,CAAC,KAAD,CAAnB;;AAEA,IAAMC,QAAQ,GAAG;AACfC,EAAAA,iBADe,6BACIC,IADJ,EACUC,aADV,EACyB;AACtC,WAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,UAAMC,MAAM,GAAGT,GAAG,CAACU,YAAJ,EAAf;AAEAD,MAAAA,MAAM,CACHE,EADH,CACM,OADN,EACe,UAACC,GAAD,EAAS;AACpBH,QAAAA,MAAM,CAACI,KAAP;;AACA,YAAID,GAAG,CAACE,IAAJ,KAAa,YAAb,IAA6BF,GAAG,CAACE,IAAJ,KAAa,QAA9C,EAAwD;AACtDL,UAAAA,MAAM,CAACM,MAAP,CAAc,EAAEX,IAAhB,EAAsBC,aAAtB;AACD,SAFD,MAEO;AACLG,UAAAA,MAAM,CAAC,IAAIQ,KAAJ,CAAU,yBAAkBZ,IAAlB,WAA8BQ,GAAG,CAACK,KAAJ,IAAaL,GAA3C,CAAV,CAAD,CAAN;AACD;AACF,OARH,EASGD,EATH,CASM,WATN,EASmB,YAAM;AACrBJ,QAAAA,OAAO,CAACE,MAAD,CAAP;AACD,OAXH,EAYGM,MAZH,CAYUX,IAZV,EAYgBC,aAZhB;AAaD,KAhBM,CAAP;AAiBD;AAnBc,CAAjB;AAsBAa,MAAM,CAACC,OAAP,GAAiBjB,QAAjB","sourcesContent":["'use strict'\n\nconst net = require('net')\n\nconst NetUtils = {\n  bindAvailablePort (port, listenAddress) {\n    return new Promise((resolve, reject) => {\n      const server = net.createServer()\n\n      server\n        .on('error', (err) => {\n          server.close()\n          if (err.code === 'EADDRINUSE' || err.code === 'EACCES') {\n            server.listen(++port, listenAddress)\n          } else {\n            reject(new Error(`Failed to bind ${port}: ` + (err.stack || err)))\n          }\n        })\n        .on('listening', () => {\n          resolve(server)\n        })\n        .listen(port, listenAddress)\n    })\n  }\n}\n\nmodule.exports = NetUtils\n"]},"metadata":{},"sourceType":"script"}