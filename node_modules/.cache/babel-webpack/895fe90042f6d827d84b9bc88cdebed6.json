{"ast":null,"code":"\"use strict\";\n\nvar errorMessage = function errorMessage(schema, data, message) {\n  return {\n    keyword: \"absolutePath\",\n    params: {\n      absolutePath: data\n    },\n    message: message,\n    parentSchema: schema\n  };\n};\n\nvar getErrorFor = function getErrorFor(shouldBeAbsolute, data, schema) {\n  var message = shouldBeAbsolute ? \"The provided value \".concat(JSON.stringify(data), \" is not an absolute path!\") : \"A relative path is expected. However, the provided value \".concat(JSON.stringify(data), \" is an absolute path!\");\n  return errorMessage(schema, data, message);\n};\n\nmodule.exports = function (ajv) {\n  return ajv.addKeyword(\"absolutePath\", {\n    errors: true,\n    type: \"string\",\n    compile: function compile(expected, schema) {\n      function callback(data) {\n        var passes = true;\n        var isExclamationMarkPresent = data.includes(\"!\");\n\n        if (isExclamationMarkPresent) {\n          callback.errors = [errorMessage(schema, data, \"The provided value \".concat(JSON.stringify(data), \" contains exclamation mark (!) which is not allowed because it's reserved for loader syntax.\"))];\n          passes = false;\n        } // ?:[A-Za-z]:\\\\ - Windows absolute path\n        // \\\\\\\\ - Windows network absolute path\n        // \\/ - Unix-like OS absolute path\n\n\n        var isCorrectAbsolutePath = expected === /^(?:[A-Za-z]:\\\\|\\\\\\\\|\\/)/.test(data);\n\n        if (!isCorrectAbsolutePath) {\n          callback.errors = [getErrorFor(expected, data, schema)];\n          passes = false;\n        }\n\n        return passes;\n      }\n\n      callback.errors = [];\n      return callback;\n    }\n  });\n};","map":{"version":3,"sources":["/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/webpack/schemas/ajv.absolutePath.js"],"names":["errorMessage","schema","data","message","keyword","params","absolutePath","parentSchema","getErrorFor","shouldBeAbsolute","JSON","stringify","module","exports","ajv","addKeyword","errors","type","compile","expected","callback","passes","isExclamationMarkPresent","includes","isCorrectAbsolutePath","test"],"mappings":"AAAA;;AAEA,IAAMA,YAAY,GAAG,SAAfA,YAAe,CAACC,MAAD,EAASC,IAAT,EAAeC,OAAf;AAAA,SAA4B;AAChDC,IAAAA,OAAO,EAAE,cADuC;AAEhDC,IAAAA,MAAM,EAAE;AAAEC,MAAAA,YAAY,EAAEJ;AAAhB,KAFwC;AAGhDC,IAAAA,OAAO,EAAEA,OAHuC;AAIhDI,IAAAA,YAAY,EAAEN;AAJkC,GAA5B;AAAA,CAArB;;AAOA,IAAMO,WAAW,GAAG,SAAdA,WAAc,CAACC,gBAAD,EAAmBP,IAAnB,EAAyBD,MAAzB,EAAoC;AACvD,MAAME,OAAO,GAAGM,gBAAgB,gCACPC,IAAI,CAACC,SAAL,CAAeT,IAAf,CADO,oGAE+BQ,IAAI,CAACC,SAAL,CAC5DT,IAD4D,CAF/B,0BAAhC;AAMA,SAAOF,YAAY,CAACC,MAAD,EAASC,IAAT,EAAeC,OAAf,CAAnB;AACA,CARD;;AAUAS,MAAM,CAACC,OAAP,GAAiB,UAAAC,GAAG;AAAA,SACnBA,GAAG,CAACC,UAAJ,CAAe,cAAf,EAA+B;AAC9BC,IAAAA,MAAM,EAAE,IADsB;AAE9BC,IAAAA,IAAI,EAAE,QAFwB;AAG9BC,IAAAA,OAH8B,mBAGtBC,QAHsB,EAGZlB,MAHY,EAGJ;AACzB,eAASmB,QAAT,CAAkBlB,IAAlB,EAAwB;AACvB,YAAImB,MAAM,GAAG,IAAb;AACA,YAAMC,wBAAwB,GAAGpB,IAAI,CAACqB,QAAL,CAAc,GAAd,CAAjC;;AAEA,YAAID,wBAAJ,EAA8B;AAC7BF,UAAAA,QAAQ,CAACJ,MAAT,GAAkB,CACjBhB,YAAY,CACXC,MADW,EAEXC,IAFW,+BAGWQ,IAAI,CAACC,SAAL,CACrBT,IADqB,CAHX,kGADK,CAAlB;AASAmB,UAAAA,MAAM,GAAG,KAAT;AACA,SAfsB,CAgBvB;AACA;AACA;;;AACA,YAAMG,qBAAqB,GAC1BL,QAAQ,KAAK,2BAA2BM,IAA3B,CAAgCvB,IAAhC,CADd;;AAEA,YAAI,CAACsB,qBAAL,EAA4B;AAC3BJ,UAAAA,QAAQ,CAACJ,MAAT,GAAkB,CAACR,WAAW,CAACW,QAAD,EAAWjB,IAAX,EAAiBD,MAAjB,CAAZ,CAAlB;AACAoB,UAAAA,MAAM,GAAG,KAAT;AACA;;AAED,eAAOA,MAAP;AACA;;AACDD,MAAAA,QAAQ,CAACJ,MAAT,GAAkB,EAAlB;AAEA,aAAOI,QAAP;AACA;AAnC6B,GAA/B,CADmB;AAAA,CAApB","sourcesContent":["\"use strict\";\n\nconst errorMessage = (schema, data, message) => ({\n\tkeyword: \"absolutePath\",\n\tparams: { absolutePath: data },\n\tmessage: message,\n\tparentSchema: schema\n});\n\nconst getErrorFor = (shouldBeAbsolute, data, schema) => {\n\tconst message = shouldBeAbsolute\n\t\t? `The provided value ${JSON.stringify(data)} is not an absolute path!`\n\t\t: `A relative path is expected. However, the provided value ${JSON.stringify(\n\t\t\t\tdata\n\t\t  )} is an absolute path!`;\n\n\treturn errorMessage(schema, data, message);\n};\n\nmodule.exports = ajv =>\n\tajv.addKeyword(\"absolutePath\", {\n\t\terrors: true,\n\t\ttype: \"string\",\n\t\tcompile(expected, schema) {\n\t\t\tfunction callback(data) {\n\t\t\t\tlet passes = true;\n\t\t\t\tconst isExclamationMarkPresent = data.includes(\"!\");\n\n\t\t\t\tif (isExclamationMarkPresent) {\n\t\t\t\t\tcallback.errors = [\n\t\t\t\t\t\terrorMessage(\n\t\t\t\t\t\t\tschema,\n\t\t\t\t\t\t\tdata,\n\t\t\t\t\t\t\t`The provided value ${JSON.stringify(\n\t\t\t\t\t\t\t\tdata\n\t\t\t\t\t\t\t)} contains exclamation mark (!) which is not allowed because it's reserved for loader syntax.`\n\t\t\t\t\t\t)\n\t\t\t\t\t];\n\t\t\t\t\tpasses = false;\n\t\t\t\t}\n\t\t\t\t// ?:[A-Za-z]:\\\\ - Windows absolute path\n\t\t\t\t// \\\\\\\\ - Windows network absolute path\n\t\t\t\t// \\/ - Unix-like OS absolute path\n\t\t\t\tconst isCorrectAbsolutePath =\n\t\t\t\t\texpected === /^(?:[A-Za-z]:\\\\|\\\\\\\\|\\/)/.test(data);\n\t\t\t\tif (!isCorrectAbsolutePath) {\n\t\t\t\t\tcallback.errors = [getErrorFor(expected, data, schema)];\n\t\t\t\t\tpasses = false;\n\t\t\t\t}\n\n\t\t\t\treturn passes;\n\t\t\t}\n\t\t\tcallback.errors = [];\n\n\t\t\treturn callback;\n\t\t}\n\t});\n"]},"metadata":{},"sourceType":"script"}