{"ast":null,"code":"/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n(function (factory) {\n  if (typeof module === \"object\" && typeof module.exports === \"object\") {\n    var v = factory(require, exports);\n    if (v !== undefined) module.exports = v;\n  } else if (typeof define === \"function\" && define.amd) {\n    define(\"@angular/compiler-cli/src/ngtsc/file_system/src/compiler_host\", [\"require\", \"exports\", \"os\", \"typescript\", \"@angular/compiler-cli/src/ngtsc/file_system/src/helpers\"], factory);\n  }\n})(function (require, exports) {\n  \"use strict\";\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.NgtscCompilerHost = void 0; /// <reference types=\"node\" />\n\n  var os = require(\"os\");\n\n  var ts = require(\"typescript\");\n\n  var helpers_1 = require(\"@angular/compiler-cli/src/ngtsc/file_system/src/helpers\");\n\n  var NgtscCompilerHost =\n  /** @class */\n  function () {\n    function NgtscCompilerHost(fs, options) {\n      if (options === void 0) {\n        options = {};\n      }\n\n      this.fs = fs;\n      this.options = options;\n    }\n\n    NgtscCompilerHost.prototype.getSourceFile = function (fileName, languageVersion) {\n      var text = this.readFile(fileName);\n      return text !== undefined ? ts.createSourceFile(fileName, text, languageVersion, true) : undefined;\n    };\n\n    NgtscCompilerHost.prototype.getDefaultLibFileName = function (options) {\n      return this.fs.join(this.getDefaultLibLocation(), ts.getDefaultLibFileName(options));\n    };\n\n    NgtscCompilerHost.prototype.getDefaultLibLocation = function () {\n      return this.fs.getDefaultLibLocation();\n    };\n\n    NgtscCompilerHost.prototype.writeFile = function (fileName, data, writeByteOrderMark, onError, sourceFiles) {\n      var path = helpers_1.absoluteFrom(fileName);\n      this.fs.ensureDir(this.fs.dirname(path));\n      this.fs.writeFile(path, data);\n    };\n\n    NgtscCompilerHost.prototype.getCurrentDirectory = function () {\n      return this.fs.pwd();\n    };\n\n    NgtscCompilerHost.prototype.getCanonicalFileName = function (fileName) {\n      return this.useCaseSensitiveFileNames() ? fileName : fileName.toLowerCase();\n    };\n\n    NgtscCompilerHost.prototype.useCaseSensitiveFileNames = function () {\n      return this.fs.isCaseSensitive();\n    };\n\n    NgtscCompilerHost.prototype.getNewLine = function () {\n      switch (this.options.newLine) {\n        case ts.NewLineKind.CarriageReturnLineFeed:\n          return '\\r\\n';\n\n        case ts.NewLineKind.LineFeed:\n          return '\\n';\n\n        default:\n          return os.EOL;\n      }\n    };\n\n    NgtscCompilerHost.prototype.fileExists = function (fileName) {\n      var absPath = this.fs.resolve(fileName);\n      return this.fs.exists(absPath) && this.fs.stat(absPath).isFile();\n    };\n\n    NgtscCompilerHost.prototype.readFile = function (fileName) {\n      var absPath = this.fs.resolve(fileName);\n\n      if (!this.fileExists(absPath)) {\n        return undefined;\n      }\n\n      return this.fs.readFile(absPath);\n    };\n\n    return NgtscCompilerHost;\n  }();\n\n  exports.NgtscCompilerHost = NgtscCompilerHost;\n});","map":{"version":3,"sources":["../../../../../../../../../packages/compiler-cli/src/ngtsc/file_system/src/compiler_host.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/// <reference types=\"node\" />\nimport * as os from 'os';\nimport * as ts from 'typescript';\n\nimport {absoluteFrom} from './helpers';\nimport {FileSystem} from './types';\n\nexport class NgtscCompilerHost implements ts.CompilerHost {\n  constructor(protected fs: FileSystem, protected options: ts.CompilerOptions = {}) {}\n\n  getSourceFile(fileName: string, languageVersion: ts.ScriptTarget): ts.SourceFile|undefined {\n    const text = this.readFile(fileName);\n    return text !== undefined ? ts.createSourceFile(fileName, text, languageVersion, true) :\n                                undefined;\n  }\n\n  getDefaultLibFileName(options: ts.CompilerOptions): string {\n    return this.fs.join(this.getDefaultLibLocation(), ts.getDefaultLibFileName(options));\n  }\n\n  getDefaultLibLocation(): string {\n    return this.fs.getDefaultLibLocation();\n  }\n\n  writeFile(\n      fileName: string, data: string, writeByteOrderMark: boolean,\n      onError: ((message: string) => void)|undefined,\n      sourceFiles?: ReadonlyArray<ts.SourceFile>): void {\n    const path = absoluteFrom(fileName);\n    this.fs.ensureDir(this.fs.dirname(path));\n    this.fs.writeFile(path, data);\n  }\n\n  getCurrentDirectory(): string {\n    return this.fs.pwd();\n  }\n\n  getCanonicalFileName(fileName: string): string {\n    return this.useCaseSensitiveFileNames() ? fileName : fileName.toLowerCase();\n  }\n\n  useCaseSensitiveFileNames(): boolean {\n    return this.fs.isCaseSensitive();\n  }\n\n  getNewLine(): string {\n    switch (this.options.newLine) {\n      case ts.NewLineKind.CarriageReturnLineFeed:\n        return '\\r\\n';\n      case ts.NewLineKind.LineFeed:\n        return '\\n';\n      default:\n        return os.EOL;\n    }\n  }\n\n  fileExists(fileName: string): boolean {\n    const absPath = this.fs.resolve(fileName);\n    return this.fs.exists(absPath) && this.fs.stat(absPath).isFile();\n  }\n\n  readFile(fileName: string): string|undefined {\n    const absPath = this.fs.resolve(fileName);\n    if (!this.fileExists(absPath)) {\n      return undefined;\n    }\n    return this.fs.readFile(absPath);\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}