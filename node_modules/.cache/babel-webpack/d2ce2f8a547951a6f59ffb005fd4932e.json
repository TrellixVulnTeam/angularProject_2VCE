{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nvar _classCallCheck = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/createClass\");\n\nvar getNumberOfLines = require(\"./helpers\").getNumberOfLines;\n\nvar getUnfinishedLine = require(\"./helpers\").getUnfinishedLine;\n\nvar CodeNode = /*#__PURE__*/function () {\n  function CodeNode(generatedCode) {\n    _classCallCheck(this, CodeNode);\n\n    this.generatedCode = generatedCode;\n  }\n\n  _createClass(CodeNode, [{\n    key: \"clone\",\n    value: function clone() {\n      return new CodeNode(this.generatedCode);\n    }\n  }, {\n    key: \"getGeneratedCode\",\n    value: function getGeneratedCode() {\n      return this.generatedCode;\n    }\n  }, {\n    key: \"getMappings\",\n    value: function getMappings(mappingsContext) {\n      var lines = getNumberOfLines(this.generatedCode);\n      var mapping = Array(lines + 1).join(\";\");\n\n      if (lines > 0) {\n        mappingsContext.unfinishedGeneratedLine = getUnfinishedLine(this.generatedCode);\n\n        if (mappingsContext.unfinishedGeneratedLine > 0) {\n          return mapping + \"A\";\n        } else {\n          return mapping;\n        }\n      } else {\n        var prevUnfinished = mappingsContext.unfinishedGeneratedLine;\n        mappingsContext.unfinishedGeneratedLine += getUnfinishedLine(this.generatedCode);\n\n        if (prevUnfinished === 0 && mappingsContext.unfinishedGeneratedLine > 0) {\n          return \"A\";\n        } else {\n          return \"\";\n        }\n      }\n    }\n  }, {\n    key: \"addGeneratedCode\",\n    value: function addGeneratedCode(generatedCode) {\n      this.generatedCode += generatedCode;\n    }\n  }, {\n    key: \"mapGeneratedCode\",\n    value: function mapGeneratedCode(fn) {\n      var generatedCode = fn(this.generatedCode);\n      return new CodeNode(generatedCode);\n    }\n  }, {\n    key: \"getNormalizedNodes\",\n    value: function getNormalizedNodes() {\n      return [this];\n    }\n  }, {\n    key: \"merge\",\n    value: function merge(otherNode) {\n      if (otherNode instanceof CodeNode) {\n        this.generatedCode += otherNode.generatedCode;\n        return this;\n      }\n\n      return false;\n    }\n  }]);\n\n  return CodeNode;\n}();\n\nmodule.exports = CodeNode;","map":{"version":3,"sources":["/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/source-list-map/lib/CodeNode.js"],"names":["getNumberOfLines","require","getUnfinishedLine","CodeNode","generatedCode","mappingsContext","lines","mapping","Array","join","unfinishedGeneratedLine","prevUnfinished","fn","otherNode","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;;;;;AAEA,IAAMA,gBAAgB,GAAGC,OAAO,CAAC,WAAD,CAAP,CAAqBD,gBAA9C;;AACA,IAAME,iBAAiB,GAAGD,OAAO,CAAC,WAAD,CAAP,CAAqBC,iBAA/C;;IAEMC,Q;AACL,oBAAYC,aAAZ,EAA2B;AAAA;;AAC1B,SAAKA,aAAL,GAAqBA,aAArB;AACA;;;;WAED,iBAAQ;AACP,aAAO,IAAID,QAAJ,CAAa,KAAKC,aAAlB,CAAP;AACA;;;WAED,4BAAmB;AAClB,aAAO,KAAKA,aAAZ;AACA;;;WAED,qBAAYC,eAAZ,EAA6B;AAC5B,UAAMC,KAAK,GAAGN,gBAAgB,CAAC,KAAKI,aAAN,CAA9B;AACA,UAAMG,OAAO,GAAGC,KAAK,CAACF,KAAK,GAAC,CAAP,CAAL,CAAeG,IAAf,CAAoB,GAApB,CAAhB;;AACA,UAAGH,KAAK,GAAG,CAAX,EAAc;AACbD,QAAAA,eAAe,CAACK,uBAAhB,GAA0CR,iBAAiB,CAAC,KAAKE,aAAN,CAA3D;;AACA,YAAGC,eAAe,CAACK,uBAAhB,GAA0C,CAA7C,EAAgD;AAC/C,iBAAOH,OAAO,GAAG,GAAjB;AACA,SAFD,MAEO;AACN,iBAAOA,OAAP;AACA;AACD,OAPD,MAOO;AACN,YAAMI,cAAc,GAAGN,eAAe,CAACK,uBAAvC;AACAL,QAAAA,eAAe,CAACK,uBAAhB,IAA2CR,iBAAiB,CAAC,KAAKE,aAAN,CAA5D;;AACA,YAAGO,cAAc,KAAK,CAAnB,IAAwBN,eAAe,CAACK,uBAAhB,GAA0C,CAArE,EAAwE;AACvE,iBAAO,GAAP;AACA,SAFD,MAEO;AACN,iBAAO,EAAP;AACA;AACD;AACD;;;WAED,0BAAiBN,aAAjB,EAAgC;AAC/B,WAAKA,aAAL,IAAsBA,aAAtB;AACA;;;WAED,0BAAiBQ,EAAjB,EAAqB;AACpB,UAAMR,aAAa,GAAGQ,EAAE,CAAC,KAAKR,aAAN,CAAxB;AACA,aAAO,IAAID,QAAJ,CAAaC,aAAb,CAAP;AACA;;;WAED,8BAAqB;AACpB,aAAO,CAAC,IAAD,CAAP;AACA;;;WAED,eAAMS,SAAN,EAAiB;AAChB,UAAGA,SAAS,YAAYV,QAAxB,EAAkC;AACjC,aAAKC,aAAL,IAAsBS,SAAS,CAACT,aAAhC;AACA,eAAO,IAAP;AACA;;AACD,aAAO,KAAP;AACA;;;;;;AAGFU,MAAM,CAACC,OAAP,GAAiBZ,QAAjB","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst getNumberOfLines = require(\"./helpers\").getNumberOfLines;\nconst getUnfinishedLine = require(\"./helpers\").getUnfinishedLine;\n\nclass CodeNode {\n\tconstructor(generatedCode) {\n\t\tthis.generatedCode = generatedCode;\n\t}\n\n\tclone() {\n\t\treturn new CodeNode(this.generatedCode);\n\t}\n\n\tgetGeneratedCode() {\n\t\treturn this.generatedCode;\n\t}\n\n\tgetMappings(mappingsContext) {\n\t\tconst lines = getNumberOfLines(this.generatedCode);\n\t\tconst mapping = Array(lines+1).join(\";\");\n\t\tif(lines > 0) {\n\t\t\tmappingsContext.unfinishedGeneratedLine = getUnfinishedLine(this.generatedCode);\n\t\t\tif(mappingsContext.unfinishedGeneratedLine > 0) {\n\t\t\t\treturn mapping + \"A\";\n\t\t\t} else {\n\t\t\t\treturn mapping;\n\t\t\t}\n\t\t} else {\n\t\t\tconst prevUnfinished = mappingsContext.unfinishedGeneratedLine;\n\t\t\tmappingsContext.unfinishedGeneratedLine += getUnfinishedLine(this.generatedCode);\n\t\t\tif(prevUnfinished === 0 && mappingsContext.unfinishedGeneratedLine > 0) {\n\t\t\t\treturn \"A\";\n\t\t\t} else {\n\t\t\t\treturn \"\";\n\t\t\t}\n\t\t}\n\t}\n\n\taddGeneratedCode(generatedCode) {\n\t\tthis.generatedCode += generatedCode;\n\t}\n\n\tmapGeneratedCode(fn) {\n\t\tconst generatedCode = fn(this.generatedCode);\n\t\treturn new CodeNode(generatedCode);\n\t}\n\n\tgetNormalizedNodes() {\n\t\treturn [this];\n\t}\n\n\tmerge(otherNode) {\n\t\tif(otherNode instanceof CodeNode) {\n\t\t\tthis.generatedCode += otherNode.generatedCode;\n\t\t\treturn this;\n\t\t}\n\t\treturn false;\n\t}\n}\n\nmodule.exports = CodeNode;\n"]},"metadata":{},"sourceType":"script"}