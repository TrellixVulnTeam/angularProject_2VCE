{"ast":null,"code":"'use strict';\n\nvar path = require('path');\n\nvar globby = require('globby');\n\nvar isPathCwd = require('is-path-cwd');\n\nvar isPathInCwd = require('is-path-in-cwd');\n\nvar pify = require('pify');\n\nvar rimraf = require('rimraf');\n\nvar pMap = require('p-map');\n\nvar rimrafP = pify(rimraf);\n\nfunction safeCheck(file) {\n  if (isPathCwd(file)) {\n    throw new Error('Cannot delete the current working directory. Can be overridden with the `force` option.');\n  }\n\n  if (!isPathInCwd(file)) {\n    throw new Error('Cannot delete files/folders outside the current working directory. Can be overridden with the `force` option.');\n  }\n}\n\nvar del = function del(patterns, options) {\n  options = Object.assign({}, options);\n  var _options = options,\n      force = _options.force,\n      dryRun = _options.dryRun;\n  delete options.force;\n  delete options.dryRun;\n\n  var mapper = function mapper(file) {\n    if (!force) {\n      safeCheck(file);\n    }\n\n    file = path.resolve(options.cwd || '', file);\n\n    if (dryRun) {\n      return file;\n    }\n\n    return rimrafP(file, {\n      glob: false\n    }).then(function () {\n      return file;\n    });\n  };\n\n  return globby(patterns, options).then(function (files) {\n    return pMap(files, mapper, options);\n  });\n};\n\nmodule.exports = del; // TODO: Remove this for the next major release\n\nmodule.exports.default = del;\n\nmodule.exports.sync = function (patterns, options) {\n  options = Object.assign({}, options);\n  var _options2 = options,\n      force = _options2.force,\n      dryRun = _options2.dryRun;\n  delete options.force;\n  delete options.dryRun;\n  return globby.sync(patterns, options).map(function (file) {\n    if (!force) {\n      safeCheck(file);\n    }\n\n    file = path.resolve(options.cwd || '', file);\n\n    if (!dryRun) {\n      rimraf.sync(file, {\n        glob: false\n      });\n    }\n\n    return file;\n  });\n};","map":{"version":3,"sources":["/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/webpack-dev-server/node_modules/del/index.js"],"names":["path","require","globby","isPathCwd","isPathInCwd","pify","rimraf","pMap","rimrafP","safeCheck","file","Error","del","patterns","options","Object","assign","force","dryRun","mapper","resolve","cwd","glob","then","files","module","exports","default","sync","map"],"mappings":"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","sourcesContent":["'use strict';\nconst path = require('path');\nconst globby = require('globby');\nconst isPathCwd = require('is-path-cwd');\nconst isPathInCwd = require('is-path-in-cwd');\nconst pify = require('pify');\nconst rimraf = require('rimraf');\nconst pMap = require('p-map');\n\nconst rimrafP = pify(rimraf);\n\nfunction safeCheck(file) {\n\tif (isPathCwd(file)) {\n\t\tthrow new Error('Cannot delete the current working directory. Can be overridden with the `force` option.');\n\t}\n\n\tif (!isPathInCwd(file)) {\n\t\tthrow new Error('Cannot delete files/folders outside the current working directory. Can be overridden with the `force` option.');\n\t}\n}\n\nconst del = (patterns, options) => {\n\toptions = Object.assign({}, options);\n\n\tconst {force, dryRun} = options;\n\tdelete options.force;\n\tdelete options.dryRun;\n\n\tconst mapper = file => {\n\t\tif (!force) {\n\t\t\tsafeCheck(file);\n\t\t}\n\n\t\tfile = path.resolve(options.cwd || '', file);\n\n\t\tif (dryRun) {\n\t\t\treturn file;\n\t\t}\n\n\t\treturn rimrafP(file, {glob: false}).then(() => file);\n\t};\n\n\treturn globby(patterns, options).then(files => pMap(files, mapper, options));\n};\n\nmodule.exports = del;\n// TODO: Remove this for the next major release\nmodule.exports.default = del;\n\nmodule.exports.sync = (patterns, options) => {\n\toptions = Object.assign({}, options);\n\n\tconst {force, dryRun} = options;\n\tdelete options.force;\n\tdelete options.dryRun;\n\n\treturn globby.sync(patterns, options).map(file => {\n\t\tif (!force) {\n\t\t\tsafeCheck(file);\n\t\t}\n\n\t\tfile = path.resolve(options.cwd || '', file);\n\n\t\tif (!dryRun) {\n\t\t\trimraf.sync(file, {glob: false});\n\t\t}\n\n\t\treturn file;\n\t});\n};\n"]},"metadata":{},"sourceType":"script"}