{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.transformJavascript = void 0;\n\nvar ts = require(\"typescript\");\n\nfunction validateDiagnostics(diagnostics, strict) {\n  // Print error diagnostics.\n  var hasError = diagnostics.some(function (diag) {\n    return diag.category === ts.DiagnosticCategory.Error;\n  });\n\n  if (hasError) {\n    // Throw only if we're in strict mode, otherwise return original content.\n    if (strict) {\n      var errorMessages = ts.formatDiagnostics(diagnostics, {\n        getCurrentDirectory: function getCurrentDirectory() {\n          return ts.sys.getCurrentDirectory();\n        },\n        getNewLine: function getNewLine() {\n          return ts.sys.newLine;\n        },\n        getCanonicalFileName: function getCanonicalFileName(f) {\n          return f;\n        }\n      });\n      throw new Error(\"\\n        TS failed with the following error messages:\\n\\n        \".concat(errorMessages, \"\\n      \"));\n    } else {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction transformJavascript(options) {\n  var content = options.content,\n      getTransforms = options.getTransforms,\n      emitSourceMap = options.emitSourceMap,\n      inputFilePath = options.inputFilePath,\n      outputFilePath = options.outputFilePath,\n      strict = options.strict; // Bail if there's no transform to do.\n\n  if (getTransforms.length === 0) {\n    return {\n      content: null,\n      sourceMap: null,\n      emitSkipped: true\n    };\n  }\n\n  var allowFastPath = options.typeCheck === false && !emitSourceMap;\n  var outputs = new Map();\n  var tempFilename = 'bo-default-file.js';\n  var tempSourceFile = ts.createSourceFile(tempFilename, content, ts.ScriptTarget.Latest, allowFastPath);\n  var parseDiagnostics = tempSourceFile.parseDiagnostics;\n  var tsOptions = {\n    // We target latest so that there is no downleveling.\n    target: ts.ScriptTarget.Latest,\n    isolatedModules: true,\n    suppressOutputPathCheck: true,\n    allowNonTsExtensions: true,\n    noLib: true,\n    noResolve: true,\n    sourceMap: emitSourceMap,\n    inlineSources: emitSourceMap,\n    inlineSourceMap: false\n  };\n\n  if (allowFastPath && parseDiagnostics) {\n    if (!validateDiagnostics(parseDiagnostics, strict)) {\n      return {\n        content: null,\n        sourceMap: null,\n        emitSkipped: true\n      };\n    } // All fast path transformers do not use a program\n\n\n    var _transforms = getTransforms.map(function (getTf) {\n      return getTf(\n      /* program */\n      undefined);\n    });\n\n    var result = ts.transform(tempSourceFile, _transforms, tsOptions);\n\n    if (result.transformed.length === 0 || result.transformed[0] === tempSourceFile) {\n      return {\n        content: null,\n        sourceMap: null,\n        emitSkipped: true\n      };\n    }\n\n    var printer = ts.createPrinter(undefined, {\n      onEmitNode: result.emitNodeWithNotification,\n      substituteNode: result.substituteNode\n    });\n    var output = printer.printFile(result.transformed[0]);\n    result.dispose();\n    return {\n      content: output,\n      sourceMap: null,\n      emitSkipped: false\n    };\n  }\n\n  var host = {\n    getSourceFile: function getSourceFile(fileName) {\n      if (fileName !== tempFilename) {\n        throw new Error(\"File \".concat(fileName, \" does not have a sourceFile.\"));\n      }\n\n      return tempSourceFile;\n    },\n    getDefaultLibFileName: function getDefaultLibFileName() {\n      return 'lib.d.ts';\n    },\n    getCurrentDirectory: function getCurrentDirectory() {\n      return '';\n    },\n    getDirectories: function getDirectories() {\n      return [];\n    },\n    getCanonicalFileName: function getCanonicalFileName(fileName) {\n      return fileName;\n    },\n    useCaseSensitiveFileNames: function useCaseSensitiveFileNames() {\n      return true;\n    },\n    getNewLine: function getNewLine() {\n      return '\\n';\n    },\n    fileExists: function fileExists(fileName) {\n      return fileName === tempFilename;\n    },\n    readFile: function readFile(_fileName) {\n      return '';\n    },\n    writeFile: function writeFile(fileName, text) {\n      return outputs.set(fileName, text);\n    }\n  };\n  var program = ts.createProgram([tempFilename], tsOptions, host);\n  var diagnostics = program.getSyntacticDiagnostics(tempSourceFile);\n\n  if (!validateDiagnostics(diagnostics, strict)) {\n    return {\n      content: null,\n      sourceMap: null,\n      emitSkipped: true\n    };\n  } // We need the checker inside transforms.\n\n\n  var transforms = getTransforms.map(function (getTf) {\n    return getTf(program);\n  });\n  program.emit(undefined, undefined, undefined, undefined, {\n    before: transforms,\n    after: []\n  });\n  var transformedContent = outputs.get(tempFilename);\n\n  if (!transformedContent) {\n    return {\n      content: null,\n      sourceMap: null,\n      emitSkipped: true\n    };\n  }\n\n  var sourceMap = null;\n  var tsSourceMap = outputs.get(\"\".concat(tempFilename, \".map\"));\n\n  if (emitSourceMap && tsSourceMap) {\n    var urlRegExp = /^\\/\\/# sourceMappingURL=[^\\r\\n]*/gm;\n    sourceMap = JSON.parse(tsSourceMap); // Fix sourcemaps file references.\n\n    if (outputFilePath) {\n      sourceMap.file = outputFilePath;\n      transformedContent = transformedContent.replace(urlRegExp, \"//# sourceMappingURL=\".concat(sourceMap.file, \".map\\n\"));\n\n      if (inputFilePath) {\n        sourceMap.sources = [inputFilePath];\n      } else {\n        sourceMap.sources = [''];\n      }\n    } else {\n      // TODO: figure out if we should inline sources here.\n      transformedContent = transformedContent.replace(urlRegExp, '');\n      sourceMap.file = '';\n      sourceMap.sources = [''];\n    }\n  }\n\n  return {\n    content: transformedContent,\n    sourceMap: sourceMap,\n    emitSkipped: false\n  };\n}\n\nexports.transformJavascript = transformJavascript;","map":{"version":3,"sources":["/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@angular-devkit/build-optimizer/src/helpers/transform-javascript.js"],"names":["Object","defineProperty","exports","value","transformJavascript","ts","require","validateDiagnostics","diagnostics","strict","hasError","some","diag","category","DiagnosticCategory","Error","errorMessages","formatDiagnostics","getCurrentDirectory","sys","getNewLine","newLine","getCanonicalFileName","f","options","content","getTransforms","emitSourceMap","inputFilePath","outputFilePath","length","sourceMap","emitSkipped","allowFastPath","typeCheck","outputs","Map","tempFilename","tempSourceFile","createSourceFile","ScriptTarget","Latest","parseDiagnostics","tsOptions","target","isolatedModules","suppressOutputPathCheck","allowNonTsExtensions","noLib","noResolve","inlineSources","inlineSourceMap","transforms","map","getTf","undefined","result","transform","transformed","printer","createPrinter","onEmitNode","emitNodeWithNotification","substituteNode","output","printFile","dispose","host","getSourceFile","fileName","getDefaultLibFileName","getDirectories","useCaseSensitiveFileNames","fileExists","readFile","_fileName","writeFile","text","set","program","createProgram","getSyntacticDiagnostics","emit","before","after","transformedContent","get","tsSourceMap","urlRegExp","JSON","parse","file","replace","sources"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.transformJavascript = void 0;\nconst ts = require(\"typescript\");\nfunction validateDiagnostics(diagnostics, strict) {\n    // Print error diagnostics.\n    const hasError = diagnostics.some(diag => diag.category === ts.DiagnosticCategory.Error);\n    if (hasError) {\n        // Throw only if we're in strict mode, otherwise return original content.\n        if (strict) {\n            const errorMessages = ts.formatDiagnostics(diagnostics, {\n                getCurrentDirectory: () => ts.sys.getCurrentDirectory(),\n                getNewLine: () => ts.sys.newLine,\n                getCanonicalFileName: (f) => f,\n            });\n            throw new Error(`\n        TS failed with the following error messages:\n\n        ${errorMessages}\n      `);\n        }\n        else {\n            return false;\n        }\n    }\n    return true;\n}\nfunction transformJavascript(options) {\n    const { content, getTransforms, emitSourceMap, inputFilePath, outputFilePath, strict, } = options;\n    // Bail if there's no transform to do.\n    if (getTransforms.length === 0) {\n        return {\n            content: null,\n            sourceMap: null,\n            emitSkipped: true,\n        };\n    }\n    const allowFastPath = options.typeCheck === false && !emitSourceMap;\n    const outputs = new Map();\n    const tempFilename = 'bo-default-file.js';\n    const tempSourceFile = ts.createSourceFile(tempFilename, content, ts.ScriptTarget.Latest, allowFastPath);\n    const parseDiagnostics = tempSourceFile.parseDiagnostics;\n    const tsOptions = {\n        // We target latest so that there is no downleveling.\n        target: ts.ScriptTarget.Latest,\n        isolatedModules: true,\n        suppressOutputPathCheck: true,\n        allowNonTsExtensions: true,\n        noLib: true,\n        noResolve: true,\n        sourceMap: emitSourceMap,\n        inlineSources: emitSourceMap,\n        inlineSourceMap: false,\n    };\n    if (allowFastPath && parseDiagnostics) {\n        if (!validateDiagnostics(parseDiagnostics, strict)) {\n            return {\n                content: null,\n                sourceMap: null,\n                emitSkipped: true,\n            };\n        }\n        // All fast path transformers do not use a program\n        const transforms = getTransforms.map((getTf) => getTf(/* program */ undefined));\n        const result = ts.transform(tempSourceFile, transforms, tsOptions);\n        if (result.transformed.length === 0 || result.transformed[0] === tempSourceFile) {\n            return {\n                content: null,\n                sourceMap: null,\n                emitSkipped: true,\n            };\n        }\n        const printer = ts.createPrinter(undefined, {\n            onEmitNode: result.emitNodeWithNotification,\n            substituteNode: result.substituteNode,\n        });\n        const output = printer.printFile(result.transformed[0]);\n        result.dispose();\n        return {\n            content: output,\n            sourceMap: null,\n            emitSkipped: false,\n        };\n    }\n    const host = {\n        getSourceFile: (fileName) => {\n            if (fileName !== tempFilename) {\n                throw new Error(`File ${fileName} does not have a sourceFile.`);\n            }\n            return tempSourceFile;\n        },\n        getDefaultLibFileName: () => 'lib.d.ts',\n        getCurrentDirectory: () => '',\n        getDirectories: () => [],\n        getCanonicalFileName: (fileName) => fileName,\n        useCaseSensitiveFileNames: () => true,\n        getNewLine: () => '\\n',\n        fileExists: (fileName) => fileName === tempFilename,\n        readFile: (_fileName) => '',\n        writeFile: (fileName, text) => outputs.set(fileName, text),\n    };\n    const program = ts.createProgram([tempFilename], tsOptions, host);\n    const diagnostics = program.getSyntacticDiagnostics(tempSourceFile);\n    if (!validateDiagnostics(diagnostics, strict)) {\n        return {\n            content: null,\n            sourceMap: null,\n            emitSkipped: true,\n        };\n    }\n    // We need the checker inside transforms.\n    const transforms = getTransforms.map((getTf) => getTf(program));\n    program.emit(undefined, undefined, undefined, undefined, { before: transforms, after: [] });\n    let transformedContent = outputs.get(tempFilename);\n    if (!transformedContent) {\n        return {\n            content: null,\n            sourceMap: null,\n            emitSkipped: true,\n        };\n    }\n    let sourceMap = null;\n    const tsSourceMap = outputs.get(`${tempFilename}.map`);\n    if (emitSourceMap && tsSourceMap) {\n        const urlRegExp = /^\\/\\/# sourceMappingURL=[^\\r\\n]*/gm;\n        sourceMap = JSON.parse(tsSourceMap);\n        // Fix sourcemaps file references.\n        if (outputFilePath) {\n            sourceMap.file = outputFilePath;\n            transformedContent = transformedContent.replace(urlRegExp, `//# sourceMappingURL=${sourceMap.file}.map\\n`);\n            if (inputFilePath) {\n                sourceMap.sources = [inputFilePath];\n            }\n            else {\n                sourceMap.sources = [''];\n            }\n        }\n        else {\n            // TODO: figure out if we should inline sources here.\n            transformedContent = transformedContent.replace(urlRegExp, '');\n            sourceMap.file = '';\n            sourceMap.sources = [''];\n        }\n    }\n    return {\n        content: transformedContent,\n        sourceMap,\n        emitSkipped: false,\n    };\n}\nexports.transformJavascript = transformJavascript;\n"]},"metadata":{},"sourceType":"script"}