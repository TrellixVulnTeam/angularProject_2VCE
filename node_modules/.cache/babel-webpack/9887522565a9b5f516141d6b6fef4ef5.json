{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nvar _classCallCheck = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/createClass\");\n\nvar concord = require(\"./concord\");\n\nvar DescriptionFileUtils = require(\"./DescriptionFileUtils\");\n\nvar getInnerRequest = require(\"./getInnerRequest\");\n\nmodule.exports = /*#__PURE__*/function () {\n  function ConcordModulesPlugin(source, options, target) {\n    _classCallCheck(this, ConcordModulesPlugin);\n\n    this.source = source;\n    this.options = options;\n    this.target = target;\n  }\n\n  _createClass(ConcordModulesPlugin, [{\n    key: \"apply\",\n    value: function apply(resolver) {\n      var target = resolver.ensureHook(this.target);\n      resolver.getHook(this.source).tapAsync(\"ConcordModulesPlugin\", function (request, resolveContext, callback) {\n        var innerRequest = getInnerRequest(resolver, request);\n        if (!innerRequest) return callback();\n        var concordField = DescriptionFileUtils.getField(request.descriptionFileData, \"concord\");\n        if (!concordField) return callback();\n        var data = concord.matchModule(request.context, concordField, innerRequest);\n        if (data === innerRequest) return callback();\n        if (data === undefined) return callback();\n\n        if (data === false) {\n          var ignoreObj = Object.assign({}, request, {\n            path: false\n          });\n          return callback(null, ignoreObj);\n        }\n\n        var obj = Object.assign({}, request, {\n          path: request.descriptionFileRoot,\n          request: data\n        });\n        resolver.doResolve(target, obj, \"aliased from description file \" + request.descriptionFilePath + \" with mapping '\" + innerRequest + \"' to '\" + data + \"'\", resolveContext, function (err, result) {\n          if (err) return callback(err); // Don't allow other aliasing or raw request\n\n          if (result === undefined) return callback(null, null);\n          callback(null, result);\n        });\n      });\n    }\n  }]);\n\n  return ConcordModulesPlugin;\n}();","map":{"version":3,"sources":["/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/webpack/node_modules/enhanced-resolve/lib/ConcordModulesPlugin.js"],"names":["concord","require","DescriptionFileUtils","getInnerRequest","module","exports","source","options","target","resolver","ensureHook","getHook","tapAsync","request","resolveContext","callback","innerRequest","concordField","getField","descriptionFileData","data","matchModule","context","undefined","ignoreObj","Object","assign","path","obj","descriptionFileRoot","doResolve","descriptionFilePath","err","result"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;;;;;AAEA,IAAMA,OAAO,GAAGC,OAAO,CAAC,WAAD,CAAvB;;AACA,IAAMC,oBAAoB,GAAGD,OAAO,CAAC,wBAAD,CAApC;;AACA,IAAME,eAAe,GAAGF,OAAO,CAAC,mBAAD,CAA/B;;AAEAG,MAAM,CAACC,OAAP;AACC,gCAAYC,MAAZ,EAAoBC,OAApB,EAA6BC,MAA7B,EAAqC;AAAA;;AACpC,SAAKF,MAAL,GAAcA,MAAd;AACA,SAAKC,OAAL,GAAeA,OAAf;AACA,SAAKC,MAAL,GAAcA,MAAd;AACA;;AALF;AAAA;AAAA,WAOC,eAAMC,QAAN,EAAgB;AACf,UAAMD,MAAM,GAAGC,QAAQ,CAACC,UAAT,CAAoB,KAAKF,MAAzB,CAAf;AACAC,MAAAA,QAAQ,CACNE,OADF,CACU,KAAKL,MADf,EAEEM,QAFF,CAEW,sBAFX,EAEmC,UAACC,OAAD,EAAUC,cAAV,EAA0BC,QAA1B,EAAuC;AACxE,YAAMC,YAAY,GAAGb,eAAe,CAACM,QAAD,EAAWI,OAAX,CAApC;AACA,YAAI,CAACG,YAAL,EAAmB,OAAOD,QAAQ,EAAf;AACnB,YAAME,YAAY,GAAGf,oBAAoB,CAACgB,QAArB,CACpBL,OAAO,CAACM,mBADY,EAEpB,SAFoB,CAArB;AAIA,YAAI,CAACF,YAAL,EAAmB,OAAOF,QAAQ,EAAf;AACnB,YAAMK,IAAI,GAAGpB,OAAO,CAACqB,WAAR,CACZR,OAAO,CAACS,OADI,EAEZL,YAFY,EAGZD,YAHY,CAAb;AAKA,YAAII,IAAI,KAAKJ,YAAb,EAA2B,OAAOD,QAAQ,EAAf;AAC3B,YAAIK,IAAI,KAAKG,SAAb,EAAwB,OAAOR,QAAQ,EAAf;;AACxB,YAAIK,IAAI,KAAK,KAAb,EAAoB;AACnB,cAAMI,SAAS,GAAGC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBb,OAAlB,EAA2B;AAC5Cc,YAAAA,IAAI,EAAE;AADsC,WAA3B,CAAlB;AAGA,iBAAOZ,QAAQ,CAAC,IAAD,EAAOS,SAAP,CAAf;AACA;;AACD,YAAMI,GAAG,GAAGH,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBb,OAAlB,EAA2B;AACtCc,UAAAA,IAAI,EAAEd,OAAO,CAACgB,mBADwB;AAEtChB,UAAAA,OAAO,EAAEO;AAF6B,SAA3B,CAAZ;AAIAX,QAAAA,QAAQ,CAACqB,SAAT,CACCtB,MADD,EAECoB,GAFD,EAGC,mCACCf,OAAO,CAACkB,mBADT,GAEC,iBAFD,GAGCf,YAHD,GAIC,QAJD,GAKCI,IALD,GAMC,GATF,EAUCN,cAVD,EAWC,UAACkB,GAAD,EAAMC,MAAN,EAAiB;AAChB,cAAID,GAAJ,EAAS,OAAOjB,QAAQ,CAACiB,GAAD,CAAf,CADO,CAGhB;;AACA,cAAIC,MAAM,KAAKV,SAAf,EAA0B,OAAOR,QAAQ,CAAC,IAAD,EAAO,IAAP,CAAf;AAC1BA,UAAAA,QAAQ,CAAC,IAAD,EAAOkB,MAAP,CAAR;AACA,SAjBF;AAmBA,OA9CF;AA+CA;AAxDF;;AAAA;AAAA","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst concord = require(\"./concord\");\nconst DescriptionFileUtils = require(\"./DescriptionFileUtils\");\nconst getInnerRequest = require(\"./getInnerRequest\");\n\nmodule.exports = class ConcordModulesPlugin {\n\tconstructor(source, options, target) {\n\t\tthis.source = source;\n\t\tthis.options = options;\n\t\tthis.target = target;\n\t}\n\n\tapply(resolver) {\n\t\tconst target = resolver.ensureHook(this.target);\n\t\tresolver\n\t\t\t.getHook(this.source)\n\t\t\t.tapAsync(\"ConcordModulesPlugin\", (request, resolveContext, callback) => {\n\t\t\t\tconst innerRequest = getInnerRequest(resolver, request);\n\t\t\t\tif (!innerRequest) return callback();\n\t\t\t\tconst concordField = DescriptionFileUtils.getField(\n\t\t\t\t\trequest.descriptionFileData,\n\t\t\t\t\t\"concord\"\n\t\t\t\t);\n\t\t\t\tif (!concordField) return callback();\n\t\t\t\tconst data = concord.matchModule(\n\t\t\t\t\trequest.context,\n\t\t\t\t\tconcordField,\n\t\t\t\t\tinnerRequest\n\t\t\t\t);\n\t\t\t\tif (data === innerRequest) return callback();\n\t\t\t\tif (data === undefined) return callback();\n\t\t\t\tif (data === false) {\n\t\t\t\t\tconst ignoreObj = Object.assign({}, request, {\n\t\t\t\t\t\tpath: false\n\t\t\t\t\t});\n\t\t\t\t\treturn callback(null, ignoreObj);\n\t\t\t\t}\n\t\t\t\tconst obj = Object.assign({}, request, {\n\t\t\t\t\tpath: request.descriptionFileRoot,\n\t\t\t\t\trequest: data\n\t\t\t\t});\n\t\t\t\tresolver.doResolve(\n\t\t\t\t\ttarget,\n\t\t\t\t\tobj,\n\t\t\t\t\t\"aliased from description file \" +\n\t\t\t\t\t\trequest.descriptionFilePath +\n\t\t\t\t\t\t\" with mapping '\" +\n\t\t\t\t\t\tinnerRequest +\n\t\t\t\t\t\t\"' to '\" +\n\t\t\t\t\t\tdata +\n\t\t\t\t\t\t\"'\",\n\t\t\t\t\tresolveContext,\n\t\t\t\t\t(err, result) => {\n\t\t\t\t\t\tif (err) return callback(err);\n\n\t\t\t\t\t\t// Don't allow other aliasing or raw request\n\t\t\t\t\t\tif (result === undefined) return callback(null, null);\n\t\t\t\t\t\tcallback(null, result);\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t});\n\t}\n};\n"]},"metadata":{},"sourceType":"script"}