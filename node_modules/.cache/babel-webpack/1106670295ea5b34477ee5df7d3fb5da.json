{"ast":null,"code":"\"use strict\";\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nvar _toConsumableArray = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/toConsumableArray\");\n\nvar _taggedTemplateLiteral = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/taggedTemplateLiteral\");\n\nvar _templateObject;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getStylesConfig = void 0;\n\nvar core_1 = require(\"@angular-devkit/core\");\n\nvar fs = require(\"fs\");\n\nvar path = require(\"path\");\n\nvar plugins_1 = require(\"../plugins\");\n\nvar helpers_1 = require(\"../utils/helpers\"); // tslint:disable-next-line:no-big-function\n\n\nfunction getStylesConfig(wco) {\n  var _a, _b, _c;\n\n  var autoprefixer = require('autoprefixer');\n\n  var MiniCssExtractPlugin = require('mini-css-extract-plugin');\n\n  var postcssImports = require('postcss-import');\n\n  var root = wco.root,\n      buildOptions = wco.buildOptions;\n  var entryPoints = {};\n  var globalStylePaths = [];\n  var extraPlugins = [];\n  extraPlugins.push(new plugins_1.AnyComponentStyleBudgetChecker(buildOptions.budgets));\n  var cssSourceMap = buildOptions.sourceMap.styles; // Determine hashing format.\n\n  var hashFormat = helpers_1.getOutputHashFormat(buildOptions.outputHashing); // use includePaths from appConfig\n\n  var includePaths = (_c = (_b = (_a = buildOptions.stylePreprocessorOptions) === null || _a === void 0 ? void 0 : _a.includePaths) === null || _b === void 0 ? void 0 : _b.map(function (p) {\n    return path.resolve(root, p);\n  })) !== null && _c !== void 0 ? _c : []; // Process global styles.\n\n  if (buildOptions.styles.length > 0) {\n    var chunkNames = [];\n    helpers_1.normalizeExtraEntryPoints(buildOptions.styles, 'styles').forEach(function (style) {\n      var resolvedPath = path.resolve(root, style.input);\n\n      if (!fs.existsSync(resolvedPath)) {\n        try {\n          resolvedPath = require.resolve(style.input, {\n            paths: [root]\n          });\n        } catch (_a) {}\n      }\n\n      if (!buildOptions.preserveSymlinks) {\n        resolvedPath = fs.realpathSync(resolvedPath);\n      } // Add style entry points.\n\n\n      if (entryPoints[style.bundleName]) {\n        entryPoints[style.bundleName].push(resolvedPath);\n      } else {\n        entryPoints[style.bundleName] = [resolvedPath];\n      } // Add non injected styles to the list.\n\n\n      if (!style.inject) {\n        chunkNames.push(style.bundleName);\n      } // Add global css paths.\n\n\n      globalStylePaths.push(resolvedPath);\n    });\n\n    if (chunkNames.length > 0) {\n      // Add plugin to remove hashes from lazy styles.\n      extraPlugins.push(new plugins_1.RemoveHashPlugin({\n        chunkNames: chunkNames,\n        hashFormat: hashFormat\n      }));\n    }\n  }\n\n  var sassImplementation;\n\n  try {\n    // tslint:disable-next-line:no-implicit-dependencies\n    sassImplementation = require('node-sass');\n    wco.logger.warn(core_1.tags.oneLine(_templateObject || (_templateObject = _taggedTemplateLiteral([\"'node-sass' usage is deprecated and will be removed in a future major version.\\n      To opt-out of the deprecated behaviour and start using 'sass' uninstall 'node-sass'.\"]))));\n  } catch (_d) {\n    sassImplementation = require('sass');\n  } // set base rules to derive final rules from\n\n\n  var baseRules = [{\n    test: /\\.css$/,\n    use: []\n  }, {\n    test: /\\.scss$|\\.sass$/,\n    use: [{\n      loader: require.resolve('resolve-url-loader'),\n      options: {\n        sourceMap: cssSourceMap\n      }\n    }, {\n      loader: require.resolve('sass-loader'),\n      options: {\n        implementation: sassImplementation,\n        sourceMap: true,\n        sassOptions: {\n          // bootstrap-sass requires a minimum precision of 8\n          precision: 8,\n          includePaths: includePaths,\n          // Use expanded as otherwise sass will remove comments that are needed for autoprefixer\n          // Ex: /* autoprefixer grid: autoplace */\n          // tslint:disable-next-line: max-line-length\n          // See: https://github.com/webpack-contrib/sass-loader/blob/45ad0be17264ceada5f0b4fb87e9357abe85c4ff/src/getSassOptions.js#L68-L70\n          outputStyle: 'expanded'\n        }\n      }\n    }]\n  }, {\n    test: /\\.less$/,\n    use: [{\n      loader: require.resolve('less-loader'),\n      options: {\n        sourceMap: cssSourceMap,\n        lessOptions: {\n          javascriptEnabled: true,\n          paths: includePaths\n        }\n      }\n    }]\n  }, {\n    test: /\\.styl$/,\n    use: [{\n      loader: require.resolve('stylus-loader'),\n      options: {\n        sourceMap: cssSourceMap,\n        stylusOptions: {\n          compress: false,\n          sourceMap: {\n            comment: false\n          },\n          paths: includePaths\n        }\n      }\n    }]\n  }];\n\n  var postcssOptionsCreator = function postcssOptionsCreator(sourceMap, extracted) {\n    return function (loader) {\n      return {\n        map: sourceMap && {\n          inline: true,\n          annotation: false\n        },\n        plugins: [postcssImports({\n          resolve: function resolve(url) {\n            return url.startsWith('~') ? url.substr(1) : url;\n          },\n          load: function load(filename) {\n            return new Promise(function (resolve, reject) {\n              loader.fs.readFile(filename, function (err, data) {\n                if (err) {\n                  reject(err);\n                  return;\n                }\n\n                var content = data.toString();\n                resolve(content);\n              });\n            });\n          }\n        }), plugins_1.PostcssCliResources({\n          baseHref: buildOptions.baseHref,\n          deployUrl: buildOptions.deployUrl,\n          resourcesOutputPath: buildOptions.resourcesOutputPath,\n          loader: loader,\n          filename: \"[name]\".concat(hashFormat.file, \".[ext]\"),\n          emitFile: buildOptions.platform !== 'server',\n          extracted: extracted\n        }), autoprefixer()]\n      };\n    };\n  }; // load component css as raw strings\n\n\n  var componentsSourceMap = !!(cssSourceMap // Never use component css sourcemap when style optimizations are on.\n  // It will just increase bundle size without offering good debug experience.\n  && !buildOptions.optimization.styles // Inline all sourcemap types except hidden ones, which are the same as no sourcemaps\n  // for component css.\n  && !buildOptions.sourceMap.hidden);\n  var rules = baseRules.map(function (_ref) {\n    var test = _ref.test,\n        use = _ref.use;\n    return {\n      exclude: globalStylePaths,\n      test: test,\n      use: [{\n        loader: require.resolve('raw-loader')\n      }, {\n        loader: require.resolve('postcss-loader'),\n        options: {\n          postcssOptions: postcssOptionsCreator(componentsSourceMap, false)\n        }\n      }].concat(_toConsumableArray(use))\n    };\n  }); // load global css as css files\n\n  if (globalStylePaths.length > 0) {\n    var globalSourceMap = !!cssSourceMap && !buildOptions.sourceMap.hidden;\n    rules.push.apply(rules, _toConsumableArray(baseRules.map(function (_ref2) {\n      var test = _ref2.test,\n          use = _ref2.use;\n      return {\n        include: globalStylePaths,\n        test: test,\n        use: [buildOptions.extractCss ? {\n          loader: MiniCssExtractPlugin.loader\n        } : require.resolve('style-loader'), {\n          loader: require.resolve('css-loader'),\n          options: {\n            url: false,\n            sourceMap: globalSourceMap\n          }\n        }, {\n          loader: require.resolve('postcss-loader'),\n          options: {\n            postcssOptions: postcssOptionsCreator(globalSourceMap, buildOptions.extractCss)\n          }\n        }].concat(_toConsumableArray(use))\n      };\n    })));\n  }\n\n  if (buildOptions.extractCss) {\n    // extract global css from js files into own css file.\n    extraPlugins.push(new MiniCssExtractPlugin({\n      filename: \"[name]\".concat(hashFormat.extract, \".css\")\n    }));\n\n    if (!buildOptions.hmr) {\n      // don't remove `.js` files for `.css` when we are using HMR these contain HMR accept codes.\n      // suppress empty .js files in css only entry points.\n      extraPlugins.push(new plugins_1.SuppressExtractedTextChunksWebpackPlugin());\n    }\n  }\n\n  return {\n    entry: entryPoints,\n    module: {\n      rules: rules\n    },\n    plugins: extraPlugins\n  };\n}\n\nexports.getStylesConfig = getStylesConfig;","map":{"version":3,"sources":["/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@angular-devkit/build-angular/src/webpack/configs/styles.js"],"names":["Object","defineProperty","exports","value","getStylesConfig","core_1","require","fs","path","plugins_1","helpers_1","wco","_a","_b","_c","autoprefixer","MiniCssExtractPlugin","postcssImports","root","buildOptions","entryPoints","globalStylePaths","extraPlugins","push","AnyComponentStyleBudgetChecker","budgets","cssSourceMap","sourceMap","styles","hashFormat","getOutputHashFormat","outputHashing","includePaths","stylePreprocessorOptions","map","p","resolve","length","chunkNames","normalizeExtraEntryPoints","forEach","style","resolvedPath","input","existsSync","paths","preserveSymlinks","realpathSync","bundleName","inject","RemoveHashPlugin","sassImplementation","logger","warn","tags","oneLine","_d","baseRules","test","use","loader","options","implementation","sassOptions","precision","outputStyle","lessOptions","javascriptEnabled","stylusOptions","compress","comment","postcssOptionsCreator","extracted","inline","annotation","plugins","url","startsWith","substr","load","filename","Promise","reject","readFile","err","data","content","toString","PostcssCliResources","baseHref","deployUrl","resourcesOutputPath","file","emitFile","platform","componentsSourceMap","optimization","hidden","rules","exclude","postcssOptions","globalSourceMap","include","extractCss","extract","hmr","SuppressExtractedTextChunksWebpackPlugin","entry","module"],"mappings":"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","sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getStylesConfig = void 0;\nconst core_1 = require(\"@angular-devkit/core\");\nconst fs = require(\"fs\");\nconst path = require(\"path\");\nconst plugins_1 = require(\"../plugins\");\nconst helpers_1 = require(\"../utils/helpers\");\n// tslint:disable-next-line:no-big-function\nfunction getStylesConfig(wco) {\n    var _a, _b, _c;\n    const autoprefixer = require('autoprefixer');\n    const MiniCssExtractPlugin = require('mini-css-extract-plugin');\n    const postcssImports = require('postcss-import');\n    const { root, buildOptions } = wco;\n    const entryPoints = {};\n    const globalStylePaths = [];\n    const extraPlugins = [];\n    extraPlugins.push(new plugins_1.AnyComponentStyleBudgetChecker(buildOptions.budgets));\n    const cssSourceMap = buildOptions.sourceMap.styles;\n    // Determine hashing format.\n    const hashFormat = helpers_1.getOutputHashFormat(buildOptions.outputHashing);\n    // use includePaths from appConfig\n    const includePaths = (_c = (_b = (_a = buildOptions.stylePreprocessorOptions) === null || _a === void 0 ? void 0 : _a.includePaths) === null || _b === void 0 ? void 0 : _b.map(p => path.resolve(root, p))) !== null && _c !== void 0 ? _c : [];\n    // Process global styles.\n    if (buildOptions.styles.length > 0) {\n        const chunkNames = [];\n        helpers_1.normalizeExtraEntryPoints(buildOptions.styles, 'styles').forEach(style => {\n            let resolvedPath = path.resolve(root, style.input);\n            if (!fs.existsSync(resolvedPath)) {\n                try {\n                    resolvedPath = require.resolve(style.input, { paths: [root] });\n                }\n                catch (_a) { }\n            }\n            if (!buildOptions.preserveSymlinks) {\n                resolvedPath = fs.realpathSync(resolvedPath);\n            }\n            // Add style entry points.\n            if (entryPoints[style.bundleName]) {\n                entryPoints[style.bundleName].push(resolvedPath);\n            }\n            else {\n                entryPoints[style.bundleName] = [resolvedPath];\n            }\n            // Add non injected styles to the list.\n            if (!style.inject) {\n                chunkNames.push(style.bundleName);\n            }\n            // Add global css paths.\n            globalStylePaths.push(resolvedPath);\n        });\n        if (chunkNames.length > 0) {\n            // Add plugin to remove hashes from lazy styles.\n            extraPlugins.push(new plugins_1.RemoveHashPlugin({ chunkNames, hashFormat }));\n        }\n    }\n    let sassImplementation;\n    try {\n        // tslint:disable-next-line:no-implicit-dependencies\n        sassImplementation = require('node-sass');\n        wco.logger.warn(core_1.tags.oneLine `'node-sass' usage is deprecated and will be removed in a future major version.\n      To opt-out of the deprecated behaviour and start using 'sass' uninstall 'node-sass'.`);\n    }\n    catch (_d) {\n        sassImplementation = require('sass');\n    }\n    // set base rules to derive final rules from\n    const baseRules = [\n        { test: /\\.css$/, use: [] },\n        {\n            test: /\\.scss$|\\.sass$/,\n            use: [\n                {\n                    loader: require.resolve('resolve-url-loader'),\n                    options: {\n                        sourceMap: cssSourceMap,\n                    },\n                },\n                {\n                    loader: require.resolve('sass-loader'),\n                    options: {\n                        implementation: sassImplementation,\n                        sourceMap: true,\n                        sassOptions: {\n                            // bootstrap-sass requires a minimum precision of 8\n                            precision: 8,\n                            includePaths,\n                            // Use expanded as otherwise sass will remove comments that are needed for autoprefixer\n                            // Ex: /* autoprefixer grid: autoplace */\n                            // tslint:disable-next-line: max-line-length\n                            // See: https://github.com/webpack-contrib/sass-loader/blob/45ad0be17264ceada5f0b4fb87e9357abe85c4ff/src/getSassOptions.js#L68-L70\n                            outputStyle: 'expanded',\n                        },\n                    },\n                },\n            ],\n        },\n        {\n            test: /\\.less$/,\n            use: [\n                {\n                    loader: require.resolve('less-loader'),\n                    options: {\n                        sourceMap: cssSourceMap,\n                        lessOptions: {\n                            javascriptEnabled: true,\n                            paths: includePaths,\n                        },\n                    },\n                },\n            ],\n        },\n        {\n            test: /\\.styl$/,\n            use: [\n                {\n                    loader: require.resolve('stylus-loader'),\n                    options: {\n                        sourceMap: cssSourceMap,\n                        stylusOptions: {\n                            compress: false,\n                            sourceMap: { comment: false },\n                            paths: includePaths,\n                        },\n                    },\n                },\n            ],\n        },\n    ];\n    const postcssOptionsCreator = (sourceMap, extracted) => {\n        return (loader) => ({\n            map: sourceMap && {\n                inline: true,\n                annotation: false,\n            },\n            plugins: [\n                postcssImports({\n                    resolve: (url) => url.startsWith('~') ? url.substr(1) : url,\n                    load: (filename) => {\n                        return new Promise((resolve, reject) => {\n                            loader.fs.readFile(filename, (err, data) => {\n                                if (err) {\n                                    reject(err);\n                                    return;\n                                }\n                                const content = data.toString();\n                                resolve(content);\n                            });\n                        });\n                    },\n                }),\n                plugins_1.PostcssCliResources({\n                    baseHref: buildOptions.baseHref,\n                    deployUrl: buildOptions.deployUrl,\n                    resourcesOutputPath: buildOptions.resourcesOutputPath,\n                    loader,\n                    filename: `[name]${hashFormat.file}.[ext]`,\n                    emitFile: buildOptions.platform !== 'server',\n                    extracted,\n                }),\n                autoprefixer(),\n            ],\n        });\n    };\n    // load component css as raw strings\n    const componentsSourceMap = !!(cssSourceMap\n        // Never use component css sourcemap when style optimizations are on.\n        // It will just increase bundle size without offering good debug experience.\n        && !buildOptions.optimization.styles\n        // Inline all sourcemap types except hidden ones, which are the same as no sourcemaps\n        // for component css.\n        && !buildOptions.sourceMap.hidden);\n    const rules = baseRules.map(({ test, use }) => ({\n        exclude: globalStylePaths,\n        test,\n        use: [\n            { loader: require.resolve('raw-loader') },\n            {\n                loader: require.resolve('postcss-loader'),\n                options: {\n                    postcssOptions: postcssOptionsCreator(componentsSourceMap, false),\n                },\n            },\n            ...use,\n        ],\n    }));\n    // load global css as css files\n    if (globalStylePaths.length > 0) {\n        const globalSourceMap = !!cssSourceMap && !buildOptions.sourceMap.hidden;\n        rules.push(...baseRules.map(({ test, use }) => {\n            return {\n                include: globalStylePaths,\n                test,\n                use: [\n                    buildOptions.extractCss\n                        ? {\n                            loader: MiniCssExtractPlugin.loader,\n                        }\n                        : require.resolve('style-loader'),\n                    {\n                        loader: require.resolve('css-loader'),\n                        options: {\n                            url: false,\n                            sourceMap: globalSourceMap,\n                        },\n                    },\n                    {\n                        loader: require.resolve('postcss-loader'),\n                        options: {\n                            postcssOptions: postcssOptionsCreator(globalSourceMap, buildOptions.extractCss),\n                        },\n                    },\n                    ...use,\n                ],\n            };\n        }));\n    }\n    if (buildOptions.extractCss) {\n        // extract global css from js files into own css file.\n        extraPlugins.push(new MiniCssExtractPlugin({ filename: `[name]${hashFormat.extract}.css` }));\n        if (!buildOptions.hmr) {\n            // don't remove `.js` files for `.css` when we are using HMR these contain HMR accept codes.\n            // suppress empty .js files in css only entry points.\n            extraPlugins.push(new plugins_1.SuppressExtractedTextChunksWebpackPlugin());\n        }\n    }\n    return {\n        entry: entryPoints,\n        module: { rules },\n        plugins: extraPlugins,\n    };\n}\nexports.getStylesConfig = getStylesConfig;\n"]},"metadata":{},"sourceType":"script"}