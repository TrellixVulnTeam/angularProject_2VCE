{"ast":null,"code":"/*!\n * Stylus\n * Copyright (c) Automattic <developer.wordpress.com>\n * MIT Licensed\n */\n\n/**\n * Module dependencies.\n */\nvar Renderer = require('./renderer'),\n    nodes = require('./nodes'),\n    utils = require('./utils');\n/**\n * Export render as the module.\n */\n\n\nexports = module.exports = render;\n/**\n * Library version.\n */\n\nexports.version = require('../package').version;\n/**\n * Expose nodes.\n */\n\nexports.nodes = nodes;\n/**\n * Expose BIFs.\n */\n\nexports.functions = require('./functions');\n/**\n * Expose utils.\n */\n\nexports.utils = require('./utils');\n/**\n * Expose middleware.\n */\n\nexports.middleware = require('./middleware');\n/**\n * Expose constructors.\n */\n\nexports.Visitor = require('./visitor');\nexports.Parser = require('./parser');\nexports.Evaluator = require('./visitor/evaluator');\nexports.Normalizer = require('./visitor/normalizer');\nexports.Compiler = require('./visitor/compiler');\n/**\n * Convert the given `css` to `stylus` source.\n *\n * @param {String} css\n * @return {String}\n * @api public\n */\n\nexports.convertCSS = require('./convert/css');\n/**\n * Render the given `str` with `options` and callback `fn(err, css)`.\n *\n * @param {String} str\n * @param {Object|Function} options\n * @param {Function} fn\n * @api public\n */\n\nexports.render = function (str, options, fn) {\n  if ('function' == typeof options) fn = options, options = {};\n  return new Renderer(str, options).render(fn);\n};\n/**\n * Return a new `Renderer` for the given `str` and `options`.\n *\n * @param {String} str\n * @param {Object} options\n * @return {Renderer}\n * @api public\n */\n\n\nfunction render(str, options) {\n  return new Renderer(str, options);\n}\n/**\n * Expose optional functions.\n */\n\n\nexports.url = require('./functions/url');\nexports.resolver = require('./functions/resolver');","map":{"version":3,"sources":["/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/stylus/lib/stylus.js"],"names":["Renderer","require","nodes","utils","exports","module","render","version","functions","middleware","Visitor","Parser","Evaluator","Normalizer","Compiler","convertCSS","str","options","fn","url","resolver"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAEA,IAAIA,QAAQ,GAAGC,OAAO,CAAC,YAAD,CAAtB;AAAA,IACIC,KAAK,GAAGD,OAAO,CAAC,SAAD,CADnB;AAAA,IAEIE,KAAK,GAAGF,OAAO,CAAC,SAAD,CAFnB;AAIA;AACA;AACA;;;AAEAG,OAAO,GAAGC,MAAM,CAACD,OAAP,GAAiBE,MAA3B;AAEA;AACA;AACA;;AAEAF,OAAO,CAACG,OAAR,GAAkBN,OAAO,CAAC,YAAD,CAAP,CAAsBM,OAAxC;AAEA;AACA;AACA;;AAEAH,OAAO,CAACF,KAAR,GAAgBA,KAAhB;AAEA;AACA;AACA;;AAEAE,OAAO,CAACI,SAAR,GAAoBP,OAAO,CAAC,aAAD,CAA3B;AAEA;AACA;AACA;;AAEAG,OAAO,CAACD,KAAR,GAAgBF,OAAO,CAAC,SAAD,CAAvB;AAEA;AACA;AACA;;AAEAG,OAAO,CAACK,UAAR,GAAqBR,OAAO,CAAC,cAAD,CAA5B;AAEA;AACA;AACA;;AAEAG,OAAO,CAACM,OAAR,GAAkBT,OAAO,CAAC,WAAD,CAAzB;AACAG,OAAO,CAACO,MAAR,GAAiBV,OAAO,CAAC,UAAD,CAAxB;AACAG,OAAO,CAACQ,SAAR,GAAoBX,OAAO,CAAC,qBAAD,CAA3B;AACAG,OAAO,CAACS,UAAR,GAAqBZ,OAAO,CAAC,sBAAD,CAA5B;AACAG,OAAO,CAACU,QAAR,GAAmBb,OAAO,CAAC,oBAAD,CAA1B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAG,OAAO,CAACW,UAAR,GAAqBd,OAAO,CAAC,eAAD,CAA5B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAG,OAAO,CAACE,MAAR,GAAiB,UAASU,GAAT,EAAcC,OAAd,EAAuBC,EAAvB,EAA0B;AACzC,MAAI,cAAc,OAAOD,OAAzB,EAAkCC,EAAE,GAAGD,OAAL,EAAcA,OAAO,GAAG,EAAxB;AAClC,SAAO,IAAIjB,QAAJ,CAAagB,GAAb,EAAkBC,OAAlB,EAA2BX,MAA3B,CAAkCY,EAAlC,CAAP;AACD,CAHD;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,SAASZ,MAAT,CAAgBU,GAAhB,EAAqBC,OAArB,EAA8B;AAC5B,SAAO,IAAIjB,QAAJ,CAAagB,GAAb,EAAkBC,OAAlB,CAAP;AACD;AAED;AACA;AACA;;;AAEAb,OAAO,CAACe,GAAR,GAAclB,OAAO,CAAC,iBAAD,CAArB;AACAG,OAAO,CAACgB,QAAR,GAAmBnB,OAAO,CAAC,sBAAD,CAA1B","sourcesContent":["/*!\n * Stylus\n * Copyright (c) Automattic <developer.wordpress.com>\n * MIT Licensed\n */\n\n/**\n * Module dependencies.\n */\n\nvar Renderer = require('./renderer')\n  , nodes = require('./nodes')\n  , utils = require('./utils');\n\n/**\n * Export render as the module.\n */\n\nexports = module.exports = render;\n\n/**\n * Library version.\n */\n\nexports.version = require('../package').version;\n\n/**\n * Expose nodes.\n */\n\nexports.nodes = nodes;\n\n/**\n * Expose BIFs.\n */\n\nexports.functions = require('./functions');\n\n/**\n * Expose utils.\n */\n\nexports.utils = require('./utils');\n\n/**\n * Expose middleware.\n */\n\nexports.middleware = require('./middleware');\n\n/**\n * Expose constructors.\n */\n\nexports.Visitor = require('./visitor');\nexports.Parser = require('./parser');\nexports.Evaluator = require('./visitor/evaluator');\nexports.Normalizer = require('./visitor/normalizer');\nexports.Compiler = require('./visitor/compiler');\n\n/**\n * Convert the given `css` to `stylus` source.\n *\n * @param {String} css\n * @return {String}\n * @api public\n */\n\nexports.convertCSS = require('./convert/css');\n\n/**\n * Render the given `str` with `options` and callback `fn(err, css)`.\n *\n * @param {String} str\n * @param {Object|Function} options\n * @param {Function} fn\n * @api public\n */\n\nexports.render = function(str, options, fn){\n  if ('function' == typeof options) fn = options, options = {};\n  return new Renderer(str, options).render(fn);\n};\n\n/**\n * Return a new `Renderer` for the given `str` and `options`.\n *\n * @param {String} str\n * @param {Object} options\n * @return {Renderer}\n * @api public\n */\n\nfunction render(str, options) {\n  return new Renderer(str, options);\n}\n\n/**\n * Expose optional functions.\n */\n\nexports.url = require('./functions/url');\nexports.resolver = require('./functions/resolver');\n"]},"metadata":{},"sourceType":"script"}