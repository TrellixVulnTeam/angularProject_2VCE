{"ast":null,"code":"/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n(function (factory) {\n  if (typeof module === \"object\" && typeof module.exports === \"object\") {\n    var v = factory(require, exports);\n    if (v !== undefined) module.exports = v;\n  } else if (typeof define === \"function\" && define.amd) {\n    define(\"@angular/compiler/src/template_parser/template_preparser\", [\"require\", \"exports\", \"@angular/compiler/src/ml_parser/tags\"], factory);\n  }\n})(function (require, exports) {\n  \"use strict\";\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.PreparsedElement = exports.PreparsedElementType = exports.preparseElement = void 0;\n\n  var tags_1 = require(\"@angular/compiler/src/ml_parser/tags\");\n\n  var NG_CONTENT_SELECT_ATTR = 'select';\n  var LINK_ELEMENT = 'link';\n  var LINK_STYLE_REL_ATTR = 'rel';\n  var LINK_STYLE_HREF_ATTR = 'href';\n  var LINK_STYLE_REL_VALUE = 'stylesheet';\n  var STYLE_ELEMENT = 'style';\n  var SCRIPT_ELEMENT = 'script';\n  var NG_NON_BINDABLE_ATTR = 'ngNonBindable';\n  var NG_PROJECT_AS = 'ngProjectAs';\n\n  function preparseElement(ast) {\n    var selectAttr = null;\n    var hrefAttr = null;\n    var relAttr = null;\n    var nonBindable = false;\n    var projectAs = '';\n    ast.attrs.forEach(function (attr) {\n      var lcAttrName = attr.name.toLowerCase();\n\n      if (lcAttrName == NG_CONTENT_SELECT_ATTR) {\n        selectAttr = attr.value;\n      } else if (lcAttrName == LINK_STYLE_HREF_ATTR) {\n        hrefAttr = attr.value;\n      } else if (lcAttrName == LINK_STYLE_REL_ATTR) {\n        relAttr = attr.value;\n      } else if (attr.name == NG_NON_BINDABLE_ATTR) {\n        nonBindable = true;\n      } else if (attr.name == NG_PROJECT_AS) {\n        if (attr.value.length > 0) {\n          projectAs = attr.value;\n        }\n      }\n    });\n    selectAttr = normalizeNgContentSelect(selectAttr);\n    var nodeName = ast.name.toLowerCase();\n    var type = PreparsedElementType.OTHER;\n\n    if (tags_1.isNgContent(nodeName)) {\n      type = PreparsedElementType.NG_CONTENT;\n    } else if (nodeName == STYLE_ELEMENT) {\n      type = PreparsedElementType.STYLE;\n    } else if (nodeName == SCRIPT_ELEMENT) {\n      type = PreparsedElementType.SCRIPT;\n    } else if (nodeName == LINK_ELEMENT && relAttr == LINK_STYLE_REL_VALUE) {\n      type = PreparsedElementType.STYLESHEET;\n    }\n\n    return new PreparsedElement(type, selectAttr, hrefAttr, nonBindable, projectAs);\n  }\n\n  exports.preparseElement = preparseElement;\n  var PreparsedElementType;\n\n  (function (PreparsedElementType) {\n    PreparsedElementType[PreparsedElementType[\"NG_CONTENT\"] = 0] = \"NG_CONTENT\";\n    PreparsedElementType[PreparsedElementType[\"STYLE\"] = 1] = \"STYLE\";\n    PreparsedElementType[PreparsedElementType[\"STYLESHEET\"] = 2] = \"STYLESHEET\";\n    PreparsedElementType[PreparsedElementType[\"SCRIPT\"] = 3] = \"SCRIPT\";\n    PreparsedElementType[PreparsedElementType[\"OTHER\"] = 4] = \"OTHER\";\n  })(PreparsedElementType = exports.PreparsedElementType || (exports.PreparsedElementType = {}));\n\n  var PreparsedElement =\n  /** @class */\n  function () {\n    function PreparsedElement(type, selectAttr, hrefAttr, nonBindable, projectAs) {\n      this.type = type;\n      this.selectAttr = selectAttr;\n      this.hrefAttr = hrefAttr;\n      this.nonBindable = nonBindable;\n      this.projectAs = projectAs;\n    }\n\n    return PreparsedElement;\n  }();\n\n  exports.PreparsedElement = PreparsedElement;\n\n  function normalizeNgContentSelect(selectAttr) {\n    if (selectAttr === null || selectAttr.length === 0) {\n      return '*';\n    }\n\n    return selectAttr;\n  }\n});","map":{"version":3,"sources":["../../../../../../../packages/compiler/src/template_parser/template_preparser.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport * as html from '../ml_parser/ast';\nimport {isNgContent} from '../ml_parser/tags';\n\nconst NG_CONTENT_SELECT_ATTR = 'select';\nconst LINK_ELEMENT = 'link';\nconst LINK_STYLE_REL_ATTR = 'rel';\nconst LINK_STYLE_HREF_ATTR = 'href';\nconst LINK_STYLE_REL_VALUE = 'stylesheet';\nconst STYLE_ELEMENT = 'style';\nconst SCRIPT_ELEMENT = 'script';\nconst NG_NON_BINDABLE_ATTR = 'ngNonBindable';\nconst NG_PROJECT_AS = 'ngProjectAs';\n\nexport function preparseElement(ast: html.Element): PreparsedElement {\n  let selectAttr: string = null!;\n  let hrefAttr: string = null!;\n  let relAttr: string = null!;\n  let nonBindable = false;\n  let projectAs = '';\n  ast.attrs.forEach(attr => {\n    const lcAttrName = attr.name.toLowerCase();\n    if (lcAttrName == NG_CONTENT_SELECT_ATTR) {\n      selectAttr = attr.value;\n    } else if (lcAttrName == LINK_STYLE_HREF_ATTR) {\n      hrefAttr = attr.value;\n    } else if (lcAttrName == LINK_STYLE_REL_ATTR) {\n      relAttr = attr.value;\n    } else if (attr.name == NG_NON_BINDABLE_ATTR) {\n      nonBindable = true;\n    } else if (attr.name == NG_PROJECT_AS) {\n      if (attr.value.length > 0) {\n        projectAs = attr.value;\n      }\n    }\n  });\n  selectAttr = normalizeNgContentSelect(selectAttr);\n  const nodeName = ast.name.toLowerCase();\n  let type = PreparsedElementType.OTHER;\n  if (isNgContent(nodeName)) {\n    type = PreparsedElementType.NG_CONTENT;\n  } else if (nodeName == STYLE_ELEMENT) {\n    type = PreparsedElementType.STYLE;\n  } else if (nodeName == SCRIPT_ELEMENT) {\n    type = PreparsedElementType.SCRIPT;\n  } else if (nodeName == LINK_ELEMENT && relAttr == LINK_STYLE_REL_VALUE) {\n    type = PreparsedElementType.STYLESHEET;\n  }\n  return new PreparsedElement(type, selectAttr, hrefAttr, nonBindable, projectAs);\n}\n\nexport enum PreparsedElementType {\n  NG_CONTENT,\n  STYLE,\n  STYLESHEET,\n  SCRIPT,\n  OTHER\n}\n\nexport class PreparsedElement {\n  constructor(\n      public type: PreparsedElementType, public selectAttr: string, public hrefAttr: string,\n      public nonBindable: boolean, public projectAs: string) {}\n}\n\n\nfunction normalizeNgContentSelect(selectAttr: string): string {\n  if (selectAttr === null || selectAttr.length === 0) {\n    return '*';\n  }\n  return selectAttr;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}