{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nvar extraction_1 = require(\"@angular/localize/src/tools/src/extract/extraction\");\n\nvar loader_utils_1 = require(\"loader-utils\");\n\nvar nodePath = require(\"path\");\n\nfunction localizeExtractLoader(content, // Source map types are broken in the webpack type definitions\n// tslint:disable-next-line: no-any\nmap) {\n  var loaderContext = this; // Casts are needed to workaround the loader-utils typings limited support for option values\n\n  var options = loader_utils_1.getOptions(this); // Setup a Webpack-based logger instance\n\n  var logger = {\n    // level 2 is warnings\n    level: 2,\n    debug: function debug() {\n      var _console;\n\n      // tslint:disable-next-line: no-console\n      (_console = console).debug.apply(_console, arguments);\n    },\n    info: function info() {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      loaderContext.emitWarning(args.join(''));\n    },\n    warn: function warn() {\n      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        args[_key2] = arguments[_key2];\n      }\n\n      loaderContext.emitWarning(args.join(''));\n    },\n    error: function error() {\n      for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n        args[_key3] = arguments[_key3];\n      }\n\n      loaderContext.emitError(args.join(''));\n    }\n  };\n  var filename = loaderContext.resourcePath;\n\n  if (map === null || map === void 0 ? void 0 : map.file) {\n    // The extractor's internal sourcemap handling expects the filenames to match\n    filename = nodePath.join(loaderContext.context, map.file);\n  } // Setup a virtual file system instance for the extractor\n  // * MessageExtractor itself uses readFile, relative and resolve\n  // * Internal SourceFileLoader (sourcemap support) uses dirname, exists, readFile, and resolve\n\n\n  var filesystem = {\n    readFile: function readFile(path) {\n      if (path === filename) {\n        return content;\n      } else if (path === filename + '.map') {\n        return typeof map === 'string' ? map : JSON.stringify(map);\n      } else {\n        throw new Error('Unknown file requested: ' + path);\n      }\n    },\n    relative: function relative(from, to) {\n      return nodePath.relative(from, to);\n    },\n    resolve: function resolve() {\n      return nodePath.resolve.apply(nodePath, arguments);\n    },\n    exists: function exists(path) {\n      return path === filename || path === filename + '.map';\n    },\n    dirname: function dirname(path) {\n      return nodePath.dirname(path);\n    }\n  }; // tslint:disable-next-line: no-any\n\n  var extractor = new extraction_1.MessageExtractor(filesystem, logger, {\n    // tslint:disable-next-line: no-any\n    basePath: this.rootContext,\n    useSourceMaps: !!map\n  });\n  var messages = extractor.extractMessages(filename);\n\n  if (messages.length > 0) {\n    options === null || options === void 0 ? void 0 : options.messageHandler(messages);\n  } // Pass through the original content now that messages have been extracted\n\n\n  this.callback(undefined, content, map);\n}\n\nexports.default = localizeExtractLoader;","map":{"version":3,"sources":["/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@angular-devkit/build-angular/src/extract-i18n/ivy-extract-loader.js"],"names":["Object","defineProperty","exports","value","extraction_1","require","loader_utils_1","nodePath","localizeExtractLoader","content","map","loaderContext","options","getOptions","logger","level","debug","console","info","args","emitWarning","join","warn","error","emitError","filename","resourcePath","file","context","filesystem","readFile","path","JSON","stringify","Error","relative","from","to","resolve","exists","dirname","extractor","MessageExtractor","basePath","rootContext","useSourceMaps","messages","extractMessages","length","messageHandler","callback","undefined","default"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst extraction_1 = require(\"@angular/localize/src/tools/src/extract/extraction\");\nconst loader_utils_1 = require(\"loader-utils\");\nconst nodePath = require(\"path\");\nfunction localizeExtractLoader(content, \n// Source map types are broken in the webpack type definitions\n// tslint:disable-next-line: no-any\nmap) {\n    const loaderContext = this;\n    // Casts are needed to workaround the loader-utils typings limited support for option values\n    const options = loader_utils_1.getOptions(this);\n    // Setup a Webpack-based logger instance\n    const logger = {\n        // level 2 is warnings\n        level: 2,\n        debug(...args) {\n            // tslint:disable-next-line: no-console\n            console.debug(...args);\n        },\n        info(...args) {\n            loaderContext.emitWarning(args.join(''));\n        },\n        warn(...args) {\n            loaderContext.emitWarning(args.join(''));\n        },\n        error(...args) {\n            loaderContext.emitError(args.join(''));\n        },\n    };\n    let filename = loaderContext.resourcePath;\n    if (map === null || map === void 0 ? void 0 : map.file) {\n        // The extractor's internal sourcemap handling expects the filenames to match\n        filename = nodePath.join(loaderContext.context, map.file);\n    }\n    // Setup a virtual file system instance for the extractor\n    // * MessageExtractor itself uses readFile, relative and resolve\n    // * Internal SourceFileLoader (sourcemap support) uses dirname, exists, readFile, and resolve\n    const filesystem = {\n        readFile(path) {\n            if (path === filename) {\n                return content;\n            }\n            else if (path === filename + '.map') {\n                return typeof map === 'string' ? map : JSON.stringify(map);\n            }\n            else {\n                throw new Error('Unknown file requested: ' + path);\n            }\n        },\n        relative(from, to) {\n            return nodePath.relative(from, to);\n        },\n        resolve(...paths) {\n            return nodePath.resolve(...paths);\n        },\n        exists(path) {\n            return path === filename || path === filename + '.map';\n        },\n        dirname(path) {\n            return nodePath.dirname(path);\n        },\n    };\n    // tslint:disable-next-line: no-any\n    const extractor = new extraction_1.MessageExtractor(filesystem, logger, {\n        // tslint:disable-next-line: no-any\n        basePath: this.rootContext,\n        useSourceMaps: !!map,\n    });\n    const messages = extractor.extractMessages(filename);\n    if (messages.length > 0) {\n        options === null || options === void 0 ? void 0 : options.messageHandler(messages);\n    }\n    // Pass through the original content now that messages have been extracted\n    this.callback(undefined, content, map);\n}\nexports.default = localizeExtractLoader;\n"]},"metadata":{},"sourceType":"script"}