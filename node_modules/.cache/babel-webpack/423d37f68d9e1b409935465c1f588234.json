{"ast":null,"code":"'use strict';\n/**\n * `list` type prompt\n */\n\nvar _classCallCheck = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _assertThisInitialized = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/assertThisInitialized\");\n\nvar _inherits = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar _ = {\n  isArray: require('lodash/isArray'),\n  map: require('lodash/map'),\n  isString: require('lodash/isString')\n};\n\nvar chalk = require('chalk');\n\nvar cliCursor = require('cli-cursor');\n\nvar figures = require('figures');\n\nvar _require = require('rxjs/operators'),\n    map = _require.map,\n    takeUntil = _require.takeUntil;\n\nvar Base = require('./base');\n\nvar observe = require('../utils/events');\n\nvar Paginator = require('../utils/paginator');\n\nvar incrementListIndex = require('../utils/incrementListIndex');\n\nvar CheckboxPrompt = /*#__PURE__*/function (_Base) {\n  _inherits(CheckboxPrompt, _Base);\n\n  var _super = _createSuper(CheckboxPrompt);\n\n  function CheckboxPrompt(questions, rl, answers) {\n    var _this;\n\n    _classCallCheck(this, CheckboxPrompt);\n\n    _this = _super.call(this, questions, rl, answers);\n\n    if (!_this.opt.choices) {\n      _this.throwParamError('choices');\n    }\n\n    if (_.isArray(_this.opt.default)) {\n      _this.opt.choices.forEach(function (choice) {\n        if (this.opt.default.indexOf(choice.value) >= 0) {\n          choice.checked = true;\n        }\n      }, _assertThisInitialized(_this));\n    }\n\n    _this.pointer = 0; // Make sure no default is set (so it won't be printed)\n\n    _this.opt.default = null;\n    var shouldLoop = _this.opt.loop === undefined ? true : _this.opt.loop;\n    _this.paginator = new Paginator(_this.screen, {\n      isInfinite: shouldLoop\n    });\n    return _this;\n  }\n  /**\n   * Start the Inquiry session\n   * @param  {Function} cb      Callback when prompt is done\n   * @return {this}\n   */\n\n\n  _createClass(CheckboxPrompt, [{\n    key: \"_run\",\n    value: function _run(cb) {\n      this.done = cb;\n      var events = observe(this.rl);\n      var validation = this.handleSubmitEvents(events.line.pipe(map(this.getCurrentValue.bind(this))));\n      validation.success.forEach(this.onEnd.bind(this));\n      validation.error.forEach(this.onError.bind(this));\n      events.normalizedUpKey.pipe(takeUntil(validation.success)).forEach(this.onUpKey.bind(this));\n      events.normalizedDownKey.pipe(takeUntil(validation.success)).forEach(this.onDownKey.bind(this));\n      events.numberKey.pipe(takeUntil(validation.success)).forEach(this.onNumberKey.bind(this));\n      events.spaceKey.pipe(takeUntil(validation.success)).forEach(this.onSpaceKey.bind(this));\n      events.aKey.pipe(takeUntil(validation.success)).forEach(this.onAllKey.bind(this));\n      events.iKey.pipe(takeUntil(validation.success)).forEach(this.onInverseKey.bind(this)); // Init the prompt\n\n      cliCursor.hide();\n      this.render();\n      this.firstRender = false;\n      return this;\n    }\n    /**\n     * Render the prompt to screen\n     * @return {CheckboxPrompt} self\n     */\n\n  }, {\n    key: \"render\",\n    value: function render(error) {\n      // Render question\n      var message = this.getQuestion();\n      var bottomContent = '';\n\n      if (!this.spaceKeyPressed) {\n        message += '(Press ' + chalk.cyan.bold('<space>') + ' to select, ' + chalk.cyan.bold('<a>') + ' to toggle all, ' + chalk.cyan.bold('<i>') + ' to invert selection)';\n      } // Render choices or answer depending on the state\n\n\n      if (this.status === 'answered') {\n        message += chalk.cyan(this.selection.join(', '));\n      } else {\n        var choicesStr = renderChoices(this.opt.choices, this.pointer);\n        var indexPosition = this.opt.choices.indexOf(this.opt.choices.getChoice(this.pointer));\n        var realIndexPosition = this.opt.choices.reduce(function (acc, value, i) {\n          // Dont count lines past the choice we are looking at\n          if (i > indexPosition) {\n            return acc;\n          } // Add line if it's a separator\n\n\n          if (value.type === 'separator') {\n            return acc + 1;\n          }\n\n          var l = value.name; // Non-strings take up one line\n\n          if (typeof l !== 'string') {\n            return acc + 1;\n          } // Calculate lines taken up by string\n\n\n          l = l.split('\\n');\n          return acc + l.length;\n        }, 0) - 1;\n        message += '\\n' + this.paginator.paginate(choicesStr, realIndexPosition, this.opt.pageSize);\n      }\n\n      if (error) {\n        bottomContent = chalk.red('>> ') + error;\n      }\n\n      this.screen.render(message, bottomContent);\n    }\n    /**\n     * When user press `enter` key\n     */\n\n  }, {\n    key: \"onEnd\",\n    value: function onEnd(state) {\n      this.status = 'answered';\n      this.spaceKeyPressed = true; // Rerender prompt (and clean subline error)\n\n      this.render();\n      this.screen.done();\n      cliCursor.show();\n      this.done(state.value);\n    }\n  }, {\n    key: \"onError\",\n    value: function onError(state) {\n      this.render(state.isValid);\n    }\n  }, {\n    key: \"getCurrentValue\",\n    value: function getCurrentValue() {\n      var choices = this.opt.choices.filter(function (choice) {\n        return Boolean(choice.checked) && !choice.disabled;\n      });\n      this.selection = _.map(choices, 'short');\n      return _.map(choices, 'value');\n    }\n  }, {\n    key: \"onUpKey\",\n    value: function onUpKey() {\n      this.pointer = incrementListIndex(this.pointer, 'up', this.opt);\n      this.render();\n    }\n  }, {\n    key: \"onDownKey\",\n    value: function onDownKey() {\n      this.pointer = incrementListIndex(this.pointer, 'down', this.opt);\n      this.render();\n    }\n  }, {\n    key: \"onNumberKey\",\n    value: function onNumberKey(input) {\n      if (input <= this.opt.choices.realLength) {\n        this.pointer = input - 1;\n        this.toggleChoice(this.pointer);\n      }\n\n      this.render();\n    }\n  }, {\n    key: \"onSpaceKey\",\n    value: function onSpaceKey() {\n      this.spaceKeyPressed = true;\n      this.toggleChoice(this.pointer);\n      this.render();\n    }\n  }, {\n    key: \"onAllKey\",\n    value: function onAllKey() {\n      var shouldBeChecked = Boolean(this.opt.choices.find(function (choice) {\n        return choice.type !== 'separator' && !choice.checked;\n      }));\n      this.opt.choices.forEach(function (choice) {\n        if (choice.type !== 'separator') {\n          choice.checked = shouldBeChecked;\n        }\n      });\n      this.render();\n    }\n  }, {\n    key: \"onInverseKey\",\n    value: function onInverseKey() {\n      this.opt.choices.forEach(function (choice) {\n        if (choice.type !== 'separator') {\n          choice.checked = !choice.checked;\n        }\n      });\n      this.render();\n    }\n  }, {\n    key: \"toggleChoice\",\n    value: function toggleChoice(index) {\n      var item = this.opt.choices.getChoice(index);\n\n      if (item !== undefined) {\n        this.opt.choices.getChoice(index).checked = !item.checked;\n      }\n    }\n  }]);\n\n  return CheckboxPrompt;\n}(Base);\n/**\n * Function for rendering checkbox choices\n * @param  {Number} pointer Position of the pointer\n * @return {String}         Rendered content\n */\n\n\nfunction renderChoices(choices, pointer) {\n  var output = '';\n  var separatorOffset = 0;\n  choices.forEach(function (choice, i) {\n    if (choice.type === 'separator') {\n      separatorOffset++;\n      output += ' ' + choice + '\\n';\n      return;\n    }\n\n    if (choice.disabled) {\n      separatorOffset++;\n      output += ' - ' + choice.name;\n      output += ' (' + (_.isString(choice.disabled) ? choice.disabled : 'Disabled') + ')';\n    } else {\n      var line = getCheckbox(choice.checked) + ' ' + choice.name;\n\n      if (i - separatorOffset === pointer) {\n        output += chalk.cyan(figures.pointer + line);\n      } else {\n        output += ' ' + line;\n      }\n    }\n\n    output += '\\n';\n  });\n  return output.replace(/\\n$/, '');\n}\n/**\n * Get the checkbox\n * @param  {Boolean} checked - add a X or not to the checkbox\n * @return {String} Composited checkbox string\n */\n\n\nfunction getCheckbox(checked) {\n  return checked ? chalk.green(figures.radioOn) : figures.radioOff;\n}\n\nmodule.exports = CheckboxPrompt;","map":{"version":3,"sources":["/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/inquirer/lib/prompts/checkbox.js"],"names":["_","isArray","require","map","isString","chalk","cliCursor","figures","takeUntil","Base","observe","Paginator","incrementListIndex","CheckboxPrompt","questions","rl","answers","opt","choices","throwParamError","default","forEach","choice","indexOf","value","checked","pointer","shouldLoop","loop","undefined","paginator","screen","isInfinite","cb","done","events","validation","handleSubmitEvents","line","pipe","getCurrentValue","bind","success","onEnd","error","onError","normalizedUpKey","onUpKey","normalizedDownKey","onDownKey","numberKey","onNumberKey","spaceKey","onSpaceKey","aKey","onAllKey","iKey","onInverseKey","hide","render","firstRender","message","getQuestion","bottomContent","spaceKeyPressed","cyan","bold","status","selection","join","choicesStr","renderChoices","indexPosition","getChoice","realIndexPosition","reduce","acc","i","type","l","name","split","length","paginate","pageSize","red","state","show","isValid","filter","Boolean","disabled","input","realLength","toggleChoice","shouldBeChecked","find","index","item","output","separatorOffset","getCheckbox","replace","green","radioOn","radioOff","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;;;;;;;;;;;;AAEA,IAAIA,CAAC,GAAG;AACNC,EAAAA,OAAO,EAAEC,OAAO,CAAC,gBAAD,CADV;AAENC,EAAAA,GAAG,EAAED,OAAO,CAAC,YAAD,CAFN;AAGNE,EAAAA,QAAQ,EAAEF,OAAO,CAAC,iBAAD;AAHX,CAAR;;AAKA,IAAIG,KAAK,GAAGH,OAAO,CAAC,OAAD,CAAnB;;AACA,IAAII,SAAS,GAAGJ,OAAO,CAAC,YAAD,CAAvB;;AACA,IAAIK,OAAO,GAAGL,OAAO,CAAC,SAAD,CAArB;;AACA,eAAyBA,OAAO,CAAC,gBAAD,CAAhC;AAAA,IAAMC,GAAN,YAAMA,GAAN;AAAA,IAAWK,SAAX,YAAWA,SAAX;;AACA,IAAIC,IAAI,GAAGP,OAAO,CAAC,QAAD,CAAlB;;AACA,IAAIQ,OAAO,GAAGR,OAAO,CAAC,iBAAD,CAArB;;AACA,IAAIS,SAAS,GAAGT,OAAO,CAAC,oBAAD,CAAvB;;AACA,IAAIU,kBAAkB,GAAGV,OAAO,CAAC,6BAAD,CAAhC;;IAEMW,c;;;;;AACJ,0BAAYC,SAAZ,EAAuBC,EAAvB,EAA2BC,OAA3B,EAAoC;AAAA;;AAAA;;AAClC,8BAAMF,SAAN,EAAiBC,EAAjB,EAAqBC,OAArB;;AAEA,QAAI,CAAC,MAAKC,GAAL,CAASC,OAAd,EAAuB;AACrB,YAAKC,eAAL,CAAqB,SAArB;AACD;;AAED,QAAInB,CAAC,CAACC,OAAF,CAAU,MAAKgB,GAAL,CAASG,OAAnB,CAAJ,EAAiC;AAC/B,YAAKH,GAAL,CAASC,OAAT,CAAiBG,OAAjB,CAAyB,UAAUC,MAAV,EAAkB;AACzC,YAAI,KAAKL,GAAL,CAASG,OAAT,CAAiBG,OAAjB,CAAyBD,MAAM,CAACE,KAAhC,KAA0C,CAA9C,EAAiD;AAC/CF,UAAAA,MAAM,CAACG,OAAP,GAAiB,IAAjB;AACD;AACF,OAJD;AAKD;;AAED,UAAKC,OAAL,GAAe,CAAf,CAfkC,CAiBlC;;AACA,UAAKT,GAAL,CAASG,OAAT,GAAmB,IAAnB;AAEA,QAAMO,UAAU,GAAG,MAAKV,GAAL,CAASW,IAAT,KAAkBC,SAAlB,GAA8B,IAA9B,GAAqC,MAAKZ,GAAL,CAASW,IAAjE;AACA,UAAKE,SAAL,GAAiB,IAAInB,SAAJ,CAAc,MAAKoB,MAAnB,EAA2B;AAAEC,MAAAA,UAAU,EAAEL;AAAd,KAA3B,CAAjB;AArBkC;AAsBnC;AAED;AACF;AACA;AACA;AACA;;;;;WAEE,cAAKM,EAAL,EAAS;AACP,WAAKC,IAAL,GAAYD,EAAZ;AAEA,UAAIE,MAAM,GAAGzB,OAAO,CAAC,KAAKK,EAAN,CAApB;AAEA,UAAIqB,UAAU,GAAG,KAAKC,kBAAL,CACfF,MAAM,CAACG,IAAP,CAAYC,IAAZ,CAAiBpC,GAAG,CAAC,KAAKqC,eAAL,CAAqBC,IAArB,CAA0B,IAA1B,CAAD,CAApB,CADe,CAAjB;AAGAL,MAAAA,UAAU,CAACM,OAAX,CAAmBrB,OAAnB,CAA2B,KAAKsB,KAAL,CAAWF,IAAX,CAAgB,IAAhB,CAA3B;AACAL,MAAAA,UAAU,CAACQ,KAAX,CAAiBvB,OAAjB,CAAyB,KAAKwB,OAAL,CAAaJ,IAAb,CAAkB,IAAlB,CAAzB;AAEAN,MAAAA,MAAM,CAACW,eAAP,CACGP,IADH,CACQ/B,SAAS,CAAC4B,UAAU,CAACM,OAAZ,CADjB,EAEGrB,OAFH,CAEW,KAAK0B,OAAL,CAAaN,IAAb,CAAkB,IAAlB,CAFX;AAGAN,MAAAA,MAAM,CAACa,iBAAP,CACGT,IADH,CACQ/B,SAAS,CAAC4B,UAAU,CAACM,OAAZ,CADjB,EAEGrB,OAFH,CAEW,KAAK4B,SAAL,CAAeR,IAAf,CAAoB,IAApB,CAFX;AAGAN,MAAAA,MAAM,CAACe,SAAP,CACGX,IADH,CACQ/B,SAAS,CAAC4B,UAAU,CAACM,OAAZ,CADjB,EAEGrB,OAFH,CAEW,KAAK8B,WAAL,CAAiBV,IAAjB,CAAsB,IAAtB,CAFX;AAGAN,MAAAA,MAAM,CAACiB,QAAP,CACGb,IADH,CACQ/B,SAAS,CAAC4B,UAAU,CAACM,OAAZ,CADjB,EAEGrB,OAFH,CAEW,KAAKgC,UAAL,CAAgBZ,IAAhB,CAAqB,IAArB,CAFX;AAGAN,MAAAA,MAAM,CAACmB,IAAP,CAAYf,IAAZ,CAAiB/B,SAAS,CAAC4B,UAAU,CAACM,OAAZ,CAA1B,EAAgDrB,OAAhD,CAAwD,KAAKkC,QAAL,CAAcd,IAAd,CAAmB,IAAnB,CAAxD;AACAN,MAAAA,MAAM,CAACqB,IAAP,CAAYjB,IAAZ,CAAiB/B,SAAS,CAAC4B,UAAU,CAACM,OAAZ,CAA1B,EAAgDrB,OAAhD,CAAwD,KAAKoC,YAAL,CAAkBhB,IAAlB,CAAuB,IAAvB,CAAxD,EAxBO,CA0BP;;AACAnC,MAAAA,SAAS,CAACoD,IAAV;AACA,WAAKC,MAAL;AACA,WAAKC,WAAL,GAAmB,KAAnB;AAEA,aAAO,IAAP;AACD;AAED;AACF;AACA;AACA;;;;WAEE,gBAAOhB,KAAP,EAAc;AACZ;AACA,UAAIiB,OAAO,GAAG,KAAKC,WAAL,EAAd;AACA,UAAIC,aAAa,GAAG,EAApB;;AAEA,UAAI,CAAC,KAAKC,eAAV,EAA2B;AACzBH,QAAAA,OAAO,IACL,YACAxD,KAAK,CAAC4D,IAAN,CAAWC,IAAX,CAAgB,SAAhB,CADA,GAEA,cAFA,GAGA7D,KAAK,CAAC4D,IAAN,CAAWC,IAAX,CAAgB,KAAhB,CAHA,GAIA,kBAJA,GAKA7D,KAAK,CAAC4D,IAAN,CAAWC,IAAX,CAAgB,KAAhB,CALA,GAMA,uBAPF;AAQD,OAdW,CAgBZ;;;AACA,UAAI,KAAKC,MAAL,KAAgB,UAApB,EAAgC;AAC9BN,QAAAA,OAAO,IAAIxD,KAAK,CAAC4D,IAAN,CAAW,KAAKG,SAAL,CAAeC,IAAf,CAAoB,IAApB,CAAX,CAAX;AACD,OAFD,MAEO;AACL,YAAIC,UAAU,GAAGC,aAAa,CAAC,KAAKtD,GAAL,CAASC,OAAV,EAAmB,KAAKQ,OAAxB,CAA9B;AACA,YAAI8C,aAAa,GAAG,KAAKvD,GAAL,CAASC,OAAT,CAAiBK,OAAjB,CAClB,KAAKN,GAAL,CAASC,OAAT,CAAiBuD,SAAjB,CAA2B,KAAK/C,OAAhC,CADkB,CAApB;AAGA,YAAIgD,iBAAiB,GACnB,KAAKzD,GAAL,CAASC,OAAT,CAAiByD,MAAjB,CAAwB,UAAUC,GAAV,EAAepD,KAAf,EAAsBqD,CAAtB,EAAyB;AAC/C;AACA,cAAIA,CAAC,GAAGL,aAAR,EAAuB;AACrB,mBAAOI,GAAP;AACD,WAJ8C,CAK/C;;;AACA,cAAIpD,KAAK,CAACsD,IAAN,KAAe,WAAnB,EAAgC;AAC9B,mBAAOF,GAAG,GAAG,CAAb;AACD;;AAED,cAAIG,CAAC,GAAGvD,KAAK,CAACwD,IAAd,CAV+C,CAW/C;;AACA,cAAI,OAAOD,CAAP,KAAa,QAAjB,EAA2B;AACzB,mBAAOH,GAAG,GAAG,CAAb;AACD,WAd8C,CAgB/C;;;AACAG,UAAAA,CAAC,GAAGA,CAAC,CAACE,KAAF,CAAQ,IAAR,CAAJ;AACA,iBAAOL,GAAG,GAAGG,CAAC,CAACG,MAAf;AACD,SAnBD,EAmBG,CAnBH,IAmBQ,CApBV;AAqBArB,QAAAA,OAAO,IACL,OAAO,KAAK/B,SAAL,CAAeqD,QAAf,CAAwBb,UAAxB,EAAoCI,iBAApC,EAAuD,KAAKzD,GAAL,CAASmE,QAAhE,CADT;AAED;;AAED,UAAIxC,KAAJ,EAAW;AACTmB,QAAAA,aAAa,GAAG1D,KAAK,CAACgF,GAAN,CAAU,KAAV,IAAmBzC,KAAnC;AACD;;AAED,WAAKb,MAAL,CAAY4B,MAAZ,CAAmBE,OAAnB,EAA4BE,aAA5B;AACD;AAED;AACF;AACA;;;;WAEE,eAAMuB,KAAN,EAAa;AACX,WAAKnB,MAAL,GAAc,UAAd;AACA,WAAKH,eAAL,GAAuB,IAAvB,CAFW,CAGX;;AACA,WAAKL,MAAL;AAEA,WAAK5B,MAAL,CAAYG,IAAZ;AACA5B,MAAAA,SAAS,CAACiF,IAAV;AACA,WAAKrD,IAAL,CAAUoD,KAAK,CAAC9D,KAAhB;AACD;;;WAED,iBAAQ8D,KAAR,EAAe;AACb,WAAK3B,MAAL,CAAY2B,KAAK,CAACE,OAAlB;AACD;;;WAED,2BAAkB;AAChB,UAAItE,OAAO,GAAG,KAAKD,GAAL,CAASC,OAAT,CAAiBuE,MAAjB,CAAwB,UAAUnE,MAAV,EAAkB;AACtD,eAAOoE,OAAO,CAACpE,MAAM,CAACG,OAAR,CAAP,IAA2B,CAACH,MAAM,CAACqE,QAA1C;AACD,OAFa,CAAd;AAIA,WAAKvB,SAAL,GAAiBpE,CAAC,CAACG,GAAF,CAAMe,OAAN,EAAe,OAAf,CAAjB;AACA,aAAOlB,CAAC,CAACG,GAAF,CAAMe,OAAN,EAAe,OAAf,CAAP;AACD;;;WAED,mBAAU;AACR,WAAKQ,OAAL,GAAed,kBAAkB,CAAC,KAAKc,OAAN,EAAe,IAAf,EAAqB,KAAKT,GAA1B,CAAjC;AACA,WAAK0C,MAAL;AACD;;;WAED,qBAAY;AACV,WAAKjC,OAAL,GAAed,kBAAkB,CAAC,KAAKc,OAAN,EAAe,MAAf,EAAuB,KAAKT,GAA5B,CAAjC;AACA,WAAK0C,MAAL;AACD;;;WAED,qBAAYiC,KAAZ,EAAmB;AACjB,UAAIA,KAAK,IAAI,KAAK3E,GAAL,CAASC,OAAT,CAAiB2E,UAA9B,EAA0C;AACxC,aAAKnE,OAAL,GAAekE,KAAK,GAAG,CAAvB;AACA,aAAKE,YAAL,CAAkB,KAAKpE,OAAvB;AACD;;AAED,WAAKiC,MAAL;AACD;;;WAED,sBAAa;AACX,WAAKK,eAAL,GAAuB,IAAvB;AACA,WAAK8B,YAAL,CAAkB,KAAKpE,OAAvB;AACA,WAAKiC,MAAL;AACD;;;WAED,oBAAW;AACT,UAAIoC,eAAe,GAAGL,OAAO,CAC3B,KAAKzE,GAAL,CAASC,OAAT,CAAiB8E,IAAjB,CAAsB,UAAU1E,MAAV,EAAkB;AACtC,eAAOA,MAAM,CAACwD,IAAP,KAAgB,WAAhB,IAA+B,CAACxD,MAAM,CAACG,OAA9C;AACD,OAFD,CAD2B,CAA7B;AAMA,WAAKR,GAAL,CAASC,OAAT,CAAiBG,OAAjB,CAAyB,UAAUC,MAAV,EAAkB;AACzC,YAAIA,MAAM,CAACwD,IAAP,KAAgB,WAApB,EAAiC;AAC/BxD,UAAAA,MAAM,CAACG,OAAP,GAAiBsE,eAAjB;AACD;AACF,OAJD;AAMA,WAAKpC,MAAL;AACD;;;WAED,wBAAe;AACb,WAAK1C,GAAL,CAASC,OAAT,CAAiBG,OAAjB,CAAyB,UAAUC,MAAV,EAAkB;AACzC,YAAIA,MAAM,CAACwD,IAAP,KAAgB,WAApB,EAAiC;AAC/BxD,UAAAA,MAAM,CAACG,OAAP,GAAiB,CAACH,MAAM,CAACG,OAAzB;AACD;AACF,OAJD;AAMA,WAAKkC,MAAL;AACD;;;WAED,sBAAasC,KAAb,EAAoB;AAClB,UAAIC,IAAI,GAAG,KAAKjF,GAAL,CAASC,OAAT,CAAiBuD,SAAjB,CAA2BwB,KAA3B,CAAX;;AACA,UAAIC,IAAI,KAAKrE,SAAb,EAAwB;AACtB,aAAKZ,GAAL,CAASC,OAAT,CAAiBuD,SAAjB,CAA2BwB,KAA3B,EAAkCxE,OAAlC,GAA4C,CAACyE,IAAI,CAACzE,OAAlD;AACD;AACF;;;;EAlN0BhB,I;AAqN7B;AACA;AACA;AACA;AACA;;;AAEA,SAAS8D,aAAT,CAAuBrD,OAAvB,EAAgCQ,OAAhC,EAAyC;AACvC,MAAIyE,MAAM,GAAG,EAAb;AACA,MAAIC,eAAe,GAAG,CAAtB;AAEAlF,EAAAA,OAAO,CAACG,OAAR,CAAgB,UAAUC,MAAV,EAAkBuD,CAAlB,EAAqB;AACnC,QAAIvD,MAAM,CAACwD,IAAP,KAAgB,WAApB,EAAiC;AAC/BsB,MAAAA,eAAe;AACfD,MAAAA,MAAM,IAAI,MAAM7E,MAAN,GAAe,IAAzB;AACA;AACD;;AAED,QAAIA,MAAM,CAACqE,QAAX,EAAqB;AACnBS,MAAAA,eAAe;AACfD,MAAAA,MAAM,IAAI,QAAQ7E,MAAM,CAAC0D,IAAzB;AACAmB,MAAAA,MAAM,IAAI,QAAQnG,CAAC,CAACI,QAAF,CAAWkB,MAAM,CAACqE,QAAlB,IAA8BrE,MAAM,CAACqE,QAArC,GAAgD,UAAxD,IAAsE,GAAhF;AACD,KAJD,MAIO;AACL,UAAIrD,IAAI,GAAG+D,WAAW,CAAC/E,MAAM,CAACG,OAAR,CAAX,GAA8B,GAA9B,GAAoCH,MAAM,CAAC0D,IAAtD;;AACA,UAAIH,CAAC,GAAGuB,eAAJ,KAAwB1E,OAA5B,EAAqC;AACnCyE,QAAAA,MAAM,IAAI9F,KAAK,CAAC4D,IAAN,CAAW1D,OAAO,CAACmB,OAAR,GAAkBY,IAA7B,CAAV;AACD,OAFD,MAEO;AACL6D,QAAAA,MAAM,IAAI,MAAM7D,IAAhB;AACD;AACF;;AAED6D,IAAAA,MAAM,IAAI,IAAV;AACD,GArBD;AAuBA,SAAOA,MAAM,CAACG,OAAP,CAAe,KAAf,EAAsB,EAAtB,CAAP;AACD;AAED;AACA;AACA;AACA;AACA;;;AAEA,SAASD,WAAT,CAAqB5E,OAArB,EAA8B;AAC5B,SAAOA,OAAO,GAAGpB,KAAK,CAACkG,KAAN,CAAYhG,OAAO,CAACiG,OAApB,CAAH,GAAkCjG,OAAO,CAACkG,QAAxD;AACD;;AAEDC,MAAM,CAACC,OAAP,GAAiB9F,cAAjB","sourcesContent":["'use strict';\n/**\n * `list` type prompt\n */\n\nvar _ = {\n  isArray: require('lodash/isArray'),\n  map: require('lodash/map'),\n  isString: require('lodash/isString'),\n};\nvar chalk = require('chalk');\nvar cliCursor = require('cli-cursor');\nvar figures = require('figures');\nvar { map, takeUntil } = require('rxjs/operators');\nvar Base = require('./base');\nvar observe = require('../utils/events');\nvar Paginator = require('../utils/paginator');\nvar incrementListIndex = require('../utils/incrementListIndex');\n\nclass CheckboxPrompt extends Base {\n  constructor(questions, rl, answers) {\n    super(questions, rl, answers);\n\n    if (!this.opt.choices) {\n      this.throwParamError('choices');\n    }\n\n    if (_.isArray(this.opt.default)) {\n      this.opt.choices.forEach(function (choice) {\n        if (this.opt.default.indexOf(choice.value) >= 0) {\n          choice.checked = true;\n        }\n      }, this);\n    }\n\n    this.pointer = 0;\n\n    // Make sure no default is set (so it won't be printed)\n    this.opt.default = null;\n\n    const shouldLoop = this.opt.loop === undefined ? true : this.opt.loop;\n    this.paginator = new Paginator(this.screen, { isInfinite: shouldLoop });\n  }\n\n  /**\n   * Start the Inquiry session\n   * @param  {Function} cb      Callback when prompt is done\n   * @return {this}\n   */\n\n  _run(cb) {\n    this.done = cb;\n\n    var events = observe(this.rl);\n\n    var validation = this.handleSubmitEvents(\n      events.line.pipe(map(this.getCurrentValue.bind(this)))\n    );\n    validation.success.forEach(this.onEnd.bind(this));\n    validation.error.forEach(this.onError.bind(this));\n\n    events.normalizedUpKey\n      .pipe(takeUntil(validation.success))\n      .forEach(this.onUpKey.bind(this));\n    events.normalizedDownKey\n      .pipe(takeUntil(validation.success))\n      .forEach(this.onDownKey.bind(this));\n    events.numberKey\n      .pipe(takeUntil(validation.success))\n      .forEach(this.onNumberKey.bind(this));\n    events.spaceKey\n      .pipe(takeUntil(validation.success))\n      .forEach(this.onSpaceKey.bind(this));\n    events.aKey.pipe(takeUntil(validation.success)).forEach(this.onAllKey.bind(this));\n    events.iKey.pipe(takeUntil(validation.success)).forEach(this.onInverseKey.bind(this));\n\n    // Init the prompt\n    cliCursor.hide();\n    this.render();\n    this.firstRender = false;\n\n    return this;\n  }\n\n  /**\n   * Render the prompt to screen\n   * @return {CheckboxPrompt} self\n   */\n\n  render(error) {\n    // Render question\n    var message = this.getQuestion();\n    var bottomContent = '';\n\n    if (!this.spaceKeyPressed) {\n      message +=\n        '(Press ' +\n        chalk.cyan.bold('<space>') +\n        ' to select, ' +\n        chalk.cyan.bold('<a>') +\n        ' to toggle all, ' +\n        chalk.cyan.bold('<i>') +\n        ' to invert selection)';\n    }\n\n    // Render choices or answer depending on the state\n    if (this.status === 'answered') {\n      message += chalk.cyan(this.selection.join(', '));\n    } else {\n      var choicesStr = renderChoices(this.opt.choices, this.pointer);\n      var indexPosition = this.opt.choices.indexOf(\n        this.opt.choices.getChoice(this.pointer)\n      );\n      var realIndexPosition =\n        this.opt.choices.reduce(function (acc, value, i) {\n          // Dont count lines past the choice we are looking at\n          if (i > indexPosition) {\n            return acc;\n          }\n          // Add line if it's a separator\n          if (value.type === 'separator') {\n            return acc + 1;\n          }\n\n          var l = value.name;\n          // Non-strings take up one line\n          if (typeof l !== 'string') {\n            return acc + 1;\n          }\n\n          // Calculate lines taken up by string\n          l = l.split('\\n');\n          return acc + l.length;\n        }, 0) - 1;\n      message +=\n        '\\n' + this.paginator.paginate(choicesStr, realIndexPosition, this.opt.pageSize);\n    }\n\n    if (error) {\n      bottomContent = chalk.red('>> ') + error;\n    }\n\n    this.screen.render(message, bottomContent);\n  }\n\n  /**\n   * When user press `enter` key\n   */\n\n  onEnd(state) {\n    this.status = 'answered';\n    this.spaceKeyPressed = true;\n    // Rerender prompt (and clean subline error)\n    this.render();\n\n    this.screen.done();\n    cliCursor.show();\n    this.done(state.value);\n  }\n\n  onError(state) {\n    this.render(state.isValid);\n  }\n\n  getCurrentValue() {\n    var choices = this.opt.choices.filter(function (choice) {\n      return Boolean(choice.checked) && !choice.disabled;\n    });\n\n    this.selection = _.map(choices, 'short');\n    return _.map(choices, 'value');\n  }\n\n  onUpKey() {\n    this.pointer = incrementListIndex(this.pointer, 'up', this.opt);\n    this.render();\n  }\n\n  onDownKey() {\n    this.pointer = incrementListIndex(this.pointer, 'down', this.opt);\n    this.render();\n  }\n\n  onNumberKey(input) {\n    if (input <= this.opt.choices.realLength) {\n      this.pointer = input - 1;\n      this.toggleChoice(this.pointer);\n    }\n\n    this.render();\n  }\n\n  onSpaceKey() {\n    this.spaceKeyPressed = true;\n    this.toggleChoice(this.pointer);\n    this.render();\n  }\n\n  onAllKey() {\n    var shouldBeChecked = Boolean(\n      this.opt.choices.find(function (choice) {\n        return choice.type !== 'separator' && !choice.checked;\n      })\n    );\n\n    this.opt.choices.forEach(function (choice) {\n      if (choice.type !== 'separator') {\n        choice.checked = shouldBeChecked;\n      }\n    });\n\n    this.render();\n  }\n\n  onInverseKey() {\n    this.opt.choices.forEach(function (choice) {\n      if (choice.type !== 'separator') {\n        choice.checked = !choice.checked;\n      }\n    });\n\n    this.render();\n  }\n\n  toggleChoice(index) {\n    var item = this.opt.choices.getChoice(index);\n    if (item !== undefined) {\n      this.opt.choices.getChoice(index).checked = !item.checked;\n    }\n  }\n}\n\n/**\n * Function for rendering checkbox choices\n * @param  {Number} pointer Position of the pointer\n * @return {String}         Rendered content\n */\n\nfunction renderChoices(choices, pointer) {\n  var output = '';\n  var separatorOffset = 0;\n\n  choices.forEach(function (choice, i) {\n    if (choice.type === 'separator') {\n      separatorOffset++;\n      output += ' ' + choice + '\\n';\n      return;\n    }\n\n    if (choice.disabled) {\n      separatorOffset++;\n      output += ' - ' + choice.name;\n      output += ' (' + (_.isString(choice.disabled) ? choice.disabled : 'Disabled') + ')';\n    } else {\n      var line = getCheckbox(choice.checked) + ' ' + choice.name;\n      if (i - separatorOffset === pointer) {\n        output += chalk.cyan(figures.pointer + line);\n      } else {\n        output += ' ' + line;\n      }\n    }\n\n    output += '\\n';\n  });\n\n  return output.replace(/\\n$/, '');\n}\n\n/**\n * Get the checkbox\n * @param  {Boolean} checked - add a X or not to the checkbox\n * @return {String} Composited checkbox string\n */\n\nfunction getCheckbox(checked) {\n  return checked ? chalk.green(figures.radioOn) : figures.radioOff;\n}\n\nmodule.exports = CheckboxPrompt;\n"]},"metadata":{},"sourceType":"script"}