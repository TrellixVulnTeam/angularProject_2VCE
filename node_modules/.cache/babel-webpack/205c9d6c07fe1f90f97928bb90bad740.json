{"ast":null,"code":"(function (factory) {\n  if (typeof module === \"object\" && typeof module.exports === \"object\") {\n    var v = factory(require, exports);\n    if (v !== undefined) module.exports = v;\n  } else if (typeof define === \"function\" && define.amd) {\n    define(\"@angular/compiler-cli/ngcc/src/locking/lock_file\", [\"require\", \"exports\"], factory);\n  }\n})(function (require, exports) {\n  \"use strict\";\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.getLockFilePath = void 0;\n\n  function getLockFilePath(fs) {\n    return fs.resolve(require.resolve('@angular/compiler-cli/ngcc'), '../__ngcc_lock_file__');\n  }\n\n  exports.getLockFilePath = getLockFilePath;\n});","map":{"version":3,"sources":["../../../../../../../../packages/compiler-cli/ngcc/src/locking/lock_file.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;AASA,WAAgB,eAAhB,CAAgC,EAAhC,EAAoD;AAClD,WAAO,EAAE,CAAC,OAAH,CAAW,OAAO,CAAC,OAAR,CAAgB,4BAAhB,CAAX,EAA0D,uBAA1D,CAAP;AACD;;AAFD,EAAA,OAAA,CAAA,eAAA,GAAA,eAAA","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AbsoluteFsPath, PathManipulation} from '../../../src/ngtsc/file_system';\n\nexport function getLockFilePath(fs: PathManipulation) {\n  return fs.resolve(require.resolve('@angular/compiler-cli/ngcc'), '../__ngcc_lock_file__');\n}\n\nexport interface LockFile {\n  path: AbsoluteFsPath;\n  /**\n   * Write a lock file to disk containing the PID of the current process.\n   */\n  write(): void;\n\n  /**\n   * Read the PID, of the process holding the lock, from the lock-file.\n   *\n   * It is feasible that the lock-file was removed between the call to `write()` that effectively\n   * checks for existence and this attempt to read the file. If so then this method should just\n   * gracefully return `\"{unknown}\"`.\n   */\n  read(): string;\n\n  /**\n   * Remove the lock file from disk, whether or not it exists.\n   */\n  remove(): void;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}