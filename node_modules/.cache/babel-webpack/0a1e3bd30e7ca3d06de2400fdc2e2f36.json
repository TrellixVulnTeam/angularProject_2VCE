{"ast":null,"code":"\"use strict\";\n\nvar _toConsumableArray = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/toConsumableArray\");\n\nvar _objectSpread = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/objectSpread2\");\n\nvar _regeneratorRuntime = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/regenerator\");\n\nvar _classCallCheck = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _asyncToGenerator = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.execute = void 0;\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nvar architect_1 = require(\"@angular-devkit/architect\");\n\nvar build_webpack_1 = require(\"@angular-devkit/build-webpack\");\n\nvar fs = require(\"fs\");\n\nvar path = require(\"path\");\n\nvar webpack = require(\"webpack\");\n\nvar i18n_options_1 = require(\"../utils/i18n-options\");\n\nvar version_1 = require(\"../utils/version\");\n\nvar webpack_browser_config_1 = require(\"../utils/webpack-browser-config\");\n\nvar configs_1 = require(\"../webpack/configs\");\n\nvar stats_1 = require(\"../webpack/utils/stats\");\n\nvar schema_1 = require(\"./schema\");\n\nfunction getI18nOutfile(format) {\n  switch (format) {\n    case 'xmb':\n      return 'messages.xmb';\n\n    case 'xlf':\n    case 'xlif':\n    case 'xliff':\n    case 'xlf2':\n    case 'xliff2':\n      return 'messages.xlf';\n\n    default:\n      throw new Error(\"Unsupported format \\\"\".concat(format, \"\\\"\"));\n  }\n}\n\nfunction getSerializer(_x, _x2, _x3, _x4) {\n  return _getSerializer.apply(this, arguments);\n}\n\nfunction _getSerializer() {\n  _getSerializer = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(format, sourceLocale, basePath, useLegacyIds) {\n    var _yield$Promise$resolv, XmbTranslationSerializer, _yield$Promise$resolv2, Xliff1TranslationSerializer, _yield$Promise$resolv3, Xliff2TranslationSerializer;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.t0 = format;\n            _context.next = _context.t0 === schema_1.Format.Xmb ? 3 : _context.t0 === schema_1.Format.Xlf ? 8 : _context.t0 === schema_1.Format.Xlif ? 8 : _context.t0 === schema_1.Format.Xliff ? 8 : _context.t0 === schema_1.Format.Xlf2 ? 13 : _context.t0 === schema_1.Format.Xliff2 ? 13 : 18;\n            break;\n\n          case 3:\n            _context.next = 5;\n            return Promise.resolve().then(function () {\n              return require('@angular/localize/src/tools/src/extract/translation_files/xmb_translation_serializer');\n            });\n\n          case 5:\n            _yield$Promise$resolv = _context.sent;\n            XmbTranslationSerializer = _yield$Promise$resolv.XmbTranslationSerializer;\n            return _context.abrupt(\"return\", new XmbTranslationSerializer(basePath, useLegacyIds));\n\n          case 8:\n            _context.next = 10;\n            return Promise.resolve().then(function () {\n              return require('@angular/localize/src/tools/src/extract/translation_files/xliff1_translation_serializer');\n            });\n\n          case 10:\n            _yield$Promise$resolv2 = _context.sent;\n            Xliff1TranslationSerializer = _yield$Promise$resolv2.Xliff1TranslationSerializer;\n            return _context.abrupt(\"return\", new Xliff1TranslationSerializer(sourceLocale, basePath, useLegacyIds, {}));\n\n          case 13:\n            _context.next = 15;\n            return Promise.resolve().then(function () {\n              return require('@angular/localize/src/tools/src/extract/translation_files/xliff2_translation_serializer');\n            });\n\n          case 15:\n            _yield$Promise$resolv3 = _context.sent;\n            Xliff2TranslationSerializer = _yield$Promise$resolv3.Xliff2TranslationSerializer;\n            return _context.abrupt(\"return\", new Xliff2TranslationSerializer(sourceLocale, basePath, useLegacyIds, {}));\n\n          case 18:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _getSerializer.apply(this, arguments);\n}\n\nfunction normalizeFormatOption(options) {\n  var format;\n\n  if (options.i18nFormat !== schema_1.Format.Xlf) {\n    format = options.i18nFormat;\n  } else {\n    format = options.format;\n  }\n\n  switch (format) {\n    case schema_1.Format.Xlf:\n    case schema_1.Format.Xlif:\n    case schema_1.Format.Xliff:\n      format = schema_1.Format.Xlf;\n      break;\n\n    case schema_1.Format.Xlf2:\n    case schema_1.Format.Xliff2:\n      format = schema_1.Format.Xlf2;\n      break;\n\n    case undefined:\n      format = schema_1.Format.Xlf;\n      break;\n  }\n\n  return format;\n}\n\nvar NoEmitPlugin = /*#__PURE__*/function () {\n  function NoEmitPlugin() {\n    _classCallCheck(this, NoEmitPlugin);\n  }\n\n  _createClass(NoEmitPlugin, [{\n    key: \"apply\",\n    value: function apply(compiler) {\n      compiler.hooks.shouldEmit.tap('angular-no-emit', function () {\n        return false;\n      });\n    }\n  }]);\n\n  return NoEmitPlugin;\n}();\n\nfunction execute(_x5, _x6, _x7) {\n  return _execute.apply(this, arguments);\n}\n\nfunction _execute() {\n  _execute = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(options, context, transforms) {\n    var _a, browserTarget, browserOptions, format, outFile, metadata, i18n, usingIvy, useLegacyIds, ivyMessages, _yield$webpack_browse, config, projectRoot, webpackResult, basePath, _yield$Promise$resolv4, checkDuplicateMessages, checkFileSystem, diagnostics, serializer, content, outputPath;\n\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            // Check Angular version.\n            version_1.assertCompatibleAngularVersion(context.workspaceRoot, context.logger);\n            browserTarget = architect_1.targetFromTargetString(options.browserTarget);\n            _context2.t0 = context;\n            _context2.next = 5;\n            return context.getTargetOptions(browserTarget);\n\n          case 5:\n            _context2.t1 = _context2.sent;\n            _context2.next = 8;\n            return context.getBuilderNameForTarget(browserTarget);\n\n          case 8:\n            _context2.t2 = _context2.sent;\n            _context2.next = 11;\n            return _context2.t0.validateOptions.call(_context2.t0, _context2.t1, _context2.t2);\n\n          case 11:\n            browserOptions = _context2.sent;\n            format = normalizeFormatOption(options); // We need to determine the outFile name so that AngularCompiler can retrieve it.\n\n            outFile = options.outFile || getI18nOutfile(options.format);\n\n            if (options.outputPath) {\n              // AngularCompilerPlugin doesn't support genDir so we have to adjust outFile instead.\n              outFile = path.join(options.outputPath, outFile);\n            }\n\n            outFile = path.resolve(context.workspaceRoot, outFile);\n\n            if (!(!context.target || !context.target.project)) {\n              _context2.next = 18;\n              break;\n            }\n\n            throw new Error('The builder requires a target.');\n\n          case 18:\n            _context2.next = 20;\n            return context.getProjectMetadata(context.target);\n\n          case 20:\n            metadata = _context2.sent;\n            i18n = i18n_options_1.createI18nOptions(metadata);\n            usingIvy = false;\n            useLegacyIds = true;\n            ivyMessages = [];\n            _context2.next = 27;\n            return webpack_browser_config_1.generateBrowserWebpackConfigFromContext(_objectSpread(_objectSpread({}, browserOptions), {}, {\n              optimization: {\n                scripts: false,\n                styles: false\n              },\n              sourceMap: {\n                scripts: true,\n                styles: false,\n                vendor: true\n              },\n              buildOptimizer: false,\n              i18nLocale: options.i18nLocale || i18n.sourceLocale,\n              i18nFormat: format,\n              i18nFile: outFile,\n              aot: true,\n              progress: options.progress,\n              assets: [],\n              scripts: [],\n              styles: [],\n              deleteOutputPath: false\n            }), context, function (wco) {\n              var _a;\n\n              var isIvyApplication = wco.tsConfig.options.enableIvy !== false; // Default value for legacy message ids is currently true\n\n              // Default value for legacy message ids is currently true\n              useLegacyIds = (_a = wco.tsConfig.options.enableI18nLegacyMessageIdFormat) !== null && _a !== void 0 ? _a : true; // Ivy extraction is the default for Ivy applications.\n\n              // Ivy extraction is the default for Ivy applications.\n              usingIvy = isIvyApplication && options.ivy === undefined || !!options.ivy;\n\n              if (usingIvy) {\n                if (!isIvyApplication) {\n                  context.logger.warn('Ivy extraction enabled but application is not Ivy enabled. Extraction may fail.');\n                }\n              } else if (isIvyApplication) {\n                context.logger.warn('Ivy extraction not enabled but application is Ivy enabled. ' + 'If the extraction fails, the `--ivy` flag will enable Ivy extraction.');\n              }\n\n              var partials = [{\n                plugins: [new NoEmitPlugin()]\n              }, configs_1.getCommonConfig(wco), // Only use VE extraction if not using Ivy\n              configs_1.getAotConfig(wco, !usingIvy), configs_1.getStatsConfig(wco)]; // Add Ivy application file extractor support\n\n              // Add Ivy application file extractor support\n              if (usingIvy) {\n                partials.unshift({\n                  module: {\n                    rules: [{\n                      test: /\\.[t|j]s$/,\n                      loader: require.resolve('./ivy-extract-loader'),\n                      options: {\n                        messageHandler: function messageHandler(messages) {\n                          return ivyMessages.push.apply(ivyMessages, _toConsumableArray(messages));\n                        }\n                      }\n                    }]\n                  }\n                });\n              } // Replace all stylesheets with an empty default export\n\n\n              // Replace all stylesheets with an empty default export\n              partials.push({\n                plugins: [new webpack.NormalModuleReplacementPlugin(/\\.(css|scss|sass|styl|less)$/, path.join(__dirname, 'empty-export-default.js'))]\n              });\n              return partials;\n            });\n\n          case 27:\n            _yield$webpack_browse = _context2.sent;\n            config = _yield$webpack_browse.config;\n            projectRoot = _yield$webpack_browse.projectRoot;\n\n            if (!usingIvy) {\n              _context2.next = 38;\n              break;\n            }\n\n            _context2.prev = 31;\n\n            require.resolve('@angular/localize');\n\n            _context2.next = 38;\n            break;\n\n          case 35:\n            _context2.prev = 35;\n            _context2.t3 = _context2[\"catch\"](31);\n            return _context2.abrupt(\"return\", {\n              success: false,\n              error: \"Ivy extraction requires the '@angular/localize' package.\"\n            });\n\n          case 38:\n            _context2.t4 = build_webpack_1;\n            _context2.next = 41;\n            return (_a = transforms === null || transforms === void 0 ? void 0 : transforms.webpackConfiguration) === null || _a === void 0 ? void 0 : _a.call(transforms, config);\n\n          case 41:\n            _context2.t5 = _context2.sent;\n\n            if (_context2.t5) {\n              _context2.next = 44;\n              break;\n            }\n\n            _context2.t5 = config;\n\n          case 44:\n            _context2.t6 = _context2.t5;\n            _context2.t7 = context;\n            _context2.t8 = {\n              logging: stats_1.createWebpackLoggingCallback(false, context.logger),\n              webpackFactory: webpack\n            };\n            _context2.next = 49;\n            return _context2.t4.runWebpack.call(_context2.t4, _context2.t6, _context2.t7, _context2.t8).toPromise();\n\n          case 49:\n            webpackResult = _context2.sent;\n\n            if (usingIvy) {\n              _context2.next = 52;\n              break;\n            }\n\n            return _context2.abrupt(\"return\", webpackResult);\n\n          case 52:\n            if (webpackResult.success) {\n              _context2.next = 54;\n              break;\n            }\n\n            return _context2.abrupt(\"return\", webpackResult);\n\n          case 54:\n            basePath = config.context || projectRoot;\n            _context2.next = 57;\n            return Promise.resolve().then(function () {\n              return require( // tslint:disable-next-line: trailing-comma\n              '@angular/localize/src/tools/src/extract/duplicates');\n            });\n\n          case 57:\n            _yield$Promise$resolv4 = _context2.sent;\n            checkDuplicateMessages = _yield$Promise$resolv4.checkDuplicateMessages;\n            // The filesystem is used to create a relative path for each file\n            // from the basePath.  This relative path is then used in the error message.\n            checkFileSystem = {\n              relative: function relative(from, to) {\n                return path.relative(from, to);\n              }\n            };\n            diagnostics = checkDuplicateMessages( // tslint:disable-next-line: no-any\n            checkFileSystem, ivyMessages, 'warning', // tslint:disable-next-line: no-any\n            basePath);\n\n            if (diagnostics.messages.length > 0) {\n              context.logger.warn(diagnostics.formatDiagnostics(''));\n            } // Serialize all extracted messages\n\n\n            _context2.next = 64;\n            return getSerializer(format, i18n.sourceLocale, basePath, useLegacyIds);\n\n          case 64:\n            serializer = _context2.sent;\n            content = serializer.serialize(ivyMessages); // Ensure directory exists\n\n            outputPath = path.dirname(outFile);\n\n            if (!fs.existsSync(outputPath)) {\n              fs.mkdirSync(outputPath, {\n                recursive: true\n              });\n            } // Write translation file\n\n\n            fs.writeFileSync(outFile, content);\n            return _context2.abrupt(\"return\", webpackResult);\n\n          case 70:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2, null, [[31, 35]]);\n  }));\n  return _execute.apply(this, arguments);\n}\n\nexports.execute = execute;\nexports.default = architect_1.createBuilder(execute);","map":{"version":3,"sources":["/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@angular-devkit/build-angular/src/extract-i18n/index.js"],"names":["Object","defineProperty","exports","value","execute","architect_1","require","build_webpack_1","fs","path","webpack","i18n_options_1","version_1","webpack_browser_config_1","configs_1","stats_1","schema_1","getI18nOutfile","format","Error","getSerializer","sourceLocale","basePath","useLegacyIds","Format","Xmb","Xlf","Xlif","Xliff","Xlf2","Xliff2","Promise","resolve","then","XmbTranslationSerializer","Xliff1TranslationSerializer","Xliff2TranslationSerializer","normalizeFormatOption","options","i18nFormat","undefined","NoEmitPlugin","compiler","hooks","shouldEmit","tap","context","transforms","assertCompatibleAngularVersion","workspaceRoot","logger","browserTarget","targetFromTargetString","getTargetOptions","getBuilderNameForTarget","validateOptions","browserOptions","outFile","outputPath","join","target","project","getProjectMetadata","metadata","i18n","createI18nOptions","usingIvy","ivyMessages","generateBrowserWebpackConfigFromContext","optimization","scripts","styles","sourceMap","vendor","buildOptimizer","i18nLocale","i18nFile","aot","progress","assets","deleteOutputPath","wco","_a","isIvyApplication","tsConfig","enableIvy","enableI18nLegacyMessageIdFormat","ivy","warn","partials","plugins","getCommonConfig","getAotConfig","getStatsConfig","unshift","module","rules","test","loader","messageHandler","messages","push","NormalModuleReplacementPlugin","__dirname","config","projectRoot","success","error","webpackConfiguration","call","logging","createWebpackLoggingCallback","webpackFactory","runWebpack","toPromise","webpackResult","checkDuplicateMessages","checkFileSystem","relative","from","to","diagnostics","length","formatDiagnostics","serializer","content","serialize","dirname","existsSync","mkdirSync","recursive","writeFileSync","default","createBuilder"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.execute = void 0;\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst architect_1 = require(\"@angular-devkit/architect\");\nconst build_webpack_1 = require(\"@angular-devkit/build-webpack\");\nconst fs = require(\"fs\");\nconst path = require(\"path\");\nconst webpack = require(\"webpack\");\nconst i18n_options_1 = require(\"../utils/i18n-options\");\nconst version_1 = require(\"../utils/version\");\nconst webpack_browser_config_1 = require(\"../utils/webpack-browser-config\");\nconst configs_1 = require(\"../webpack/configs\");\nconst stats_1 = require(\"../webpack/utils/stats\");\nconst schema_1 = require(\"./schema\");\nfunction getI18nOutfile(format) {\n    switch (format) {\n        case 'xmb':\n            return 'messages.xmb';\n        case 'xlf':\n        case 'xlif':\n        case 'xliff':\n        case 'xlf2':\n        case 'xliff2':\n            return 'messages.xlf';\n        default:\n            throw new Error(`Unsupported format \"${format}\"`);\n    }\n}\nasync function getSerializer(format, sourceLocale, basePath, useLegacyIds) {\n    switch (format) {\n        case schema_1.Format.Xmb:\n            const { XmbTranslationSerializer } = await Promise.resolve().then(() => require('@angular/localize/src/tools/src/extract/translation_files/xmb_translation_serializer'));\n            // tslint:disable-next-line: no-any\n            return new XmbTranslationSerializer(basePath, useLegacyIds);\n        case schema_1.Format.Xlf:\n        case schema_1.Format.Xlif:\n        case schema_1.Format.Xliff:\n            const { Xliff1TranslationSerializer } = await Promise.resolve().then(() => require('@angular/localize/src/tools/src/extract/translation_files/xliff1_translation_serializer'));\n            // tslint:disable-next-line: no-any\n            return new Xliff1TranslationSerializer(sourceLocale, basePath, useLegacyIds, {});\n        case schema_1.Format.Xlf2:\n        case schema_1.Format.Xliff2:\n            const { Xliff2TranslationSerializer } = await Promise.resolve().then(() => require('@angular/localize/src/tools/src/extract/translation_files/xliff2_translation_serializer'));\n            // tslint:disable-next-line: no-any\n            return new Xliff2TranslationSerializer(sourceLocale, basePath, useLegacyIds, {});\n    }\n}\nfunction normalizeFormatOption(options) {\n    let format;\n    if (options.i18nFormat !== schema_1.Format.Xlf) {\n        format = options.i18nFormat;\n    }\n    else {\n        format = options.format;\n    }\n    switch (format) {\n        case schema_1.Format.Xlf:\n        case schema_1.Format.Xlif:\n        case schema_1.Format.Xliff:\n            format = schema_1.Format.Xlf;\n            break;\n        case schema_1.Format.Xlf2:\n        case schema_1.Format.Xliff2:\n            format = schema_1.Format.Xlf2;\n            break;\n        case undefined:\n            format = schema_1.Format.Xlf;\n            break;\n    }\n    return format;\n}\nclass NoEmitPlugin {\n    apply(compiler) {\n        compiler.hooks.shouldEmit.tap('angular-no-emit', () => false);\n    }\n}\nasync function execute(options, context, transforms) {\n    var _a;\n    // Check Angular version.\n    version_1.assertCompatibleAngularVersion(context.workspaceRoot, context.logger);\n    const browserTarget = architect_1.targetFromTargetString(options.browserTarget);\n    const browserOptions = await context.validateOptions(await context.getTargetOptions(browserTarget), await context.getBuilderNameForTarget(browserTarget));\n    const format = normalizeFormatOption(options);\n    // We need to determine the outFile name so that AngularCompiler can retrieve it.\n    let outFile = options.outFile || getI18nOutfile(options.format);\n    if (options.outputPath) {\n        // AngularCompilerPlugin doesn't support genDir so we have to adjust outFile instead.\n        outFile = path.join(options.outputPath, outFile);\n    }\n    outFile = path.resolve(context.workspaceRoot, outFile);\n    if (!context.target || !context.target.project) {\n        throw new Error('The builder requires a target.');\n    }\n    const metadata = await context.getProjectMetadata(context.target);\n    const i18n = i18n_options_1.createI18nOptions(metadata);\n    let usingIvy = false;\n    let useLegacyIds = true;\n    const ivyMessages = [];\n    const { config, projectRoot } = await webpack_browser_config_1.generateBrowserWebpackConfigFromContext({\n        ...browserOptions,\n        optimization: {\n            scripts: false,\n            styles: false,\n        },\n        sourceMap: {\n            scripts: true,\n            styles: false,\n            vendor: true,\n        },\n        buildOptimizer: false,\n        i18nLocale: options.i18nLocale || i18n.sourceLocale,\n        i18nFormat: format,\n        i18nFile: outFile,\n        aot: true,\n        progress: options.progress,\n        assets: [],\n        scripts: [],\n        styles: [],\n        deleteOutputPath: false,\n    }, context, (wco) => {\n        var _a;\n        const isIvyApplication = wco.tsConfig.options.enableIvy !== false;\n        // Default value for legacy message ids is currently true\n        useLegacyIds = (_a = wco.tsConfig.options.enableI18nLegacyMessageIdFormat) !== null && _a !== void 0 ? _a : true;\n        // Ivy extraction is the default for Ivy applications.\n        usingIvy = (isIvyApplication && options.ivy === undefined) || !!options.ivy;\n        if (usingIvy) {\n            if (!isIvyApplication) {\n                context.logger.warn('Ivy extraction enabled but application is not Ivy enabled. Extraction may fail.');\n            }\n        }\n        else if (isIvyApplication) {\n            context.logger.warn('Ivy extraction not enabled but application is Ivy enabled. ' +\n                'If the extraction fails, the `--ivy` flag will enable Ivy extraction.');\n        }\n        const partials = [\n            { plugins: [new NoEmitPlugin()] },\n            configs_1.getCommonConfig(wco),\n            // Only use VE extraction if not using Ivy\n            configs_1.getAotConfig(wco, !usingIvy),\n            configs_1.getStatsConfig(wco),\n        ];\n        // Add Ivy application file extractor support\n        if (usingIvy) {\n            partials.unshift({\n                module: {\n                    rules: [\n                        {\n                            test: /\\.[t|j]s$/,\n                            loader: require.resolve('./ivy-extract-loader'),\n                            options: {\n                                messageHandler: (messages) => ivyMessages.push(...messages),\n                            },\n                        },\n                    ],\n                },\n            });\n        }\n        // Replace all stylesheets with an empty default export\n        partials.push({\n            plugins: [\n                new webpack.NormalModuleReplacementPlugin(/\\.(css|scss|sass|styl|less)$/, path.join(__dirname, 'empty-export-default.js')),\n            ],\n        });\n        return partials;\n    });\n    if (usingIvy) {\n        try {\n            require.resolve('@angular/localize');\n        }\n        catch (_b) {\n            return {\n                success: false,\n                error: `Ivy extraction requires the '@angular/localize' package.`,\n            };\n        }\n    }\n    const webpackResult = await build_webpack_1.runWebpack((await ((_a = transforms === null || transforms === void 0 ? void 0 : transforms.webpackConfiguration) === null || _a === void 0 ? void 0 : _a.call(transforms, config))) || config, context, {\n        logging: stats_1.createWebpackLoggingCallback(false, context.logger),\n        webpackFactory: webpack,\n    }).toPromise();\n    // Complete if using VE\n    if (!usingIvy) {\n        return webpackResult;\n    }\n    // Nothing to process if the Webpack build failed\n    if (!webpackResult.success) {\n        return webpackResult;\n    }\n    const basePath = config.context || projectRoot;\n    const { checkDuplicateMessages } = await Promise.resolve().then(() => require(\n    // tslint:disable-next-line: trailing-comma\n    '@angular/localize/src/tools/src/extract/duplicates'));\n    // The filesystem is used to create a relative path for each file\n    // from the basePath.  This relative path is then used in the error message.\n    const checkFileSystem = {\n        relative(from, to) {\n            return path.relative(from, to);\n        },\n    };\n    const diagnostics = checkDuplicateMessages(\n    // tslint:disable-next-line: no-any\n    checkFileSystem, ivyMessages, 'warning', \n    // tslint:disable-next-line: no-any\n    basePath);\n    if (diagnostics.messages.length > 0) {\n        context.logger.warn(diagnostics.formatDiagnostics(''));\n    }\n    // Serialize all extracted messages\n    const serializer = await getSerializer(format, i18n.sourceLocale, basePath, useLegacyIds);\n    const content = serializer.serialize(ivyMessages);\n    // Ensure directory exists\n    const outputPath = path.dirname(outFile);\n    if (!fs.existsSync(outputPath)) {\n        fs.mkdirSync(outputPath, { recursive: true });\n    }\n    // Write translation file\n    fs.writeFileSync(outFile, content);\n    return webpackResult;\n}\nexports.execute = execute;\nexports.default = architect_1.createBuilder(execute);\n"]},"metadata":{},"sourceType":"script"}