{"ast":null,"code":"/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n(function (factory) {\n  if (typeof module === \"object\" && typeof module.exports === \"object\") {\n    var v = factory(require, exports);\n    if (v !== undefined) module.exports = v;\n  } else if (typeof define === \"function\" && define.amd) {\n    define(\"@angular/compiler-cli/src/ngtsc/transform/src/api\", [\"require\", \"exports\"], factory);\n  }\n})(function (require, exports) {\n  \"use strict\";\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.HandlerFlags = exports.HandlerPrecedence = exports.CompilationMode = void 0;\n  /**\n   * Specifies the compilation mode that is used for the compilation.\n   */\n\n  var CompilationMode;\n\n  (function (CompilationMode) {\n    /**\n     * Generates fully AOT compiled code using Ivy instructions.\n     */\n    CompilationMode[CompilationMode[\"FULL\"] = 0] = \"FULL\";\n    /**\n     * Generates code using a stable, but intermediate format suitable to be published to NPM.\n     */\n\n    CompilationMode[CompilationMode[\"PARTIAL\"] = 1] = \"PARTIAL\";\n  })(CompilationMode = exports.CompilationMode || (exports.CompilationMode = {}));\n\n  var HandlerPrecedence;\n\n  (function (HandlerPrecedence) {\n    /**\n     * Handler with PRIMARY precedence cannot overlap - there can only be one on a given class.\n     *\n     * If more than one PRIMARY handler matches a class, an error is produced.\n     */\n    HandlerPrecedence[HandlerPrecedence[\"PRIMARY\"] = 0] = \"PRIMARY\";\n    /**\n     * Handlers with SHARED precedence can match any class, possibly in addition to a single PRIMARY\n     * handler.\n     *\n     * It is not an error for a class to have any number of SHARED handlers.\n     */\n\n    HandlerPrecedence[HandlerPrecedence[\"SHARED\"] = 1] = \"SHARED\";\n    /**\n     * Handlers with WEAK precedence that match a class are ignored if any handlers with stronger\n     * precedence match a class.\n     */\n\n    HandlerPrecedence[HandlerPrecedence[\"WEAK\"] = 2] = \"WEAK\";\n  })(HandlerPrecedence = exports.HandlerPrecedence || (exports.HandlerPrecedence = {}));\n  /**\n   * A set of options which can be passed to a `DecoratorHandler` by a consumer, to tailor the output\n   * of compilation beyond the decorators themselves.\n   */\n\n\n  var HandlerFlags;\n\n  (function (HandlerFlags) {\n    /**\n     * No flags set.\n     */\n    HandlerFlags[HandlerFlags[\"NONE\"] = 0] = \"NONE\";\n    /**\n     * Indicates that this decorator is fully inherited from its parent at runtime. In addition to\n     * normally inherited aspects such as inputs and queries, full inheritance applies to every aspect\n     * of the component or directive, such as the template function itself.\n     *\n     * Its primary effect is to cause the `CopyDefinitionFeature` to be applied to the definition\n     * being compiled. See that class for more information.\n     */\n\n    HandlerFlags[HandlerFlags[\"FULL_INHERITANCE\"] = 1] = \"FULL_INHERITANCE\";\n  })(HandlerFlags = exports.HandlerFlags || (exports.HandlerFlags = {}));\n});","map":{"version":3,"sources":["../../../../../../../../../packages/compiler-cli/src/ngtsc/transform/src/api.ts"],"names":[],"mappings":"AAAA;;;;;;AAMG;;;;;;;;;;;;;;;AAYH;;AAEG;;AACH,MAAY,eAAZ;;AAAA,GAAA,UAAY,eAAZ,EAA2B;AACzB;;AAEG;AACH,IAAA,eAAA,CAAA,eAAA,CAAA,MAAA,CAAA,GAAA,CAAA,CAAA,GAAA,MAAA;AAEA;;AAEG;;AACH,IAAA,eAAA,CAAA,eAAA,CAAA,SAAA,CAAA,GAAA,CAAA,CAAA,GAAA,SAAA;AACD,GAVD,EAAY,eAAe,GAAf,OAAA,CAAA,eAAA,KAAA,OAAA,CAAA,eAAA,GAAe,EAAf,CAAZ;;AAYA,MAAY,iBAAZ;;AAAA,GAAA,UAAY,iBAAZ,EAA6B;AAC3B;;;;AAIG;AACH,IAAA,iBAAA,CAAA,iBAAA,CAAA,SAAA,CAAA,GAAA,CAAA,CAAA,GAAA,SAAA;AAEA;;;;;AAKG;;AACH,IAAA,iBAAA,CAAA,iBAAA,CAAA,QAAA,CAAA,GAAA,CAAA,CAAA,GAAA,QAAA;AAEA;;;AAGG;;AACH,IAAA,iBAAA,CAAA,iBAAA,CAAA,MAAA,CAAA,GAAA,CAAA,CAAA,GAAA,MAAA;AACD,GArBD,EAAY,iBAAiB,GAAjB,OAAA,CAAA,iBAAA,KAAA,OAAA,CAAA,iBAAA,GAAiB,EAAjB,CAAZ;AAuBA;;;AAGG;;;AACH,MAAY,YAAZ;;AAAA,GAAA,UAAY,YAAZ,EAAwB;AACtB;;AAEG;AACH,IAAA,YAAA,CAAA,YAAA,CAAA,MAAA,CAAA,GAAA,CAAA,CAAA,GAAA,MAAA;AAEA;;;;;;;AAOG;;AACH,IAAA,YAAA,CAAA,YAAA,CAAA,kBAAA,CAAA,GAAA,CAAA,CAAA,GAAA,kBAAA;AACD,GAfD,EAAY,YAAY,GAAZ,OAAA,CAAA,YAAA,KAAA,OAAA,CAAA,YAAA,GAAY,EAAZ,CAAZ","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ConstantPool, Expression, Statement, Type} from '@angular/compiler';\nimport * as ts from 'typescript';\n\nimport {Reexport} from '../../imports';\nimport {SemanticSymbol} from '../../incremental/semantic_graph';\nimport {IndexingContext} from '../../indexer';\nimport {ClassDeclaration, Decorator} from '../../reflection';\nimport {ImportManager} from '../../translator';\nimport {TypeCheckContext} from '../../typecheck/api';\n\n/**\n * Specifies the compilation mode that is used for the compilation.\n */\nexport enum CompilationMode {\n  /**\n   * Generates fully AOT compiled code using Ivy instructions.\n   */\n  FULL,\n\n  /**\n   * Generates code using a stable, but intermediate format suitable to be published to NPM.\n   */\n  PARTIAL,\n}\n\nexport enum HandlerPrecedence {\n  /**\n   * Handler with PRIMARY precedence cannot overlap - there can only be one on a given class.\n   *\n   * If more than one PRIMARY handler matches a class, an error is produced.\n   */\n  PRIMARY,\n\n  /**\n   * Handlers with SHARED precedence can match any class, possibly in addition to a single PRIMARY\n   * handler.\n   *\n   * It is not an error for a class to have any number of SHARED handlers.\n   */\n  SHARED,\n\n  /**\n   * Handlers with WEAK precedence that match a class are ignored if any handlers with stronger\n   * precedence match a class.\n   */\n  WEAK,\n}\n\n/**\n * A set of options which can be passed to a `DecoratorHandler` by a consumer, to tailor the output\n * of compilation beyond the decorators themselves.\n */\nexport enum HandlerFlags {\n  /**\n   * No flags set.\n   */\n  NONE = 0x0,\n\n  /**\n   * Indicates that this decorator is fully inherited from its parent at runtime. In addition to\n   * normally inherited aspects such as inputs and queries, full inheritance applies to every aspect\n   * of the component or directive, such as the template function itself.\n   *\n   * Its primary effect is to cause the `CopyDefinitionFeature` to be applied to the definition\n   * being compiled. See that class for more information.\n   */\n  FULL_INHERITANCE = 0x00000001,\n}\n\n\n/**\n * Provides the interface between a decorator compiler from @angular/compiler and the Typescript\n * compiler/transform.\n *\n * The decorator compilers in @angular/compiler do not depend on Typescript. The handler is\n * responsible for extracting the information required to perform compilation from the decorators\n * and Typescript source, invoking the decorator compiler, and returning the result.\n *\n * @param `D` The type of decorator metadata produced by `detect`.\n * @param `A` The type of analysis metadata produced by `analyze`.\n * @param `R` The type of resolution metadata produced by `resolve`.\n */\nexport interface DecoratorHandler<D, A, S extends SemanticSymbol|null, R> {\n  readonly name: string;\n\n  /**\n   * The precedence of a handler controls how it interacts with other handlers that match the same\n   * class.\n   *\n   * See the descriptions on `HandlerPrecedence` for an explanation of the behaviors involved.\n   */\n  readonly precedence: HandlerPrecedence;\n\n  /**\n   * Scan a set of reflected decorators and determine if this handler is responsible for compilation\n   * of one of them.\n   */\n  detect(node: ClassDeclaration, decorators: Decorator[]|null): DetectResult<D>|undefined;\n\n\n  /**\n   * Asynchronously perform pre-analysis on the decorator/class combination.\n   *\n   * `preanalyze` is optional and is not guaranteed to be called through all compilation flows. It\n   * will only be called if asynchronicity is supported in the CompilerHost.\n   */\n  preanalyze?(node: ClassDeclaration, metadata: Readonly<D>): Promise<void>|undefined;\n\n  /**\n   * Perform analysis on the decorator/class combination, extracting information from the class\n   * required for compilation.\n   *\n   * Returns analyzed metadata if successful, or an array of diagnostic messages if the analysis\n   * fails or the decorator isn't valid.\n   *\n   * Analysis should always be a \"pure\" operation, with no side effects. This is because the\n   * detect/analysis steps might be skipped for files which have not changed during incremental\n   * builds. Any side effects required for compilation (e.g. registration of metadata) should happen\n   * in the `register` phase, which is guaranteed to run even for incremental builds.\n   */\n  analyze(node: ClassDeclaration, metadata: Readonly<D>, handlerFlags?: HandlerFlags):\n      AnalysisOutput<A>;\n\n  /**\n   * React to a change in a resource file by updating the `analysis` or `resolution`, under the\n   * assumption that nothing in the TypeScript code has changed.\n   */\n  updateResources?(node: ClassDeclaration, analysis: A, resolution: R): void;\n\n  /**\n   * Produces a `SemanticSymbol` that represents the class, which is registered into the semantic\n   * dependency graph. The symbol is used in incremental compilations to let the compiler determine\n   * how a change to the class affects prior emit results. See the `incremental` target's README for\n   * details on how this works.\n   *\n   * The symbol is passed in to `resolve`, where it can be extended with references into other parts\n   * of the compilation as needed.\n   *\n   * Only primary handlers are allowed to have symbols; handlers with `precedence` other than\n   * `HandlerPrecedence.PRIMARY` must return a `null` symbol.\n   */\n  symbol(node: ClassDeclaration, analysis: Readonly<A>): S;\n\n  /**\n   * Post-process the analysis of a decorator/class combination and record any necessary information\n   * in the larger compilation.\n   *\n   * Registration always occurs for a given decorator/class, regardless of whether analysis was\n   * performed directly or whether the analysis results were reused from the previous program.\n   */\n  register?(node: ClassDeclaration, analysis: A): void;\n\n  /**\n   * Registers information about the decorator for the indexing phase in a\n   * `IndexingContext`, which stores information about components discovered in the\n   * program.\n   */\n  index?\n      (context: IndexingContext, node: ClassDeclaration, analysis: Readonly<A>,\n       resolution: Readonly<R>): void;\n\n  /**\n   * Perform resolution on the given decorator along with the result of analysis.\n   *\n   * The resolution phase happens after the entire `ts.Program` has been analyzed, and gives the\n   * `DecoratorHandler` a chance to leverage information from the whole compilation unit to enhance\n   * the `analysis` before the emit phase.\n   */\n  resolve?(node: ClassDeclaration, analysis: Readonly<A>, symbol: S): ResolveResult<R>;\n\n  typeCheck?\n      (ctx: TypeCheckContext, node: ClassDeclaration, analysis: Readonly<A>,\n       resolution: Readonly<R>): void;\n\n  /**\n   * Generate a description of the field which should be added to the class, including any\n   * initialization code to be generated.\n   *\n   * If the compilation mode is configured as partial, and an implementation of `compilePartial` is\n   * provided, then this method is not called.\n   */\n  compileFull(\n      node: ClassDeclaration, analysis: Readonly<A>, resolution: Readonly<R>,\n      constantPool: ConstantPool): CompileResult|CompileResult[];\n\n  /**\n   * Generates code for the decorator using a stable, but intermediate format suitable to be\n   * published to NPM. This code is meant to be processed by the linker to achieve the final AOT\n   * compiled code.\n   *\n   * If present, this method is used if the compilation mode is configured as partial, otherwise\n   * `compileFull` is.\n   */\n  compilePartial?\n      (node: ClassDeclaration, analysis: Readonly<A>, resolution: Readonly<R>): CompileResult\n      |CompileResult[];\n}\n\n/**\n * The output of detecting a trait for a declaration as the result of the first phase of the\n * compilation pipeline.\n */\nexport interface DetectResult<M> {\n  /**\n   * The node that triggered the match, which is typically a decorator.\n   */\n  trigger: ts.Node|null;\n\n  /**\n   * Refers to the decorator that was recognized for this detection, if any. This can be a concrete\n   * decorator that is actually present in a file, or a synthetic decorator as inserted\n   * programmatically.\n   */\n  decorator: Decorator|null;\n\n  /**\n   * An arbitrary object to carry over from the detection phase into the analysis phase.\n   */\n  metadata: Readonly<M>;\n}\n\n/**\n * The output of an analysis operation, consisting of possibly an arbitrary analysis object (used as\n * the input to code generation) and potentially diagnostics if there were errors uncovered during\n * analysis.\n */\nexport interface AnalysisOutput<A> {\n  analysis?: Readonly<A>;\n  diagnostics?: ts.Diagnostic[];\n}\n\n/**\n * A description of the static field to add to a class, including an initialization expression\n * and a type for the .d.ts file.\n */\nexport interface CompileResult {\n  name: string;\n  initializer: Expression;\n  statements: Statement[];\n  type: Type;\n}\n\nexport interface ResolveResult<R> {\n  reexports?: Reexport[];\n  diagnostics?: ts.Diagnostic[];\n  data?: Readonly<R>;\n}\n\nexport interface DtsTransform {\n  transformClassElement?(element: ts.ClassElement, imports: ImportManager): ts.ClassElement;\n  transformFunctionDeclaration?\n      (element: ts.FunctionDeclaration, imports: ImportManager): ts.FunctionDeclaration;\n  transformClass?\n      (clazz: ts.ClassDeclaration, elements: ReadonlyArray<ts.ClassElement>,\n       imports: ImportManager): ts.ClassDeclaration;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}