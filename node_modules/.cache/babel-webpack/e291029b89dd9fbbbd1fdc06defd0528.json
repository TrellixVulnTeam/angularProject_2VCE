{"ast":null,"code":"var _classCallCheck = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _get = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/get\");\n\nvar _getPrototypeOf = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar Minipass = require('minipass');\n\nvar _data = Symbol('_data');\n\nvar _length = Symbol('_length');\n\nvar Collect = /*#__PURE__*/function (_Minipass) {\n  \"use strict\";\n\n  _inherits(Collect, _Minipass);\n\n  var _super = _createSuper(Collect);\n\n  function Collect(options) {\n    var _this;\n\n    _classCallCheck(this, Collect);\n\n    _this = _super.call(this, options);\n    _this[_data] = [];\n    _this[_length] = 0;\n    return _this;\n  }\n\n  _createClass(Collect, [{\n    key: \"write\",\n    value: function write(chunk, encoding, cb) {\n      if (typeof encoding === 'function') cb = encoding, encoding = 'utf8';\n      if (!encoding) encoding = 'utf8';\n      var c = Buffer.isBuffer(chunk) ? chunk : Buffer.from(chunk, encoding);\n\n      this[_data].push(c);\n\n      this[_length] += c.length;\n      if (cb) cb();\n      return true;\n    }\n  }, {\n    key: \"end\",\n    value: function end(chunk, encoding, cb) {\n      if (typeof chunk === 'function') cb = chunk, chunk = null;\n      if (typeof encoding === 'function') cb = encoding, encoding = 'utf8';\n      if (chunk) this.write(chunk, encoding);\n      var result = Buffer.concat(this[_data], this[_length]);\n\n      _get(_getPrototypeOf(Collect.prototype), \"write\", this).call(this, result);\n\n      return _get(_getPrototypeOf(Collect.prototype), \"end\", this).call(this, cb);\n    }\n  }]);\n\n  return Collect;\n}(Minipass);\n\nmodule.exports = Collect; // it would be possible to DRY this a bit by doing something like\n// this.collector = new Collect() and listening on its data event,\n// but it's not much code, and we may as well save the extra obj\n\nvar CollectPassThrough = /*#__PURE__*/function (_Minipass2) {\n  \"use strict\";\n\n  _inherits(CollectPassThrough, _Minipass2);\n\n  var _super2 = _createSuper(CollectPassThrough);\n\n  function CollectPassThrough(options) {\n    var _this2;\n\n    _classCallCheck(this, CollectPassThrough);\n\n    _this2 = _super2.call(this, options);\n    _this2[_data] = [];\n    _this2[_length] = 0;\n    return _this2;\n  }\n\n  _createClass(CollectPassThrough, [{\n    key: \"write\",\n    value: function write(chunk, encoding, cb) {\n      if (typeof encoding === 'function') cb = encoding, encoding = 'utf8';\n      if (!encoding) encoding = 'utf8';\n      var c = Buffer.isBuffer(chunk) ? chunk : Buffer.from(chunk, encoding);\n\n      this[_data].push(c);\n\n      this[_length] += c.length;\n      return _get(_getPrototypeOf(CollectPassThrough.prototype), \"write\", this).call(this, chunk, encoding, cb);\n    }\n  }, {\n    key: \"end\",\n    value: function end(chunk, encoding, cb) {\n      if (typeof chunk === 'function') cb = chunk, chunk = null;\n      if (typeof encoding === 'function') cb = encoding, encoding = 'utf8';\n      if (chunk) this.write(chunk, encoding);\n      var result = Buffer.concat(this[_data], this[_length]);\n      this.emit('collect', result);\n      return _get(_getPrototypeOf(CollectPassThrough.prototype), \"end\", this).call(this, cb);\n    }\n  }]);\n\n  return CollectPassThrough;\n}(Minipass);\n\nmodule.exports.PassThrough = CollectPassThrough;","map":{"version":3,"sources":["/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/minipass-collect/index.js"],"names":["Minipass","require","_data","Symbol","_length","Collect","options","chunk","encoding","cb","c","Buffer","isBuffer","from","push","length","write","result","concat","module","exports","CollectPassThrough","emit","PassThrough"],"mappings":"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","sourcesContent":["const Minipass = require('minipass')\nconst _data = Symbol('_data')\nconst _length = Symbol('_length')\nclass Collect extends Minipass {\n  constructor (options) {\n    super(options)\n    this[_data] = []\n    this[_length] = 0\n  }\n  write (chunk, encoding, cb) {\n    if (typeof encoding === 'function')\n      cb = encoding, encoding = 'utf8'\n\n    if (!encoding)\n      encoding = 'utf8'\n\n    const c = Buffer.isBuffer(chunk) ? chunk : Buffer.from(chunk, encoding)\n    this[_data].push(c)\n    this[_length] += c.length\n    if (cb)\n      cb()\n    return true\n  }\n  end (chunk, encoding, cb) {\n    if (typeof chunk === 'function')\n      cb = chunk, chunk = null\n    if (typeof encoding === 'function')\n      cb = encoding, encoding = 'utf8'\n    if (chunk)\n      this.write(chunk, encoding)\n    const result = Buffer.concat(this[_data], this[_length])\n    super.write(result)\n    return super.end(cb)\n  }\n}\nmodule.exports = Collect\n\n// it would be possible to DRY this a bit by doing something like\n// this.collector = new Collect() and listening on its data event,\n// but it's not much code, and we may as well save the extra obj\nclass CollectPassThrough extends Minipass {\n  constructor (options) {\n    super(options)\n    this[_data] = []\n    this[_length] = 0\n  }\n  write (chunk, encoding, cb) {\n    if (typeof encoding === 'function')\n      cb = encoding, encoding = 'utf8'\n\n    if (!encoding)\n      encoding = 'utf8'\n\n    const c = Buffer.isBuffer(chunk) ? chunk : Buffer.from(chunk, encoding)\n    this[_data].push(c)\n    this[_length] += c.length\n    return super.write(chunk, encoding, cb)\n  }\n  end (chunk, encoding, cb) {\n    if (typeof chunk === 'function')\n      cb = chunk, chunk = null\n    if (typeof encoding === 'function')\n      cb = encoding, encoding = 'utf8'\n    if (chunk)\n      this.write(chunk, encoding)\n    const result = Buffer.concat(this[_data], this[_length])\n    this.emit('collect', result)\n    return super.end(cb)\n  }\n}\nmodule.exports.PassThrough = CollectPassThrough\n"]},"metadata":{},"sourceType":"script"}