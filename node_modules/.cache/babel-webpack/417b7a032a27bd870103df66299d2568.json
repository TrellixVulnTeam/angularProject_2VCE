{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Ivan Kopeykin @vankop\n*/\n\"use strict\";\n\nvar _objectSpread = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/objectSpread2\");\n\nvar _slicedToArray = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nvar _classCallCheck = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/createClass\");\n\nvar path = require(\"path\");\n\nvar DescriptionFileUtils = require(\"./DescriptionFileUtils\");\n\nvar forEachBail = require(\"./forEachBail\");\n\nvar _require = require(\"./util/entrypoints\"),\n    processImportsField = _require.processImportsField;\n\nvar _require2 = require(\"./util/identifier\"),\n    parseIdentifier = _require2.parseIdentifier;\n/** @typedef {import(\"./Resolver\")} Resolver */\n\n/** @typedef {import(\"./Resolver\").ResolveStepHook} ResolveStepHook */\n\n/** @typedef {import(\"./util/entrypoints\").FieldProcessor} FieldProcessor */\n\n/** @typedef {import(\"./util/entrypoints\").ImportsField} ImportsField */\n\n\nvar dotCode = \".\".charCodeAt(0);\n\nmodule.exports = /*#__PURE__*/function () {\n  /**\n   * @param {string | ResolveStepHook} source source\n   * @param {Set<string>} conditionNames condition names\n   * @param {string | string[]} fieldNamePath name path\n   * @param {string | ResolveStepHook} targetFile target file\n   * @param {string | ResolveStepHook} targetPackage target package\n   */\n  function ImportsFieldPlugin(source, conditionNames, fieldNamePath, targetFile, targetPackage) {\n    _classCallCheck(this, ImportsFieldPlugin);\n\n    this.source = source;\n    this.targetFile = targetFile;\n    this.targetPackage = targetPackage;\n    this.conditionNames = conditionNames;\n    this.fieldName = fieldNamePath;\n    /** @type {WeakMap<any, FieldProcessor>} */\n\n    this.fieldProcessorCache = new WeakMap();\n  }\n  /**\n   * @param {Resolver} resolver the resolver\n   * @returns {void}\n   */\n\n\n  _createClass(ImportsFieldPlugin, [{\n    key: \"apply\",\n    value: function apply(resolver) {\n      var _this = this;\n\n      var targetFile = resolver.ensureHook(this.targetFile);\n      var targetPackage = resolver.ensureHook(this.targetPackage);\n      resolver.getHook(this.source).tapAsync(\"ImportsFieldPlugin\", function (request, resolveContext, callback) {\n        // When there is no description file, abort\n        if (!request.descriptionFilePath) return callback();\n        if ( // When the description file is inherited from parent, abort\n        // (There is no description file inside of this package)\n        request.relativePath !== \".\" || request.request === undefined) return callback();\n        var remainingRequest = request.request + request.query + request.fragment;\n        /** @type {ImportsField|null} */\n\n        var importsField = DescriptionFileUtils.getField(request.descriptionFileData, _this.fieldName);\n        if (!importsField) return callback();\n\n        if (request.directory) {\n          return callback(new Error(\"Resolving to directories is not possible with the imports field (request was \".concat(remainingRequest, \"/)\")));\n        }\n\n        var paths;\n\n        try {\n          // We attach the cache to the description file instead of the importsField value\n          // because we use a WeakMap and the importsField could be a string too.\n          // Description file is always an object when exports field can be accessed.\n          var fieldProcessor = _this.fieldProcessorCache.get(request.descriptionFileData);\n\n          if (fieldProcessor === undefined) {\n            fieldProcessor = processImportsField(importsField);\n\n            _this.fieldProcessorCache.set(request.descriptionFileData, fieldProcessor);\n          }\n\n          paths = fieldProcessor(remainingRequest, _this.conditionNames);\n        } catch (err) {\n          if (resolveContext.log) {\n            resolveContext.log(\"Imports field in \".concat(request.descriptionFilePath, \" can't be processed: \").concat(err));\n          }\n\n          return callback(err);\n        }\n\n        if (paths.length === 0) {\n          return callback(new Error(\"Package import \".concat(remainingRequest, \" is not imported from package \").concat(request.descriptionFileRoot, \" (see imports field in \").concat(request.descriptionFilePath, \")\")));\n        }\n\n        forEachBail(paths, function (p, callback) {\n          var parsedIdentifier = parseIdentifier(p);\n          if (!parsedIdentifier) return callback();\n\n          var _parsedIdentifier = _slicedToArray(parsedIdentifier, 3),\n              path_ = _parsedIdentifier[0],\n              query = _parsedIdentifier[1],\n              fragment = _parsedIdentifier[2];\n\n          switch (path_.charCodeAt(0)) {\n            // should be relative\n            case dotCode:\n              {\n                var obj = _objectSpread(_objectSpread({}, request), {}, {\n                  request: undefined,\n                  path: path.join(\n                  /** @type {string} */\n                  request.descriptionFileRoot, path_),\n                  relativePath: path_,\n                  query: query,\n                  fragment: fragment\n                });\n\n                resolver.doResolve(targetFile, obj, \"using imports field: \" + p, resolveContext, callback);\n                break;\n              }\n            // package resolving\n\n            default:\n              {\n                var _obj = _objectSpread(_objectSpread({}, request), {}, {\n                  request: path_,\n                  relativePath: path_,\n                  fullySpecified: true,\n                  query: query,\n                  fragment: fragment\n                });\n\n                resolver.doResolve(targetPackage, _obj, \"using imports field: \" + p, resolveContext, callback);\n              }\n          }\n        }, function (err, result) {\n          return callback(err, result || null);\n        });\n      });\n    }\n  }]);\n\n  return ImportsFieldPlugin;\n}();","map":{"version":3,"sources":["/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/enhanced-resolve/lib/ImportsFieldPlugin.js"],"names":["path","require","DescriptionFileUtils","forEachBail","processImportsField","parseIdentifier","dotCode","charCodeAt","module","exports","source","conditionNames","fieldNamePath","targetFile","targetPackage","fieldName","fieldProcessorCache","WeakMap","resolver","ensureHook","getHook","tapAsync","request","resolveContext","callback","descriptionFilePath","relativePath","undefined","remainingRequest","query","fragment","importsField","getField","descriptionFileData","directory","Error","paths","fieldProcessor","get","set","err","log","length","descriptionFileRoot","p","parsedIdentifier","path_","obj","join","doResolve","fullySpecified","result"],"mappings":"AAAA;AACA;AACA;AACA;AAEA;;;;;;;;;;AAEA,IAAMA,IAAI,GAAGC,OAAO,CAAC,MAAD,CAApB;;AACA,IAAMC,oBAAoB,GAAGD,OAAO,CAAC,wBAAD,CAApC;;AACA,IAAME,WAAW,GAAGF,OAAO,CAAC,eAAD,CAA3B;;AACA,eAAgCA,OAAO,CAAC,oBAAD,CAAvC;AAAA,IAAQG,mBAAR,YAAQA,mBAAR;;AACA,gBAA4BH,OAAO,CAAC,mBAAD,CAAnC;AAAA,IAAQI,eAAR,aAAQA,eAAR;AAEA;;AACA;;AACA;;AACA;;;AAEA,IAAMC,OAAO,GAAG,IAAIC,UAAJ,CAAe,CAAf,CAAhB;;AAEAC,MAAM,CAACC,OAAP;AACC;AACD;AACA;AACA;AACA;AACA;AACA;AACC,8BACCC,MADD,EAECC,cAFD,EAGCC,aAHD,EAICC,UAJD,EAKCC,aALD,EAME;AAAA;;AACD,SAAKJ,MAAL,GAAcA,MAAd;AACA,SAAKG,UAAL,GAAkBA,UAAlB;AACA,SAAKC,aAAL,GAAqBA,aAArB;AACA,SAAKH,cAAL,GAAsBA,cAAtB;AACA,SAAKI,SAAL,GAAiBH,aAAjB;AACA;;AACA,SAAKI,mBAAL,GAA2B,IAAIC,OAAJ,EAA3B;AACA;AAED;AACD;AACA;AACA;;;AA3BA;AAAA;AAAA,WA4BC,eAAMC,QAAN,EAAgB;AAAA;;AACf,UAAML,UAAU,GAAGK,QAAQ,CAACC,UAAT,CAAoB,KAAKN,UAAzB,CAAnB;AACA,UAAMC,aAAa,GAAGI,QAAQ,CAACC,UAAT,CAAoB,KAAKL,aAAzB,CAAtB;AAEAI,MAAAA,QAAQ,CACNE,OADF,CACU,KAAKV,MADf,EAEEW,QAFF,CAEW,oBAFX,EAEiC,UAACC,OAAD,EAAUC,cAAV,EAA0BC,QAA1B,EAAuC;AACtE;AACA,YAAI,CAACF,OAAO,CAACG,mBAAb,EAAkC,OAAOD,QAAQ,EAAf;AAElC,aACC;AACA;AACAF,QAAAA,OAAO,CAACI,YAAR,KAAyB,GAAzB,IACAJ,OAAO,CAACA,OAAR,KAAoBK,SAJrB,EAMC,OAAOH,QAAQ,EAAf;AAED,YAAMI,gBAAgB,GACrBN,OAAO,CAACA,OAAR,GAAkBA,OAAO,CAACO,KAA1B,GAAkCP,OAAO,CAACQ,QAD3C;AAEA;;AACA,YAAMC,YAAY,GAAG7B,oBAAoB,CAAC8B,QAArB,CACpBV,OAAO,CAACW,mBADY,EAEpB,KAAI,CAAClB,SAFe,CAArB;AAIA,YAAI,CAACgB,YAAL,EAAmB,OAAOP,QAAQ,EAAf;;AAEnB,YAAIF,OAAO,CAACY,SAAZ,EAAuB;AACtB,iBAAOV,QAAQ,CACd,IAAIW,KAAJ,wFACiFP,gBADjF,QADc,CAAf;AAKA;;AAED,YAAIQ,KAAJ;;AAEA,YAAI;AACH;AACA;AACA;AACA,cAAIC,cAAc,GAAG,KAAI,CAACrB,mBAAL,CAAyBsB,GAAzB,CACpBhB,OAAO,CAACW,mBADY,CAArB;;AAGA,cAAII,cAAc,KAAKV,SAAvB,EAAkC;AACjCU,YAAAA,cAAc,GAAGjC,mBAAmB,CAAC2B,YAAD,CAApC;;AACA,YAAA,KAAI,CAACf,mBAAL,CAAyBuB,GAAzB,CACCjB,OAAO,CAACW,mBADT,EAECI,cAFD;AAIA;;AACDD,UAAAA,KAAK,GAAGC,cAAc,CAACT,gBAAD,EAAmB,KAAI,CAACjB,cAAxB,CAAtB;AACA,SAfD,CAeE,OAAO6B,GAAP,EAAY;AACb,cAAIjB,cAAc,CAACkB,GAAnB,EAAwB;AACvBlB,YAAAA,cAAc,CAACkB,GAAf,4BACqBnB,OAAO,CAACG,mBAD7B,kCACwEe,GADxE;AAGA;;AACD,iBAAOhB,QAAQ,CAACgB,GAAD,CAAf;AACA;;AAED,YAAIJ,KAAK,CAACM,MAAN,KAAiB,CAArB,EAAwB;AACvB,iBAAOlB,QAAQ,CACd,IAAIW,KAAJ,0BACmBP,gBADnB,2CACoEN,OAAO,CAACqB,mBAD5E,oCACyHrB,OAAO,CAACG,mBADjI,OADc,CAAf;AAKA;;AAEDtB,QAAAA,WAAW,CACViC,KADU,EAEV,UAACQ,CAAD,EAAIpB,QAAJ,EAAiB;AAChB,cAAMqB,gBAAgB,GAAGxC,eAAe,CAACuC,CAAD,CAAxC;AAEA,cAAI,CAACC,gBAAL,EAAuB,OAAOrB,QAAQ,EAAf;;AAEvB,iDAAiCqB,gBAAjC;AAAA,cAAOC,KAAP;AAAA,cAAcjB,KAAd;AAAA,cAAqBC,QAArB;;AAEA,kBAAQgB,KAAK,CAACvC,UAAN,CAAiB,CAAjB,CAAR;AACC;AACA,iBAAKD,OAAL;AAAc;AACb,oBAAMyC,GAAG,mCACLzB,OADK;AAERA,kBAAAA,OAAO,EAAEK,SAFD;AAGR3B,kBAAAA,IAAI,EAAEA,IAAI,CAACgD,IAAL;AACL;AAAuB1B,kBAAAA,OAAO,CAACqB,mBAD1B,EAELG,KAFK,CAHE;AAORpB,kBAAAA,YAAY,EAAEoB,KAPN;AAQRjB,kBAAAA,KAAK,EAALA,KARQ;AASRC,kBAAAA,QAAQ,EAARA;AATQ,kBAAT;;AAYAZ,gBAAAA,QAAQ,CAAC+B,SAAT,CACCpC,UADD,EAECkC,GAFD,EAGC,0BAA0BH,CAH3B,EAICrB,cAJD,EAKCC,QALD;AAOA;AACA;AAED;;AACA;AAAS;AACR,oBAAMuB,IAAG,mCACLzB,OADK;AAERA,kBAAAA,OAAO,EAAEwB,KAFD;AAGRpB,kBAAAA,YAAY,EAAEoB,KAHN;AAIRI,kBAAAA,cAAc,EAAE,IAJR;AAKRrB,kBAAAA,KAAK,EAALA,KALQ;AAMRC,kBAAAA,QAAQ,EAARA;AANQ,kBAAT;;AASAZ,gBAAAA,QAAQ,CAAC+B,SAAT,CACCnC,aADD,EAECiC,IAFD,EAGC,0BAA0BH,CAH3B,EAICrB,cAJD,EAKCC,QALD;AAOA;AA3CF;AA6CA,SAtDS,EAuDV,UAACgB,GAAD,EAAMW,MAAN;AAAA,iBAAiB3B,QAAQ,CAACgB,GAAD,EAAMW,MAAM,IAAI,IAAhB,CAAzB;AAAA,SAvDU,CAAX;AAyDA,OA1HF;AA2HA;AA3JF;;AAAA;AAAA","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Ivan Kopeykin @vankop\n*/\n\n\"use strict\";\n\nconst path = require(\"path\");\nconst DescriptionFileUtils = require(\"./DescriptionFileUtils\");\nconst forEachBail = require(\"./forEachBail\");\nconst { processImportsField } = require(\"./util/entrypoints\");\nconst { parseIdentifier } = require(\"./util/identifier\");\n\n/** @typedef {import(\"./Resolver\")} Resolver */\n/** @typedef {import(\"./Resolver\").ResolveStepHook} ResolveStepHook */\n/** @typedef {import(\"./util/entrypoints\").FieldProcessor} FieldProcessor */\n/** @typedef {import(\"./util/entrypoints\").ImportsField} ImportsField */\n\nconst dotCode = \".\".charCodeAt(0);\n\nmodule.exports = class ImportsFieldPlugin {\n\t/**\n\t * @param {string | ResolveStepHook} source source\n\t * @param {Set<string>} conditionNames condition names\n\t * @param {string | string[]} fieldNamePath name path\n\t * @param {string | ResolveStepHook} targetFile target file\n\t * @param {string | ResolveStepHook} targetPackage target package\n\t */\n\tconstructor(\n\t\tsource,\n\t\tconditionNames,\n\t\tfieldNamePath,\n\t\ttargetFile,\n\t\ttargetPackage\n\t) {\n\t\tthis.source = source;\n\t\tthis.targetFile = targetFile;\n\t\tthis.targetPackage = targetPackage;\n\t\tthis.conditionNames = conditionNames;\n\t\tthis.fieldName = fieldNamePath;\n\t\t/** @type {WeakMap<any, FieldProcessor>} */\n\t\tthis.fieldProcessorCache = new WeakMap();\n\t}\n\n\t/**\n\t * @param {Resolver} resolver the resolver\n\t * @returns {void}\n\t */\n\tapply(resolver) {\n\t\tconst targetFile = resolver.ensureHook(this.targetFile);\n\t\tconst targetPackage = resolver.ensureHook(this.targetPackage);\n\n\t\tresolver\n\t\t\t.getHook(this.source)\n\t\t\t.tapAsync(\"ImportsFieldPlugin\", (request, resolveContext, callback) => {\n\t\t\t\t// When there is no description file, abort\n\t\t\t\tif (!request.descriptionFilePath) return callback();\n\n\t\t\t\tif (\n\t\t\t\t\t// When the description file is inherited from parent, abort\n\t\t\t\t\t// (There is no description file inside of this package)\n\t\t\t\t\trequest.relativePath !== \".\" ||\n\t\t\t\t\trequest.request === undefined\n\t\t\t\t)\n\t\t\t\t\treturn callback();\n\n\t\t\t\tconst remainingRequest =\n\t\t\t\t\trequest.request + request.query + request.fragment;\n\t\t\t\t/** @type {ImportsField|null} */\n\t\t\t\tconst importsField = DescriptionFileUtils.getField(\n\t\t\t\t\trequest.descriptionFileData,\n\t\t\t\t\tthis.fieldName\n\t\t\t\t);\n\t\t\t\tif (!importsField) return callback();\n\n\t\t\t\tif (request.directory) {\n\t\t\t\t\treturn callback(\n\t\t\t\t\t\tnew Error(\n\t\t\t\t\t\t\t`Resolving to directories is not possible with the imports field (request was ${remainingRequest}/)`\n\t\t\t\t\t\t)\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\tlet paths;\n\n\t\t\t\ttry {\n\t\t\t\t\t// We attach the cache to the description file instead of the importsField value\n\t\t\t\t\t// because we use a WeakMap and the importsField could be a string too.\n\t\t\t\t\t// Description file is always an object when exports field can be accessed.\n\t\t\t\t\tlet fieldProcessor = this.fieldProcessorCache.get(\n\t\t\t\t\t\trequest.descriptionFileData\n\t\t\t\t\t);\n\t\t\t\t\tif (fieldProcessor === undefined) {\n\t\t\t\t\t\tfieldProcessor = processImportsField(importsField);\n\t\t\t\t\t\tthis.fieldProcessorCache.set(\n\t\t\t\t\t\t\trequest.descriptionFileData,\n\t\t\t\t\t\t\tfieldProcessor\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t\tpaths = fieldProcessor(remainingRequest, this.conditionNames);\n\t\t\t\t} catch (err) {\n\t\t\t\t\tif (resolveContext.log) {\n\t\t\t\t\t\tresolveContext.log(\n\t\t\t\t\t\t\t`Imports field in ${request.descriptionFilePath} can't be processed: ${err}`\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t\treturn callback(err);\n\t\t\t\t}\n\n\t\t\t\tif (paths.length === 0) {\n\t\t\t\t\treturn callback(\n\t\t\t\t\t\tnew Error(\n\t\t\t\t\t\t\t`Package import ${remainingRequest} is not imported from package ${request.descriptionFileRoot} (see imports field in ${request.descriptionFilePath})`\n\t\t\t\t\t\t)\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\tforEachBail(\n\t\t\t\t\tpaths,\n\t\t\t\t\t(p, callback) => {\n\t\t\t\t\t\tconst parsedIdentifier = parseIdentifier(p);\n\n\t\t\t\t\t\tif (!parsedIdentifier) return callback();\n\n\t\t\t\t\t\tconst [path_, query, fragment] = parsedIdentifier;\n\n\t\t\t\t\t\tswitch (path_.charCodeAt(0)) {\n\t\t\t\t\t\t\t// should be relative\n\t\t\t\t\t\t\tcase dotCode: {\n\t\t\t\t\t\t\t\tconst obj = {\n\t\t\t\t\t\t\t\t\t...request,\n\t\t\t\t\t\t\t\t\trequest: undefined,\n\t\t\t\t\t\t\t\t\tpath: path.join(\n\t\t\t\t\t\t\t\t\t\t/** @type {string} */ (request.descriptionFileRoot),\n\t\t\t\t\t\t\t\t\t\tpath_\n\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\trelativePath: path_,\n\t\t\t\t\t\t\t\t\tquery,\n\t\t\t\t\t\t\t\t\tfragment\n\t\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\t\tresolver.doResolve(\n\t\t\t\t\t\t\t\t\ttargetFile,\n\t\t\t\t\t\t\t\t\tobj,\n\t\t\t\t\t\t\t\t\t\"using imports field: \" + p,\n\t\t\t\t\t\t\t\t\tresolveContext,\n\t\t\t\t\t\t\t\t\tcallback\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// package resolving\n\t\t\t\t\t\t\tdefault: {\n\t\t\t\t\t\t\t\tconst obj = {\n\t\t\t\t\t\t\t\t\t...request,\n\t\t\t\t\t\t\t\t\trequest: path_,\n\t\t\t\t\t\t\t\t\trelativePath: path_,\n\t\t\t\t\t\t\t\t\tfullySpecified: true,\n\t\t\t\t\t\t\t\t\tquery,\n\t\t\t\t\t\t\t\t\tfragment\n\t\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\t\tresolver.doResolve(\n\t\t\t\t\t\t\t\t\ttargetPackage,\n\t\t\t\t\t\t\t\t\tobj,\n\t\t\t\t\t\t\t\t\t\"using imports field: \" + p,\n\t\t\t\t\t\t\t\t\tresolveContext,\n\t\t\t\t\t\t\t\t\tcallback\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t(err, result) => callback(err, result || null)\n\t\t\t\t);\n\t\t\t});\n\t}\n};\n"]},"metadata":{},"sourceType":"script"}