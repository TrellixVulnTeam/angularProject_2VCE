{"ast":null,"code":"'use strict';\n/* eslint-disable\n  class-methods-use-this,\n  func-names\n*/\n\nvar _classCallCheck = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar sockjs = require('sockjs');\n\nvar BaseServer = require('./BaseServer'); // Workaround for sockjs@~0.3.19\n// sockjs will remove Origin header, however Origin header is required for checking host.\n// See https://github.com/webpack/webpack-dev-server/issues/1604 for more information\n\n\n{\n  var SockjsSession = require('sockjs/lib/transport').Session;\n\n  var decorateConnection = SockjsSession.prototype.decorateConnection;\n\n  SockjsSession.prototype.decorateConnection = function (req) {\n    decorateConnection.call(this, req);\n    var connection = this.connection;\n\n    if (connection.headers && !('origin' in connection.headers) && 'origin' in req.headers) {\n      connection.headers.origin = req.headers.origin;\n    }\n  };\n}\n\nmodule.exports = /*#__PURE__*/function (_BaseServer) {\n  _inherits(SockJSServer, _BaseServer);\n\n  var _super = _createSuper(SockJSServer);\n\n  // options has: error (function), debug (function), server (http/s server), path (string)\n  function SockJSServer(server) {\n    var _this;\n\n    _classCallCheck(this, SockJSServer);\n\n    _this = _super.call(this, server);\n    _this.socket = sockjs.createServer({\n      // Use provided up-to-date sockjs-client\n      sockjs_url: '/__webpack_dev_server__/sockjs.bundle.js',\n      // Limit useless logs\n      log: function log(severity, line) {\n        if (severity === 'error') {\n          _this.server.log.error(line);\n        } else {\n          _this.server.log.debug(line);\n        }\n      }\n    });\n\n    _this.socket.installHandlers(_this.server.listeningApp, {\n      prefix: _this.server.sockPath\n    });\n\n    return _this;\n  }\n\n  _createClass(SockJSServer, [{\n    key: \"send\",\n    value: function send(connection, message) {\n      // prevent cases where the server is trying to send data while connection is closing\n      if (connection.readyState !== 1) {\n        return;\n      }\n\n      connection.write(message);\n    }\n  }, {\n    key: \"close\",\n    value: function close(connection) {\n      connection.close();\n    } // f should be passed the resulting connection and the connection headers\n\n  }, {\n    key: \"onConnection\",\n    value: function onConnection(f) {\n      this.socket.on('connection', function (connection) {\n        f(connection, connection ? connection.headers : null);\n      });\n    }\n  }, {\n    key: \"onConnectionClose\",\n    value: function onConnectionClose(connection, f) {\n      connection.on('close', f);\n    }\n  }]);\n\n  return SockJSServer;\n}(BaseServer);","map":{"version":3,"sources":["/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/webpack-dev-server/lib/servers/SockJSServer.js"],"names":["sockjs","require","BaseServer","SockjsSession","Session","decorateConnection","prototype","req","call","connection","headers","origin","module","exports","server","socket","createServer","sockjs_url","log","severity","line","error","debug","installHandlers","listeningApp","prefix","sockPath","message","readyState","write","close","f","on"],"mappings":"AAAA;AAEA;AACA;AACA;AACA;;;;;;;;;;AACA,IAAMA,MAAM,GAAGC,OAAO,CAAC,QAAD,CAAtB;;AACA,IAAMC,UAAU,GAAGD,OAAO,CAAC,cAAD,CAA1B,C,CAEA;AACA;AACA;;;AACA;AACE,MAAME,aAAa,GAAGF,OAAO,CAAC,sBAAD,CAAP,CAAgCG,OAAtD;;AACA,MAAMC,kBAAkB,GAAGF,aAAa,CAACG,SAAd,CAAwBD,kBAAnD;;AACAF,EAAAA,aAAa,CAACG,SAAd,CAAwBD,kBAAxB,GAA6C,UAASE,GAAT,EAAc;AACzDF,IAAAA,kBAAkB,CAACG,IAAnB,CAAwB,IAAxB,EAA8BD,GAA9B;AACA,QAAME,UAAU,GAAG,KAAKA,UAAxB;;AACA,QACEA,UAAU,CAACC,OAAX,IACA,EAAE,YAAYD,UAAU,CAACC,OAAzB,CADA,IAEA,YAAYH,GAAG,CAACG,OAHlB,EAIE;AACAD,MAAAA,UAAU,CAACC,OAAX,CAAmBC,MAAnB,GAA4BJ,GAAG,CAACG,OAAJ,CAAYC,MAAxC;AACD;AACF,GAVD;AAWD;;AAEDC,MAAM,CAACC,OAAP;AAAA;;AAAA;;AACE;AACA,wBAAYC,MAAZ,EAAoB;AAAA;;AAAA;;AAClB,8BAAMA,MAAN;AACA,UAAKC,MAAL,GAAcf,MAAM,CAACgB,YAAP,CAAoB;AAChC;AACAC,MAAAA,UAAU,EAAE,0CAFoB;AAGhC;AACAC,MAAAA,GAAG,EAAE,aAACC,QAAD,EAAWC,IAAX,EAAoB;AACvB,YAAID,QAAQ,KAAK,OAAjB,EAA0B;AACxB,gBAAKL,MAAL,CAAYI,GAAZ,CAAgBG,KAAhB,CAAsBD,IAAtB;AACD,SAFD,MAEO;AACL,gBAAKN,MAAL,CAAYI,GAAZ,CAAgBI,KAAhB,CAAsBF,IAAtB;AACD;AACF;AAV+B,KAApB,CAAd;;AAaA,UAAKL,MAAL,CAAYQ,eAAZ,CAA4B,MAAKT,MAAL,CAAYU,YAAxC,EAAsD;AACpDC,MAAAA,MAAM,EAAE,MAAKX,MAAL,CAAYY;AADgC,KAAtD;;AAfkB;AAkBnB;;AApBH;AAAA;AAAA,WAsBE,cAAKjB,UAAL,EAAiBkB,OAAjB,EAA0B;AACxB;AACA,UAAIlB,UAAU,CAACmB,UAAX,KAA0B,CAA9B,EAAiC;AAC/B;AACD;;AAEDnB,MAAAA,UAAU,CAACoB,KAAX,CAAiBF,OAAjB;AACD;AA7BH;AAAA;AAAA,WA+BE,eAAMlB,UAAN,EAAkB;AAChBA,MAAAA,UAAU,CAACqB,KAAX;AACD,KAjCH,CAmCE;;AAnCF;AAAA;AAAA,WAoCE,sBAAaC,CAAb,EAAgB;AACd,WAAKhB,MAAL,CAAYiB,EAAZ,CAAe,YAAf,EAA6B,UAACvB,UAAD,EAAgB;AAC3CsB,QAAAA,CAAC,CAACtB,UAAD,EAAaA,UAAU,GAAGA,UAAU,CAACC,OAAd,GAAwB,IAA/C,CAAD;AACD,OAFD;AAGD;AAxCH;AAAA;AAAA,WA0CE,2BAAkBD,UAAlB,EAA8BsB,CAA9B,EAAiC;AAC/BtB,MAAAA,UAAU,CAACuB,EAAX,CAAc,OAAd,EAAuBD,CAAvB;AACD;AA5CH;;AAAA;AAAA,EAA4C7B,UAA5C","sourcesContent":["'use strict';\n\n/* eslint-disable\n  class-methods-use-this,\n  func-names\n*/\nconst sockjs = require('sockjs');\nconst BaseServer = require('./BaseServer');\n\n// Workaround for sockjs@~0.3.19\n// sockjs will remove Origin header, however Origin header is required for checking host.\n// See https://github.com/webpack/webpack-dev-server/issues/1604 for more information\n{\n  const SockjsSession = require('sockjs/lib/transport').Session;\n  const decorateConnection = SockjsSession.prototype.decorateConnection;\n  SockjsSession.prototype.decorateConnection = function(req) {\n    decorateConnection.call(this, req);\n    const connection = this.connection;\n    if (\n      connection.headers &&\n      !('origin' in connection.headers) &&\n      'origin' in req.headers\n    ) {\n      connection.headers.origin = req.headers.origin;\n    }\n  };\n}\n\nmodule.exports = class SockJSServer extends BaseServer {\n  // options has: error (function), debug (function), server (http/s server), path (string)\n  constructor(server) {\n    super(server);\n    this.socket = sockjs.createServer({\n      // Use provided up-to-date sockjs-client\n      sockjs_url: '/__webpack_dev_server__/sockjs.bundle.js',\n      // Limit useless logs\n      log: (severity, line) => {\n        if (severity === 'error') {\n          this.server.log.error(line);\n        } else {\n          this.server.log.debug(line);\n        }\n      },\n    });\n\n    this.socket.installHandlers(this.server.listeningApp, {\n      prefix: this.server.sockPath,\n    });\n  }\n\n  send(connection, message) {\n    // prevent cases where the server is trying to send data while connection is closing\n    if (connection.readyState !== 1) {\n      return;\n    }\n\n    connection.write(message);\n  }\n\n  close(connection) {\n    connection.close();\n  }\n\n  // f should be passed the resulting connection and the connection headers\n  onConnection(f) {\n    this.socket.on('connection', (connection) => {\n      f(connection, connection ? connection.headers : null);\n    });\n  }\n\n  onConnectionClose(connection, f) {\n    connection.on('close', f);\n  }\n};\n"]},"metadata":{},"sourceType":"script"}