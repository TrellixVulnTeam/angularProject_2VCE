{"ast":null,"code":"/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n(function (factory) {\n  if (typeof module === \"object\" && typeof module.exports === \"object\") {\n    var v = factory(require, exports);\n    if (v !== undefined) module.exports = v;\n  } else if (typeof define === \"function\" && define.amd) {\n    define(\"@angular/compiler-cli/src/ngtsc/diagnostics/src/error\", [\"require\", \"exports\", \"typescript\", \"@angular/compiler-cli/src/ngtsc/diagnostics/src/error_code\"], factory);\n  }\n})(function (require, exports) {\n  \"use strict\";\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.isFatalDiagnosticError = exports.makeRelatedInformation = exports.makeDiagnostic = exports.FatalDiagnosticError = void 0;\n\n  var ts = require(\"typescript\");\n\n  var error_code_1 = require(\"@angular/compiler-cli/src/ngtsc/diagnostics/src/error_code\");\n\n  var FatalDiagnosticError =\n  /** @class */\n  function () {\n    function FatalDiagnosticError(code, node, message, relatedInformation) {\n      this.code = code;\n      this.node = node;\n      this.message = message;\n      this.relatedInformation = relatedInformation;\n      /**\n       * @internal\n       */\n\n      this._isFatalDiagnosticError = true;\n    }\n\n    FatalDiagnosticError.prototype.toDiagnostic = function () {\n      return makeDiagnostic(this.code, this.node, this.message, this.relatedInformation);\n    };\n\n    return FatalDiagnosticError;\n  }();\n\n  exports.FatalDiagnosticError = FatalDiagnosticError;\n\n  function makeDiagnostic(code, node, messageText, relatedInformation) {\n    node = ts.getOriginalNode(node);\n    return {\n      category: ts.DiagnosticCategory.Error,\n      code: error_code_1.ngErrorCode(code),\n      file: ts.getOriginalNode(node).getSourceFile(),\n      start: node.getStart(undefined, false),\n      length: node.getWidth(),\n      messageText: messageText,\n      relatedInformation: relatedInformation\n    };\n  }\n\n  exports.makeDiagnostic = makeDiagnostic;\n\n  function makeRelatedInformation(node, messageText) {\n    node = ts.getOriginalNode(node);\n    return {\n      category: ts.DiagnosticCategory.Message,\n      code: 0,\n      file: node.getSourceFile(),\n      start: node.getStart(),\n      length: node.getWidth(),\n      messageText: messageText\n    };\n  }\n\n  exports.makeRelatedInformation = makeRelatedInformation;\n\n  function isFatalDiagnosticError(err) {\n    return err._isFatalDiagnosticError === true;\n  }\n\n  exports.isFatalDiagnosticError = isFatalDiagnosticError;\n});","map":{"version":3,"sources":["../../../../../../../../../packages/compiler-cli/src/ngtsc/diagnostics/src/error.ts"],"names":[],"mappings":"AAAA;;;;;;AAMG;;;;;;;;;;;;;;;;AAEH,MAAA,EAAA,GAAA,OAAA,CAAA,YAAA,CAAA;;AAEA,MAAA,YAAA,GAAA,OAAA,CAAA,4DAAA,CAAA;;AAEA,MAAA,oBAAA;AAAA;AAAA,cAAA;AACE,aAAA,oBAAA,CACa,IADb,EACuC,IADvC,EAEa,OAFb,EAGa,kBAHb,EAGmE;AAFtD,WAAA,IAAA,GAAA,IAAA;AAA0B,WAAA,IAAA,GAAA,IAAA;AAC1B,WAAA,OAAA,GAAA,OAAA;AACA,WAAA,kBAAA,GAAA,kBAAA;AAEb;;AAEG;;AACH,WAAA,uBAAA,GAA0B,IAA1B;AALuE;;AAOvE,IAAA,oBAAA,CAAA,SAAA,CAAA,YAAA,GAAA,YAAA;AACE,aAAO,cAAc,CAAC,KAAK,IAAN,EAAY,KAAK,IAAjB,EAAuB,KAAK,OAA5B,EAAqC,KAAK,kBAA1C,CAArB;AACD,KAFD;;AAGF,WAAA,oBAAA;AAAC,GAdD,EAAA;;AAAa,EAAA,OAAA,CAAA,oBAAA,GAAA,oBAAA;;AAgBb,WAAgB,cAAhB,CACI,IADJ,EACqB,IADrB,EACoC,WADpC,EAEI,kBAFJ,EAE0D;AACxD,IAAA,IAAI,GAAG,EAAE,CAAC,eAAH,CAAmB,IAAnB,CAAP;AACA,WAAO;AACL,MAAA,QAAQ,EAAE,EAAE,CAAC,kBAAH,CAAsB,KAD3B;AAEL,MAAA,IAAI,EAAE,YAAA,CAAA,WAAA,CAAY,IAAZ,CAFD;AAGL,MAAA,IAAI,EAAE,EAAE,CAAC,eAAH,CAAmB,IAAnB,EAAyB,aAAzB,EAHD;AAIL,MAAA,KAAK,EAAE,IAAI,CAAC,QAAL,CAAc,SAAd,EAAyB,KAAzB,CAJF;AAKL,MAAA,MAAM,EAAE,IAAI,CAAC,QAAL,EALH;AAML,MAAA,WAAW,EAAA,WANN;AAOL,MAAA,kBAAkB,EAAA;AAPb,KAAP;AASD;;AAbD,EAAA,OAAA,CAAA,cAAA,GAAA,cAAA;;AAeA,WAAgB,sBAAhB,CACI,IADJ,EACmB,WADnB,EACsC;AACpC,IAAA,IAAI,GAAG,EAAE,CAAC,eAAH,CAAmB,IAAnB,CAAP;AACA,WAAO;AACL,MAAA,QAAQ,EAAE,EAAE,CAAC,kBAAH,CAAsB,OAD3B;AAEL,MAAA,IAAI,EAAE,CAFD;AAGL,MAAA,IAAI,EAAE,IAAI,CAAC,aAAL,EAHD;AAIL,MAAA,KAAK,EAAE,IAAI,CAAC,QAAL,EAJF;AAKL,MAAA,MAAM,EAAE,IAAI,CAAC,QAAL,EALH;AAML,MAAA,WAAW,EAAA;AANN,KAAP;AAQD;;AAXD,EAAA,OAAA,CAAA,sBAAA,GAAA,sBAAA;;AAaA,WAAgB,sBAAhB,CAAuC,GAAvC,EAA+C;AAC7C,WAAO,GAAG,CAAC,uBAAJ,KAAgC,IAAvC;AACD;;AAFD,EAAA,OAAA,CAAA,sBAAA,GAAA,sBAAA","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport * as ts from 'typescript';\n\nimport {ErrorCode, ngErrorCode} from './error_code';\n\nexport class FatalDiagnosticError {\n  constructor(\n      readonly code: ErrorCode, readonly node: ts.Node,\n      readonly message: string|ts.DiagnosticMessageChain,\n      readonly relatedInformation?: ts.DiagnosticRelatedInformation[]) {}\n\n  /**\n   * @internal\n   */\n  _isFatalDiagnosticError = true;\n\n  toDiagnostic(): ts.DiagnosticWithLocation {\n    return makeDiagnostic(this.code, this.node, this.message, this.relatedInformation);\n  }\n}\n\nexport function makeDiagnostic(\n    code: ErrorCode, node: ts.Node, messageText: string|ts.DiagnosticMessageChain,\n    relatedInformation?: ts.DiagnosticRelatedInformation[]): ts.DiagnosticWithLocation {\n  node = ts.getOriginalNode(node);\n  return {\n    category: ts.DiagnosticCategory.Error,\n    code: ngErrorCode(code),\n    file: ts.getOriginalNode(node).getSourceFile(),\n    start: node.getStart(undefined, false),\n    length: node.getWidth(),\n    messageText,\n    relatedInformation,\n  };\n}\n\nexport function makeRelatedInformation(\n    node: ts.Node, messageText: string): ts.DiagnosticRelatedInformation {\n  node = ts.getOriginalNode(node);\n  return {\n    category: ts.DiagnosticCategory.Message,\n    code: 0,\n    file: node.getSourceFile(),\n    start: node.getStart(),\n    length: node.getWidth(),\n    messageText,\n  };\n}\n\nexport function isFatalDiagnosticError(err: any): err is FatalDiagnosticError {\n  return err._isFatalDiagnosticError === true;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}