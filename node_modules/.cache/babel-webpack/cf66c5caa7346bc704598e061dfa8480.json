{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nvar _objectSpread = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/objectSpread2\");\n\nvar _classCallCheck = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/createClass\");\n\nvar DescriptionFileUtils = require(\"./DescriptionFileUtils\");\n\nvar getInnerRequest = require(\"./getInnerRequest\");\n/** @typedef {import(\"./Resolver\")} Resolver */\n\n/** @typedef {import(\"./Resolver\").ResolveRequest} ResolveRequest */\n\n/** @typedef {import(\"./Resolver\").ResolveStepHook} ResolveStepHook */\n\n\nmodule.exports = /*#__PURE__*/function () {\n  /**\n   * @param {string | ResolveStepHook} source source\n   * @param {string | Array<string>} field field\n   * @param {string | ResolveStepHook} target target\n   */\n  function AliasFieldPlugin(source, field, target) {\n    _classCallCheck(this, AliasFieldPlugin);\n\n    this.source = source;\n    this.field = field;\n    this.target = target;\n  }\n  /**\n   * @param {Resolver} resolver the resolver\n   * @returns {void}\n   */\n\n\n  _createClass(AliasFieldPlugin, [{\n    key: \"apply\",\n    value: function apply(resolver) {\n      var _this = this;\n\n      var target = resolver.ensureHook(this.target);\n      resolver.getHook(this.source).tapAsync(\"AliasFieldPlugin\", function (request, resolveContext, callback) {\n        if (!request.descriptionFileData) return callback();\n        var innerRequest = getInnerRequest(resolver, request);\n        if (!innerRequest) return callback();\n        var fieldData = DescriptionFileUtils.getField(request.descriptionFileData, _this.field);\n\n        if (fieldData === null || typeof fieldData !== \"object\") {\n          if (resolveContext.log) resolveContext.log(\"Field '\" + _this.field + \"' doesn't contain a valid alias configuration\");\n          return callback();\n        }\n\n        var data1 = fieldData[innerRequest];\n        var data2 = fieldData[innerRequest.replace(/^\\.\\//, \"\")];\n        var data = typeof data1 !== \"undefined\" ? data1 : data2;\n        if (data === innerRequest) return callback();\n        if (data === undefined) return callback();\n\n        if (data === false) {\n          /** @type {ResolveRequest} */\n          var ignoreObj = _objectSpread(_objectSpread({}, request), {}, {\n            path: false\n          });\n\n          return callback(null, ignoreObj);\n        }\n\n        var obj = _objectSpread(_objectSpread({}, request), {}, {\n          path: request.descriptionFileRoot,\n          request: data,\n          fullySpecified: false\n        });\n\n        resolver.doResolve(target, obj, \"aliased from description file \" + request.descriptionFilePath + \" with mapping '\" + innerRequest + \"' to '\" + data + \"'\", resolveContext, function (err, result) {\n          if (err) return callback(err); // Don't allow other aliasing or raw request\n\n          if (result === undefined) return callback(null, null);\n          callback(null, result);\n        });\n      });\n    }\n  }]);\n\n  return AliasFieldPlugin;\n}();","map":{"version":3,"sources":["/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/enhanced-resolve/lib/AliasFieldPlugin.js"],"names":["DescriptionFileUtils","require","getInnerRequest","module","exports","source","field","target","resolver","ensureHook","getHook","tapAsync","request","resolveContext","callback","descriptionFileData","innerRequest","fieldData","getField","log","data1","data2","replace","data","undefined","ignoreObj","path","obj","descriptionFileRoot","fullySpecified","doResolve","descriptionFilePath","err","result"],"mappings":"AAAA;AACA;AACA;AACA;AAEA;;;;;;;;AAEA,IAAMA,oBAAoB,GAAGC,OAAO,CAAC,wBAAD,CAApC;;AACA,IAAMC,eAAe,GAAGD,OAAO,CAAC,mBAAD,CAA/B;AAEA;;AACA;;AACA;;;AAEAE,MAAM,CAACC,OAAP;AACC;AACD;AACA;AACA;AACA;AACC,4BAAYC,MAAZ,EAAoBC,KAApB,EAA2BC,MAA3B,EAAmC;AAAA;;AAClC,SAAKF,MAAL,GAAcA,MAAd;AACA,SAAKC,KAAL,GAAaA,KAAb;AACA,SAAKC,MAAL,GAAcA,MAAd;AACA;AAED;AACD;AACA;AACA;;;AAfA;AAAA;AAAA,WAgBC,eAAMC,QAAN,EAAgB;AAAA;;AACf,UAAMD,MAAM,GAAGC,QAAQ,CAACC,UAAT,CAAoB,KAAKF,MAAzB,CAAf;AACAC,MAAAA,QAAQ,CACNE,OADF,CACU,KAAKL,MADf,EAEEM,QAFF,CAEW,kBAFX,EAE+B,UAACC,OAAD,EAAUC,cAAV,EAA0BC,QAA1B,EAAuC;AACpE,YAAI,CAACF,OAAO,CAACG,mBAAb,EAAkC,OAAOD,QAAQ,EAAf;AAClC,YAAME,YAAY,GAAGd,eAAe,CAACM,QAAD,EAAWI,OAAX,CAApC;AACA,YAAI,CAACI,YAAL,EAAmB,OAAOF,QAAQ,EAAf;AACnB,YAAMG,SAAS,GAAGjB,oBAAoB,CAACkB,QAArB,CACjBN,OAAO,CAACG,mBADS,EAEjB,KAAI,CAACT,KAFY,CAAlB;;AAIA,YAAIW,SAAS,KAAK,IAAd,IAAsB,OAAOA,SAAP,KAAqB,QAA/C,EAAyD;AACxD,cAAIJ,cAAc,CAACM,GAAnB,EACCN,cAAc,CAACM,GAAf,CACC,YACC,KAAI,CAACb,KADN,GAEC,+CAHF;AAKD,iBAAOQ,QAAQ,EAAf;AACA;;AACD,YAAMM,KAAK,GAAGH,SAAS,CAACD,YAAD,CAAvB;AACA,YAAMK,KAAK,GAAGJ,SAAS,CAACD,YAAY,CAACM,OAAb,CAAqB,OAArB,EAA8B,EAA9B,CAAD,CAAvB;AACA,YAAMC,IAAI,GAAG,OAAOH,KAAP,KAAiB,WAAjB,GAA+BA,KAA/B,GAAuCC,KAApD;AACA,YAAIE,IAAI,KAAKP,YAAb,EAA2B,OAAOF,QAAQ,EAAf;AAC3B,YAAIS,IAAI,KAAKC,SAAb,EAAwB,OAAOV,QAAQ,EAAf;;AACxB,YAAIS,IAAI,KAAK,KAAb,EAAoB;AACnB;AACA,cAAME,SAAS,mCACXb,OADW;AAEdc,YAAAA,IAAI,EAAE;AAFQ,YAAf;;AAIA,iBAAOZ,QAAQ,CAAC,IAAD,EAAOW,SAAP,CAAf;AACA;;AACD,YAAME,GAAG,mCACLf,OADK;AAERc,UAAAA,IAAI,EAAEd,OAAO,CAACgB,mBAFN;AAGRhB,UAAAA,OAAO,EAAEW,IAHD;AAIRM,UAAAA,cAAc,EAAE;AAJR,UAAT;;AAMArB,QAAAA,QAAQ,CAACsB,SAAT,CACCvB,MADD,EAECoB,GAFD,EAGC,mCACCf,OAAO,CAACmB,mBADT,GAEC,iBAFD,GAGCf,YAHD,GAIC,QAJD,GAKCO,IALD,GAMC,GATF,EAUCV,cAVD,EAWC,UAACmB,GAAD,EAAMC,MAAN,EAAiB;AAChB,cAAID,GAAJ,EAAS,OAAOlB,QAAQ,CAACkB,GAAD,CAAf,CADO,CAGhB;;AACA,cAAIC,MAAM,KAAKT,SAAf,EAA0B,OAAOV,QAAQ,CAAC,IAAD,EAAO,IAAP,CAAf;AAC1BA,UAAAA,QAAQ,CAAC,IAAD,EAAOmB,MAAP,CAAR;AACA,SAjBF;AAmBA,OAzDF;AA0DA;AA5EF;;AAAA;AAAA","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst DescriptionFileUtils = require(\"./DescriptionFileUtils\");\nconst getInnerRequest = require(\"./getInnerRequest\");\n\n/** @typedef {import(\"./Resolver\")} Resolver */\n/** @typedef {import(\"./Resolver\").ResolveRequest} ResolveRequest */\n/** @typedef {import(\"./Resolver\").ResolveStepHook} ResolveStepHook */\n\nmodule.exports = class AliasFieldPlugin {\n\t/**\n\t * @param {string | ResolveStepHook} source source\n\t * @param {string | Array<string>} field field\n\t * @param {string | ResolveStepHook} target target\n\t */\n\tconstructor(source, field, target) {\n\t\tthis.source = source;\n\t\tthis.field = field;\n\t\tthis.target = target;\n\t}\n\n\t/**\n\t * @param {Resolver} resolver the resolver\n\t * @returns {void}\n\t */\n\tapply(resolver) {\n\t\tconst target = resolver.ensureHook(this.target);\n\t\tresolver\n\t\t\t.getHook(this.source)\n\t\t\t.tapAsync(\"AliasFieldPlugin\", (request, resolveContext, callback) => {\n\t\t\t\tif (!request.descriptionFileData) return callback();\n\t\t\t\tconst innerRequest = getInnerRequest(resolver, request);\n\t\t\t\tif (!innerRequest) return callback();\n\t\t\t\tconst fieldData = DescriptionFileUtils.getField(\n\t\t\t\t\trequest.descriptionFileData,\n\t\t\t\t\tthis.field\n\t\t\t\t);\n\t\t\t\tif (fieldData === null || typeof fieldData !== \"object\") {\n\t\t\t\t\tif (resolveContext.log)\n\t\t\t\t\t\tresolveContext.log(\n\t\t\t\t\t\t\t\"Field '\" +\n\t\t\t\t\t\t\t\tthis.field +\n\t\t\t\t\t\t\t\t\"' doesn't contain a valid alias configuration\"\n\t\t\t\t\t\t);\n\t\t\t\t\treturn callback();\n\t\t\t\t}\n\t\t\t\tconst data1 = fieldData[innerRequest];\n\t\t\t\tconst data2 = fieldData[innerRequest.replace(/^\\.\\//, \"\")];\n\t\t\t\tconst data = typeof data1 !== \"undefined\" ? data1 : data2;\n\t\t\t\tif (data === innerRequest) return callback();\n\t\t\t\tif (data === undefined) return callback();\n\t\t\t\tif (data === false) {\n\t\t\t\t\t/** @type {ResolveRequest} */\n\t\t\t\t\tconst ignoreObj = {\n\t\t\t\t\t\t...request,\n\t\t\t\t\t\tpath: false\n\t\t\t\t\t};\n\t\t\t\t\treturn callback(null, ignoreObj);\n\t\t\t\t}\n\t\t\t\tconst obj = {\n\t\t\t\t\t...request,\n\t\t\t\t\tpath: request.descriptionFileRoot,\n\t\t\t\t\trequest: data,\n\t\t\t\t\tfullySpecified: false\n\t\t\t\t};\n\t\t\t\tresolver.doResolve(\n\t\t\t\t\ttarget,\n\t\t\t\t\tobj,\n\t\t\t\t\t\"aliased from description file \" +\n\t\t\t\t\t\trequest.descriptionFilePath +\n\t\t\t\t\t\t\" with mapping '\" +\n\t\t\t\t\t\tinnerRequest +\n\t\t\t\t\t\t\"' to '\" +\n\t\t\t\t\t\tdata +\n\t\t\t\t\t\t\"'\",\n\t\t\t\t\tresolveContext,\n\t\t\t\t\t(err, result) => {\n\t\t\t\t\t\tif (err) return callback(err);\n\n\t\t\t\t\t\t// Don't allow other aliasing or raw request\n\t\t\t\t\t\tif (result === undefined) return callback(null, null);\n\t\t\t\t\t\tcallback(null, result);\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t});\n\t}\n};\n"]},"metadata":{},"sourceType":"script"}