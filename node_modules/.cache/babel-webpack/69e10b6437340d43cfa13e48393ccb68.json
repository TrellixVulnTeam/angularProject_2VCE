{"ast":null,"code":"/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n(function (factory) {\n  if (typeof module === \"object\" && typeof module.exports === \"object\") {\n    var v = factory(require, exports);\n    if (v !== undefined) module.exports = v;\n  } else if (typeof define === \"function\" && define.amd) {\n    define(\"@angular/compiler-cli/src/ngtsc/partial_evaluator/src/dynamic\", [\"require\", \"exports\"], factory);\n  }\n})(function (require, exports) {\n  \"use strict\";\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.DynamicValue = void 0;\n  /**\n   * Represents a value which cannot be determined statically.\n   */\n\n  var DynamicValue =\n  /** @class */\n  function () {\n    function DynamicValue(node, reason, code) {\n      this.node = node;\n      this.reason = reason;\n      this.code = code;\n    }\n\n    DynamicValue.fromDynamicInput = function (node, input) {\n      return new DynamicValue(node, input, 0\n      /* DYNAMIC_INPUT */\n      );\n    };\n\n    DynamicValue.fromDynamicString = function (node) {\n      return new DynamicValue(node, undefined, 1\n      /* DYNAMIC_STRING */\n      );\n    };\n\n    DynamicValue.fromExternalReference = function (node, ref) {\n      return new DynamicValue(node, ref, 2\n      /* EXTERNAL_REFERENCE */\n      );\n    };\n\n    DynamicValue.fromUnsupportedSyntax = function (node) {\n      return new DynamicValue(node, undefined, 3\n      /* UNSUPPORTED_SYNTAX */\n      );\n    };\n\n    DynamicValue.fromUnknownIdentifier = function (node) {\n      return new DynamicValue(node, undefined, 4\n      /* UNKNOWN_IDENTIFIER */\n      );\n    };\n\n    DynamicValue.fromInvalidExpressionType = function (node, value) {\n      return new DynamicValue(node, value, 5\n      /* INVALID_EXPRESSION_TYPE */\n      );\n    };\n\n    DynamicValue.fromComplexFunctionCall = function (node, fn) {\n      return new DynamicValue(node, fn, 6\n      /* COMPLEX_FUNCTION_CALL */\n      );\n    };\n\n    DynamicValue.fromUnknown = function (node) {\n      return new DynamicValue(node, undefined, 7\n      /* UNKNOWN */\n      );\n    };\n\n    DynamicValue.prototype.isFromDynamicInput = function () {\n      return this.code === 0\n      /* DYNAMIC_INPUT */\n      ;\n    };\n\n    DynamicValue.prototype.isFromDynamicString = function () {\n      return this.code === 1\n      /* DYNAMIC_STRING */\n      ;\n    };\n\n    DynamicValue.prototype.isFromExternalReference = function () {\n      return this.code === 2\n      /* EXTERNAL_REFERENCE */\n      ;\n    };\n\n    DynamicValue.prototype.isFromUnsupportedSyntax = function () {\n      return this.code === 3\n      /* UNSUPPORTED_SYNTAX */\n      ;\n    };\n\n    DynamicValue.prototype.isFromUnknownIdentifier = function () {\n      return this.code === 4\n      /* UNKNOWN_IDENTIFIER */\n      ;\n    };\n\n    DynamicValue.prototype.isFromInvalidExpressionType = function () {\n      return this.code === 5\n      /* INVALID_EXPRESSION_TYPE */\n      ;\n    };\n\n    DynamicValue.prototype.isFromComplexFunctionCall = function () {\n      return this.code === 6\n      /* COMPLEX_FUNCTION_CALL */\n      ;\n    };\n\n    DynamicValue.prototype.isFromUnknown = function () {\n      return this.code === 7\n      /* UNKNOWN */\n      ;\n    };\n\n    DynamicValue.prototype.accept = function (visitor) {\n      switch (this.code) {\n        case 0\n        /* DYNAMIC_INPUT */\n        :\n          return visitor.visitDynamicInput(this);\n\n        case 1\n        /* DYNAMIC_STRING */\n        :\n          return visitor.visitDynamicString(this);\n\n        case 2\n        /* EXTERNAL_REFERENCE */\n        :\n          return visitor.visitExternalReference(this);\n\n        case 3\n        /* UNSUPPORTED_SYNTAX */\n        :\n          return visitor.visitUnsupportedSyntax(this);\n\n        case 4\n        /* UNKNOWN_IDENTIFIER */\n        :\n          return visitor.visitUnknownIdentifier(this);\n\n        case 5\n        /* INVALID_EXPRESSION_TYPE */\n        :\n          return visitor.visitInvalidExpressionType(this);\n\n        case 6\n        /* COMPLEX_FUNCTION_CALL */\n        :\n          return visitor.visitComplexFunctionCall(this);\n\n        case 7\n        /* UNKNOWN */\n        :\n          return visitor.visitUnknown(this);\n      }\n    };\n\n    return DynamicValue;\n  }();\n\n  exports.DynamicValue = DynamicValue;\n});","map":{"version":3,"sources":["../../../../../../../../../packages/compiler-cli/src/ngtsc/partial_evaluator/src/dynamic.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport * as ts from 'typescript';\n\nimport {Reference} from '../../imports';\nimport {FunctionDefinition} from '../../reflection';\n\n/**\n * The reason why a value cannot be determined statically.\n */\nexport const enum DynamicValueReason {\n  /**\n   * A value could not be determined statically, because it contains a term that could not be\n   * determined statically.\n   * (E.g. a property assignment or call expression where the lhs is a `DynamicValue`, a template\n   * literal with a dynamic expression, an object literal with a spread assignment which could not\n   * be determined statically, etc.)\n   */\n  DYNAMIC_INPUT,\n\n  /**\n   * A string could not be statically evaluated.\n   * (E.g. a dynamically constructed object property name or a template literal expression that\n   * could not be statically resolved to a primitive value.)\n   */\n  DYNAMIC_STRING,\n\n  /**\n   * An external reference could not be resolved to a value which can be evaluated.\n   * For example a call expression for a function declared in `.d.ts`, or accessing native globals\n   * such as `window`.\n   */\n  EXTERNAL_REFERENCE,\n\n  /**\n   * Syntax that `StaticInterpreter` doesn't know how to evaluate, for example a type of\n   * `ts.Expression` that is not supported.\n   */\n  UNSUPPORTED_SYNTAX,\n\n  /**\n   * A declaration of a `ts.Identifier` could not be found.\n   */\n  UNKNOWN_IDENTIFIER,\n\n  /**\n   * A value could be resolved, but is not an acceptable type for the operation being performed.\n   *\n   * For example, attempting to call a non-callable expression.\n   */\n  INVALID_EXPRESSION_TYPE,\n\n  /**\n   * A function call could not be evaluated as the function's body is not a single return statement.\n   */\n  COMPLEX_FUNCTION_CALL,\n\n  /**\n   * A value could not be determined statically for any reason other the above.\n   */\n  UNKNOWN,\n}\n\n/**\n * Represents a value which cannot be determined statically.\n */\nexport class DynamicValue<R = unknown> {\n  private constructor(\n      readonly node: ts.Node, readonly reason: R, private code: DynamicValueReason) {}\n\n  static fromDynamicInput(node: ts.Node, input: DynamicValue): DynamicValue<DynamicValue> {\n    return new DynamicValue(node, input, DynamicValueReason.DYNAMIC_INPUT);\n  }\n\n  static fromDynamicString(node: ts.Node): DynamicValue {\n    return new DynamicValue(node, undefined, DynamicValueReason.DYNAMIC_STRING);\n  }\n\n  static fromExternalReference(node: ts.Node, ref: Reference<ts.Declaration>):\n      DynamicValue<Reference<ts.Declaration>> {\n    return new DynamicValue(node, ref, DynamicValueReason.EXTERNAL_REFERENCE);\n  }\n\n  static fromUnsupportedSyntax(node: ts.Node): DynamicValue {\n    return new DynamicValue(node, undefined, DynamicValueReason.UNSUPPORTED_SYNTAX);\n  }\n\n  static fromUnknownIdentifier(node: ts.Identifier): DynamicValue {\n    return new DynamicValue(node, undefined, DynamicValueReason.UNKNOWN_IDENTIFIER);\n  }\n\n  static fromInvalidExpressionType(node: ts.Node, value: unknown): DynamicValue<unknown> {\n    return new DynamicValue(node, value, DynamicValueReason.INVALID_EXPRESSION_TYPE);\n  }\n\n  static fromComplexFunctionCall(node: ts.Node, fn: FunctionDefinition):\n      DynamicValue<FunctionDefinition> {\n    return new DynamicValue(node, fn, DynamicValueReason.COMPLEX_FUNCTION_CALL);\n  }\n\n  static fromUnknown(node: ts.Node): DynamicValue {\n    return new DynamicValue(node, undefined, DynamicValueReason.UNKNOWN);\n  }\n\n  isFromDynamicInput(this: DynamicValue<R>): this is DynamicValue<DynamicValue> {\n    return this.code === DynamicValueReason.DYNAMIC_INPUT;\n  }\n\n  isFromDynamicString(this: DynamicValue<R>): this is DynamicValue {\n    return this.code === DynamicValueReason.DYNAMIC_STRING;\n  }\n\n  isFromExternalReference(this: DynamicValue<R>): this is DynamicValue<Reference<ts.Declaration>> {\n    return this.code === DynamicValueReason.EXTERNAL_REFERENCE;\n  }\n\n  isFromUnsupportedSyntax(this: DynamicValue<R>): this is DynamicValue {\n    return this.code === DynamicValueReason.UNSUPPORTED_SYNTAX;\n  }\n\n  isFromUnknownIdentifier(this: DynamicValue<R>): this is DynamicValue {\n    return this.code === DynamicValueReason.UNKNOWN_IDENTIFIER;\n  }\n\n  isFromInvalidExpressionType(this: DynamicValue<R>): this is DynamicValue<unknown> {\n    return this.code === DynamicValueReason.INVALID_EXPRESSION_TYPE;\n  }\n\n  isFromComplexFunctionCall(this: DynamicValue<R>): this is DynamicValue<FunctionDefinition> {\n    return this.code === DynamicValueReason.COMPLEX_FUNCTION_CALL;\n  }\n\n  isFromUnknown(this: DynamicValue<R>): this is DynamicValue {\n    return this.code === DynamicValueReason.UNKNOWN;\n  }\n\n  accept<R>(visitor: DynamicValueVisitor<R>): R {\n    switch (this.code) {\n      case DynamicValueReason.DYNAMIC_INPUT:\n        return visitor.visitDynamicInput(this as unknown as DynamicValue<DynamicValue>);\n      case DynamicValueReason.DYNAMIC_STRING:\n        return visitor.visitDynamicString(this);\n      case DynamicValueReason.EXTERNAL_REFERENCE:\n        return visitor.visitExternalReference(\n            this as unknown as DynamicValue<Reference<ts.Declaration>>);\n      case DynamicValueReason.UNSUPPORTED_SYNTAX:\n        return visitor.visitUnsupportedSyntax(this);\n      case DynamicValueReason.UNKNOWN_IDENTIFIER:\n        return visitor.visitUnknownIdentifier(this);\n      case DynamicValueReason.INVALID_EXPRESSION_TYPE:\n        return visitor.visitInvalidExpressionType(this);\n      case DynamicValueReason.COMPLEX_FUNCTION_CALL:\n        return visitor.visitComplexFunctionCall(\n            this as unknown as DynamicValue<FunctionDefinition>);\n      case DynamicValueReason.UNKNOWN:\n        return visitor.visitUnknown(this);\n    }\n  }\n}\n\nexport interface DynamicValueVisitor<R> {\n  visitDynamicInput(value: DynamicValue<DynamicValue>): R;\n  visitDynamicString(value: DynamicValue): R;\n  visitExternalReference(value: DynamicValue<Reference<ts.Declaration>>): R;\n  visitUnsupportedSyntax(value: DynamicValue): R;\n  visitUnknownIdentifier(value: DynamicValue): R;\n  visitInvalidExpressionType(value: DynamicValue): R;\n  visitComplexFunctionCall(value: DynamicValue<FunctionDefinition>): R;\n  visitUnknown(value: DynamicValue): R;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}