{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nvar _createForOfIteratorHelper = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _classCallCheck = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/createClass\");\n\nvar Template = require(\"../Template\");\n\nmodule.exports = /*#__PURE__*/function () {\n  function NodeMainTemplatePlugin(asyncChunkLoading) {\n    _classCallCheck(this, NodeMainTemplatePlugin);\n\n    this.asyncChunkLoading = asyncChunkLoading;\n  }\n\n  _createClass(NodeMainTemplatePlugin, [{\n    key: \"apply\",\n    value: function apply(mainTemplate) {\n      var needChunkOnDemandLoadingCode = function needChunkOnDemandLoadingCode(chunk) {\n        var _iterator = _createForOfIteratorHelper(chunk.groupsIterable),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var chunkGroup = _step.value;\n            if (chunkGroup.getNumberOfChildren() > 0) return true;\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n\n        return false;\n      };\n\n      var asyncChunkLoading = this.asyncChunkLoading;\n      mainTemplate.hooks.localVars.tap(\"NodeMainTemplatePlugin\", function (source, chunk) {\n        if (needChunkOnDemandLoadingCode(chunk)) {\n          return Template.asString([source, \"\", \"// object to store loaded chunks\", '// \"0\" means \"already loaded\"', \"var installedChunks = {\", Template.indent(chunk.ids.map(function (id) {\n            return \"\".concat(JSON.stringify(id), \": 0\");\n          }).join(\",\\n\")), \"};\"]);\n        }\n\n        return source;\n      });\n      mainTemplate.hooks.requireExtensions.tap(\"NodeMainTemplatePlugin\", function (source, chunk) {\n        if (needChunkOnDemandLoadingCode(chunk)) {\n          return Template.asString([source, \"\", \"// uncaught error handler for webpack runtime\", \"\".concat(mainTemplate.requireFn, \".oe = function(err) {\"), Template.indent([\"process.nextTick(function() {\", Template.indent(\"throw err; // catch this error by using import().catch()\"), \"});\"]), \"};\"]);\n        }\n\n        return source;\n      });\n      mainTemplate.hooks.requireEnsure.tap(\"NodeMainTemplatePlugin\", function (source, chunk, hash) {\n        var chunkFilename = mainTemplate.outputOptions.chunkFilename;\n        var chunkMaps = chunk.getChunkMaps();\n        var insertMoreModules = [\"var moreModules = chunk.modules, chunkIds = chunk.ids;\", \"for(var moduleId in moreModules) {\", Template.indent(mainTemplate.renderAddModule(hash, chunk, \"moduleId\", \"moreModules[moduleId]\")), \"}\"];\n\n        if (asyncChunkLoading) {\n          return Template.asString([source, \"\", \"// ReadFile + VM.run chunk loading for javascript\", \"\", \"var installedChunkData = installedChunks[chunkId];\", 'if(installedChunkData !== 0) { // 0 means \"already installed\".', Template.indent(['// array of [resolve, reject, promise] means \"currently loading\"', \"if(installedChunkData) {\", Template.indent([\"promises.push(installedChunkData[2]);\"]), \"} else {\", Template.indent([\"// load the chunk and return promise to it\", \"var promise = new Promise(function(resolve, reject) {\", Template.indent([\"installedChunkData = installedChunks[chunkId] = [resolve, reject];\", \"var filename = require('path').join(__dirname, \" + mainTemplate.getAssetPath(JSON.stringify(\"/\".concat(chunkFilename)), {\n            hash: \"\\\" + \".concat(mainTemplate.renderCurrentHashCode(hash), \" + \\\"\"),\n            hashWithLength: function hashWithLength(length) {\n              return \"\\\" + \".concat(mainTemplate.renderCurrentHashCode(hash, length), \" + \\\"\");\n            },\n            chunk: {\n              id: '\" + chunkId + \"',\n              hash: \"\\\" + \".concat(JSON.stringify(chunkMaps.hash), \"[chunkId] + \\\"\"),\n              hashWithLength: function hashWithLength(length) {\n                var shortChunkHashMap = {};\n\n                for (var _i = 0, _Object$keys = Object.keys(chunkMaps.hash); _i < _Object$keys.length; _i++) {\n                  var chunkId = _Object$keys[_i];\n\n                  if (typeof chunkMaps.hash[chunkId] === \"string\") {\n                    shortChunkHashMap[chunkId] = chunkMaps.hash[chunkId].substr(0, length);\n                  }\n                }\n\n                return \"\\\" + \".concat(JSON.stringify(shortChunkHashMap), \"[chunkId] + \\\"\");\n              },\n              contentHash: {\n                javascript: \"\\\" + \".concat(JSON.stringify(chunkMaps.contentHash.javascript), \"[chunkId] + \\\"\")\n              },\n              contentHashWithLength: {\n                javascript: function javascript(length) {\n                  var shortContentHashMap = {};\n                  var contentHash = chunkMaps.contentHash.javascript;\n\n                  for (var _i2 = 0, _Object$keys2 = Object.keys(contentHash); _i2 < _Object$keys2.length; _i2++) {\n                    var chunkId = _Object$keys2[_i2];\n\n                    if (typeof contentHash[chunkId] === \"string\") {\n                      shortContentHashMap[chunkId] = contentHash[chunkId].substr(0, length);\n                    }\n                  }\n\n                  return \"\\\" + \".concat(JSON.stringify(shortContentHashMap), \"[chunkId] + \\\"\");\n                }\n              },\n              name: \"\\\" + (\".concat(JSON.stringify(chunkMaps.name), \"[chunkId]||chunkId) + \\\"\")\n            },\n            contentHashType: \"javascript\"\n          }) + \");\", \"require('fs').readFile(filename, 'utf-8',  function(err, content) {\", Template.indent([\"if(err) return reject(err);\", \"var chunk = {};\", \"require('vm').runInThisContext('(function(exports, require, __dirname, __filename) {' + content + '\\\\n})', filename)\" + \"(chunk, require, require('path').dirname(filename), filename);\"].concat(insertMoreModules).concat([\"var callbacks = [];\", \"for(var i = 0; i < chunkIds.length; i++) {\", Template.indent([\"if(installedChunks[chunkIds[i]])\", Template.indent([\"callbacks = callbacks.concat(installedChunks[chunkIds[i]][0]);\"]), \"installedChunks[chunkIds[i]] = 0;\"]), \"}\", \"for(i = 0; i < callbacks.length; i++)\", Template.indent(\"callbacks[i]();\")])), \"});\"]), \"});\", \"promises.push(installedChunkData[2] = promise);\"]), \"}\"]), \"}\"]);\n        } else {\n          var request = mainTemplate.getAssetPath(JSON.stringify(\"./\".concat(chunkFilename)), {\n            hash: \"\\\" + \".concat(mainTemplate.renderCurrentHashCode(hash), \" + \\\"\"),\n            hashWithLength: function hashWithLength(length) {\n              return \"\\\" + \".concat(mainTemplate.renderCurrentHashCode(hash, length), \" + \\\"\");\n            },\n            chunk: {\n              id: '\" + chunkId + \"',\n              hash: \"\\\" + \".concat(JSON.stringify(chunkMaps.hash), \"[chunkId] + \\\"\"),\n              hashWithLength: function hashWithLength(length) {\n                var shortChunkHashMap = {};\n\n                for (var _i3 = 0, _Object$keys3 = Object.keys(chunkMaps.hash); _i3 < _Object$keys3.length; _i3++) {\n                  var chunkId = _Object$keys3[_i3];\n\n                  if (typeof chunkMaps.hash[chunkId] === \"string\") {\n                    shortChunkHashMap[chunkId] = chunkMaps.hash[chunkId].substr(0, length);\n                  }\n                }\n\n                return \"\\\" + \".concat(JSON.stringify(shortChunkHashMap), \"[chunkId] + \\\"\");\n              },\n              contentHash: {\n                javascript: \"\\\" + \".concat(JSON.stringify(chunkMaps.contentHash.javascript), \"[chunkId] + \\\"\")\n              },\n              contentHashWithLength: {\n                javascript: function javascript(length) {\n                  var shortContentHashMap = {};\n                  var contentHash = chunkMaps.contentHash.javascript;\n\n                  for (var _i4 = 0, _Object$keys4 = Object.keys(contentHash); _i4 < _Object$keys4.length; _i4++) {\n                    var chunkId = _Object$keys4[_i4];\n\n                    if (typeof contentHash[chunkId] === \"string\") {\n                      shortContentHashMap[chunkId] = contentHash[chunkId].substr(0, length);\n                    }\n                  }\n\n                  return \"\\\" + \".concat(JSON.stringify(shortContentHashMap), \"[chunkId] + \\\"\");\n                }\n              },\n              name: \"\\\" + (\".concat(JSON.stringify(chunkMaps.name), \"[chunkId]||chunkId) + \\\"\")\n            },\n            contentHashType: \"javascript\"\n          });\n          return Template.asString([source, \"\", \"// require() chunk loading for javascript\", \"\", '// \"0\" is the signal for \"already loaded\"', \"if(installedChunks[chunkId] !== 0) {\", Template.indent([\"var chunk = require(\".concat(request, \");\")].concat(insertMoreModules).concat([\"for(var i = 0; i < chunkIds.length; i++)\", Template.indent(\"installedChunks[chunkIds[i]] = 0;\")])), \"}\"]);\n        }\n      });\n      mainTemplate.hooks.hotBootstrap.tap(\"NodeMainTemplatePlugin\", function (source, chunk, hash) {\n        var hotUpdateChunkFilename = mainTemplate.outputOptions.hotUpdateChunkFilename;\n        var hotUpdateMainFilename = mainTemplate.outputOptions.hotUpdateMainFilename;\n        var chunkMaps = chunk.getChunkMaps();\n        var currentHotUpdateChunkFilename = mainTemplate.getAssetPath(JSON.stringify(hotUpdateChunkFilename), {\n          hash: \"\\\" + \".concat(mainTemplate.renderCurrentHashCode(hash), \" + \\\"\"),\n          hashWithLength: function hashWithLength(length) {\n            return \"\\\" + \".concat(mainTemplate.renderCurrentHashCode(hash, length), \" + \\\"\");\n          },\n          chunk: {\n            id: '\" + chunkId + \"',\n            hash: \"\\\" + \".concat(JSON.stringify(chunkMaps.hash), \"[chunkId] + \\\"\"),\n            hashWithLength: function hashWithLength(length) {\n              var shortChunkHashMap = {};\n\n              for (var _i5 = 0, _Object$keys5 = Object.keys(chunkMaps.hash); _i5 < _Object$keys5.length; _i5++) {\n                var chunkId = _Object$keys5[_i5];\n\n                if (typeof chunkMaps.hash[chunkId] === \"string\") {\n                  shortChunkHashMap[chunkId] = chunkMaps.hash[chunkId].substr(0, length);\n                }\n              }\n\n              return \"\\\" + \".concat(JSON.stringify(shortChunkHashMap), \"[chunkId] + \\\"\");\n            },\n            name: \"\\\" + (\".concat(JSON.stringify(chunkMaps.name), \"[chunkId]||chunkId) + \\\"\")\n          }\n        });\n        var currentHotUpdateMainFilename = mainTemplate.getAssetPath(JSON.stringify(hotUpdateMainFilename), {\n          hash: \"\\\" + \".concat(mainTemplate.renderCurrentHashCode(hash), \" + \\\"\"),\n          hashWithLength: function hashWithLength(length) {\n            return \"\\\" + \".concat(mainTemplate.renderCurrentHashCode(hash, length), \" + \\\"\");\n          }\n        });\n        return Template.getFunctionContent(asyncChunkLoading ? require(\"./NodeMainTemplateAsync.runtime\") : require(\"./NodeMainTemplate.runtime\")).replace(/\\$require\\$/g, mainTemplate.requireFn).replace(/\\$hotMainFilename\\$/g, currentHotUpdateMainFilename).replace(/\\$hotChunkFilename\\$/g, currentHotUpdateChunkFilename);\n      });\n      mainTemplate.hooks.hash.tap(\"NodeMainTemplatePlugin\", function (hash) {\n        hash.update(\"node\");\n        hash.update(\"4\");\n      });\n    }\n  }]);\n\n  return NodeMainTemplatePlugin;\n}();","map":{"version":3,"sources":["/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/webpack/lib/node/NodeMainTemplatePlugin.js"],"names":["Template","require","module","exports","asyncChunkLoading","mainTemplate","needChunkOnDemandLoadingCode","chunk","groupsIterable","chunkGroup","getNumberOfChildren","hooks","localVars","tap","source","asString","indent","ids","map","id","JSON","stringify","join","requireExtensions","requireFn","requireEnsure","hash","chunkFilename","outputOptions","chunkMaps","getChunkMaps","insertMoreModules","renderAddModule","getAssetPath","renderCurrentHashCode","hashWithLength","length","shortChunkHashMap","Object","keys","chunkId","substr","contentHash","javascript","contentHashWithLength","shortContentHashMap","name","contentHashType","concat","request","hotBootstrap","hotUpdateChunkFilename","hotUpdateMainFilename","currentHotUpdateChunkFilename","currentHotUpdateMainFilename","getFunctionContent","replace","update"],"mappings":"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","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst Template = require(\"../Template\");\n\nmodule.exports = class NodeMainTemplatePlugin {\n\tconstructor(asyncChunkLoading) {\n\t\tthis.asyncChunkLoading = asyncChunkLoading;\n\t}\n\n\tapply(mainTemplate) {\n\t\tconst needChunkOnDemandLoadingCode = chunk => {\n\t\t\tfor (const chunkGroup of chunk.groupsIterable) {\n\t\t\t\tif (chunkGroup.getNumberOfChildren() > 0) return true;\n\t\t\t}\n\t\t\treturn false;\n\t\t};\n\t\tconst asyncChunkLoading = this.asyncChunkLoading;\n\t\tmainTemplate.hooks.localVars.tap(\n\t\t\t\"NodeMainTemplatePlugin\",\n\t\t\t(source, chunk) => {\n\t\t\t\tif (needChunkOnDemandLoadingCode(chunk)) {\n\t\t\t\t\treturn Template.asString([\n\t\t\t\t\t\tsource,\n\t\t\t\t\t\t\"\",\n\t\t\t\t\t\t\"// object to store loaded chunks\",\n\t\t\t\t\t\t'// \"0\" means \"already loaded\"',\n\t\t\t\t\t\t\"var installedChunks = {\",\n\t\t\t\t\t\tTemplate.indent(\n\t\t\t\t\t\t\tchunk.ids.map(id => `${JSON.stringify(id)}: 0`).join(\",\\n\")\n\t\t\t\t\t\t),\n\t\t\t\t\t\t\"};\"\n\t\t\t\t\t]);\n\t\t\t\t}\n\t\t\t\treturn source;\n\t\t\t}\n\t\t);\n\t\tmainTemplate.hooks.requireExtensions.tap(\n\t\t\t\"NodeMainTemplatePlugin\",\n\t\t\t(source, chunk) => {\n\t\t\t\tif (needChunkOnDemandLoadingCode(chunk)) {\n\t\t\t\t\treturn Template.asString([\n\t\t\t\t\t\tsource,\n\t\t\t\t\t\t\"\",\n\t\t\t\t\t\t\"// uncaught error handler for webpack runtime\",\n\t\t\t\t\t\t`${mainTemplate.requireFn}.oe = function(err) {`,\n\t\t\t\t\t\tTemplate.indent([\n\t\t\t\t\t\t\t\"process.nextTick(function() {\",\n\t\t\t\t\t\t\tTemplate.indent(\n\t\t\t\t\t\t\t\t\"throw err; // catch this error by using import().catch()\"\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\"});\"\n\t\t\t\t\t\t]),\n\t\t\t\t\t\t\"};\"\n\t\t\t\t\t]);\n\t\t\t\t}\n\t\t\t\treturn source;\n\t\t\t}\n\t\t);\n\t\tmainTemplate.hooks.requireEnsure.tap(\n\t\t\t\"NodeMainTemplatePlugin\",\n\t\t\t(source, chunk, hash) => {\n\t\t\t\tconst chunkFilename = mainTemplate.outputOptions.chunkFilename;\n\t\t\t\tconst chunkMaps = chunk.getChunkMaps();\n\t\t\t\tconst insertMoreModules = [\n\t\t\t\t\t\"var moreModules = chunk.modules, chunkIds = chunk.ids;\",\n\t\t\t\t\t\"for(var moduleId in moreModules) {\",\n\t\t\t\t\tTemplate.indent(\n\t\t\t\t\t\tmainTemplate.renderAddModule(\n\t\t\t\t\t\t\thash,\n\t\t\t\t\t\t\tchunk,\n\t\t\t\t\t\t\t\"moduleId\",\n\t\t\t\t\t\t\t\"moreModules[moduleId]\"\n\t\t\t\t\t\t)\n\t\t\t\t\t),\n\t\t\t\t\t\"}\"\n\t\t\t\t];\n\t\t\t\tif (asyncChunkLoading) {\n\t\t\t\t\treturn Template.asString([\n\t\t\t\t\t\tsource,\n\t\t\t\t\t\t\"\",\n\t\t\t\t\t\t\"// ReadFile + VM.run chunk loading for javascript\",\n\t\t\t\t\t\t\"\",\n\t\t\t\t\t\t\"var installedChunkData = installedChunks[chunkId];\",\n\t\t\t\t\t\t'if(installedChunkData !== 0) { // 0 means \"already installed\".',\n\t\t\t\t\t\tTemplate.indent([\n\t\t\t\t\t\t\t'// array of [resolve, reject, promise] means \"currently loading\"',\n\t\t\t\t\t\t\t\"if(installedChunkData) {\",\n\t\t\t\t\t\t\tTemplate.indent([\"promises.push(installedChunkData[2]);\"]),\n\t\t\t\t\t\t\t\"} else {\",\n\t\t\t\t\t\t\tTemplate.indent([\n\t\t\t\t\t\t\t\t\"// load the chunk and return promise to it\",\n\t\t\t\t\t\t\t\t\"var promise = new Promise(function(resolve, reject) {\",\n\t\t\t\t\t\t\t\tTemplate.indent([\n\t\t\t\t\t\t\t\t\t\"installedChunkData = installedChunks[chunkId] = [resolve, reject];\",\n\t\t\t\t\t\t\t\t\t\"var filename = require('path').join(__dirname, \" +\n\t\t\t\t\t\t\t\t\t\tmainTemplate.getAssetPath(\n\t\t\t\t\t\t\t\t\t\t\tJSON.stringify(`/${chunkFilename}`),\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\thash: `\" + ${mainTemplate.renderCurrentHashCode(\n\t\t\t\t\t\t\t\t\t\t\t\t\thash\n\t\t\t\t\t\t\t\t\t\t\t\t)} + \"`,\n\t\t\t\t\t\t\t\t\t\t\t\thashWithLength: length =>\n\t\t\t\t\t\t\t\t\t\t\t\t\t`\" + ${mainTemplate.renderCurrentHashCode(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\thash,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tlength\n\t\t\t\t\t\t\t\t\t\t\t\t\t)} + \"`,\n\t\t\t\t\t\t\t\t\t\t\t\tchunk: {\n\t\t\t\t\t\t\t\t\t\t\t\t\tid: '\" + chunkId + \"',\n\t\t\t\t\t\t\t\t\t\t\t\t\thash: `\" + ${JSON.stringify(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tchunkMaps.hash\n\t\t\t\t\t\t\t\t\t\t\t\t\t)}[chunkId] + \"`,\n\t\t\t\t\t\t\t\t\t\t\t\t\thashWithLength: length => {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tconst shortChunkHashMap = {};\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor (const chunkId of Object.keys(chunkMaps.hash)) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (typeof chunkMaps.hash[chunkId] === \"string\") {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tshortChunkHashMap[chunkId] = chunkMaps.hash[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tchunkId\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t].substr(0, length);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn `\" + ${JSON.stringify(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tshortChunkHashMap\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t)}[chunkId] + \"`;\n\t\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t\tcontentHash: {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tjavascript: `\" + ${JSON.stringify(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tchunkMaps.contentHash.javascript\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t)}[chunkId] + \"`\n\t\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t\tcontentHashWithLength: {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tjavascript: length => {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tconst shortContentHashMap = {};\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tconst contentHash =\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tchunkMaps.contentHash.javascript;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor (const chunkId of Object.keys(contentHash)) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (typeof contentHash[chunkId] === \"string\") {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tshortContentHashMap[chunkId] = contentHash[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tchunkId\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t].substr(0, length);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn `\" + ${JSON.stringify(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tshortContentHashMap\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t)}[chunkId] + \"`;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t\tname: `\" + (${JSON.stringify(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tchunkMaps.name\n\t\t\t\t\t\t\t\t\t\t\t\t\t)}[chunkId]||chunkId) + \"`\n\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\tcontentHashType: \"javascript\"\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t) +\n\t\t\t\t\t\t\t\t\t\t\");\",\n\t\t\t\t\t\t\t\t\t\"require('fs').readFile(filename, 'utf-8',  function(err, content) {\",\n\t\t\t\t\t\t\t\t\tTemplate.indent(\n\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\"if(err) return reject(err);\",\n\t\t\t\t\t\t\t\t\t\t\t\"var chunk = {};\",\n\t\t\t\t\t\t\t\t\t\t\t\"require('vm').runInThisContext('(function(exports, require, __dirname, __filename) {' + content + '\\\\n})', filename)\" +\n\t\t\t\t\t\t\t\t\t\t\t\t\"(chunk, require, require('path').dirname(filename), filename);\"\n\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t\t\t.concat(insertMoreModules)\n\t\t\t\t\t\t\t\t\t\t\t.concat([\n\t\t\t\t\t\t\t\t\t\t\t\t\"var callbacks = [];\",\n\t\t\t\t\t\t\t\t\t\t\t\t\"for(var i = 0; i < chunkIds.length; i++) {\",\n\t\t\t\t\t\t\t\t\t\t\t\tTemplate.indent([\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"if(installedChunks[chunkIds[i]])\",\n\t\t\t\t\t\t\t\t\t\t\t\t\tTemplate.indent([\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"callbacks = callbacks.concat(installedChunks[chunkIds[i]][0]);\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"installedChunks[chunkIds[i]] = 0;\"\n\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t\t\"}\",\n\t\t\t\t\t\t\t\t\t\t\t\t\"for(i = 0; i < callbacks.length; i++)\",\n\t\t\t\t\t\t\t\t\t\t\t\tTemplate.indent(\"callbacks[i]();\")\n\t\t\t\t\t\t\t\t\t\t\t])\n\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\t\"});\"\n\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\"});\",\n\t\t\t\t\t\t\t\t\"promises.push(installedChunkData[2] = promise);\"\n\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\"}\"\n\t\t\t\t\t\t]),\n\t\t\t\t\t\t\"}\"\n\t\t\t\t\t]);\n\t\t\t\t} else {\n\t\t\t\t\tconst request = mainTemplate.getAssetPath(\n\t\t\t\t\t\tJSON.stringify(`./${chunkFilename}`),\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\thash: `\" + ${mainTemplate.renderCurrentHashCode(hash)} + \"`,\n\t\t\t\t\t\t\thashWithLength: length =>\n\t\t\t\t\t\t\t\t`\" + ${mainTemplate.renderCurrentHashCode(hash, length)} + \"`,\n\t\t\t\t\t\t\tchunk: {\n\t\t\t\t\t\t\t\tid: '\" + chunkId + \"',\n\t\t\t\t\t\t\t\thash: `\" + ${JSON.stringify(chunkMaps.hash)}[chunkId] + \"`,\n\t\t\t\t\t\t\t\thashWithLength: length => {\n\t\t\t\t\t\t\t\t\tconst shortChunkHashMap = {};\n\t\t\t\t\t\t\t\t\tfor (const chunkId of Object.keys(chunkMaps.hash)) {\n\t\t\t\t\t\t\t\t\t\tif (typeof chunkMaps.hash[chunkId] === \"string\") {\n\t\t\t\t\t\t\t\t\t\t\tshortChunkHashMap[chunkId] = chunkMaps.hash[\n\t\t\t\t\t\t\t\t\t\t\t\tchunkId\n\t\t\t\t\t\t\t\t\t\t\t].substr(0, length);\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\treturn `\" + ${JSON.stringify(\n\t\t\t\t\t\t\t\t\t\tshortChunkHashMap\n\t\t\t\t\t\t\t\t\t)}[chunkId] + \"`;\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tcontentHash: {\n\t\t\t\t\t\t\t\t\tjavascript: `\" + ${JSON.stringify(\n\t\t\t\t\t\t\t\t\t\tchunkMaps.contentHash.javascript\n\t\t\t\t\t\t\t\t\t)}[chunkId] + \"`\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tcontentHashWithLength: {\n\t\t\t\t\t\t\t\t\tjavascript: length => {\n\t\t\t\t\t\t\t\t\t\tconst shortContentHashMap = {};\n\t\t\t\t\t\t\t\t\t\tconst contentHash = chunkMaps.contentHash.javascript;\n\t\t\t\t\t\t\t\t\t\tfor (const chunkId of Object.keys(contentHash)) {\n\t\t\t\t\t\t\t\t\t\t\tif (typeof contentHash[chunkId] === \"string\") {\n\t\t\t\t\t\t\t\t\t\t\t\tshortContentHashMap[chunkId] = contentHash[\n\t\t\t\t\t\t\t\t\t\t\t\t\tchunkId\n\t\t\t\t\t\t\t\t\t\t\t\t].substr(0, length);\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\treturn `\" + ${JSON.stringify(\n\t\t\t\t\t\t\t\t\t\t\tshortContentHashMap\n\t\t\t\t\t\t\t\t\t\t)}[chunkId] + \"`;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tname: `\" + (${JSON.stringify(\n\t\t\t\t\t\t\t\t\tchunkMaps.name\n\t\t\t\t\t\t\t\t)}[chunkId]||chunkId) + \"`\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tcontentHashType: \"javascript\"\n\t\t\t\t\t\t}\n\t\t\t\t\t);\n\t\t\t\t\treturn Template.asString([\n\t\t\t\t\t\tsource,\n\t\t\t\t\t\t\"\",\n\t\t\t\t\t\t\"// require() chunk loading for javascript\",\n\t\t\t\t\t\t\"\",\n\t\t\t\t\t\t'// \"0\" is the signal for \"already loaded\"',\n\t\t\t\t\t\t\"if(installedChunks[chunkId] !== 0) {\",\n\t\t\t\t\t\tTemplate.indent(\n\t\t\t\t\t\t\t[`var chunk = require(${request});`]\n\t\t\t\t\t\t\t\t.concat(insertMoreModules)\n\t\t\t\t\t\t\t\t.concat([\n\t\t\t\t\t\t\t\t\t\"for(var i = 0; i < chunkIds.length; i++)\",\n\t\t\t\t\t\t\t\t\tTemplate.indent(\"installedChunks[chunkIds[i]] = 0;\")\n\t\t\t\t\t\t\t\t])\n\t\t\t\t\t\t),\n\t\t\t\t\t\t\"}\"\n\t\t\t\t\t]);\n\t\t\t\t}\n\t\t\t}\n\t\t);\n\t\tmainTemplate.hooks.hotBootstrap.tap(\n\t\t\t\"NodeMainTemplatePlugin\",\n\t\t\t(source, chunk, hash) => {\n\t\t\t\tconst hotUpdateChunkFilename =\n\t\t\t\t\tmainTemplate.outputOptions.hotUpdateChunkFilename;\n\t\t\t\tconst hotUpdateMainFilename =\n\t\t\t\t\tmainTemplate.outputOptions.hotUpdateMainFilename;\n\t\t\t\tconst chunkMaps = chunk.getChunkMaps();\n\t\t\t\tconst currentHotUpdateChunkFilename = mainTemplate.getAssetPath(\n\t\t\t\t\tJSON.stringify(hotUpdateChunkFilename),\n\t\t\t\t\t{\n\t\t\t\t\t\thash: `\" + ${mainTemplate.renderCurrentHashCode(hash)} + \"`,\n\t\t\t\t\t\thashWithLength: length =>\n\t\t\t\t\t\t\t`\" + ${mainTemplate.renderCurrentHashCode(hash, length)} + \"`,\n\t\t\t\t\t\tchunk: {\n\t\t\t\t\t\t\tid: '\" + chunkId + \"',\n\t\t\t\t\t\t\thash: `\" + ${JSON.stringify(chunkMaps.hash)}[chunkId] + \"`,\n\t\t\t\t\t\t\thashWithLength: length => {\n\t\t\t\t\t\t\t\tconst shortChunkHashMap = {};\n\t\t\t\t\t\t\t\tfor (const chunkId of Object.keys(chunkMaps.hash)) {\n\t\t\t\t\t\t\t\t\tif (typeof chunkMaps.hash[chunkId] === \"string\") {\n\t\t\t\t\t\t\t\t\t\tshortChunkHashMap[chunkId] = chunkMaps.hash[chunkId].substr(\n\t\t\t\t\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t\t\t\t\t\tlength\n\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\treturn `\" + ${JSON.stringify(shortChunkHashMap)}[chunkId] + \"`;\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tname: `\" + (${JSON.stringify(\n\t\t\t\t\t\t\t\tchunkMaps.name\n\t\t\t\t\t\t\t)}[chunkId]||chunkId) + \"`\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t\tconst currentHotUpdateMainFilename = mainTemplate.getAssetPath(\n\t\t\t\t\tJSON.stringify(hotUpdateMainFilename),\n\t\t\t\t\t{\n\t\t\t\t\t\thash: `\" + ${mainTemplate.renderCurrentHashCode(hash)} + \"`,\n\t\t\t\t\t\thashWithLength: length =>\n\t\t\t\t\t\t\t`\" + ${mainTemplate.renderCurrentHashCode(hash, length)} + \"`\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t\treturn Template.getFunctionContent(\n\t\t\t\t\tasyncChunkLoading\n\t\t\t\t\t\t? require(\"./NodeMainTemplateAsync.runtime\")\n\t\t\t\t\t\t: require(\"./NodeMainTemplate.runtime\")\n\t\t\t\t)\n\t\t\t\t\t.replace(/\\$require\\$/g, mainTemplate.requireFn)\n\t\t\t\t\t.replace(/\\$hotMainFilename\\$/g, currentHotUpdateMainFilename)\n\t\t\t\t\t.replace(/\\$hotChunkFilename\\$/g, currentHotUpdateChunkFilename);\n\t\t\t}\n\t\t);\n\t\tmainTemplate.hooks.hash.tap(\"NodeMainTemplatePlugin\", hash => {\n\t\t\thash.update(\"node\");\n\t\t\thash.update(\"4\");\n\t\t});\n\t}\n};\n"]},"metadata":{},"sourceType":"script"}