{"ast":null,"code":"/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n(function (factory) {\n  if (typeof module === \"object\" && typeof module.exports === \"object\") {\n    var v = factory(require, exports);\n    if (v !== undefined) module.exports = v;\n  } else if (typeof define === \"function\" && define.amd) {\n    define(\"@angular/compiler/src/aot/generated_file\", [\"require\", \"exports\", \"@angular/compiler/src/output/output_ast\", \"@angular/compiler/src/output/ts_emitter\"], factory);\n  }\n})(function (require, exports) {\n  \"use strict\";\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.toTypeScript = exports.GeneratedFile = void 0;\n\n  var output_ast_1 = require(\"@angular/compiler/src/output/output_ast\");\n\n  var ts_emitter_1 = require(\"@angular/compiler/src/output/ts_emitter\");\n\n  var GeneratedFile =\n  /** @class */\n  function () {\n    function GeneratedFile(srcFileUrl, genFileUrl, sourceOrStmts) {\n      this.srcFileUrl = srcFileUrl;\n      this.genFileUrl = genFileUrl;\n\n      if (typeof sourceOrStmts === 'string') {\n        this.source = sourceOrStmts;\n        this.stmts = null;\n      } else {\n        this.source = null;\n        this.stmts = sourceOrStmts;\n      }\n    }\n\n    GeneratedFile.prototype.isEquivalent = function (other) {\n      if (this.genFileUrl !== other.genFileUrl) {\n        return false;\n      }\n\n      if (this.source) {\n        return this.source === other.source;\n      }\n\n      if (other.stmts == null) {\n        return false;\n      } // Note: the constructor guarantees that if this.source is not filled,\n      // then this.stmts is.\n\n\n      return output_ast_1.areAllEquivalent(this.stmts, other.stmts);\n    };\n\n    return GeneratedFile;\n  }();\n\n  exports.GeneratedFile = GeneratedFile;\n\n  function toTypeScript(file, preamble) {\n    if (preamble === void 0) {\n      preamble = '';\n    }\n\n    if (!file.stmts) {\n      throw new Error(\"Illegal state: No stmts present on GeneratedFile \" + file.genFileUrl);\n    }\n\n    return new ts_emitter_1.TypeScriptEmitter().emitStatements(file.genFileUrl, file.stmts, preamble);\n  }\n\n  exports.toTypeScript = toTypeScript;\n});","map":{"version":3,"sources":["../../../../../../../packages/compiler/src/aot/generated_file.ts"],"names":[],"mappings":"AAAA;;;;;;AAMG;;;;;;;;;;;;;;;;AAEH,MAAA,YAAA,GAAA,OAAA,CAAA,yCAAA,CAAA;;AACA,MAAA,YAAA,GAAA,OAAA,CAAA,yCAAA,CAAA;;AAEA,MAAA,aAAA;AAAA;AAAA,cAAA;AAIE,aAAA,aAAA,CACW,UADX,EACsC,UADtC,EAC0D,aAD1D,EAC2F;AAAhF,WAAA,UAAA,GAAA,UAAA;AAA2B,WAAA,UAAA,GAAA,UAAA;;AACpC,UAAI,OAAO,aAAP,KAAyB,QAA7B,EAAuC;AACrC,aAAK,MAAL,GAAc,aAAd;AACA,aAAK,KAAL,GAAa,IAAb;AACD,OAHD,MAGO;AACL,aAAK,MAAL,GAAc,IAAd;AACA,aAAK,KAAL,GAAa,aAAb;AACD;AACF;;AAED,IAAA,aAAA,CAAA,SAAA,CAAA,YAAA,GAAA,UAAa,KAAb,EAAiC;AAC/B,UAAI,KAAK,UAAL,KAAoB,KAAK,CAAC,UAA9B,EAA0C;AACxC,eAAO,KAAP;AACD;;AACD,UAAI,KAAK,MAAT,EAAiB;AACf,eAAO,KAAK,MAAL,KAAgB,KAAK,CAAC,MAA7B;AACD;;AACD,UAAI,KAAK,CAAC,KAAN,IAAe,IAAnB,EAAyB;AACvB,eAAO,KAAP;AACD,OAT8B,CAU/B;AACA;;;AACA,aAAO,YAAA,CAAA,gBAAA,CAAiB,KAAK,KAAtB,EAA8B,KAAK,CAAC,KAApC,CAAP;AACD,KAbD;;AAcF,WAAA,aAAA;AAAC,GA7BD,EAAA;;AAAa,EAAA,OAAA,CAAA,aAAA,GAAA,aAAA;;AA+Bb,WAAgB,YAAhB,CAA6B,IAA7B,EAAkD,QAAlD,EAAuE;AAArB,QAAA,QAAA,KAAA,KAAA,CAAA,EAAA;AAAA,MAAA,QAAA,GAAA,EAAA;AAAqB;;AACrE,QAAI,CAAC,IAAI,CAAC,KAAV,EAAiB;AACf,YAAM,IAAI,KAAJ,CAAU,sDAAoD,IAAI,CAAC,UAAnE,CAAN;AACD;;AACD,WAAO,IAAI,YAAA,CAAA,iBAAJ,GAAwB,cAAxB,CAAuC,IAAI,CAAC,UAA5C,EAAwD,IAAI,CAAC,KAA7D,EAAoE,QAApE,CAAP;AACD;;AALD,EAAA,OAAA,CAAA,YAAA,GAAA,YAAA","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {areAllEquivalent, Statement} from '../output/output_ast';\nimport {TypeScriptEmitter} from '../output/ts_emitter';\n\nexport class GeneratedFile {\n  public source: string|null;\n  public stmts: Statement[]|null;\n\n  constructor(\n      public srcFileUrl: string, public genFileUrl: string, sourceOrStmts: string|Statement[]) {\n    if (typeof sourceOrStmts === 'string') {\n      this.source = sourceOrStmts;\n      this.stmts = null;\n    } else {\n      this.source = null;\n      this.stmts = sourceOrStmts;\n    }\n  }\n\n  isEquivalent(other: GeneratedFile): boolean {\n    if (this.genFileUrl !== other.genFileUrl) {\n      return false;\n    }\n    if (this.source) {\n      return this.source === other.source;\n    }\n    if (other.stmts == null) {\n      return false;\n    }\n    // Note: the constructor guarantees that if this.source is not filled,\n    // then this.stmts is.\n    return areAllEquivalent(this.stmts!, other.stmts!);\n  }\n}\n\nexport function toTypeScript(file: GeneratedFile, preamble: string = ''): string {\n  if (!file.stmts) {\n    throw new Error(`Illegal state: No stmts present on GeneratedFile ${file.genFileUrl}`);\n  }\n  return new TypeScriptEmitter().emitStatements(file.genFileUrl, file.stmts, preamble);\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}