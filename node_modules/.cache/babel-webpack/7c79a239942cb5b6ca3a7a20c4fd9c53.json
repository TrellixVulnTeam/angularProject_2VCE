{"ast":null,"code":"/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n(function (factory) {\n  if (typeof module === \"object\" && typeof module.exports === \"object\") {\n    var v = factory(require, exports);\n    if (v !== undefined) module.exports = v;\n  } else if (typeof define === \"function\" && define.amd) {\n    define(\"@angular/compiler/src/directive_normalizer\", [\"require\", \"exports\", \"tslib\", \"@angular/compiler/src/compile_metadata\", \"@angular/compiler/src/config\", \"@angular/compiler/src/core\", \"@angular/compiler/src/ml_parser/ast\", \"@angular/compiler/src/ml_parser/interpolation_config\", \"@angular/compiler/src/style_url_resolver\", \"@angular/compiler/src/template_parser/template_preparser\", \"@angular/compiler/src/util\"], factory);\n  }\n})(function (require, exports) {\n  \"use strict\";\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.DirectiveNormalizer = void 0;\n\n  var tslib_1 = require(\"tslib\");\n\n  var compile_metadata_1 = require(\"@angular/compiler/src/compile_metadata\");\n\n  var config_1 = require(\"@angular/compiler/src/config\");\n\n  var core_1 = require(\"@angular/compiler/src/core\");\n\n  var html = require(\"@angular/compiler/src/ml_parser/ast\");\n\n  var interpolation_config_1 = require(\"@angular/compiler/src/ml_parser/interpolation_config\");\n\n  var style_url_resolver_1 = require(\"@angular/compiler/src/style_url_resolver\");\n\n  var template_preparser_1 = require(\"@angular/compiler/src/template_parser/template_preparser\");\n\n  var util_1 = require(\"@angular/compiler/src/util\");\n\n  var DirectiveNormalizer =\n  /** @class */\n  function () {\n    function DirectiveNormalizer(_resourceLoader, _urlResolver, _htmlParser, _config) {\n      this._resourceLoader = _resourceLoader;\n      this._urlResolver = _urlResolver;\n      this._htmlParser = _htmlParser;\n      this._config = _config;\n      this._resourceLoaderCache = new Map();\n    }\n\n    DirectiveNormalizer.prototype.clearCache = function () {\n      this._resourceLoaderCache.clear();\n    };\n\n    DirectiveNormalizer.prototype.clearCacheFor = function (normalizedDirective) {\n      var _this = this;\n\n      if (!normalizedDirective.isComponent) {\n        return;\n      }\n\n      var template = normalizedDirective.template;\n\n      this._resourceLoaderCache.delete(template.templateUrl);\n\n      template.externalStylesheets.forEach(function (stylesheet) {\n        _this._resourceLoaderCache.delete(stylesheet.moduleUrl);\n      });\n    };\n\n    DirectiveNormalizer.prototype._fetch = function (url) {\n      var result = this._resourceLoaderCache.get(url);\n\n      if (!result) {\n        result = this._resourceLoader.get(url);\n\n        this._resourceLoaderCache.set(url, result);\n      }\n\n      return result;\n    };\n\n    DirectiveNormalizer.prototype.normalizeTemplate = function (prenormData) {\n      var _this = this;\n\n      if (util_1.isDefined(prenormData.template)) {\n        if (util_1.isDefined(prenormData.templateUrl)) {\n          throw util_1.syntaxError(\"'\" + util_1.stringify(prenormData.componentType) + \"' component cannot define both template and templateUrl\");\n        }\n\n        if (typeof prenormData.template !== 'string') {\n          throw util_1.syntaxError(\"The template specified for component \" + util_1.stringify(prenormData.componentType) + \" is not a string\");\n        }\n      } else if (util_1.isDefined(prenormData.templateUrl)) {\n        if (typeof prenormData.templateUrl !== 'string') {\n          throw util_1.syntaxError(\"The templateUrl specified for component \" + util_1.stringify(prenormData.componentType) + \" is not a string\");\n        }\n      } else {\n        throw util_1.syntaxError(\"No template specified for component \" + util_1.stringify(prenormData.componentType));\n      }\n\n      if (util_1.isDefined(prenormData.preserveWhitespaces) && typeof prenormData.preserveWhitespaces !== 'boolean') {\n        throw util_1.syntaxError(\"The preserveWhitespaces option for component \" + util_1.stringify(prenormData.componentType) + \" must be a boolean\");\n      }\n\n      return util_1.SyncAsync.then(this._preParseTemplate(prenormData), function (preparsedTemplate) {\n        return _this._normalizeTemplateMetadata(prenormData, preparsedTemplate);\n      });\n    };\n\n    DirectiveNormalizer.prototype._preParseTemplate = function (prenomData) {\n      var _this = this;\n\n      var template;\n      var templateUrl;\n\n      if (prenomData.template != null) {\n        template = prenomData.template;\n        templateUrl = prenomData.moduleUrl;\n      } else {\n        templateUrl = this._urlResolver.resolve(prenomData.moduleUrl, prenomData.templateUrl);\n        template = this._fetch(templateUrl);\n      }\n\n      return util_1.SyncAsync.then(template, function (template) {\n        return _this._preparseLoadedTemplate(prenomData, template, templateUrl);\n      });\n    };\n\n    DirectiveNormalizer.prototype._preparseLoadedTemplate = function (prenormData, template, templateAbsUrl) {\n      var isInline = !!prenormData.template;\n      var interpolationConfig = interpolation_config_1.InterpolationConfig.fromArray(prenormData.interpolation);\n      var templateUrl = compile_metadata_1.templateSourceUrl({\n        reference: prenormData.ngModuleType\n      }, {\n        type: {\n          reference: prenormData.componentType\n        }\n      }, {\n        isInline: isInline,\n        templateUrl: templateAbsUrl\n      });\n\n      var rootNodesAndErrors = this._htmlParser.parse(template, templateUrl, {\n        tokenizeExpansionForms: true,\n        interpolationConfig: interpolationConfig\n      });\n\n      if (rootNodesAndErrors.errors.length > 0) {\n        var errorString = rootNodesAndErrors.errors.join('\\n');\n        throw util_1.syntaxError(\"Template parse errors:\\n\" + errorString);\n      }\n\n      var templateMetadataStyles = this._normalizeStylesheet(new compile_metadata_1.CompileStylesheetMetadata({\n        styles: prenormData.styles,\n        moduleUrl: prenormData.moduleUrl\n      }));\n\n      var visitor = new TemplatePreparseVisitor();\n      html.visitAll(visitor, rootNodesAndErrors.rootNodes);\n\n      var templateStyles = this._normalizeStylesheet(new compile_metadata_1.CompileStylesheetMetadata({\n        styles: visitor.styles,\n        styleUrls: visitor.styleUrls,\n        moduleUrl: templateAbsUrl\n      }));\n\n      var styles = templateMetadataStyles.styles.concat(templateStyles.styles);\n      var inlineStyleUrls = templateMetadataStyles.styleUrls.concat(templateStyles.styleUrls);\n\n      var styleUrls = this._normalizeStylesheet(new compile_metadata_1.CompileStylesheetMetadata({\n        styleUrls: prenormData.styleUrls,\n        moduleUrl: prenormData.moduleUrl\n      })).styleUrls;\n\n      return {\n        template: template,\n        templateUrl: templateAbsUrl,\n        isInline: isInline,\n        htmlAst: rootNodesAndErrors,\n        styles: styles,\n        inlineStyleUrls: inlineStyleUrls,\n        styleUrls: styleUrls,\n        ngContentSelectors: visitor.ngContentSelectors\n      };\n    };\n\n    DirectiveNormalizer.prototype._normalizeTemplateMetadata = function (prenormData, preparsedTemplate) {\n      var _this = this;\n\n      return util_1.SyncAsync.then(this._loadMissingExternalStylesheets(preparsedTemplate.styleUrls.concat(preparsedTemplate.inlineStyleUrls)), function (externalStylesheets) {\n        return _this._normalizeLoadedTemplateMetadata(prenormData, preparsedTemplate, externalStylesheets);\n      });\n    };\n\n    DirectiveNormalizer.prototype._normalizeLoadedTemplateMetadata = function (prenormData, preparsedTemplate, stylesheets) {\n      // Algorithm:\n      // - produce exactly 1 entry per original styleUrl in\n      // CompileTemplateMetadata.externalStylesheets with all styles inlined\n      // - inline all styles that are referenced by the template into CompileTemplateMetadata.styles.\n      // Reason: be able to determine how many stylesheets there are even without loading\n      // the template nor the stylesheets, so we can create a stub for TypeScript always synchronously\n      // (as resource loading may be async)\n      var _this = this;\n\n      var styles = tslib_1.__spread(preparsedTemplate.styles);\n\n      this._inlineStyles(preparsedTemplate.inlineStyleUrls, stylesheets, styles);\n\n      var styleUrls = preparsedTemplate.styleUrls;\n      var externalStylesheets = styleUrls.map(function (styleUrl) {\n        var stylesheet = stylesheets.get(styleUrl);\n\n        var styles = tslib_1.__spread(stylesheet.styles);\n\n        _this._inlineStyles(stylesheet.styleUrls, stylesheets, styles);\n\n        return new compile_metadata_1.CompileStylesheetMetadata({\n          moduleUrl: styleUrl,\n          styles: styles\n        });\n      });\n      var encapsulation = prenormData.encapsulation;\n\n      if (encapsulation == null) {\n        encapsulation = this._config.defaultEncapsulation;\n      }\n\n      if (encapsulation === core_1.ViewEncapsulation.Emulated && styles.length === 0 && styleUrls.length === 0) {\n        encapsulation = core_1.ViewEncapsulation.None;\n      }\n\n      return new compile_metadata_1.CompileTemplateMetadata({\n        encapsulation: encapsulation,\n        template: preparsedTemplate.template,\n        templateUrl: preparsedTemplate.templateUrl,\n        htmlAst: preparsedTemplate.htmlAst,\n        styles: styles,\n        styleUrls: styleUrls,\n        ngContentSelectors: preparsedTemplate.ngContentSelectors,\n        animations: prenormData.animations,\n        interpolation: prenormData.interpolation,\n        isInline: preparsedTemplate.isInline,\n        externalStylesheets: externalStylesheets,\n        preserveWhitespaces: config_1.preserveWhitespacesDefault(prenormData.preserveWhitespaces, this._config.preserveWhitespaces)\n      });\n    };\n\n    DirectiveNormalizer.prototype._inlineStyles = function (styleUrls, stylesheets, targetStyles) {\n      var _this = this;\n\n      styleUrls.forEach(function (styleUrl) {\n        var stylesheet = stylesheets.get(styleUrl);\n        stylesheet.styles.forEach(function (style) {\n          return targetStyles.push(style);\n        });\n\n        _this._inlineStyles(stylesheet.styleUrls, stylesheets, targetStyles);\n      });\n    };\n\n    DirectiveNormalizer.prototype._loadMissingExternalStylesheets = function (styleUrls, loadedStylesheets) {\n      var _this = this;\n\n      if (loadedStylesheets === void 0) {\n        loadedStylesheets = new Map();\n      }\n\n      return util_1.SyncAsync.then(util_1.SyncAsync.all(styleUrls.filter(function (styleUrl) {\n        return !loadedStylesheets.has(styleUrl);\n      }).map(function (styleUrl) {\n        return util_1.SyncAsync.then(_this._fetch(styleUrl), function (loadedStyle) {\n          var stylesheet = _this._normalizeStylesheet(new compile_metadata_1.CompileStylesheetMetadata({\n            styles: [loadedStyle],\n            moduleUrl: styleUrl\n          }));\n\n          loadedStylesheets.set(styleUrl, stylesheet);\n          return _this._loadMissingExternalStylesheets(stylesheet.styleUrls, loadedStylesheets);\n        });\n      })), function (_) {\n        return loadedStylesheets;\n      });\n    };\n\n    DirectiveNormalizer.prototype._normalizeStylesheet = function (stylesheet) {\n      var _this = this;\n\n      var moduleUrl = stylesheet.moduleUrl;\n      var allStyleUrls = stylesheet.styleUrls.filter(style_url_resolver_1.isStyleUrlResolvable).map(function (url) {\n        return _this._urlResolver.resolve(moduleUrl, url);\n      });\n      var allStyles = stylesheet.styles.map(function (style) {\n        var styleWithImports = style_url_resolver_1.extractStyleUrls(_this._urlResolver, moduleUrl, style);\n        allStyleUrls.push.apply(allStyleUrls, tslib_1.__spread(styleWithImports.styleUrls));\n        return styleWithImports.style;\n      });\n      return new compile_metadata_1.CompileStylesheetMetadata({\n        styles: allStyles,\n        styleUrls: allStyleUrls,\n        moduleUrl: moduleUrl\n      });\n    };\n\n    return DirectiveNormalizer;\n  }();\n\n  exports.DirectiveNormalizer = DirectiveNormalizer;\n\n  var TemplatePreparseVisitor =\n  /** @class */\n  function () {\n    function TemplatePreparseVisitor() {\n      this.ngContentSelectors = [];\n      this.styles = [];\n      this.styleUrls = [];\n      this.ngNonBindableStackCount = 0;\n    }\n\n    TemplatePreparseVisitor.prototype.visitElement = function (ast, context) {\n      var preparsedElement = template_preparser_1.preparseElement(ast);\n\n      switch (preparsedElement.type) {\n        case template_preparser_1.PreparsedElementType.NG_CONTENT:\n          if (this.ngNonBindableStackCount === 0) {\n            this.ngContentSelectors.push(preparsedElement.selectAttr);\n          }\n\n          break;\n\n        case template_preparser_1.PreparsedElementType.STYLE:\n          var textContent_1 = '';\n          ast.children.forEach(function (child) {\n            if (child instanceof html.Text) {\n              textContent_1 += child.value;\n            }\n          });\n          this.styles.push(textContent_1);\n          break;\n\n        case template_preparser_1.PreparsedElementType.STYLESHEET:\n          this.styleUrls.push(preparsedElement.hrefAttr);\n          break;\n\n        default:\n          break;\n      }\n\n      if (preparsedElement.nonBindable) {\n        this.ngNonBindableStackCount++;\n      }\n\n      html.visitAll(this, ast.children);\n\n      if (preparsedElement.nonBindable) {\n        this.ngNonBindableStackCount--;\n      }\n\n      return null;\n    };\n\n    TemplatePreparseVisitor.prototype.visitExpansion = function (ast, context) {\n      html.visitAll(this, ast.cases);\n    };\n\n    TemplatePreparseVisitor.prototype.visitExpansionCase = function (ast, context) {\n      html.visitAll(this, ast.expression);\n    };\n\n    TemplatePreparseVisitor.prototype.visitComment = function (ast, context) {\n      return null;\n    };\n\n    TemplatePreparseVisitor.prototype.visitAttribute = function (ast, context) {\n      return null;\n    };\n\n    TemplatePreparseVisitor.prototype.visitText = function (ast, context) {\n      return null;\n    };\n\n    return TemplatePreparseVisitor;\n  }();\n});","map":{"version":3,"sources":["../../../../../../packages/compiler/src/directive_normalizer.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CompileDirectiveMetadata, CompileStylesheetMetadata, CompileTemplateMetadata, templateSourceUrl} from './compile_metadata';\nimport {CompilerConfig, preserveWhitespacesDefault} from './config';\nimport {ViewEncapsulation} from './core';\nimport * as html from './ml_parser/ast';\nimport {HtmlParser} from './ml_parser/html_parser';\nimport {InterpolationConfig} from './ml_parser/interpolation_config';\nimport {ParseTreeResult as HtmlParseTreeResult} from './ml_parser/parser';\nimport {ResourceLoader} from './resource_loader';\nimport {extractStyleUrls, isStyleUrlResolvable} from './style_url_resolver';\nimport {PreparsedElementType, preparseElement} from './template_parser/template_preparser';\nimport {UrlResolver} from './url_resolver';\nimport {isDefined, stringify, SyncAsync, syntaxError} from './util';\n\nexport interface PrenormalizedTemplateMetadata {\n  ngModuleType: any;\n  componentType: any;\n  moduleUrl: string;\n  template: string|null;\n  templateUrl: string|null;\n  styles: string[];\n  styleUrls: string[];\n  interpolation: [string, string]|null;\n  encapsulation: ViewEncapsulation|null;\n  animations: any[];\n  preserveWhitespaces: boolean|null;\n}\n\nexport class DirectiveNormalizer {\n  private _resourceLoaderCache = new Map<string, SyncAsync<string>>();\n\n  constructor(\n      private _resourceLoader: ResourceLoader, private _urlResolver: UrlResolver,\n      private _htmlParser: HtmlParser, private _config: CompilerConfig) {}\n\n  clearCache(): void {\n    this._resourceLoaderCache.clear();\n  }\n\n  clearCacheFor(normalizedDirective: CompileDirectiveMetadata): void {\n    if (!normalizedDirective.isComponent) {\n      return;\n    }\n    const template = normalizedDirective.template !;\n    this._resourceLoaderCache.delete(template.templateUrl!);\n    template.externalStylesheets.forEach((stylesheet) => {\n      this._resourceLoaderCache.delete(stylesheet.moduleUrl!);\n    });\n  }\n\n  private _fetch(url: string): SyncAsync<string> {\n    let result = this._resourceLoaderCache.get(url);\n    if (!result) {\n      result = this._resourceLoader.get(url);\n      this._resourceLoaderCache.set(url, result);\n    }\n    return result;\n  }\n\n  normalizeTemplate(prenormData: PrenormalizedTemplateMetadata):\n      SyncAsync<CompileTemplateMetadata> {\n    if (isDefined(prenormData.template)) {\n      if (isDefined(prenormData.templateUrl)) {\n        throw syntaxError(`'${\n            stringify(prenormData\n                          .componentType)}' component cannot define both template and templateUrl`);\n      }\n      if (typeof prenormData.template !== 'string') {\n        throw syntaxError(`The template specified for component ${\n            stringify(prenormData.componentType)} is not a string`);\n      }\n    } else if (isDefined(prenormData.templateUrl)) {\n      if (typeof prenormData.templateUrl !== 'string') {\n        throw syntaxError(`The templateUrl specified for component ${\n            stringify(prenormData.componentType)} is not a string`);\n      }\n    } else {\n      throw syntaxError(\n          `No template specified for component ${stringify(prenormData.componentType)}`);\n    }\n\n    if (isDefined(prenormData.preserveWhitespaces) &&\n        typeof prenormData.preserveWhitespaces !== 'boolean') {\n      throw syntaxError(`The preserveWhitespaces option for component ${\n          stringify(prenormData.componentType)} must be a boolean`);\n    }\n\n    return SyncAsync.then(\n        this._preParseTemplate(prenormData),\n        (preparsedTemplate) => this._normalizeTemplateMetadata(prenormData, preparsedTemplate));\n  }\n\n  private _preParseTemplate(prenomData: PrenormalizedTemplateMetadata):\n      SyncAsync<PreparsedTemplate> {\n    let template: SyncAsync<string>;\n    let templateUrl: string;\n    if (prenomData.template != null) {\n      template = prenomData.template;\n      templateUrl = prenomData.moduleUrl;\n    } else {\n      templateUrl = this._urlResolver.resolve(prenomData.moduleUrl, prenomData.templateUrl!);\n      template = this._fetch(templateUrl);\n    }\n    return SyncAsync.then(\n        template, (template) => this._preparseLoadedTemplate(prenomData, template, templateUrl));\n  }\n\n  private _preparseLoadedTemplate(\n      prenormData: PrenormalizedTemplateMetadata, template: string,\n      templateAbsUrl: string): PreparsedTemplate {\n    const isInline = !!prenormData.template;\n    const interpolationConfig = InterpolationConfig.fromArray(prenormData.interpolation!);\n    const templateUrl = templateSourceUrl(\n        {reference: prenormData.ngModuleType}, {type: {reference: prenormData.componentType}},\n        {isInline, templateUrl: templateAbsUrl});\n    const rootNodesAndErrors = this._htmlParser.parse(\n        template, templateUrl, {tokenizeExpansionForms: true, interpolationConfig});\n    if (rootNodesAndErrors.errors.length > 0) {\n      const errorString = rootNodesAndErrors.errors.join('\\n');\n      throw syntaxError(`Template parse errors:\\n${errorString}`);\n    }\n\n    const templateMetadataStyles = this._normalizeStylesheet(new CompileStylesheetMetadata(\n        {styles: prenormData.styles, moduleUrl: prenormData.moduleUrl}));\n\n    const visitor = new TemplatePreparseVisitor();\n    html.visitAll(visitor, rootNodesAndErrors.rootNodes);\n    const templateStyles = this._normalizeStylesheet(new CompileStylesheetMetadata(\n        {styles: visitor.styles, styleUrls: visitor.styleUrls, moduleUrl: templateAbsUrl}));\n\n    const styles = templateMetadataStyles.styles.concat(templateStyles.styles);\n\n    const inlineStyleUrls = templateMetadataStyles.styleUrls.concat(templateStyles.styleUrls);\n    const styleUrls = this\n                          ._normalizeStylesheet(new CompileStylesheetMetadata(\n                              {styleUrls: prenormData.styleUrls, moduleUrl: prenormData.moduleUrl}))\n                          .styleUrls;\n    return {\n      template,\n      templateUrl: templateAbsUrl,\n      isInline,\n      htmlAst: rootNodesAndErrors,\n      styles,\n      inlineStyleUrls,\n      styleUrls,\n      ngContentSelectors: visitor.ngContentSelectors,\n    };\n  }\n\n  private _normalizeTemplateMetadata(\n      prenormData: PrenormalizedTemplateMetadata,\n      preparsedTemplate: PreparsedTemplate): SyncAsync<CompileTemplateMetadata> {\n    return SyncAsync.then(\n        this._loadMissingExternalStylesheets(\n            preparsedTemplate.styleUrls.concat(preparsedTemplate.inlineStyleUrls)),\n        (externalStylesheets) => this._normalizeLoadedTemplateMetadata(\n            prenormData, preparsedTemplate, externalStylesheets));\n  }\n\n  private _normalizeLoadedTemplateMetadata(\n      prenormData: PrenormalizedTemplateMetadata, preparsedTemplate: PreparsedTemplate,\n      stylesheets: Map<string, CompileStylesheetMetadata>): CompileTemplateMetadata {\n    // Algorithm:\n    // - produce exactly 1 entry per original styleUrl in\n    // CompileTemplateMetadata.externalStylesheets with all styles inlined\n    // - inline all styles that are referenced by the template into CompileTemplateMetadata.styles.\n    // Reason: be able to determine how many stylesheets there are even without loading\n    // the template nor the stylesheets, so we can create a stub for TypeScript always synchronously\n    // (as resource loading may be async)\n\n    const styles = [...preparsedTemplate.styles];\n    this._inlineStyles(preparsedTemplate.inlineStyleUrls, stylesheets, styles);\n    const styleUrls = preparsedTemplate.styleUrls;\n\n    const externalStylesheets = styleUrls.map(styleUrl => {\n      const stylesheet = stylesheets.get(styleUrl)!;\n      const styles = [...stylesheet.styles];\n      this._inlineStyles(stylesheet.styleUrls, stylesheets, styles);\n      return new CompileStylesheetMetadata({moduleUrl: styleUrl, styles: styles});\n    });\n\n    let encapsulation = prenormData.encapsulation;\n    if (encapsulation == null) {\n      encapsulation = this._config.defaultEncapsulation;\n    }\n    if (encapsulation === ViewEncapsulation.Emulated && styles.length === 0 &&\n        styleUrls.length === 0) {\n      encapsulation = ViewEncapsulation.None;\n    }\n    return new CompileTemplateMetadata({\n      encapsulation,\n      template: preparsedTemplate.template,\n      templateUrl: preparsedTemplate.templateUrl,\n      htmlAst: preparsedTemplate.htmlAst,\n      styles,\n      styleUrls,\n      ngContentSelectors: preparsedTemplate.ngContentSelectors,\n      animations: prenormData.animations,\n      interpolation: prenormData.interpolation,\n      isInline: preparsedTemplate.isInline,\n      externalStylesheets,\n      preserveWhitespaces: preserveWhitespacesDefault(\n          prenormData.preserveWhitespaces, this._config.preserveWhitespaces),\n    });\n  }\n\n  private _inlineStyles(\n      styleUrls: string[], stylesheets: Map<string, CompileStylesheetMetadata>,\n      targetStyles: string[]) {\n    styleUrls.forEach(styleUrl => {\n      const stylesheet = stylesheets.get(styleUrl)!;\n      stylesheet.styles.forEach(style => targetStyles.push(style));\n      this._inlineStyles(stylesheet.styleUrls, stylesheets, targetStyles);\n    });\n  }\n\n  private _loadMissingExternalStylesheets(\n      styleUrls: string[],\n      loadedStylesheets:\n          Map<string, CompileStylesheetMetadata> = new Map<string, CompileStylesheetMetadata>()):\n      SyncAsync<Map<string, CompileStylesheetMetadata>> {\n    return SyncAsync.then(\n        SyncAsync.all(styleUrls.filter((styleUrl) => !loadedStylesheets.has(styleUrl))\n                          .map(\n                              styleUrl => SyncAsync.then(\n                                  this._fetch(styleUrl),\n                                  (loadedStyle) => {\n                                    const stylesheet =\n                                        this._normalizeStylesheet(new CompileStylesheetMetadata(\n                                            {styles: [loadedStyle], moduleUrl: styleUrl}));\n                                    loadedStylesheets.set(styleUrl, stylesheet);\n                                    return this._loadMissingExternalStylesheets(\n                                        stylesheet.styleUrls, loadedStylesheets);\n                                  }))),\n        (_) => loadedStylesheets);\n  }\n\n  private _normalizeStylesheet(stylesheet: CompileStylesheetMetadata): CompileStylesheetMetadata {\n    const moduleUrl = stylesheet.moduleUrl!;\n    const allStyleUrls = stylesheet.styleUrls.filter(isStyleUrlResolvable)\n                             .map(url => this._urlResolver.resolve(moduleUrl, url));\n\n    const allStyles = stylesheet.styles.map(style => {\n      const styleWithImports = extractStyleUrls(this._urlResolver, moduleUrl, style);\n      allStyleUrls.push(...styleWithImports.styleUrls);\n      return styleWithImports.style;\n    });\n\n    return new CompileStylesheetMetadata(\n        {styles: allStyles, styleUrls: allStyleUrls, moduleUrl: moduleUrl});\n  }\n}\n\ninterface PreparsedTemplate {\n  template: string;\n  templateUrl: string;\n  isInline: boolean;\n  htmlAst: HtmlParseTreeResult;\n  styles: string[];\n  inlineStyleUrls: string[];\n  styleUrls: string[];\n  ngContentSelectors: string[];\n}\n\nclass TemplatePreparseVisitor implements html.Visitor {\n  ngContentSelectors: string[] = [];\n  styles: string[] = [];\n  styleUrls: string[] = [];\n  ngNonBindableStackCount: number = 0;\n\n  visitElement(ast: html.Element, context: any): any {\n    const preparsedElement = preparseElement(ast);\n    switch (preparsedElement.type) {\n      case PreparsedElementType.NG_CONTENT:\n        if (this.ngNonBindableStackCount === 0) {\n          this.ngContentSelectors.push(preparsedElement.selectAttr);\n        }\n        break;\n      case PreparsedElementType.STYLE:\n        let textContent = '';\n        ast.children.forEach(child => {\n          if (child instanceof html.Text) {\n            textContent += child.value;\n          }\n        });\n        this.styles.push(textContent);\n        break;\n      case PreparsedElementType.STYLESHEET:\n        this.styleUrls.push(preparsedElement.hrefAttr);\n        break;\n      default:\n        break;\n    }\n    if (preparsedElement.nonBindable) {\n      this.ngNonBindableStackCount++;\n    }\n    html.visitAll(this, ast.children);\n    if (preparsedElement.nonBindable) {\n      this.ngNonBindableStackCount--;\n    }\n    return null;\n  }\n\n  visitExpansion(ast: html.Expansion, context: any): any {\n    html.visitAll(this, ast.cases);\n  }\n\n  visitExpansionCase(ast: html.ExpansionCase, context: any): any {\n    html.visitAll(this, ast.expression);\n  }\n\n  visitComment(ast: html.Comment, context: any): any {\n    return null;\n  }\n  visitAttribute(ast: html.Attribute, context: any): any {\n    return null;\n  }\n  visitText(ast: html.Text, context: any): any {\n    return null;\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}