{"ast":null,"code":"function maxFileSizeUnitTransform(maxLogSize) {\n  if (typeof maxLogSize === 'number' && Number.isInteger(maxLogSize)) {\n    return maxLogSize;\n  }\n\n  var units = {\n    K: 1024,\n    M: 1024 * 1024,\n    G: 1024 * 1024 * 1024\n  };\n  var validUnit = Object.keys(units);\n  var unit = maxLogSize.substr(maxLogSize.length - 1).toLocaleUpperCase();\n  var value = maxLogSize.substring(0, maxLogSize.length - 1).trim();\n\n  if (validUnit.indexOf(unit) < 0 || !Number.isInteger(Number(value))) {\n    throw Error(\"maxLogSize: \\\"\".concat(maxLogSize, \"\\\" is invalid\"));\n  } else {\n    return value * units[unit];\n  }\n}\n\nfunction adapter(configAdapter, config) {\n  var newConfig = Object.assign({}, config);\n  Object.keys(configAdapter).forEach(function (key) {\n    if (newConfig[key]) {\n      newConfig[key] = configAdapter[key](config[key]);\n    }\n  });\n  return newConfig;\n}\n\nfunction fileAppenderAdapter(config) {\n  var configAdapter = {\n    maxLogSize: maxFileSizeUnitTransform\n  };\n  return adapter(configAdapter, config);\n}\n\nvar adapters = {\n  file: fileAppenderAdapter,\n  fileSync: fileAppenderAdapter\n};\n\nmodule.exports.modifyConfig = function (config) {\n  return adapters[config.type] ? adapters[config.type](config) : config;\n};","map":{"version":3,"sources":["/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/log4js/lib/appenders/adapters.js"],"names":["maxFileSizeUnitTransform","maxLogSize","Number","isInteger","units","K","M","G","validUnit","Object","keys","unit","substr","length","toLocaleUpperCase","value","substring","trim","indexOf","Error","adapter","configAdapter","config","newConfig","assign","forEach","key","fileAppenderAdapter","adapters","file","fileSync","module","exports","modifyConfig","type"],"mappings":"AAAA,SAASA,wBAAT,CAAkCC,UAAlC,EAA8C;AAC5C,MAAI,OAAOA,UAAP,KAAsB,QAAtB,IAAkCC,MAAM,CAACC,SAAP,CAAiBF,UAAjB,CAAtC,EAAoE;AAClE,WAAOA,UAAP;AACD;;AAED,MAAMG,KAAK,GAAG;AACZC,IAAAA,CAAC,EAAE,IADS;AAEZC,IAAAA,CAAC,EAAE,OAAO,IAFE;AAGZC,IAAAA,CAAC,EAAE,OAAO,IAAP,GAAc;AAHL,GAAd;AAKA,MAAMC,SAAS,GAAGC,MAAM,CAACC,IAAP,CAAYN,KAAZ,CAAlB;AACA,MAAMO,IAAI,GAAGV,UAAU,CAACW,MAAX,CAAkBX,UAAU,CAACY,MAAX,GAAoB,CAAtC,EAAyCC,iBAAzC,EAAb;AACA,MAAMC,KAAK,GAAGd,UAAU,CAACe,SAAX,CAAqB,CAArB,EAAwBf,UAAU,CAACY,MAAX,GAAoB,CAA5C,EAA+CI,IAA/C,EAAd;;AAEA,MAAIT,SAAS,CAACU,OAAV,CAAkBP,IAAlB,IAA0B,CAA1B,IAA+B,CAACT,MAAM,CAACC,SAAP,CAAiBD,MAAM,CAACa,KAAD,CAAvB,CAApC,EAAqE;AACnE,UAAMI,KAAK,yBAAiBlB,UAAjB,mBAAX;AACD,GAFD,MAEO;AACL,WAAOc,KAAK,GAAGX,KAAK,CAACO,IAAD,CAApB;AACD;AACF;;AAED,SAASS,OAAT,CAAiBC,aAAjB,EAAgCC,MAAhC,EAAwC;AACtC,MAAMC,SAAS,GAAGd,MAAM,CAACe,MAAP,CAAc,EAAd,EAAkBF,MAAlB,CAAlB;AACAb,EAAAA,MAAM,CAACC,IAAP,CAAYW,aAAZ,EAA2BI,OAA3B,CAAmC,UAACC,GAAD,EAAS;AAC1C,QAAIH,SAAS,CAACG,GAAD,CAAb,EAAoB;AAClBH,MAAAA,SAAS,CAACG,GAAD,CAAT,GAAiBL,aAAa,CAACK,GAAD,CAAb,CAAmBJ,MAAM,CAACI,GAAD,CAAzB,CAAjB;AACD;AACF,GAJD;AAKA,SAAOH,SAAP;AACD;;AAED,SAASI,mBAAT,CAA6BL,MAA7B,EAAqC;AACnC,MAAMD,aAAa,GAAG;AACpBpB,IAAAA,UAAU,EAAED;AADQ,GAAtB;AAGA,SAAOoB,OAAO,CAACC,aAAD,EAAgBC,MAAhB,CAAd;AACD;;AAED,IAAMM,QAAQ,GAAG;AACfC,EAAAA,IAAI,EAAEF,mBADS;AAEfG,EAAAA,QAAQ,EAAEH;AAFK,CAAjB;;AAKAI,MAAM,CAACC,OAAP,CAAeC,YAAf,GAA8B,UAAAX,MAAM;AAAA,SAAKM,QAAQ,CAACN,MAAM,CAACY,IAAR,CAAR,GAAwBN,QAAQ,CAACN,MAAM,CAACY,IAAR,CAAR,CAAsBZ,MAAtB,CAAxB,GAAwDA,MAA7D;AAAA,CAApC","sourcesContent":["function maxFileSizeUnitTransform(maxLogSize) {\n  if (typeof maxLogSize === 'number' && Number.isInteger(maxLogSize)) {\n    return maxLogSize;\n  }\n\n  const units = {\n    K: 1024,\n    M: 1024 * 1024,\n    G: 1024 * 1024 * 1024,\n  };\n  const validUnit = Object.keys(units);\n  const unit = maxLogSize.substr(maxLogSize.length - 1).toLocaleUpperCase();\n  const value = maxLogSize.substring(0, maxLogSize.length - 1).trim();\n\n  if (validUnit.indexOf(unit) < 0 || !Number.isInteger(Number(value))) {\n    throw Error(`maxLogSize: \"${maxLogSize}\" is invalid`);\n  } else {\n    return value * units[unit];\n  }\n}\n\nfunction adapter(configAdapter, config) {\n  const newConfig = Object.assign({}, config);\n  Object.keys(configAdapter).forEach((key) => {\n    if (newConfig[key]) {\n      newConfig[key] = configAdapter[key](config[key]);\n    }\n  });\n  return newConfig;\n}\n\nfunction fileAppenderAdapter(config) {\n  const configAdapter = {\n    maxLogSize: maxFileSizeUnitTransform\n  };\n  return adapter(configAdapter, config);\n}\n\nconst adapters = {\n  file: fileAppenderAdapter,\n  fileSync: fileAppenderAdapter\n};\n\nmodule.exports.modifyConfig = config => (adapters[config.type] ? adapters[config.type](config) : config);\n"]},"metadata":{},"sourceType":"script"}