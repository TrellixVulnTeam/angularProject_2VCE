{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nvar _classCallCheck = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _assertThisInitialized = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/assertThisInitialized\");\n\nvar _inherits = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar WebpackError = require(\"./WebpackError\");\n/** @typedef {import(\"./Module\")} Module */\n\n\nvar ModuleParseError = /*#__PURE__*/function (_WebpackError) {\n  _inherits(ModuleParseError, _WebpackError);\n\n  var _super = _createSuper(ModuleParseError);\n\n  /**\n   * @param {Module} module the errored module\n   * @param {string} source source code\n   * @param {Error&any} err the parse error\n   * @param {string[]} loaders the loaders used\n   */\n  function ModuleParseError(module, source, err, loaders) {\n    var _this;\n\n    _classCallCheck(this, ModuleParseError);\n\n    var message = \"Module parse failed: \" + err.message;\n    var loc = undefined;\n\n    if (loaders.length >= 1) {\n      message += \"\\nFile was processed with these loaders:\".concat(loaders.map(function (loader) {\n        return \"\\n * \".concat(loader);\n      }).join(\"\"));\n      message += \"\\nYou may need an additional loader to handle the result of these loaders.\";\n    } else {\n      message += \"\\nYou may need an appropriate loader to handle this file type, currently no loaders are configured to process this file. See https://webpack.js.org/concepts#loaders\";\n    }\n\n    if (err.loc && typeof err.loc === \"object\" && typeof err.loc.line === \"number\") {\n      var lineNumber = err.loc.line;\n\n      if (/[\\0\\u0001\\u0002\\u0003\\u0004\\u0005\\u0006\\u0007]/.test(source)) {\n        // binary file\n        message += \"\\n(Source code omitted for this binary file)\";\n      } else {\n        var sourceLines = source.split(/\\r?\\n/);\n        var start = Math.max(0, lineNumber - 3);\n        var linesBefore = sourceLines.slice(start, lineNumber - 1);\n        var theLine = sourceLines[lineNumber - 1];\n        var linesAfter = sourceLines.slice(lineNumber, lineNumber + 2);\n        message += linesBefore.map(function (l) {\n          return \"\\n| \".concat(l);\n        }).join(\"\") + \"\\n> \".concat(theLine) + linesAfter.map(function (l) {\n          return \"\\n| \".concat(l);\n        }).join(\"\");\n      }\n\n      loc = err.loc;\n    } else {\n      message += \"\\n\" + err.stack;\n    }\n\n    _this = _super.call(this, message);\n    _this.name = \"ModuleParseError\";\n    _this.module = module;\n    _this.loc = loc;\n    _this.error = err;\n    Error.captureStackTrace(_assertThisInitialized(_this), _this.constructor);\n    return _this;\n  }\n\n  return ModuleParseError;\n}(WebpackError);\n\nmodule.exports = ModuleParseError;","map":{"version":3,"sources":["/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/webpack/lib/ModuleParseError.js"],"names":["WebpackError","require","ModuleParseError","module","source","err","loaders","message","loc","undefined","length","map","loader","join","line","lineNumber","test","sourceLines","split","start","Math","max","linesBefore","slice","theLine","linesAfter","l","stack","name","error","Error","captureStackTrace","constructor","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;;;;;;;;;AAEA,IAAMA,YAAY,GAAGC,OAAO,CAAC,gBAAD,CAA5B;AAEA;;;IAEMC,gB;;;;;AACL;AACD;AACA;AACA;AACA;AACA;AACC,4BAAYC,MAAZ,EAAoBC,MAApB,EAA4BC,GAA5B,EAAiCC,OAAjC,EAA0C;AAAA;;AAAA;;AACzC,QAAIC,OAAO,GAAG,0BAA0BF,GAAG,CAACE,OAA5C;AACA,QAAIC,GAAG,GAAGC,SAAV;;AACA,QAAIH,OAAO,CAACI,MAAR,IAAkB,CAAtB,EAAyB;AACxBH,MAAAA,OAAO,sDAA+CD,OAAO,CAC3DK,GADoD,CAChD,UAAAC,MAAM;AAAA,8BAAYA,MAAZ;AAAA,OAD0C,EAEpDC,IAFoD,CAE/C,EAF+C,CAA/C,CAAP;AAGAN,MAAAA,OAAO,IACN,4EADD;AAEA,KAND,MAMO;AACNA,MAAAA,OAAO,IACN,sKADD;AAEA;;AACD,QACCF,GAAG,CAACG,GAAJ,IACA,OAAOH,GAAG,CAACG,GAAX,KAAmB,QADnB,IAEA,OAAOH,GAAG,CAACG,GAAJ,CAAQM,IAAf,KAAwB,QAHzB,EAIE;AACD,UAAIC,UAAU,GAAGV,GAAG,CAACG,GAAJ,CAAQM,IAAzB;;AACA,UAAI,iDAAiDE,IAAjD,CAAsDZ,MAAtD,CAAJ,EAAmE;AAClE;AACAG,QAAAA,OAAO,IAAI,8CAAX;AACA,OAHD,MAGO;AACN,YAAMU,WAAW,GAAGb,MAAM,CAACc,KAAP,CAAa,OAAb,CAApB;AACA,YAAMC,KAAK,GAAGC,IAAI,CAACC,GAAL,CAAS,CAAT,EAAYN,UAAU,GAAG,CAAzB,CAAd;AACA,YAAMO,WAAW,GAAGL,WAAW,CAACM,KAAZ,CAAkBJ,KAAlB,EAAyBJ,UAAU,GAAG,CAAtC,CAApB;AACA,YAAMS,OAAO,GAAGP,WAAW,CAACF,UAAU,GAAG,CAAd,CAA3B;AACA,YAAMU,UAAU,GAAGR,WAAW,CAACM,KAAZ,CAAkBR,UAAlB,EAA8BA,UAAU,GAAG,CAA3C,CAAnB;AACAR,QAAAA,OAAO,IACNe,WAAW,CAACX,GAAZ,CAAgB,UAAAe,CAAC;AAAA,+BAAWA,CAAX;AAAA,SAAjB,EAAiCb,IAAjC,CAAsC,EAAtC,kBACOW,OADP,IAEAC,UAAU,CAACd,GAAX,CAAe,UAAAe,CAAC;AAAA,+BAAWA,CAAX;AAAA,SAAhB,EAAgCb,IAAhC,CAAqC,EAArC,CAHD;AAIA;;AACDL,MAAAA,GAAG,GAAGH,GAAG,CAACG,GAAV;AACA,KArBD,MAqBO;AACND,MAAAA,OAAO,IAAI,OAAOF,GAAG,CAACsB,KAAtB;AACA;;AAED,8BAAMpB,OAAN;AAEA,UAAKqB,IAAL,GAAY,kBAAZ;AACA,UAAKzB,MAAL,GAAcA,MAAd;AACA,UAAKK,GAAL,GAAWA,GAAX;AACA,UAAKqB,KAAL,GAAaxB,GAAb;AAEAyB,IAAAA,KAAK,CAACC,iBAAN,gCAA8B,MAAKC,WAAnC;AA7CyC;AA8CzC;;;EArD6BhC,Y;;AAwD/BG,MAAM,CAAC8B,OAAP,GAAiB/B,gBAAjB","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst WebpackError = require(\"./WebpackError\");\n\n/** @typedef {import(\"./Module\")} Module */\n\nclass ModuleParseError extends WebpackError {\n\t/**\n\t * @param {Module} module the errored module\n\t * @param {string} source source code\n\t * @param {Error&any} err the parse error\n\t * @param {string[]} loaders the loaders used\n\t */\n\tconstructor(module, source, err, loaders) {\n\t\tlet message = \"Module parse failed: \" + err.message;\n\t\tlet loc = undefined;\n\t\tif (loaders.length >= 1) {\n\t\t\tmessage += `\\nFile was processed with these loaders:${loaders\n\t\t\t\t.map(loader => `\\n * ${loader}`)\n\t\t\t\t.join(\"\")}`;\n\t\t\tmessage +=\n\t\t\t\t\"\\nYou may need an additional loader to handle the result of these loaders.\";\n\t\t} else {\n\t\t\tmessage +=\n\t\t\t\t\"\\nYou may need an appropriate loader to handle this file type, currently no loaders are configured to process this file. See https://webpack.js.org/concepts#loaders\";\n\t\t}\n\t\tif (\n\t\t\terr.loc &&\n\t\t\ttypeof err.loc === \"object\" &&\n\t\t\ttypeof err.loc.line === \"number\"\n\t\t) {\n\t\t\tvar lineNumber = err.loc.line;\n\t\t\tif (/[\\0\\u0001\\u0002\\u0003\\u0004\\u0005\\u0006\\u0007]/.test(source)) {\n\t\t\t\t// binary file\n\t\t\t\tmessage += \"\\n(Source code omitted for this binary file)\";\n\t\t\t} else {\n\t\t\t\tconst sourceLines = source.split(/\\r?\\n/);\n\t\t\t\tconst start = Math.max(0, lineNumber - 3);\n\t\t\t\tconst linesBefore = sourceLines.slice(start, lineNumber - 1);\n\t\t\t\tconst theLine = sourceLines[lineNumber - 1];\n\t\t\t\tconst linesAfter = sourceLines.slice(lineNumber, lineNumber + 2);\n\t\t\t\tmessage +=\n\t\t\t\t\tlinesBefore.map(l => `\\n| ${l}`).join(\"\") +\n\t\t\t\t\t`\\n> ${theLine}` +\n\t\t\t\t\tlinesAfter.map(l => `\\n| ${l}`).join(\"\");\n\t\t\t}\n\t\t\tloc = err.loc;\n\t\t} else {\n\t\t\tmessage += \"\\n\" + err.stack;\n\t\t}\n\n\t\tsuper(message);\n\n\t\tthis.name = \"ModuleParseError\";\n\t\tthis.module = module;\n\t\tthis.loc = loc;\n\t\tthis.error = err;\n\n\t\tError.captureStackTrace(this, this.constructor);\n\t}\n}\n\nmodule.exports = ModuleParseError;\n"]},"metadata":{},"sourceType":"script"}