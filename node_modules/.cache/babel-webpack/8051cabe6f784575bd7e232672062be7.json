{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nvar _classCallCheck = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/createClass\");\n\nvar Semaphore = /*#__PURE__*/function () {\n  /**\n   * Creates an instance of Semaphore.\n   *\n   * @param {number} available the amount available number of \"tasks\"\n   * in the Semaphore\n   */\n  function Semaphore(available) {\n    _classCallCheck(this, Semaphore);\n\n    this.available = available;\n    /** @type {(function(): void)[]} */\n\n    this.waiters = [];\n    /** @private */\n\n    this._continue = this._continue.bind(this);\n  }\n  /**\n   * @param {function(): void} callback function block to capture and run\n   * @returns {void}\n   */\n\n\n  _createClass(Semaphore, [{\n    key: \"acquire\",\n    value: function acquire(callback) {\n      if (this.available > 0) {\n        this.available--;\n        callback();\n      } else {\n        this.waiters.push(callback);\n      }\n    }\n  }, {\n    key: \"release\",\n    value: function release() {\n      this.available++;\n\n      if (this.waiters.length > 0) {\n        process.nextTick(this._continue);\n      }\n    }\n  }, {\n    key: \"_continue\",\n    value: function _continue() {\n      if (this.available > 0) {\n        if (this.waiters.length > 0) {\n          this.available--;\n          var callback = this.waiters.pop();\n          callback();\n        }\n      }\n    }\n  }]);\n\n  return Semaphore;\n}();\n\nmodule.exports = Semaphore;","map":{"version":3,"sources":["/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/webpack/lib/util/Semaphore.js"],"names":["Semaphore","available","waiters","_continue","bind","callback","push","length","process","nextTick","pop","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;;;;;IAEMA,S;AACL;AACD;AACA;AACA;AACA;AACA;AACC,qBAAYC,SAAZ,EAAuB;AAAA;;AACtB,SAAKA,SAAL,GAAiBA,SAAjB;AACA;;AACA,SAAKC,OAAL,GAAe,EAAf;AACA;;AACA,SAAKC,SAAL,GAAiB,KAAKA,SAAL,CAAeC,IAAf,CAAoB,IAApB,CAAjB;AACA;AAED;AACD;AACA;AACA;;;;;WACC,iBAAQC,QAAR,EAAkB;AACjB,UAAI,KAAKJ,SAAL,GAAiB,CAArB,EAAwB;AACvB,aAAKA,SAAL;AACAI,QAAAA,QAAQ;AACR,OAHD,MAGO;AACN,aAAKH,OAAL,CAAaI,IAAb,CAAkBD,QAAlB;AACA;AACD;;;WAED,mBAAU;AACT,WAAKJ,SAAL;;AACA,UAAI,KAAKC,OAAL,CAAaK,MAAb,GAAsB,CAA1B,EAA6B;AAC5BC,QAAAA,OAAO,CAACC,QAAR,CAAiB,KAAKN,SAAtB;AACA;AACD;;;WAED,qBAAY;AACX,UAAI,KAAKF,SAAL,GAAiB,CAArB,EAAwB;AACvB,YAAI,KAAKC,OAAL,CAAaK,MAAb,GAAsB,CAA1B,EAA6B;AAC5B,eAAKN,SAAL;AACA,cAAMI,QAAQ,GAAG,KAAKH,OAAL,CAAaQ,GAAb,EAAjB;AACAL,UAAAA,QAAQ;AACR;AACD;AACD;;;;;;AAGFM,MAAM,CAACC,OAAP,GAAiBZ,SAAjB","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nclass Semaphore {\n\t/**\n\t * Creates an instance of Semaphore.\n\t *\n\t * @param {number} available the amount available number of \"tasks\"\n\t * in the Semaphore\n\t */\n\tconstructor(available) {\n\t\tthis.available = available;\n\t\t/** @type {(function(): void)[]} */\n\t\tthis.waiters = [];\n\t\t/** @private */\n\t\tthis._continue = this._continue.bind(this);\n\t}\n\n\t/**\n\t * @param {function(): void} callback function block to capture and run\n\t * @returns {void}\n\t */\n\tacquire(callback) {\n\t\tif (this.available > 0) {\n\t\t\tthis.available--;\n\t\t\tcallback();\n\t\t} else {\n\t\t\tthis.waiters.push(callback);\n\t\t}\n\t}\n\n\trelease() {\n\t\tthis.available++;\n\t\tif (this.waiters.length > 0) {\n\t\t\tprocess.nextTick(this._continue);\n\t\t}\n\t}\n\n\t_continue() {\n\t\tif (this.available > 0) {\n\t\t\tif (this.waiters.length > 0) {\n\t\t\t\tthis.available--;\n\t\t\t\tconst callback = this.waiters.pop();\n\t\t\t\tcallback();\n\t\t\t}\n\t\t}\n\t}\n}\n\nmodule.exports = Semaphore;\n"]},"metadata":{},"sourceType":"script"}