{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n\t*/\n\"use strict\";\n\nvar _createForOfIteratorHelper = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _classCallCheck = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/createClass\");\n\nvar UnsupportedWebAssemblyFeatureError = require(\"./UnsupportedWebAssemblyFeatureError\");\n\nvar WasmFinalizeExportsPlugin = /*#__PURE__*/function () {\n  function WasmFinalizeExportsPlugin() {\n    _classCallCheck(this, WasmFinalizeExportsPlugin);\n  }\n\n  _createClass(WasmFinalizeExportsPlugin, [{\n    key: \"apply\",\n    value: function apply(compiler) {\n      compiler.hooks.compilation.tap(\"WasmFinalizeExportsPlugin\", function (compilation) {\n        compilation.hooks.finishModules.tap(\"WasmFinalizeExportsPlugin\", function (modules) {\n          var _iterator = _createForOfIteratorHelper(modules),\n              _step;\n\n          try {\n            var _loop = function _loop() {\n              var module = _step.value;\n\n              // 1. if a WebAssembly module\n              if (module.type.startsWith(\"webassembly\") === true) {\n                var _ret2 = function () {\n                  var jsIncompatibleExports = module.buildMeta.jsIncompatibleExports;\n\n                  if (jsIncompatibleExports === undefined) {\n                    return {\n                      v: \"continue\"\n                    };\n                  }\n\n                  var _iterator2 = _createForOfIteratorHelper(module.reasons),\n                      _step2;\n\n                  try {\n                    var _loop2 = function _loop2() {\n                      var reason = _step2.value;\n\n                      // 2. is referenced by a non-WebAssembly module\n                      if (reason.module.type.startsWith(\"webassembly\") === false) {\n                        var ref = compilation.getDependencyReference(reason.module, reason.dependency);\n                        if (!ref) return \"continue\";\n                        var importedNames = ref.importedNames;\n\n                        if (Array.isArray(importedNames)) {\n                          importedNames.forEach(function (name) {\n                            // 3. and uses a func with an incompatible JS signature\n                            if (Object.prototype.hasOwnProperty.call(jsIncompatibleExports, name)) {\n                              // 4. error\n\n                              /** @type {any} */\n                              var error = new UnsupportedWebAssemblyFeatureError(\"Export \\\"\".concat(name, \"\\\" with \").concat(jsIncompatibleExports[name], \" can only be used for direct wasm to wasm dependencies\"));\n                              error.module = module;\n                              error.origin = reason.module;\n                              error.originLoc = reason.dependency.loc;\n                              error.dependencies = [reason.dependency];\n                              compilation.errors.push(error);\n                            }\n                          });\n                        }\n                      }\n                    };\n\n                    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n                      var _ret3 = _loop2();\n\n                      if (_ret3 === \"continue\") continue;\n                    }\n                  } catch (err) {\n                    _iterator2.e(err);\n                  } finally {\n                    _iterator2.f();\n                  }\n                }();\n\n                if (typeof _ret2 === \"object\") return _ret2.v;\n              }\n            };\n\n            for (_iterator.s(); !(_step = _iterator.n()).done;) {\n              var _ret = _loop();\n\n              if (_ret === \"continue\") continue;\n            }\n          } catch (err) {\n            _iterator.e(err);\n          } finally {\n            _iterator.f();\n          }\n        });\n      });\n    }\n  }]);\n\n  return WasmFinalizeExportsPlugin;\n}();\n\nmodule.exports = WasmFinalizeExportsPlugin;","map":{"version":3,"sources":["/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/webpack/lib/wasm/WasmFinalizeExportsPlugin.js"],"names":["UnsupportedWebAssemblyFeatureError","require","WasmFinalizeExportsPlugin","compiler","hooks","compilation","tap","finishModules","modules","module","type","startsWith","jsIncompatibleExports","buildMeta","undefined","reasons","reason","ref","getDependencyReference","dependency","importedNames","Array","isArray","forEach","name","Object","prototype","hasOwnProperty","call","error","origin","originLoc","loc","dependencies","errors","push","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;;;;;;;AAEA,IAAMA,kCAAkC,GAAGC,OAAO,CAAC,sCAAD,CAAlD;;IAEMC,yB;;;;;;;WACL,eAAMC,QAAN,EAAgB;AACfA,MAAAA,QAAQ,CAACC,KAAT,CAAeC,WAAf,CAA2BC,GAA3B,CAA+B,2BAA/B,EAA4D,UAAAD,WAAW,EAAI;AAC1EA,QAAAA,WAAW,CAACD,KAAZ,CAAkBG,aAAlB,CAAgCD,GAAhC,CACC,2BADD,EAEC,UAAAE,OAAO,EAAI;AAAA,qDACWA,OADX;AAAA;;AAAA;AAAA;AAAA,kBACCC,MADD;;AAET;AACA,kBAAIA,MAAM,CAACC,IAAP,CAAYC,UAAZ,CAAuB,aAAvB,MAA0C,IAA9C,EAAoD;AAAA;AACnD,sBAAMC,qBAAqB,GAC1BH,MAAM,CAACI,SAAP,CAAiBD,qBADlB;;AAGA,sBAAIA,qBAAqB,KAAKE,SAA9B,EAAyC;AACxC;AAAA;AAAA;AACA;;AANkD,8DAQ9BL,MAAM,CAACM,OARuB;AAAA;;AAAA;AAAA;AAAA,0BAQxCC,MARwC;;AASlD;AACA,0BAAIA,MAAM,CAACP,MAAP,CAAcC,IAAd,CAAmBC,UAAnB,CAA8B,aAA9B,MAAiD,KAArD,EAA4D;AAC3D,4BAAMM,GAAG,GAAGZ,WAAW,CAACa,sBAAZ,CACXF,MAAM,CAACP,MADI,EAEXO,MAAM,CAACG,UAFI,CAAZ;AAKA,4BAAI,CAACF,GAAL,EAAU;AAEV,4BAAMG,aAAa,GAAGH,GAAG,CAACG,aAA1B;;AAEA,4BAAIC,KAAK,CAACC,OAAN,CAAcF,aAAd,CAAJ,EAAkC;AACjCA,0BAAAA,aAAa,CAACG,OAAd,CAAsB,UAAAC,IAAI,EAAI;AAC7B;AACA,gCACCC,MAAM,CAACC,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CACChB,qBADD,EAECY,IAFD,CADD,EAKE;AACD;;AACA;AACA,kCAAMK,KAAK,GAAG,IAAI7B,kCAAJ,oBACFwB,IADE,qBACYZ,qBAAqB,CAACY,IAAD,CADjC,4DAAd;AAGAK,8BAAAA,KAAK,CAACpB,MAAN,GAAeA,MAAf;AACAoB,8BAAAA,KAAK,CAACC,MAAN,GAAed,MAAM,CAACP,MAAtB;AACAoB,8BAAAA,KAAK,CAACE,SAAN,GAAkBf,MAAM,CAACG,UAAP,CAAkBa,GAApC;AACAH,8BAAAA,KAAK,CAACI,YAAN,GAAqB,CAACjB,MAAM,CAACG,UAAR,CAArB;AACAd,8BAAAA,WAAW,CAAC6B,MAAZ,CAAmBC,IAAnB,CAAwBN,KAAxB;AACA;AACD,2BAnBD;AAoBA;AACD;AA1CiD;;AAQnD,2EAAqC;AAAA;;AAAA,gDAQzB;AA2BX;AA3CkD;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AA4CnD;AA/CQ;;AACV,gEAA8B;AAAA;;AAAA,uCAO3B;AAwCF;AAhDS;AAAA;AAAA;AAAA;AAAA;AAiDV,SAnDF;AAqDA,OAtDD;AAuDA;;;;;;AAGFpB,MAAM,CAAC2B,OAAP,GAAiBlC,yBAAjB","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n\t*/\n\"use strict\";\n\nconst UnsupportedWebAssemblyFeatureError = require(\"./UnsupportedWebAssemblyFeatureError\");\n\nclass WasmFinalizeExportsPlugin {\n\tapply(compiler) {\n\t\tcompiler.hooks.compilation.tap(\"WasmFinalizeExportsPlugin\", compilation => {\n\t\t\tcompilation.hooks.finishModules.tap(\n\t\t\t\t\"WasmFinalizeExportsPlugin\",\n\t\t\t\tmodules => {\n\t\t\t\t\tfor (const module of modules) {\n\t\t\t\t\t\t// 1. if a WebAssembly module\n\t\t\t\t\t\tif (module.type.startsWith(\"webassembly\") === true) {\n\t\t\t\t\t\t\tconst jsIncompatibleExports =\n\t\t\t\t\t\t\t\tmodule.buildMeta.jsIncompatibleExports;\n\n\t\t\t\t\t\t\tif (jsIncompatibleExports === undefined) {\n\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tfor (const reason of module.reasons) {\n\t\t\t\t\t\t\t\t// 2. is referenced by a non-WebAssembly module\n\t\t\t\t\t\t\t\tif (reason.module.type.startsWith(\"webassembly\") === false) {\n\t\t\t\t\t\t\t\t\tconst ref = compilation.getDependencyReference(\n\t\t\t\t\t\t\t\t\t\treason.module,\n\t\t\t\t\t\t\t\t\t\treason.dependency\n\t\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t\t\tif (!ref) continue;\n\n\t\t\t\t\t\t\t\t\tconst importedNames = ref.importedNames;\n\n\t\t\t\t\t\t\t\t\tif (Array.isArray(importedNames)) {\n\t\t\t\t\t\t\t\t\t\timportedNames.forEach(name => {\n\t\t\t\t\t\t\t\t\t\t\t// 3. and uses a func with an incompatible JS signature\n\t\t\t\t\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t\t\t\t\tObject.prototype.hasOwnProperty.call(\n\t\t\t\t\t\t\t\t\t\t\t\t\tjsIncompatibleExports,\n\t\t\t\t\t\t\t\t\t\t\t\t\tname\n\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\t\t\t\t\t// 4. error\n\t\t\t\t\t\t\t\t\t\t\t\t/** @type {any} */\n\t\t\t\t\t\t\t\t\t\t\t\tconst error = new UnsupportedWebAssemblyFeatureError(\n\t\t\t\t\t\t\t\t\t\t\t\t\t`Export \"${name}\" with ${jsIncompatibleExports[name]} can only be used for direct wasm to wasm dependencies`\n\t\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t\t\terror.module = module;\n\t\t\t\t\t\t\t\t\t\t\t\terror.origin = reason.module;\n\t\t\t\t\t\t\t\t\t\t\t\terror.originLoc = reason.dependency.loc;\n\t\t\t\t\t\t\t\t\t\t\t\terror.dependencies = [reason.dependency];\n\t\t\t\t\t\t\t\t\t\t\t\tcompilation.errors.push(error);\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t);\n\t\t});\n\t}\n}\n\nmodule.exports = WasmFinalizeExportsPlugin;\n"]},"metadata":{},"sourceType":"script"}