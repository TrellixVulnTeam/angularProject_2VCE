{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nvar _createForOfIteratorHelper = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _classCallCheck = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _require = require(\"webpack-sources\"),\n    RawSource = _require.RawSource,\n    ReplaceSource = _require.ReplaceSource; // TODO: clean up this file\n// replace with newer constructs\n// TODO: remove DependencyVariables and replace them with something better\n\n\nvar JavascriptGenerator = /*#__PURE__*/function () {\n  function JavascriptGenerator() {\n    _classCallCheck(this, JavascriptGenerator);\n  }\n\n  _createClass(JavascriptGenerator, [{\n    key: \"generate\",\n    value: function generate(module, dependencyTemplates, runtimeTemplate) {\n      var originalSource = module.originalSource();\n\n      if (!originalSource) {\n        return new RawSource(\"throw new Error('No source available');\");\n      }\n\n      var source = new ReplaceSource(originalSource);\n      this.sourceBlock(module, module, [], dependencyTemplates, source, runtimeTemplate);\n      return source;\n    }\n  }, {\n    key: \"sourceBlock\",\n    value: function sourceBlock(module, block, availableVars, dependencyTemplates, source, runtimeTemplate) {\n      var _this = this;\n\n      var _iterator = _createForOfIteratorHelper(block.dependencies),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var dependency = _step.value;\n          this.sourceDependency(dependency, dependencyTemplates, source, runtimeTemplate);\n        }\n        /**\n         * Get the variables of all blocks that we need to inject.\n         * These will contain the variable name and its expression.\n         * The name will be added as a parameter in a IIFE the expression as its value.\n         */\n\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      var vars = block.variables.reduce(function (result, value) {\n        var variable = _this.sourceVariables(value, availableVars, dependencyTemplates, runtimeTemplate);\n\n        if (variable) {\n          result.push(variable);\n        }\n\n        return result;\n      }, []);\n      /**\n       * if we actually have variables\n       * this is important as how #splitVariablesInUniqueNamedChunks works\n       * it will always return an array in an array which would lead to a IIFE wrapper around\n       * a module if we do this with an empty vars array.\n       */\n\n      if (vars.length > 0) {\n        /**\n         * Split all variables up into chunks of unique names.\n         * e.g. imagine you have the following variable names that need to be injected:\n         * [foo, bar, baz, foo, some, more]\n         * we can not inject \"foo\" twice, therefore we just make two IIFEs like so:\n         * (function(foo, bar, baz){\n         *   (function(foo, some, more){\n         *     …\n         *   }(…));\n         * }(…));\n         *\n         * \"splitVariablesInUniqueNamedChunks\" splits the variables shown above up to this:\n         * [[foo, bar, baz], [foo, some, more]]\n         */\n        var injectionVariableChunks = this.splitVariablesInUniqueNamedChunks(vars); // create all the beginnings of IIFEs\n\n        var functionWrapperStarts = injectionVariableChunks.map(function (variableChunk) {\n          return _this.variableInjectionFunctionWrapperStartCode(variableChunk.map(function (variable) {\n            return variable.name;\n          }));\n        }); // and all the ends\n\n        var functionWrapperEnds = injectionVariableChunks.map(function (variableChunk) {\n          return _this.variableInjectionFunctionWrapperEndCode(module, variableChunk.map(function (variable) {\n            return variable.expression;\n          }), block);\n        }); // join them to one big string\n\n        var varStartCode = functionWrapperStarts.join(\"\"); // reverse the ends first before joining them, as the last added must be the inner most\n\n        var varEndCode = functionWrapperEnds.reverse().join(\"\"); // if we have anything, add it to the source\n\n        if (varStartCode && varEndCode) {\n          var start = block.range ? block.range[0] : -10;\n          var end = block.range ? block.range[1] : module.originalSource().size() + 1;\n          source.insert(start + 0.5, varStartCode);\n          source.insert(end + 0.5, \"\\n/* WEBPACK VAR INJECTION */\" + varEndCode);\n        }\n      }\n\n      var _iterator2 = _createForOfIteratorHelper(block.blocks),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var childBlock = _step2.value;\n          this.sourceBlock(module, childBlock, availableVars.concat(vars), dependencyTemplates, source, runtimeTemplate);\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n    }\n  }, {\n    key: \"sourceDependency\",\n    value: function sourceDependency(dependency, dependencyTemplates, source, runtimeTemplate) {\n      var template = dependencyTemplates.get(dependency.constructor);\n\n      if (!template) {\n        throw new Error(\"No template for dependency: \" + dependency.constructor.name);\n      }\n\n      template.apply(dependency, source, runtimeTemplate, dependencyTemplates);\n    }\n  }, {\n    key: \"sourceVariables\",\n    value: function sourceVariables(variable, availableVars, dependencyTemplates, runtimeTemplate) {\n      var name = variable.name;\n      var expr = variable.expressionSource(dependencyTemplates, runtimeTemplate);\n\n      if (availableVars.some(function (v) {\n        return v.name === name && v.expression.source() === expr.source();\n      })) {\n        return;\n      }\n\n      return {\n        name: name,\n        expression: expr\n      };\n    }\n    /*\n     * creates the start part of a IIFE around the module to inject a variable name\n     * (function(…){   <- this part\n     * }.call(…))\n     */\n\n  }, {\n    key: \"variableInjectionFunctionWrapperStartCode\",\n    value: function variableInjectionFunctionWrapperStartCode(varNames) {\n      var args = varNames.join(\", \");\n      return \"/* WEBPACK VAR INJECTION */(function(\".concat(args, \") {\");\n    }\n  }, {\n    key: \"contextArgument\",\n    value: function contextArgument(module, block) {\n      if (this === block) {\n        return module.exportsArgument;\n      }\n\n      return \"this\";\n    }\n    /*\n     * creates the end part of a IIFE around the module to inject a variable name\n     * (function(…){\n     * }.call(…))   <- this part\n     */\n\n  }, {\n    key: \"variableInjectionFunctionWrapperEndCode\",\n    value: function variableInjectionFunctionWrapperEndCode(module, varExpressions, block) {\n      var firstParam = this.contextArgument(module, block);\n      var furtherParams = varExpressions.map(function (e) {\n        return e.source();\n      }).join(\", \");\n      return \"}.call(\".concat(firstParam, \", \").concat(furtherParams, \"))\");\n    }\n  }, {\n    key: \"splitVariablesInUniqueNamedChunks\",\n    value: function splitVariablesInUniqueNamedChunks(vars) {\n      var startState = [[]];\n      return vars.reduce(function (chunks, variable) {\n        var current = chunks[chunks.length - 1]; // check if variable with same name exists already\n        // if so create a new chunk of variables.\n\n        var variableNameAlreadyExists = current.some(function (v) {\n          return v.name === variable.name;\n        });\n\n        if (variableNameAlreadyExists) {\n          // start new chunk with current variable\n          chunks.push([variable]);\n        } else {\n          // else add it to current chunk\n          current.push(variable);\n        }\n\n        return chunks;\n      }, startState);\n    }\n  }]);\n\n  return JavascriptGenerator;\n}();\n\nmodule.exports = JavascriptGenerator;","map":{"version":3,"sources":["/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/webpack/lib/JavascriptGenerator.js"],"names":["require","RawSource","ReplaceSource","JavascriptGenerator","module","dependencyTemplates","runtimeTemplate","originalSource","source","sourceBlock","block","availableVars","dependencies","dependency","sourceDependency","vars","variables","reduce","result","value","variable","sourceVariables","push","length","injectionVariableChunks","splitVariablesInUniqueNamedChunks","functionWrapperStarts","map","variableChunk","variableInjectionFunctionWrapperStartCode","name","functionWrapperEnds","variableInjectionFunctionWrapperEndCode","expression","varStartCode","join","varEndCode","reverse","start","range","end","size","insert","blocks","childBlock","concat","template","get","constructor","Error","apply","expr","expressionSource","some","v","varNames","args","exportsArgument","varExpressions","firstParam","contextArgument","furtherParams","e","startState","chunks","current","variableNameAlreadyExists","exports"],"mappings":"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","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst { RawSource, ReplaceSource } = require(\"webpack-sources\");\n\n// TODO: clean up this file\n// replace with newer constructs\n\n// TODO: remove DependencyVariables and replace them with something better\n\nclass JavascriptGenerator {\n\tgenerate(module, dependencyTemplates, runtimeTemplate) {\n\t\tconst originalSource = module.originalSource();\n\t\tif (!originalSource) {\n\t\t\treturn new RawSource(\"throw new Error('No source available');\");\n\t\t}\n\n\t\tconst source = new ReplaceSource(originalSource);\n\n\t\tthis.sourceBlock(\n\t\t\tmodule,\n\t\t\tmodule,\n\t\t\t[],\n\t\t\tdependencyTemplates,\n\t\t\tsource,\n\t\t\truntimeTemplate\n\t\t);\n\n\t\treturn source;\n\t}\n\n\tsourceBlock(\n\t\tmodule,\n\t\tblock,\n\t\tavailableVars,\n\t\tdependencyTemplates,\n\t\tsource,\n\t\truntimeTemplate\n\t) {\n\t\tfor (const dependency of block.dependencies) {\n\t\t\tthis.sourceDependency(\n\t\t\t\tdependency,\n\t\t\t\tdependencyTemplates,\n\t\t\t\tsource,\n\t\t\t\truntimeTemplate\n\t\t\t);\n\t\t}\n\n\t\t/**\n\t\t * Get the variables of all blocks that we need to inject.\n\t\t * These will contain the variable name and its expression.\n\t\t * The name will be added as a parameter in a IIFE the expression as its value.\n\t\t */\n\t\tconst vars = block.variables.reduce((result, value) => {\n\t\t\tconst variable = this.sourceVariables(\n\t\t\t\tvalue,\n\t\t\t\tavailableVars,\n\t\t\t\tdependencyTemplates,\n\t\t\t\truntimeTemplate\n\t\t\t);\n\n\t\t\tif (variable) {\n\t\t\t\tresult.push(variable);\n\t\t\t}\n\n\t\t\treturn result;\n\t\t}, []);\n\n\t\t/**\n\t\t * if we actually have variables\n\t\t * this is important as how #splitVariablesInUniqueNamedChunks works\n\t\t * it will always return an array in an array which would lead to a IIFE wrapper around\n\t\t * a module if we do this with an empty vars array.\n\t\t */\n\t\tif (vars.length > 0) {\n\t\t\t/**\n\t\t\t * Split all variables up into chunks of unique names.\n\t\t\t * e.g. imagine you have the following variable names that need to be injected:\n\t\t\t * [foo, bar, baz, foo, some, more]\n\t\t\t * we can not inject \"foo\" twice, therefore we just make two IIFEs like so:\n\t\t\t * (function(foo, bar, baz){\n\t\t\t *   (function(foo, some, more){\n\t\t\t *     …\n\t\t\t *   }(…));\n\t\t\t * }(…));\n\t\t\t *\n\t\t\t * \"splitVariablesInUniqueNamedChunks\" splits the variables shown above up to this:\n\t\t\t * [[foo, bar, baz], [foo, some, more]]\n\t\t\t */\n\t\t\tconst injectionVariableChunks = this.splitVariablesInUniqueNamedChunks(\n\t\t\t\tvars\n\t\t\t);\n\n\t\t\t// create all the beginnings of IIFEs\n\t\t\tconst functionWrapperStarts = injectionVariableChunks.map(\n\t\t\t\tvariableChunk => {\n\t\t\t\t\treturn this.variableInjectionFunctionWrapperStartCode(\n\t\t\t\t\t\tvariableChunk.map(variable => variable.name)\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t);\n\n\t\t\t// and all the ends\n\t\t\tconst functionWrapperEnds = injectionVariableChunks.map(variableChunk => {\n\t\t\t\treturn this.variableInjectionFunctionWrapperEndCode(\n\t\t\t\t\tmodule,\n\t\t\t\t\tvariableChunk.map(variable => variable.expression),\n\t\t\t\t\tblock\n\t\t\t\t);\n\t\t\t});\n\n\t\t\t// join them to one big string\n\t\t\tconst varStartCode = functionWrapperStarts.join(\"\");\n\n\t\t\t// reverse the ends first before joining them, as the last added must be the inner most\n\t\t\tconst varEndCode = functionWrapperEnds.reverse().join(\"\");\n\n\t\t\t// if we have anything, add it to the source\n\t\t\tif (varStartCode && varEndCode) {\n\t\t\t\tconst start = block.range ? block.range[0] : -10;\n\t\t\t\tconst end = block.range\n\t\t\t\t\t? block.range[1]\n\t\t\t\t\t: module.originalSource().size() + 1;\n\t\t\t\tsource.insert(start + 0.5, varStartCode);\n\t\t\t\tsource.insert(end + 0.5, \"\\n/* WEBPACK VAR INJECTION */\" + varEndCode);\n\t\t\t}\n\t\t}\n\n\t\tfor (const childBlock of block.blocks) {\n\t\t\tthis.sourceBlock(\n\t\t\t\tmodule,\n\t\t\t\tchildBlock,\n\t\t\t\tavailableVars.concat(vars),\n\t\t\t\tdependencyTemplates,\n\t\t\t\tsource,\n\t\t\t\truntimeTemplate\n\t\t\t);\n\t\t}\n\t}\n\n\tsourceDependency(dependency, dependencyTemplates, source, runtimeTemplate) {\n\t\tconst template = dependencyTemplates.get(dependency.constructor);\n\t\tif (!template) {\n\t\t\tthrow new Error(\n\t\t\t\t\"No template for dependency: \" + dependency.constructor.name\n\t\t\t);\n\t\t}\n\t\ttemplate.apply(dependency, source, runtimeTemplate, dependencyTemplates);\n\t}\n\n\tsourceVariables(\n\t\tvariable,\n\t\tavailableVars,\n\t\tdependencyTemplates,\n\t\truntimeTemplate\n\t) {\n\t\tconst name = variable.name;\n\t\tconst expr = variable.expressionSource(\n\t\t\tdependencyTemplates,\n\t\t\truntimeTemplate\n\t\t);\n\n\t\tif (\n\t\t\tavailableVars.some(\n\t\t\t\tv => v.name === name && v.expression.source() === expr.source()\n\t\t\t)\n\t\t) {\n\t\t\treturn;\n\t\t}\n\t\treturn {\n\t\t\tname: name,\n\t\t\texpression: expr\n\t\t};\n\t}\n\n\t/*\n\t * creates the start part of a IIFE around the module to inject a variable name\n\t * (function(…){   <- this part\n\t * }.call(…))\n\t */\n\tvariableInjectionFunctionWrapperStartCode(varNames) {\n\t\tconst args = varNames.join(\", \");\n\t\treturn `/* WEBPACK VAR INJECTION */(function(${args}) {`;\n\t}\n\n\tcontextArgument(module, block) {\n\t\tif (this === block) {\n\t\t\treturn module.exportsArgument;\n\t\t}\n\t\treturn \"this\";\n\t}\n\n\t/*\n\t * creates the end part of a IIFE around the module to inject a variable name\n\t * (function(…){\n\t * }.call(…))   <- this part\n\t */\n\tvariableInjectionFunctionWrapperEndCode(module, varExpressions, block) {\n\t\tconst firstParam = this.contextArgument(module, block);\n\t\tconst furtherParams = varExpressions.map(e => e.source()).join(\", \");\n\t\treturn `}.call(${firstParam}, ${furtherParams}))`;\n\t}\n\n\tsplitVariablesInUniqueNamedChunks(vars) {\n\t\tconst startState = [[]];\n\t\treturn vars.reduce((chunks, variable) => {\n\t\t\tconst current = chunks[chunks.length - 1];\n\t\t\t// check if variable with same name exists already\n\t\t\t// if so create a new chunk of variables.\n\t\t\tconst variableNameAlreadyExists = current.some(\n\t\t\t\tv => v.name === variable.name\n\t\t\t);\n\n\t\t\tif (variableNameAlreadyExists) {\n\t\t\t\t// start new chunk with current variable\n\t\t\t\tchunks.push([variable]);\n\t\t\t} else {\n\t\t\t\t// else add it to current chunk\n\t\t\t\tcurrent.push(variable);\n\t\t\t}\n\t\t\treturn chunks;\n\t\t}, startState);\n\t}\n}\n\nmodule.exports = JavascriptGenerator;\n"]},"metadata":{},"sourceType":"script"}