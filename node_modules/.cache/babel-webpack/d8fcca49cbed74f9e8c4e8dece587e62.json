{"ast":null,"code":"var MS_IN_MINUTE = 60000;\nvar MS_IN_SECOND = 1000;\n\nvar chalk = require(\"chalk\");\n\nvar _require = require(\"./colours\"),\n    fg = _require.fg,\n    bg = _require.bg;\n\nvar _require2 = require(\"./utils\"),\n    groupBy = _require2.groupBy,\n    getAverages = _require2.getAverages,\n    getTotalActiveTime = _require2.getTotalActiveTime;\n\nvar humanTime = function humanTime(ms) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  if (options.verbose) {\n    return ms.toLocaleString() + \" ms\";\n  }\n\n  var minutes = Math.floor(ms / MS_IN_MINUTE);\n  var secondsRaw = (ms - minutes * MS_IN_MINUTE) / MS_IN_SECOND;\n  var secondsWhole = Math.floor(secondsRaw);\n  var remainderPrecision = secondsWhole > 0 ? 2 : 3;\n  var secondsRemainder = Math.min(secondsRaw - secondsWhole, 0.99);\n  var seconds = secondsWhole + secondsRemainder.toPrecision(remainderPrecision).replace(/^0/, \"\").replace(/0+$/, \"\").replace(/^\\.$/, \"\");\n  var time = \"\";\n  if (minutes > 0) time += minutes + \" min\" + (minutes > 1 ? \"s\" : \"\") + \", \";\n  time += seconds + \" secs\";\n  return time;\n};\n\nvar smpTag = function smpTag() {\n  return bg(\" SMP \") + \" ⏱  \";\n};\n\nmodule.exports.smpTag = smpTag;\n\nmodule.exports.getHumanOutput = function (outputObj) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  var hT = function hT(x) {\n    return humanTime(x, options);\n  };\n\n  var output = \"\\n\\n\" + smpTag() + \"\\n\";\n\n  if (outputObj.misc) {\n    output += \"General output time took \" + fg(hT(outputObj.misc.compileTime, options), outputObj.misc.compileTime);\n    output += \"\\n\\n\";\n  }\n\n  if (outputObj.plugins) {\n    output += smpTag() + \"Plugins\\n\";\n    Object.keys(outputObj.plugins).sort(function (name1, name2) {\n      return outputObj.plugins[name2] - outputObj.plugins[name1];\n    }).forEach(function (pluginName) {\n      output += chalk.bold(pluginName) + \" took \" + fg(hT(outputObj.plugins[pluginName]), outputObj.plugins[pluginName]);\n      output += \"\\n\";\n    });\n    output += \"\\n\";\n  }\n\n  if (outputObj.loaders) {\n    output += smpTag() + \"Loaders\\n\";\n    outputObj.loaders.build.sort(function (obj1, obj2) {\n      return obj2.activeTime - obj1.activeTime;\n    }).forEach(function (loaderObj) {\n      output += loaderObj.loaders.map(fg).join(\", and \\n\") + \" took \" + fg(hT(loaderObj.activeTime), loaderObj.activeTime) + \"\\n\";\n      var xEqualsY = [];\n\n      if (options.verbose) {\n        xEqualsY.push([\"median\", hT(loaderObj.averages.median)]);\n        xEqualsY.push([\"mean\", hT(loaderObj.averages.mean)]);\n        if (typeof loaderObj.averages.variance === \"number\") xEqualsY.push([\"s.d.\", hT(Math.sqrt(loaderObj.averages.variance))]);\n        xEqualsY.push([\"range\", \"(\" + hT(loaderObj.averages.range.start) + \" --> \" + hT(loaderObj.averages.range.end) + \")\"]);\n      }\n\n      if (loaderObj.loaders.length > 1) {\n        Object.keys(loaderObj.subLoadersTime).forEach(function (subLoader) {\n          xEqualsY.push([subLoader, hT(loaderObj.subLoadersTime[subLoader])]);\n        });\n      }\n\n      xEqualsY.push([\"module count\", loaderObj.averages.dataPoints]);\n      var maxXLength = xEqualsY.reduce(function (acc, cur) {\n        return Math.max(acc, cur[0].length);\n      }, 0);\n      xEqualsY.forEach(function (xY) {\n        var padEnd = maxXLength - xY[0].length;\n        output += \"  \" + xY[0] + \" \".repeat(padEnd) + \" = \" + xY[1] + \"\\n\";\n      });\n    });\n  }\n\n  output += \"\\n\\n\";\n  return output;\n};\n\nmodule.exports.getMiscOutput = function (data) {\n  return {\n    compileTime: data.compile[0].end - data.compile[0].start\n  };\n};\n\nmodule.exports.getPluginsOutput = function (data) {\n  return Object.keys(data).reduce(function (acc, key) {\n    var inData = data[key];\n    var startEndsByName = groupBy(\"name\", inData);\n    return startEndsByName.reduce(function (innerAcc, startEnds) {\n      innerAcc[startEnds[0].name] = (innerAcc[startEnds[0].name] || 0) + getTotalActiveTime(startEnds);\n      return innerAcc;\n    }, acc);\n  }, {});\n};\n\nmodule.exports.getLoadersOutput = function (data) {\n  var startEndsByLoader = groupBy(\"loaders\", data.build);\n  var allSubLoaders = data[\"build-specific\"] || [];\n  var buildData = startEndsByLoader.map(function (startEnds) {\n    var averages = getAverages(startEnds);\n    var activeTime = getTotalActiveTime(startEnds);\n    var subLoaders = groupBy(\"loader\", allSubLoaders.filter(function (l) {\n      return startEnds.find(function (x) {\n        return x.name === l.name;\n      });\n    }));\n    var subLoadersActiveTime = subLoaders.reduce(function (acc, loaders) {\n      acc[loaders[0].loader] = getTotalActiveTime(loaders);\n      return acc;\n    }, {});\n    return {\n      averages: averages,\n      activeTime: activeTime,\n      loaders: startEnds[0].loaders,\n      subLoadersTime: subLoadersActiveTime\n    };\n  });\n  return {\n    build: buildData\n  };\n};","map":{"version":3,"sources":["/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/speed-measure-webpack-plugin/output.js"],"names":["MS_IN_MINUTE","MS_IN_SECOND","chalk","require","fg","bg","groupBy","getAverages","getTotalActiveTime","humanTime","ms","options","verbose","toLocaleString","minutes","Math","floor","secondsRaw","secondsWhole","remainderPrecision","secondsRemainder","min","seconds","toPrecision","replace","time","smpTag","module","exports","getHumanOutput","outputObj","hT","x","output","misc","compileTime","plugins","Object","keys","sort","name1","name2","forEach","pluginName","bold","loaders","build","obj1","obj2","activeTime","loaderObj","map","join","xEqualsY","push","averages","median","mean","variance","sqrt","range","start","end","length","subLoadersTime","subLoader","dataPoints","maxXLength","reduce","acc","cur","max","xY","padEnd","repeat","getMiscOutput","data","compile","getPluginsOutput","key","inData","startEndsByName","innerAcc","startEnds","name","getLoadersOutput","startEndsByLoader","allSubLoaders","buildData","subLoaders","filter","l","find","subLoadersActiveTime","loader"],"mappings":"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","sourcesContent":["const MS_IN_MINUTE = 60000;\nconst MS_IN_SECOND = 1000;\n\nconst chalk = require(\"chalk\");\nconst { fg, bg } = require(\"./colours\");\nconst { groupBy, getAverages, getTotalActiveTime } = require(\"./utils\");\n\nconst humanTime = (ms, options = {}) => {\n  if (options.verbose) {\n    return ms.toLocaleString() + \" ms\";\n  }\n\n  const minutes = Math.floor(ms / MS_IN_MINUTE);\n  const secondsRaw = (ms - minutes * MS_IN_MINUTE) / MS_IN_SECOND;\n  const secondsWhole = Math.floor(secondsRaw);\n  const remainderPrecision = secondsWhole > 0 ? 2 : 3;\n  const secondsRemainder = Math.min(secondsRaw - secondsWhole, 0.99);\n  const seconds =\n    secondsWhole +\n    secondsRemainder\n      .toPrecision(remainderPrecision)\n      .replace(/^0/, \"\")\n      .replace(/0+$/, \"\")\n      .replace(/^\\.$/, \"\");\n\n  let time = \"\";\n\n  if (minutes > 0) time += minutes + \" min\" + (minutes > 1 ? \"s\" : \"\") + \", \";\n  time += seconds + \" secs\";\n\n  return time;\n};\n\nconst smpTag = () => bg(\" SMP \") + \" ⏱  \";\nmodule.exports.smpTag = smpTag;\n\nmodule.exports.getHumanOutput = (outputObj, options = {}) => {\n  const hT = x => humanTime(x, options);\n  let output = \"\\n\\n\" + smpTag() + \"\\n\";\n\n  if (outputObj.misc) {\n    output +=\n      \"General output time took \" +\n      fg(hT(outputObj.misc.compileTime, options), outputObj.misc.compileTime);\n    output += \"\\n\\n\";\n  }\n  if (outputObj.plugins) {\n    output += smpTag() + \"Plugins\\n\";\n    Object.keys(outputObj.plugins)\n      .sort(\n        (name1, name2) => outputObj.plugins[name2] - outputObj.plugins[name1]\n      )\n      .forEach(pluginName => {\n        output +=\n          chalk.bold(pluginName) +\n          \" took \" +\n          fg(hT(outputObj.plugins[pluginName]), outputObj.plugins[pluginName]);\n        output += \"\\n\";\n      });\n    output += \"\\n\";\n  }\n  if (outputObj.loaders) {\n    output += smpTag() + \"Loaders\\n\";\n    outputObj.loaders.build\n      .sort((obj1, obj2) => obj2.activeTime - obj1.activeTime)\n      .forEach(loaderObj => {\n        output +=\n          loaderObj.loaders.map(fg).join(\", and \\n\") +\n          \" took \" +\n          fg(hT(loaderObj.activeTime), loaderObj.activeTime) +\n          \"\\n\";\n\n        let xEqualsY = [];\n        if (options.verbose) {\n          xEqualsY.push([\"median\", hT(loaderObj.averages.median)]);\n          xEqualsY.push([\"mean\", hT(loaderObj.averages.mean)]);\n          if (typeof loaderObj.averages.variance === \"number\")\n            xEqualsY.push([\"s.d.\", hT(Math.sqrt(loaderObj.averages.variance))]);\n          xEqualsY.push([\n            \"range\",\n            \"(\" +\n              hT(loaderObj.averages.range.start) +\n              \" --> \" +\n              hT(loaderObj.averages.range.end) +\n              \")\",\n          ]);\n        }\n\n        if (loaderObj.loaders.length > 1) {\n          Object.keys(loaderObj.subLoadersTime).forEach(subLoader => {\n            xEqualsY.push([subLoader, hT(loaderObj.subLoadersTime[subLoader])]);\n          });\n        }\n\n        xEqualsY.push([\"module count\", loaderObj.averages.dataPoints]);\n\n        const maxXLength = xEqualsY.reduce(\n          (acc, cur) => Math.max(acc, cur[0].length),\n          0\n        );\n        xEqualsY.forEach(xY => {\n          const padEnd = maxXLength - xY[0].length;\n          output += \"  \" + xY[0] + \" \".repeat(padEnd) + \" = \" + xY[1] + \"\\n\";\n        });\n      });\n  }\n\n  output += \"\\n\\n\";\n\n  return output;\n};\n\nmodule.exports.getMiscOutput = data => ({\n  compileTime: data.compile[0].end - data.compile[0].start,\n});\n\nmodule.exports.getPluginsOutput = data =>\n  Object.keys(data).reduce((acc, key) => {\n    const inData = data[key];\n\n    const startEndsByName = groupBy(\"name\", inData);\n\n    return startEndsByName.reduce((innerAcc, startEnds) => {\n      innerAcc[startEnds[0].name] =\n        (innerAcc[startEnds[0].name] || 0) + getTotalActiveTime(startEnds);\n      return innerAcc;\n    }, acc);\n  }, {});\n\nmodule.exports.getLoadersOutput = data => {\n  const startEndsByLoader = groupBy(\"loaders\", data.build);\n  const allSubLoaders = data[\"build-specific\"] || [];\n\n  const buildData = startEndsByLoader.map(startEnds => {\n    const averages = getAverages(startEnds);\n    const activeTime = getTotalActiveTime(startEnds);\n    const subLoaders = groupBy(\n      \"loader\",\n      allSubLoaders.filter(l => startEnds.find(x => x.name === l.name))\n    );\n    const subLoadersActiveTime = subLoaders.reduce((acc, loaders) => {\n      acc[loaders[0].loader] = getTotalActiveTime(loaders);\n      return acc;\n    }, {});\n\n    return {\n      averages,\n      activeTime,\n      loaders: startEnds[0].loaders,\n      subLoadersTime: subLoadersActiveTime,\n    };\n  });\n\n  return { build: buildData };\n};\n"]},"metadata":{},"sourceType":"script"}