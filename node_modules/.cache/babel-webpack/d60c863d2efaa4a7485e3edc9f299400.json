{"ast":null,"code":"\"use strict\";\n\nvar _toConsumableArray = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/toConsumableArray\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.replaceServerBootstrap = void 0;\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nvar path_1 = require(\"path\");\n\nvar ts = require(\"typescript\");\n\nvar utils_1 = require(\"../utils\");\n\nvar ast_helpers_1 = require(\"./ast_helpers\");\n\nvar insert_import_1 = require(\"./insert_import\");\n\nvar interfaces_1 = require(\"./interfaces\");\n\nvar make_transform_1 = require(\"./make_transform\");\n\nfunction replaceServerBootstrap(shouldTransform, getEntryModule, getTypeChecker) {\n  var standardTransform = function standardTransform(sourceFile) {\n    var ops = [];\n    var entryModule = getEntryModule();\n\n    if (!shouldTransform(sourceFile.fileName) || !entryModule) {\n      return ops;\n    } // Find all identifiers.\n\n\n    var entryModuleIdentifiers = ast_helpers_1.collectDeepNodes(sourceFile, ts.SyntaxKind.Identifier).filter(function (identifier) {\n      return identifier.text === entryModule.className;\n    });\n\n    if (entryModuleIdentifiers.length === 0) {\n      return [];\n    }\n\n    var relativeEntryModulePath = path_1.relative(path_1.dirname(sourceFile.fileName), entryModule.path);\n    var normalizedEntryModulePath = utils_1.forwardSlashPath(\"./\".concat(relativeEntryModulePath));\n    var factoryClassName = entryModule.className + 'NgFactory';\n    var factoryModulePath = normalizedEntryModulePath + '.ngfactory'; // Find the bootstrap calls.\n\n    entryModuleIdentifiers.forEach(function (entryModuleIdentifier) {\n      if (!entryModuleIdentifier.parent) {\n        return;\n      }\n\n      if (entryModuleIdentifier.parent.kind !== ts.SyntaxKind.CallExpression && entryModuleIdentifier.parent.kind !== ts.SyntaxKind.PropertyAssignment) {\n        return;\n      }\n\n      if (entryModuleIdentifier.parent.kind === ts.SyntaxKind.CallExpression) {\n        // Figure out if it's a `platformDynamicServer().bootstrapModule(AppModule)` call.\n        var callExpr = entryModuleIdentifier.parent;\n\n        if (callExpr.expression.kind === ts.SyntaxKind.PropertyAccessExpression) {\n          var propAccessExpr = callExpr.expression;\n\n          if (!(propAccessExpr.name.text === 'bootstrapModule' && propAccessExpr.expression.kind === ts.SyntaxKind.CallExpression)) {\n            return;\n          }\n\n          var bootstrapModuleIdentifier = propAccessExpr.name;\n          var innerCallExpr = propAccessExpr.expression;\n\n          if (!(innerCallExpr.expression.kind === ts.SyntaxKind.Identifier && innerCallExpr.expression.text === 'platformDynamicServer')) {\n            return;\n          }\n\n          var platformDynamicServerIdentifier = innerCallExpr.expression;\n          var idPlatformServer = ts.createUniqueName('__NgCli_bootstrap_');\n          var idNgFactory = ts.createUniqueName('__NgCli_bootstrap_'); // Add the transform operations.\n\n          ops.push.apply(ops, _toConsumableArray(insert_import_1.insertStarImport(sourceFile, idNgFactory, factoryModulePath)).concat([new interfaces_1.ReplaceNodeOperation(sourceFile, entryModuleIdentifier, ts.createPropertyAccess(idNgFactory, ts.createIdentifier(factoryClassName)))], _toConsumableArray(insert_import_1.insertStarImport(sourceFile, idPlatformServer, '@angular/platform-server')), [new interfaces_1.ReplaceNodeOperation(sourceFile, platformDynamicServerIdentifier, ts.createPropertyAccess(idPlatformServer, 'platformServer')), new interfaces_1.ReplaceNodeOperation(sourceFile, bootstrapModuleIdentifier, ts.createIdentifier('bootstrapModuleFactory'))]));\n        } else if (callExpr.expression.kind === ts.SyntaxKind.Identifier) {\n          // Figure out if it is renderModule\n          var identifierExpr = callExpr.expression;\n\n          if (identifierExpr.text !== 'renderModule') {\n            return;\n          }\n\n          var renderModuleIdentifier = identifierExpr;\n\n          var _idPlatformServer = ts.createUniqueName('__NgCli_bootstrap_');\n\n          var _idNgFactory = ts.createUniqueName('__NgCli_bootstrap_');\n\n          ops.push.apply(ops, _toConsumableArray(insert_import_1.insertStarImport(sourceFile, _idNgFactory, factoryModulePath)).concat([new interfaces_1.ReplaceNodeOperation(sourceFile, entryModuleIdentifier, ts.createPropertyAccess(_idNgFactory, ts.createIdentifier(factoryClassName)))], _toConsumableArray(insert_import_1.insertStarImport(sourceFile, _idPlatformServer, '@angular/platform-server')), [new interfaces_1.ReplaceNodeOperation(sourceFile, renderModuleIdentifier, ts.createPropertyAccess(_idPlatformServer, 'renderModuleFactory'))]));\n        }\n      } else if (entryModuleIdentifier.parent.kind === ts.SyntaxKind.PropertyAssignment) {\n        // This is for things that accept a module as a property in a config object\n        // .ie the express engine\n        var _idNgFactory2 = ts.createUniqueName('__NgCli_bootstrap_');\n\n        ops.push.apply(ops, _toConsumableArray(insert_import_1.insertStarImport(sourceFile, _idNgFactory2, factoryModulePath)).concat([new interfaces_1.ReplaceNodeOperation(sourceFile, entryModuleIdentifier, ts.createPropertyAccess(_idNgFactory2, ts.createIdentifier(factoryClassName)))]));\n      }\n    });\n    return ops;\n  };\n\n  return make_transform_1.makeTransform(standardTransform, getTypeChecker);\n}\n\nexports.replaceServerBootstrap = replaceServerBootstrap;","map":{"version":3,"sources":["/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@ngtools/webpack/src/transformers/replace_server_bootstrap.js"],"names":["Object","defineProperty","exports","value","replaceServerBootstrap","path_1","require","ts","utils_1","ast_helpers_1","insert_import_1","interfaces_1","make_transform_1","shouldTransform","getEntryModule","getTypeChecker","standardTransform","sourceFile","ops","entryModule","fileName","entryModuleIdentifiers","collectDeepNodes","SyntaxKind","Identifier","filter","identifier","text","className","length","relativeEntryModulePath","relative","dirname","path","normalizedEntryModulePath","forwardSlashPath","factoryClassName","factoryModulePath","forEach","entryModuleIdentifier","parent","kind","CallExpression","PropertyAssignment","callExpr","expression","PropertyAccessExpression","propAccessExpr","name","bootstrapModuleIdentifier","innerCallExpr","platformDynamicServerIdentifier","idPlatformServer","createUniqueName","idNgFactory","push","insertStarImport","ReplaceNodeOperation","createPropertyAccess","createIdentifier","identifierExpr","renderModuleIdentifier","makeTransform"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.replaceServerBootstrap = void 0;\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst path_1 = require(\"path\");\nconst ts = require(\"typescript\");\nconst utils_1 = require(\"../utils\");\nconst ast_helpers_1 = require(\"./ast_helpers\");\nconst insert_import_1 = require(\"./insert_import\");\nconst interfaces_1 = require(\"./interfaces\");\nconst make_transform_1 = require(\"./make_transform\");\nfunction replaceServerBootstrap(shouldTransform, getEntryModule, getTypeChecker) {\n    const standardTransform = function (sourceFile) {\n        const ops = [];\n        const entryModule = getEntryModule();\n        if (!shouldTransform(sourceFile.fileName) || !entryModule) {\n            return ops;\n        }\n        // Find all identifiers.\n        const entryModuleIdentifiers = ast_helpers_1.collectDeepNodes(sourceFile, ts.SyntaxKind.Identifier)\n            .filter(identifier => identifier.text === entryModule.className);\n        if (entryModuleIdentifiers.length === 0) {\n            return [];\n        }\n        const relativeEntryModulePath = path_1.relative(path_1.dirname(sourceFile.fileName), entryModule.path);\n        const normalizedEntryModulePath = utils_1.forwardSlashPath(`./${relativeEntryModulePath}`);\n        const factoryClassName = entryModule.className + 'NgFactory';\n        const factoryModulePath = normalizedEntryModulePath + '.ngfactory';\n        // Find the bootstrap calls.\n        entryModuleIdentifiers.forEach(entryModuleIdentifier => {\n            if (!entryModuleIdentifier.parent) {\n                return;\n            }\n            if (entryModuleIdentifier.parent.kind !== ts.SyntaxKind.CallExpression &&\n                entryModuleIdentifier.parent.kind !== ts.SyntaxKind.PropertyAssignment) {\n                return;\n            }\n            if (entryModuleIdentifier.parent.kind === ts.SyntaxKind.CallExpression) {\n                // Figure out if it's a `platformDynamicServer().bootstrapModule(AppModule)` call.\n                const callExpr = entryModuleIdentifier.parent;\n                if (callExpr.expression.kind === ts.SyntaxKind.PropertyAccessExpression) {\n                    const propAccessExpr = callExpr.expression;\n                    if (!(propAccessExpr.name.text === 'bootstrapModule'\n                        && propAccessExpr.expression.kind === ts.SyntaxKind.CallExpression)) {\n                        return;\n                    }\n                    const bootstrapModuleIdentifier = propAccessExpr.name;\n                    const innerCallExpr = propAccessExpr.expression;\n                    if (!(innerCallExpr.expression.kind === ts.SyntaxKind.Identifier\n                        && innerCallExpr.expression.text === 'platformDynamicServer')) {\n                        return;\n                    }\n                    const platformDynamicServerIdentifier = innerCallExpr.expression;\n                    const idPlatformServer = ts.createUniqueName('__NgCli_bootstrap_');\n                    const idNgFactory = ts.createUniqueName('__NgCli_bootstrap_');\n                    // Add the transform operations.\n                    ops.push(\n                    // Replace the entry module import.\n                    ...insert_import_1.insertStarImport(sourceFile, idNgFactory, factoryModulePath), new interfaces_1.ReplaceNodeOperation(sourceFile, entryModuleIdentifier, ts.createPropertyAccess(idNgFactory, ts.createIdentifier(factoryClassName))), \n                    // Replace the platformBrowserDynamic import.\n                    ...insert_import_1.insertStarImport(sourceFile, idPlatformServer, '@angular/platform-server'), new interfaces_1.ReplaceNodeOperation(sourceFile, platformDynamicServerIdentifier, ts.createPropertyAccess(idPlatformServer, 'platformServer')), new interfaces_1.ReplaceNodeOperation(sourceFile, bootstrapModuleIdentifier, ts.createIdentifier('bootstrapModuleFactory')));\n                }\n                else if (callExpr.expression.kind === ts.SyntaxKind.Identifier) {\n                    // Figure out if it is renderModule\n                    const identifierExpr = callExpr.expression;\n                    if (identifierExpr.text !== 'renderModule') {\n                        return;\n                    }\n                    const renderModuleIdentifier = identifierExpr;\n                    const idPlatformServer = ts.createUniqueName('__NgCli_bootstrap_');\n                    const idNgFactory = ts.createUniqueName('__NgCli_bootstrap_');\n                    ops.push(\n                    // Replace the entry module import.\n                    ...insert_import_1.insertStarImport(sourceFile, idNgFactory, factoryModulePath), new interfaces_1.ReplaceNodeOperation(sourceFile, entryModuleIdentifier, ts.createPropertyAccess(idNgFactory, ts.createIdentifier(factoryClassName))), \n                    // Replace the renderModule import.\n                    ...insert_import_1.insertStarImport(sourceFile, idPlatformServer, '@angular/platform-server'), new interfaces_1.ReplaceNodeOperation(sourceFile, renderModuleIdentifier, ts.createPropertyAccess(idPlatformServer, 'renderModuleFactory')));\n                }\n            }\n            else if (entryModuleIdentifier.parent.kind === ts.SyntaxKind.PropertyAssignment) {\n                // This is for things that accept a module as a property in a config object\n                // .ie the express engine\n                const idNgFactory = ts.createUniqueName('__NgCli_bootstrap_');\n                ops.push(...insert_import_1.insertStarImport(sourceFile, idNgFactory, factoryModulePath), new interfaces_1.ReplaceNodeOperation(sourceFile, entryModuleIdentifier, ts.createPropertyAccess(idNgFactory, ts.createIdentifier(factoryClassName))));\n            }\n        });\n        return ops;\n    };\n    return make_transform_1.makeTransform(standardTransform, getTypeChecker);\n}\nexports.replaceServerBootstrap = replaceServerBootstrap;\n"]},"metadata":{},"sourceType":"script"}