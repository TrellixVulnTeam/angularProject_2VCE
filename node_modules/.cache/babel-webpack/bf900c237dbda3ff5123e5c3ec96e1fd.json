{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _ = {\n  isString: require('lodash/isString'),\n  isNumber: require('lodash/isNumber'),\n  extend: require('lodash/extend'),\n  isFunction: require('lodash/isFunction')\n};\n/**\n * Choice object\n * Normalize input as choice object\n * @constructor\n * @param {Number|String|Object} val  Choice value. If an object is passed, it should contains\n *                                    at least one of `value` or `name` property\n */\n\nmodule.exports = function Choice(val, answers) {\n  _classCallCheck(this, Choice);\n\n  // Don't process Choice and Separator object\n  if (val instanceof Choice || val.type === 'separator') {\n    // eslint-disable-next-line no-constructor-return\n    return val;\n  }\n\n  if (_.isString(val) || _.isNumber(val)) {\n    this.name = String(val);\n    this.value = val;\n    this.short = String(val);\n  } else {\n    _.extend(this, val, {\n      name: val.name || val.value,\n      value: 'value' in val ? val.value : val.name,\n      short: val.short || val.name || val.value\n    });\n  }\n\n  if (_.isFunction(val.disabled)) {\n    this.disabled = val.disabled(answers);\n  } else {\n    this.disabled = val.disabled;\n  }\n};","map":{"version":3,"sources":["/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/inquirer/lib/objects/choice.js"],"names":["_","isString","require","isNumber","extend","isFunction","module","exports","val","answers","Choice","type","name","String","value","short","disabled"],"mappings":"AAAA;;;;AACA,IAAIA,CAAC,GAAG;AACNC,EAAAA,QAAQ,EAAEC,OAAO,CAAC,iBAAD,CADX;AAENC,EAAAA,QAAQ,EAAED,OAAO,CAAC,iBAAD,CAFX;AAGNE,EAAAA,MAAM,EAAEF,OAAO,CAAC,eAAD,CAHT;AAING,EAAAA,UAAU,EAAEH,OAAO,CAAC,mBAAD;AAJb,CAAR;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAI,MAAM,CAACC,OAAP,GACE,gBAAYC,GAAZ,EAAiBC,OAAjB,EAA0B;AAAA;;AACxB;AACA,MAAID,GAAG,YAAYE,MAAf,IAAyBF,GAAG,CAACG,IAAJ,KAAa,WAA1C,EAAuD;AACrD;AACA,WAAOH,GAAP;AACD;;AAED,MAAIR,CAAC,CAACC,QAAF,CAAWO,GAAX,KAAmBR,CAAC,CAACG,QAAF,CAAWK,GAAX,CAAvB,EAAwC;AACtC,SAAKI,IAAL,GAAYC,MAAM,CAACL,GAAD,CAAlB;AACA,SAAKM,KAAL,GAAaN,GAAb;AACA,SAAKO,KAAL,GAAaF,MAAM,CAACL,GAAD,CAAnB;AACD,GAJD,MAIO;AACLR,IAAAA,CAAC,CAACI,MAAF,CAAS,IAAT,EAAeI,GAAf,EAAoB;AAClBI,MAAAA,IAAI,EAAEJ,GAAG,CAACI,IAAJ,IAAYJ,GAAG,CAACM,KADJ;AAElBA,MAAAA,KAAK,EAAE,WAAWN,GAAX,GAAiBA,GAAG,CAACM,KAArB,GAA6BN,GAAG,CAACI,IAFtB;AAGlBG,MAAAA,KAAK,EAAEP,GAAG,CAACO,KAAJ,IAAaP,GAAG,CAACI,IAAjB,IAAyBJ,GAAG,CAACM;AAHlB,KAApB;AAKD;;AAED,MAAId,CAAC,CAACK,UAAF,CAAaG,GAAG,CAACQ,QAAjB,CAAJ,EAAgC;AAC9B,SAAKA,QAAL,GAAgBR,GAAG,CAACQ,QAAJ,CAAaP,OAAb,CAAhB;AACD,GAFD,MAEO;AACL,SAAKO,QAAL,GAAgBR,GAAG,CAACQ,QAApB;AACD;AACF,CAzBH","sourcesContent":["'use strict';\nvar _ = {\n  isString: require('lodash/isString'),\n  isNumber: require('lodash/isNumber'),\n  extend: require('lodash/extend'),\n  isFunction: require('lodash/isFunction'),\n};\n\n/**\n * Choice object\n * Normalize input as choice object\n * @constructor\n * @param {Number|String|Object} val  Choice value. If an object is passed, it should contains\n *                                    at least one of `value` or `name` property\n */\n\nmodule.exports = class Choice {\n  constructor(val, answers) {\n    // Don't process Choice and Separator object\n    if (val instanceof Choice || val.type === 'separator') {\n      // eslint-disable-next-line no-constructor-return\n      return val;\n    }\n\n    if (_.isString(val) || _.isNumber(val)) {\n      this.name = String(val);\n      this.value = val;\n      this.short = String(val);\n    } else {\n      _.extend(this, val, {\n        name: val.name || val.value,\n        value: 'value' in val ? val.value : val.name,\n        short: val.short || val.name || val.value,\n      });\n    }\n\n    if (_.isFunction(val.disabled)) {\n      this.disabled = val.disabled(answers);\n    } else {\n      this.disabled = val.disabled;\n    }\n  }\n};\n"]},"metadata":{},"sourceType":"script"}