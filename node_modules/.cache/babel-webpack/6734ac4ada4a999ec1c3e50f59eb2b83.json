{"ast":null,"code":"'use strict';\n\nvar _objectSpread = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/objectSpread2\");\n\nvar _classCallCheck = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.default = void 0;\n\nfunction _child_process() {\n  var data = require('child_process');\n\n  _child_process = function _child_process() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _stream() {\n  var data = require('stream');\n\n  _stream = function _stream() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _mergeStream() {\n  var data = _interopRequireDefault(require('merge-stream'));\n\n  _mergeStream = function _mergeStream() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _supportsColor() {\n  var data = require('supports-color');\n\n  _supportsColor = function _supportsColor() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _types() {\n  var data = require('../types');\n\n  _types = function _types() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nvar SIGNAL_BASE_EXIT_CODE = 128;\nvar SIGKILL_EXIT_CODE = SIGNAL_BASE_EXIT_CODE + 9;\nvar SIGTERM_EXIT_CODE = SIGNAL_BASE_EXIT_CODE + 15; // How long to wait after SIGTERM before sending SIGKILL\n\nvar SIGKILL_DELAY = 500;\n/**\n * This class wraps the child process and provides a nice interface to\n * communicate with. It takes care of:\n *\n *  - Re-spawning the process if it dies.\n *  - Queues calls while the worker is busy.\n *  - Re-sends the requests if the worker blew up.\n *\n * The reason for queueing them here (since childProcess.send also has an\n * internal queue) is because the worker could be doing asynchronous work, and\n * this would lead to the child process to read its receiving buffer and start a\n * second call. By queueing calls here, we don't send the next call to the\n * children until we receive the result of the previous one.\n *\n * As soon as a request starts to be processed by a worker, its \"processed\"\n * field is changed to \"true\", so that other workers which might encounter the\n * same call skip it.\n */\n\nvar ChildProcessWorker = /*#__PURE__*/function () {\n  function ChildProcessWorker(options) {\n    var _this = this;\n\n    _classCallCheck(this, ChildProcessWorker);\n\n    _defineProperty(this, '_child', void 0);\n\n    _defineProperty(this, '_options', void 0);\n\n    _defineProperty(this, '_request', void 0);\n\n    _defineProperty(this, '_retries', void 0);\n\n    _defineProperty(this, '_onProcessEnd', void 0);\n\n    _defineProperty(this, '_onCustomMessage', void 0);\n\n    _defineProperty(this, '_fakeStream', void 0);\n\n    _defineProperty(this, '_stdout', void 0);\n\n    _defineProperty(this, '_stderr', void 0);\n\n    _defineProperty(this, '_exitPromise', void 0);\n\n    _defineProperty(this, '_resolveExitPromise', void 0);\n\n    this._options = options;\n    this._request = null;\n    this._fakeStream = null;\n    this._stdout = null;\n    this._stderr = null;\n    this._exitPromise = new Promise(function (resolve) {\n      _this._resolveExitPromise = resolve;\n    });\n    this.initialize();\n  }\n\n  _createClass(ChildProcessWorker, [{\n    key: \"initialize\",\n    value: function initialize() {\n      var forceColor = _supportsColor().stdout ? {\n        FORCE_COLOR: '1'\n      } : {};\n      var child = (0, _child_process().fork)(require.resolve('./processChild'), [], _objectSpread({\n        cwd: process.cwd(),\n        env: _objectSpread(_objectSpread({}, process.env), {}, {\n          JEST_WORKER_ID: String(this._options.workerId + 1)\n        }, forceColor),\n        // Suppress --debug / --inspect flags while preserving others (like --harmony).\n        execArgv: process.execArgv.filter(function (v) {\n          return !/^--(debug|inspect)/.test(v);\n        }),\n        silent: true\n      }, this._options.forkOptions));\n\n      if (child.stdout) {\n        if (!this._stdout) {\n          // We need to add a permanent stream to the merged stream to prevent it\n          // from ending when the subprocess stream ends\n          this._stdout = (0, _mergeStream().default)(this._getFakeStream());\n        }\n\n        this._stdout.add(child.stdout);\n      }\n\n      if (child.stderr) {\n        if (!this._stderr) {\n          // We need to add a permanent stream to the merged stream to prevent it\n          // from ending when the subprocess stream ends\n          this._stderr = (0, _mergeStream().default)(this._getFakeStream());\n        }\n\n        this._stderr.add(child.stderr);\n      }\n\n      child.on('message', this._onMessage.bind(this));\n      child.on('exit', this._onExit.bind(this));\n      child.send([_types().CHILD_MESSAGE_INITIALIZE, false, this._options.workerPath, this._options.setupArgs]);\n      this._child = child;\n      this._retries++; // If we exceeded the amount of retries, we will emulate an error reply\n      // coming from the child. This avoids code duplication related with cleaning\n      // the queue, and scheduling the next call.\n\n      if (this._retries > this._options.maxRetries) {\n        var error = new Error('Call retries were exceeded');\n\n        this._onMessage([_types().PARENT_MESSAGE_CLIENT_ERROR, error.name, error.message, error.stack, {\n          type: 'WorkerError'\n        }]);\n      }\n    }\n  }, {\n    key: \"_shutdown\",\n    value: function _shutdown() {\n      // End the temporary streams so the merged streams end too\n      if (this._fakeStream) {\n        this._fakeStream.end();\n\n        this._fakeStream = null;\n      }\n\n      this._resolveExitPromise();\n    }\n  }, {\n    key: \"_onMessage\",\n    value: function _onMessage(response) {\n      // TODO: Add appropriate type check\n      var error;\n\n      switch (response[0]) {\n        case _types().PARENT_MESSAGE_OK:\n          this._onProcessEnd(null, response[1]);\n\n          break;\n\n        case _types().PARENT_MESSAGE_CLIENT_ERROR:\n          error = response[4];\n\n          if (error != null && typeof error === 'object') {\n            var extra = error; // @ts-expect-error: no index\n\n            var NativeCtor = global[response[1]];\n            var Ctor = typeof NativeCtor === 'function' ? NativeCtor : Error;\n            error = new Ctor(response[2]);\n            error.type = response[1];\n            error.stack = response[3];\n\n            for (var key in extra) {\n              error[key] = extra[key];\n            }\n          }\n\n          this._onProcessEnd(error, null);\n\n          break;\n\n        case _types().PARENT_MESSAGE_SETUP_ERROR:\n          error = new Error('Error when calling setup: ' + response[2]);\n          error.type = response[1];\n          error.stack = response[3];\n\n          this._onProcessEnd(error, null);\n\n          break;\n\n        case _types().PARENT_MESSAGE_CUSTOM:\n          this._onCustomMessage(response[1]);\n\n          break;\n\n        default:\n          throw new TypeError('Unexpected response from worker: ' + response[0]);\n      }\n    }\n  }, {\n    key: \"_onExit\",\n    value: function _onExit(exitCode) {\n      if (exitCode !== 0 && exitCode !== SIGTERM_EXIT_CODE && exitCode !== SIGKILL_EXIT_CODE) {\n        this.initialize();\n\n        if (this._request) {\n          this._child.send(this._request);\n        }\n      } else {\n        this._shutdown();\n      }\n    }\n  }, {\n    key: \"send\",\n    value: function send(request, onProcessStart, onProcessEnd, onCustomMessage) {\n      var _this2 = this;\n\n      onProcessStart(this);\n\n      this._onProcessEnd = function () {\n        // Clean the request to avoid sending past requests to workers that fail\n        // while waiting for a new request (timers, unhandled rejections...)\n        _this2._request = null;\n        return onProcessEnd.apply(void 0, arguments);\n      };\n\n      this._onCustomMessage = function () {\n        return onCustomMessage.apply(void 0, arguments);\n      };\n\n      this._request = request;\n      this._retries = 0;\n\n      this._child.send(request);\n    }\n  }, {\n    key: \"waitForExit\",\n    value: function waitForExit() {\n      return this._exitPromise;\n    }\n  }, {\n    key: \"forceExit\",\n    value: function forceExit() {\n      var _this3 = this;\n\n      this._child.kill('SIGTERM');\n\n      var sigkillTimeout = setTimeout(function () {\n        return _this3._child.kill('SIGKILL');\n      }, SIGKILL_DELAY);\n\n      this._exitPromise.then(function () {\n        return clearTimeout(sigkillTimeout);\n      });\n    }\n  }, {\n    key: \"getWorkerId\",\n    value: function getWorkerId() {\n      return this._options.workerId;\n    }\n  }, {\n    key: \"getStdout\",\n    value: function getStdout() {\n      return this._stdout;\n    }\n  }, {\n    key: \"getStderr\",\n    value: function getStderr() {\n      return this._stderr;\n    }\n  }, {\n    key: \"_getFakeStream\",\n    value: function _getFakeStream() {\n      if (!this._fakeStream) {\n        this._fakeStream = new (_stream().PassThrough)();\n      }\n\n      return this._fakeStream;\n    }\n  }]);\n\n  return ChildProcessWorker;\n}();\n\nexports.default = ChildProcessWorker;","map":{"version":3,"sources":["/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/terser-webpack-plugin/node_modules/jest-worker/build/workers/ChildProcessWorker.js"],"names":["Object","defineProperty","exports","value","default","_child_process","data","require","_stream","_mergeStream","_interopRequireDefault","_supportsColor","_types","obj","__esModule","_defineProperty","key","enumerable","configurable","writable","SIGNAL_BASE_EXIT_CODE","SIGKILL_EXIT_CODE","SIGTERM_EXIT_CODE","SIGKILL_DELAY","ChildProcessWorker","options","_options","_request","_fakeStream","_stdout","_stderr","_exitPromise","Promise","resolve","_resolveExitPromise","initialize","forceColor","stdout","FORCE_COLOR","child","fork","cwd","process","env","JEST_WORKER_ID","String","workerId","execArgv","filter","v","test","silent","forkOptions","_getFakeStream","add","stderr","on","_onMessage","bind","_onExit","send","CHILD_MESSAGE_INITIALIZE","workerPath","setupArgs","_child","_retries","maxRetries","error","Error","PARENT_MESSAGE_CLIENT_ERROR","name","message","stack","type","end","response","PARENT_MESSAGE_OK","_onProcessEnd","extra","NativeCtor","global","Ctor","PARENT_MESSAGE_SETUP_ERROR","PARENT_MESSAGE_CUSTOM","_onCustomMessage","TypeError","exitCode","_shutdown","request","onProcessStart","onProcessEnd","onCustomMessage","kill","sigkillTimeout","setTimeout","then","clearTimeout","PassThrough"],"mappings":"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","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.default = void 0;\n\nfunction _child_process() {\n  const data = require('child_process');\n\n  _child_process = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _stream() {\n  const data = require('stream');\n\n  _stream = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _mergeStream() {\n  const data = _interopRequireDefault(require('merge-stream'));\n\n  _mergeStream = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _supportsColor() {\n  const data = require('supports-color');\n\n  _supportsColor = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _types() {\n  const data = require('../types');\n\n  _types = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {default: obj};\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\n\nconst SIGNAL_BASE_EXIT_CODE = 128;\nconst SIGKILL_EXIT_CODE = SIGNAL_BASE_EXIT_CODE + 9;\nconst SIGTERM_EXIT_CODE = SIGNAL_BASE_EXIT_CODE + 15; // How long to wait after SIGTERM before sending SIGKILL\n\nconst SIGKILL_DELAY = 500;\n/**\n * This class wraps the child process and provides a nice interface to\n * communicate with. It takes care of:\n *\n *  - Re-spawning the process if it dies.\n *  - Queues calls while the worker is busy.\n *  - Re-sends the requests if the worker blew up.\n *\n * The reason for queueing them here (since childProcess.send also has an\n * internal queue) is because the worker could be doing asynchronous work, and\n * this would lead to the child process to read its receiving buffer and start a\n * second call. By queueing calls here, we don't send the next call to the\n * children until we receive the result of the previous one.\n *\n * As soon as a request starts to be processed by a worker, its \"processed\"\n * field is changed to \"true\", so that other workers which might encounter the\n * same call skip it.\n */\n\nclass ChildProcessWorker {\n  constructor(options) {\n    _defineProperty(this, '_child', void 0);\n\n    _defineProperty(this, '_options', void 0);\n\n    _defineProperty(this, '_request', void 0);\n\n    _defineProperty(this, '_retries', void 0);\n\n    _defineProperty(this, '_onProcessEnd', void 0);\n\n    _defineProperty(this, '_onCustomMessage', void 0);\n\n    _defineProperty(this, '_fakeStream', void 0);\n\n    _defineProperty(this, '_stdout', void 0);\n\n    _defineProperty(this, '_stderr', void 0);\n\n    _defineProperty(this, '_exitPromise', void 0);\n\n    _defineProperty(this, '_resolveExitPromise', void 0);\n\n    this._options = options;\n    this._request = null;\n    this._fakeStream = null;\n    this._stdout = null;\n    this._stderr = null;\n    this._exitPromise = new Promise(resolve => {\n      this._resolveExitPromise = resolve;\n    });\n    this.initialize();\n  }\n\n  initialize() {\n    const forceColor = _supportsColor().stdout\n      ? {\n          FORCE_COLOR: '1'\n        }\n      : {};\n    const child = (0, _child_process().fork)(\n      require.resolve('./processChild'),\n      [],\n      {\n        cwd: process.cwd(),\n        env: {\n          ...process.env,\n          JEST_WORKER_ID: String(this._options.workerId + 1),\n          // 0-indexed workerId, 1-indexed JEST_WORKER_ID\n          ...forceColor\n        },\n        // Suppress --debug / --inspect flags while preserving others (like --harmony).\n        execArgv: process.execArgv.filter(v => !/^--(debug|inspect)/.test(v)),\n        silent: true,\n        ...this._options.forkOptions\n      }\n    );\n\n    if (child.stdout) {\n      if (!this._stdout) {\n        // We need to add a permanent stream to the merged stream to prevent it\n        // from ending when the subprocess stream ends\n        this._stdout = (0, _mergeStream().default)(this._getFakeStream());\n      }\n\n      this._stdout.add(child.stdout);\n    }\n\n    if (child.stderr) {\n      if (!this._stderr) {\n        // We need to add a permanent stream to the merged stream to prevent it\n        // from ending when the subprocess stream ends\n        this._stderr = (0, _mergeStream().default)(this._getFakeStream());\n      }\n\n      this._stderr.add(child.stderr);\n    }\n\n    child.on('message', this._onMessage.bind(this));\n    child.on('exit', this._onExit.bind(this));\n    child.send([\n      _types().CHILD_MESSAGE_INITIALIZE,\n      false,\n      this._options.workerPath,\n      this._options.setupArgs\n    ]);\n    this._child = child;\n    this._retries++; // If we exceeded the amount of retries, we will emulate an error reply\n    // coming from the child. This avoids code duplication related with cleaning\n    // the queue, and scheduling the next call.\n\n    if (this._retries > this._options.maxRetries) {\n      const error = new Error('Call retries were exceeded');\n\n      this._onMessage([\n        _types().PARENT_MESSAGE_CLIENT_ERROR,\n        error.name,\n        error.message,\n        error.stack,\n        {\n          type: 'WorkerError'\n        }\n      ]);\n    }\n  }\n\n  _shutdown() {\n    // End the temporary streams so the merged streams end too\n    if (this._fakeStream) {\n      this._fakeStream.end();\n\n      this._fakeStream = null;\n    }\n\n    this._resolveExitPromise();\n  }\n\n  _onMessage(response) {\n    // TODO: Add appropriate type check\n    let error;\n\n    switch (response[0]) {\n      case _types().PARENT_MESSAGE_OK:\n        this._onProcessEnd(null, response[1]);\n\n        break;\n\n      case _types().PARENT_MESSAGE_CLIENT_ERROR:\n        error = response[4];\n\n        if (error != null && typeof error === 'object') {\n          const extra = error; // @ts-expect-error: no index\n\n          const NativeCtor = global[response[1]];\n          const Ctor = typeof NativeCtor === 'function' ? NativeCtor : Error;\n          error = new Ctor(response[2]);\n          error.type = response[1];\n          error.stack = response[3];\n\n          for (const key in extra) {\n            error[key] = extra[key];\n          }\n        }\n\n        this._onProcessEnd(error, null);\n\n        break;\n\n      case _types().PARENT_MESSAGE_SETUP_ERROR:\n        error = new Error('Error when calling setup: ' + response[2]);\n        error.type = response[1];\n        error.stack = response[3];\n\n        this._onProcessEnd(error, null);\n\n        break;\n\n      case _types().PARENT_MESSAGE_CUSTOM:\n        this._onCustomMessage(response[1]);\n\n        break;\n\n      default:\n        throw new TypeError('Unexpected response from worker: ' + response[0]);\n    }\n  }\n\n  _onExit(exitCode) {\n    if (\n      exitCode !== 0 &&\n      exitCode !== SIGTERM_EXIT_CODE &&\n      exitCode !== SIGKILL_EXIT_CODE\n    ) {\n      this.initialize();\n\n      if (this._request) {\n        this._child.send(this._request);\n      }\n    } else {\n      this._shutdown();\n    }\n  }\n\n  send(request, onProcessStart, onProcessEnd, onCustomMessage) {\n    onProcessStart(this);\n\n    this._onProcessEnd = (...args) => {\n      // Clean the request to avoid sending past requests to workers that fail\n      // while waiting for a new request (timers, unhandled rejections...)\n      this._request = null;\n      return onProcessEnd(...args);\n    };\n\n    this._onCustomMessage = (...arg) => onCustomMessage(...arg);\n\n    this._request = request;\n    this._retries = 0;\n\n    this._child.send(request);\n  }\n\n  waitForExit() {\n    return this._exitPromise;\n  }\n\n  forceExit() {\n    this._child.kill('SIGTERM');\n\n    const sigkillTimeout = setTimeout(\n      () => this._child.kill('SIGKILL'),\n      SIGKILL_DELAY\n    );\n\n    this._exitPromise.then(() => clearTimeout(sigkillTimeout));\n  }\n\n  getWorkerId() {\n    return this._options.workerId;\n  }\n\n  getStdout() {\n    return this._stdout;\n  }\n\n  getStderr() {\n    return this._stderr;\n  }\n\n  _getFakeStream() {\n    if (!this._fakeStream) {\n      this._fakeStream = new (_stream().PassThrough)();\n    }\n\n    return this._fakeStream;\n  }\n}\n\nexports.default = ChildProcessWorker;\n"]},"metadata":{},"sourceType":"script"}