{"ast":null,"code":"'use strict';\n\nvar path = require('path');\n\nvar fs = require('fs');\n\nvar commonDir = require('commondir');\n\nvar pkgDir = require('pkg-dir');\n\nvar makeDir = require('make-dir');\n\nvar _process = process,\n    env = _process.env,\n    cwd = _process.cwd;\n\nvar isWritable = function isWritable(path) {\n  try {\n    fs.accessSync(path, fs.constants.W_OK);\n    return true;\n  } catch (_) {\n    return false;\n  }\n};\n\nfunction useDirectory(directory, options) {\n  if (options.create) {\n    makeDir.sync(directory);\n  }\n\n  if (options.thunk) {\n    return function () {\n      for (var _len = arguments.length, arguments_ = new Array(_len), _key = 0; _key < _len; _key++) {\n        arguments_[_key] = arguments[_key];\n      }\n\n      return path.join.apply(path, [directory].concat(arguments_));\n    };\n  }\n\n  return directory;\n}\n\nfunction getNodeModuleDirectory(directory) {\n  var nodeModules = path.join(directory, 'node_modules');\n\n  if (!isWritable(nodeModules) && (fs.existsSync(nodeModules) || !isWritable(path.join(directory)))) {\n    return;\n  }\n\n  return nodeModules;\n}\n\nmodule.exports = function () {\n  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n  if (env.CACHE_DIR && !['true', 'false', '1', '0'].includes(env.CACHE_DIR)) {\n    return useDirectory(path.join(env.CACHE_DIR, 'find-cache-dir'), options);\n  }\n\n  var _options$cwd = options.cwd,\n      directory = _options$cwd === void 0 ? cwd() : _options$cwd;\n\n  if (options.files) {\n    directory = commonDir(directory, options.files);\n  }\n\n  directory = pkgDir.sync(directory);\n\n  if (!directory) {\n    return;\n  }\n\n  var nodeModules = getNodeModuleDirectory(directory);\n\n  if (!nodeModules) {\n    return undefined;\n  }\n\n  return useDirectory(path.join(directory, 'node_modules', '.cache', options.name), options);\n};","map":{"version":3,"sources":["/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/find-cache-dir/index.js"],"names":["path","require","fs","commonDir","pkgDir","makeDir","process","env","cwd","isWritable","accessSync","constants","W_OK","_","useDirectory","directory","options","create","sync","thunk","arguments_","join","getNodeModuleDirectory","nodeModules","existsSync","module","exports","CACHE_DIR","includes","files","undefined","name"],"mappings":"AAAA;;AACA,IAAMA,IAAI,GAAGC,OAAO,CAAC,MAAD,CAApB;;AACA,IAAMC,EAAE,GAAGD,OAAO,CAAC,IAAD,CAAlB;;AACA,IAAME,SAAS,GAAGF,OAAO,CAAC,WAAD,CAAzB;;AACA,IAAMG,MAAM,GAAGH,OAAO,CAAC,SAAD,CAAtB;;AACA,IAAMI,OAAO,GAAGJ,OAAO,CAAC,UAAD,CAAvB;;AAEA,eAAmBK,OAAnB;AAAA,IAAOC,GAAP,YAAOA,GAAP;AAAA,IAAYC,GAAZ,YAAYA,GAAZ;;AAEA,IAAMC,UAAU,GAAG,SAAbA,UAAa,CAAAT,IAAI,EAAI;AAC1B,MAAI;AACHE,IAAAA,EAAE,CAACQ,UAAH,CAAcV,IAAd,EAAoBE,EAAE,CAACS,SAAH,CAAaC,IAAjC;AACA,WAAO,IAAP;AACA,GAHD,CAGE,OAAOC,CAAP,EAAU;AACX,WAAO,KAAP;AACA;AACD,CAPD;;AASA,SAASC,YAAT,CAAsBC,SAAtB,EAAiCC,OAAjC,EAA0C;AACzC,MAAIA,OAAO,CAACC,MAAZ,EAAoB;AACnBZ,IAAAA,OAAO,CAACa,IAAR,CAAaH,SAAb;AACA;;AAED,MAAIC,OAAO,CAACG,KAAZ,EAAmB;AAClB,WAAO;AAAA,wCAAIC,UAAJ;AAAIA,QAAAA,UAAJ;AAAA;;AAAA,aAAmBpB,IAAI,CAACqB,IAAL,OAAArB,IAAI,GAAMe,SAAN,SAAoBK,UAApB,EAAvB;AAAA,KAAP;AACA;;AAED,SAAOL,SAAP;AACA;;AAED,SAASO,sBAAT,CAAgCP,SAAhC,EAA2C;AAC1C,MAAMQ,WAAW,GAAGvB,IAAI,CAACqB,IAAL,CAAUN,SAAV,EAAqB,cAArB,CAApB;;AAEA,MACC,CAACN,UAAU,CAACc,WAAD,CAAX,KACCrB,EAAE,CAACsB,UAAH,CAAcD,WAAd,KAA8B,CAACd,UAAU,CAACT,IAAI,CAACqB,IAAL,CAAUN,SAAV,CAAD,CAD1C,CADD,EAGE;AACD;AACA;;AAED,SAAOQ,WAAP;AACA;;AAEDE,MAAM,CAACC,OAAP,GAAiB,YAAkB;AAAA,MAAjBV,OAAiB,uEAAP,EAAO;;AAClC,MAAIT,GAAG,CAACoB,SAAJ,IAAiB,CAAC,CAAC,MAAD,EAAS,OAAT,EAAkB,GAAlB,EAAuB,GAAvB,EAA4BC,QAA5B,CAAqCrB,GAAG,CAACoB,SAAzC,CAAtB,EAA2E;AAC1E,WAAOb,YAAY,CAACd,IAAI,CAACqB,IAAL,CAAUd,GAAG,CAACoB,SAAd,EAAyB,gBAAzB,CAAD,EAA6CX,OAA7C,CAAnB;AACA;;AAED,qBAA+BA,OAA/B,CAAKR,GAAL;AAAA,MAAUO,SAAV,6BAAsBP,GAAG,EAAzB;;AAEA,MAAIQ,OAAO,CAACa,KAAZ,EAAmB;AAClBd,IAAAA,SAAS,GAAGZ,SAAS,CAACY,SAAD,EAAYC,OAAO,CAACa,KAApB,CAArB;AACA;;AAEDd,EAAAA,SAAS,GAAGX,MAAM,CAACc,IAAP,CAAYH,SAAZ,CAAZ;;AAEA,MAAI,CAACA,SAAL,EAAgB;AACf;AACA;;AAED,MAAMQ,WAAW,GAAGD,sBAAsB,CAACP,SAAD,CAA1C;;AACA,MAAI,CAACQ,WAAL,EAAkB;AACjB,WAAOO,SAAP;AACA;;AAED,SAAOhB,YAAY,CAACd,IAAI,CAACqB,IAAL,CAAUN,SAAV,EAAqB,cAArB,EAAqC,QAArC,EAA+CC,OAAO,CAACe,IAAvD,CAAD,EAA+Df,OAA/D,CAAnB;AACA,CAvBD","sourcesContent":["'use strict';\nconst path = require('path');\nconst fs = require('fs');\nconst commonDir = require('commondir');\nconst pkgDir = require('pkg-dir');\nconst makeDir = require('make-dir');\n\nconst {env, cwd} = process;\n\nconst isWritable = path => {\n\ttry {\n\t\tfs.accessSync(path, fs.constants.W_OK);\n\t\treturn true;\n\t} catch (_) {\n\t\treturn false;\n\t}\n};\n\nfunction useDirectory(directory, options) {\n\tif (options.create) {\n\t\tmakeDir.sync(directory);\n\t}\n\n\tif (options.thunk) {\n\t\treturn (...arguments_) => path.join(directory, ...arguments_);\n\t}\n\n\treturn directory;\n}\n\nfunction getNodeModuleDirectory(directory) {\n\tconst nodeModules = path.join(directory, 'node_modules');\n\n\tif (\n\t\t!isWritable(nodeModules) &&\n\t\t(fs.existsSync(nodeModules) || !isWritable(path.join(directory)))\n\t) {\n\t\treturn;\n\t}\n\n\treturn nodeModules;\n}\n\nmodule.exports = (options = {}) => {\n\tif (env.CACHE_DIR && !['true', 'false', '1', '0'].includes(env.CACHE_DIR)) {\n\t\treturn useDirectory(path.join(env.CACHE_DIR, 'find-cache-dir'), options);\n\t}\n\n\tlet {cwd: directory = cwd()} = options;\n\n\tif (options.files) {\n\t\tdirectory = commonDir(directory, options.files);\n\t}\n\n\tdirectory = pkgDir.sync(directory);\n\n\tif (!directory) {\n\t\treturn;\n\t}\n\n\tconst nodeModules = getNodeModuleDirectory(directory);\n\tif (!nodeModules) {\n\t\treturn undefined;\n\t}\n\n\treturn useDirectory(path.join(directory, 'node_modules', '.cache', options.name), options);\n};\n"]},"metadata":{},"sourceType":"script"}