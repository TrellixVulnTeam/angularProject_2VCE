{"ast":null,"code":"var _classCallCheck = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/createClass\");\n\nvar flatted = require('flatted');\n\nvar levels = require('./levels');\n/**\n * @name LoggingEvent\n * @namespace Log4js\n */\n\n\nvar LoggingEvent = /*#__PURE__*/function () {\n  \"use strict\";\n\n  /**\n   * Models a logging event.\n   * @constructor\n   * @param {string} categoryName name of category\n   * @param {Log4js.Level} level level of message\n   * @param {Array} data objects to log\n   * @author Seth Chisamore\n   */\n  function LoggingEvent(categoryName, level, data, context, location) {\n    _classCallCheck(this, LoggingEvent);\n\n    this.startTime = new Date();\n    this.categoryName = categoryName;\n    this.data = data;\n    this.level = level;\n    this.context = Object.assign({}, context);\n    this.pid = process.pid;\n\n    if (location) {\n      this.functionName = location.functionName;\n      this.fileName = location.fileName;\n      this.lineNumber = location.lineNumber;\n      this.columnNumber = location.columnNumber;\n      this.callStack = location.callStack;\n    }\n  }\n\n  _createClass(LoggingEvent, [{\n    key: \"serialise\",\n    value: function serialise() {\n      var logData = this.data.map(function (e) {\n        // JSON.stringify(new Error('test')) returns {}, which is not really useful for us.\n        // The following allows us to serialize errors correctly.\n        if (e && e.message && e.stack) {\n          e = Object.assign({\n            message: e.message,\n            stack: e.stack\n          }, e);\n        }\n\n        return e;\n      });\n      this.data = logData;\n      return flatted.stringify(this);\n    }\n  }], [{\n    key: \"deserialise\",\n    value: function deserialise(serialised) {\n      var event;\n\n      try {\n        var rehydratedEvent = flatted.parse(serialised);\n        rehydratedEvent.data = rehydratedEvent.data.map(function (e) {\n          if (e && e.message && e.stack) {\n            var fakeError = new Error(e);\n            Object.keys(e).forEach(function (key) {\n              fakeError[key] = e[key];\n            });\n            e = fakeError;\n          }\n\n          return e;\n        });\n        event = new LoggingEvent(rehydratedEvent.categoryName, levels.getLevel(rehydratedEvent.level.levelStr), rehydratedEvent.data, rehydratedEvent.context);\n        event.startTime = new Date(rehydratedEvent.startTime);\n        event.pid = rehydratedEvent.pid;\n        event.cluster = rehydratedEvent.cluster;\n      } catch (e) {\n        event = new LoggingEvent('log4js', levels.ERROR, ['Unable to parse log:', serialised, 'because: ', e]);\n      }\n\n      return event;\n    }\n  }]);\n\n  return LoggingEvent;\n}();\n\nmodule.exports = LoggingEvent;","map":{"version":3,"sources":["/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/log4js/lib/LoggingEvent.js"],"names":["flatted","require","levels","LoggingEvent","categoryName","level","data","context","location","startTime","Date","Object","assign","pid","process","functionName","fileName","lineNumber","columnNumber","callStack","logData","map","e","message","stack","stringify","serialised","event","rehydratedEvent","parse","fakeError","Error","keys","forEach","key","getLevel","levelStr","cluster","ERROR","module","exports"],"mappings":"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","sourcesContent":["const flatted = require('flatted');\nconst levels = require('./levels');\n\n/**\n * @name LoggingEvent\n * @namespace Log4js\n */\nclass LoggingEvent {\n  /**\n   * Models a logging event.\n   * @constructor\n   * @param {string} categoryName name of category\n   * @param {Log4js.Level} level level of message\n   * @param {Array} data objects to log\n   * @author Seth Chisamore\n   */\n  constructor(categoryName, level, data, context, location) {\n    this.startTime = new Date();\n    this.categoryName = categoryName;\n    this.data = data;\n    this.level = level;\n    this.context = Object.assign({}, context);\n    this.pid = process.pid;\n\n    if (location) {\n      this.functionName = location.functionName;\n      this.fileName = location.fileName;\n      this.lineNumber = location.lineNumber;\n      this.columnNumber = location.columnNumber;\n      this.callStack = location.callStack;\n    }\n  }\n\n  serialise() {\n    const logData = this.data.map((e) => {\n      // JSON.stringify(new Error('test')) returns {}, which is not really useful for us.\n      // The following allows us to serialize errors correctly.\n      if (e && e.message && e.stack) {\n        e = Object.assign({ message: e.message, stack: e.stack }, e);\n      }\n      return e;\n    });\n    this.data = logData;\n    return flatted.stringify(this);\n  }\n\n  static deserialise(serialised) {\n    let event;\n    try {\n      const rehydratedEvent = flatted.parse(serialised);\n      rehydratedEvent.data = rehydratedEvent.data.map((e) => {\n        if (e && e.message && e.stack) {\n          const fakeError = new Error(e);\n          Object.keys(e).forEach((key) => { fakeError[key] = e[key]; });\n          e = fakeError;\n        }\n        return e;\n      });\n      event = new LoggingEvent(\n        rehydratedEvent.categoryName,\n        levels.getLevel(rehydratedEvent.level.levelStr),\n        rehydratedEvent.data,\n        rehydratedEvent.context\n      );\n      event.startTime = new Date(rehydratedEvent.startTime);\n      event.pid = rehydratedEvent.pid;\n      event.cluster = rehydratedEvent.cluster;\n    } catch (e) {\n      event = new LoggingEvent(\n        'log4js',\n        levels.ERROR,\n        ['Unable to parse log:', serialised, 'because: ', e]\n      );\n    }\n\n    return event;\n  }\n}\n\nmodule.exports = LoggingEvent;\n"]},"metadata":{},"sourceType":"script"}