{"ast":null,"code":"'use strict';\n/**\n * `list` type prompt\n */\n\nvar _classCallCheck = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar _ = {\n  isNumber: require('lodash/isNumber'),\n  findIndex: require('lodash/findIndex'),\n  isString: require('lodash/isString')\n};\n\nvar chalk = require('chalk');\n\nvar figures = require('figures');\n\nvar cliCursor = require('cli-cursor');\n\nvar runAsync = require('run-async');\n\nvar _require = require('rxjs/operators'),\n    flatMap = _require.flatMap,\n    map = _require.map,\n    take = _require.take,\n    takeUntil = _require.takeUntil;\n\nvar Base = require('./base');\n\nvar observe = require('../utils/events');\n\nvar Paginator = require('../utils/paginator');\n\nvar incrementListIndex = require('../utils/incrementListIndex');\n\nvar ListPrompt = /*#__PURE__*/function (_Base) {\n  _inherits(ListPrompt, _Base);\n\n  var _super = _createSuper(ListPrompt);\n\n  function ListPrompt(questions, rl, answers) {\n    var _this;\n\n    _classCallCheck(this, ListPrompt);\n\n    _this = _super.call(this, questions, rl, answers);\n\n    if (!_this.opt.choices) {\n      _this.throwParamError('choices');\n    }\n\n    _this.firstRender = true;\n    _this.selected = 0;\n    var def = _this.opt.default; // If def is a Number, then use as index. Otherwise, check for value.\n\n    if (_.isNumber(def) && def >= 0 && def < _this.opt.choices.realLength) {\n      _this.selected = def;\n    } else if (!_.isNumber(def) && def != null) {\n      var index = _.findIndex(_this.opt.choices.realChoices, function (_ref) {\n        var value = _ref.value;\n        return value === def;\n      });\n\n      _this.selected = Math.max(index, 0);\n    } // Make sure no default is set (so it won't be printed)\n\n\n    _this.opt.default = null;\n    var shouldLoop = _this.opt.loop === undefined ? true : _this.opt.loop;\n    _this.paginator = new Paginator(_this.screen, {\n      isInfinite: shouldLoop\n    });\n    return _this;\n  }\n  /**\n   * Start the Inquiry session\n   * @param  {Function} cb      Callback when prompt is done\n   * @return {this}\n   */\n\n\n  _createClass(ListPrompt, [{\n    key: \"_run\",\n    value: function _run(cb) {\n      this.done = cb;\n      var self = this;\n      var events = observe(this.rl);\n      events.normalizedUpKey.pipe(takeUntil(events.line)).forEach(this.onUpKey.bind(this));\n      events.normalizedDownKey.pipe(takeUntil(events.line)).forEach(this.onDownKey.bind(this));\n      events.numberKey.pipe(takeUntil(events.line)).forEach(this.onNumberKey.bind(this));\n      events.line.pipe(take(1), map(this.getCurrentValue.bind(this)), flatMap(function (value) {\n        return runAsync(self.opt.filter)(value).catch(function (err) {\n          return err;\n        });\n      })).forEach(this.onSubmit.bind(this)); // Init the prompt\n\n      cliCursor.hide();\n      this.render();\n      return this;\n    }\n    /**\n     * Render the prompt to screen\n     * @return {ListPrompt} self\n     */\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      // Render question\n      var message = this.getQuestion();\n\n      if (this.firstRender) {\n        message += chalk.dim('(Use arrow keys)');\n      } // Render choices or answer depending on the state\n\n\n      if (this.status === 'answered') {\n        message += chalk.cyan(this.opt.choices.getChoice(this.selected).short);\n      } else {\n        var choicesStr = listRender(this.opt.choices, this.selected);\n        var indexPosition = this.opt.choices.indexOf(this.opt.choices.getChoice(this.selected));\n        var realIndexPosition = this.opt.choices.reduce(function (acc, value, i) {\n          // Dont count lines past the choice we are looking at\n          if (i > indexPosition) {\n            return acc;\n          } // Add line if it's a separator\n\n\n          if (value.type === 'separator') {\n            return acc + 1;\n          }\n\n          var l = value.name; // Non-strings take up one line\n\n          if (typeof l !== 'string') {\n            return acc + 1;\n          } // Calculate lines taken up by string\n\n\n          l = l.split('\\n');\n          return acc + l.length;\n        }, 0) - 1;\n        message += '\\n' + this.paginator.paginate(choicesStr, realIndexPosition, this.opt.pageSize);\n      }\n\n      this.firstRender = false;\n      this.screen.render(message);\n    }\n    /**\n     * When user press `enter` key\n     */\n\n  }, {\n    key: \"onSubmit\",\n    value: function onSubmit(value) {\n      this.status = 'answered'; // Rerender prompt\n\n      this.render();\n      this.screen.done();\n      cliCursor.show();\n      this.done(value);\n    }\n  }, {\n    key: \"getCurrentValue\",\n    value: function getCurrentValue() {\n      return this.opt.choices.getChoice(this.selected).value;\n    }\n    /**\n     * When user press a key\n     */\n\n  }, {\n    key: \"onUpKey\",\n    value: function onUpKey() {\n      this.selected = incrementListIndex(this.selected, 'up', this.opt);\n      this.render();\n    }\n  }, {\n    key: \"onDownKey\",\n    value: function onDownKey() {\n      this.selected = incrementListIndex(this.selected, 'down', this.opt);\n      this.render();\n    }\n  }, {\n    key: \"onNumberKey\",\n    value: function onNumberKey(input) {\n      if (input <= this.opt.choices.realLength) {\n        this.selected = input - 1;\n      }\n\n      this.render();\n    }\n  }]);\n\n  return ListPrompt;\n}(Base);\n/**\n * Function for rendering list choices\n * @param  {Number} pointer Position of the pointer\n * @return {String}         Rendered content\n */\n\n\nfunction listRender(choices, pointer) {\n  var output = '';\n  var separatorOffset = 0;\n  choices.forEach(function (choice, i) {\n    if (choice.type === 'separator') {\n      separatorOffset++;\n      output += '  ' + choice + '\\n';\n      return;\n    }\n\n    if (choice.disabled) {\n      separatorOffset++;\n      output += '  - ' + choice.name;\n      output += ' (' + (_.isString(choice.disabled) ? choice.disabled : 'Disabled') + ')';\n      output += '\\n';\n      return;\n    }\n\n    var isSelected = i - separatorOffset === pointer;\n    var line = (isSelected ? figures.pointer + ' ' : '  ') + choice.name;\n\n    if (isSelected) {\n      line = chalk.cyan(line);\n    }\n\n    output += line + ' \\n';\n  });\n  return output.replace(/\\n$/, '');\n}\n\nmodule.exports = ListPrompt;","map":{"version":3,"sources":["/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/inquirer/lib/prompts/list.js"],"names":["_","isNumber","require","findIndex","isString","chalk","figures","cliCursor","runAsync","flatMap","map","take","takeUntil","Base","observe","Paginator","incrementListIndex","ListPrompt","questions","rl","answers","opt","choices","throwParamError","firstRender","selected","def","default","realLength","index","realChoices","value","Math","max","shouldLoop","loop","undefined","paginator","screen","isInfinite","cb","done","self","events","normalizedUpKey","pipe","line","forEach","onUpKey","bind","normalizedDownKey","onDownKey","numberKey","onNumberKey","getCurrentValue","filter","catch","err","onSubmit","hide","render","message","getQuestion","dim","status","cyan","getChoice","short","choicesStr","listRender","indexPosition","indexOf","realIndexPosition","reduce","acc","i","type","l","name","split","length","paginate","pageSize","show","input","pointer","output","separatorOffset","choice","disabled","isSelected","replace","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n/**\n * `list` type prompt\n */\n\nvar _ = {\n  isNumber: require('lodash/isNumber'),\n  findIndex: require('lodash/findIndex'),\n  isString: require('lodash/isString'),\n};\nvar chalk = require('chalk');\nvar figures = require('figures');\nvar cliCursor = require('cli-cursor');\nvar runAsync = require('run-async');\nvar { flatMap, map, take, takeUntil } = require('rxjs/operators');\nvar Base = require('./base');\nvar observe = require('../utils/events');\nvar Paginator = require('../utils/paginator');\nvar incrementListIndex = require('../utils/incrementListIndex');\n\nclass ListPrompt extends Base {\n  constructor(questions, rl, answers) {\n    super(questions, rl, answers);\n\n    if (!this.opt.choices) {\n      this.throwParamError('choices');\n    }\n\n    this.firstRender = true;\n    this.selected = 0;\n\n    var def = this.opt.default;\n\n    // If def is a Number, then use as index. Otherwise, check for value.\n    if (_.isNumber(def) && def >= 0 && def < this.opt.choices.realLength) {\n      this.selected = def;\n    } else if (!_.isNumber(def) && def != null) {\n      let index = _.findIndex(this.opt.choices.realChoices, ({ value }) => value === def);\n      this.selected = Math.max(index, 0);\n    }\n\n    // Make sure no default is set (so it won't be printed)\n    this.opt.default = null;\n\n    const shouldLoop = this.opt.loop === undefined ? true : this.opt.loop;\n    this.paginator = new Paginator(this.screen, { isInfinite: shouldLoop });\n  }\n\n  /**\n   * Start the Inquiry session\n   * @param  {Function} cb      Callback when prompt is done\n   * @return {this}\n   */\n\n  _run(cb) {\n    this.done = cb;\n\n    var self = this;\n\n    var events = observe(this.rl);\n    events.normalizedUpKey.pipe(takeUntil(events.line)).forEach(this.onUpKey.bind(this));\n    events.normalizedDownKey\n      .pipe(takeUntil(events.line))\n      .forEach(this.onDownKey.bind(this));\n    events.numberKey.pipe(takeUntil(events.line)).forEach(this.onNumberKey.bind(this));\n    events.line\n      .pipe(\n        take(1),\n        map(this.getCurrentValue.bind(this)),\n        flatMap((value) => runAsync(self.opt.filter)(value).catch((err) => err))\n      )\n      .forEach(this.onSubmit.bind(this));\n\n    // Init the prompt\n    cliCursor.hide();\n    this.render();\n\n    return this;\n  }\n\n  /**\n   * Render the prompt to screen\n   * @return {ListPrompt} self\n   */\n\n  render() {\n    // Render question\n    var message = this.getQuestion();\n\n    if (this.firstRender) {\n      message += chalk.dim('(Use arrow keys)');\n    }\n\n    // Render choices or answer depending on the state\n    if (this.status === 'answered') {\n      message += chalk.cyan(this.opt.choices.getChoice(this.selected).short);\n    } else {\n      var choicesStr = listRender(this.opt.choices, this.selected);\n      var indexPosition = this.opt.choices.indexOf(\n        this.opt.choices.getChoice(this.selected)\n      );\n      var realIndexPosition =\n        this.opt.choices.reduce(function (acc, value, i) {\n          // Dont count lines past the choice we are looking at\n          if (i > indexPosition) {\n            return acc;\n          }\n          // Add line if it's a separator\n          if (value.type === 'separator') {\n            return acc + 1;\n          }\n\n          var l = value.name;\n          // Non-strings take up one line\n          if (typeof l !== 'string') {\n            return acc + 1;\n          }\n\n          // Calculate lines taken up by string\n          l = l.split('\\n');\n          return acc + l.length;\n        }, 0) - 1;\n      message +=\n        '\\n' + this.paginator.paginate(choicesStr, realIndexPosition, this.opt.pageSize);\n    }\n\n    this.firstRender = false;\n\n    this.screen.render(message);\n  }\n\n  /**\n   * When user press `enter` key\n   */\n\n  onSubmit(value) {\n    this.status = 'answered';\n\n    // Rerender prompt\n    this.render();\n\n    this.screen.done();\n    cliCursor.show();\n    this.done(value);\n  }\n\n  getCurrentValue() {\n    return this.opt.choices.getChoice(this.selected).value;\n  }\n\n  /**\n   * When user press a key\n   */\n  onUpKey() {\n    this.selected = incrementListIndex(this.selected, 'up', this.opt);\n    this.render();\n  }\n\n  onDownKey() {\n    this.selected = incrementListIndex(this.selected, 'down', this.opt);\n    this.render();\n  }\n\n  onNumberKey(input) {\n    if (input <= this.opt.choices.realLength) {\n      this.selected = input - 1;\n    }\n\n    this.render();\n  }\n}\n\n/**\n * Function for rendering list choices\n * @param  {Number} pointer Position of the pointer\n * @return {String}         Rendered content\n */\nfunction listRender(choices, pointer) {\n  var output = '';\n  var separatorOffset = 0;\n\n  choices.forEach((choice, i) => {\n    if (choice.type === 'separator') {\n      separatorOffset++;\n      output += '  ' + choice + '\\n';\n      return;\n    }\n\n    if (choice.disabled) {\n      separatorOffset++;\n      output += '  - ' + choice.name;\n      output += ' (' + (_.isString(choice.disabled) ? choice.disabled : 'Disabled') + ')';\n      output += '\\n';\n      return;\n    }\n\n    var isSelected = i - separatorOffset === pointer;\n    var line = (isSelected ? figures.pointer + ' ' : '  ') + choice.name;\n    if (isSelected) {\n      line = chalk.cyan(line);\n    }\n\n    output += line + ' \\n';\n  });\n\n  return output.replace(/\\n$/, '');\n}\n\nmodule.exports = ListPrompt;\n"]},"metadata":{},"sourceType":"script"}