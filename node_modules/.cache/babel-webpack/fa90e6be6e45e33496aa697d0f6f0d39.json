{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _postcss = require(\"postcss\");\n\nvar _commentRemover = require(\"./lib/commentRemover\");\n\nvar _commentRemover2 = _interopRequireDefault(_commentRemover);\n\nvar _commentParser = require(\"./lib/commentParser\");\n\nvar _commentParser2 = _interopRequireDefault(_commentParser);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar space = _postcss.list.space;\nexports.default = (0, _postcss.plugin)(\"postcss-discard-comments\", function () {\n  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var remover = new _commentRemover2.default(opts);\n  var matcherCache = {};\n  var replacerCache = {};\n\n  function matchesComments(source) {\n    if (matcherCache[source]) {\n      return matcherCache[source];\n    }\n\n    var result = (0, _commentParser2.default)(source).filter(function (_ref) {\n      var _ref2 = _slicedToArray(_ref, 1),\n          type = _ref2[0];\n\n      return type;\n    });\n    matcherCache[source] = result;\n    return result;\n  }\n\n  function replaceComments(source) {\n    var separator = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \" \";\n    var key = source + \"@|@\" + separator;\n\n    if (replacerCache[key]) {\n      return replacerCache[key];\n    }\n\n    var parsed = (0, _commentParser2.default)(source).reduce(function (value, _ref3) {\n      var _ref4 = _slicedToArray(_ref3, 3),\n          type = _ref4[0],\n          start = _ref4[1],\n          end = _ref4[2];\n\n      var contents = source.slice(start, end);\n\n      if (!type) {\n        return value + contents;\n      }\n\n      if (remover.canRemove(contents)) {\n        return value + separator;\n      }\n\n      return \"\".concat(value, \"/*\").concat(contents, \"*/\");\n    }, \"\");\n    var result = space(parsed).join(\" \");\n    replacerCache[key] = result;\n    return result;\n  }\n\n  return function (css) {\n    css.walk(function (node) {\n      if (node.type === \"comment\" && remover.canRemove(node.text)) {\n        node.remove();\n        return;\n      }\n\n      if (node.raws.between) {\n        node.raws.between = replaceComments(node.raws.between);\n      }\n\n      if (node.type === \"decl\") {\n        if (node.raws.value && node.raws.value.raw) {\n          if (node.raws.value.value === node.value) {\n            node.value = replaceComments(node.raws.value.raw);\n          } else {\n            node.value = replaceComments(node.value);\n          }\n\n          node.raws.value = null;\n        }\n\n        if (node.raws.important) {\n          node.raws.important = replaceComments(node.raws.important);\n          var b = matchesComments(node.raws.important);\n          node.raws.important = b.length ? node.raws.important : \"!important\";\n        }\n\n        return;\n      }\n\n      if (node.type === \"rule\" && node.raws.selector && node.raws.selector.raw) {\n        node.raws.selector.raw = replaceComments(node.raws.selector.raw, \"\");\n        return;\n      }\n\n      if (node.type === \"atrule\") {\n        if (node.raws.afterName) {\n          var commentsReplaced = replaceComments(node.raws.afterName);\n\n          if (!commentsReplaced.length) {\n            node.raws.afterName = commentsReplaced + \" \";\n          } else {\n            node.raws.afterName = \" \" + commentsReplaced + \" \";\n          }\n        }\n\n        if (node.raws.params && node.raws.params.raw) {\n          node.raws.params.raw = replaceComments(node.raws.params.raw);\n        }\n      }\n    });\n  };\n});\nmodule.exports = exports[\"default\"];","map":{"version":3,"sources":["/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/postcss-discard-comments/dist/index.js"],"names":["Object","defineProperty","exports","value","_postcss","require","_commentRemover","_commentRemover2","_interopRequireDefault","_commentParser","_commentParser2","obj","__esModule","default","space","list","plugin","opts","remover","matcherCache","replacerCache","matchesComments","source","result","filter","type","replaceComments","separator","key","parsed","reduce","start","end","contents","slice","canRemove","join","css","walk","node","text","remove","raws","between","raw","important","b","length","selector","afterName","commentsReplaced","params","module"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _postcss = require(\"postcss\");\n\nvar _commentRemover = require(\"./lib/commentRemover\");\n\nvar _commentRemover2 = _interopRequireDefault(_commentRemover);\n\nvar _commentParser = require(\"./lib/commentParser\");\n\nvar _commentParser2 = _interopRequireDefault(_commentParser);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nconst { space } = _postcss.list;\n\nexports.default = (0, _postcss.plugin)(\"postcss-discard-comments\", (opts = {}) => {\n    const remover = new _commentRemover2.default(opts);\n    const matcherCache = {};\n    const replacerCache = {};\n\n    function matchesComments(source) {\n        if (matcherCache[source]) {\n            return matcherCache[source];\n        }\n\n        const result = (0, _commentParser2.default)(source).filter(([type]) => type);\n\n        matcherCache[source] = result;\n\n        return result;\n    }\n\n    function replaceComments(source, separator = \" \") {\n        const key = source + \"@|@\" + separator;\n\n        if (replacerCache[key]) {\n            return replacerCache[key];\n        }\n\n        const parsed = (0, _commentParser2.default)(source).reduce((value, [type, start, end]) => {\n            const contents = source.slice(start, end);\n\n            if (!type) {\n                return value + contents;\n            }\n\n            if (remover.canRemove(contents)) {\n                return value + separator;\n            }\n\n            return `${value}/*${contents}*/`;\n        }, \"\");\n\n        const result = space(parsed).join(\" \");\n\n        replacerCache[key] = result;\n\n        return result;\n    }\n\n    return css => {\n        css.walk(node => {\n            if (node.type === \"comment\" && remover.canRemove(node.text)) {\n                node.remove();\n\n                return;\n            }\n\n            if (node.raws.between) {\n                node.raws.between = replaceComments(node.raws.between);\n            }\n\n            if (node.type === \"decl\") {\n                if (node.raws.value && node.raws.value.raw) {\n                    if (node.raws.value.value === node.value) {\n                        node.value = replaceComments(node.raws.value.raw);\n                    } else {\n                        node.value = replaceComments(node.value);\n                    }\n\n                    node.raws.value = null;\n                }\n\n                if (node.raws.important) {\n                    node.raws.important = replaceComments(node.raws.important);\n\n                    const b = matchesComments(node.raws.important);\n\n                    node.raws.important = b.length ? node.raws.important : \"!important\";\n                }\n\n                return;\n            }\n\n            if (node.type === \"rule\" && node.raws.selector && node.raws.selector.raw) {\n                node.raws.selector.raw = replaceComments(node.raws.selector.raw, \"\");\n\n                return;\n            }\n\n            if (node.type === \"atrule\") {\n                if (node.raws.afterName) {\n                    const commentsReplaced = replaceComments(node.raws.afterName);\n\n                    if (!commentsReplaced.length) {\n                        node.raws.afterName = commentsReplaced + \" \";\n                    } else {\n                        node.raws.afterName = \" \" + commentsReplaced + \" \";\n                    }\n                }\n\n                if (node.raws.params && node.raws.params.raw) {\n                    node.raws.params.raw = replaceComments(node.raws.params.raw);\n                }\n            }\n        });\n    };\n});\nmodule.exports = exports[\"default\"];"]},"metadata":{},"sourceType":"script"}