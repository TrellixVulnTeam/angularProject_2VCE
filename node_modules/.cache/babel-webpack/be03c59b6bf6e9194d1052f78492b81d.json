{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/createClass\");\n\nvar crypto = require('crypto');\n\nvar figgyPudding = require('figgy-pudding');\n\nvar Transform = require('stream').Transform;\n\nvar SPEC_ALGORITHMS = ['sha256', 'sha384', 'sha512'];\nvar BASE64_REGEX = /^[a-z0-9+/]+(?:=?=?)$/i;\nvar SRI_REGEX = /^([^-]+)-([^?]+)([?\\S*]*)$/;\nvar STRICT_SRI_REGEX = /^([^-]+)-([A-Za-z0-9+/=]{44,88})(\\?[\\x21-\\x7E]*)?$/;\nvar VCHAR_REGEX = /^[\\x21-\\x7E]+$/;\nvar SsriOpts = figgyPudding({\n  algorithms: {\n    default: ['sha512']\n  },\n  error: {\n    default: false\n  },\n  integrity: {},\n  options: {\n    default: []\n  },\n  pickAlgorithm: {\n    default: function _default() {\n      return getPrioritizedHash;\n    }\n  },\n  Promise: {\n    default: function _default() {\n      return Promise;\n    }\n  },\n  sep: {\n    default: ' '\n  },\n  single: {\n    default: false\n  },\n  size: {},\n  strict: {\n    default: false\n  }\n});\n\nvar Hash = /*#__PURE__*/function () {\n  function Hash(hash, opts) {\n    _classCallCheck(this, Hash);\n\n    opts = SsriOpts(opts);\n    var strict = !!opts.strict;\n    this.source = hash.trim(); // 3.1. Integrity metadata (called \"Hash\" by ssri)\n    // https://w3c.github.io/webappsec-subresource-integrity/#integrity-metadata-description\n\n    var match = this.source.match(strict ? STRICT_SRI_REGEX : SRI_REGEX);\n\n    if (!match) {\n      return;\n    }\n\n    if (strict && !SPEC_ALGORITHMS.some(function (a) {\n      return a === match[1];\n    })) {\n      return;\n    }\n\n    this.algorithm = match[1];\n    this.digest = match[2];\n    var rawOpts = match[3];\n    this.options = rawOpts ? rawOpts.slice(1).split('?') : [];\n  }\n\n  _createClass(Hash, [{\n    key: \"isHash\",\n    get: function get() {\n      return true;\n    }\n  }, {\n    key: \"hexDigest\",\n    value: function hexDigest() {\n      return this.digest && Buffer.from(this.digest, 'base64').toString('hex');\n    }\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      return this.toString();\n    }\n  }, {\n    key: \"toString\",\n    value: function toString(opts) {\n      var _this = this;\n\n      opts = SsriOpts(opts);\n\n      if (opts.strict) {\n        // Strict mode enforces the standard as close to the foot of the\n        // letter as it can.\n        if (!( // The spec has very restricted productions for algorithms.\n        // https://www.w3.org/TR/CSP2/#source-list-syntax\n        SPEC_ALGORITHMS.some(function (x) {\n          return x === _this.algorithm;\n        }) && // Usually, if someone insists on using a \"different\" base64, we\n        // leave it as-is, since there's multiple standards, and the\n        // specified is not a URL-safe variant.\n        // https://www.w3.org/TR/CSP2/#base64_value\n        this.digest.match(BASE64_REGEX) && // Option syntax is strictly visual chars.\n        // https://w3c.github.io/webappsec-subresource-integrity/#grammardef-option-expression\n        // https://tools.ietf.org/html/rfc5234#appendix-B.1\n        (this.options || []).every(function (opt) {\n          return opt.match(VCHAR_REGEX);\n        }))) {\n          return '';\n        }\n      }\n\n      var options = this.options && this.options.length ? \"?\".concat(this.options.join('?')) : '';\n      return \"\".concat(this.algorithm, \"-\").concat(this.digest).concat(options);\n    }\n  }]);\n\n  return Hash;\n}();\n\nvar Integrity = /*#__PURE__*/function () {\n  function Integrity() {\n    _classCallCheck(this, Integrity);\n  }\n\n  _createClass(Integrity, [{\n    key: \"isIntegrity\",\n    get: function get() {\n      return true;\n    }\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      return this.toString();\n    }\n  }, {\n    key: \"toString\",\n    value: function toString(opts) {\n      var _this2 = this;\n\n      opts = SsriOpts(opts);\n      var sep = opts.sep || ' ';\n\n      if (opts.strict) {\n        // Entries must be separated by whitespace, according to spec.\n        sep = sep.replace(/\\S+/g, ' ');\n      }\n\n      return Object.keys(this).map(function (k) {\n        return _this2[k].map(function (hash) {\n          return Hash.prototype.toString.call(hash, opts);\n        }).filter(function (x) {\n          return x.length;\n        }).join(sep);\n      }).filter(function (x) {\n        return x.length;\n      }).join(sep);\n    }\n  }, {\n    key: \"concat\",\n    value: function concat(integrity, opts) {\n      opts = SsriOpts(opts);\n      var other = typeof integrity === 'string' ? integrity : stringify(integrity, opts);\n      return parse(\"\".concat(this.toString(opts), \" \").concat(other), opts);\n    }\n  }, {\n    key: \"hexDigest\",\n    value: function hexDigest() {\n      return parse(this, {\n        single: true\n      }).hexDigest();\n    }\n  }, {\n    key: \"match\",\n    value: function match(integrity, opts) {\n      opts = SsriOpts(opts);\n      var other = parse(integrity, opts);\n      var algo = other.pickAlgorithm(opts);\n      return this[algo] && other[algo] && this[algo].find(function (hash) {\n        return other[algo].find(function (otherhash) {\n          return hash.digest === otherhash.digest;\n        });\n      }) || false;\n    }\n  }, {\n    key: \"pickAlgorithm\",\n    value: function pickAlgorithm(opts) {\n      opts = SsriOpts(opts);\n      var pickAlgorithm = opts.pickAlgorithm;\n      var keys = Object.keys(this);\n\n      if (!keys.length) {\n        throw new Error(\"No algorithms available for \".concat(JSON.stringify(this.toString())));\n      }\n\n      return keys.reduce(function (acc, algo) {\n        return pickAlgorithm(acc, algo) || acc;\n      });\n    }\n  }]);\n\n  return Integrity;\n}();\n\nmodule.exports.parse = parse;\n\nfunction parse(sri, opts) {\n  opts = SsriOpts(opts);\n\n  if (typeof sri === 'string') {\n    return _parse(sri, opts);\n  } else if (sri.algorithm && sri.digest) {\n    var fullSri = new Integrity();\n    fullSri[sri.algorithm] = [sri];\n    return _parse(stringify(fullSri, opts), opts);\n  } else {\n    return _parse(stringify(sri, opts), opts);\n  }\n}\n\nfunction _parse(integrity, opts) {\n  // 3.4.3. Parse metadata\n  // https://w3c.github.io/webappsec-subresource-integrity/#parse-metadata\n  if (opts.single) {\n    return new Hash(integrity, opts);\n  }\n\n  return integrity.trim().split(/\\s+/).reduce(function (acc, string) {\n    var hash = new Hash(string, opts);\n\n    if (hash.algorithm && hash.digest) {\n      var algo = hash.algorithm;\n\n      if (!acc[algo]) {\n        acc[algo] = [];\n      }\n\n      acc[algo].push(hash);\n    }\n\n    return acc;\n  }, new Integrity());\n}\n\nmodule.exports.stringify = stringify;\n\nfunction stringify(obj, opts) {\n  opts = SsriOpts(opts);\n\n  if (obj.algorithm && obj.digest) {\n    return Hash.prototype.toString.call(obj, opts);\n  } else if (typeof obj === 'string') {\n    return stringify(parse(obj, opts), opts);\n  } else {\n    return Integrity.prototype.toString.call(obj, opts);\n  }\n}\n\nmodule.exports.fromHex = fromHex;\n\nfunction fromHex(hexDigest, algorithm, opts) {\n  opts = SsriOpts(opts);\n  var optString = opts.options && opts.options.length ? \"?\".concat(opts.options.join('?')) : '';\n  return parse(\"\".concat(algorithm, \"-\").concat(Buffer.from(hexDigest, 'hex').toString('base64')).concat(optString), opts);\n}\n\nmodule.exports.fromData = fromData;\n\nfunction fromData(data, opts) {\n  opts = SsriOpts(opts);\n  var algorithms = opts.algorithms;\n  var optString = opts.options && opts.options.length ? \"?\".concat(opts.options.join('?')) : '';\n  return algorithms.reduce(function (acc, algo) {\n    var digest = crypto.createHash(algo).update(data).digest('base64');\n    var hash = new Hash(\"\".concat(algo, \"-\").concat(digest).concat(optString), opts);\n\n    if (hash.algorithm && hash.digest) {\n      var _algo = hash.algorithm;\n\n      if (!acc[_algo]) {\n        acc[_algo] = [];\n      }\n\n      acc[_algo].push(hash);\n    }\n\n    return acc;\n  }, new Integrity());\n}\n\nmodule.exports.fromStream = fromStream;\n\nfunction fromStream(stream, opts) {\n  opts = SsriOpts(opts);\n  var P = opts.Promise || Promise;\n  var istream = integrityStream(opts);\n  return new P(function (resolve, reject) {\n    stream.pipe(istream);\n    stream.on('error', reject);\n    istream.on('error', reject);\n    var sri;\n    istream.on('integrity', function (s) {\n      sri = s;\n    });\n    istream.on('end', function () {\n      return resolve(sri);\n    });\n    istream.on('data', function () {});\n  });\n}\n\nmodule.exports.checkData = checkData;\n\nfunction checkData(data, sri, opts) {\n  opts = SsriOpts(opts);\n  sri = parse(sri, opts);\n\n  if (!Object.keys(sri).length) {\n    if (opts.error) {\n      throw Object.assign(new Error('No valid integrity hashes to check against'), {\n        code: 'EINTEGRITY'\n      });\n    } else {\n      return false;\n    }\n  }\n\n  var algorithm = sri.pickAlgorithm(opts);\n  var digest = crypto.createHash(algorithm).update(data).digest('base64');\n  var newSri = parse({\n    algorithm: algorithm,\n    digest: digest\n  });\n  var match = newSri.match(sri, opts);\n\n  if (match || !opts.error) {\n    return match;\n  } else if (typeof opts.size === 'number' && data.length !== opts.size) {\n    var err = new Error(\"data size mismatch when checking \".concat(sri, \".\\n  Wanted: \").concat(opts.size, \"\\n  Found: \").concat(data.length));\n    err.code = 'EBADSIZE';\n    err.found = data.length;\n    err.expected = opts.size;\n    err.sri = sri;\n    throw err;\n  } else {\n    var _err = new Error(\"Integrity checksum failed when using \".concat(algorithm, \": Wanted \").concat(sri, \", but got \").concat(newSri, \". (\").concat(data.length, \" bytes)\"));\n\n    _err.code = 'EINTEGRITY';\n    _err.found = newSri;\n    _err.expected = sri;\n    _err.algorithm = algorithm;\n    _err.sri = sri;\n    throw _err;\n  }\n}\n\nmodule.exports.checkStream = checkStream;\n\nfunction checkStream(stream, sri, opts) {\n  opts = SsriOpts(opts);\n  var P = opts.Promise || Promise;\n  var checker = integrityStream(opts.concat({\n    integrity: sri\n  }));\n  return new P(function (resolve, reject) {\n    stream.pipe(checker);\n    stream.on('error', reject);\n    checker.on('error', reject);\n    var sri;\n    checker.on('verified', function (s) {\n      sri = s;\n    });\n    checker.on('end', function () {\n      return resolve(sri);\n    });\n    checker.on('data', function () {});\n  });\n}\n\nmodule.exports.integrityStream = integrityStream;\n\nfunction integrityStream(opts) {\n  opts = SsriOpts(opts); // For verification\n\n  var sri = opts.integrity && parse(opts.integrity, opts);\n  var goodSri = sri && Object.keys(sri).length;\n  var algorithm = goodSri && sri.pickAlgorithm(opts);\n  var digests = goodSri && sri[algorithm]; // Calculating stream\n\n  var algorithms = Array.from(new Set(opts.algorithms.concat(algorithm ? [algorithm] : [])));\n  var hashes = algorithms.map(crypto.createHash);\n  var streamSize = 0;\n  var stream = new Transform({\n    transform: function transform(chunk, enc, cb) {\n      streamSize += chunk.length;\n      hashes.forEach(function (h) {\n        return h.update(chunk, enc);\n      });\n      cb(null, chunk, enc);\n    }\n  }).on('end', function () {\n    var optString = opts.options && opts.options.length ? \"?\".concat(opts.options.join('?')) : '';\n    var newSri = parse(hashes.map(function (h, i) {\n      return \"\".concat(algorithms[i], \"-\").concat(h.digest('base64')).concat(optString);\n    }).join(' '), opts); // Integrity verification mode\n\n    var match = goodSri && newSri.match(sri, opts);\n\n    if (typeof opts.size === 'number' && streamSize !== opts.size) {\n      var err = new Error(\"stream size mismatch when checking \".concat(sri, \".\\n  Wanted: \").concat(opts.size, \"\\n  Found: \").concat(streamSize));\n      err.code = 'EBADSIZE';\n      err.found = streamSize;\n      err.expected = opts.size;\n      err.sri = sri;\n      stream.emit('error', err);\n    } else if (opts.integrity && !match) {\n      var _err2 = new Error(\"\".concat(sri, \" integrity checksum failed when using \").concat(algorithm, \": wanted \").concat(digests, \" but got \").concat(newSri, \". (\").concat(streamSize, \" bytes)\"));\n\n      _err2.code = 'EINTEGRITY';\n      _err2.found = newSri;\n      _err2.expected = digests;\n      _err2.algorithm = algorithm;\n      _err2.sri = sri;\n      stream.emit('error', _err2);\n    } else {\n      stream.emit('size', streamSize);\n      stream.emit('integrity', newSri);\n      match && stream.emit('verified', match);\n    }\n  });\n  return stream;\n}\n\nmodule.exports.create = createIntegrity;\n\nfunction createIntegrity(opts) {\n  opts = SsriOpts(opts);\n  var algorithms = opts.algorithms;\n  var optString = opts.options.length ? \"?\".concat(opts.options.join('?')) : '';\n  var hashes = algorithms.map(crypto.createHash);\n  return {\n    update: function update(chunk, enc) {\n      hashes.forEach(function (h) {\n        return h.update(chunk, enc);\n      });\n      return this;\n    },\n    digest: function digest(enc) {\n      var integrity = algorithms.reduce(function (acc, algo) {\n        var digest = hashes.shift().digest('base64');\n        var hash = new Hash(\"\".concat(algo, \"-\").concat(digest).concat(optString), opts);\n\n        if (hash.algorithm && hash.digest) {\n          var _algo2 = hash.algorithm;\n\n          if (!acc[_algo2]) {\n            acc[_algo2] = [];\n          }\n\n          acc[_algo2].push(hash);\n        }\n\n        return acc;\n      }, new Integrity());\n      return integrity;\n    }\n  };\n}\n\nvar NODE_HASHES = new Set(crypto.getHashes()); // This is a Best Effort™ at a reasonable priority for hash algos\n\nvar DEFAULT_PRIORITY = ['md5', 'whirlpool', 'sha1', 'sha224', 'sha256', 'sha384', 'sha512', // TODO - it's unclear _which_ of these Node will actually use as its name\n//        for the algorithm, so we guesswork it based on the OpenSSL names.\n'sha3', 'sha3-256', 'sha3-384', 'sha3-512', 'sha3_256', 'sha3_384', 'sha3_512'].filter(function (algo) {\n  return NODE_HASHES.has(algo);\n});\n\nfunction getPrioritizedHash(algo1, algo2) {\n  return DEFAULT_PRIORITY.indexOf(algo1.toLowerCase()) >= DEFAULT_PRIORITY.indexOf(algo2.toLowerCase()) ? algo1 : algo2;\n}","map":{"version":3,"sources":["/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/webpack/node_modules/ssri/index.js"],"names":["crypto","require","figgyPudding","Transform","SPEC_ALGORITHMS","BASE64_REGEX","SRI_REGEX","STRICT_SRI_REGEX","VCHAR_REGEX","SsriOpts","algorithms","default","error","integrity","options","pickAlgorithm","getPrioritizedHash","Promise","sep","single","size","strict","Hash","hash","opts","source","trim","match","some","a","algorithm","digest","rawOpts","slice","split","Buffer","from","toString","x","every","opt","length","join","Integrity","replace","Object","keys","map","k","prototype","call","filter","other","stringify","parse","hexDigest","algo","find","otherhash","Error","JSON","reduce","acc","module","exports","sri","_parse","fullSri","string","push","obj","fromHex","optString","fromData","data","createHash","update","fromStream","stream","P","istream","integrityStream","resolve","reject","pipe","on","s","checkData","assign","code","newSri","err","found","expected","checkStream","checker","concat","goodSri","digests","Array","Set","hashes","streamSize","transform","chunk","enc","cb","forEach","h","i","emit","create","createIntegrity","shift","NODE_HASHES","getHashes","DEFAULT_PRIORITY","has","algo1","algo2","indexOf","toLowerCase"],"mappings":"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","sourcesContent":["'use strict'\n\nconst crypto = require('crypto')\nconst figgyPudding = require('figgy-pudding')\nconst Transform = require('stream').Transform\n\nconst SPEC_ALGORITHMS = ['sha256', 'sha384', 'sha512']\n\nconst BASE64_REGEX = /^[a-z0-9+/]+(?:=?=?)$/i\nconst SRI_REGEX = /^([^-]+)-([^?]+)([?\\S*]*)$/\nconst STRICT_SRI_REGEX = /^([^-]+)-([A-Za-z0-9+/=]{44,88})(\\?[\\x21-\\x7E]*)?$/\nconst VCHAR_REGEX = /^[\\x21-\\x7E]+$/\n\nconst SsriOpts = figgyPudding({\n  algorithms: {default: ['sha512']},\n  error: {default: false},\n  integrity: {},\n  options: {default: []},\n  pickAlgorithm: {default: () => getPrioritizedHash},\n  Promise: {default: () => Promise},\n  sep: {default: ' '},\n  single: {default: false},\n  size: {},\n  strict: {default: false}\n})\n\nclass Hash {\n  get isHash () { return true }\n  constructor (hash, opts) {\n    opts = SsriOpts(opts)\n    const strict = !!opts.strict\n    this.source = hash.trim()\n    // 3.1. Integrity metadata (called \"Hash\" by ssri)\n    // https://w3c.github.io/webappsec-subresource-integrity/#integrity-metadata-description\n    const match = this.source.match(\n      strict\n      ? STRICT_SRI_REGEX\n      : SRI_REGEX\n    )\n    if (!match) { return }\n    if (strict && !SPEC_ALGORITHMS.some(a => a === match[1])) { return }\n    this.algorithm = match[1]\n    this.digest = match[2]\n\n    const rawOpts = match[3]\n    this.options = rawOpts ? rawOpts.slice(1).split('?') : []\n  }\n  hexDigest () {\n    return this.digest && Buffer.from(this.digest, 'base64').toString('hex')\n  }\n  toJSON () {\n    return this.toString()\n  }\n  toString (opts) {\n    opts = SsriOpts(opts)\n    if (opts.strict) {\n      // Strict mode enforces the standard as close to the foot of the\n      // letter as it can.\n      if (!(\n        // The spec has very restricted productions for algorithms.\n        // https://www.w3.org/TR/CSP2/#source-list-syntax\n        SPEC_ALGORITHMS.some(x => x === this.algorithm) &&\n        // Usually, if someone insists on using a \"different\" base64, we\n        // leave it as-is, since there's multiple standards, and the\n        // specified is not a URL-safe variant.\n        // https://www.w3.org/TR/CSP2/#base64_value\n        this.digest.match(BASE64_REGEX) &&\n        // Option syntax is strictly visual chars.\n        // https://w3c.github.io/webappsec-subresource-integrity/#grammardef-option-expression\n        // https://tools.ietf.org/html/rfc5234#appendix-B.1\n        (this.options || []).every(opt => opt.match(VCHAR_REGEX))\n      )) {\n        return ''\n      }\n    }\n    const options = this.options && this.options.length\n    ? `?${this.options.join('?')}`\n    : ''\n    return `${this.algorithm}-${this.digest}${options}`\n  }\n}\n\nclass Integrity {\n  get isIntegrity () { return true }\n  toJSON () {\n    return this.toString()\n  }\n  toString (opts) {\n    opts = SsriOpts(opts)\n    let sep = opts.sep || ' '\n    if (opts.strict) {\n      // Entries must be separated by whitespace, according to spec.\n      sep = sep.replace(/\\S+/g, ' ')\n    }\n    return Object.keys(this).map(k => {\n      return this[k].map(hash => {\n        return Hash.prototype.toString.call(hash, opts)\n      }).filter(x => x.length).join(sep)\n    }).filter(x => x.length).join(sep)\n  }\n  concat (integrity, opts) {\n    opts = SsriOpts(opts)\n    const other = typeof integrity === 'string'\n    ? integrity\n    : stringify(integrity, opts)\n    return parse(`${this.toString(opts)} ${other}`, opts)\n  }\n  hexDigest () {\n    return parse(this, {single: true}).hexDigest()\n  }\n  match (integrity, opts) {\n    opts = SsriOpts(opts)\n    const other = parse(integrity, opts)\n    const algo = other.pickAlgorithm(opts)\n    return (\n      this[algo] &&\n      other[algo] &&\n      this[algo].find(hash =>\n        other[algo].find(otherhash =>\n          hash.digest === otherhash.digest\n        )\n      )\n    ) || false\n  }\n  pickAlgorithm (opts) {\n    opts = SsriOpts(opts)\n    const pickAlgorithm = opts.pickAlgorithm\n    const keys = Object.keys(this)\n    if (!keys.length) {\n      throw new Error(`No algorithms available for ${\n        JSON.stringify(this.toString())\n      }`)\n    }\n    return keys.reduce((acc, algo) => {\n      return pickAlgorithm(acc, algo) || acc\n    })\n  }\n}\n\nmodule.exports.parse = parse\nfunction parse (sri, opts) {\n  opts = SsriOpts(opts)\n  if (typeof sri === 'string') {\n    return _parse(sri, opts)\n  } else if (sri.algorithm && sri.digest) {\n    const fullSri = new Integrity()\n    fullSri[sri.algorithm] = [sri]\n    return _parse(stringify(fullSri, opts), opts)\n  } else {\n    return _parse(stringify(sri, opts), opts)\n  }\n}\n\nfunction _parse (integrity, opts) {\n  // 3.4.3. Parse metadata\n  // https://w3c.github.io/webappsec-subresource-integrity/#parse-metadata\n  if (opts.single) {\n    return new Hash(integrity, opts)\n  }\n  return integrity.trim().split(/\\s+/).reduce((acc, string) => {\n    const hash = new Hash(string, opts)\n    if (hash.algorithm && hash.digest) {\n      const algo = hash.algorithm\n      if (!acc[algo]) { acc[algo] = [] }\n      acc[algo].push(hash)\n    }\n    return acc\n  }, new Integrity())\n}\n\nmodule.exports.stringify = stringify\nfunction stringify (obj, opts) {\n  opts = SsriOpts(opts)\n  if (obj.algorithm && obj.digest) {\n    return Hash.prototype.toString.call(obj, opts)\n  } else if (typeof obj === 'string') {\n    return stringify(parse(obj, opts), opts)\n  } else {\n    return Integrity.prototype.toString.call(obj, opts)\n  }\n}\n\nmodule.exports.fromHex = fromHex\nfunction fromHex (hexDigest, algorithm, opts) {\n  opts = SsriOpts(opts)\n  const optString = opts.options && opts.options.length\n  ? `?${opts.options.join('?')}`\n  : ''\n  return parse(\n    `${algorithm}-${\n      Buffer.from(hexDigest, 'hex').toString('base64')\n    }${optString}`, opts\n  )\n}\n\nmodule.exports.fromData = fromData\nfunction fromData (data, opts) {\n  opts = SsriOpts(opts)\n  const algorithms = opts.algorithms\n  const optString = opts.options && opts.options.length\n  ? `?${opts.options.join('?')}`\n  : ''\n  return algorithms.reduce((acc, algo) => {\n    const digest = crypto.createHash(algo).update(data).digest('base64')\n    const hash = new Hash(\n      `${algo}-${digest}${optString}`,\n       opts\n    )\n    if (hash.algorithm && hash.digest) {\n      const algo = hash.algorithm\n      if (!acc[algo]) { acc[algo] = [] }\n      acc[algo].push(hash)\n    }\n    return acc\n  }, new Integrity())\n}\n\nmodule.exports.fromStream = fromStream\nfunction fromStream (stream, opts) {\n  opts = SsriOpts(opts)\n  const P = opts.Promise || Promise\n  const istream = integrityStream(opts)\n  return new P((resolve, reject) => {\n    stream.pipe(istream)\n    stream.on('error', reject)\n    istream.on('error', reject)\n    let sri\n    istream.on('integrity', s => { sri = s })\n    istream.on('end', () => resolve(sri))\n    istream.on('data', () => {})\n  })\n}\n\nmodule.exports.checkData = checkData\nfunction checkData (data, sri, opts) {\n  opts = SsriOpts(opts)\n  sri = parse(sri, opts)\n  if (!Object.keys(sri).length) {\n    if (opts.error) {\n      throw Object.assign(\n        new Error('No valid integrity hashes to check against'), {\n          code: 'EINTEGRITY'\n        }\n      )\n    } else {\n      return false\n    }\n  }\n  const algorithm = sri.pickAlgorithm(opts)\n  const digest = crypto.createHash(algorithm).update(data).digest('base64')\n  const newSri = parse({algorithm, digest})\n  const match = newSri.match(sri, opts)\n  if (match || !opts.error) {\n    return match\n  } else if (typeof opts.size === 'number' && (data.length !== opts.size)) {\n    const err = new Error(`data size mismatch when checking ${sri}.\\n  Wanted: ${opts.size}\\n  Found: ${data.length}`)\n    err.code = 'EBADSIZE'\n    err.found = data.length\n    err.expected = opts.size\n    err.sri = sri\n    throw err\n  } else {\n    const err = new Error(`Integrity checksum failed when using ${algorithm}: Wanted ${sri}, but got ${newSri}. (${data.length} bytes)`)\n    err.code = 'EINTEGRITY'\n    err.found = newSri\n    err.expected = sri\n    err.algorithm = algorithm\n    err.sri = sri\n    throw err\n  }\n}\n\nmodule.exports.checkStream = checkStream\nfunction checkStream (stream, sri, opts) {\n  opts = SsriOpts(opts)\n  const P = opts.Promise || Promise\n  const checker = integrityStream(opts.concat({\n    integrity: sri\n  }))\n  return new P((resolve, reject) => {\n    stream.pipe(checker)\n    stream.on('error', reject)\n    checker.on('error', reject)\n    let sri\n    checker.on('verified', s => { sri = s })\n    checker.on('end', () => resolve(sri))\n    checker.on('data', () => {})\n  })\n}\n\nmodule.exports.integrityStream = integrityStream\nfunction integrityStream (opts) {\n  opts = SsriOpts(opts)\n  // For verification\n  const sri = opts.integrity && parse(opts.integrity, opts)\n  const goodSri = sri && Object.keys(sri).length\n  const algorithm = goodSri && sri.pickAlgorithm(opts)\n  const digests = goodSri && sri[algorithm]\n  // Calculating stream\n  const algorithms = Array.from(\n    new Set(opts.algorithms.concat(algorithm ? [algorithm] : []))\n  )\n  const hashes = algorithms.map(crypto.createHash)\n  let streamSize = 0\n  const stream = new Transform({\n    transform (chunk, enc, cb) {\n      streamSize += chunk.length\n      hashes.forEach(h => h.update(chunk, enc))\n      cb(null, chunk, enc)\n    }\n  }).on('end', () => {\n    const optString = (opts.options && opts.options.length)\n    ? `?${opts.options.join('?')}`\n    : ''\n    const newSri = parse(hashes.map((h, i) => {\n      return `${algorithms[i]}-${h.digest('base64')}${optString}`\n    }).join(' '), opts)\n    // Integrity verification mode\n    const match = goodSri && newSri.match(sri, opts)\n    if (typeof opts.size === 'number' && streamSize !== opts.size) {\n      const err = new Error(`stream size mismatch when checking ${sri}.\\n  Wanted: ${opts.size}\\n  Found: ${streamSize}`)\n      err.code = 'EBADSIZE'\n      err.found = streamSize\n      err.expected = opts.size\n      err.sri = sri\n      stream.emit('error', err)\n    } else if (opts.integrity && !match) {\n      const err = new Error(`${sri} integrity checksum failed when using ${algorithm}: wanted ${digests} but got ${newSri}. (${streamSize} bytes)`)\n      err.code = 'EINTEGRITY'\n      err.found = newSri\n      err.expected = digests\n      err.algorithm = algorithm\n      err.sri = sri\n      stream.emit('error', err)\n    } else {\n      stream.emit('size', streamSize)\n      stream.emit('integrity', newSri)\n      match && stream.emit('verified', match)\n    }\n  })\n  return stream\n}\n\nmodule.exports.create = createIntegrity\nfunction createIntegrity (opts) {\n  opts = SsriOpts(opts)\n  const algorithms = opts.algorithms\n  const optString = opts.options.length\n  ? `?${opts.options.join('?')}`\n  : ''\n\n  const hashes = algorithms.map(crypto.createHash)\n\n  return {\n    update: function (chunk, enc) {\n      hashes.forEach(h => h.update(chunk, enc))\n      return this\n    },\n    digest: function (enc) {\n      const integrity = algorithms.reduce((acc, algo) => {\n        const digest = hashes.shift().digest('base64')\n        const hash = new Hash(\n          `${algo}-${digest}${optString}`,\n          opts\n        )\n        if (hash.algorithm && hash.digest) {\n          const algo = hash.algorithm\n          if (!acc[algo]) { acc[algo] = [] }\n          acc[algo].push(hash)\n        }\n        return acc\n      }, new Integrity())\n\n      return integrity\n    }\n  }\n}\n\nconst NODE_HASHES = new Set(crypto.getHashes())\n\n// This is a Best Effort™ at a reasonable priority for hash algos\nconst DEFAULT_PRIORITY = [\n  'md5', 'whirlpool', 'sha1', 'sha224', 'sha256', 'sha384', 'sha512',\n  // TODO - it's unclear _which_ of these Node will actually use as its name\n  //        for the algorithm, so we guesswork it based on the OpenSSL names.\n  'sha3',\n  'sha3-256', 'sha3-384', 'sha3-512',\n  'sha3_256', 'sha3_384', 'sha3_512'\n].filter(algo => NODE_HASHES.has(algo))\n\nfunction getPrioritizedHash (algo1, algo2) {\n  return DEFAULT_PRIORITY.indexOf(algo1.toLowerCase()) >= DEFAULT_PRIORITY.indexOf(algo2.toLowerCase())\n  ? algo1\n  : algo2\n}\n"]},"metadata":{},"sourceType":"script"}