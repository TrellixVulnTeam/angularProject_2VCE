{"ast":null,"code":"/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n(function (factory) {\n  if (typeof module === \"object\" && typeof module.exports === \"object\") {\n    var v = factory(require, exports);\n    if (v !== undefined) module.exports = v;\n  } else if (typeof define === \"function\" && define.amd) {\n    define(\"@angular/compiler-cli/src/ngtsc/imports/src/core\", [\"require\", \"exports\", \"@angular/compiler-cli/src/ngtsc/util/src/path\"], factory);\n  }\n})(function (require, exports) {\n  \"use strict\";\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.validateAndRewriteCoreSymbol = exports.R3SymbolsImportRewriter = exports.NoopImportRewriter = void 0;\n\n  var path_1 = require(\"@angular/compiler-cli/src/ngtsc/util/src/path\");\n  /**\n   * `ImportRewriter` that does no rewriting.\n   */\n\n\n  var NoopImportRewriter =\n  /** @class */\n  function () {\n    function NoopImportRewriter() {}\n\n    NoopImportRewriter.prototype.shouldImportSymbol = function (symbol, specifier) {\n      return true;\n    };\n\n    NoopImportRewriter.prototype.rewriteSymbol = function (symbol, specifier) {\n      return symbol;\n    };\n\n    NoopImportRewriter.prototype.rewriteSpecifier = function (specifier, inContextOfFile) {\n      return specifier;\n    };\n\n    return NoopImportRewriter;\n  }();\n\n  exports.NoopImportRewriter = NoopImportRewriter;\n  /**\n   * A mapping of supported symbols that can be imported from within @angular/core, and the names by\n   * which they're exported from r3_symbols.\n   */\n\n  var CORE_SUPPORTED_SYMBOLS = new Map([['ɵɵdefineInjectable', 'ɵɵdefineInjectable'], ['ɵɵdefineInjector', 'ɵɵdefineInjector'], ['ɵɵdefineNgModule', 'ɵɵdefineNgModule'], ['ɵɵsetNgModuleScope', 'ɵɵsetNgModuleScope'], ['ɵɵinject', 'ɵɵinject'], ['ɵɵFactoryDef', 'ɵɵFactoryDef'], ['ɵsetClassMetadata', 'setClassMetadata'], ['ɵɵInjectableDef', 'ɵɵInjectableDef'], ['ɵɵInjectorDef', 'ɵɵInjectorDef'], ['ɵɵNgModuleDefWithMeta', 'ɵɵNgModuleDefWithMeta'], ['ɵNgModuleFactory', 'NgModuleFactory'], ['ɵnoSideEffects', 'ɵnoSideEffects']]);\n  var CORE_MODULE = '@angular/core';\n  /**\n   * `ImportRewriter` that rewrites imports from '@angular/core' to be imported from the r3_symbols.ts\n   * file instead.\n   */\n\n  var R3SymbolsImportRewriter =\n  /** @class */\n  function () {\n    function R3SymbolsImportRewriter(r3SymbolsPath) {\n      this.r3SymbolsPath = r3SymbolsPath;\n    }\n\n    R3SymbolsImportRewriter.prototype.shouldImportSymbol = function (symbol, specifier) {\n      return true;\n    };\n\n    R3SymbolsImportRewriter.prototype.rewriteSymbol = function (symbol, specifier) {\n      if (specifier !== CORE_MODULE) {\n        // This import isn't from core, so ignore it.\n        return symbol;\n      }\n\n      return validateAndRewriteCoreSymbol(symbol);\n    };\n\n    R3SymbolsImportRewriter.prototype.rewriteSpecifier = function (specifier, inContextOfFile) {\n      if (specifier !== CORE_MODULE) {\n        // This module isn't core, so ignore it.\n        return specifier;\n      }\n\n      var relativePathToR3Symbols = path_1.relativePathBetween(inContextOfFile, this.r3SymbolsPath);\n\n      if (relativePathToR3Symbols === null) {\n        throw new Error(\"Failed to rewrite import inside \" + CORE_MODULE + \": \" + inContextOfFile + \" -> \" + this.r3SymbolsPath);\n      }\n\n      return relativePathToR3Symbols;\n    };\n\n    return R3SymbolsImportRewriter;\n  }();\n\n  exports.R3SymbolsImportRewriter = R3SymbolsImportRewriter;\n\n  function validateAndRewriteCoreSymbol(name) {\n    if (!CORE_SUPPORTED_SYMBOLS.has(name)) {\n      throw new Error(\"Importing unexpected symbol \" + name + \" while compiling \" + CORE_MODULE);\n    }\n\n    return CORE_SUPPORTED_SYMBOLS.get(name);\n  }\n\n  exports.validateAndRewriteCoreSymbol = validateAndRewriteCoreSymbol;\n});","map":{"version":3,"sources":["../../../../../../../../../packages/compiler-cli/src/ngtsc/imports/src/core.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {relativePathBetween} from '../../util/src/path';\n\n/**\n * Rewrites imports of symbols being written into generated code.\n */\nexport interface ImportRewriter {\n  /**\n   * Should the given symbol be imported at all?\n   *\n   * If `true`, the symbol should be imported from the given specifier. If `false`, the symbol\n   * should be referenced directly, without an import.\n   */\n  shouldImportSymbol(symbol: string, specifier: string): boolean;\n\n  /**\n   * Optionally rewrite a reference to an imported symbol, changing either the binding prefix or the\n   * symbol name itself.\n   */\n  rewriteSymbol(symbol: string, specifier: string): string;\n\n  /**\n   * Optionally rewrite the given module specifier in the context of a given file.\n   */\n  rewriteSpecifier(specifier: string, inContextOfFile: string): string;\n}\n\n/**\n * `ImportRewriter` that does no rewriting.\n */\nexport class NoopImportRewriter implements ImportRewriter {\n  shouldImportSymbol(symbol: string, specifier: string): boolean {\n    return true;\n  }\n\n  rewriteSymbol(symbol: string, specifier: string): string {\n    return symbol;\n  }\n\n  rewriteSpecifier(specifier: string, inContextOfFile: string): string {\n    return specifier;\n  }\n}\n\n/**\n * A mapping of supported symbols that can be imported from within @angular/core, and the names by\n * which they're exported from r3_symbols.\n */\nconst CORE_SUPPORTED_SYMBOLS = new Map<string, string>([\n  ['ɵɵdefineInjectable', 'ɵɵdefineInjectable'],\n  ['ɵɵdefineInjector', 'ɵɵdefineInjector'],\n  ['ɵɵdefineNgModule', 'ɵɵdefineNgModule'],\n  ['ɵɵsetNgModuleScope', 'ɵɵsetNgModuleScope'],\n  ['ɵɵinject', 'ɵɵinject'],\n  ['ɵɵFactoryDef', 'ɵɵFactoryDef'],\n  ['ɵsetClassMetadata', 'setClassMetadata'],\n  ['ɵɵInjectableDef', 'ɵɵInjectableDef'],\n  ['ɵɵInjectorDef', 'ɵɵInjectorDef'],\n  ['ɵɵNgModuleDefWithMeta', 'ɵɵNgModuleDefWithMeta'],\n  ['ɵNgModuleFactory', 'NgModuleFactory'],\n  ['ɵnoSideEffects', 'ɵnoSideEffects'],\n]);\n\nconst CORE_MODULE = '@angular/core';\n\n/**\n * `ImportRewriter` that rewrites imports from '@angular/core' to be imported from the r3_symbols.ts\n * file instead.\n */\nexport class R3SymbolsImportRewriter implements ImportRewriter {\n  constructor(private r3SymbolsPath: string) {}\n\n  shouldImportSymbol(symbol: string, specifier: string): boolean {\n    return true;\n  }\n\n  rewriteSymbol(symbol: string, specifier: string): string {\n    if (specifier !== CORE_MODULE) {\n      // This import isn't from core, so ignore it.\n      return symbol;\n    }\n\n    return validateAndRewriteCoreSymbol(symbol);\n  }\n\n  rewriteSpecifier(specifier: string, inContextOfFile: string): string {\n    if (specifier !== CORE_MODULE) {\n      // This module isn't core, so ignore it.\n      return specifier;\n    }\n\n    const relativePathToR3Symbols = relativePathBetween(inContextOfFile, this.r3SymbolsPath);\n    if (relativePathToR3Symbols === null) {\n      throw new Error(`Failed to rewrite import inside ${CORE_MODULE}: ${inContextOfFile} -> ${\n          this.r3SymbolsPath}`);\n    }\n\n    return relativePathToR3Symbols;\n  }\n}\n\nexport function validateAndRewriteCoreSymbol(name: string): string {\n  if (!CORE_SUPPORTED_SYMBOLS.has(name)) {\n    throw new Error(`Importing unexpected symbol ${name} while compiling ${CORE_MODULE}`);\n  }\n  return CORE_SUPPORTED_SYMBOLS.get(name)!;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}