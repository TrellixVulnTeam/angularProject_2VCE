{"ast":null,"code":"/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n(function (factory) {\n  if (typeof module === \"object\" && typeof module.exports === \"object\") {\n    var v = factory(require, exports);\n    if (v !== undefined) module.exports = v;\n  } else if (typeof define === \"function\" && define.amd) {\n    define(\"@angular/compiler/src/render3/r3_ast\", [\"require\", \"exports\", \"tslib\"], factory);\n  }\n})(function (require, exports) {\n  \"use strict\";\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.transformAll = exports.visitAll = exports.TransformVisitor = exports.RecursiveVisitor = exports.NullVisitor = exports.Icu = exports.Reference = exports.Variable = exports.Content = exports.Template = exports.Element = exports.BoundEvent = exports.BoundAttribute = exports.TextAttribute = exports.BoundText = exports.Text = exports.Comment = void 0;\n\n  var tslib_1 = require(\"tslib\");\n  /**\n   * This is an R3 `Node`-like wrapper for a raw `html.Comment` node. We do not currently\n   * require the implementation of a visitor for Comments as they are only collected at\n   * the top-level of the R3 AST, and only if `Render3ParseOptions['collectCommentNodes']`\n   * is true.\n   */\n\n\n  var Comment =\n  /** @class */\n  function () {\n    function Comment(value, sourceSpan) {\n      this.value = value;\n      this.sourceSpan = sourceSpan;\n    }\n\n    Comment.prototype.visit = function (_visitor) {\n      throw new Error('visit() not implemented for Comment');\n    };\n\n    return Comment;\n  }();\n\n  exports.Comment = Comment;\n\n  var Text =\n  /** @class */\n  function () {\n    function Text(value, sourceSpan) {\n      this.value = value;\n      this.sourceSpan = sourceSpan;\n    }\n\n    Text.prototype.visit = function (visitor) {\n      return visitor.visitText(this);\n    };\n\n    return Text;\n  }();\n\n  exports.Text = Text;\n\n  var BoundText =\n  /** @class */\n  function () {\n    function BoundText(value, sourceSpan, i18n) {\n      this.value = value;\n      this.sourceSpan = sourceSpan;\n      this.i18n = i18n;\n    }\n\n    BoundText.prototype.visit = function (visitor) {\n      return visitor.visitBoundText(this);\n    };\n\n    return BoundText;\n  }();\n\n  exports.BoundText = BoundText;\n  /**\n   * Represents a text attribute in the template.\n   *\n   * `valueSpan` may not be present in cases where there is no value `<div a></div>`.\n   * `keySpan` may also not be present for synthetic attributes from ICU expansions.\n   */\n\n  var TextAttribute =\n  /** @class */\n  function () {\n    function TextAttribute(name, value, sourceSpan, keySpan, valueSpan, i18n) {\n      this.name = name;\n      this.value = value;\n      this.sourceSpan = sourceSpan;\n      this.keySpan = keySpan;\n      this.valueSpan = valueSpan;\n      this.i18n = i18n;\n    }\n\n    TextAttribute.prototype.visit = function (visitor) {\n      return visitor.visitTextAttribute(this);\n    };\n\n    return TextAttribute;\n  }();\n\n  exports.TextAttribute = TextAttribute;\n\n  var BoundAttribute =\n  /** @class */\n  function () {\n    function BoundAttribute(name, type, securityContext, value, unit, sourceSpan, keySpan, valueSpan, i18n) {\n      this.name = name;\n      this.type = type;\n      this.securityContext = securityContext;\n      this.value = value;\n      this.unit = unit;\n      this.sourceSpan = sourceSpan;\n      this.keySpan = keySpan;\n      this.valueSpan = valueSpan;\n      this.i18n = i18n;\n    }\n\n    BoundAttribute.fromBoundElementProperty = function (prop, i18n) {\n      if (prop.keySpan === undefined) {\n        throw new Error(\"Unexpected state: keySpan must be defined for bound attributes but was not for \" + prop.name + \": \" + prop.sourceSpan);\n      }\n\n      return new BoundAttribute(prop.name, prop.type, prop.securityContext, prop.value, prop.unit, prop.sourceSpan, prop.keySpan, prop.valueSpan, i18n);\n    };\n\n    BoundAttribute.prototype.visit = function (visitor) {\n      return visitor.visitBoundAttribute(this);\n    };\n\n    return BoundAttribute;\n  }();\n\n  exports.BoundAttribute = BoundAttribute;\n\n  var BoundEvent =\n  /** @class */\n  function () {\n    function BoundEvent(name, type, handler, target, phase, sourceSpan, handlerSpan, keySpan) {\n      this.name = name;\n      this.type = type;\n      this.handler = handler;\n      this.target = target;\n      this.phase = phase;\n      this.sourceSpan = sourceSpan;\n      this.handlerSpan = handlerSpan;\n      this.keySpan = keySpan;\n    }\n\n    BoundEvent.fromParsedEvent = function (event) {\n      var target = event.type === 0\n      /* Regular */\n      ? event.targetOrPhase : null;\n      var phase = event.type === 1\n      /* Animation */\n      ? event.targetOrPhase : null;\n\n      if (event.keySpan === undefined) {\n        throw new Error(\"Unexpected state: keySpan must be defined for bound event but was not for \" + event.name + \": \" + event.sourceSpan);\n      }\n\n      return new BoundEvent(event.name, event.type, event.handler, target, phase, event.sourceSpan, event.handlerSpan, event.keySpan);\n    };\n\n    BoundEvent.prototype.visit = function (visitor) {\n      return visitor.visitBoundEvent(this);\n    };\n\n    return BoundEvent;\n  }();\n\n  exports.BoundEvent = BoundEvent;\n\n  var Element =\n  /** @class */\n  function () {\n    function Element(name, attributes, inputs, outputs, children, references, sourceSpan, startSourceSpan, endSourceSpan, i18n) {\n      this.name = name;\n      this.attributes = attributes;\n      this.inputs = inputs;\n      this.outputs = outputs;\n      this.children = children;\n      this.references = references;\n      this.sourceSpan = sourceSpan;\n      this.startSourceSpan = startSourceSpan;\n      this.endSourceSpan = endSourceSpan;\n      this.i18n = i18n;\n    }\n\n    Element.prototype.visit = function (visitor) {\n      return visitor.visitElement(this);\n    };\n\n    return Element;\n  }();\n\n  exports.Element = Element;\n\n  var Template =\n  /** @class */\n  function () {\n    function Template(tagName, attributes, inputs, outputs, templateAttrs, children, references, variables, sourceSpan, startSourceSpan, endSourceSpan, i18n) {\n      this.tagName = tagName;\n      this.attributes = attributes;\n      this.inputs = inputs;\n      this.outputs = outputs;\n      this.templateAttrs = templateAttrs;\n      this.children = children;\n      this.references = references;\n      this.variables = variables;\n      this.sourceSpan = sourceSpan;\n      this.startSourceSpan = startSourceSpan;\n      this.endSourceSpan = endSourceSpan;\n      this.i18n = i18n;\n    }\n\n    Template.prototype.visit = function (visitor) {\n      return visitor.visitTemplate(this);\n    };\n\n    return Template;\n  }();\n\n  exports.Template = Template;\n\n  var Content =\n  /** @class */\n  function () {\n    function Content(selector, attributes, sourceSpan, i18n) {\n      this.selector = selector;\n      this.attributes = attributes;\n      this.sourceSpan = sourceSpan;\n      this.i18n = i18n;\n      this.name = 'ng-content';\n    }\n\n    Content.prototype.visit = function (visitor) {\n      return visitor.visitContent(this);\n    };\n\n    return Content;\n  }();\n\n  exports.Content = Content;\n\n  var Variable =\n  /** @class */\n  function () {\n    function Variable(name, value, sourceSpan, keySpan, valueSpan) {\n      this.name = name;\n      this.value = value;\n      this.sourceSpan = sourceSpan;\n      this.keySpan = keySpan;\n      this.valueSpan = valueSpan;\n    }\n\n    Variable.prototype.visit = function (visitor) {\n      return visitor.visitVariable(this);\n    };\n\n    return Variable;\n  }();\n\n  exports.Variable = Variable;\n\n  var Reference =\n  /** @class */\n  function () {\n    function Reference(name, value, sourceSpan, keySpan, valueSpan) {\n      this.name = name;\n      this.value = value;\n      this.sourceSpan = sourceSpan;\n      this.keySpan = keySpan;\n      this.valueSpan = valueSpan;\n    }\n\n    Reference.prototype.visit = function (visitor) {\n      return visitor.visitReference(this);\n    };\n\n    return Reference;\n  }();\n\n  exports.Reference = Reference;\n\n  var Icu =\n  /** @class */\n  function () {\n    function Icu(vars, placeholders, sourceSpan, i18n) {\n      this.vars = vars;\n      this.placeholders = placeholders;\n      this.sourceSpan = sourceSpan;\n      this.i18n = i18n;\n    }\n\n    Icu.prototype.visit = function (visitor) {\n      return visitor.visitIcu(this);\n    };\n\n    return Icu;\n  }();\n\n  exports.Icu = Icu;\n\n  var NullVisitor =\n  /** @class */\n  function () {\n    function NullVisitor() {}\n\n    NullVisitor.prototype.visitElement = function (element) {};\n\n    NullVisitor.prototype.visitTemplate = function (template) {};\n\n    NullVisitor.prototype.visitContent = function (content) {};\n\n    NullVisitor.prototype.visitVariable = function (variable) {};\n\n    NullVisitor.prototype.visitReference = function (reference) {};\n\n    NullVisitor.prototype.visitTextAttribute = function (attribute) {};\n\n    NullVisitor.prototype.visitBoundAttribute = function (attribute) {};\n\n    NullVisitor.prototype.visitBoundEvent = function (attribute) {};\n\n    NullVisitor.prototype.visitText = function (text) {};\n\n    NullVisitor.prototype.visitBoundText = function (text) {};\n\n    NullVisitor.prototype.visitIcu = function (icu) {};\n\n    return NullVisitor;\n  }();\n\n  exports.NullVisitor = NullVisitor;\n\n  var RecursiveVisitor =\n  /** @class */\n  function () {\n    function RecursiveVisitor() {}\n\n    RecursiveVisitor.prototype.visitElement = function (element) {\n      visitAll(this, element.attributes);\n      visitAll(this, element.children);\n      visitAll(this, element.references);\n    };\n\n    RecursiveVisitor.prototype.visitTemplate = function (template) {\n      visitAll(this, template.attributes);\n      visitAll(this, template.children);\n      visitAll(this, template.references);\n      visitAll(this, template.variables);\n    };\n\n    RecursiveVisitor.prototype.visitContent = function (content) {};\n\n    RecursiveVisitor.prototype.visitVariable = function (variable) {};\n\n    RecursiveVisitor.prototype.visitReference = function (reference) {};\n\n    RecursiveVisitor.prototype.visitTextAttribute = function (attribute) {};\n\n    RecursiveVisitor.prototype.visitBoundAttribute = function (attribute) {};\n\n    RecursiveVisitor.prototype.visitBoundEvent = function (attribute) {};\n\n    RecursiveVisitor.prototype.visitText = function (text) {};\n\n    RecursiveVisitor.prototype.visitBoundText = function (text) {};\n\n    RecursiveVisitor.prototype.visitIcu = function (icu) {};\n\n    return RecursiveVisitor;\n  }();\n\n  exports.RecursiveVisitor = RecursiveVisitor;\n\n  var TransformVisitor =\n  /** @class */\n  function () {\n    function TransformVisitor() {}\n\n    TransformVisitor.prototype.visitElement = function (element) {\n      var newAttributes = transformAll(this, element.attributes);\n      var newInputs = transformAll(this, element.inputs);\n      var newOutputs = transformAll(this, element.outputs);\n      var newChildren = transformAll(this, element.children);\n      var newReferences = transformAll(this, element.references);\n\n      if (newAttributes != element.attributes || newInputs != element.inputs || newOutputs != element.outputs || newChildren != element.children || newReferences != element.references) {\n        return new Element(element.name, newAttributes, newInputs, newOutputs, newChildren, newReferences, element.sourceSpan, element.startSourceSpan, element.endSourceSpan);\n      }\n\n      return element;\n    };\n\n    TransformVisitor.prototype.visitTemplate = function (template) {\n      var newAttributes = transformAll(this, template.attributes);\n      var newInputs = transformAll(this, template.inputs);\n      var newOutputs = transformAll(this, template.outputs);\n      var newTemplateAttrs = transformAll(this, template.templateAttrs);\n      var newChildren = transformAll(this, template.children);\n      var newReferences = transformAll(this, template.references);\n      var newVariables = transformAll(this, template.variables);\n\n      if (newAttributes != template.attributes || newInputs != template.inputs || newOutputs != template.outputs || newTemplateAttrs != template.templateAttrs || newChildren != template.children || newReferences != template.references || newVariables != template.variables) {\n        return new Template(template.tagName, newAttributes, newInputs, newOutputs, newTemplateAttrs, newChildren, newReferences, newVariables, template.sourceSpan, template.startSourceSpan, template.endSourceSpan);\n      }\n\n      return template;\n    };\n\n    TransformVisitor.prototype.visitContent = function (content) {\n      return content;\n    };\n\n    TransformVisitor.prototype.visitVariable = function (variable) {\n      return variable;\n    };\n\n    TransformVisitor.prototype.visitReference = function (reference) {\n      return reference;\n    };\n\n    TransformVisitor.prototype.visitTextAttribute = function (attribute) {\n      return attribute;\n    };\n\n    TransformVisitor.prototype.visitBoundAttribute = function (attribute) {\n      return attribute;\n    };\n\n    TransformVisitor.prototype.visitBoundEvent = function (attribute) {\n      return attribute;\n    };\n\n    TransformVisitor.prototype.visitText = function (text) {\n      return text;\n    };\n\n    TransformVisitor.prototype.visitBoundText = function (text) {\n      return text;\n    };\n\n    TransformVisitor.prototype.visitIcu = function (icu) {\n      return icu;\n    };\n\n    return TransformVisitor;\n  }();\n\n  exports.TransformVisitor = TransformVisitor;\n\n  function visitAll(visitor, nodes) {\n    var e_1, _a, e_2, _b;\n\n    var result = [];\n\n    if (visitor.visit) {\n      try {\n        for (var nodes_1 = tslib_1.__values(nodes), nodes_1_1 = nodes_1.next(); !nodes_1_1.done; nodes_1_1 = nodes_1.next()) {\n          var node = nodes_1_1.value;\n          var newNode = visitor.visit(node) || node.visit(visitor);\n        }\n      } catch (e_1_1) {\n        e_1 = {\n          error: e_1_1\n        };\n      } finally {\n        try {\n          if (nodes_1_1 && !nodes_1_1.done && (_a = nodes_1.return)) _a.call(nodes_1);\n        } finally {\n          if (e_1) throw e_1.error;\n        }\n      }\n    } else {\n      try {\n        for (var nodes_2 = tslib_1.__values(nodes), nodes_2_1 = nodes_2.next(); !nodes_2_1.done; nodes_2_1 = nodes_2.next()) {\n          var node = nodes_2_1.value;\n          var newNode = node.visit(visitor);\n\n          if (newNode) {\n            result.push(newNode);\n          }\n        }\n      } catch (e_2_1) {\n        e_2 = {\n          error: e_2_1\n        };\n      } finally {\n        try {\n          if (nodes_2_1 && !nodes_2_1.done && (_b = nodes_2.return)) _b.call(nodes_2);\n        } finally {\n          if (e_2) throw e_2.error;\n        }\n      }\n    }\n\n    return result;\n  }\n\n  exports.visitAll = visitAll;\n\n  function transformAll(visitor, nodes) {\n    var e_3, _a;\n\n    var result = [];\n    var changed = false;\n\n    try {\n      for (var nodes_3 = tslib_1.__values(nodes), nodes_3_1 = nodes_3.next(); !nodes_3_1.done; nodes_3_1 = nodes_3.next()) {\n        var node = nodes_3_1.value;\n        var newNode = node.visit(visitor);\n\n        if (newNode) {\n          result.push(newNode);\n        }\n\n        changed = changed || newNode != node;\n      }\n    } catch (e_3_1) {\n      e_3 = {\n        error: e_3_1\n      };\n    } finally {\n      try {\n        if (nodes_3_1 && !nodes_3_1.done && (_a = nodes_3.return)) _a.call(nodes_3);\n      } finally {\n        if (e_3) throw e_3.error;\n      }\n    }\n\n    return changed ? result : nodes;\n  }\n\n  exports.transformAll = transformAll;\n});","map":{"version":3,"sources":["../../../../../../../packages/compiler/src/render3/r3_ast.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {SecurityContext} from '../core';\nimport {AST, BindingType, BoundElementProperty, ParsedEvent, ParsedEventType} from '../expression_parser/ast';\nimport {I18nMeta} from '../i18n/i18n_ast';\nimport {ParseSourceSpan} from '../parse_util';\n\nexport interface Node {\n  sourceSpan: ParseSourceSpan;\n  visit<Result>(visitor: Visitor<Result>): Result;\n}\n\n/**\n * This is an R3 `Node`-like wrapper for a raw `html.Comment` node. We do not currently\n * require the implementation of a visitor for Comments as they are only collected at\n * the top-level of the R3 AST, and only if `Render3ParseOptions['collectCommentNodes']`\n * is true.\n */\nexport class Comment implements Node {\n  constructor(public value: string, public sourceSpan: ParseSourceSpan) {}\n  visit<Result>(_visitor: Visitor<Result>): Result {\n    throw new Error('visit() not implemented for Comment');\n  }\n}\n\nexport class Text implements Node {\n  constructor(public value: string, public sourceSpan: ParseSourceSpan) {}\n  visit<Result>(visitor: Visitor<Result>): Result {\n    return visitor.visitText(this);\n  }\n}\n\nexport class BoundText implements Node {\n  constructor(public value: AST, public sourceSpan: ParseSourceSpan, public i18n?: I18nMeta) {}\n  visit<Result>(visitor: Visitor<Result>): Result {\n    return visitor.visitBoundText(this);\n  }\n}\n\n/**\n * Represents a text attribute in the template.\n *\n * `valueSpan` may not be present in cases where there is no value `<div a></div>`.\n * `keySpan` may also not be present for synthetic attributes from ICU expansions.\n */\nexport class TextAttribute implements Node {\n  constructor(\n      public name: string, public value: string, public sourceSpan: ParseSourceSpan,\n      readonly keySpan: ParseSourceSpan|undefined, public valueSpan?: ParseSourceSpan,\n      public i18n?: I18nMeta) {}\n  visit<Result>(visitor: Visitor<Result>): Result {\n    return visitor.visitTextAttribute(this);\n  }\n}\n\nexport class BoundAttribute implements Node {\n  constructor(\n      public name: string, public type: BindingType, public securityContext: SecurityContext,\n      public value: AST, public unit: string|null, public sourceSpan: ParseSourceSpan,\n      readonly keySpan: ParseSourceSpan, public valueSpan: ParseSourceSpan|undefined,\n      public i18n: I18nMeta|undefined) {}\n\n  static fromBoundElementProperty(prop: BoundElementProperty, i18n?: I18nMeta): BoundAttribute {\n    if (prop.keySpan === undefined) {\n      throw new Error(\n          `Unexpected state: keySpan must be defined for bound attributes but was not for ${\n              prop.name}: ${prop.sourceSpan}`);\n    }\n    return new BoundAttribute(\n        prop.name, prop.type, prop.securityContext, prop.value, prop.unit, prop.sourceSpan,\n        prop.keySpan, prop.valueSpan, i18n);\n  }\n\n  visit<Result>(visitor: Visitor<Result>): Result {\n    return visitor.visitBoundAttribute(this);\n  }\n}\n\nexport class BoundEvent implements Node {\n  constructor(\n      public name: string, public type: ParsedEventType, public handler: AST,\n      public target: string|null, public phase: string|null, public sourceSpan: ParseSourceSpan,\n      public handlerSpan: ParseSourceSpan, readonly keySpan: ParseSourceSpan) {}\n\n  static fromParsedEvent(event: ParsedEvent) {\n    const target: string|null = event.type === ParsedEventType.Regular ? event.targetOrPhase : null;\n    const phase: string|null =\n        event.type === ParsedEventType.Animation ? event.targetOrPhase : null;\n    if (event.keySpan === undefined) {\n      throw new Error(`Unexpected state: keySpan must be defined for bound event but was not for ${\n          event.name}: ${event.sourceSpan}`);\n    }\n    return new BoundEvent(\n        event.name, event.type, event.handler, target, phase, event.sourceSpan, event.handlerSpan,\n        event.keySpan);\n  }\n\n  visit<Result>(visitor: Visitor<Result>): Result {\n    return visitor.visitBoundEvent(this);\n  }\n}\n\nexport class Element implements Node {\n  constructor(\n      public name: string, public attributes: TextAttribute[], public inputs: BoundAttribute[],\n      public outputs: BoundEvent[], public children: Node[], public references: Reference[],\n      public sourceSpan: ParseSourceSpan, public startSourceSpan: ParseSourceSpan,\n      public endSourceSpan: ParseSourceSpan|null, public i18n?: I18nMeta) {}\n  visit<Result>(visitor: Visitor<Result>): Result {\n    return visitor.visitElement(this);\n  }\n}\n\nexport class Template implements Node {\n  constructor(\n      public tagName: string, public attributes: TextAttribute[], public inputs: BoundAttribute[],\n      public outputs: BoundEvent[], public templateAttrs: (BoundAttribute|TextAttribute)[],\n      public children: Node[], public references: Reference[], public variables: Variable[],\n      public sourceSpan: ParseSourceSpan, public startSourceSpan: ParseSourceSpan,\n      public endSourceSpan: ParseSourceSpan|null, public i18n?: I18nMeta) {}\n  visit<Result>(visitor: Visitor<Result>): Result {\n    return visitor.visitTemplate(this);\n  }\n}\n\nexport class Content implements Node {\n  readonly name = 'ng-content';\n\n  constructor(\n      public selector: string, public attributes: TextAttribute[],\n      public sourceSpan: ParseSourceSpan, public i18n?: I18nMeta) {}\n  visit<Result>(visitor: Visitor<Result>): Result {\n    return visitor.visitContent(this);\n  }\n}\n\nexport class Variable implements Node {\n  constructor(\n      public name: string, public value: string, public sourceSpan: ParseSourceSpan,\n      readonly keySpan: ParseSourceSpan, public valueSpan?: ParseSourceSpan) {}\n  visit<Result>(visitor: Visitor<Result>): Result {\n    return visitor.visitVariable(this);\n  }\n}\n\nexport class Reference implements Node {\n  constructor(\n      public name: string, public value: string, public sourceSpan: ParseSourceSpan,\n      readonly keySpan: ParseSourceSpan, public valueSpan?: ParseSourceSpan) {}\n  visit<Result>(visitor: Visitor<Result>): Result {\n    return visitor.visitReference(this);\n  }\n}\n\nexport class Icu implements Node {\n  constructor(\n      public vars: {[name: string]: BoundText},\n      public placeholders: {[name: string]: Text|BoundText}, public sourceSpan: ParseSourceSpan,\n      public i18n?: I18nMeta) {}\n  visit<Result>(visitor: Visitor<Result>): Result {\n    return visitor.visitIcu(this);\n  }\n}\n\nexport interface Visitor<Result = any> {\n  // Returning a truthy value from `visit()` will prevent `visitAll()` from the call to the typed\n  // method and result returned will become the result included in `visitAll()`s result array.\n  visit?(node: Node): Result;\n\n  visitElement(element: Element): Result;\n  visitTemplate(template: Template): Result;\n  visitContent(content: Content): Result;\n  visitVariable(variable: Variable): Result;\n  visitReference(reference: Reference): Result;\n  visitTextAttribute(attribute: TextAttribute): Result;\n  visitBoundAttribute(attribute: BoundAttribute): Result;\n  visitBoundEvent(attribute: BoundEvent): Result;\n  visitText(text: Text): Result;\n  visitBoundText(text: BoundText): Result;\n  visitIcu(icu: Icu): Result;\n}\n\nexport class NullVisitor implements Visitor<void> {\n  visitElement(element: Element): void {}\n  visitTemplate(template: Template): void {}\n  visitContent(content: Content): void {}\n  visitVariable(variable: Variable): void {}\n  visitReference(reference: Reference): void {}\n  visitTextAttribute(attribute: TextAttribute): void {}\n  visitBoundAttribute(attribute: BoundAttribute): void {}\n  visitBoundEvent(attribute: BoundEvent): void {}\n  visitText(text: Text): void {}\n  visitBoundText(text: BoundText): void {}\n  visitIcu(icu: Icu): void {}\n}\n\nexport class RecursiveVisitor implements Visitor<void> {\n  visitElement(element: Element): void {\n    visitAll(this, element.attributes);\n    visitAll(this, element.children);\n    visitAll(this, element.references);\n  }\n  visitTemplate(template: Template): void {\n    visitAll(this, template.attributes);\n    visitAll(this, template.children);\n    visitAll(this, template.references);\n    visitAll(this, template.variables);\n  }\n  visitContent(content: Content): void {}\n  visitVariable(variable: Variable): void {}\n  visitReference(reference: Reference): void {}\n  visitTextAttribute(attribute: TextAttribute): void {}\n  visitBoundAttribute(attribute: BoundAttribute): void {}\n  visitBoundEvent(attribute: BoundEvent): void {}\n  visitText(text: Text): void {}\n  visitBoundText(text: BoundText): void {}\n  visitIcu(icu: Icu): void {}\n}\n\nexport class TransformVisitor implements Visitor<Node> {\n  visitElement(element: Element): Node {\n    const newAttributes = transformAll(this, element.attributes);\n    const newInputs = transformAll(this, element.inputs);\n    const newOutputs = transformAll(this, element.outputs);\n    const newChildren = transformAll(this, element.children);\n    const newReferences = transformAll(this, element.references);\n    if (newAttributes != element.attributes || newInputs != element.inputs ||\n        newOutputs != element.outputs || newChildren != element.children ||\n        newReferences != element.references) {\n      return new Element(\n          element.name, newAttributes, newInputs, newOutputs, newChildren, newReferences,\n          element.sourceSpan, element.startSourceSpan, element.endSourceSpan);\n    }\n    return element;\n  }\n\n  visitTemplate(template: Template): Node {\n    const newAttributes = transformAll(this, template.attributes);\n    const newInputs = transformAll(this, template.inputs);\n    const newOutputs = transformAll(this, template.outputs);\n    const newTemplateAttrs = transformAll(this, template.templateAttrs);\n    const newChildren = transformAll(this, template.children);\n    const newReferences = transformAll(this, template.references);\n    const newVariables = transformAll(this, template.variables);\n    if (newAttributes != template.attributes || newInputs != template.inputs ||\n        newOutputs != template.outputs || newTemplateAttrs != template.templateAttrs ||\n        newChildren != template.children || newReferences != template.references ||\n        newVariables != template.variables) {\n      return new Template(\n          template.tagName, newAttributes, newInputs, newOutputs, newTemplateAttrs, newChildren,\n          newReferences, newVariables, template.sourceSpan, template.startSourceSpan,\n          template.endSourceSpan);\n    }\n    return template;\n  }\n\n  visitContent(content: Content): Node {\n    return content;\n  }\n\n  visitVariable(variable: Variable): Node {\n    return variable;\n  }\n  visitReference(reference: Reference): Node {\n    return reference;\n  }\n  visitTextAttribute(attribute: TextAttribute): Node {\n    return attribute;\n  }\n  visitBoundAttribute(attribute: BoundAttribute): Node {\n    return attribute;\n  }\n  visitBoundEvent(attribute: BoundEvent): Node {\n    return attribute;\n  }\n  visitText(text: Text): Node {\n    return text;\n  }\n  visitBoundText(text: BoundText): Node {\n    return text;\n  }\n  visitIcu(icu: Icu): Node {\n    return icu;\n  }\n}\n\nexport function visitAll<Result>(visitor: Visitor<Result>, nodes: Node[]): Result[] {\n  const result: Result[] = [];\n  if (visitor.visit) {\n    for (const node of nodes) {\n      const newNode = visitor.visit(node) || node.visit(visitor);\n    }\n  } else {\n    for (const node of nodes) {\n      const newNode = node.visit(visitor);\n      if (newNode) {\n        result.push(newNode);\n      }\n    }\n  }\n  return result;\n}\n\nexport function transformAll<Result extends Node>(\n    visitor: Visitor<Node>, nodes: Result[]): Result[] {\n  const result: Result[] = [];\n  let changed = false;\n  for (const node of nodes) {\n    const newNode = node.visit(visitor);\n    if (newNode) {\n      result.push(newNode as Result);\n    }\n    changed = changed || newNode != node;\n  }\n  return changed ? result : nodes;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}