{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nvar _get = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/get\");\n\nvar _getPrototypeOf = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar _classCallCheck = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TargetDefinitionCollection = exports.ProjectDefinitionCollection = void 0;\n\nvar DefinitionCollection = /*#__PURE__*/function () {\n  function DefinitionCollection(initial, _listener) {\n    _classCallCheck(this, DefinitionCollection);\n\n    this._listener = _listener;\n    this._map = new Map(initial && Object.entries(initial));\n  }\n\n  _createClass(DefinitionCollection, [{\n    key: \"delete\",\n    value: function _delete(key) {\n      var value = this._map.get(key);\n\n      var result = this._map.delete(key);\n\n      if (result && value !== undefined && this._listener) {\n        this._listener(key, 'remove', undefined, value, this);\n      }\n\n      return result;\n    }\n  }, {\n    key: \"set\",\n    value: function set(key, value) {\n      var existing = this.get(key);\n\n      this._map.set(key, value);\n\n      if (this._listener) {\n        this._listener(key, existing !== undefined ? 'replace' : 'add', value, existing, this);\n      }\n\n      return this;\n    }\n  }, {\n    key: \"forEach\",\n    value: function forEach(callbackfn, thisArg) {\n      var _this = this;\n\n      this._map.forEach(function (value, key) {\n        return callbackfn(value, key, _this);\n      }, thisArg);\n    }\n  }, {\n    key: \"get\",\n    value: function get(key) {\n      return this._map.get(key);\n    }\n  }, {\n    key: \"has\",\n    value: function has(key) {\n      return this._map.has(key);\n    }\n  }, {\n    key: \"size\",\n    get: function get() {\n      return this._map.size;\n    }\n  }, {\n    key: Symbol.iterator,\n    value: function value() {\n      return this._map[Symbol.iterator]();\n    }\n  }, {\n    key: \"entries\",\n    value: function entries() {\n      return this._map.entries();\n    }\n  }, {\n    key: \"keys\",\n    value: function keys() {\n      return this._map.keys();\n    }\n  }, {\n    key: \"values\",\n    value: function values() {\n      return this._map.values();\n    }\n  }]);\n\n  return DefinitionCollection;\n}();\n\nfunction isJsonValue(value) {\n  var visited = new Set();\n\n  switch (typeof value) {\n    case 'boolean':\n    case 'number':\n    case 'string':\n      return true;\n\n    case 'object':\n      if (value === null) {\n        return true;\n      }\n\n      visited.add(value);\n\n      for (var _i = 0, _Object$values = Object.values(value); _i < _Object$values.length; _i++) {\n        var property = _Object$values[_i];\n\n        if (typeof value === 'object' && visited.has(property)) {\n          continue;\n        }\n\n        if (!isJsonValue(property)) {\n          return false;\n        }\n      }\n\n      return true;\n\n    default:\n      return false;\n  }\n}\n\nvar ProjectDefinitionCollection = /*#__PURE__*/function (_DefinitionCollection) {\n  _inherits(ProjectDefinitionCollection, _DefinitionCollection);\n\n  var _super = _createSuper(ProjectDefinitionCollection);\n\n  function ProjectDefinitionCollection(initial, listener) {\n    _classCallCheck(this, ProjectDefinitionCollection);\n\n    return _super.call(this, initial, listener);\n  }\n\n  _createClass(ProjectDefinitionCollection, [{\n    key: \"add\",\n    value: function add(definition) {\n      if (this.has(definition.name)) {\n        throw new Error('Project name already exists.');\n      }\n\n      this._validateName(definition.name);\n\n      var project = {\n        root: definition.root,\n        prefix: definition.prefix,\n        sourceRoot: definition.sourceRoot,\n        targets: new TargetDefinitionCollection(),\n        extensions: {}\n      };\n\n      if (definition.targets) {\n        for (var _i2 = 0, _Object$entries = Object.entries(definition.targets); _i2 < _Object$entries.length; _i2++) {\n          var _Object$entries$_i = _slicedToArray(_Object$entries[_i2], 2),\n              name = _Object$entries$_i[0],\n              target = _Object$entries$_i[1];\n\n          if (target) {\n            project.targets.set(name, target);\n          }\n        }\n      }\n\n      for (var _i3 = 0, _Object$entries2 = Object.entries(definition); _i3 < _Object$entries2.length; _i3++) {\n        var _Object$entries2$_i = _slicedToArray(_Object$entries2[_i3], 2),\n            _name = _Object$entries2$_i[0],\n            value = _Object$entries2$_i[1];\n\n        switch (_name) {\n          case 'name':\n          case 'root':\n          case 'sourceRoot':\n          case 'prefix':\n          case 'targets':\n            break;\n\n          default:\n            if (isJsonValue(value)) {\n              project.extensions[_name] = value;\n            } else {\n              throw new TypeError(\"\\\"\".concat(_name, \"\\\" must be a JSON value.\"));\n            }\n\n            break;\n        }\n      }\n\n      _get(_getPrototypeOf(ProjectDefinitionCollection.prototype), \"set\", this).call(this, definition.name, project);\n\n      return project;\n    }\n  }, {\n    key: \"set\",\n    value: function set(name, value) {\n      this._validateName(name);\n\n      _get(_getPrototypeOf(ProjectDefinitionCollection.prototype), \"set\", this).call(this, name, value);\n\n      return this;\n    }\n  }, {\n    key: \"_validateName\",\n    value: function _validateName(name) {\n      if (typeof name !== 'string' || !/^(?:@\\w[\\w\\.-]*\\/)?\\w[\\w\\.-]*$/.test(name)) {\n        throw new Error('Project name must be a valid npm package name.');\n      }\n    }\n  }]);\n\n  return ProjectDefinitionCollection;\n}(DefinitionCollection);\n\nexports.ProjectDefinitionCollection = ProjectDefinitionCollection;\n\nvar TargetDefinitionCollection = /*#__PURE__*/function (_DefinitionCollection2) {\n  _inherits(TargetDefinitionCollection, _DefinitionCollection2);\n\n  var _super2 = _createSuper(TargetDefinitionCollection);\n\n  function TargetDefinitionCollection(initial, listener) {\n    _classCallCheck(this, TargetDefinitionCollection);\n\n    return _super2.call(this, initial, listener);\n  }\n\n  _createClass(TargetDefinitionCollection, [{\n    key: \"add\",\n    value: function add(definition) {\n      if (this.has(definition.name)) {\n        throw new Error('Target name already exists.');\n      }\n\n      this._validateName(definition.name);\n\n      var target = {\n        builder: definition.builder,\n        options: definition.options,\n        configurations: definition.configurations\n      };\n\n      _get(_getPrototypeOf(TargetDefinitionCollection.prototype), \"set\", this).call(this, definition.name, target);\n\n      return target;\n    }\n  }, {\n    key: \"set\",\n    value: function set(name, value) {\n      this._validateName(name);\n\n      _get(_getPrototypeOf(TargetDefinitionCollection.prototype), \"set\", this).call(this, name, value);\n\n      return this;\n    }\n  }, {\n    key: \"_validateName\",\n    value: function _validateName(name) {\n      if (typeof name !== 'string') {\n        throw new TypeError('Target name must be a string.');\n      }\n    }\n  }]);\n\n  return TargetDefinitionCollection;\n}(DefinitionCollection);\n\nexports.TargetDefinitionCollection = TargetDefinitionCollection;","map":{"version":3,"sources":["/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@angular-devkit/build-angular/node_modules/@angular-devkit/core/src/workspace/definitions.js"],"names":["Object","defineProperty","exports","value","TargetDefinitionCollection","ProjectDefinitionCollection","DefinitionCollection","initial","_listener","_map","Map","entries","key","get","result","delete","undefined","existing","set","callbackfn","thisArg","forEach","has","size","Symbol","iterator","keys","values","isJsonValue","visited","Set","add","property","listener","definition","name","Error","_validateName","project","root","prefix","sourceRoot","targets","extensions","target","TypeError","test","builder","options","configurations"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TargetDefinitionCollection = exports.ProjectDefinitionCollection = void 0;\nclass DefinitionCollection {\n    constructor(initial, _listener) {\n        this._listener = _listener;\n        this._map = new Map(initial && Object.entries(initial));\n    }\n    delete(key) {\n        const value = this._map.get(key);\n        const result = this._map.delete(key);\n        if (result && value !== undefined && this._listener) {\n            this._listener(key, 'remove', undefined, value, this);\n        }\n        return result;\n    }\n    set(key, value) {\n        const existing = this.get(key);\n        this._map.set(key, value);\n        if (this._listener) {\n            this._listener(key, existing !== undefined ? 'replace' : 'add', value, existing, this);\n        }\n        return this;\n    }\n    forEach(callbackfn, thisArg) {\n        this._map.forEach((value, key) => callbackfn(value, key, this), thisArg);\n    }\n    get(key) {\n        return this._map.get(key);\n    }\n    has(key) {\n        return this._map.has(key);\n    }\n    get size() {\n        return this._map.size;\n    }\n    [Symbol.iterator]() {\n        return this._map[Symbol.iterator]();\n    }\n    entries() {\n        return this._map.entries();\n    }\n    keys() {\n        return this._map.keys();\n    }\n    values() {\n        return this._map.values();\n    }\n}\nfunction isJsonValue(value) {\n    const visited = new Set();\n    switch (typeof value) {\n        case 'boolean':\n        case 'number':\n        case 'string':\n            return true;\n        case 'object':\n            if (value === null) {\n                return true;\n            }\n            visited.add(value);\n            for (const property of Object.values(value)) {\n                if (typeof value === 'object' && visited.has(property)) {\n                    continue;\n                }\n                if (!isJsonValue(property)) {\n                    return false;\n                }\n            }\n            return true;\n        default:\n            return false;\n    }\n}\nclass ProjectDefinitionCollection extends DefinitionCollection {\n    constructor(initial, listener) {\n        super(initial, listener);\n    }\n    add(definition) {\n        if (this.has(definition.name)) {\n            throw new Error('Project name already exists.');\n        }\n        this._validateName(definition.name);\n        const project = {\n            root: definition.root,\n            prefix: definition.prefix,\n            sourceRoot: definition.sourceRoot,\n            targets: new TargetDefinitionCollection(),\n            extensions: {},\n        };\n        if (definition.targets) {\n            for (const [name, target] of Object.entries(definition.targets)) {\n                if (target) {\n                    project.targets.set(name, target);\n                }\n            }\n        }\n        for (const [name, value] of Object.entries(definition)) {\n            switch (name) {\n                case 'name':\n                case 'root':\n                case 'sourceRoot':\n                case 'prefix':\n                case 'targets':\n                    break;\n                default:\n                    if (isJsonValue(value)) {\n                        project.extensions[name] = value;\n                    }\n                    else {\n                        throw new TypeError(`\"${name}\" must be a JSON value.`);\n                    }\n                    break;\n            }\n        }\n        super.set(definition.name, project);\n        return project;\n    }\n    set(name, value) {\n        this._validateName(name);\n        super.set(name, value);\n        return this;\n    }\n    _validateName(name) {\n        if (typeof name !== 'string' || !/^(?:@\\w[\\w\\.-]*\\/)?\\w[\\w\\.-]*$/.test(name)) {\n            throw new Error('Project name must be a valid npm package name.');\n        }\n    }\n}\nexports.ProjectDefinitionCollection = ProjectDefinitionCollection;\nclass TargetDefinitionCollection extends DefinitionCollection {\n    constructor(initial, listener) {\n        super(initial, listener);\n    }\n    add(definition) {\n        if (this.has(definition.name)) {\n            throw new Error('Target name already exists.');\n        }\n        this._validateName(definition.name);\n        const target = {\n            builder: definition.builder,\n            options: definition.options,\n            configurations: definition.configurations,\n        };\n        super.set(definition.name, target);\n        return target;\n    }\n    set(name, value) {\n        this._validateName(name);\n        super.set(name, value);\n        return this;\n    }\n    _validateName(name) {\n        if (typeof name !== 'string') {\n            throw new TypeError('Target name must be a string.');\n        }\n    }\n}\nexports.TargetDefinitionCollection = TargetDefinitionCollection;\n"]},"metadata":{},"sourceType":"script"}