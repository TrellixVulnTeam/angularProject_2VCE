{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nvar _classCallCheck = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar Source = require(\"./Source\");\n\nvar _require = require(\"source-map\"),\n    SourceNode = _require.SourceNode;\n\nvar _require2 = require(\"source-list-map\"),\n    SourceListMap = _require2.SourceListMap;\n\nvar RawSource = /*#__PURE__*/function (_Source) {\n  _inherits(RawSource, _Source);\n\n  var _super = _createSuper(RawSource);\n\n  function RawSource(value) {\n    var _this;\n\n    var convertToString = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n    _classCallCheck(this, RawSource);\n\n    _this = _super.call(this);\n    var isBuffer = Buffer.isBuffer(value);\n\n    if (!isBuffer && typeof value !== \"string\") {\n      throw new TypeError(\"argument 'value' must be either string of Buffer\");\n    }\n\n    _this._valueIsBuffer = !convertToString && isBuffer;\n    _this._value = convertToString && isBuffer ? undefined : value;\n    _this._valueAsBuffer = isBuffer ? value : undefined;\n    return _this;\n  }\n\n  _createClass(RawSource, [{\n    key: \"isBuffer\",\n    value: function isBuffer() {\n      return this._valueIsBuffer;\n    }\n  }, {\n    key: \"source\",\n    value: function source() {\n      if (this._value === undefined) {\n        this._value = this._valueAsBuffer.toString(\"utf-8\");\n      }\n\n      return this._value;\n    }\n  }, {\n    key: \"buffer\",\n    value: function buffer() {\n      if (this._valueAsBuffer === undefined) {\n        this._valueAsBuffer = Buffer.from(this._value, \"utf-8\");\n      }\n\n      return this._valueAsBuffer;\n    }\n  }, {\n    key: \"map\",\n    value: function map(options) {\n      return null;\n    }\n  }, {\n    key: \"node\",\n    value: function node(options) {\n      if (this._value === undefined) {\n        this._value = this._valueAsBuffer.toString(\"utf-8\");\n      }\n\n      return new SourceNode(null, null, null, this._value);\n    }\n  }, {\n    key: \"listMap\",\n    value: function listMap(options) {\n      if (this._value === undefined) {\n        this._value = this._valueAsBuffer.toString(\"utf-8\");\n      }\n\n      return new SourceListMap(this._value);\n    }\n  }, {\n    key: \"updateHash\",\n    value: function updateHash(hash) {\n      if (this._valueAsBuffer === undefined) {\n        this._valueAsBuffer = Buffer.from(this._value, \"utf-8\");\n      }\n\n      hash.update(\"RawSource\");\n      hash.update(this._valueAsBuffer);\n    }\n  }]);\n\n  return RawSource;\n}(Source);\n\nmodule.exports = RawSource;","map":{"version":3,"sources":["/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@angular-devkit/build-angular/node_modules/webpack-sources/lib/RawSource.js"],"names":["Source","require","SourceNode","SourceListMap","RawSource","value","convertToString","isBuffer","Buffer","TypeError","_valueIsBuffer","_value","undefined","_valueAsBuffer","toString","from","options","hash","update","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;;;;;;;;;AAEA,IAAMA,MAAM,GAAGC,OAAO,CAAC,UAAD,CAAtB;;AACA,eAAuBA,OAAO,CAAC,YAAD,CAA9B;AAAA,IAAQC,UAAR,YAAQA,UAAR;;AACA,gBAA0BD,OAAO,CAAC,iBAAD,CAAjC;AAAA,IAAQE,aAAR,aAAQA,aAAR;;IAEMC,S;;;;;AACL,qBAAYC,KAAZ,EAA4C;AAAA;;AAAA,QAAzBC,eAAyB,uEAAP,KAAO;;AAAA;;AAC3C;AACA,QAAMC,QAAQ,GAAGC,MAAM,CAACD,QAAP,CAAgBF,KAAhB,CAAjB;;AACA,QAAI,CAACE,QAAD,IAAa,OAAOF,KAAP,KAAiB,QAAlC,EAA4C;AAC3C,YAAM,IAAII,SAAJ,CAAc,kDAAd,CAAN;AACA;;AACD,UAAKC,cAAL,GAAsB,CAACJ,eAAD,IAAoBC,QAA1C;AACA,UAAKI,MAAL,GAAcL,eAAe,IAAIC,QAAnB,GAA8BK,SAA9B,GAA0CP,KAAxD;AACA,UAAKQ,cAAL,GAAsBN,QAAQ,GAAGF,KAAH,GAAWO,SAAzC;AAR2C;AAS3C;;;;WAED,oBAAW;AACV,aAAO,KAAKF,cAAZ;AACA;;;WAED,kBAAS;AACR,UAAI,KAAKC,MAAL,KAAgBC,SAApB,EAA+B;AAC9B,aAAKD,MAAL,GAAc,KAAKE,cAAL,CAAoBC,QAApB,CAA6B,OAA7B,CAAd;AACA;;AACD,aAAO,KAAKH,MAAZ;AACA;;;WAED,kBAAS;AACR,UAAI,KAAKE,cAAL,KAAwBD,SAA5B,EAAuC;AACtC,aAAKC,cAAL,GAAsBL,MAAM,CAACO,IAAP,CAAY,KAAKJ,MAAjB,EAAyB,OAAzB,CAAtB;AACA;;AACD,aAAO,KAAKE,cAAZ;AACA;;;WAED,aAAIG,OAAJ,EAAa;AACZ,aAAO,IAAP;AACA;;;WAED,cAAKA,OAAL,EAAc;AACb,UAAI,KAAKL,MAAL,KAAgBC,SAApB,EAA+B;AAC9B,aAAKD,MAAL,GAAc,KAAKE,cAAL,CAAoBC,QAApB,CAA6B,OAA7B,CAAd;AACA;;AACD,aAAO,IAAIZ,UAAJ,CAAe,IAAf,EAAqB,IAArB,EAA2B,IAA3B,EAAiC,KAAKS,MAAtC,CAAP;AACA;;;WAED,iBAAQK,OAAR,EAAiB;AAChB,UAAI,KAAKL,MAAL,KAAgBC,SAApB,EAA+B;AAC9B,aAAKD,MAAL,GAAc,KAAKE,cAAL,CAAoBC,QAApB,CAA6B,OAA7B,CAAd;AACA;;AACD,aAAO,IAAIX,aAAJ,CAAkB,KAAKQ,MAAvB,CAAP;AACA;;;WAED,oBAAWM,IAAX,EAAiB;AAChB,UAAI,KAAKJ,cAAL,KAAwBD,SAA5B,EAAuC;AACtC,aAAKC,cAAL,GAAsBL,MAAM,CAACO,IAAP,CAAY,KAAKJ,MAAjB,EAAyB,OAAzB,CAAtB;AACA;;AACDM,MAAAA,IAAI,CAACC,MAAL,CAAY,WAAZ;AACAD,MAAAA,IAAI,CAACC,MAAL,CAAY,KAAKL,cAAjB;AACA;;;;EAtDsBb,M;;AAyDxBmB,MAAM,CAACC,OAAP,GAAiBhB,SAAjB","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst Source = require(\"./Source\");\nconst { SourceNode } = require(\"source-map\");\nconst { SourceListMap } = require(\"source-list-map\");\n\nclass RawSource extends Source {\n\tconstructor(value, convertToString = false) {\n\t\tsuper();\n\t\tconst isBuffer = Buffer.isBuffer(value);\n\t\tif (!isBuffer && typeof value !== \"string\") {\n\t\t\tthrow new TypeError(\"argument 'value' must be either string of Buffer\");\n\t\t}\n\t\tthis._valueIsBuffer = !convertToString && isBuffer;\n\t\tthis._value = convertToString && isBuffer ? undefined : value;\n\t\tthis._valueAsBuffer = isBuffer ? value : undefined;\n\t}\n\n\tisBuffer() {\n\t\treturn this._valueIsBuffer;\n\t}\n\n\tsource() {\n\t\tif (this._value === undefined) {\n\t\t\tthis._value = this._valueAsBuffer.toString(\"utf-8\");\n\t\t}\n\t\treturn this._value;\n\t}\n\n\tbuffer() {\n\t\tif (this._valueAsBuffer === undefined) {\n\t\t\tthis._valueAsBuffer = Buffer.from(this._value, \"utf-8\");\n\t\t}\n\t\treturn this._valueAsBuffer;\n\t}\n\n\tmap(options) {\n\t\treturn null;\n\t}\n\n\tnode(options) {\n\t\tif (this._value === undefined) {\n\t\t\tthis._value = this._valueAsBuffer.toString(\"utf-8\");\n\t\t}\n\t\treturn new SourceNode(null, null, null, this._value);\n\t}\n\n\tlistMap(options) {\n\t\tif (this._value === undefined) {\n\t\t\tthis._value = this._valueAsBuffer.toString(\"utf-8\");\n\t\t}\n\t\treturn new SourceListMap(this._value);\n\t}\n\n\tupdateHash(hash) {\n\t\tif (this._valueAsBuffer === undefined) {\n\t\t\tthis._valueAsBuffer = Buffer.from(this._value, \"utf-8\");\n\t\t}\n\t\thash.update(\"RawSource\");\n\t\thash.update(this._valueAsBuffer);\n\t}\n}\n\nmodule.exports = RawSource;\n"]},"metadata":{},"sourceType":"script"}