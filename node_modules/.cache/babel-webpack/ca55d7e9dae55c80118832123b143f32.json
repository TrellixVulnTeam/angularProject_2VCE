{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nvar _createForOfIteratorHelper = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _classCallCheck = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/createClass\");\n\nvar MappingsContext = /*#__PURE__*/function () {\n  function MappingsContext() {\n    _classCallCheck(this, MappingsContext);\n\n    this.sourcesIndices = new Map();\n    this.sourcesContent = new Map();\n    this.hasSourceContent = false;\n    this.currentOriginalLine = 1;\n    this.currentSource = 0;\n    this.unfinishedGeneratedLine = false;\n  }\n\n  _createClass(MappingsContext, [{\n    key: \"ensureSource\",\n    value: function ensureSource(source, originalSource) {\n      var idx = this.sourcesIndices.get(source);\n\n      if (typeof idx === \"number\") {\n        return idx;\n      }\n\n      idx = this.sourcesIndices.size;\n      this.sourcesIndices.set(source, idx);\n      this.sourcesContent.set(source, originalSource);\n      if (typeof originalSource === \"string\") this.hasSourceContent = true;\n      return idx;\n    }\n  }, {\n    key: \"getArrays\",\n    value: function getArrays() {\n      var sources = [];\n      var sourcesContent = [];\n\n      var _iterator = _createForOfIteratorHelper(this.sourcesContent),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var pair = _step.value;\n          sources.push(pair[0]);\n          sourcesContent.push(pair[1]);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      return {\n        sources: sources,\n        sourcesContent: sourcesContent\n      };\n    }\n  }]);\n\n  return MappingsContext;\n}();\n\nmodule.exports = MappingsContext;","map":{"version":3,"sources":["/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/source-list-map/lib/MappingsContext.js"],"names":["MappingsContext","sourcesIndices","Map","sourcesContent","hasSourceContent","currentOriginalLine","currentSource","unfinishedGeneratedLine","source","originalSource","idx","get","size","set","sources","pair","push","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;;;;;;;IAEMA,e;AACL,6BAAc;AAAA;;AACb,SAAKC,cAAL,GAAsB,IAAIC,GAAJ,EAAtB;AACA,SAAKC,cAAL,GAAsB,IAAID,GAAJ,EAAtB;AACA,SAAKE,gBAAL,GAAwB,KAAxB;AACA,SAAKC,mBAAL,GAA2B,CAA3B;AACA,SAAKC,aAAL,GAAqB,CAArB;AACA,SAAKC,uBAAL,GAA+B,KAA/B;AACA;;;;WAED,sBAAaC,MAAb,EAAqBC,cAArB,EAAqC;AACpC,UAAIC,GAAG,GAAG,KAAKT,cAAL,CAAoBU,GAApB,CAAwBH,MAAxB,CAAV;;AACA,UAAG,OAAOE,GAAP,KAAe,QAAlB,EAA4B;AAC3B,eAAOA,GAAP;AACA;;AACDA,MAAAA,GAAG,GAAG,KAAKT,cAAL,CAAoBW,IAA1B;AACA,WAAKX,cAAL,CAAoBY,GAApB,CAAwBL,MAAxB,EAAgCE,GAAhC;AACA,WAAKP,cAAL,CAAoBU,GAApB,CAAwBL,MAAxB,EAAgCC,cAAhC;AACA,UAAG,OAAOA,cAAP,KAA0B,QAA7B,EACC,KAAKL,gBAAL,GAAwB,IAAxB;AACD,aAAOM,GAAP;AACA;;;WAED,qBAAY;AACX,UAAMI,OAAO,GAAG,EAAhB;AACA,UAAMX,cAAc,GAAG,EAAvB;;AAFW,iDAIO,KAAKA,cAJZ;AAAA;;AAAA;AAIX,4DAAuC;AAAA,cAA7BY,IAA6B;AACtCD,UAAAA,OAAO,CAACE,IAAR,CAAaD,IAAI,CAAC,CAAD,CAAjB;AACAZ,UAAAA,cAAc,CAACa,IAAf,CAAoBD,IAAI,CAAC,CAAD,CAAxB;AACA;AAPU;AAAA;AAAA;AAAA;AAAA;;AASX,aAAO;AACND,QAAAA,OAAO,EAAPA,OADM;AAENX,QAAAA,cAAc,EAAdA;AAFM,OAAP;AAIA;;;;;;AAEFc,MAAM,CAACC,OAAP,GAAiBlB,eAAjB","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nclass MappingsContext {\n\tconstructor() {\n\t\tthis.sourcesIndices = new Map();\n\t\tthis.sourcesContent = new Map();\n\t\tthis.hasSourceContent = false;\n\t\tthis.currentOriginalLine = 1;\n\t\tthis.currentSource = 0;\n\t\tthis.unfinishedGeneratedLine = false;\n\t}\n\n\tensureSource(source, originalSource) {\n\t\tlet idx = this.sourcesIndices.get(source);\n\t\tif(typeof idx === \"number\") {\n\t\t\treturn idx;\n\t\t}\n\t\tidx = this.sourcesIndices.size;\n\t\tthis.sourcesIndices.set(source, idx);\n\t\tthis.sourcesContent.set(source, originalSource)\n\t\tif(typeof originalSource === \"string\")\n\t\t\tthis.hasSourceContent = true;\n\t\treturn idx;\n\t}\n\n\tgetArrays() {\n\t\tconst sources = [];\n\t\tconst sourcesContent = [];\n\n\t\tfor(const pair of this.sourcesContent) {\n\t\t\tsources.push(pair[0]);\n\t\t\tsourcesContent.push(pair[1]);\n\t\t}\n\n\t\treturn {\n\t\t\tsources,\n\t\t\tsourcesContent\n\t\t};\n\t}\n}\nmodule.exports = MappingsContext;\n"]},"metadata":{},"sourceType":"script"}