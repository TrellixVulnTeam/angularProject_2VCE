{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nvar _classCallCheck = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _require = require(\"webpack-sources\"),\n    ConcatSource = _require.ConcatSource;\n/** @typedef {import(\"./Compilation\")} Compilation */\n\n\nvar SetVarMainTemplatePlugin = /*#__PURE__*/function () {\n  /**\n   * @param {string} varExpression the accessor where the library is exported\n   * @param {boolean} copyObject specify copying the exports\n   */\n  function SetVarMainTemplatePlugin(varExpression, copyObject) {\n    _classCallCheck(this, SetVarMainTemplatePlugin);\n\n    /** @type {string} */\n    this.varExpression = varExpression;\n    /** @type {boolean} */\n\n    this.copyObject = copyObject;\n  }\n  /**\n   * @param {Compilation} compilation the compilation instance\n   * @returns {void}\n   */\n\n\n  _createClass(SetVarMainTemplatePlugin, [{\n    key: \"apply\",\n    value: function apply(compilation) {\n      var _this = this;\n\n      var mainTemplate = compilation.mainTemplate,\n          chunkTemplate = compilation.chunkTemplate;\n\n      var onRenderWithEntry = function onRenderWithEntry(source, chunk, hash) {\n        var varExpression = mainTemplate.getAssetPath(_this.varExpression, {\n          hash: hash,\n          chunk: chunk\n        });\n\n        if (_this.copyObject) {\n          return new ConcatSource(\"(function(e, a) { for(var i in a) e[i] = a[i]; }(\".concat(varExpression, \", \"), source, \"))\");\n        } else {\n          var prefix = \"\".concat(varExpression, \" =\\n\");\n          return new ConcatSource(prefix, source);\n        }\n      };\n\n      for (var _i = 0, _arr = [mainTemplate, chunkTemplate]; _i < _arr.length; _i++) {\n        var template = _arr[_i];\n        template.hooks.renderWithEntry.tap(\"SetVarMainTemplatePlugin\", onRenderWithEntry);\n      }\n\n      mainTemplate.hooks.globalHashPaths.tap(\"SetVarMainTemplatePlugin\", function (paths) {\n        if (_this.varExpression) paths.push(_this.varExpression);\n        return paths;\n      });\n      mainTemplate.hooks.hash.tap(\"SetVarMainTemplatePlugin\", function (hash) {\n        hash.update(\"set var\");\n        hash.update(\"\".concat(_this.varExpression));\n        hash.update(\"\".concat(_this.copyObject));\n      });\n    }\n  }]);\n\n  return SetVarMainTemplatePlugin;\n}();\n\nmodule.exports = SetVarMainTemplatePlugin;","map":{"version":3,"sources":["/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/webpack/lib/SetVarMainTemplatePlugin.js"],"names":["require","ConcatSource","SetVarMainTemplatePlugin","varExpression","copyObject","compilation","mainTemplate","chunkTemplate","onRenderWithEntry","source","chunk","hash","getAssetPath","prefix","template","hooks","renderWithEntry","tap","globalHashPaths","paths","push","update","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;;;;;AAEA,eAAyBA,OAAO,CAAC,iBAAD,CAAhC;AAAA,IAAQC,YAAR,YAAQA,YAAR;AAEA;;;IAEMC,wB;AACL;AACD;AACA;AACA;AACC,oCAAYC,aAAZ,EAA2BC,UAA3B,EAAuC;AAAA;;AACtC;AACA,SAAKD,aAAL,GAAqBA,aAArB;AACA;;AACA,SAAKC,UAAL,GAAkBA,UAAlB;AACA;AAED;AACD;AACA;AACA;;;;;WACC,eAAMC,WAAN,EAAmB;AAAA;;AAClB,UAAQC,YAAR,GAAwCD,WAAxC,CAAQC,YAAR;AAAA,UAAsBC,aAAtB,GAAwCF,WAAxC,CAAsBE,aAAtB;;AAEA,UAAMC,iBAAiB,GAAG,SAApBA,iBAAoB,CAACC,MAAD,EAASC,KAAT,EAAgBC,IAAhB,EAAyB;AAClD,YAAMR,aAAa,GAAGG,YAAY,CAACM,YAAb,CAA0B,KAAI,CAACT,aAA/B,EAA8C;AACnEQ,UAAAA,IAAI,EAAJA,IADmE;AAEnED,UAAAA,KAAK,EAALA;AAFmE,SAA9C,CAAtB;;AAIA,YAAI,KAAI,CAACN,UAAT,EAAqB;AACpB,iBAAO,IAAIH,YAAJ,4DAC8CE,aAD9C,SAENM,MAFM,EAGN,IAHM,CAAP;AAKA,SAND,MAMO;AACN,cAAMI,MAAM,aAAMV,aAAN,SAAZ;AACA,iBAAO,IAAIF,YAAJ,CAAiBY,MAAjB,EAAyBJ,MAAzB,CAAP;AACA;AACD,OAfD;;AAiBA,8BAAuB,CAACH,YAAD,EAAeC,aAAf,CAAvB,0BAAsD;AAAjD,YAAMO,QAAQ,WAAd;AACJA,QAAAA,QAAQ,CAACC,KAAT,CAAeC,eAAf,CAA+BC,GAA/B,CACC,0BADD,EAECT,iBAFD;AAIA;;AAEDF,MAAAA,YAAY,CAACS,KAAb,CAAmBG,eAAnB,CAAmCD,GAAnC,CACC,0BADD,EAEC,UAAAE,KAAK,EAAI;AACR,YAAI,KAAI,CAAChB,aAAT,EAAwBgB,KAAK,CAACC,IAAN,CAAW,KAAI,CAACjB,aAAhB;AACxB,eAAOgB,KAAP;AACA,OALF;AAOAb,MAAAA,YAAY,CAACS,KAAb,CAAmBJ,IAAnB,CAAwBM,GAAxB,CAA4B,0BAA5B,EAAwD,UAAAN,IAAI,EAAI;AAC/DA,QAAAA,IAAI,CAACU,MAAL,CAAY,SAAZ;AACAV,QAAAA,IAAI,CAACU,MAAL,WAAe,KAAI,CAAClB,aAApB;AACAQ,QAAAA,IAAI,CAACU,MAAL,WAAe,KAAI,CAACjB,UAApB;AACA,OAJD;AAKA;;;;;;AAGFkB,MAAM,CAACC,OAAP,GAAiBrB,wBAAjB","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst { ConcatSource } = require(\"webpack-sources\");\n\n/** @typedef {import(\"./Compilation\")} Compilation */\n\nclass SetVarMainTemplatePlugin {\n\t/**\n\t * @param {string} varExpression the accessor where the library is exported\n\t * @param {boolean} copyObject specify copying the exports\n\t */\n\tconstructor(varExpression, copyObject) {\n\t\t/** @type {string} */\n\t\tthis.varExpression = varExpression;\n\t\t/** @type {boolean} */\n\t\tthis.copyObject = copyObject;\n\t}\n\n\t/**\n\t * @param {Compilation} compilation the compilation instance\n\t * @returns {void}\n\t */\n\tapply(compilation) {\n\t\tconst { mainTemplate, chunkTemplate } = compilation;\n\n\t\tconst onRenderWithEntry = (source, chunk, hash) => {\n\t\t\tconst varExpression = mainTemplate.getAssetPath(this.varExpression, {\n\t\t\t\thash,\n\t\t\t\tchunk\n\t\t\t});\n\t\t\tif (this.copyObject) {\n\t\t\t\treturn new ConcatSource(\n\t\t\t\t\t`(function(e, a) { for(var i in a) e[i] = a[i]; }(${varExpression}, `,\n\t\t\t\t\tsource,\n\t\t\t\t\t\"))\"\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tconst prefix = `${varExpression} =\\n`;\n\t\t\t\treturn new ConcatSource(prefix, source);\n\t\t\t}\n\t\t};\n\n\t\tfor (const template of [mainTemplate, chunkTemplate]) {\n\t\t\ttemplate.hooks.renderWithEntry.tap(\n\t\t\t\t\"SetVarMainTemplatePlugin\",\n\t\t\t\tonRenderWithEntry\n\t\t\t);\n\t\t}\n\n\t\tmainTemplate.hooks.globalHashPaths.tap(\n\t\t\t\"SetVarMainTemplatePlugin\",\n\t\t\tpaths => {\n\t\t\t\tif (this.varExpression) paths.push(this.varExpression);\n\t\t\t\treturn paths;\n\t\t\t}\n\t\t);\n\t\tmainTemplate.hooks.hash.tap(\"SetVarMainTemplatePlugin\", hash => {\n\t\t\thash.update(\"set var\");\n\t\t\thash.update(`${this.varExpression}`);\n\t\t\thash.update(`${this.copyObject}`);\n\t\t});\n\t}\n}\n\nmodule.exports = SetVarMainTemplatePlugin;\n"]},"metadata":{},"sourceType":"script"}