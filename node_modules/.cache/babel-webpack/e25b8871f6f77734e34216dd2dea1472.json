{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nvar _classCallCheck = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/createClass\");\n\nvar NodeWatchFileSystem = require(\"./NodeWatchFileSystem\");\n\nvar NodeOutputFileSystem = require(\"./NodeOutputFileSystem\");\n\nvar NodeJsInputFileSystem = require(\"enhanced-resolve/lib/NodeJsInputFileSystem\");\n\nvar CachedInputFileSystem = require(\"enhanced-resolve/lib/CachedInputFileSystem\");\n\nvar createConsoleLogger = require(\"../logging/createConsoleLogger\");\n\nvar nodeConsole = require(\"./nodeConsole\");\n\nvar NodeEnvironmentPlugin = /*#__PURE__*/function () {\n  function NodeEnvironmentPlugin(options) {\n    _classCallCheck(this, NodeEnvironmentPlugin);\n\n    this.options = options || {};\n  }\n\n  _createClass(NodeEnvironmentPlugin, [{\n    key: \"apply\",\n    value: function apply(compiler) {\n      compiler.infrastructureLogger = createConsoleLogger(Object.assign({\n        level: \"info\",\n        debug: false,\n        console: nodeConsole\n      }, this.options.infrastructureLogging));\n      compiler.inputFileSystem = new CachedInputFileSystem(new NodeJsInputFileSystem(), 60000);\n      var inputFileSystem = compiler.inputFileSystem;\n      compiler.outputFileSystem = new NodeOutputFileSystem();\n      compiler.watchFileSystem = new NodeWatchFileSystem(compiler.inputFileSystem);\n      compiler.hooks.beforeRun.tap(\"NodeEnvironmentPlugin\", function (compiler) {\n        if (compiler.inputFileSystem === inputFileSystem) inputFileSystem.purge();\n      });\n    }\n  }]);\n\n  return NodeEnvironmentPlugin;\n}();\n\nmodule.exports = NodeEnvironmentPlugin;","map":{"version":3,"sources":["/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/webpack/lib/node/NodeEnvironmentPlugin.js"],"names":["NodeWatchFileSystem","require","NodeOutputFileSystem","NodeJsInputFileSystem","CachedInputFileSystem","createConsoleLogger","nodeConsole","NodeEnvironmentPlugin","options","compiler","infrastructureLogger","Object","assign","level","debug","console","infrastructureLogging","inputFileSystem","outputFileSystem","watchFileSystem","hooks","beforeRun","tap","purge","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;;;;;AAEA,IAAMA,mBAAmB,GAAGC,OAAO,CAAC,uBAAD,CAAnC;;AACA,IAAMC,oBAAoB,GAAGD,OAAO,CAAC,wBAAD,CAApC;;AACA,IAAME,qBAAqB,GAAGF,OAAO,CAAC,4CAAD,CAArC;;AACA,IAAMG,qBAAqB,GAAGH,OAAO,CAAC,4CAAD,CAArC;;AACA,IAAMI,mBAAmB,GAAGJ,OAAO,CAAC,gCAAD,CAAnC;;AACA,IAAMK,WAAW,GAAGL,OAAO,CAAC,eAAD,CAA3B;;IAEMM,qB;AACL,iCAAYC,OAAZ,EAAqB;AAAA;;AACpB,SAAKA,OAAL,GAAeA,OAAO,IAAI,EAA1B;AACA;;;;WAED,eAAMC,QAAN,EAAgB;AACfA,MAAAA,QAAQ,CAACC,oBAAT,GAAgCL,mBAAmB,CAClDM,MAAM,CAACC,MAAP,CACC;AACCC,QAAAA,KAAK,EAAE,MADR;AAECC,QAAAA,KAAK,EAAE,KAFR;AAGCC,QAAAA,OAAO,EAAET;AAHV,OADD,EAMC,KAAKE,OAAL,CAAaQ,qBANd,CADkD,CAAnD;AAUAP,MAAAA,QAAQ,CAACQ,eAAT,GAA2B,IAAIb,qBAAJ,CAC1B,IAAID,qBAAJ,EAD0B,EAE1B,KAF0B,CAA3B;AAIA,UAAMc,eAAe,GAAGR,QAAQ,CAACQ,eAAjC;AACAR,MAAAA,QAAQ,CAACS,gBAAT,GAA4B,IAAIhB,oBAAJ,EAA5B;AACAO,MAAAA,QAAQ,CAACU,eAAT,GAA2B,IAAInB,mBAAJ,CAC1BS,QAAQ,CAACQ,eADiB,CAA3B;AAGAR,MAAAA,QAAQ,CAACW,KAAT,CAAeC,SAAf,CAAyBC,GAAzB,CAA6B,uBAA7B,EAAsD,UAAAb,QAAQ,EAAI;AACjE,YAAIA,QAAQ,CAACQ,eAAT,KAA6BA,eAAjC,EAAkDA,eAAe,CAACM,KAAhB;AAClD,OAFD;AAGA;;;;;;AAEFC,MAAM,CAACC,OAAP,GAAiBlB,qBAAjB","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst NodeWatchFileSystem = require(\"./NodeWatchFileSystem\");\nconst NodeOutputFileSystem = require(\"./NodeOutputFileSystem\");\nconst NodeJsInputFileSystem = require(\"enhanced-resolve/lib/NodeJsInputFileSystem\");\nconst CachedInputFileSystem = require(\"enhanced-resolve/lib/CachedInputFileSystem\");\nconst createConsoleLogger = require(\"../logging/createConsoleLogger\");\nconst nodeConsole = require(\"./nodeConsole\");\n\nclass NodeEnvironmentPlugin {\n\tconstructor(options) {\n\t\tthis.options = options || {};\n\t}\n\n\tapply(compiler) {\n\t\tcompiler.infrastructureLogger = createConsoleLogger(\n\t\t\tObject.assign(\n\t\t\t\t{\n\t\t\t\t\tlevel: \"info\",\n\t\t\t\t\tdebug: false,\n\t\t\t\t\tconsole: nodeConsole\n\t\t\t\t},\n\t\t\t\tthis.options.infrastructureLogging\n\t\t\t)\n\t\t);\n\t\tcompiler.inputFileSystem = new CachedInputFileSystem(\n\t\t\tnew NodeJsInputFileSystem(),\n\t\t\t60000\n\t\t);\n\t\tconst inputFileSystem = compiler.inputFileSystem;\n\t\tcompiler.outputFileSystem = new NodeOutputFileSystem();\n\t\tcompiler.watchFileSystem = new NodeWatchFileSystem(\n\t\t\tcompiler.inputFileSystem\n\t\t);\n\t\tcompiler.hooks.beforeRun.tap(\"NodeEnvironmentPlugin\", compiler => {\n\t\t\tif (compiler.inputFileSystem === inputFileSystem) inputFileSystem.purge();\n\t\t});\n\t}\n}\nmodule.exports = NodeEnvironmentPlugin;\n"]},"metadata":{},"sourceType":"script"}