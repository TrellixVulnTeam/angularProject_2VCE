{"ast":null,"code":"/**\n * Module dependencies.\n */\nvar Compiler = require('../visitor/compiler'),\n    nodes = require('../nodes'),\n    parse = require('url').parse,\n    relative = require('path').relative,\n    join = require('path').join,\n    dirname = require('path').dirname,\n    extname = require('path').extname,\n    sep = require('path').sep;\n/**\n * Return a url() function which resolves urls.\n *\n * Options:\n *\n *    - `paths` resolution path(s), merged with general lookup paths\n *    - `nocheck` don't check file existence\n *\n * Examples:\n *\n *    stylus(str)\n *      .set('filename', __dirname + '/css/test.styl')\n *      .define('url', stylus.resolver({ nocheck: true }))\n *      .render(function(err, css){ ... })\n *\n * @param {Object} [options]\n * @return {Function}\n * @api public\n */\n\n\nmodule.exports = function (options) {\n  options = options || {};\n\n  function resolver(url) {\n    // Compile the url\n    var compiler = new Compiler(url),\n        filename = url.filename;\n    compiler.isURL = true;\n    url = parse(url.nodes.map(function (node) {\n      return compiler.visit(node);\n    }).join('')); // Parse literal \n\n    var literal = new nodes.Literal('url(\"' + url.href + '\")'),\n        path = url.pathname,\n        dest = this.options.dest,\n        tail = '',\n        res; // Absolute or hash\n\n    if (url.protocol || !path || '/' == path[0]) return literal; // Check that file exists\n\n    if (!options.nocheck) {\n      var _paths = options.paths || [];\n\n      path = require('../utils').lookup(path, _paths.concat(this.paths));\n      if (!path) return literal;\n    }\n\n    if (this.includeCSS && extname(path) == '.css') return new nodes.Literal(url.href);\n    if (url.search) tail += url.search;\n    if (url.hash) tail += url.hash;\n    if (dest && extname(dest) == '.css') dest = dirname(dest);\n    res = relative(dest || dirname(this.filename), options.nocheck ? join(dirname(filename), path) : path) + tail;\n    if ('\\\\' == sep) res = res.replace(/\\\\/g, '/');\n    return new nodes.Literal('url(\"' + res + '\")');\n  }\n\n  ; // Expose options to Evaluator\n\n  resolver.options = options;\n  resolver.raw = true;\n  return resolver;\n};","map":{"version":3,"sources":["/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/stylus/lib/functions/resolver.js"],"names":["Compiler","require","nodes","parse","relative","join","dirname","extname","sep","module","exports","options","resolver","url","compiler","filename","isURL","map","node","visit","literal","Literal","href","path","pathname","dest","tail","res","protocol","nocheck","_paths","paths","lookup","concat","includeCSS","search","hash","replace","raw"],"mappings":"AAAA;AACA;AACA;AAEA,IAAIA,QAAQ,GAAGC,OAAO,CAAC,qBAAD,CAAtB;AAAA,IACIC,KAAK,GAAGD,OAAO,CAAC,UAAD,CADnB;AAAA,IAEIE,KAAK,GAAGF,OAAO,CAAC,KAAD,CAAP,CAAeE,KAF3B;AAAA,IAGIC,QAAQ,GAAGH,OAAO,CAAC,MAAD,CAAP,CAAgBG,QAH/B;AAAA,IAIIC,IAAI,GAAGJ,OAAO,CAAC,MAAD,CAAP,CAAgBI,IAJ3B;AAAA,IAKIC,OAAO,GAAGL,OAAO,CAAC,MAAD,CAAP,CAAgBK,OAL9B;AAAA,IAMIC,OAAO,GAAGN,OAAO,CAAC,MAAD,CAAP,CAAgBM,OAN9B;AAAA,IAOIC,GAAG,GAAGP,OAAO,CAAC,MAAD,CAAP,CAAgBO,GAP1B;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEAC,MAAM,CAACC,OAAP,GAAiB,UAASC,OAAT,EAAkB;AACjCA,EAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;;AAEA,WAASC,QAAT,CAAkBC,GAAlB,EAAuB;AACrB;AACA,QAAIC,QAAQ,GAAG,IAAId,QAAJ,CAAaa,GAAb,CAAf;AAAA,QACIE,QAAQ,GAAGF,GAAG,CAACE,QADnB;AAEAD,IAAAA,QAAQ,CAACE,KAAT,GAAiB,IAAjB;AACAH,IAAAA,GAAG,GAAGV,KAAK,CAACU,GAAG,CAACX,KAAJ,CAAUe,GAAV,CAAc,UAASC,IAAT,EAAc;AACtC,aAAOJ,QAAQ,CAACK,KAAT,CAAeD,IAAf,CAAP;AACD,KAFW,EAETb,IAFS,CAEJ,EAFI,CAAD,CAAX,CALqB,CASrB;;AACA,QAAIe,OAAO,GAAG,IAAIlB,KAAK,CAACmB,OAAV,CAAkB,UAAUR,GAAG,CAACS,IAAd,GAAqB,IAAvC,CAAd;AAAA,QACIC,IAAI,GAAGV,GAAG,CAACW,QADf;AAAA,QAEIC,IAAI,GAAG,KAAKd,OAAL,CAAac,IAFxB;AAAA,QAGIC,IAAI,GAAG,EAHX;AAAA,QAIIC,GAJJ,CAVqB,CAgBrB;;AACA,QAAId,GAAG,CAACe,QAAJ,IAAgB,CAACL,IAAjB,IAAyB,OAAOA,IAAI,CAAC,CAAD,CAAxC,EAA6C,OAAOH,OAAP,CAjBxB,CAmBrB;;AACA,QAAI,CAACT,OAAO,CAACkB,OAAb,EAAsB;AACpB,UAAIC,MAAM,GAAGnB,OAAO,CAACoB,KAAR,IAAiB,EAA9B;;AACAR,MAAAA,IAAI,GAAGtB,OAAO,CAAC,UAAD,CAAP,CAAoB+B,MAApB,CAA2BT,IAA3B,EAAiCO,MAAM,CAACG,MAAP,CAAc,KAAKF,KAAnB,CAAjC,CAAP;AACA,UAAI,CAACR,IAAL,EAAW,OAAOH,OAAP;AACZ;;AAED,QAAI,KAAKc,UAAL,IAAmB3B,OAAO,CAACgB,IAAD,CAAP,IAAiB,MAAxC,EACE,OAAO,IAAIrB,KAAK,CAACmB,OAAV,CAAkBR,GAAG,CAACS,IAAtB,CAAP;AAEF,QAAIT,GAAG,CAACsB,MAAR,EAAgBT,IAAI,IAAIb,GAAG,CAACsB,MAAZ;AAChB,QAAItB,GAAG,CAACuB,IAAR,EAAcV,IAAI,IAAIb,GAAG,CAACuB,IAAZ;AAEd,QAAIX,IAAI,IAAIlB,OAAO,CAACkB,IAAD,CAAP,IAAiB,MAA7B,EACEA,IAAI,GAAGnB,OAAO,CAACmB,IAAD,CAAd;AAEFE,IAAAA,GAAG,GAAGvB,QAAQ,CAACqB,IAAI,IAAInB,OAAO,CAAC,KAAKS,QAAN,CAAhB,EAAiCJ,OAAO,CAACkB,OAAR,GAC3CxB,IAAI,CAACC,OAAO,CAACS,QAAD,CAAR,EAAoBQ,IAApB,CADuC,GAE3CA,IAFU,CAAR,GAEMG,IAFZ;AAIA,QAAI,QAAQlB,GAAZ,EAAiBmB,GAAG,GAAGA,GAAG,CAACU,OAAJ,CAAY,KAAZ,EAAmB,GAAnB,CAAN;AAEjB,WAAO,IAAInC,KAAK,CAACmB,OAAV,CAAkB,UAAUM,GAAV,GAAgB,IAAlC,CAAP;AACD;;AAAA,GA7CgC,CA+CjC;;AACAf,EAAAA,QAAQ,CAACD,OAAT,GAAmBA,OAAnB;AACAC,EAAAA,QAAQ,CAAC0B,GAAT,GAAe,IAAf;AACA,SAAO1B,QAAP;AACD,CAnDD","sourcesContent":["/**\n * Module dependencies.\n */\n\nvar Compiler = require('../visitor/compiler')\n  , nodes = require('../nodes')\n  , parse = require('url').parse\n  , relative = require('path').relative\n  , join = require('path').join\n  , dirname = require('path').dirname\n  , extname = require('path').extname\n  , sep = require('path').sep;\n\n/**\n * Return a url() function which resolves urls.\n *\n * Options:\n *\n *    - `paths` resolution path(s), merged with general lookup paths\n *    - `nocheck` don't check file existence\n *\n * Examples:\n *\n *    stylus(str)\n *      .set('filename', __dirname + '/css/test.styl')\n *      .define('url', stylus.resolver({ nocheck: true }))\n *      .render(function(err, css){ ... })\n *\n * @param {Object} [options]\n * @return {Function}\n * @api public\n */\n\nmodule.exports = function(options) {\n  options = options || {};\n\n  function resolver(url) {\n    // Compile the url\n    var compiler = new Compiler(url)\n      , filename = url.filename;\n    compiler.isURL = true;\n    url = parse(url.nodes.map(function(node){\n      return compiler.visit(node);\n    }).join(''));\n\n    // Parse literal \n    var literal = new nodes.Literal('url(\"' + url.href + '\")')\n      , path = url.pathname\n      , dest = this.options.dest\n      , tail = ''\n      , res;\n\n    // Absolute or hash\n    if (url.protocol || !path || '/' == path[0]) return literal;\n\n    // Check that file exists\n    if (!options.nocheck) {\n      var _paths = options.paths || [];\n      path = require('../utils').lookup(path, _paths.concat(this.paths));\n      if (!path) return literal;\n    }\n\n    if (this.includeCSS && extname(path) == '.css')\n      return new nodes.Literal(url.href);\n\n    if (url.search) tail += url.search;\n    if (url.hash) tail += url.hash;\n\n    if (dest && extname(dest) == '.css')\n      dest = dirname(dest);\n\n    res = relative(dest || dirname(this.filename), options.nocheck\n      ? join(dirname(filename), path)\n      : path) + tail;\n\n    if ('\\\\' == sep) res = res.replace(/\\\\/g, '/');\n\n    return new nodes.Literal('url(\"' + res + '\")');\n  };\n\n  // Expose options to Evaluator\n  resolver.options = options;\n  resolver.raw = true;\n  return resolver;\n};\n"]},"metadata":{},"sourceType":"script"}