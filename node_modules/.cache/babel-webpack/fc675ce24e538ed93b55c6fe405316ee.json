{"ast":null,"code":"\"use strict\";\n\nvar __values = this && this.__values || function (o) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator],\n      i = 0;\n  if (m) return m.call(o);\n  return {\n    next: function next() {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar PluginLicenseTypeIdentifier =\n/** @class */\nfunction () {\n  function PluginLicenseTypeIdentifier(logger, licenseTypeOverrides, preferredLicenseTypes, handleLicenseAmbiguity, handleMissingLicenseType) {\n    this.logger = logger;\n    this.licenseTypeOverrides = licenseTypeOverrides;\n    this.preferredLicenseTypes = preferredLicenseTypes;\n    this.handleLicenseAmbiguity = handleLicenseAmbiguity;\n    this.handleMissingLicenseType = handleMissingLicenseType;\n  }\n\n  PluginLicenseTypeIdentifier.prototype.findLicenseIdentifier = function (compilation, packageName, packageJson) {\n    if (this.licenseTypeOverrides && this.licenseTypeOverrides[packageName]) {\n      return this.licenseTypeOverrides[packageName];\n    }\n\n    var licensePropValue = packageJson.license;\n\n    if (licensePropValue) {\n      return typeof licensePropValue === 'string' ? licensePropValue : licensePropValue.type;\n    } // handle deprecated \"licenses\" field in package.json\n\n\n    if (Array.isArray(packageJson.licenses) && packageJson.licenses.length > 0) {\n      if (packageJson.licenses.length === 1) {\n        return packageJson.licenses[0].type;\n      } // handle multiple licenses when we have a preferred license type\n\n\n      var licenseTypes = packageJson.licenses.map(function (x) {\n        return x.type;\n      });\n      var licenseType = this.findPreferredLicense(licenseTypes, this.preferredLicenseTypes);\n\n      if (licenseType !== null) {\n        // found preferred license\n        return licenseType;\n      }\n\n      var resolvedLicenseType = this.handleLicenseAmbiguity(packageName, packageJson.licenses);\n      this.logger.warn(compilation, packageName + \" specifies multiple licenses: \" + licenseTypes + \". Automatically selected \" + resolvedLicenseType + \". Use the preferredLicenseTypes or the licenseTypeOverrides option to resolve this warning.\");\n      return resolvedLicenseType;\n    }\n\n    this.logger.warn(compilation, \"could not find any license type for \" + packageName + \" in its package.json\");\n    return this.handleMissingLicenseType(packageName);\n  };\n\n  PluginLicenseTypeIdentifier.prototype.findPreferredLicense = function (licenseTypes, preferredLicenseTypes) {\n    try {\n      for (var preferredLicenseTypes_1 = __values(preferredLicenseTypes), preferredLicenseTypes_1_1 = preferredLicenseTypes_1.next(); !preferredLicenseTypes_1_1.done; preferredLicenseTypes_1_1 = preferredLicenseTypes_1.next()) {\n        var preferredLicenseType = preferredLicenseTypes_1_1.value;\n\n        try {\n          for (var licenseTypes_1 = __values(licenseTypes), licenseTypes_1_1 = licenseTypes_1.next(); !licenseTypes_1_1.done; licenseTypes_1_1 = licenseTypes_1.next()) {\n            var licenseType = licenseTypes_1_1.value;\n\n            if (preferredLicenseType === licenseType) {\n              return preferredLicenseType;\n            }\n          }\n        } catch (e_1_1) {\n          e_1 = {\n            error: e_1_1\n          };\n        } finally {\n          try {\n            if (licenseTypes_1_1 && !licenseTypes_1_1.done && (_a = licenseTypes_1.return)) _a.call(licenseTypes_1);\n          } finally {\n            if (e_1) throw e_1.error;\n          }\n        }\n      }\n    } catch (e_2_1) {\n      e_2 = {\n        error: e_2_1\n      };\n    } finally {\n      try {\n        if (preferredLicenseTypes_1_1 && !preferredLicenseTypes_1_1.done && (_b = preferredLicenseTypes_1.return)) _b.call(preferredLicenseTypes_1);\n      } finally {\n        if (e_2) throw e_2.error;\n      }\n    }\n\n    return null;\n\n    var e_2, _b, e_1, _a;\n  };\n\n  return PluginLicenseTypeIdentifier;\n}();\n\nexports.PluginLicenseTypeIdentifier = PluginLicenseTypeIdentifier;","map":{"version":3,"sources":["/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/license-webpack-plugin/dist/PluginLicenseTypeIdentifier.js"],"names":["__values","o","m","Symbol","iterator","i","call","next","length","value","done","Object","defineProperty","exports","PluginLicenseTypeIdentifier","logger","licenseTypeOverrides","preferredLicenseTypes","handleLicenseAmbiguity","handleMissingLicenseType","prototype","findLicenseIdentifier","compilation","packageName","packageJson","licensePropValue","license","type","Array","isArray","licenses","licenseTypes","map","x","licenseType","findPreferredLicense","resolvedLicenseType","warn","preferredLicenseTypes_1","preferredLicenseTypes_1_1","preferredLicenseType","licenseTypes_1","licenseTypes_1_1","e_1_1","e_1","error","_a","return","e_2_1","e_2","_b"],"mappings":"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","sourcesContent":["\"use strict\";\nvar __values = (this && this.__values) || function (o) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\n    if (m) return m.call(o);\n    return {\n        next: function () {\n            if (o && i >= o.length) o = void 0;\n            return { value: o && o[i++], done: !o };\n        }\n    };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar PluginLicenseTypeIdentifier = /** @class */ (function () {\n    function PluginLicenseTypeIdentifier(logger, licenseTypeOverrides, preferredLicenseTypes, handleLicenseAmbiguity, handleMissingLicenseType) {\n        this.logger = logger;\n        this.licenseTypeOverrides = licenseTypeOverrides;\n        this.preferredLicenseTypes = preferredLicenseTypes;\n        this.handleLicenseAmbiguity = handleLicenseAmbiguity;\n        this.handleMissingLicenseType = handleMissingLicenseType;\n    }\n    PluginLicenseTypeIdentifier.prototype.findLicenseIdentifier = function (compilation, packageName, packageJson) {\n        if (this.licenseTypeOverrides && this.licenseTypeOverrides[packageName]) {\n            return this.licenseTypeOverrides[packageName];\n        }\n        var licensePropValue = packageJson.license;\n        if (licensePropValue) {\n            return typeof licensePropValue === 'string'\n                ? licensePropValue\n                : licensePropValue.type;\n        }\n        // handle deprecated \"licenses\" field in package.json\n        if (Array.isArray(packageJson.licenses) &&\n            packageJson.licenses.length > 0) {\n            if (packageJson.licenses.length === 1) {\n                return packageJson.licenses[0].type;\n            }\n            // handle multiple licenses when we have a preferred license type\n            var licenseTypes = packageJson.licenses.map(function (x) { return x.type; });\n            var licenseType = this.findPreferredLicense(licenseTypes, this.preferredLicenseTypes);\n            if (licenseType !== null) {\n                // found preferred license\n                return licenseType;\n            }\n            var resolvedLicenseType = this.handleLicenseAmbiguity(packageName, packageJson.licenses);\n            this.logger.warn(compilation, packageName + \" specifies multiple licenses: \" + licenseTypes + \". Automatically selected \" + resolvedLicenseType + \". Use the preferredLicenseTypes or the licenseTypeOverrides option to resolve this warning.\");\n            return resolvedLicenseType;\n        }\n        this.logger.warn(compilation, \"could not find any license type for \" + packageName + \" in its package.json\");\n        return this.handleMissingLicenseType(packageName);\n    };\n    PluginLicenseTypeIdentifier.prototype.findPreferredLicense = function (licenseTypes, preferredLicenseTypes) {\n        try {\n            for (var preferredLicenseTypes_1 = __values(preferredLicenseTypes), preferredLicenseTypes_1_1 = preferredLicenseTypes_1.next(); !preferredLicenseTypes_1_1.done; preferredLicenseTypes_1_1 = preferredLicenseTypes_1.next()) {\n                var preferredLicenseType = preferredLicenseTypes_1_1.value;\n                try {\n                    for (var licenseTypes_1 = __values(licenseTypes), licenseTypes_1_1 = licenseTypes_1.next(); !licenseTypes_1_1.done; licenseTypes_1_1 = licenseTypes_1.next()) {\n                        var licenseType = licenseTypes_1_1.value;\n                        if (preferredLicenseType === licenseType) {\n                            return preferredLicenseType;\n                        }\n                    }\n                }\n                catch (e_1_1) { e_1 = { error: e_1_1 }; }\n                finally {\n                    try {\n                        if (licenseTypes_1_1 && !licenseTypes_1_1.done && (_a = licenseTypes_1.return)) _a.call(licenseTypes_1);\n                    }\n                    finally { if (e_1) throw e_1.error; }\n                }\n            }\n        }\n        catch (e_2_1) { e_2 = { error: e_2_1 }; }\n        finally {\n            try {\n                if (preferredLicenseTypes_1_1 && !preferredLicenseTypes_1_1.done && (_b = preferredLicenseTypes_1.return)) _b.call(preferredLicenseTypes_1);\n            }\n            finally { if (e_2) throw e_2.error; }\n        }\n        return null;\n        var e_2, _b, e_1, _a;\n    };\n    return PluginLicenseTypeIdentifier;\n}());\nexports.PluginLicenseTypeIdentifier = PluginLicenseTypeIdentifier;\n"]},"metadata":{},"sourceType":"script"}