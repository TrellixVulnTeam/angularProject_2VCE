{"ast":null,"code":"/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n(function (factory) {\n  if (typeof module === \"object\" && typeof module.exports === \"object\") {\n    var v = factory(require, exports);\n    if (v !== undefined) module.exports = v;\n  } else if (typeof define === \"function\" && define.amd) {\n    define(\"@angular/compiler/src/i18n/digest\", [\"require\", \"exports\", \"tslib\", \"@angular/compiler/src/util\", \"@angular/compiler/src/i18n/big_integer\"], factory);\n  }\n})(function (require, exports) {\n  \"use strict\";\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.computeMsgId = exports.fingerprint = exports.sha1 = exports.serializeNodes = exports.computeDecimalDigest = exports.decimalDigest = exports.computeDigest = exports.digest = void 0;\n\n  var tslib_1 = require(\"tslib\");\n\n  var util_1 = require(\"@angular/compiler/src/util\");\n\n  var big_integer_1 = require(\"@angular/compiler/src/i18n/big_integer\");\n  /**\n   * Return the message id or compute it using the XLIFF1 digest.\n   */\n\n\n  function digest(message) {\n    return message.id || computeDigest(message);\n  }\n\n  exports.digest = digest;\n  /**\n   * Compute the message id using the XLIFF1 digest.\n   */\n\n  function computeDigest(message) {\n    return sha1(serializeNodes(message.nodes).join('') + (\"[\" + message.meaning + \"]\"));\n  }\n\n  exports.computeDigest = computeDigest;\n  /**\n   * Return the message id or compute it using the XLIFF2/XMB/$localize digest.\n   */\n\n  function decimalDigest(message) {\n    return message.id || computeDecimalDigest(message);\n  }\n\n  exports.decimalDigest = decimalDigest;\n  /**\n   * Compute the message id using the XLIFF2/XMB/$localize digest.\n   */\n\n  function computeDecimalDigest(message) {\n    var visitor = new _SerializerIgnoreIcuExpVisitor();\n    var parts = message.nodes.map(function (a) {\n      return a.visit(visitor, null);\n    });\n    return computeMsgId(parts.join(''), message.meaning);\n  }\n\n  exports.computeDecimalDigest = computeDecimalDigest;\n  /**\n   * Serialize the i18n ast to something xml-like in order to generate an UID.\n   *\n   * The visitor is also used in the i18n parser tests\n   *\n   * @internal\n   */\n\n  var _SerializerVisitor =\n  /** @class */\n  function () {\n    function _SerializerVisitor() {}\n\n    _SerializerVisitor.prototype.visitText = function (text, context) {\n      return text.value;\n    };\n\n    _SerializerVisitor.prototype.visitContainer = function (container, context) {\n      var _this = this;\n\n      return \"[\" + container.children.map(function (child) {\n        return child.visit(_this);\n      }).join(', ') + \"]\";\n    };\n\n    _SerializerVisitor.prototype.visitIcu = function (icu, context) {\n      var _this = this;\n\n      var strCases = Object.keys(icu.cases).map(function (k) {\n        return k + \" {\" + icu.cases[k].visit(_this) + \"}\";\n      });\n      return \"{\" + icu.expression + \", \" + icu.type + \", \" + strCases.join(', ') + \"}\";\n    };\n\n    _SerializerVisitor.prototype.visitTagPlaceholder = function (ph, context) {\n      var _this = this;\n\n      return ph.isVoid ? \"<ph tag name=\\\"\" + ph.startName + \"\\\"/>\" : \"<ph tag name=\\\"\" + ph.startName + \"\\\">\" + ph.children.map(function (child) {\n        return child.visit(_this);\n      }).join(', ') + \"</ph name=\\\"\" + ph.closeName + \"\\\">\";\n    };\n\n    _SerializerVisitor.prototype.visitPlaceholder = function (ph, context) {\n      return ph.value ? \"<ph name=\\\"\" + ph.name + \"\\\">\" + ph.value + \"</ph>\" : \"<ph name=\\\"\" + ph.name + \"\\\"/>\";\n    };\n\n    _SerializerVisitor.prototype.visitIcuPlaceholder = function (ph, context) {\n      return \"<ph icu name=\\\"\" + ph.name + \"\\\">\" + ph.value.visit(this) + \"</ph>\";\n    };\n\n    return _SerializerVisitor;\n  }();\n\n  var serializerVisitor = new _SerializerVisitor();\n\n  function serializeNodes(nodes) {\n    return nodes.map(function (a) {\n      return a.visit(serializerVisitor, null);\n    });\n  }\n\n  exports.serializeNodes = serializeNodes;\n  /**\n   * Serialize the i18n ast to something xml-like in order to generate an UID.\n   *\n   * Ignore the ICU expressions so that message IDs stays identical if only the expression changes.\n   *\n   * @internal\n   */\n\n  var _SerializerIgnoreIcuExpVisitor =\n  /** @class */\n  function (_super) {\n    tslib_1.__extends(_SerializerIgnoreIcuExpVisitor, _super);\n\n    function _SerializerIgnoreIcuExpVisitor() {\n      return _super !== null && _super.apply(this, arguments) || this;\n    }\n\n    _SerializerIgnoreIcuExpVisitor.prototype.visitIcu = function (icu, context) {\n      var _this = this;\n\n      var strCases = Object.keys(icu.cases).map(function (k) {\n        return k + \" {\" + icu.cases[k].visit(_this) + \"}\";\n      }); // Do not take the expression into account\n\n      return \"{\" + icu.type + \", \" + strCases.join(', ') + \"}\";\n    };\n\n    return _SerializerIgnoreIcuExpVisitor;\n  }(_SerializerVisitor);\n  /**\n   * Compute the SHA1 of the given string\n   *\n   * see https://csrc.nist.gov/publications/fips/fips180-4/fips-180-4.pdf\n   *\n   * WARNING: this function has not been designed not tested with security in mind.\n   *          DO NOT USE IT IN A SECURITY SENSITIVE CONTEXT.\n   */\n\n\n  function sha1(str) {\n    var utf8 = util_1.utf8Encode(str);\n    var words32 = bytesToWords32(utf8, Endian.Big);\n    var len = utf8.length * 8;\n    var w = util_1.newArray(80);\n    var a = 0x67452301,\n        b = 0xefcdab89,\n        c = 0x98badcfe,\n        d = 0x10325476,\n        e = 0xc3d2e1f0;\n    words32[len >> 5] |= 0x80 << 24 - len % 32;\n    words32[(len + 64 >> 9 << 4) + 15] = len;\n\n    for (var i = 0; i < words32.length; i += 16) {\n      var h0 = a,\n          h1 = b,\n          h2 = c,\n          h3 = d,\n          h4 = e;\n\n      for (var j = 0; j < 80; j++) {\n        if (j < 16) {\n          w[j] = words32[i + j];\n        } else {\n          w[j] = rol32(w[j - 3] ^ w[j - 8] ^ w[j - 14] ^ w[j - 16], 1);\n        }\n\n        var fkVal = fk(j, b, c, d);\n        var f = fkVal[0];\n        var k = fkVal[1];\n        var temp = [rol32(a, 5), f, e, k, w[j]].reduce(add32);\n        e = d;\n        d = c;\n        c = rol32(b, 30);\n        b = a;\n        a = temp;\n      }\n\n      a = add32(a, h0);\n      b = add32(b, h1);\n      c = add32(c, h2);\n      d = add32(d, h3);\n      e = add32(e, h4);\n    }\n\n    return bytesToHexString(words32ToByteString([a, b, c, d, e]));\n  }\n\n  exports.sha1 = sha1;\n\n  function fk(index, b, c, d) {\n    if (index < 20) {\n      return [b & c | ~b & d, 0x5a827999];\n    }\n\n    if (index < 40) {\n      return [b ^ c ^ d, 0x6ed9eba1];\n    }\n\n    if (index < 60) {\n      return [b & c | b & d | c & d, 0x8f1bbcdc];\n    }\n\n    return [b ^ c ^ d, 0xca62c1d6];\n  }\n  /**\n   * Compute the fingerprint of the given string\n   *\n   * The output is 64 bit number encoded as a decimal string\n   *\n   * based on:\n   * https://github.com/google/closure-compiler/blob/master/src/com/google/javascript/jscomp/GoogleJsMessageIdGenerator.java\n   */\n\n\n  function fingerprint(str) {\n    var utf8 = util_1.utf8Encode(str);\n    var hi = hash32(utf8, 0);\n    var lo = hash32(utf8, 102072);\n\n    if (hi == 0 && (lo == 0 || lo == 1)) {\n      hi = hi ^ 0x130f9bef;\n      lo = lo ^ -0x6b5f56d8;\n    }\n\n    return [hi, lo];\n  }\n\n  exports.fingerprint = fingerprint;\n\n  function computeMsgId(msg, meaning) {\n    if (meaning === void 0) {\n      meaning = '';\n    }\n\n    var msgFingerprint = fingerprint(msg);\n\n    if (meaning) {\n      var meaningFingerprint = fingerprint(meaning);\n      msgFingerprint = add64(rol64(msgFingerprint, 1), meaningFingerprint);\n    }\n\n    var hi = msgFingerprint[0];\n    var lo = msgFingerprint[1];\n    return wordsToDecimalString(hi & 0x7fffffff, lo);\n  }\n\n  exports.computeMsgId = computeMsgId;\n\n  function hash32(bytes, c) {\n    var a = 0x9e3779b9,\n        b = 0x9e3779b9;\n    var i;\n    var len = bytes.length;\n\n    for (i = 0; i + 12 <= len; i += 12) {\n      a = add32(a, wordAt(bytes, i, Endian.Little));\n      b = add32(b, wordAt(bytes, i + 4, Endian.Little));\n      c = add32(c, wordAt(bytes, i + 8, Endian.Little));\n      var res = mix(a, b, c);\n      a = res[0], b = res[1], c = res[2];\n    }\n\n    a = add32(a, wordAt(bytes, i, Endian.Little));\n    b = add32(b, wordAt(bytes, i + 4, Endian.Little)); // the first byte of c is reserved for the length\n\n    c = add32(c, len);\n    c = add32(c, wordAt(bytes, i + 8, Endian.Little) << 8);\n    return mix(a, b, c)[2];\n  } // clang-format off\n\n\n  function mix(a, b, c) {\n    a = sub32(a, b);\n    a = sub32(a, c);\n    a ^= c >>> 13;\n    b = sub32(b, c);\n    b = sub32(b, a);\n    b ^= a << 8;\n    c = sub32(c, a);\n    c = sub32(c, b);\n    c ^= b >>> 13;\n    a = sub32(a, b);\n    a = sub32(a, c);\n    a ^= c >>> 12;\n    b = sub32(b, c);\n    b = sub32(b, a);\n    b ^= a << 16;\n    c = sub32(c, a);\n    c = sub32(c, b);\n    c ^= b >>> 5;\n    a = sub32(a, b);\n    a = sub32(a, c);\n    a ^= c >>> 3;\n    b = sub32(b, c);\n    b = sub32(b, a);\n    b ^= a << 10;\n    c = sub32(c, a);\n    c = sub32(c, b);\n    c ^= b >>> 15;\n    return [a, b, c];\n  } // clang-format on\n  // Utils\n\n\n  var Endian;\n\n  (function (Endian) {\n    Endian[Endian[\"Little\"] = 0] = \"Little\";\n    Endian[Endian[\"Big\"] = 1] = \"Big\";\n  })(Endian || (Endian = {}));\n\n  function add32(a, b) {\n    return add32to64(a, b)[1];\n  }\n\n  function add32to64(a, b) {\n    var low = (a & 0xffff) + (b & 0xffff);\n    var high = (a >>> 16) + (b >>> 16) + (low >>> 16);\n    return [high >>> 16, high << 16 | low & 0xffff];\n  }\n\n  function add64(a, b) {\n    var ah = a[0],\n        al = a[1];\n    var bh = b[0],\n        bl = b[1];\n    var result = add32to64(al, bl);\n    var carry = result[0];\n    var l = result[1];\n    var h = add32(add32(ah, bh), carry);\n    return [h, l];\n  }\n\n  function sub32(a, b) {\n    var low = (a & 0xffff) - (b & 0xffff);\n    var high = (a >> 16) - (b >> 16) + (low >> 16);\n    return high << 16 | low & 0xffff;\n  } // Rotate a 32b number left `count` position\n\n\n  function rol32(a, count) {\n    return a << count | a >>> 32 - count;\n  } // Rotate a 64b number left `count` position\n\n\n  function rol64(num, count) {\n    var hi = num[0],\n        lo = num[1];\n    var h = hi << count | lo >>> 32 - count;\n    var l = lo << count | hi >>> 32 - count;\n    return [h, l];\n  }\n\n  function bytesToWords32(bytes, endian) {\n    var size = bytes.length + 3 >>> 2;\n    var words32 = [];\n\n    for (var i = 0; i < size; i++) {\n      words32[i] = wordAt(bytes, i * 4, endian);\n    }\n\n    return words32;\n  }\n\n  function byteAt(bytes, index) {\n    return index >= bytes.length ? 0 : bytes[index];\n  }\n\n  function wordAt(bytes, index, endian) {\n    var word = 0;\n\n    if (endian === Endian.Big) {\n      for (var i = 0; i < 4; i++) {\n        word += byteAt(bytes, index + i) << 24 - 8 * i;\n      }\n    } else {\n      for (var i = 0; i < 4; i++) {\n        word += byteAt(bytes, index + i) << 8 * i;\n      }\n    }\n\n    return word;\n  }\n\n  function words32ToByteString(words32) {\n    return words32.reduce(function (bytes, word) {\n      return bytes.concat(word32ToByteString(word));\n    }, []);\n  }\n\n  function word32ToByteString(word) {\n    var bytes = [];\n\n    for (var i = 0; i < 4; i++) {\n      bytes.push(word >>> 8 * (3 - i) & 0xff);\n    }\n\n    return bytes;\n  }\n\n  function bytesToHexString(bytes) {\n    var hex = '';\n\n    for (var i = 0; i < bytes.length; i++) {\n      var b = byteAt(bytes, i);\n      hex += (b >>> 4).toString(16) + (b & 0x0f).toString(16);\n    }\n\n    return hex.toLowerCase();\n  }\n  /**\n   * Create a shared exponentiation pool for base-256 computations. This shared pool provides memoized\n   * power-of-256 results with memoized power-of-two computations for efficient multiplication.\n   *\n   * For our purposes, this can be safely stored as a global without memory concerns. The reason is\n   * that we encode two words, so only need the 0th (for the low word) and 4th (for the high word)\n   * exponent.\n   */\n\n\n  var base256 = new big_integer_1.BigIntExponentiation(256);\n  /**\n   * Represents two 32-bit words as a single decimal number. This requires a big integer storage\n   * model as JS numbers are not accurate enough to represent the 64-bit number.\n   *\n   * Based on https://www.danvk.org/hex2dec.html\n   */\n\n  function wordsToDecimalString(hi, lo) {\n    // Encode the four bytes in lo in the lower digits of the decimal number.\n    // Note: the multiplication results in lo itself but represented by a big integer using its\n    // decimal digits.\n    var decimal = base256.toThePowerOf(0).multiplyBy(lo); // Encode the four bytes in hi above the four lo bytes. lo is a maximum of (2^8)^4, which is why\n    // this multiplication factor is applied.\n\n    base256.toThePowerOf(4).multiplyByAndAddTo(hi, decimal);\n    return decimal.toString();\n  }\n});","map":{"version":3,"sources":["../../../../../../../packages/compiler/src/i18n/digest.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Byte, newArray, utf8Encode} from '../util';\nimport {BigIntExponentiation} from './big_integer';\n\nimport * as i18n from './i18n_ast';\n\n/**\n * Return the message id or compute it using the XLIFF1 digest.\n */\nexport function digest(message: i18n.Message): string {\n  return message.id || computeDigest(message);\n}\n\n/**\n * Compute the message id using the XLIFF1 digest.\n */\nexport function computeDigest(message: i18n.Message): string {\n  return sha1(serializeNodes(message.nodes).join('') + `[${message.meaning}]`);\n}\n\n/**\n * Return the message id or compute it using the XLIFF2/XMB/$localize digest.\n */\nexport function decimalDigest(message: i18n.Message): string {\n  return message.id || computeDecimalDigest(message);\n}\n\n/**\n * Compute the message id using the XLIFF2/XMB/$localize digest.\n */\nexport function computeDecimalDigest(message: i18n.Message): string {\n  const visitor = new _SerializerIgnoreIcuExpVisitor();\n  const parts = message.nodes.map(a => a.visit(visitor, null));\n  return computeMsgId(parts.join(''), message.meaning);\n}\n\n/**\n * Serialize the i18n ast to something xml-like in order to generate an UID.\n *\n * The visitor is also used in the i18n parser tests\n *\n * @internal\n */\nclass _SerializerVisitor implements i18n.Visitor {\n  visitText(text: i18n.Text, context: any): any {\n    return text.value;\n  }\n\n  visitContainer(container: i18n.Container, context: any): any {\n    return `[${container.children.map(child => child.visit(this)).join(', ')}]`;\n  }\n\n  visitIcu(icu: i18n.Icu, context: any): any {\n    const strCases =\n        Object.keys(icu.cases).map((k: string) => `${k} {${icu.cases[k].visit(this)}}`);\n    return `{${icu.expression}, ${icu.type}, ${strCases.join(', ')}}`;\n  }\n\n  visitTagPlaceholder(ph: i18n.TagPlaceholder, context: any): any {\n    return ph.isVoid ?\n        `<ph tag name=\"${ph.startName}\"/>` :\n        `<ph tag name=\"${ph.startName}\">${\n            ph.children.map(child => child.visit(this)).join(', ')}</ph name=\"${ph.closeName}\">`;\n  }\n\n  visitPlaceholder(ph: i18n.Placeholder, context: any): any {\n    return ph.value ? `<ph name=\"${ph.name}\">${ph.value}</ph>` : `<ph name=\"${ph.name}\"/>`;\n  }\n\n  visitIcuPlaceholder(ph: i18n.IcuPlaceholder, context?: any): any {\n    return `<ph icu name=\"${ph.name}\">${ph.value.visit(this)}</ph>`;\n  }\n}\n\nconst serializerVisitor = new _SerializerVisitor();\n\nexport function serializeNodes(nodes: i18n.Node[]): string[] {\n  return nodes.map(a => a.visit(serializerVisitor, null));\n}\n\n/**\n * Serialize the i18n ast to something xml-like in order to generate an UID.\n *\n * Ignore the ICU expressions so that message IDs stays identical if only the expression changes.\n *\n * @internal\n */\nclass _SerializerIgnoreIcuExpVisitor extends _SerializerVisitor {\n  visitIcu(icu: i18n.Icu, context: any): any {\n    let strCases = Object.keys(icu.cases).map((k: string) => `${k} {${icu.cases[k].visit(this)}}`);\n    // Do not take the expression into account\n    return `{${icu.type}, ${strCases.join(', ')}}`;\n  }\n}\n\n/**\n * Compute the SHA1 of the given string\n *\n * see https://csrc.nist.gov/publications/fips/fips180-4/fips-180-4.pdf\n *\n * WARNING: this function has not been designed not tested with security in mind.\n *          DO NOT USE IT IN A SECURITY SENSITIVE CONTEXT.\n */\nexport function sha1(str: string): string {\n  const utf8 = utf8Encode(str);\n  const words32 = bytesToWords32(utf8, Endian.Big);\n  const len = utf8.length * 8;\n\n  const w = newArray(80);\n  let a = 0x67452301, b = 0xefcdab89, c = 0x98badcfe, d = 0x10325476, e = 0xc3d2e1f0;\n\n  words32[len >> 5] |= 0x80 << (24 - len % 32);\n  words32[((len + 64 >> 9) << 4) + 15] = len;\n\n  for (let i = 0; i < words32.length; i += 16) {\n    const h0 = a, h1 = b, h2 = c, h3 = d, h4 = e;\n\n    for (let j = 0; j < 80; j++) {\n      if (j < 16) {\n        w[j] = words32[i + j];\n      } else {\n        w[j] = rol32(w[j - 3] ^ w[j - 8] ^ w[j - 14] ^ w[j - 16], 1);\n      }\n\n      const fkVal = fk(j, b, c, d);\n      const f = fkVal[0];\n      const k = fkVal[1];\n      const temp = [rol32(a, 5), f, e, k, w[j]].reduce(add32);\n      e = d;\n      d = c;\n      c = rol32(b, 30);\n      b = a;\n      a = temp;\n    }\n    a = add32(a, h0);\n    b = add32(b, h1);\n    c = add32(c, h2);\n    d = add32(d, h3);\n    e = add32(e, h4);\n  }\n\n  return bytesToHexString(words32ToByteString([a, b, c, d, e]));\n}\n\nfunction fk(index: number, b: number, c: number, d: number): [number, number] {\n  if (index < 20) {\n    return [(b & c) | (~b & d), 0x5a827999];\n  }\n\n  if (index < 40) {\n    return [b ^ c ^ d, 0x6ed9eba1];\n  }\n\n  if (index < 60) {\n    return [(b & c) | (b & d) | (c & d), 0x8f1bbcdc];\n  }\n\n  return [b ^ c ^ d, 0xca62c1d6];\n}\n\n/**\n * Compute the fingerprint of the given string\n *\n * The output is 64 bit number encoded as a decimal string\n *\n * based on:\n * https://github.com/google/closure-compiler/blob/master/src/com/google/javascript/jscomp/GoogleJsMessageIdGenerator.java\n */\nexport function fingerprint(str: string): [number, number] {\n  const utf8 = utf8Encode(str);\n\n  let hi = hash32(utf8, 0);\n  let lo = hash32(utf8, 102072);\n\n  if (hi == 0 && (lo == 0 || lo == 1)) {\n    hi = hi ^ 0x130f9bef;\n    lo = lo ^ -0x6b5f56d8;\n  }\n\n  return [hi, lo];\n}\n\nexport function computeMsgId(msg: string, meaning: string = ''): string {\n  let msgFingerprint = fingerprint(msg);\n\n  if (meaning) {\n    const meaningFingerprint = fingerprint(meaning);\n    msgFingerprint = add64(rol64(msgFingerprint, 1), meaningFingerprint);\n  }\n\n  const hi = msgFingerprint[0];\n  const lo = msgFingerprint[1];\n\n  return wordsToDecimalString(hi & 0x7fffffff, lo);\n}\n\nfunction hash32(bytes: Byte[], c: number): number {\n  let a = 0x9e3779b9, b = 0x9e3779b9;\n  let i: number;\n\n  const len = bytes.length;\n\n  for (i = 0; i + 12 <= len; i += 12) {\n    a = add32(a, wordAt(bytes, i, Endian.Little));\n    b = add32(b, wordAt(bytes, i + 4, Endian.Little));\n    c = add32(c, wordAt(bytes, i + 8, Endian.Little));\n    const res = mix(a, b, c);\n    a = res[0], b = res[1], c = res[2];\n  }\n\n  a = add32(a, wordAt(bytes, i, Endian.Little));\n  b = add32(b, wordAt(bytes, i + 4, Endian.Little));\n  // the first byte of c is reserved for the length\n  c = add32(c, len);\n  c = add32(c, wordAt(bytes, i + 8, Endian.Little) << 8);\n\n  return mix(a, b, c)[2];\n}\n\n// clang-format off\nfunction mix(a: number, b: number, c: number): [number, number, number] {\n  a = sub32(a, b); a = sub32(a, c); a ^= c >>> 13;\n  b = sub32(b, c); b = sub32(b, a); b ^= a << 8;\n  c = sub32(c, a); c = sub32(c, b); c ^= b >>> 13;\n  a = sub32(a, b); a = sub32(a, c); a ^= c >>> 12;\n  b = sub32(b, c); b = sub32(b, a); b ^= a << 16;\n  c = sub32(c, a); c = sub32(c, b); c ^= b >>> 5;\n  a = sub32(a, b); a = sub32(a, c); a ^= c >>> 3;\n  b = sub32(b, c); b = sub32(b, a); b ^= a << 10;\n  c = sub32(c, a); c = sub32(c, b); c ^= b >>> 15;\n  return [a, b, c];\n}\n// clang-format on\n\n// Utils\n\nenum Endian {\n  Little,\n  Big,\n}\n\nfunction add32(a: number, b: number): number {\n  return add32to64(a, b)[1];\n}\n\nfunction add32to64(a: number, b: number): [number, number] {\n  const low = (a & 0xffff) + (b & 0xffff);\n  const high = (a >>> 16) + (b >>> 16) + (low >>> 16);\n  return [high >>> 16, (high << 16) | (low & 0xffff)];\n}\n\nfunction add64(a: [number, number], b: [number, number]): [number, number] {\n  const ah = a[0], al = a[1];\n  const bh = b[0], bl = b[1];\n  const result = add32to64(al, bl);\n  const carry = result[0];\n  const l = result[1];\n  const h = add32(add32(ah, bh), carry);\n  return [h, l];\n}\n\nfunction sub32(a: number, b: number): number {\n  const low = (a & 0xffff) - (b & 0xffff);\n  const high = (a >> 16) - (b >> 16) + (low >> 16);\n  return (high << 16) | (low & 0xffff);\n}\n\n// Rotate a 32b number left `count` position\nfunction rol32(a: number, count: number): number {\n  return (a << count) | (a >>> (32 - count));\n}\n\n// Rotate a 64b number left `count` position\nfunction rol64(num: [number, number], count: number): [number, number] {\n  const hi = num[0], lo = num[1];\n  const h = (hi << count) | (lo >>> (32 - count));\n  const l = (lo << count) | (hi >>> (32 - count));\n  return [h, l];\n}\n\nfunction bytesToWords32(bytes: Byte[], endian: Endian): number[] {\n  const size = (bytes.length + 3) >>> 2;\n  const words32 = [];\n\n  for (let i = 0; i < size; i++) {\n    words32[i] = wordAt(bytes, i * 4, endian);\n  }\n\n  return words32;\n}\n\nfunction byteAt(bytes: Byte[], index: number): Byte {\n  return index >= bytes.length ? 0 : bytes[index];\n}\n\nfunction wordAt(bytes: Byte[], index: number, endian: Endian): number {\n  let word = 0;\n  if (endian === Endian.Big) {\n    for (let i = 0; i < 4; i++) {\n      word += byteAt(bytes, index + i) << (24 - 8 * i);\n    }\n  } else {\n    for (let i = 0; i < 4; i++) {\n      word += byteAt(bytes, index + i) << 8 * i;\n    }\n  }\n  return word;\n}\n\nfunction words32ToByteString(words32: number[]): Byte[] {\n  return words32.reduce((bytes, word) => bytes.concat(word32ToByteString(word)), [] as Byte[]);\n}\n\nfunction word32ToByteString(word: number): Byte[] {\n  let bytes: Byte[] = [];\n  for (let i = 0; i < 4; i++) {\n    bytes.push((word >>> 8 * (3 - i)) & 0xff);\n  }\n  return bytes;\n}\n\nfunction bytesToHexString(bytes: Byte[]): string {\n  let hex: string = '';\n  for (let i = 0; i < bytes.length; i++) {\n    const b = byteAt(bytes, i);\n    hex += (b >>> 4).toString(16) + (b & 0x0f).toString(16);\n  }\n  return hex.toLowerCase();\n}\n\n/**\n * Create a shared exponentiation pool for base-256 computations. This shared pool provides memoized\n * power-of-256 results with memoized power-of-two computations for efficient multiplication.\n *\n * For our purposes, this can be safely stored as a global without memory concerns. The reason is\n * that we encode two words, so only need the 0th (for the low word) and 4th (for the high word)\n * exponent.\n */\nconst base256 = new BigIntExponentiation(256);\n\n/**\n * Represents two 32-bit words as a single decimal number. This requires a big integer storage\n * model as JS numbers are not accurate enough to represent the 64-bit number.\n *\n * Based on https://www.danvk.org/hex2dec.html\n */\nfunction wordsToDecimalString(hi: number, lo: number): string {\n  // Encode the four bytes in lo in the lower digits of the decimal number.\n  // Note: the multiplication results in lo itself but represented by a big integer using its\n  // decimal digits.\n  const decimal = base256.toThePowerOf(0).multiplyBy(lo);\n\n  // Encode the four bytes in hi above the four lo bytes. lo is a maximum of (2^8)^4, which is why\n  // this multiplication factor is applied.\n  base256.toThePowerOf(4).multiplyByAndAddTo(hi, decimal);\n\n  return decimal.toString();\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}