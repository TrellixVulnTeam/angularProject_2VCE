{"ast":null,"code":"(function (factory) {\n  if (typeof module === \"object\" && typeof module.exports === \"object\") {\n    var v = factory(require, exports);\n    if (v !== undefined) module.exports = v;\n  } else if (typeof define === \"function\" && define.amd) {\n    define(\"@angular/compiler-cli/src/ngtsc/imports/src/resolver\", [\"require\", \"exports\", \"@angular/compiler-cli/src/ngtsc/file_system\", \"@angular/compiler-cli/src/ngtsc/util/src/typescript\"], factory);\n  }\n})(function (require, exports) {\n  \"use strict\";\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.ModuleResolver = void 0;\n\n  var file_system_1 = require(\"@angular/compiler-cli/src/ngtsc/file_system\");\n\n  var typescript_1 = require(\"@angular/compiler-cli/src/ngtsc/util/src/typescript\");\n  /**\n   * Used by `RouterEntryPointManager` and `NgModuleRouteAnalyzer` (which is in turn is used by\n   * `NgModuleDecoratorHandler`) for resolving the module source-files references in lazy-loaded\n   * routes (relative to the source-file containing the `NgModule` that provides the route\n   * definitions).\n   */\n\n\n  var ModuleResolver =\n  /** @class */\n  function () {\n    function ModuleResolver(program, compilerOptions, host, moduleResolutionCache) {\n      this.program = program;\n      this.compilerOptions = compilerOptions;\n      this.host = host;\n      this.moduleResolutionCache = moduleResolutionCache;\n    }\n\n    ModuleResolver.prototype.resolveModule = function (moduleName, containingFile) {\n      var resolved = typescript_1.resolveModuleName(moduleName, containingFile, this.compilerOptions, this.host, this.moduleResolutionCache);\n\n      if (resolved === undefined) {\n        return null;\n      }\n\n      return typescript_1.getSourceFileOrNull(this.program, file_system_1.absoluteFrom(resolved.resolvedFileName));\n    };\n\n    return ModuleResolver;\n  }();\n\n  exports.ModuleResolver = ModuleResolver;\n});","map":{"version":3,"sources":["../../../../../../../../../packages/compiler-cli/src/ngtsc/imports/src/resolver.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;AASA,MAAA,aAAA,GAAA,OAAA,CAAA,6CAAA,CAAA;;AACA,MAAA,YAAA,GAAA,OAAA,CAAA,qDAAA,CAAA;AAEA;;;;;AAKG;;;AACH,MAAA,cAAA;AAAA;AAAA,cAAA;AACE,aAAA,cAAA,CACY,OADZ,EACyC,eADzC,EAEY,IAFZ,EAGY,qBAHZ,EAGgE;AAFpD,WAAA,OAAA,GAAA,OAAA;AAA6B,WAAA,eAAA,GAAA,eAAA;AAC7B,WAAA,IAAA,GAAA,IAAA;AACA,WAAA,qBAAA,GAAA,qBAAA;AAAwD;;AAEpE,IAAA,cAAA,CAAA,SAAA,CAAA,aAAA,GAAA,UAAc,UAAd,EAAkC,cAAlC,EAAwD;AACtD,UAAM,QAAQ,GAAG,YAAA,CAAA,iBAAA,CACb,UADa,EACD,cADC,EACe,KAAK,eADpB,EACqC,KAAK,IAD1C,EACgD,KAAK,qBADrD,CAAjB;;AAEA,UAAI,QAAQ,KAAK,SAAjB,EAA4B;AAC1B,eAAO,IAAP;AACD;;AACD,aAAO,YAAA,CAAA,mBAAA,CAAoB,KAAK,OAAzB,EAAkC,aAAA,CAAA,YAAA,CAAa,QAAQ,CAAC,gBAAtB,CAAlC,CAAP;AACD,KAPD;;AAQF,WAAA,cAAA;AAAC,GAdD,EAAA;;AAAa,EAAA,OAAA,CAAA,cAAA,GAAA,cAAA","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as ts from 'typescript';\n\nimport {absoluteFrom} from '../../file_system';\nimport {getSourceFileOrNull, resolveModuleName} from '../../util/src/typescript';\n\n/**\n * Used by `RouterEntryPointManager` and `NgModuleRouteAnalyzer` (which is in turn is used by\n * `NgModuleDecoratorHandler`) for resolving the module source-files references in lazy-loaded\n * routes (relative to the source-file containing the `NgModule` that provides the route\n * definitions).\n */\nexport class ModuleResolver {\n  constructor(\n      private program: ts.Program, private compilerOptions: ts.CompilerOptions,\n      private host: ts.ModuleResolutionHost&Pick<ts.CompilerHost, 'resolveModuleNames'>,\n      private moduleResolutionCache: ts.ModuleResolutionCache|null) {}\n\n  resolveModule(moduleName: string, containingFile: string): ts.SourceFile|null {\n    const resolved = resolveModuleName(\n        moduleName, containingFile, this.compilerOptions, this.host, this.moduleResolutionCache);\n    if (resolved === undefined) {\n      return null;\n    }\n    return getSourceFileOrNull(this.program, absoluteFrom(resolved.resolvedFileName));\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}