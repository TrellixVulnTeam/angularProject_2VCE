{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nvar _createClass = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar _classCallCheck = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar Source = require(\"./Source\");\n\nvar SourceNode = require(\"source-map\").SourceNode;\n\nvar Replacement = function Replacement(start, end, content, insertIndex, name) {\n  _classCallCheck(this, Replacement);\n\n  this.start = start;\n  this.end = end;\n  this.content = content;\n  this.insertIndex = insertIndex;\n  this.name = name;\n};\n\nvar ReplaceSource = /*#__PURE__*/function (_Source) {\n  _inherits(ReplaceSource, _Source);\n\n  var _super = _createSuper(ReplaceSource);\n\n  function ReplaceSource(source, name) {\n    var _this;\n\n    _classCallCheck(this, ReplaceSource);\n\n    _this = _super.call(this);\n    _this._source = source;\n    _this._name = name;\n    /** @type {Replacement[]} */\n\n    _this.replacements = [];\n    return _this;\n  }\n\n  _createClass(ReplaceSource, [{\n    key: \"replace\",\n    value: function replace(start, end, newValue, name) {\n      if (typeof newValue !== \"string\") throw new Error(\"insertion must be a string, but is a \" + typeof newValue);\n      this.replacements.push(new Replacement(start, end, newValue, this.replacements.length, name));\n    }\n  }, {\n    key: \"insert\",\n    value: function insert(pos, newValue, name) {\n      if (typeof newValue !== \"string\") throw new Error(\"insertion must be a string, but is a \" + typeof newValue + \": \" + newValue);\n      this.replacements.push(new Replacement(pos, pos - 1, newValue, this.replacements.length, name));\n    }\n  }, {\n    key: \"source\",\n    value: function source(options) {\n      return this._replaceString(this._source.source());\n    }\n  }, {\n    key: \"original\",\n    value: function original() {\n      return this._source;\n    }\n  }, {\n    key: \"_sortReplacements\",\n    value: function _sortReplacements() {\n      this.replacements.sort(function (a, b) {\n        var diff = b.end - a.end;\n        if (diff !== 0) return diff;\n        diff = b.start - a.start;\n        if (diff !== 0) return diff;\n        return b.insertIndex - a.insertIndex;\n      });\n    }\n  }, {\n    key: \"_replaceString\",\n    value: function _replaceString(str) {\n      if (typeof str !== \"string\") throw new Error(\"str must be a string, but is a \" + typeof str + \": \" + str);\n\n      this._sortReplacements();\n\n      var result = [str];\n      this.replacements.forEach(function (repl) {\n        var remSource = result.pop();\n\n        var splitted1 = this._splitString(remSource, Math.floor(repl.end + 1));\n\n        var splitted2 = this._splitString(splitted1[0], Math.floor(repl.start));\n\n        result.push(splitted1[1], repl.content, splitted2[0]);\n      }, this); // write out result array in reverse order\n\n      var resultStr = \"\";\n\n      for (var i = result.length - 1; i >= 0; --i) {\n        resultStr += result[i];\n      }\n\n      return resultStr;\n    }\n  }, {\n    key: \"node\",\n    value: function node(options) {\n      var node = this._source.node(options);\n\n      if (this.replacements.length === 0) {\n        return node;\n      }\n\n      this._sortReplacements();\n\n      var replace = new ReplacementEnumerator(this.replacements);\n      var output = [];\n      var position = 0;\n      var sources = Object.create(null);\n      var sourcesInLines = Object.create(null); // We build a new list of SourceNodes in \"output\"\n      // from the original mapping data\n\n      var result = new SourceNode(); // We need to add source contents manually\n      // because \"walk\" will not handle it\n\n      node.walkSourceContents(function (sourceFile, sourceContent) {\n        result.setSourceContent(sourceFile, sourceContent);\n        sources[\"$\" + sourceFile] = sourceContent;\n      });\n\n      var replaceInStringNode = this._replaceInStringNode.bind(this, output, replace, function getOriginalSource(mapping) {\n        var key = \"$\" + mapping.source;\n        var lines = sourcesInLines[key];\n\n        if (!lines) {\n          var source = sources[key];\n          if (!source) return null;\n          lines = source.split(\"\\n\").map(function (line) {\n            return line + \"\\n\";\n          });\n          sourcesInLines[key] = lines;\n        } // line is 1-based\n\n\n        if (mapping.line > lines.length) return null;\n        var line = lines[mapping.line - 1];\n        return line.substr(mapping.column);\n      });\n\n      node.walk(function (chunk, mapping) {\n        position = replaceInStringNode(chunk, position, mapping);\n      }); // If any replacements occur after the end of the original file, then we append them\n      // directly to the end of the output\n\n      var remaining = replace.footer();\n\n      if (remaining) {\n        output.push(remaining);\n      }\n\n      result.add(output);\n      return result;\n    }\n  }, {\n    key: \"listMap\",\n    value: function listMap(options) {\n      this._sortReplacements();\n\n      var map = this._source.listMap(options);\n\n      var currentIndex = 0;\n      var replacements = this.replacements;\n      var idxReplacement = replacements.length - 1;\n      var removeChars = 0;\n      map = map.mapGeneratedCode(function (str) {\n        var newCurrentIndex = currentIndex + str.length;\n\n        if (removeChars > str.length) {\n          removeChars -= str.length;\n          str = \"\";\n        } else {\n          if (removeChars > 0) {\n            str = str.substr(removeChars);\n            currentIndex += removeChars;\n            removeChars = 0;\n          }\n\n          var finalStr = \"\";\n\n          while (idxReplacement >= 0 && replacements[idxReplacement].start < newCurrentIndex) {\n            var repl = replacements[idxReplacement];\n            var start = Math.floor(repl.start);\n            var end = Math.floor(repl.end + 1);\n            var before = str.substr(0, Math.max(0, start - currentIndex));\n\n            if (end <= newCurrentIndex) {\n              var after = str.substr(Math.max(0, end - currentIndex));\n              finalStr += before + repl.content;\n              str = after;\n              currentIndex = Math.max(currentIndex, end);\n            } else {\n              finalStr += before + repl.content;\n              str = \"\";\n              removeChars = end - newCurrentIndex;\n            }\n\n            idxReplacement--;\n          }\n\n          str = finalStr + str;\n        }\n\n        currentIndex = newCurrentIndex;\n        return str;\n      });\n      var extraCode = \"\";\n\n      while (idxReplacement >= 0) {\n        extraCode += replacements[idxReplacement].content;\n        idxReplacement--;\n      }\n\n      if (extraCode) {\n        map.add(extraCode);\n      }\n\n      return map;\n    }\n  }, {\n    key: \"_splitString\",\n    value: function _splitString(str, position) {\n      return position <= 0 ? [\"\", str] : [str.substr(0, position), str.substr(position)];\n    }\n  }, {\n    key: \"_replaceInStringNode\",\n    value: function _replaceInStringNode(output, replace, getOriginalSource, node, position, mapping) {\n      var original = undefined;\n\n      do {\n        var splitPosition = replace.position - position; // If multiple replaces occur in the same location then the splitPosition may be\n        // before the current position for the subsequent splits. Ensure it is >= 0\n\n        if (splitPosition < 0) {\n          splitPosition = 0;\n        }\n\n        if (splitPosition >= node.length || replace.done) {\n          if (replace.emit) {\n            var nodeEnd = new SourceNode(mapping.line, mapping.column, mapping.source, node, mapping.name);\n            output.push(nodeEnd);\n          }\n\n          return position + node.length;\n        }\n\n        var originalColumn = mapping.column; // Try to figure out if generated code matches original code of this segement\n        // If this is the case we assume that it's allowed to move mapping.column\n        // Because getOriginalSource can be expensive we only do it when neccessary\n\n        var nodePart;\n\n        if (splitPosition > 0) {\n          nodePart = node.slice(0, splitPosition);\n\n          if (original === undefined) {\n            original = getOriginalSource(mapping);\n          }\n\n          if (original && original.length >= splitPosition && original.startsWith(nodePart)) {\n            mapping.column += splitPosition;\n            original = original.substr(splitPosition);\n          }\n        }\n\n        var emit = replace.next();\n\n        if (!emit) {\n          // Stop emitting when we have found the beginning of the string to replace.\n          // Emit the part of the string before splitPosition\n          if (splitPosition > 0) {\n            var nodeStart = new SourceNode(mapping.line, originalColumn, mapping.source, nodePart, mapping.name);\n            output.push(nodeStart);\n          } // Emit the replacement value\n\n\n          if (replace.value) {\n            output.push(new SourceNode(mapping.line, mapping.column, mapping.source, replace.value, mapping.name || replace.name));\n          }\n        } // Recurse with remainder of the string as there may be multiple replaces within a single node\n\n\n        node = node.substr(splitPosition);\n        position += splitPosition;\n      } while (true);\n    }\n  }]);\n\n  return ReplaceSource;\n}(Source);\n\nvar ReplacementEnumerator = /*#__PURE__*/function () {\n  /**\n   * @param {Replacement[]} replacements list of replacements\n   */\n  function ReplacementEnumerator(replacements) {\n    _classCallCheck(this, ReplacementEnumerator);\n\n    this.replacements = replacements || [];\n    this.index = this.replacements.length;\n    this.done = false;\n    this.emit = false; // Set initial start position\n\n    this.next();\n  }\n\n  _createClass(ReplacementEnumerator, [{\n    key: \"next\",\n    value: function next() {\n      if (this.done) return true;\n\n      if (this.emit) {\n        // Start point found. stop emitting. set position to find end\n        var repl = this.replacements[this.index];\n        var end = Math.floor(repl.end + 1);\n        this.position = end;\n        this.value = repl.content;\n        this.name = repl.name;\n      } else {\n        // End point found. start emitting. set position to find next start\n        this.index--;\n\n        if (this.index < 0) {\n          this.done = true;\n        } else {\n          var nextRepl = this.replacements[this.index];\n          var start = Math.floor(nextRepl.start);\n          this.position = start;\n        }\n      }\n\n      if (this.position < 0) this.position = 0;\n      this.emit = !this.emit;\n      return this.emit;\n    }\n  }, {\n    key: \"footer\",\n    value: function footer() {\n      if (!this.done && !this.emit) this.next(); // If we finished _replaceInNode mid emit we advance to next entry\n\n      if (this.done) {\n        return [];\n      } else {\n        var resultStr = \"\";\n\n        for (var i = this.index; i >= 0; i--) {\n          var repl = this.replacements[i]; // this doesn't need to handle repl.name, because in SourceMaps generated code\n          // without pointer to original source can't have a name\n\n          resultStr += repl.content;\n        }\n\n        return resultStr;\n      }\n    }\n  }]);\n\n  return ReplacementEnumerator;\n}();\n\nrequire(\"./SourceAndMapMixin\")(ReplaceSource.prototype);\n\nmodule.exports = ReplaceSource;","map":{"version":3,"sources":["/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/webpack-sources/lib/ReplaceSource.js"],"names":["Source","require","SourceNode","Replacement","start","end","content","insertIndex","name","ReplaceSource","source","_source","_name","replacements","newValue","Error","push","length","pos","options","_replaceString","sort","a","b","diff","str","_sortReplacements","result","forEach","repl","remSource","pop","splitted1","_splitString","Math","floor","splitted2","resultStr","i","node","replace","ReplacementEnumerator","output","position","sources","Object","create","sourcesInLines","walkSourceContents","sourceFile","sourceContent","setSourceContent","replaceInStringNode","_replaceInStringNode","bind","getOriginalSource","mapping","key","lines","split","map","line","substr","column","walk","chunk","remaining","footer","add","listMap","currentIndex","idxReplacement","removeChars","mapGeneratedCode","newCurrentIndex","finalStr","before","max","after","extraCode","original","undefined","splitPosition","done","emit","nodeEnd","originalColumn","nodePart","slice","startsWith","next","nodeStart","value","index","nextRepl","prototype","module","exports"],"mappings":"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","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nvar Source = require(\"./Source\");\nvar SourceNode = require(\"source-map\").SourceNode;\n\nclass Replacement {\n\tconstructor(start, end, content, insertIndex, name) {\n\t\tthis.start = start;\n\t\tthis.end = end;\n\t\tthis.content = content;\n\t\tthis.insertIndex = insertIndex;\n\t\tthis.name = name;\n\t}\n}\n\nclass ReplaceSource extends Source {\n\tconstructor(source, name) {\n\t\tsuper();\n\t\tthis._source = source;\n\t\tthis._name = name;\n\t\t/** @type {Replacement[]} */\n\t\tthis.replacements = [];\n\t}\n\n\treplace(start, end, newValue, name) {\n\t\tif(typeof newValue !== \"string\")\n\t\t\tthrow new Error(\"insertion must be a string, but is a \" + typeof newValue);\n\t\tthis.replacements.push(new Replacement(start, end, newValue, this.replacements.length, name));\n\t}\n\n\tinsert(pos, newValue, name) {\n\t\tif(typeof newValue !== \"string\")\n\t\t\tthrow new Error(\"insertion must be a string, but is a \" + typeof newValue + \": \" + newValue);\n\t\tthis.replacements.push(new Replacement(pos, pos - 1, newValue, this.replacements.length, name));\n\t}\n\n\tsource(options) {\n\t\treturn this._replaceString(this._source.source());\n\t}\n\n\toriginal() {\n\t\treturn this._source;\n\t}\n\n\t_sortReplacements() {\n\t\tthis.replacements.sort(function(a, b) {\n\t\t\tvar diff = b.end - a.end;\n\t\t\tif(diff !== 0)\n\t\t\t\treturn diff;\n\t\t\tdiff = b.start - a.start;\n\t\t\tif(diff !== 0)\n\t\t\t\treturn diff;\n\t\t\treturn b.insertIndex - a.insertIndex;\n\t\t});\n\t}\n\n\t_replaceString(str) {\n\t\tif(typeof str !== \"string\")\n\t\t\tthrow new Error(\"str must be a string, but is a \" + typeof str + \": \" + str);\n\t\tthis._sortReplacements();\n\t\tvar result = [str];\n\t\tthis.replacements.forEach(function(repl) {\n\t\t\tvar remSource = result.pop();\n\t\t\tvar splitted1 = this._splitString(remSource, Math.floor(repl.end + 1));\n\t\t\tvar splitted2 = this._splitString(splitted1[0], Math.floor(repl.start));\n\t\t\tresult.push(splitted1[1], repl.content, splitted2[0]);\n\t\t}, this);\n\n\t\t// write out result array in reverse order\n\t\tlet resultStr = \"\";\n\t\tfor(let i = result.length - 1; i >= 0; --i) {\n\t\t\tresultStr += result[i];\n\t\t}\n\t\treturn resultStr;\n\t}\n\n\tnode(options) {\n\t\tvar node = this._source.node(options);\n\t\tif(this.replacements.length === 0) {\n\t\t\treturn node;\n\t\t}\n\t\tthis._sortReplacements();\n\t\tvar replace = new ReplacementEnumerator(this.replacements);\n\t\tvar output = [];\n\t\tvar position = 0;\n\t\tvar sources = Object.create(null);\n\t\tvar sourcesInLines = Object.create(null);\n\n\t\t// We build a new list of SourceNodes in \"output\"\n\t\t// from the original mapping data\n\n\t\tvar result = new SourceNode();\n\n\t\t// We need to add source contents manually\n\t\t// because \"walk\" will not handle it\n\t\tnode.walkSourceContents(function(sourceFile, sourceContent) {\n\t\t\tresult.setSourceContent(sourceFile, sourceContent);\n\t\t\tsources[\"$\" + sourceFile] = sourceContent;\n\t\t});\n\n\t\tvar replaceInStringNode = this._replaceInStringNode.bind(this, output, replace, function getOriginalSource(mapping) {\n\t\t\tvar key = \"$\" + mapping.source;\n\t\t\tvar lines = sourcesInLines[key];\n\t\t\tif(!lines) {\n\t\t\t\tvar source = sources[key];\n\t\t\t\tif(!source) return null;\n\t\t\t\tlines = source.split(\"\\n\").map(function(line) {\n\t\t\t\t\treturn line + \"\\n\";\n\t\t\t\t});\n\t\t\t\tsourcesInLines[key] = lines;\n\t\t\t}\n\t\t\t// line is 1-based\n\t\t\tif(mapping.line > lines.length) return null;\n\t\t\tvar line = lines[mapping.line - 1];\n\t\t\treturn line.substr(mapping.column);\n\t\t});\n\n\t\tnode.walk(function(chunk, mapping) {\n\t\t\tposition = replaceInStringNode(chunk, position, mapping);\n\t\t});\n\n\t\t// If any replacements occur after the end of the original file, then we append them\n\t\t// directly to the end of the output\n\t\tvar remaining = replace.footer();\n\t\tif(remaining) {\n\t\t\toutput.push(remaining);\n\t\t}\n\n\t\tresult.add(output);\n\n\t\treturn result;\n\t}\n\n\tlistMap(options) {\n\t\tthis._sortReplacements();\n\t\tvar map = this._source.listMap(options);\n\t\tvar currentIndex = 0;\n\t\tvar replacements = this.replacements;\n\t\tvar idxReplacement = replacements.length - 1;\n\t\tvar removeChars = 0;\n\t\tmap = map.mapGeneratedCode(function(str) {\n\t\t\tvar newCurrentIndex = currentIndex + str.length;\n\t\t\tif(removeChars > str.length) {\n\t\t\t\tremoveChars -= str.length;\n\t\t\t\tstr = \"\";\n\t\t\t} else {\n\t\t\t\tif(removeChars > 0) {\n\t\t\t\t\tstr = str.substr(removeChars);\n\t\t\t\t\tcurrentIndex += removeChars;\n\t\t\t\t\tremoveChars = 0;\n\t\t\t\t}\n\t\t\t\tvar finalStr = \"\";\n\t\t\t\twhile(idxReplacement >= 0 && replacements[idxReplacement].start < newCurrentIndex) {\n\t\t\t\t\tvar repl = replacements[idxReplacement];\n\t\t\t\t\tvar start = Math.floor(repl.start);\n\t\t\t\t\tvar end = Math.floor(repl.end + 1);\n\t\t\t\t\tvar before = str.substr(0, Math.max(0, start - currentIndex));\n\t\t\t\t\tif(end <= newCurrentIndex) {\n\t\t\t\t\t\tvar after = str.substr(Math.max(0, end - currentIndex));\n\t\t\t\t\t\tfinalStr += before + repl.content;\n\t\t\t\t\t\tstr = after;\n\t\t\t\t\t\tcurrentIndex = Math.max(currentIndex, end);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tfinalStr += before + repl.content;\n\t\t\t\t\t\tstr = \"\";\n\t\t\t\t\t\tremoveChars = end - newCurrentIndex;\n\t\t\t\t\t}\n\t\t\t\t\tidxReplacement--;\n\t\t\t\t}\n\t\t\t\tstr = finalStr + str;\n\t\t\t}\n\t\t\tcurrentIndex = newCurrentIndex;\n\t\t\treturn str;\n\t\t});\n\t\tvar extraCode = \"\";\n\t\twhile(idxReplacement >= 0) {\n\t\t\textraCode += replacements[idxReplacement].content;\n\t\t\tidxReplacement--;\n\t\t}\n\t\tif(extraCode) {\n\t\t\tmap.add(extraCode);\n\t\t}\n\t\treturn map;\n\t}\n\n\t_splitString(str, position) {\n\t\treturn position <= 0 ? [\"\", str] : [str.substr(0, position), str.substr(position)];\n\t}\n\n\t_replaceInStringNode(output, replace, getOriginalSource, node, position, mapping) {\n\t\tvar original = undefined;\n\n\t\tdo {\n\t\t\tvar splitPosition = replace.position - position;\n\t\t\t// If multiple replaces occur in the same location then the splitPosition may be\n\t\t\t// before the current position for the subsequent splits. Ensure it is >= 0\n\t\t\tif(splitPosition < 0) {\n\t\t\t\tsplitPosition = 0;\n\t\t\t}\n\t\t\tif(splitPosition >= node.length || replace.done) {\n\t\t\t\tif(replace.emit) {\n\t\t\t\t\tvar nodeEnd = new SourceNode(\n\t\t\t\t\t\tmapping.line,\n\t\t\t\t\t\tmapping.column,\n\t\t\t\t\t\tmapping.source,\n\t\t\t\t\t\tnode,\n\t\t\t\t\t\tmapping.name\n\t\t\t\t\t);\n\t\t\t\t\toutput.push(nodeEnd);\n\t\t\t\t}\n\t\t\t\treturn position + node.length;\n\t\t\t}\n\n\t\t\tvar originalColumn = mapping.column;\n\n\t\t\t// Try to figure out if generated code matches original code of this segement\n\t\t\t// If this is the case we assume that it's allowed to move mapping.column\n\t\t\t// Because getOriginalSource can be expensive we only do it when neccessary\n\n\t\t\tvar nodePart;\n\t\t\tif(splitPosition > 0) {\n\t\t\t\tnodePart = node.slice(0, splitPosition);\n\t\t\t\tif(original === undefined) {\n\t\t\t\t\toriginal = getOriginalSource(mapping);\n\t\t\t\t}\n\t\t\t\tif(original && original.length >= splitPosition && original.startsWith(nodePart)) {\n\t\t\t\t\tmapping.column += splitPosition;\n\t\t\t\t\toriginal = original.substr(splitPosition);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvar emit = replace.next();\n\t\t\tif(!emit) {\n\t\t\t\t// Stop emitting when we have found the beginning of the string to replace.\n\t\t\t\t// Emit the part of the string before splitPosition\n\t\t\t\tif(splitPosition > 0) {\n\t\t\t\t\tvar nodeStart = new SourceNode(\n\t\t\t\t\t\tmapping.line,\n\t\t\t\t\t\toriginalColumn,\n\t\t\t\t\t\tmapping.source,\n\t\t\t\t\t\tnodePart,\n\t\t\t\t\t\tmapping.name\n\t\t\t\t\t);\n\t\t\t\t\toutput.push(nodeStart);\n\t\t\t\t}\n\n\t\t\t\t// Emit the replacement value\n\t\t\t\tif(replace.value) {\n\t\t\t\t\toutput.push(new SourceNode(\n\t\t\t\t\t\tmapping.line,\n\t\t\t\t\t\tmapping.column,\n\t\t\t\t\t\tmapping.source,\n\t\t\t\t\t\treplace.value,\n\t\t\t\t\t\tmapping.name || replace.name\n\t\t\t\t\t));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Recurse with remainder of the string as there may be multiple replaces within a single node\n\t\t\tnode = node.substr(splitPosition);\n\t\t\tposition += splitPosition;\n\t\t} while (true);\n\t}\n}\n\nclass ReplacementEnumerator {\n\t/**\n\t * @param {Replacement[]} replacements list of replacements\n\t */\n\tconstructor(replacements) {\n\t\tthis.replacements = replacements || [];\n\t\tthis.index = this.replacements.length;\n\t\tthis.done = false;\n\t\tthis.emit = false;\n\t\t// Set initial start position\n\t\tthis.next();\n\t}\n\n\tnext() {\n\t\tif(this.done)\n\t\t\treturn true;\n\t\tif(this.emit) {\n\t\t\t// Start point found. stop emitting. set position to find end\n\t\t\tvar repl = this.replacements[this.index];\n\t\t\tvar end = Math.floor(repl.end + 1);\n\t\t\tthis.position = end;\n\t\t\tthis.value = repl.content;\n\t\t\tthis.name = repl.name;\n\t\t} else {\n\t\t\t// End point found. start emitting. set position to find next start\n\t\t\tthis.index--;\n\t\t\tif(this.index < 0) {\n\t\t\t\tthis.done = true;\n\t\t\t} else {\n\t\t\t\tvar nextRepl = this.replacements[this.index];\n\t\t\t\tvar start = Math.floor(nextRepl.start);\n\t\t\t\tthis.position = start;\n\t\t\t}\n\t\t}\n\t\tif(this.position < 0)\n\t\t\tthis.position = 0;\n\t\tthis.emit = !this.emit;\n\t\treturn this.emit;\n\t}\n\n\tfooter() {\n\t\tif(!this.done && !this.emit)\n\t\t\tthis.next(); // If we finished _replaceInNode mid emit we advance to next entry\n\t\tif(this.done) {\n\t\t\treturn [];\n\t\t} else {\n\t\t\tvar resultStr = \"\";\n\t\t\tfor(var i = this.index; i >= 0; i--) {\n\t\t\t\tvar repl = this.replacements[i];\n\t\t\t\t// this doesn't need to handle repl.name, because in SourceMaps generated code\n\t\t\t\t// without pointer to original source can't have a name\n\t\t\t\tresultStr += repl.content;\n\t\t\t}\n\t\t\treturn resultStr;\n\t\t}\n\t}\n}\n\nrequire(\"./SourceAndMapMixin\")(ReplaceSource.prototype);\n\nmodule.exports = ReplaceSource;\n"]},"metadata":{},"sourceType":"script"}