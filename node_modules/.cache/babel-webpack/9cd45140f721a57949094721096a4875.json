{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n/** @typedef {import(\"./Resolver\")} Resolver */\n\n/** @typedef {import(\"./Resolver\").ResolveStepHook} ResolveStepHook */\n\nvar _classCallCheck = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/createClass\");\n\nmodule.exports = /*#__PURE__*/function () {\n  /**\n   * @param {string | ResolveStepHook} source source\n   * @param {string} message message\n   * @param {string | ResolveStepHook} target target\n   */\n  function TryNextPlugin(source, message, target) {\n    _classCallCheck(this, TryNextPlugin);\n\n    this.source = source;\n    this.message = message;\n    this.target = target;\n  }\n  /**\n   * @param {Resolver} resolver the resolver\n   * @returns {void}\n   */\n\n\n  _createClass(TryNextPlugin, [{\n    key: \"apply\",\n    value: function apply(resolver) {\n      var _this = this;\n\n      var target = resolver.ensureHook(this.target);\n      resolver.getHook(this.source).tapAsync(\"TryNextPlugin\", function (request, resolveContext, callback) {\n        resolver.doResolve(target, request, _this.message, resolveContext, callback);\n      });\n    }\n  }]);\n\n  return TryNextPlugin;\n}();","map":{"version":3,"sources":["/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/enhanced-resolve/lib/TryNextPlugin.js"],"names":["module","exports","source","message","target","resolver","ensureHook","getHook","tapAsync","request","resolveContext","callback","doResolve"],"mappings":"AAAA;AACA;AACA;AACA;AAEA;AAEA;;AACA;;;;;;AAEAA,MAAM,CAACC,OAAP;AACC;AACD;AACA;AACA;AACA;AACC,yBAAYC,MAAZ,EAAoBC,OAApB,EAA6BC,MAA7B,EAAqC;AAAA;;AACpC,SAAKF,MAAL,GAAcA,MAAd;AACA,SAAKC,OAAL,GAAeA,OAAf;AACA,SAAKC,MAAL,GAAcA,MAAd;AACA;AAED;AACD;AACA;AACA;;;AAfA;AAAA;AAAA,WAgBC,eAAMC,QAAN,EAAgB;AAAA;;AACf,UAAMD,MAAM,GAAGC,QAAQ,CAACC,UAAT,CAAoB,KAAKF,MAAzB,CAAf;AACAC,MAAAA,QAAQ,CACNE,OADF,CACU,KAAKL,MADf,EAEEM,QAFF,CAEW,eAFX,EAE4B,UAACC,OAAD,EAAUC,cAAV,EAA0BC,QAA1B,EAAuC;AACjEN,QAAAA,QAAQ,CAACO,SAAT,CACCR,MADD,EAECK,OAFD,EAGC,KAAI,CAACN,OAHN,EAICO,cAJD,EAKCC,QALD;AAOA,OAVF;AAWA;AA7BF;;AAAA;AAAA","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\n/** @typedef {import(\"./Resolver\")} Resolver */\n/** @typedef {import(\"./Resolver\").ResolveStepHook} ResolveStepHook */\n\nmodule.exports = class TryNextPlugin {\n\t/**\n\t * @param {string | ResolveStepHook} source source\n\t * @param {string} message message\n\t * @param {string | ResolveStepHook} target target\n\t */\n\tconstructor(source, message, target) {\n\t\tthis.source = source;\n\t\tthis.message = message;\n\t\tthis.target = target;\n\t}\n\n\t/**\n\t * @param {Resolver} resolver the resolver\n\t * @returns {void}\n\t */\n\tapply(resolver) {\n\t\tconst target = resolver.ensureHook(this.target);\n\t\tresolver\n\t\t\t.getHook(this.source)\n\t\t\t.tapAsync(\"TryNextPlugin\", (request, resolveContext, callback) => {\n\t\t\t\tresolver.doResolve(\n\t\t\t\t\ttarget,\n\t\t\t\t\trequest,\n\t\t\t\t\tthis.message,\n\t\t\t\t\tresolveContext,\n\t\t\t\t\tcallback\n\t\t\t\t);\n\t\t\t});\n\t}\n};\n"]},"metadata":{},"sourceType":"script"}