{"ast":null,"code":"/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n(function (factory) {\n  if (typeof module === \"object\" && typeof module.exports === \"object\") {\n    var v = factory(require, exports);\n    if (v !== undefined) module.exports = v;\n  } else if (typeof define === \"function\" && define.amd) {\n    define(\"@angular/compiler-cli/src/ngtsc/typecheck/api/symbols\", [\"require\", \"exports\"], factory);\n  }\n})(function (require, exports) {\n  \"use strict\";\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.SymbolKind = void 0;\n  var SymbolKind;\n\n  (function (SymbolKind) {\n    SymbolKind[SymbolKind[\"Input\"] = 0] = \"Input\";\n    SymbolKind[SymbolKind[\"Output\"] = 1] = \"Output\";\n    SymbolKind[SymbolKind[\"Binding\"] = 2] = \"Binding\";\n    SymbolKind[SymbolKind[\"Reference\"] = 3] = \"Reference\";\n    SymbolKind[SymbolKind[\"Variable\"] = 4] = \"Variable\";\n    SymbolKind[SymbolKind[\"Directive\"] = 5] = \"Directive\";\n    SymbolKind[SymbolKind[\"Element\"] = 6] = \"Element\";\n    SymbolKind[SymbolKind[\"Template\"] = 7] = \"Template\";\n    SymbolKind[SymbolKind[\"Expression\"] = 8] = \"Expression\";\n    SymbolKind[SymbolKind[\"DomBinding\"] = 9] = \"DomBinding\";\n    SymbolKind[SymbolKind[\"Pipe\"] = 10] = \"Pipe\";\n  })(SymbolKind = exports.SymbolKind || (exports.SymbolKind = {}));\n});","map":{"version":3,"sources":["../../../../../../../../../packages/compiler-cli/src/ngtsc/typecheck/api/symbols.ts"],"names":[],"mappings":"AAAA;;;;;;AAMG;;;;;;;;;;;;;;;AASH,MAAY,UAAZ;;AAAA,GAAA,UAAY,UAAZ,EAAsB;AACpB,IAAA,UAAA,CAAA,UAAA,CAAA,OAAA,CAAA,GAAA,CAAA,CAAA,GAAA,OAAA;AACA,IAAA,UAAA,CAAA,UAAA,CAAA,QAAA,CAAA,GAAA,CAAA,CAAA,GAAA,QAAA;AACA,IAAA,UAAA,CAAA,UAAA,CAAA,SAAA,CAAA,GAAA,CAAA,CAAA,GAAA,SAAA;AACA,IAAA,UAAA,CAAA,UAAA,CAAA,WAAA,CAAA,GAAA,CAAA,CAAA,GAAA,WAAA;AACA,IAAA,UAAA,CAAA,UAAA,CAAA,UAAA,CAAA,GAAA,CAAA,CAAA,GAAA,UAAA;AACA,IAAA,UAAA,CAAA,UAAA,CAAA,WAAA,CAAA,GAAA,CAAA,CAAA,GAAA,WAAA;AACA,IAAA,UAAA,CAAA,UAAA,CAAA,SAAA,CAAA,GAAA,CAAA,CAAA,GAAA,SAAA;AACA,IAAA,UAAA,CAAA,UAAA,CAAA,UAAA,CAAA,GAAA,CAAA,CAAA,GAAA,UAAA;AACA,IAAA,UAAA,CAAA,UAAA,CAAA,YAAA,CAAA,GAAA,CAAA,CAAA,GAAA,YAAA;AACA,IAAA,UAAA,CAAA,UAAA,CAAA,YAAA,CAAA,GAAA,CAAA,CAAA,GAAA,YAAA;AACA,IAAA,UAAA,CAAA,UAAA,CAAA,MAAA,CAAA,GAAA,EAAA,CAAA,GAAA,MAAA;AACD,GAZD,EAAY,UAAU,GAAV,OAAA,CAAA,UAAA,KAAA,OAAA,CAAA,UAAA,GAAU,EAAV,CAAZ","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TmplAstElement, TmplAstReference, TmplAstTemplate, TmplAstVariable} from '@angular/compiler';\nimport * as ts from 'typescript';\n\nimport {AbsoluteFsPath} from '../../file_system';\nimport {ClassDeclaration} from '../../reflection';\nimport {DirectiveInScope} from './scope';\n\nexport enum SymbolKind {\n  Input,\n  Output,\n  Binding,\n  Reference,\n  Variable,\n  Directive,\n  Element,\n  Template,\n  Expression,\n  DomBinding,\n  Pipe,\n}\n\n/**\n * A representation of an entity in the `TemplateAst`.\n */\nexport type Symbol = InputBindingSymbol|OutputBindingSymbol|ElementSymbol|ReferenceSymbol|\n    VariableSymbol|ExpressionSymbol|DirectiveSymbol|TemplateSymbol|DomBindingSymbol|PipeSymbol;\n\n/**\n * A `Symbol` which declares a new named entity in the template scope.\n */\nexport type TemplateDeclarationSymbol = ReferenceSymbol|VariableSymbol;\n\n/** Information about where a `ts.Node` can be found in the type check block shim file. */\nexport interface ShimLocation {\n  /**\n   * The fully qualified path of the file which contains the generated TypeScript type check\n   * code for the component's template.\n   */\n  shimPath: AbsoluteFsPath;\n\n  /** The location in the shim file where node appears. */\n  positionInShimFile: number;\n}\n\n/**\n * A generic representation of some node in a template.\n */\nexport interface TsNodeSymbolInfo {\n  /** The `ts.Type` of the template node. */\n  tsType: ts.Type;\n\n  /** The `ts.Symbol` for the template node */\n  tsSymbol: ts.Symbol|null;\n\n  /** The position of the most relevant part of the template node. */\n  shimLocation: ShimLocation;\n}\n\n/**\n * A representation of an expression in a component template.\n */\nexport interface ExpressionSymbol {\n  kind: SymbolKind.Expression;\n\n  /** The `ts.Type` of the expression AST. */\n  tsType: ts.Type;\n\n  /**\n   * The `ts.Symbol` of the entity. This could be `null`, for example `AST` expression\n   * `{{foo.bar + foo.baz}}` does not have a `ts.Symbol` but `foo.bar` and `foo.baz` both do.\n   */\n  tsSymbol: ts.Symbol|null;\n\n  /** The position of the most relevant part of the expression. */\n  shimLocation: ShimLocation;\n}\n\n/** Represents either an input or output binding in a template. */\nexport interface BindingSymbol {\n  kind: SymbolKind.Binding;\n\n  /** The `ts.Type` of the class member on the directive that is the target of the binding. */\n  tsType: ts.Type;\n\n  /** The `ts.Symbol` of the class member on the directive that is the target of the binding. */\n  tsSymbol: ts.Symbol;\n\n  /**\n   * The `DirectiveSymbol` or `ElementSymbol` for the Directive, Component, or `HTMLElement` with\n   * the binding.\n   */\n  target: DirectiveSymbol|ElementSymbol|TemplateSymbol;\n\n  /** The location in the shim file where the field access for the binding appears. */\n  shimLocation: ShimLocation;\n}\n\n/**\n * A representation of an input binding in a component template.\n */\nexport interface InputBindingSymbol {\n  kind: SymbolKind.Input;\n\n  /** A single input may be bound to multiple components or directives. */\n  bindings: BindingSymbol[];\n}\n\n/**\n * A representation of an output binding in a component template.\n */\nexport interface OutputBindingSymbol {\n  kind: SymbolKind.Output;\n\n  /** A single output may be bound to multiple components or directives. */\n  bindings: BindingSymbol[];\n}\n\n/**\n * A representation of a local reference in a component template.\n */\nexport interface ReferenceSymbol {\n  kind: SymbolKind.Reference;\n\n  /**\n   * The `ts.Type` of the Reference value.\n   *\n   * `TmplAstTemplate` - The type of the `TemplateRef`\n   * `TmplAstElement` - The `ts.Type` for the `HTMLElement`.\n   * Directive - The `ts.Type` for the class declaration.\n   */\n  tsType: ts.Type;\n\n  /**\n   * The `ts.Symbol` for the Reference value.\n   *\n   * `TmplAstTemplate` - A `TemplateRef` symbol.\n   * `TmplAstElement` - The symbol for the `HTMLElement`.\n   * Directive - The symbol for the class declaration of the directive.\n   */\n  tsSymbol: ts.Symbol;\n\n  /**\n   * Depending on the type of the reference, this is one of the following:\n   *  - `TmplAstElement` when the local ref refers to the HTML element\n   *  - `TmplAstTemplate` when the ref refers to an `ng-template`\n   *  - `ts.ClassDeclaration` when the local ref refers to a Directive instance (#ref=\"myExportAs\")\n   */\n  target: TmplAstElement|TmplAstTemplate|ts.ClassDeclaration;\n\n  /**\n   * The node in the `TemplateAst` where the symbol is declared. That is, node for the `#ref` or\n   * `#ref=\"exportAs\"`.\n   */\n  declaration: TmplAstReference;\n\n  /**\n   * The location in the shim file of a variable that holds the type of the local ref.\n   * For example, a reference declaration like the following:\n   * ```\n   * var _t1 = document.createElement('div');\n   * var _t2 = _t1; // This is the reference declaration\n   * ```\n   * This `targetLocation` is `[_t1 variable declaration].getStart()`.\n   */\n  targetLocation: ShimLocation;\n\n  /**\n   * The location in the TCB for the identifier node in the reference variable declaration.\n   * For example, given a variable declaration statement for a template reference:\n   * `var _t2 = _t1`, this location is `[_t2 node].getStart()`. This location can\n   * be used to find references to the variable within the template.\n   */\n  referenceVarLocation: ShimLocation;\n}\n\n/**\n * A representation of a context variable in a component template.\n */\nexport interface VariableSymbol {\n  kind: SymbolKind.Variable;\n\n  /**\n   * The `ts.Type` of the entity.\n   *\n   * This will be `any` if there is no `ngTemplateContextGuard`.\n   */\n  tsType: ts.Type;\n\n  /**\n   * The `ts.Symbol` for the context variable.\n   *\n   * This will be `null` if there is no `ngTemplateContextGuard`.\n   */\n  tsSymbol: ts.Symbol|null;\n\n  /**\n   * The node in the `TemplateAst` where the variable is declared. That is, the node for the `let-`\n   * node in the template.\n   */\n  declaration: TmplAstVariable;\n\n  /**\n   * The location in the shim file for the identifier that was declared for the template variable.\n   */\n  localVarLocation: ShimLocation;\n\n  /**\n   * The location in the shim file for the initializer node of the variable that represents the\n   * template variable.\n   */\n  initializerLocation: ShimLocation;\n}\n\n/**\n * A representation of an element in a component template.\n */\nexport interface ElementSymbol {\n  kind: SymbolKind.Element;\n\n  /** The `ts.Type` for the `HTMLElement`. */\n  tsType: ts.Type;\n\n  /** The `ts.Symbol` for the `HTMLElement`. */\n  tsSymbol: ts.Symbol|null;\n\n  /** A list of directives applied to the element. */\n  directives: DirectiveSymbol[];\n\n  /** The location in the shim file for the variable that holds the type of the element. */\n  shimLocation: ShimLocation;\n\n  templateNode: TmplAstElement;\n}\n\nexport interface TemplateSymbol {\n  kind: SymbolKind.Template;\n\n  /** A list of directives applied to the element. */\n  directives: DirectiveSymbol[];\n\n  templateNode: TmplAstTemplate;\n}\n\n/**\n * A representation of a directive/component whose selector matches a node in a component\n * template.\n */\nexport interface DirectiveSymbol extends DirectiveInScope {\n  kind: SymbolKind.Directive;\n\n  /** The `ts.Type` for the class declaration. */\n  tsType: ts.Type;\n\n  /** The location in the shim file for the variable that holds the type of the directive. */\n  shimLocation: ShimLocation;\n}\n\n/**\n * A representation of an attribute on an element or template. These bindings aren't currently\n * type-checked (see `checkTypeOfDomBindings`) so they won't have a `ts.Type`, `ts.Symbol`, or shim\n * location.\n */\nexport interface DomBindingSymbol {\n  kind: SymbolKind.DomBinding;\n\n  /** The symbol for the element or template of the text attribute. */\n  host: ElementSymbol|TemplateSymbol;\n}\n\n/**\n * A representation for a call to a pipe's transform method in the TCB.\n */\nexport interface PipeSymbol {\n  kind: SymbolKind.Pipe;\n\n  /** The `ts.Type` of the transform node. */\n  tsType: ts.Type;\n\n  /**\n   * The `ts.Symbol` for the transform call. This could be `null` when `checkTypeOfPipes` is set to\n   * `false` because the transform call would be of the form `(_pipe1 as any).transform()`\n   */\n  tsSymbol: ts.Symbol|null;\n\n  /** The position of the transform call in the template. */\n  shimLocation: ShimLocation;\n\n  /** The symbol for the pipe class as an instance that appears in the TCB. */\n  classSymbol: ClassSymbol;\n}\n\n/** Represents an instance of a class found in the TCB, i.e. `var _pipe1: MyPipe = null!; */\nexport interface ClassSymbol {\n  /** The `ts.Type` of class. */\n  tsType: ts.Type;\n\n  /** The `ts.Symbol` for class. */\n  tsSymbol: ts.Symbol;\n\n  /** The position for the variable declaration for the class instance. */\n  shimLocation: ShimLocation;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}