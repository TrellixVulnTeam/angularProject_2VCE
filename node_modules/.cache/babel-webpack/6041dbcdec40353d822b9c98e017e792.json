{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nvar loader_utils_1 = require(\"loader-utils\");\n\nvar path = require(\"path\");\n\nvar postcss = require(\"postcss\");\n\nvar url = require(\"url\");\n\nfunction wrapUrl(url) {\n  var wrappedUrl;\n  var hasSingleQuotes = url.indexOf('\\'') >= 0;\n\n  if (hasSingleQuotes) {\n    wrappedUrl = \"\\\"\".concat(url, \"\\\"\");\n  } else {\n    wrappedUrl = \"'\".concat(url, \"'\");\n  }\n\n  return \"url(\".concat(wrappedUrl, \")\");\n}\n\nfunction resolve(_x, _x2, _x3) {\n  return _resolve.apply(this, arguments);\n}\n\nfunction _resolve() {\n  _resolve = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(file, base, resolver) {\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.prev = 0;\n            _context3.next = 3;\n            return resolver('./' + file, base);\n\n          case 3:\n            return _context3.abrupt(\"return\", _context3.sent);\n\n          case 6:\n            _context3.prev = 6;\n            _context3.t0 = _context3[\"catch\"](0);\n            return _context3.abrupt(\"return\", resolver(file, base));\n\n          case 9:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3, null, [[0, 6]]);\n  }));\n  return _resolve.apply(this, arguments);\n}\n\nexports.default = postcss.plugin('postcss-cli-resources', function (options) {\n  if (!options) {\n    throw new Error('No options were specified to \"postcss-cli-resources\".');\n  }\n\n  var _options$deployUrl = options.deployUrl,\n      deployUrl = _options$deployUrl === void 0 ? '' : _options$deployUrl,\n      _options$baseHref = options.baseHref,\n      baseHref = _options$baseHref === void 0 ? '' : _options$baseHref,\n      _options$resourcesOut = options.resourcesOutputPath,\n      resourcesOutputPath = _options$resourcesOut === void 0 ? '' : _options$resourcesOut,\n      filename = options.filename,\n      loader = options.loader,\n      emitFile = options.emitFile,\n      extracted = options.extracted;\n\n  var process = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(inputUrl, context, resourceCache) {\n      var cacheKey, cachedUrl, _url$parse, pathname, hash, search, resolver, result;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (!/^((?:\\w+:)?\\/\\/|data:|chrome:|#)/.test(inputUrl)) {\n                _context.next = 2;\n                break;\n              }\n\n              return _context.abrupt(\"return\", inputUrl);\n\n            case 2:\n              if (!/^\\//.test(inputUrl)) {\n                _context.next = 4;\n                break;\n              }\n\n              return _context.abrupt(\"return\", inputUrl);\n\n            case 4:\n              if (!inputUrl.startsWith('^')) {\n                _context.next = 6;\n                break;\n              }\n\n              return _context.abrupt(\"return\", inputUrl.substr(1));\n\n            case 6:\n              cacheKey = path.resolve(context, inputUrl);\n              cachedUrl = resourceCache.get(cacheKey);\n\n              if (!cachedUrl) {\n                _context.next = 10;\n                break;\n              }\n\n              return _context.abrupt(\"return\", cachedUrl);\n\n            case 10:\n              if (inputUrl.startsWith('~')) {\n                inputUrl = inputUrl.substr(1);\n              }\n\n              _url$parse = url.parse(inputUrl.replace(/\\\\/g, '/')), pathname = _url$parse.pathname, hash = _url$parse.hash, search = _url$parse.search;\n\n              resolver = function resolver(file, base) {\n                return new Promise(function (resolve, reject) {\n                  loader.resolve(base, decodeURI(file), function (err, result) {\n                    if (err) {\n                      reject(err);\n                      return;\n                    }\n\n                    resolve(result);\n                  });\n                });\n              };\n\n              _context.next = 15;\n              return resolve(pathname, context, resolver);\n\n            case 15:\n              result = _context.sent;\n              return _context.abrupt(\"return\", new Promise(function (resolve, reject) {\n                loader.fs.readFile(result, function (err, content) {\n                  if (err) {\n                    reject(err);\n                    return;\n                  }\n\n                  var outputPath = loader_utils_1.interpolateName({\n                    resourcePath: result\n                  }, filename, {\n                    content: content\n                  });\n\n                  if (resourcesOutputPath) {\n                    outputPath = path.posix.join(resourcesOutputPath, outputPath);\n                  }\n\n                  loader.addDependency(result);\n\n                  if (emitFile) {\n                    loader.emitFile(outputPath, content, undefined);\n                  }\n\n                  var outputUrl = outputPath.replace(/\\\\/g, '/');\n\n                  if (hash || search) {\n                    outputUrl = url.format({\n                      pathname: outputUrl,\n                      hash: hash,\n                      search: search\n                    });\n                  }\n\n                  if (deployUrl && !extracted) {\n                    outputUrl = url.resolve(deployUrl, outputUrl);\n                  }\n\n                  resourceCache.set(cacheKey, outputUrl);\n                  resolve(outputUrl);\n                });\n              }));\n\n            case 17:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function process(_x4, _x5, _x6) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  return function (root) {\n    var urlDeclarations = [];\n    root.walkDecls(function (decl) {\n      if (decl.value && decl.value.includes('url')) {\n        urlDeclarations.push(decl);\n      }\n    });\n\n    if (urlDeclarations.length === 0) {\n      return;\n    }\n\n    var resourceCache = new Map();\n    return Promise.all(urlDeclarations.map( /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(decl) {\n        var value, urlRegex, segments, match, lastIndex, modified, inputFile, context, originalUrl, processedUrl;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                value = decl.value;\n                urlRegex = /url\\(\\s*(?:\"([^\"]+)\"|'([^']+)'|(.+?))\\s*\\)/g;\n                segments = [];\n                lastIndex = 0;\n                modified = false; // We want to load it relative to the file that imports\n\n                inputFile = decl.source && decl.source.input.file;\n                context = inputFile && path.dirname(inputFile) || loader.context; // tslint:disable-next-line:no-conditional-assignment\n\n              case 7:\n                if (!(match = urlRegex.exec(value))) {\n                  _context2.next = 25;\n                  break;\n                }\n\n                originalUrl = match[1] || match[2] || match[3];\n                processedUrl = void 0;\n                _context2.prev = 10;\n                _context2.next = 13;\n                return process(originalUrl, context, resourceCache);\n\n              case 13:\n                processedUrl = _context2.sent;\n                _context2.next = 20;\n                break;\n\n              case 16:\n                _context2.prev = 16;\n                _context2.t0 = _context2[\"catch\"](10);\n                loader.emitError(decl.error(_context2.t0.message, {\n                  word: originalUrl\n                }).toString());\n                return _context2.abrupt(\"continue\", 7);\n\n              case 20:\n                if (lastIndex < match.index) {\n                  segments.push(value.slice(lastIndex, match.index));\n                }\n\n                if (!processedUrl || originalUrl === processedUrl) {\n                  segments.push(match[0]);\n                } else {\n                  segments.push(wrapUrl(processedUrl));\n                  modified = true;\n                }\n\n                lastIndex = match.index + match[0].length;\n                _context2.next = 7;\n                break;\n\n              case 25:\n                if (lastIndex < value.length) {\n                  segments.push(value.slice(lastIndex));\n                }\n\n                if (modified) {\n                  decl.value = segments.join('');\n                }\n\n              case 27:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, null, [[10, 16]]);\n      }));\n\n      return function (_x7) {\n        return _ref2.apply(this, arguments);\n      };\n    }()));\n  };\n});","map":{"version":3,"sources":["/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@angular-devkit/build-angular/src/webpack/plugins/postcss-cli-resources.js"],"names":["Object","defineProperty","exports","value","loader_utils_1","require","path","postcss","url","wrapUrl","wrappedUrl","hasSingleQuotes","indexOf","resolve","file","base","resolver","default","plugin","options","Error","deployUrl","baseHref","resourcesOutputPath","filename","loader","emitFile","extracted","process","inputUrl","context","resourceCache","test","startsWith","substr","cacheKey","cachedUrl","get","parse","replace","pathname","hash","search","Promise","reject","decodeURI","err","result","fs","readFile","content","outputPath","interpolateName","resourcePath","posix","join","addDependency","undefined","outputUrl","format","set","root","urlDeclarations","walkDecls","decl","includes","push","length","Map","all","map","urlRegex","segments","lastIndex","modified","inputFile","source","input","dirname","match","exec","originalUrl","processedUrl","emitError","error","message","word","toString","index","slice"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst loader_utils_1 = require(\"loader-utils\");\nconst path = require(\"path\");\nconst postcss = require(\"postcss\");\nconst url = require(\"url\");\nfunction wrapUrl(url) {\n    let wrappedUrl;\n    const hasSingleQuotes = url.indexOf('\\'') >= 0;\n    if (hasSingleQuotes) {\n        wrappedUrl = `\"${url}\"`;\n    }\n    else {\n        wrappedUrl = `'${url}'`;\n    }\n    return `url(${wrappedUrl})`;\n}\nasync function resolve(file, base, resolver) {\n    try {\n        return await resolver('./' + file, base);\n    }\n    catch (_a) {\n        return resolver(file, base);\n    }\n}\nexports.default = postcss.plugin('postcss-cli-resources', (options) => {\n    if (!options) {\n        throw new Error('No options were specified to \"postcss-cli-resources\".');\n    }\n    const { deployUrl = '', baseHref = '', resourcesOutputPath = '', filename, loader, emitFile, extracted, } = options;\n    const process = async (inputUrl, context, resourceCache) => {\n        // If root-relative, absolute or protocol relative url, leave as is\n        if (/^((?:\\w+:)?\\/\\/|data:|chrome:|#)/.test(inputUrl)) {\n            return inputUrl;\n        }\n        if (/^\\//.test(inputUrl)) {\n            return inputUrl;\n        }\n        // If starts with a caret, remove and return remainder\n        // this supports bypassing asset processing\n        if (inputUrl.startsWith('^')) {\n            return inputUrl.substr(1);\n        }\n        const cacheKey = path.resolve(context, inputUrl);\n        const cachedUrl = resourceCache.get(cacheKey);\n        if (cachedUrl) {\n            return cachedUrl;\n        }\n        if (inputUrl.startsWith('~')) {\n            inputUrl = inputUrl.substr(1);\n        }\n        const { pathname, hash, search } = url.parse(inputUrl.replace(/\\\\/g, '/'));\n        const resolver = (file, base) => new Promise((resolve, reject) => {\n            loader.resolve(base, decodeURI(file), (err, result) => {\n                if (err) {\n                    reject(err);\n                    return;\n                }\n                resolve(result);\n            });\n        });\n        const result = await resolve(pathname, context, resolver);\n        return new Promise((resolve, reject) => {\n            loader.fs.readFile(result, (err, content) => {\n                if (err) {\n                    reject(err);\n                    return;\n                }\n                let outputPath = loader_utils_1.interpolateName({ resourcePath: result }, filename, { content });\n                if (resourcesOutputPath) {\n                    outputPath = path.posix.join(resourcesOutputPath, outputPath);\n                }\n                loader.addDependency(result);\n                if (emitFile) {\n                    loader.emitFile(outputPath, content, undefined);\n                }\n                let outputUrl = outputPath.replace(/\\\\/g, '/');\n                if (hash || search) {\n                    outputUrl = url.format({ pathname: outputUrl, hash, search });\n                }\n                if (deployUrl && !extracted) {\n                    outputUrl = url.resolve(deployUrl, outputUrl);\n                }\n                resourceCache.set(cacheKey, outputUrl);\n                resolve(outputUrl);\n            });\n        });\n    };\n    return (root) => {\n        const urlDeclarations = [];\n        root.walkDecls(decl => {\n            if (decl.value && decl.value.includes('url')) {\n                urlDeclarations.push(decl);\n            }\n        });\n        if (urlDeclarations.length === 0) {\n            return;\n        }\n        const resourceCache = new Map();\n        return Promise.all(urlDeclarations.map(async (decl) => {\n            const value = decl.value;\n            const urlRegex = /url\\(\\s*(?:\"([^\"]+)\"|'([^']+)'|(.+?))\\s*\\)/g;\n            const segments = [];\n            let match;\n            let lastIndex = 0;\n            let modified = false;\n            // We want to load it relative to the file that imports\n            const inputFile = decl.source && decl.source.input.file;\n            const context = inputFile && path.dirname(inputFile) || loader.context;\n            // tslint:disable-next-line:no-conditional-assignment\n            while (match = urlRegex.exec(value)) {\n                const originalUrl = match[1] || match[2] || match[3];\n                let processedUrl;\n                try {\n                    processedUrl = await process(originalUrl, context, resourceCache);\n                }\n                catch (err) {\n                    loader.emitError(decl.error(err.message, { word: originalUrl }).toString());\n                    continue;\n                }\n                if (lastIndex < match.index) {\n                    segments.push(value.slice(lastIndex, match.index));\n                }\n                if (!processedUrl || originalUrl === processedUrl) {\n                    segments.push(match[0]);\n                }\n                else {\n                    segments.push(wrapUrl(processedUrl));\n                    modified = true;\n                }\n                lastIndex = match.index + match[0].length;\n            }\n            if (lastIndex < value.length) {\n                segments.push(value.slice(lastIndex));\n            }\n            if (modified) {\n                decl.value = segments.join('');\n            }\n        }));\n    };\n});\n"]},"metadata":{},"sourceType":"script"}