{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getDirectory = getDirectory;\nexports.getDirectorySync = getDirectorySync;\n\nvar _path = _interopRequireDefault(require(\"path\"));\n\nvar _pathType = require(\"path-type\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction getDirectory(_x) {\n  return _getDirectory.apply(this, arguments);\n}\n\nfunction _getDirectory() {\n  _getDirectory = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(filepath) {\n    var filePathIsDirectory, directory;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return (0, _pathType.isDirectory)(filepath);\n\n          case 2:\n            filePathIsDirectory = _context.sent;\n\n            if (!(filePathIsDirectory === true)) {\n              _context.next = 5;\n              break;\n            }\n\n            return _context.abrupt(\"return\", filepath);\n\n          case 5:\n            directory = _path.default.dirname(filepath);\n            return _context.abrupt(\"return\", directory);\n\n          case 7:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _getDirectory.apply(this, arguments);\n}\n\nfunction getDirectorySync(filepath) {\n  var filePathIsDirectory = (0, _pathType.isDirectorySync)(filepath);\n\n  if (filePathIsDirectory === true) {\n    return filepath;\n  }\n\n  var directory = _path.default.dirname(filepath);\n\n  return directory;\n}","map":{"version":3,"sources":["../src/getDirectory.ts"],"names":["filePathIsDirectory","directory","path"],"mappings":";;;;;;;;;;;;AAAA,IAAA,KAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,MAAA,CAAA,CAAA;;AACA,IAAA,SAAA,GAAA,OAAA,CAAA,WAAA,CAAA;;;;;;;;SAEA,Y;;;;;2EAAA,iBAAA,QAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACoC,CAAA,GAAA,SAAA,CAAA,WAAA,EAAlC,QAAkC,CADpC;;AAAA;AACQA,YAAAA,mBADR;;AAAA,kBAGMA,mBAAmB,KAAvB,IAHF;AAAA;AAAA;AAAA;;AAAA,6CAII,QAJJ;;AAAA;AAOQC,YAAAA,SAPR,GAOoBC,KAAAA,CAAAA,OAAAA,CAAAA,OAAAA,CAAlB,QAAkBA,CAPpB;AAAA,6CASE,SATF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAYA,SAAA,gBAAA,CAAA,QAAA,EAAoD;AAClD,MAAMF,mBAAmB,GAAG,CAAA,GAAA,SAAA,CAAA,eAAA,EAA5B,QAA4B,CAA5B;;AAEA,MAAIA,mBAAmB,KAAvB,IAAA,EAAkC;AAChC,WAAA,QAAA;AACD;;AAED,MAAMC,SAAS,GAAGC,KAAAA,CAAAA,OAAAA,CAAAA,OAAAA,CAAlB,QAAkBA,CAAlB;;AAEA,SAAA,SAAA;AACD","sourcesContent":["import path from 'path';\nimport { isDirectory, isDirectorySync } from 'path-type';\n\nasync function getDirectory(filepath: string): Promise<string> {\n  const filePathIsDirectory = await isDirectory(filepath);\n\n  if (filePathIsDirectory === true) {\n    return filepath;\n  }\n\n  const directory = path.dirname(filepath);\n\n  return directory;\n}\n\nfunction getDirectorySync(filepath: string): string {\n  const filePathIsDirectory = isDirectorySync(filepath);\n\n  if (filePathIsDirectory === true) {\n    return filepath;\n  }\n\n  const directory = path.dirname(filepath);\n\n  return directory;\n}\n\nexport { getDirectory, getDirectorySync };\n"]},"metadata":{},"sourceType":"script"}