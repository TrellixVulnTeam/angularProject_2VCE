{"ast":null,"code":"\"use strict\";\n\nvar _createForOfIteratorHelper = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _objectSpread = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/objectSpread2\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getTypescriptWorkerPlugin = exports.getAotConfig = exports.getNonAotConfig = void 0;\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// tslint:disable\n// TODO: cleanup this file, it's copied as is from Angular CLI.\n\nvar build_optimizer_1 = require(\"@angular-devkit/build-optimizer\");\n\nvar path = require(\"path\");\n\nvar webpack_1 = require(\"@ngtools/webpack\");\n\nfunction _pluginOptionsOverrides(buildOptions, pluginOptions) {\n  var compilerOptions = _objectSpread({}, pluginOptions.compilerOptions || {});\n\n  var hostReplacementPaths = {};\n\n  if (buildOptions.fileReplacements) {\n    var _iterator = _createForOfIteratorHelper(buildOptions.fileReplacements),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var replacement = _step.value;\n        hostReplacementPaths[replacement.replace] = replacement.with;\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n  }\n\n  if (buildOptions.preserveSymlinks) {\n    compilerOptions.preserveSymlinks = true;\n  }\n\n  return _objectSpread(_objectSpread({}, pluginOptions), {}, {\n    hostReplacementPaths: hostReplacementPaths,\n    compilerOptions: compilerOptions\n  });\n}\n\nfunction _createAotPlugin(wco, options) {\n  var i18nExtract = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  var root = wco.root,\n      buildOptions = wco.buildOptions;\n  var i18nInFile = buildOptions.i18nFile ? path.resolve(root, buildOptions.i18nFile) : undefined;\n  var i18nFileAndFormat = i18nExtract ? {\n    i18nOutFile: buildOptions.i18nFile,\n    i18nOutFormat: buildOptions.i18nFormat\n  } : {\n    i18nInFile: i18nInFile,\n    i18nInFormat: buildOptions.i18nFormat\n  };\n  var compilerOptions = options.compilerOptions || {};\n\n  if (i18nExtract) {\n    // Extraction of i18n is still using the legacy VE pipeline\n    compilerOptions.enableIvy = false;\n  }\n\n  var additionalLazyModules = {};\n\n  if (buildOptions.lazyModules) {\n    var _iterator2 = _createForOfIteratorHelper(buildOptions.lazyModules),\n        _step2;\n\n    try {\n      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n        var lazyModule = _step2.value;\n        additionalLazyModules[lazyModule] = path.resolve(root, lazyModule);\n      }\n    } catch (err) {\n      _iterator2.e(err);\n    } finally {\n      _iterator2.f();\n    }\n  }\n\n  var pluginOptions = _objectSpread(_objectSpread(_objectSpread({\n    mainPath: path.join(root, buildOptions.main)\n  }, i18nFileAndFormat), {}, {\n    locale: buildOptions.i18nLocale,\n    platform: buildOptions.platform === 'server' ? webpack_1.PLATFORM.Server : webpack_1.PLATFORM.Browser,\n    missingTranslation: buildOptions.i18nMissingTranslation,\n    sourceMap: buildOptions.sourceMap.scripts,\n    additionalLazyModules: additionalLazyModules,\n    nameLazyFiles: buildOptions.namedChunks,\n    forkTypeChecker: buildOptions.forkTypeChecker,\n    contextElementDependencyConstructor: require('webpack/lib/dependencies/ContextElementDependency'),\n    logger: wco.logger,\n    directTemplateLoading: true\n  }, options), {}, {\n    compilerOptions: compilerOptions\n  });\n\n  pluginOptions = _pluginOptionsOverrides(buildOptions, pluginOptions);\n  return new webpack_1.AngularCompilerPlugin(pluginOptions);\n}\n\nfunction getNonAotConfig(wco) {\n  var tsConfigPath = wco.tsConfigPath;\n  return {\n    module: {\n      rules: [{\n        test: /\\.tsx?$/,\n        loader: webpack_1.NgToolsLoader\n      }]\n    },\n    plugins: [_createAotPlugin(wco, {\n      tsConfigPath: tsConfigPath,\n      skipCodeGeneration: true\n    })]\n  };\n}\n\nexports.getNonAotConfig = getNonAotConfig;\n\nfunction getAotConfig(wco) {\n  var i18nExtract = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  var tsConfigPath = wco.tsConfigPath,\n      buildOptions = wco.buildOptions;\n  var loaders = [webpack_1.NgToolsLoader];\n\n  if (buildOptions.buildOptimizer) {\n    loaders.unshift({\n      loader: build_optimizer_1.buildOptimizerLoaderPath,\n      options: {\n        sourceMap: buildOptions.sourceMap.scripts\n      }\n    });\n  }\n\n  var test = /(?:\\.ngfactory\\.js|\\.ngstyle\\.js|\\.tsx?)$/;\n  var optimize = wco.buildOptions.optimization.scripts;\n  return {\n    module: {\n      rules: [{\n        test: test,\n        use: loaders\n      }]\n    },\n    plugins: [_createAotPlugin(wco, {\n      tsConfigPath: tsConfigPath,\n      emitClassMetadata: !optimize,\n      emitNgModuleScope: !optimize\n    }, i18nExtract)]\n  };\n}\n\nexports.getAotConfig = getAotConfig;\n\nfunction getTypescriptWorkerPlugin(wco, workerTsConfigPath) {\n  var buildOptions = wco.buildOptions;\n  var pluginOptions = {\n    skipCodeGeneration: true,\n    tsConfigPath: workerTsConfigPath,\n    mainPath: undefined,\n    platform: webpack_1.PLATFORM.Browser,\n    sourceMap: buildOptions.sourceMap.scripts,\n    forkTypeChecker: buildOptions.forkTypeChecker,\n    contextElementDependencyConstructor: require('webpack/lib/dependencies/ContextElementDependency'),\n    logger: wco.logger,\n    // Run no transformers.\n    platformTransformers: [],\n    // Don't attempt lazy route discovery.\n    discoverLazyRoutes: false\n  };\n  pluginOptions = _pluginOptionsOverrides(buildOptions, pluginOptions);\n  return new webpack_1.AngularCompilerPlugin(pluginOptions);\n}\n\nexports.getTypescriptWorkerPlugin = getTypescriptWorkerPlugin;","map":{"version":3,"sources":["/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@angular-devkit/build-angular/src/webpack/configs/typescript.js"],"names":["Object","defineProperty","exports","value","getTypescriptWorkerPlugin","getAotConfig","getNonAotConfig","build_optimizer_1","require","path","webpack_1","_pluginOptionsOverrides","buildOptions","pluginOptions","compilerOptions","hostReplacementPaths","fileReplacements","replacement","replace","with","preserveSymlinks","_createAotPlugin","wco","options","i18nExtract","root","i18nInFile","i18nFile","resolve","undefined","i18nFileAndFormat","i18nOutFile","i18nOutFormat","i18nFormat","i18nInFormat","enableIvy","additionalLazyModules","lazyModules","lazyModule","mainPath","join","main","locale","i18nLocale","platform","PLATFORM","Server","Browser","missingTranslation","i18nMissingTranslation","sourceMap","scripts","nameLazyFiles","namedChunks","forkTypeChecker","contextElementDependencyConstructor","logger","directTemplateLoading","AngularCompilerPlugin","tsConfigPath","module","rules","test","loader","NgToolsLoader","plugins","skipCodeGeneration","loaders","buildOptimizer","unshift","buildOptimizerLoaderPath","optimize","optimization","use","emitClassMetadata","emitNgModuleScope","workerTsConfigPath","platformTransformers","discoverLazyRoutes"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getTypescriptWorkerPlugin = exports.getAotConfig = exports.getNonAotConfig = void 0;\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// tslint:disable\n// TODO: cleanup this file, it's copied as is from Angular CLI.\nconst build_optimizer_1 = require(\"@angular-devkit/build-optimizer\");\nconst path = require(\"path\");\nconst webpack_1 = require(\"@ngtools/webpack\");\nfunction _pluginOptionsOverrides(buildOptions, pluginOptions) {\n    const compilerOptions = {\n        ...(pluginOptions.compilerOptions || {})\n    };\n    const hostReplacementPaths = {};\n    if (buildOptions.fileReplacements) {\n        for (const replacement of buildOptions.fileReplacements) {\n            hostReplacementPaths[replacement.replace] = replacement.with;\n        }\n    }\n    if (buildOptions.preserveSymlinks) {\n        compilerOptions.preserveSymlinks = true;\n    }\n    return {\n        ...pluginOptions,\n        hostReplacementPaths,\n        compilerOptions\n    };\n}\nfunction _createAotPlugin(wco, options, i18nExtract = false) {\n    const { root, buildOptions } = wco;\n    const i18nInFile = buildOptions.i18nFile\n        ? path.resolve(root, buildOptions.i18nFile)\n        : undefined;\n    const i18nFileAndFormat = i18nExtract\n        ? {\n            i18nOutFile: buildOptions.i18nFile,\n            i18nOutFormat: buildOptions.i18nFormat,\n        } : {\n        i18nInFile: i18nInFile,\n        i18nInFormat: buildOptions.i18nFormat,\n    };\n    const compilerOptions = options.compilerOptions || {};\n    if (i18nExtract) {\n        // Extraction of i18n is still using the legacy VE pipeline\n        compilerOptions.enableIvy = false;\n    }\n    const additionalLazyModules = {};\n    if (buildOptions.lazyModules) {\n        for (const lazyModule of buildOptions.lazyModules) {\n            additionalLazyModules[lazyModule] = path.resolve(root, lazyModule);\n        }\n    }\n    let pluginOptions = {\n        mainPath: path.join(root, buildOptions.main),\n        ...i18nFileAndFormat,\n        locale: buildOptions.i18nLocale,\n        platform: buildOptions.platform === 'server' ? webpack_1.PLATFORM.Server : webpack_1.PLATFORM.Browser,\n        missingTranslation: buildOptions.i18nMissingTranslation,\n        sourceMap: buildOptions.sourceMap.scripts,\n        additionalLazyModules,\n        nameLazyFiles: buildOptions.namedChunks,\n        forkTypeChecker: buildOptions.forkTypeChecker,\n        contextElementDependencyConstructor: require('webpack/lib/dependencies/ContextElementDependency'),\n        logger: wco.logger,\n        directTemplateLoading: true,\n        ...options,\n        compilerOptions,\n    };\n    pluginOptions = _pluginOptionsOverrides(buildOptions, pluginOptions);\n    return new webpack_1.AngularCompilerPlugin(pluginOptions);\n}\nfunction getNonAotConfig(wco) {\n    const { tsConfigPath } = wco;\n    return {\n        module: { rules: [{ test: /\\.tsx?$/, loader: webpack_1.NgToolsLoader }] },\n        plugins: [_createAotPlugin(wco, { tsConfigPath, skipCodeGeneration: true })]\n    };\n}\nexports.getNonAotConfig = getNonAotConfig;\nfunction getAotConfig(wco, i18nExtract = false) {\n    const { tsConfigPath, buildOptions } = wco;\n    const loaders = [webpack_1.NgToolsLoader];\n    if (buildOptions.buildOptimizer) {\n        loaders.unshift({\n            loader: build_optimizer_1.buildOptimizerLoaderPath,\n            options: { sourceMap: buildOptions.sourceMap.scripts }\n        });\n    }\n    const test = /(?:\\.ngfactory\\.js|\\.ngstyle\\.js|\\.tsx?)$/;\n    const optimize = wco.buildOptions.optimization.scripts;\n    return {\n        module: { rules: [{ test, use: loaders }] },\n        plugins: [\n            _createAotPlugin(wco, { tsConfigPath, emitClassMetadata: !optimize, emitNgModuleScope: !optimize }, i18nExtract),\n        ],\n    };\n}\nexports.getAotConfig = getAotConfig;\nfunction getTypescriptWorkerPlugin(wco, workerTsConfigPath) {\n    const { buildOptions } = wco;\n    let pluginOptions = {\n        skipCodeGeneration: true,\n        tsConfigPath: workerTsConfigPath,\n        mainPath: undefined,\n        platform: webpack_1.PLATFORM.Browser,\n        sourceMap: buildOptions.sourceMap.scripts,\n        forkTypeChecker: buildOptions.forkTypeChecker,\n        contextElementDependencyConstructor: require('webpack/lib/dependencies/ContextElementDependency'),\n        logger: wco.logger,\n        // Run no transformers.\n        platformTransformers: [],\n        // Don't attempt lazy route discovery.\n        discoverLazyRoutes: false,\n    };\n    pluginOptions = _pluginOptionsOverrides(buildOptions, pluginOptions);\n    return new webpack_1.AngularCompilerPlugin(pluginOptions);\n}\nexports.getTypescriptWorkerPlugin = getTypescriptWorkerPlugin;\n"]},"metadata":{},"sourceType":"script"}