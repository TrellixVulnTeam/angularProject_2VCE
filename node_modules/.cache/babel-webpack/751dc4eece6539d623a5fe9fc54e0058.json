{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nvar _classCallCheck = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/createClass\");\n\nmodule.exports = /*#__PURE__*/function () {\n  function FileExistsPlugin(source, target) {\n    _classCallCheck(this, FileExistsPlugin);\n\n    this.source = source;\n    this.target = target;\n  }\n\n  _createClass(FileExistsPlugin, [{\n    key: \"apply\",\n    value: function apply(resolver) {\n      var target = resolver.ensureHook(this.target);\n      var fs = resolver.fileSystem;\n      resolver.getHook(this.source).tapAsync(\"FileExistsPlugin\", function (request, resolveContext, callback) {\n        var file = request.path;\n        fs.stat(file, function (err, stat) {\n          if (err || !stat) {\n            if (resolveContext.missing) resolveContext.missing.add(file);\n            if (resolveContext.log) resolveContext.log(file + \" doesn't exist\");\n            return callback();\n          }\n\n          if (!stat.isFile()) {\n            if (resolveContext.missing) resolveContext.missing.add(file);\n            if (resolveContext.log) resolveContext.log(file + \" is not a file\");\n            return callback();\n          }\n\n          resolver.doResolve(target, request, \"existing file: \" + file, resolveContext, callback);\n        });\n      });\n    }\n  }]);\n\n  return FileExistsPlugin;\n}();","map":{"version":3,"sources":["/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/webpack/node_modules/enhanced-resolve/lib/FileExistsPlugin.js"],"names":["module","exports","source","target","resolver","ensureHook","fs","fileSystem","getHook","tapAsync","request","resolveContext","callback","file","path","stat","err","missing","add","log","isFile","doResolve"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;;;;;AAEAA,MAAM,CAACC,OAAP;AACC,4BAAYC,MAAZ,EAAoBC,MAApB,EAA4B;AAAA;;AAC3B,SAAKD,MAAL,GAAcA,MAAd;AACA,SAAKC,MAAL,GAAcA,MAAd;AACA;;AAJF;AAAA;AAAA,WAMC,eAAMC,QAAN,EAAgB;AACf,UAAMD,MAAM,GAAGC,QAAQ,CAACC,UAAT,CAAoB,KAAKF,MAAzB,CAAf;AACA,UAAMG,EAAE,GAAGF,QAAQ,CAACG,UAApB;AACAH,MAAAA,QAAQ,CACNI,OADF,CACU,KAAKN,MADf,EAEEO,QAFF,CAEW,kBAFX,EAE+B,UAACC,OAAD,EAAUC,cAAV,EAA0BC,QAA1B,EAAuC;AACpE,YAAMC,IAAI,GAAGH,OAAO,CAACI,IAArB;AACAR,QAAAA,EAAE,CAACS,IAAH,CAAQF,IAAR,EAAc,UAACG,GAAD,EAAMD,IAAN,EAAe;AAC5B,cAAIC,GAAG,IAAI,CAACD,IAAZ,EAAkB;AACjB,gBAAIJ,cAAc,CAACM,OAAnB,EAA4BN,cAAc,CAACM,OAAf,CAAuBC,GAAvB,CAA2BL,IAA3B;AAC5B,gBAAIF,cAAc,CAACQ,GAAnB,EAAwBR,cAAc,CAACQ,GAAf,CAAmBN,IAAI,GAAG,gBAA1B;AACxB,mBAAOD,QAAQ,EAAf;AACA;;AACD,cAAI,CAACG,IAAI,CAACK,MAAL,EAAL,EAAoB;AACnB,gBAAIT,cAAc,CAACM,OAAnB,EAA4BN,cAAc,CAACM,OAAf,CAAuBC,GAAvB,CAA2BL,IAA3B;AAC5B,gBAAIF,cAAc,CAACQ,GAAnB,EAAwBR,cAAc,CAACQ,GAAf,CAAmBN,IAAI,GAAG,gBAA1B;AACxB,mBAAOD,QAAQ,EAAf;AACA;;AACDR,UAAAA,QAAQ,CAACiB,SAAT,CACClB,MADD,EAECO,OAFD,EAGC,oBAAoBG,IAHrB,EAICF,cAJD,EAKCC,QALD;AAOA,SAlBD;AAmBA,OAvBF;AAwBA;AAjCF;;AAAA;AAAA","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nmodule.exports = class FileExistsPlugin {\n\tconstructor(source, target) {\n\t\tthis.source = source;\n\t\tthis.target = target;\n\t}\n\n\tapply(resolver) {\n\t\tconst target = resolver.ensureHook(this.target);\n\t\tconst fs = resolver.fileSystem;\n\t\tresolver\n\t\t\t.getHook(this.source)\n\t\t\t.tapAsync(\"FileExistsPlugin\", (request, resolveContext, callback) => {\n\t\t\t\tconst file = request.path;\n\t\t\t\tfs.stat(file, (err, stat) => {\n\t\t\t\t\tif (err || !stat) {\n\t\t\t\t\t\tif (resolveContext.missing) resolveContext.missing.add(file);\n\t\t\t\t\t\tif (resolveContext.log) resolveContext.log(file + \" doesn't exist\");\n\t\t\t\t\t\treturn callback();\n\t\t\t\t\t}\n\t\t\t\t\tif (!stat.isFile()) {\n\t\t\t\t\t\tif (resolveContext.missing) resolveContext.missing.add(file);\n\t\t\t\t\t\tif (resolveContext.log) resolveContext.log(file + \" is not a file\");\n\t\t\t\t\t\treturn callback();\n\t\t\t\t\t}\n\t\t\t\t\tresolver.doResolve(\n\t\t\t\t\t\ttarget,\n\t\t\t\t\t\trequest,\n\t\t\t\t\t\t\"existing file: \" + file,\n\t\t\t\t\t\tresolveContext,\n\t\t\t\t\t\tcallback\n\t\t\t\t\t);\n\t\t\t\t});\n\t\t\t});\n\t}\n};\n"]},"metadata":{},"sourceType":"script"}