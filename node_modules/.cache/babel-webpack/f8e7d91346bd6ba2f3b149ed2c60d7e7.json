{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/createClass\");\n\nvar path = require('path');\n/**\n * File object used for tracking files in `file-list.js`.\n */\n\n\nvar File = /*#__PURE__*/function () {\n  function File(path, mtime, doNotCache, type, isBinary) {\n    _classCallCheck(this, File);\n\n    // used for serving (processed path, eg some/file.coffee -> some/file.coffee.js)\n    this.path = path; // original absolute path, id of the file\n\n    this.originalPath = path; // where the content is stored (processed)\n\n    this.contentPath = path; // encodings format {[encodingType]: encodedContent}\n    //   example: {gzip: <Buffer 1f 8b 08...>}\n\n    this.encodings = Object.create(null);\n    this.mtime = mtime;\n    this.isUrl = false;\n    this.doNotCache = doNotCache === undefined ? false : doNotCache;\n    this.type = type; // Tri state: null means probe file for binary.\n\n    this.isBinary = isBinary === undefined ? null : isBinary;\n  }\n  /**\n   * Detect type from the file extension.\n   * @returns {string} detected file type or empty string\n   */\n\n\n  _createClass(File, [{\n    key: \"detectType\",\n    value: function detectType() {\n      return path.extname(this.path).substring(1);\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return this.path;\n    }\n  }]);\n\n  return File;\n}();\n\nmodule.exports = File;","map":{"version":3,"sources":["/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/karma/lib/file.js"],"names":["path","require","File","mtime","doNotCache","type","isBinary","originalPath","contentPath","encodings","Object","create","isUrl","undefined","extname","substring","module","exports"],"mappings":"AAAA;;;;;;AAEA,IAAMA,IAAI,GAAGC,OAAO,CAAC,MAAD,CAApB;AAEA;AACA;AACA;;;IACMC,I;AACJ,gBAAaF,IAAb,EAAmBG,KAAnB,EAA0BC,UAA1B,EAAsCC,IAAtC,EAA4CC,QAA5C,EAAsD;AAAA;;AACpD;AACA,SAAKN,IAAL,GAAYA,IAAZ,CAFoD,CAIpD;;AACA,SAAKO,YAAL,GAAoBP,IAApB,CALoD,CAOpD;;AACA,SAAKQ,WAAL,GAAmBR,IAAnB,CARoD,CAUpD;AACA;;AACA,SAAKS,SAAL,GAAiBC,MAAM,CAACC,MAAP,CAAc,IAAd,CAAjB;AAEA,SAAKR,KAAL,GAAaA,KAAb;AACA,SAAKS,KAAL,GAAa,KAAb;AAEA,SAAKR,UAAL,GAAkBA,UAAU,KAAKS,SAAf,GAA2B,KAA3B,GAAmCT,UAArD;AAEA,SAAKC,IAAL,GAAYA,IAAZ,CAnBoD,CAqBpD;;AACA,SAAKC,QAAL,GAAgBA,QAAQ,KAAKO,SAAb,GAAyB,IAAzB,GAAgCP,QAAhD;AACD;AAED;AACF;AACA;AACA;;;;;WACE,sBAAc;AACZ,aAAON,IAAI,CAACc,OAAL,CAAa,KAAKd,IAAlB,EAAwBe,SAAxB,CAAkC,CAAlC,CAAP;AACD;;;WAED,oBAAY;AACV,aAAO,KAAKf,IAAZ;AACD;;;;;;AAGHgB,MAAM,CAACC,OAAP,GAAiBf,IAAjB","sourcesContent":["'use strict'\n\nconst path = require('path')\n\n/**\n * File object used for tracking files in `file-list.js`.\n */\nclass File {\n  constructor (path, mtime, doNotCache, type, isBinary) {\n    // used for serving (processed path, eg some/file.coffee -> some/file.coffee.js)\n    this.path = path\n\n    // original absolute path, id of the file\n    this.originalPath = path\n\n    // where the content is stored (processed)\n    this.contentPath = path\n\n    // encodings format {[encodingType]: encodedContent}\n    //   example: {gzip: <Buffer 1f 8b 08...>}\n    this.encodings = Object.create(null)\n\n    this.mtime = mtime\n    this.isUrl = false\n\n    this.doNotCache = doNotCache === undefined ? false : doNotCache\n\n    this.type = type\n\n    // Tri state: null means probe file for binary.\n    this.isBinary = isBinary === undefined ? null : isBinary\n  }\n\n  /**\n   * Detect type from the file extension.\n   * @returns {string} detected file type or empty string\n   */\n  detectType () {\n    return path.extname(this.path).substring(1)\n  }\n\n  toString () {\n    return this.path\n  }\n}\n\nmodule.exports = File\n"]},"metadata":{},"sourceType":"script"}