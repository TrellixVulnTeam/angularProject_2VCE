{"ast":null,"code":"/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n(function (factory) {\n  if (typeof module === \"object\" && typeof module.exports === \"object\") {\n    var v = factory(require, exports);\n    if (v !== undefined) module.exports = v;\n  } else if (typeof define === \"function\" && define.amd) {\n    define(\"@angular/compiler/src/compile_metadata\", [\"require\", \"exports\", \"@angular/compiler/src/aot/static_symbol\", \"@angular/compiler/src/util\"], factory);\n  }\n})(function (require, exports) {\n  \"use strict\";\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.templateJitUrl = exports.ngModuleJitUrl = exports.sharedStylesheetJitUrl = exports.templateSourceUrl = exports.flatten = exports.ProviderMeta = exports.TransitiveCompileNgModuleMetadata = exports.CompileNgModuleMetadata = exports.CompileShallowModuleMetadata = exports.CompilePipeMetadata = exports.CompileDirectiveMetadata = exports.CompileTemplateMetadata = exports.CompileStylesheetMetadata = exports.tokenReference = exports.tokenName = exports.CompileSummaryKind = exports.componentFactoryName = exports.hostViewClassName = exports.rendererTypeName = exports.viewClassName = exports.identifierModuleUrl = exports.identifierName = exports.sanitizeIdentifier = void 0;\n\n  var static_symbol_1 = require(\"@angular/compiler/src/aot/static_symbol\");\n\n  var util_1 = require(\"@angular/compiler/src/util\"); // group 0: \"[prop] or (event) or @trigger\"\n  // group 1: \"prop\" from \"[prop]\"\n  // group 2: \"event\" from \"(event)\"\n  // group 3: \"@trigger\" from \"@trigger\"\n\n\n  var HOST_REG_EXP = /^(?:(?:\\[([^\\]]+)\\])|(?:\\(([^\\)]+)\\)))|(\\@[-\\w]+)$/;\n\n  function sanitizeIdentifier(name) {\n    return name.replace(/\\W/g, '_');\n  }\n\n  exports.sanitizeIdentifier = sanitizeIdentifier;\n  var _anonymousTypeIndex = 0;\n\n  function identifierName(compileIdentifier) {\n    if (!compileIdentifier || !compileIdentifier.reference) {\n      return null;\n    }\n\n    var ref = compileIdentifier.reference;\n\n    if (ref instanceof static_symbol_1.StaticSymbol) {\n      return ref.name;\n    }\n\n    if (ref['__anonymousType']) {\n      return ref['__anonymousType'];\n    }\n\n    var identifier = util_1.stringify(ref);\n\n    if (identifier.indexOf('(') >= 0) {\n      // case: anonymous functions!\n      identifier = \"anonymous_\" + _anonymousTypeIndex++;\n      ref['__anonymousType'] = identifier;\n    } else {\n      identifier = sanitizeIdentifier(identifier);\n    }\n\n    return identifier;\n  }\n\n  exports.identifierName = identifierName;\n\n  function identifierModuleUrl(compileIdentifier) {\n    var ref = compileIdentifier.reference;\n\n    if (ref instanceof static_symbol_1.StaticSymbol) {\n      return ref.filePath;\n    } // Runtime type\n\n\n    return \"./\" + util_1.stringify(ref);\n  }\n\n  exports.identifierModuleUrl = identifierModuleUrl;\n\n  function viewClassName(compType, embeddedTemplateIndex) {\n    return \"View_\" + identifierName({\n      reference: compType\n    }) + \"_\" + embeddedTemplateIndex;\n  }\n\n  exports.viewClassName = viewClassName;\n\n  function rendererTypeName(compType) {\n    return \"RenderType_\" + identifierName({\n      reference: compType\n    });\n  }\n\n  exports.rendererTypeName = rendererTypeName;\n\n  function hostViewClassName(compType) {\n    return \"HostView_\" + identifierName({\n      reference: compType\n    });\n  }\n\n  exports.hostViewClassName = hostViewClassName;\n\n  function componentFactoryName(compType) {\n    return identifierName({\n      reference: compType\n    }) + \"NgFactory\";\n  }\n\n  exports.componentFactoryName = componentFactoryName;\n  var CompileSummaryKind;\n\n  (function (CompileSummaryKind) {\n    CompileSummaryKind[CompileSummaryKind[\"Pipe\"] = 0] = \"Pipe\";\n    CompileSummaryKind[CompileSummaryKind[\"Directive\"] = 1] = \"Directive\";\n    CompileSummaryKind[CompileSummaryKind[\"NgModule\"] = 2] = \"NgModule\";\n    CompileSummaryKind[CompileSummaryKind[\"Injectable\"] = 3] = \"Injectable\";\n  })(CompileSummaryKind = exports.CompileSummaryKind || (exports.CompileSummaryKind = {}));\n\n  function tokenName(token) {\n    return token.value != null ? sanitizeIdentifier(token.value) : identifierName(token.identifier);\n  }\n\n  exports.tokenName = tokenName;\n\n  function tokenReference(token) {\n    if (token.identifier != null) {\n      return token.identifier.reference;\n    } else {\n      return token.value;\n    }\n  }\n\n  exports.tokenReference = tokenReference;\n  /**\n   * Metadata about a stylesheet\n   */\n\n  var CompileStylesheetMetadata =\n  /** @class */\n  function () {\n    function CompileStylesheetMetadata(_a) {\n      var _b = _a === void 0 ? {} : _a,\n          moduleUrl = _b.moduleUrl,\n          styles = _b.styles,\n          styleUrls = _b.styleUrls;\n\n      this.moduleUrl = moduleUrl || null;\n      this.styles = _normalizeArray(styles);\n      this.styleUrls = _normalizeArray(styleUrls);\n    }\n\n    return CompileStylesheetMetadata;\n  }();\n\n  exports.CompileStylesheetMetadata = CompileStylesheetMetadata;\n  /**\n   * Metadata regarding compilation of a template.\n   */\n\n  var CompileTemplateMetadata =\n  /** @class */\n  function () {\n    function CompileTemplateMetadata(_a) {\n      var encapsulation = _a.encapsulation,\n          template = _a.template,\n          templateUrl = _a.templateUrl,\n          htmlAst = _a.htmlAst,\n          styles = _a.styles,\n          styleUrls = _a.styleUrls,\n          externalStylesheets = _a.externalStylesheets,\n          animations = _a.animations,\n          ngContentSelectors = _a.ngContentSelectors,\n          interpolation = _a.interpolation,\n          isInline = _a.isInline,\n          preserveWhitespaces = _a.preserveWhitespaces;\n      this.encapsulation = encapsulation;\n      this.template = template;\n      this.templateUrl = templateUrl;\n      this.htmlAst = htmlAst;\n      this.styles = _normalizeArray(styles);\n      this.styleUrls = _normalizeArray(styleUrls);\n      this.externalStylesheets = _normalizeArray(externalStylesheets);\n      this.animations = animations ? flatten(animations) : [];\n      this.ngContentSelectors = ngContentSelectors || [];\n\n      if (interpolation && interpolation.length != 2) {\n        throw new Error(\"'interpolation' should have a start and an end symbol.\");\n      }\n\n      this.interpolation = interpolation;\n      this.isInline = isInline;\n      this.preserveWhitespaces = preserveWhitespaces;\n    }\n\n    CompileTemplateMetadata.prototype.toSummary = function () {\n      return {\n        ngContentSelectors: this.ngContentSelectors,\n        encapsulation: this.encapsulation,\n        styles: this.styles,\n        animations: this.animations\n      };\n    };\n\n    return CompileTemplateMetadata;\n  }();\n\n  exports.CompileTemplateMetadata = CompileTemplateMetadata;\n  /**\n   * Metadata regarding compilation of a directive.\n   */\n\n  var CompileDirectiveMetadata =\n  /** @class */\n  function () {\n    function CompileDirectiveMetadata(_a) {\n      var isHost = _a.isHost,\n          type = _a.type,\n          isComponent = _a.isComponent,\n          selector = _a.selector,\n          exportAs = _a.exportAs,\n          changeDetection = _a.changeDetection,\n          inputs = _a.inputs,\n          outputs = _a.outputs,\n          hostListeners = _a.hostListeners,\n          hostProperties = _a.hostProperties,\n          hostAttributes = _a.hostAttributes,\n          providers = _a.providers,\n          viewProviders = _a.viewProviders,\n          queries = _a.queries,\n          guards = _a.guards,\n          viewQueries = _a.viewQueries,\n          entryComponents = _a.entryComponents,\n          template = _a.template,\n          componentViewType = _a.componentViewType,\n          rendererType = _a.rendererType,\n          componentFactory = _a.componentFactory;\n      this.isHost = !!isHost;\n      this.type = type;\n      this.isComponent = isComponent;\n      this.selector = selector;\n      this.exportAs = exportAs;\n      this.changeDetection = changeDetection;\n      this.inputs = inputs;\n      this.outputs = outputs;\n      this.hostListeners = hostListeners;\n      this.hostProperties = hostProperties;\n      this.hostAttributes = hostAttributes;\n      this.providers = _normalizeArray(providers);\n      this.viewProviders = _normalizeArray(viewProviders);\n      this.queries = _normalizeArray(queries);\n      this.guards = guards;\n      this.viewQueries = _normalizeArray(viewQueries);\n      this.entryComponents = _normalizeArray(entryComponents);\n      this.template = template;\n      this.componentViewType = componentViewType;\n      this.rendererType = rendererType;\n      this.componentFactory = componentFactory;\n    }\n\n    CompileDirectiveMetadata.create = function (_a) {\n      var isHost = _a.isHost,\n          type = _a.type,\n          isComponent = _a.isComponent,\n          selector = _a.selector,\n          exportAs = _a.exportAs,\n          changeDetection = _a.changeDetection,\n          inputs = _a.inputs,\n          outputs = _a.outputs,\n          host = _a.host,\n          providers = _a.providers,\n          viewProviders = _a.viewProviders,\n          queries = _a.queries,\n          guards = _a.guards,\n          viewQueries = _a.viewQueries,\n          entryComponents = _a.entryComponents,\n          template = _a.template,\n          componentViewType = _a.componentViewType,\n          rendererType = _a.rendererType,\n          componentFactory = _a.componentFactory;\n      var hostListeners = {};\n      var hostProperties = {};\n      var hostAttributes = {};\n\n      if (host != null) {\n        Object.keys(host).forEach(function (key) {\n          var value = host[key];\n          var matches = key.match(HOST_REG_EXP);\n\n          if (matches === null) {\n            hostAttributes[key] = value;\n          } else if (matches[1] != null) {\n            hostProperties[matches[1]] = value;\n          } else if (matches[2] != null) {\n            hostListeners[matches[2]] = value;\n          }\n        });\n      }\n\n      var inputsMap = {};\n\n      if (inputs != null) {\n        inputs.forEach(function (bindConfig) {\n          // canonical syntax: `dirProp: elProp`\n          // if there is no `:`, use dirProp = elProp\n          var parts = util_1.splitAtColon(bindConfig, [bindConfig, bindConfig]);\n          inputsMap[parts[0]] = parts[1];\n        });\n      }\n\n      var outputsMap = {};\n\n      if (outputs != null) {\n        outputs.forEach(function (bindConfig) {\n          // canonical syntax: `dirProp: elProp`\n          // if there is no `:`, use dirProp = elProp\n          var parts = util_1.splitAtColon(bindConfig, [bindConfig, bindConfig]);\n          outputsMap[parts[0]] = parts[1];\n        });\n      }\n\n      return new CompileDirectiveMetadata({\n        isHost: isHost,\n        type: type,\n        isComponent: !!isComponent,\n        selector: selector,\n        exportAs: exportAs,\n        changeDetection: changeDetection,\n        inputs: inputsMap,\n        outputs: outputsMap,\n        hostListeners: hostListeners,\n        hostProperties: hostProperties,\n        hostAttributes: hostAttributes,\n        providers: providers,\n        viewProviders: viewProviders,\n        queries: queries,\n        guards: guards,\n        viewQueries: viewQueries,\n        entryComponents: entryComponents,\n        template: template,\n        componentViewType: componentViewType,\n        rendererType: rendererType,\n        componentFactory: componentFactory\n      });\n    };\n\n    CompileDirectiveMetadata.prototype.toSummary = function () {\n      return {\n        summaryKind: CompileSummaryKind.Directive,\n        type: this.type,\n        isComponent: this.isComponent,\n        selector: this.selector,\n        exportAs: this.exportAs,\n        inputs: this.inputs,\n        outputs: this.outputs,\n        hostListeners: this.hostListeners,\n        hostProperties: this.hostProperties,\n        hostAttributes: this.hostAttributes,\n        providers: this.providers,\n        viewProviders: this.viewProviders,\n        queries: this.queries,\n        guards: this.guards,\n        viewQueries: this.viewQueries,\n        entryComponents: this.entryComponents,\n        changeDetection: this.changeDetection,\n        template: this.template && this.template.toSummary(),\n        componentViewType: this.componentViewType,\n        rendererType: this.rendererType,\n        componentFactory: this.componentFactory\n      };\n    };\n\n    return CompileDirectiveMetadata;\n  }();\n\n  exports.CompileDirectiveMetadata = CompileDirectiveMetadata;\n\n  var CompilePipeMetadata =\n  /** @class */\n  function () {\n    function CompilePipeMetadata(_a) {\n      var type = _a.type,\n          name = _a.name,\n          pure = _a.pure;\n      this.type = type;\n      this.name = name;\n      this.pure = !!pure;\n    }\n\n    CompilePipeMetadata.prototype.toSummary = function () {\n      return {\n        summaryKind: CompileSummaryKind.Pipe,\n        type: this.type,\n        name: this.name,\n        pure: this.pure\n      };\n    };\n\n    return CompilePipeMetadata;\n  }();\n\n  exports.CompilePipeMetadata = CompilePipeMetadata;\n\n  var CompileShallowModuleMetadata =\n  /** @class */\n  function () {\n    function CompileShallowModuleMetadata() {}\n\n    return CompileShallowModuleMetadata;\n  }();\n\n  exports.CompileShallowModuleMetadata = CompileShallowModuleMetadata;\n  /**\n   * Metadata regarding compilation of a module.\n   */\n\n  var CompileNgModuleMetadata =\n  /** @class */\n  function () {\n    function CompileNgModuleMetadata(_a) {\n      var type = _a.type,\n          providers = _a.providers,\n          declaredDirectives = _a.declaredDirectives,\n          exportedDirectives = _a.exportedDirectives,\n          declaredPipes = _a.declaredPipes,\n          exportedPipes = _a.exportedPipes,\n          entryComponents = _a.entryComponents,\n          bootstrapComponents = _a.bootstrapComponents,\n          importedModules = _a.importedModules,\n          exportedModules = _a.exportedModules,\n          schemas = _a.schemas,\n          transitiveModule = _a.transitiveModule,\n          id = _a.id;\n      this.type = type || null;\n      this.declaredDirectives = _normalizeArray(declaredDirectives);\n      this.exportedDirectives = _normalizeArray(exportedDirectives);\n      this.declaredPipes = _normalizeArray(declaredPipes);\n      this.exportedPipes = _normalizeArray(exportedPipes);\n      this.providers = _normalizeArray(providers);\n      this.entryComponents = _normalizeArray(entryComponents);\n      this.bootstrapComponents = _normalizeArray(bootstrapComponents);\n      this.importedModules = _normalizeArray(importedModules);\n      this.exportedModules = _normalizeArray(exportedModules);\n      this.schemas = _normalizeArray(schemas);\n      this.id = id || null;\n      this.transitiveModule = transitiveModule || null;\n    }\n\n    CompileNgModuleMetadata.prototype.toSummary = function () {\n      var module = this.transitiveModule;\n      return {\n        summaryKind: CompileSummaryKind.NgModule,\n        type: this.type,\n        entryComponents: module.entryComponents,\n        providers: module.providers,\n        modules: module.modules,\n        exportedDirectives: module.exportedDirectives,\n        exportedPipes: module.exportedPipes\n      };\n    };\n\n    return CompileNgModuleMetadata;\n  }();\n\n  exports.CompileNgModuleMetadata = CompileNgModuleMetadata;\n\n  var TransitiveCompileNgModuleMetadata =\n  /** @class */\n  function () {\n    function TransitiveCompileNgModuleMetadata() {\n      this.directivesSet = new Set();\n      this.directives = [];\n      this.exportedDirectivesSet = new Set();\n      this.exportedDirectives = [];\n      this.pipesSet = new Set();\n      this.pipes = [];\n      this.exportedPipesSet = new Set();\n      this.exportedPipes = [];\n      this.modulesSet = new Set();\n      this.modules = [];\n      this.entryComponentsSet = new Set();\n      this.entryComponents = [];\n      this.providers = [];\n    }\n\n    TransitiveCompileNgModuleMetadata.prototype.addProvider = function (provider, module) {\n      this.providers.push({\n        provider: provider,\n        module: module\n      });\n    };\n\n    TransitiveCompileNgModuleMetadata.prototype.addDirective = function (id) {\n      if (!this.directivesSet.has(id.reference)) {\n        this.directivesSet.add(id.reference);\n        this.directives.push(id);\n      }\n    };\n\n    TransitiveCompileNgModuleMetadata.prototype.addExportedDirective = function (id) {\n      if (!this.exportedDirectivesSet.has(id.reference)) {\n        this.exportedDirectivesSet.add(id.reference);\n        this.exportedDirectives.push(id);\n      }\n    };\n\n    TransitiveCompileNgModuleMetadata.prototype.addPipe = function (id) {\n      if (!this.pipesSet.has(id.reference)) {\n        this.pipesSet.add(id.reference);\n        this.pipes.push(id);\n      }\n    };\n\n    TransitiveCompileNgModuleMetadata.prototype.addExportedPipe = function (id) {\n      if (!this.exportedPipesSet.has(id.reference)) {\n        this.exportedPipesSet.add(id.reference);\n        this.exportedPipes.push(id);\n      }\n    };\n\n    TransitiveCompileNgModuleMetadata.prototype.addModule = function (id) {\n      if (!this.modulesSet.has(id.reference)) {\n        this.modulesSet.add(id.reference);\n        this.modules.push(id);\n      }\n    };\n\n    TransitiveCompileNgModuleMetadata.prototype.addEntryComponent = function (ec) {\n      if (!this.entryComponentsSet.has(ec.componentType)) {\n        this.entryComponentsSet.add(ec.componentType);\n        this.entryComponents.push(ec);\n      }\n    };\n\n    return TransitiveCompileNgModuleMetadata;\n  }();\n\n  exports.TransitiveCompileNgModuleMetadata = TransitiveCompileNgModuleMetadata;\n\n  function _normalizeArray(obj) {\n    return obj || [];\n  }\n\n  var ProviderMeta =\n  /** @class */\n  function () {\n    function ProviderMeta(token, _a) {\n      var useClass = _a.useClass,\n          useValue = _a.useValue,\n          useExisting = _a.useExisting,\n          useFactory = _a.useFactory,\n          deps = _a.deps,\n          multi = _a.multi;\n      this.token = token;\n      this.useClass = useClass || null;\n      this.useValue = useValue;\n      this.useExisting = useExisting;\n      this.useFactory = useFactory || null;\n      this.dependencies = deps || null;\n      this.multi = !!multi;\n    }\n\n    return ProviderMeta;\n  }();\n\n  exports.ProviderMeta = ProviderMeta;\n\n  function flatten(list) {\n    return list.reduce(function (flat, item) {\n      var flatItem = Array.isArray(item) ? flatten(item) : item;\n      return flat.concat(flatItem);\n    }, []);\n  }\n\n  exports.flatten = flatten;\n\n  function jitSourceUrl(url) {\n    // Note: We need 3 \"/\" so that ng shows up as a separate domain\n    // in the chrome dev tools.\n    return url.replace(/(\\w+:\\/\\/[\\w:-]+)?(\\/+)?/, 'ng:///');\n  }\n\n  function templateSourceUrl(ngModuleType, compMeta, templateMeta) {\n    var url;\n\n    if (templateMeta.isInline) {\n      if (compMeta.type.reference instanceof static_symbol_1.StaticSymbol) {\n        // Note: a .ts file might contain multiple components with inline templates,\n        // so we need to give them unique urls, as these will be used for sourcemaps.\n        url = compMeta.type.reference.filePath + \".\" + compMeta.type.reference.name + \".html\";\n      } else {\n        url = identifierName(ngModuleType) + \"/\" + identifierName(compMeta.type) + \".html\";\n      }\n    } else {\n      url = templateMeta.templateUrl;\n    }\n\n    return compMeta.type.reference instanceof static_symbol_1.StaticSymbol ? url : jitSourceUrl(url);\n  }\n\n  exports.templateSourceUrl = templateSourceUrl;\n\n  function sharedStylesheetJitUrl(meta, id) {\n    var pathParts = meta.moduleUrl.split(/\\/\\\\/g);\n    var baseName = pathParts[pathParts.length - 1];\n    return jitSourceUrl(\"css/\" + id + baseName + \".ngstyle.js\");\n  }\n\n  exports.sharedStylesheetJitUrl = sharedStylesheetJitUrl;\n\n  function ngModuleJitUrl(moduleMeta) {\n    return jitSourceUrl(identifierName(moduleMeta.type) + \"/module.ngfactory.js\");\n  }\n\n  exports.ngModuleJitUrl = ngModuleJitUrl;\n\n  function templateJitUrl(ngModuleType, compMeta) {\n    return jitSourceUrl(identifierName(ngModuleType) + \"/\" + identifierName(compMeta.type) + \".ngfactory.js\");\n  }\n\n  exports.templateJitUrl = templateJitUrl;\n});","map":{"version":3,"sources":["../../../../../../packages/compiler/src/compile_metadata.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {StaticSymbol} from './aot/static_symbol';\nimport {ChangeDetectionStrategy, SchemaMetadata, Type, ViewEncapsulation} from './core';\nimport {LifecycleHooks} from './lifecycle_reflector';\nimport {ParseTreeResult as HtmlParseTreeResult} from './ml_parser/parser';\nimport {splitAtColon, stringify} from './util';\n\n// group 0: \"[prop] or (event) or @trigger\"\n// group 1: \"prop\" from \"[prop]\"\n// group 2: \"event\" from \"(event)\"\n// group 3: \"@trigger\" from \"@trigger\"\nconst HOST_REG_EXP = /^(?:(?:\\[([^\\]]+)\\])|(?:\\(([^\\)]+)\\)))|(\\@[-\\w]+)$/;\n\nexport function sanitizeIdentifier(name: string): string {\n  return name.replace(/\\W/g, '_');\n}\n\nlet _anonymousTypeIndex = 0;\n\nexport function identifierName(compileIdentifier: CompileIdentifierMetadata|null|undefined): string|\n    null {\n  if (!compileIdentifier || !compileIdentifier.reference) {\n    return null;\n  }\n  const ref = compileIdentifier.reference;\n  if (ref instanceof StaticSymbol) {\n    return ref.name;\n  }\n  if (ref['__anonymousType']) {\n    return ref['__anonymousType'];\n  }\n  let identifier = stringify(ref);\n  if (identifier.indexOf('(') >= 0) {\n    // case: anonymous functions!\n    identifier = `anonymous_${_anonymousTypeIndex++}`;\n    ref['__anonymousType'] = identifier;\n  } else {\n    identifier = sanitizeIdentifier(identifier);\n  }\n  return identifier;\n}\n\nexport function identifierModuleUrl(compileIdentifier: CompileIdentifierMetadata): string {\n  const ref = compileIdentifier.reference;\n  if (ref instanceof StaticSymbol) {\n    return ref.filePath;\n  }\n  // Runtime type\n  return `./${stringify(ref)}`;\n}\n\nexport function viewClassName(compType: any, embeddedTemplateIndex: number): string {\n  return `View_${identifierName({reference: compType})}_${embeddedTemplateIndex}`;\n}\n\nexport function rendererTypeName(compType: any): string {\n  return `RenderType_${identifierName({reference: compType})}`;\n}\n\nexport function hostViewClassName(compType: any): string {\n  return `HostView_${identifierName({reference: compType})}`;\n}\n\nexport function componentFactoryName(compType: any): string {\n  return `${identifierName({reference: compType})}NgFactory`;\n}\n\nexport interface ProxyClass {\n  setDelegate(delegate: any): void;\n}\n\nexport interface CompileIdentifierMetadata {\n  reference: any;\n}\n\nexport enum CompileSummaryKind {\n  Pipe,\n  Directive,\n  NgModule,\n  Injectable\n}\n\n/**\n * A CompileSummary is the data needed to use a directive / pipe / module\n * in other modules / components. However, this data is not enough to compile\n * the directive / module itself.\n */\nexport interface CompileTypeSummary {\n  summaryKind: CompileSummaryKind|null;\n  type: CompileTypeMetadata;\n}\n\nexport interface CompileDiDependencyMetadata {\n  isAttribute?: boolean;\n  isSelf?: boolean;\n  isHost?: boolean;\n  isSkipSelf?: boolean;\n  isOptional?: boolean;\n  isValue?: boolean;\n  token?: CompileTokenMetadata;\n  value?: any;\n}\n\nexport interface CompileProviderMetadata {\n  token: CompileTokenMetadata;\n  useClass?: CompileTypeMetadata;\n  useValue?: any;\n  useExisting?: CompileTokenMetadata;\n  useFactory?: CompileFactoryMetadata;\n  deps?: CompileDiDependencyMetadata[];\n  multi?: boolean;\n}\n\nexport interface CompileFactoryMetadata extends CompileIdentifierMetadata {\n  diDeps: CompileDiDependencyMetadata[];\n  reference: any;\n}\n\nexport function tokenName(token: CompileTokenMetadata) {\n  return token.value != null ? sanitizeIdentifier(token.value) : identifierName(token.identifier);\n}\n\nexport function tokenReference(token: CompileTokenMetadata) {\n  if (token.identifier != null) {\n    return token.identifier.reference;\n  } else {\n    return token.value;\n  }\n}\n\nexport interface CompileTokenMetadata {\n  value?: any;\n  identifier?: CompileIdentifierMetadata|CompileTypeMetadata;\n}\n\nexport interface CompileInjectableMetadata {\n  symbol: StaticSymbol;\n  type: CompileTypeMetadata;\n\n  providedIn?: StaticSymbol;\n\n  useValue?: any;\n  useClass?: StaticSymbol;\n  useExisting?: StaticSymbol;\n  useFactory?: StaticSymbol;\n  deps?: any[];\n}\n\n/**\n * Metadata regarding compilation of a type.\n */\nexport interface CompileTypeMetadata extends CompileIdentifierMetadata {\n  diDeps: CompileDiDependencyMetadata[];\n  lifecycleHooks: LifecycleHooks[];\n  reference: any;\n}\n\nexport interface CompileQueryMetadata {\n  selectors: Array<CompileTokenMetadata>;\n  descendants: boolean;\n  first: boolean;\n  propertyName: string;\n  read: CompileTokenMetadata;\n  static?: boolean;\n  emitDistinctChangesOnly?: boolean;\n}\n\n/**\n * Metadata about a stylesheet\n */\nexport class CompileStylesheetMetadata {\n  moduleUrl: string|null;\n  styles: string[];\n  styleUrls: string[];\n  constructor(\n      {moduleUrl, styles, styleUrls}:\n          {moduleUrl?: string, styles?: string[], styleUrls?: string[]} = {}) {\n    this.moduleUrl = moduleUrl || null;\n    this.styles = _normalizeArray(styles);\n    this.styleUrls = _normalizeArray(styleUrls);\n  }\n}\n\n/**\n * Summary Metadata regarding compilation of a template.\n */\nexport interface CompileTemplateSummary {\n  ngContentSelectors: string[];\n  encapsulation: ViewEncapsulation|null;\n  styles: string[];\n  animations: any[]|null;\n}\n\n/**\n * Metadata regarding compilation of a template.\n */\nexport class CompileTemplateMetadata {\n  encapsulation: ViewEncapsulation|null;\n  template: string|null;\n  templateUrl: string|null;\n  htmlAst: HtmlParseTreeResult|null;\n  isInline: boolean;\n  styles: string[];\n  styleUrls: string[];\n  externalStylesheets: CompileStylesheetMetadata[];\n  animations: any[];\n  ngContentSelectors: string[];\n  interpolation: [string, string]|null;\n  preserveWhitespaces: boolean;\n  constructor({\n    encapsulation,\n    template,\n    templateUrl,\n    htmlAst,\n    styles,\n    styleUrls,\n    externalStylesheets,\n    animations,\n    ngContentSelectors,\n    interpolation,\n    isInline,\n    preserveWhitespaces\n  }: {\n    encapsulation: ViewEncapsulation|null,\n    template: string|null,\n    templateUrl: string|null,\n    htmlAst: HtmlParseTreeResult|null,\n    styles: string[],\n    styleUrls: string[],\n    externalStylesheets: CompileStylesheetMetadata[],\n    ngContentSelectors: string[],\n    animations: any[],\n    interpolation: [string, string]|null,\n    isInline: boolean,\n    preserveWhitespaces: boolean\n  }) {\n    this.encapsulation = encapsulation;\n    this.template = template;\n    this.templateUrl = templateUrl;\n    this.htmlAst = htmlAst;\n    this.styles = _normalizeArray(styles);\n    this.styleUrls = _normalizeArray(styleUrls);\n    this.externalStylesheets = _normalizeArray(externalStylesheets);\n    this.animations = animations ? flatten(animations) : [];\n    this.ngContentSelectors = ngContentSelectors || [];\n    if (interpolation && interpolation.length != 2) {\n      throw new Error(`'interpolation' should have a start and an end symbol.`);\n    }\n    this.interpolation = interpolation;\n    this.isInline = isInline;\n    this.preserveWhitespaces = preserveWhitespaces;\n  }\n\n  toSummary(): CompileTemplateSummary {\n    return {\n      ngContentSelectors: this.ngContentSelectors,\n      encapsulation: this.encapsulation,\n      styles: this.styles,\n      animations: this.animations\n    };\n  }\n}\n\nexport interface CompileEntryComponentMetadata {\n  componentType: any;\n  componentFactory: StaticSymbol|object;\n}\n\n// Note: This should only use interfaces as nested data types\n// as we need to be able to serialize this from/to JSON!\nexport interface CompileDirectiveSummary extends CompileTypeSummary {\n  type: CompileTypeMetadata;\n  isComponent: boolean;\n  selector: string|null;\n  exportAs: string|null;\n  inputs: {[key: string]: string};\n  outputs: {[key: string]: string};\n  hostListeners: {[key: string]: string};\n  hostProperties: {[key: string]: string};\n  hostAttributes: {[key: string]: string};\n  providers: CompileProviderMetadata[];\n  viewProviders: CompileProviderMetadata[];\n  queries: CompileQueryMetadata[];\n  guards: {[key: string]: any};\n  viewQueries: CompileQueryMetadata[];\n  entryComponents: CompileEntryComponentMetadata[];\n  changeDetection: ChangeDetectionStrategy|null;\n  template: CompileTemplateSummary|null;\n  componentViewType: StaticSymbol|ProxyClass|null;\n  rendererType: StaticSymbol|object|null;\n  componentFactory: StaticSymbol|object|null;\n}\n\n/**\n * Metadata regarding compilation of a directive.\n */\nexport class CompileDirectiveMetadata {\n  static create({\n    isHost,\n    type,\n    isComponent,\n    selector,\n    exportAs,\n    changeDetection,\n    inputs,\n    outputs,\n    host,\n    providers,\n    viewProviders,\n    queries,\n    guards,\n    viewQueries,\n    entryComponents,\n    template,\n    componentViewType,\n    rendererType,\n    componentFactory\n  }: {\n    isHost: boolean,\n    type: CompileTypeMetadata,\n    isComponent: boolean,\n    selector: string|null,\n    exportAs: string|null,\n    changeDetection: ChangeDetectionStrategy|null,\n    inputs: string[],\n    outputs: string[],\n    host: {[key: string]: string},\n    providers: CompileProviderMetadata[],\n    viewProviders: CompileProviderMetadata[],\n    queries: CompileQueryMetadata[],\n    guards: {[key: string]: any};\n    viewQueries: CompileQueryMetadata[],\n    entryComponents: CompileEntryComponentMetadata[],\n    template: CompileTemplateMetadata,\n    componentViewType: StaticSymbol|ProxyClass|null,\n    rendererType: StaticSymbol|object|null,\n    componentFactory: StaticSymbol|object|null,\n  }): CompileDirectiveMetadata {\n    const hostListeners: {[key: string]: string} = {};\n    const hostProperties: {[key: string]: string} = {};\n    const hostAttributes: {[key: string]: string} = {};\n    if (host != null) {\n      Object.keys(host).forEach(key => {\n        const value = host[key];\n        const matches = key.match(HOST_REG_EXP);\n        if (matches === null) {\n          hostAttributes[key] = value;\n        } else if (matches[1] != null) {\n          hostProperties[matches[1]] = value;\n        } else if (matches[2] != null) {\n          hostListeners[matches[2]] = value;\n        }\n      });\n    }\n    const inputsMap: {[key: string]: string} = {};\n    if (inputs != null) {\n      inputs.forEach((bindConfig: string) => {\n        // canonical syntax: `dirProp: elProp`\n        // if there is no `:`, use dirProp = elProp\n        const parts = splitAtColon(bindConfig, [bindConfig, bindConfig]);\n        inputsMap[parts[0]] = parts[1];\n      });\n    }\n    const outputsMap: {[key: string]: string} = {};\n    if (outputs != null) {\n      outputs.forEach((bindConfig: string) => {\n        // canonical syntax: `dirProp: elProp`\n        // if there is no `:`, use dirProp = elProp\n        const parts = splitAtColon(bindConfig, [bindConfig, bindConfig]);\n        outputsMap[parts[0]] = parts[1];\n      });\n    }\n\n    return new CompileDirectiveMetadata({\n      isHost,\n      type,\n      isComponent: !!isComponent,\n      selector,\n      exportAs,\n      changeDetection,\n      inputs: inputsMap,\n      outputs: outputsMap,\n      hostListeners,\n      hostProperties,\n      hostAttributes,\n      providers,\n      viewProviders,\n      queries,\n      guards,\n      viewQueries,\n      entryComponents,\n      template,\n      componentViewType,\n      rendererType,\n      componentFactory,\n    });\n  }\n  isHost: boolean;\n  type: CompileTypeMetadata;\n  isComponent: boolean;\n  selector: string|null;\n  exportAs: string|null;\n  changeDetection: ChangeDetectionStrategy|null;\n  inputs: {[key: string]: string};\n  outputs: {[key: string]: string};\n  hostListeners: {[key: string]: string};\n  hostProperties: {[key: string]: string};\n  hostAttributes: {[key: string]: string};\n  providers: CompileProviderMetadata[];\n  viewProviders: CompileProviderMetadata[];\n  queries: CompileQueryMetadata[];\n  guards: {[key: string]: any};\n  viewQueries: CompileQueryMetadata[];\n  entryComponents: CompileEntryComponentMetadata[];\n\n  template: CompileTemplateMetadata|null;\n\n  componentViewType: StaticSymbol|ProxyClass|null;\n  rendererType: StaticSymbol|object|null;\n  componentFactory: StaticSymbol|object|null;\n\n  constructor({\n    isHost,\n    type,\n    isComponent,\n    selector,\n    exportAs,\n    changeDetection,\n    inputs,\n    outputs,\n    hostListeners,\n    hostProperties,\n    hostAttributes,\n    providers,\n    viewProviders,\n    queries,\n    guards,\n    viewQueries,\n    entryComponents,\n    template,\n    componentViewType,\n    rendererType,\n    componentFactory\n  }: {\n    isHost: boolean,\n    type: CompileTypeMetadata,\n    isComponent: boolean,\n    selector: string|null,\n    exportAs: string|null,\n    changeDetection: ChangeDetectionStrategy|null,\n    inputs: {[key: string]: string},\n    outputs: {[key: string]: string},\n    hostListeners: {[key: string]: string},\n    hostProperties: {[key: string]: string},\n    hostAttributes: {[key: string]: string},\n    providers: CompileProviderMetadata[],\n    viewProviders: CompileProviderMetadata[],\n    queries: CompileQueryMetadata[],\n    guards: {[key: string]: any},\n    viewQueries: CompileQueryMetadata[],\n    entryComponents: CompileEntryComponentMetadata[],\n    template: CompileTemplateMetadata|null,\n    componentViewType: StaticSymbol|ProxyClass|null,\n    rendererType: StaticSymbol|object|null,\n    componentFactory: StaticSymbol|object|null,\n  }) {\n    this.isHost = !!isHost;\n    this.type = type;\n    this.isComponent = isComponent;\n    this.selector = selector;\n    this.exportAs = exportAs;\n    this.changeDetection = changeDetection;\n    this.inputs = inputs;\n    this.outputs = outputs;\n    this.hostListeners = hostListeners;\n    this.hostProperties = hostProperties;\n    this.hostAttributes = hostAttributes;\n    this.providers = _normalizeArray(providers);\n    this.viewProviders = _normalizeArray(viewProviders);\n    this.queries = _normalizeArray(queries);\n    this.guards = guards;\n    this.viewQueries = _normalizeArray(viewQueries);\n    this.entryComponents = _normalizeArray(entryComponents);\n    this.template = template;\n\n    this.componentViewType = componentViewType;\n    this.rendererType = rendererType;\n    this.componentFactory = componentFactory;\n  }\n\n  toSummary(): CompileDirectiveSummary {\n    return {\n      summaryKind: CompileSummaryKind.Directive,\n      type: this.type,\n      isComponent: this.isComponent,\n      selector: this.selector,\n      exportAs: this.exportAs,\n      inputs: this.inputs,\n      outputs: this.outputs,\n      hostListeners: this.hostListeners,\n      hostProperties: this.hostProperties,\n      hostAttributes: this.hostAttributes,\n      providers: this.providers,\n      viewProviders: this.viewProviders,\n      queries: this.queries,\n      guards: this.guards,\n      viewQueries: this.viewQueries,\n      entryComponents: this.entryComponents,\n      changeDetection: this.changeDetection,\n      template: this.template && this.template.toSummary(),\n      componentViewType: this.componentViewType,\n      rendererType: this.rendererType,\n      componentFactory: this.componentFactory\n    };\n  }\n}\n\nexport interface CompilePipeSummary extends CompileTypeSummary {\n  type: CompileTypeMetadata;\n  name: string;\n  pure: boolean;\n}\n\nexport class CompilePipeMetadata {\n  type: CompileTypeMetadata;\n  name: string;\n  pure: boolean;\n\n  constructor({type, name, pure}: {\n    type: CompileTypeMetadata,\n    name: string,\n    pure: boolean,\n  }) {\n    this.type = type;\n    this.name = name;\n    this.pure = !!pure;\n  }\n\n  toSummary(): CompilePipeSummary {\n    return {\n      summaryKind: CompileSummaryKind.Pipe,\n      type: this.type,\n      name: this.name,\n      pure: this.pure\n    };\n  }\n}\n\n// Note: This should only use interfaces as nested data types\n// as we need to be able to serialize this from/to JSON!\nexport interface CompileNgModuleSummary extends CompileTypeSummary {\n  type: CompileTypeMetadata;\n\n  // Note: This is transitive over the exported modules.\n  exportedDirectives: CompileIdentifierMetadata[];\n  // Note: This is transitive over the exported modules.\n  exportedPipes: CompileIdentifierMetadata[];\n\n  // Note: This is transitive.\n  entryComponents: CompileEntryComponentMetadata[];\n  // Note: This is transitive.\n  providers: {provider: CompileProviderMetadata, module: CompileIdentifierMetadata}[];\n  // Note: This is transitive.\n  modules: CompileTypeMetadata[];\n}\n\nexport class CompileShallowModuleMetadata {\n  // TODO(issue/24571): remove '!'.\n  type!: CompileTypeMetadata;\n\n  rawExports: any;\n  rawImports: any;\n  rawProviders: any;\n}\n\n/**\n * Metadata regarding compilation of a module.\n */\nexport class CompileNgModuleMetadata {\n  type: CompileTypeMetadata;\n  declaredDirectives: CompileIdentifierMetadata[];\n  exportedDirectives: CompileIdentifierMetadata[];\n  declaredPipes: CompileIdentifierMetadata[];\n\n  exportedPipes: CompileIdentifierMetadata[];\n  entryComponents: CompileEntryComponentMetadata[];\n  bootstrapComponents: CompileIdentifierMetadata[];\n  providers: CompileProviderMetadata[];\n\n  importedModules: CompileNgModuleSummary[];\n  exportedModules: CompileNgModuleSummary[];\n  schemas: SchemaMetadata[];\n  id: string|null;\n\n  transitiveModule: TransitiveCompileNgModuleMetadata;\n\n  constructor({\n    type,\n    providers,\n    declaredDirectives,\n    exportedDirectives,\n    declaredPipes,\n    exportedPipes,\n    entryComponents,\n    bootstrapComponents,\n    importedModules,\n    exportedModules,\n    schemas,\n    transitiveModule,\n    id\n  }: {\n    type: CompileTypeMetadata,\n    providers: CompileProviderMetadata[],\n    declaredDirectives: CompileIdentifierMetadata[],\n    exportedDirectives: CompileIdentifierMetadata[],\n    declaredPipes: CompileIdentifierMetadata[],\n    exportedPipes: CompileIdentifierMetadata[],\n    entryComponents: CompileEntryComponentMetadata[],\n    bootstrapComponents: CompileIdentifierMetadata[],\n    importedModules: CompileNgModuleSummary[],\n    exportedModules: CompileNgModuleSummary[],\n    transitiveModule: TransitiveCompileNgModuleMetadata,\n    schemas: SchemaMetadata[],\n    id: string|null\n  }) {\n    this.type = type || null;\n    this.declaredDirectives = _normalizeArray(declaredDirectives);\n    this.exportedDirectives = _normalizeArray(exportedDirectives);\n    this.declaredPipes = _normalizeArray(declaredPipes);\n    this.exportedPipes = _normalizeArray(exportedPipes);\n    this.providers = _normalizeArray(providers);\n    this.entryComponents = _normalizeArray(entryComponents);\n    this.bootstrapComponents = _normalizeArray(bootstrapComponents);\n    this.importedModules = _normalizeArray(importedModules);\n    this.exportedModules = _normalizeArray(exportedModules);\n    this.schemas = _normalizeArray(schemas);\n    this.id = id || null;\n    this.transitiveModule = transitiveModule || null;\n  }\n\n  toSummary(): CompileNgModuleSummary {\n    const module = this.transitiveModule!;\n    return {\n      summaryKind: CompileSummaryKind.NgModule,\n      type: this.type,\n      entryComponents: module.entryComponents,\n      providers: module.providers,\n      modules: module.modules,\n      exportedDirectives: module.exportedDirectives,\n      exportedPipes: module.exportedPipes\n    };\n  }\n}\n\nexport class TransitiveCompileNgModuleMetadata {\n  directivesSet = new Set<any>();\n  directives: CompileIdentifierMetadata[] = [];\n  exportedDirectivesSet = new Set<any>();\n  exportedDirectives: CompileIdentifierMetadata[] = [];\n  pipesSet = new Set<any>();\n  pipes: CompileIdentifierMetadata[] = [];\n  exportedPipesSet = new Set<any>();\n  exportedPipes: CompileIdentifierMetadata[] = [];\n  modulesSet = new Set<any>();\n  modules: CompileTypeMetadata[] = [];\n  entryComponentsSet = new Set<any>();\n  entryComponents: CompileEntryComponentMetadata[] = [];\n\n  providers: {provider: CompileProviderMetadata, module: CompileIdentifierMetadata}[] = [];\n\n  addProvider(provider: CompileProviderMetadata, module: CompileIdentifierMetadata) {\n    this.providers.push({provider: provider, module: module});\n  }\n\n  addDirective(id: CompileIdentifierMetadata) {\n    if (!this.directivesSet.has(id.reference)) {\n      this.directivesSet.add(id.reference);\n      this.directives.push(id);\n    }\n  }\n  addExportedDirective(id: CompileIdentifierMetadata) {\n    if (!this.exportedDirectivesSet.has(id.reference)) {\n      this.exportedDirectivesSet.add(id.reference);\n      this.exportedDirectives.push(id);\n    }\n  }\n  addPipe(id: CompileIdentifierMetadata) {\n    if (!this.pipesSet.has(id.reference)) {\n      this.pipesSet.add(id.reference);\n      this.pipes.push(id);\n    }\n  }\n  addExportedPipe(id: CompileIdentifierMetadata) {\n    if (!this.exportedPipesSet.has(id.reference)) {\n      this.exportedPipesSet.add(id.reference);\n      this.exportedPipes.push(id);\n    }\n  }\n  addModule(id: CompileTypeMetadata) {\n    if (!this.modulesSet.has(id.reference)) {\n      this.modulesSet.add(id.reference);\n      this.modules.push(id);\n    }\n  }\n  addEntryComponent(ec: CompileEntryComponentMetadata) {\n    if (!this.entryComponentsSet.has(ec.componentType)) {\n      this.entryComponentsSet.add(ec.componentType);\n      this.entryComponents.push(ec);\n    }\n  }\n}\n\nfunction _normalizeArray(obj: any[]|undefined|null): any[] {\n  return obj || [];\n}\n\nexport class ProviderMeta {\n  token: any;\n  useClass: Type|null;\n  useValue: any;\n  useExisting: any;\n  useFactory: Function|null;\n  dependencies: Object[]|null;\n  multi: boolean;\n\n  constructor(token: any, {useClass, useValue, useExisting, useFactory, deps, multi}: {\n    useClass?: Type,\n    useValue?: any,\n    useExisting?: any,\n    useFactory?: Function|null,\n    deps?: Object[]|null,\n    multi?: boolean\n  }) {\n    this.token = token;\n    this.useClass = useClass || null;\n    this.useValue = useValue;\n    this.useExisting = useExisting;\n    this.useFactory = useFactory || null;\n    this.dependencies = deps || null;\n    this.multi = !!multi;\n  }\n}\n\nexport function flatten<T>(list: Array<T|T[]>): T[] {\n  return list.reduce((flat: any[], item: T|T[]): T[] => {\n    const flatItem = Array.isArray(item) ? flatten(item) : item;\n    return (<T[]>flat).concat(flatItem);\n  }, []);\n}\n\nfunction jitSourceUrl(url: string) {\n  // Note: We need 3 \"/\" so that ng shows up as a separate domain\n  // in the chrome dev tools.\n  return url.replace(/(\\w+:\\/\\/[\\w:-]+)?(\\/+)?/, 'ng:///');\n}\n\nexport function templateSourceUrl(\n    ngModuleType: CompileIdentifierMetadata, compMeta: {type: CompileIdentifierMetadata},\n    templateMeta: {isInline: boolean, templateUrl: string|null}) {\n  let url: string;\n  if (templateMeta.isInline) {\n    if (compMeta.type.reference instanceof StaticSymbol) {\n      // Note: a .ts file might contain multiple components with inline templates,\n      // so we need to give them unique urls, as these will be used for sourcemaps.\n      url = `${compMeta.type.reference.filePath}.${compMeta.type.reference.name}.html`;\n    } else {\n      url = `${identifierName(ngModuleType)}/${identifierName(compMeta.type)}.html`;\n    }\n  } else {\n    url = templateMeta.templateUrl!;\n  }\n  return compMeta.type.reference instanceof StaticSymbol ? url : jitSourceUrl(url);\n}\n\nexport function sharedStylesheetJitUrl(meta: CompileStylesheetMetadata, id: number) {\n  const pathParts = meta.moduleUrl!.split(/\\/\\\\/g);\n  const baseName = pathParts[pathParts.length - 1];\n  return jitSourceUrl(`css/${id}${baseName}.ngstyle.js`);\n}\n\nexport function ngModuleJitUrl(moduleMeta: CompileNgModuleMetadata): string {\n  return jitSourceUrl(`${identifierName(moduleMeta.type)}/module.ngfactory.js`);\n}\n\nexport function templateJitUrl(\n    ngModuleType: CompileIdentifierMetadata, compMeta: CompileDirectiveMetadata): string {\n  return jitSourceUrl(\n      `${identifierName(ngModuleType)}/${identifierName(compMeta.type)}.ngfactory.js`);\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}