{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TypeChecker = exports.AUTO_START_ARG = void 0;\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nvar core_1 = require(\"@angular-devkit/core\");\n\nvar node_1 = require(\"@angular-devkit/core/node\");\n\nvar compiler_cli_1 = require(\"@angular/compiler-cli\");\n\nvar ts = require(\"typescript\");\n\nvar benchmark_1 = require(\"./benchmark\");\n\nvar compiler_host_1 = require(\"./compiler_host\");\n\nvar diagnostics_1 = require(\"./diagnostics\");\n\nvar type_checker_messages_1 = require(\"./type_checker_messages\"); // This file should run in a child process with the AUTO_START_ARG argument\n\n\nexports.AUTO_START_ARG = '9d93e901-158a-4cf9-ba1b-2f0582ffcfeb';\n\nvar TypeChecker = /*#__PURE__*/function () {\n  function TypeChecker(_compilerOptions, _basePath, _JitMode, _rootNames, hostReplacementPaths) {\n    _classCallCheck(this, TypeChecker);\n\n    this._compilerOptions = _compilerOptions;\n    this._JitMode = _JitMode;\n    this._rootNames = _rootNames;\n    benchmark_1.time('TypeChecker.constructor');\n    var host = new core_1.virtualFs.AliasHost(new node_1.NodeJsSyncHost()); // Add file replacements.\n\n    for (var from in hostReplacementPaths) {\n      var normalizedFrom = core_1.resolve(core_1.normalize(_basePath), core_1.normalize(from));\n      var normalizedWith = core_1.resolve(core_1.normalize(_basePath), core_1.normalize(hostReplacementPaths[from]));\n      host.aliases.set(normalizedFrom, normalizedWith);\n    }\n\n    var compilerHost = new compiler_host_1.WebpackCompilerHost(_compilerOptions, _basePath, host, true); // We don't set a async resource loader on the compiler host because we only support\n    // html templates, which are the only ones that can throw errors, and those can be loaded\n    // synchronously.\n    // If we need to also report errors on styles then we'll need to ask the main thread\n    // for these resources.\n\n    this._compilerHost = compiler_cli_1.createCompilerHost({\n      options: this._compilerOptions,\n      tsHost: compilerHost\n    });\n    benchmark_1.timeEnd('TypeChecker.constructor');\n  }\n\n  _createClass(TypeChecker, [{\n    key: \"_update\",\n    value: function _update(rootNames, changedCompilationFiles) {\n      var _this = this;\n\n      benchmark_1.time('TypeChecker._update');\n      this._rootNames = rootNames;\n      changedCompilationFiles.forEach(function (fileName) {\n        _this._compilerHost.invalidate(fileName);\n      });\n      benchmark_1.timeEnd('TypeChecker._update');\n    }\n  }, {\n    key: \"_createOrUpdateProgram\",\n    value: function _createOrUpdateProgram() {\n      if (this._JitMode) {\n        // Create the TypeScript program.\n        benchmark_1.time('TypeChecker._createOrUpdateProgram.ts.createProgram');\n        this._program = ts.createProgram(this._rootNames, this._compilerOptions, this._compilerHost, this._program);\n        benchmark_1.timeEnd('TypeChecker._createOrUpdateProgram.ts.createProgram');\n      } else {\n        benchmark_1.time('TypeChecker._createOrUpdateProgram.ng.createProgram'); // Create the Angular program.\n\n        this._program = compiler_cli_1.createProgram({\n          rootNames: this._rootNames,\n          options: this._compilerOptions,\n          host: this._compilerHost,\n          oldProgram: this._program\n        });\n        benchmark_1.timeEnd('TypeChecker._createOrUpdateProgram.ng.createProgram');\n      }\n    }\n  }, {\n    key: \"_diagnose\",\n    value: function _diagnose(cancellationToken) {\n      var _this2 = this;\n\n      if (!this._program) {\n        return;\n      }\n\n      var allDiagnostics = diagnostics_1.gatherDiagnostics(this._program, this._JitMode, 'TypeChecker', diagnostics_1.DiagnosticMode.Semantic, cancellationToken); // Report diagnostics.\n\n      if (!cancellationToken.isCancellationRequested()) {\n        diagnostics_1.reportDiagnostics(allDiagnostics, function (msg) {\n          return _this2.sendMessage(new type_checker_messages_1.LogMessage('error', 'Error: ' + msg));\n        }, function (msg) {\n          return _this2.sendMessage(new type_checker_messages_1.LogMessage('warn', 'Warning: ' + msg));\n        });\n      }\n    }\n  }, {\n    key: \"sendMessage\",\n    value: function sendMessage(msg) {\n      if (process.send) {\n        process.send(msg);\n      }\n    }\n  }, {\n    key: \"update\",\n    value: function update(rootNames, changedCompilationFiles, cancellationToken) {\n      this._update(rootNames, changedCompilationFiles);\n\n      this._createOrUpdateProgram();\n\n      this._diagnose(cancellationToken);\n    }\n  }]);\n\n  return TypeChecker;\n}();\n\nexports.TypeChecker = TypeChecker;","map":{"version":3,"sources":["/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@ngtools/webpack/src/type_checker.js"],"names":["Object","defineProperty","exports","value","TypeChecker","AUTO_START_ARG","core_1","require","node_1","compiler_cli_1","ts","benchmark_1","compiler_host_1","diagnostics_1","type_checker_messages_1","_compilerOptions","_basePath","_JitMode","_rootNames","hostReplacementPaths","time","host","virtualFs","AliasHost","NodeJsSyncHost","from","normalizedFrom","resolve","normalize","normalizedWith","aliases","set","compilerHost","WebpackCompilerHost","_compilerHost","createCompilerHost","options","tsHost","timeEnd","rootNames","changedCompilationFiles","forEach","fileName","invalidate","_program","createProgram","oldProgram","cancellationToken","allDiagnostics","gatherDiagnostics","DiagnosticMode","Semantic","isCancellationRequested","reportDiagnostics","msg","sendMessage","LogMessage","process","send","_update","_createOrUpdateProgram","_diagnose"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TypeChecker = exports.AUTO_START_ARG = void 0;\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst core_1 = require(\"@angular-devkit/core\");\nconst node_1 = require(\"@angular-devkit/core/node\");\nconst compiler_cli_1 = require(\"@angular/compiler-cli\");\nconst ts = require(\"typescript\");\nconst benchmark_1 = require(\"./benchmark\");\nconst compiler_host_1 = require(\"./compiler_host\");\nconst diagnostics_1 = require(\"./diagnostics\");\nconst type_checker_messages_1 = require(\"./type_checker_messages\");\n// This file should run in a child process with the AUTO_START_ARG argument\nexports.AUTO_START_ARG = '9d93e901-158a-4cf9-ba1b-2f0582ffcfeb';\nclass TypeChecker {\n    constructor(_compilerOptions, _basePath, _JitMode, _rootNames, hostReplacementPaths) {\n        this._compilerOptions = _compilerOptions;\n        this._JitMode = _JitMode;\n        this._rootNames = _rootNames;\n        benchmark_1.time('TypeChecker.constructor');\n        const host = new core_1.virtualFs.AliasHost(new node_1.NodeJsSyncHost());\n        // Add file replacements.\n        for (const from in hostReplacementPaths) {\n            const normalizedFrom = core_1.resolve(core_1.normalize(_basePath), core_1.normalize(from));\n            const normalizedWith = core_1.resolve(core_1.normalize(_basePath), core_1.normalize(hostReplacementPaths[from]));\n            host.aliases.set(normalizedFrom, normalizedWith);\n        }\n        const compilerHost = new compiler_host_1.WebpackCompilerHost(_compilerOptions, _basePath, host, true);\n        // We don't set a async resource loader on the compiler host because we only support\n        // html templates, which are the only ones that can throw errors, and those can be loaded\n        // synchronously.\n        // If we need to also report errors on styles then we'll need to ask the main thread\n        // for these resources.\n        this._compilerHost = compiler_cli_1.createCompilerHost({\n            options: this._compilerOptions,\n            tsHost: compilerHost,\n        });\n        benchmark_1.timeEnd('TypeChecker.constructor');\n    }\n    _update(rootNames, changedCompilationFiles) {\n        benchmark_1.time('TypeChecker._update');\n        this._rootNames = rootNames;\n        changedCompilationFiles.forEach((fileName) => {\n            this._compilerHost.invalidate(fileName);\n        });\n        benchmark_1.timeEnd('TypeChecker._update');\n    }\n    _createOrUpdateProgram() {\n        if (this._JitMode) {\n            // Create the TypeScript program.\n            benchmark_1.time('TypeChecker._createOrUpdateProgram.ts.createProgram');\n            this._program = ts.createProgram(this._rootNames, this._compilerOptions, this._compilerHost, this._program);\n            benchmark_1.timeEnd('TypeChecker._createOrUpdateProgram.ts.createProgram');\n        }\n        else {\n            benchmark_1.time('TypeChecker._createOrUpdateProgram.ng.createProgram');\n            // Create the Angular program.\n            this._program = compiler_cli_1.createProgram({\n                rootNames: this._rootNames,\n                options: this._compilerOptions,\n                host: this._compilerHost,\n                oldProgram: this._program,\n            });\n            benchmark_1.timeEnd('TypeChecker._createOrUpdateProgram.ng.createProgram');\n        }\n    }\n    _diagnose(cancellationToken) {\n        if (!this._program) {\n            return;\n        }\n        const allDiagnostics = diagnostics_1.gatherDiagnostics(this._program, this._JitMode, 'TypeChecker', diagnostics_1.DiagnosticMode.Semantic, cancellationToken);\n        // Report diagnostics.\n        if (!cancellationToken.isCancellationRequested()) {\n            diagnostics_1.reportDiagnostics(allDiagnostics, msg => this.sendMessage(new type_checker_messages_1.LogMessage('error', 'Error: ' + msg)), msg => this.sendMessage(new type_checker_messages_1.LogMessage('warn', 'Warning: ' + msg)));\n        }\n    }\n    sendMessage(msg) {\n        if (process.send) {\n            process.send(msg);\n        }\n    }\n    update(rootNames, changedCompilationFiles, cancellationToken) {\n        this._update(rootNames, changedCompilationFiles);\n        this._createOrUpdateProgram();\n        this._diagnose(cancellationToken);\n    }\n}\nexports.TypeChecker = TypeChecker;\n"]},"metadata":{},"sourceType":"script"}