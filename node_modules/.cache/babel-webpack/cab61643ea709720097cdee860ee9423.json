{"ast":null,"code":"/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n(function (factory) {\n  if (typeof module === \"object\" && typeof module.exports === \"object\") {\n    var v = factory(require, exports);\n    if (v !== undefined) module.exports = v;\n  } else if (typeof define === \"function\" && define.amd) {\n    define(\"@angular/compiler-cli/src/ngtsc/indexer/src/context\", [\"require\", \"exports\"], factory);\n  }\n})(function (require, exports) {\n  \"use strict\";\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.IndexingContext = void 0;\n  /**\n   * A context for storing indexing infromation about components of a program.\n   *\n   * An `IndexingContext` collects component and template analysis information from\n   * `DecoratorHandler`s and exposes them to be indexed.\n   */\n\n  var IndexingContext =\n  /** @class */\n  function () {\n    function IndexingContext() {\n      this.components = new Set();\n    }\n    /**\n     * Adds a component to the context.\n     */\n\n\n    IndexingContext.prototype.addComponent = function (info) {\n      this.components.add(info);\n    };\n\n    return IndexingContext;\n  }();\n\n  exports.IndexingContext = IndexingContext;\n});","map":{"version":3,"sources":["../../../../../../../../../packages/compiler-cli/src/ngtsc/indexer/src/context.ts"],"names":[],"mappings":"AAAA;;;;;;AAMG;;;;;;;;;;;;;;;AAwCH;;;;;AAKG;;AACH,MAAA,eAAA;AAAA;AAAA,cAAA;AAAA,aAAA,eAAA,GAAA;AACW,WAAA,UAAA,GAAa,IAAI,GAAJ,EAAb;AAQV;AANC;;AAEG;;;AACH,IAAA,eAAA,CAAA,SAAA,CAAA,YAAA,GAAA,UAAa,IAAb,EAAgC;AAC9B,WAAK,UAAL,CAAgB,GAAhB,CAAoB,IAApB;AACD,KAFD;;AAGF,WAAA,eAAA;AAAC,GATD,EAAA;;AAAa,EAAA,OAAA,CAAA,eAAA,GAAA,eAAA","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {BoundTarget, DirectiveMeta, ParseSourceFile} from '@angular/compiler';\nimport {Reference} from '../../imports';\nimport {ClassDeclaration} from '../../reflection';\n\nexport interface ComponentMeta extends DirectiveMeta {\n  ref: Reference<ClassDeclaration>;\n  /**\n   * Unparsed selector of the directive, or null if the directive does not have a selector.\n   */\n  selector: string|null;\n}\n\n/**\n * An intermediate representation of a component.\n */\nexport interface ComponentInfo {\n  /** Component TypeScript class declaration */\n  declaration: ClassDeclaration;\n\n  /** Component template selector if it exists, otherwise null. */\n  selector: string|null;\n\n  /**\n   * BoundTarget containing the parsed template. Can also be used to query for directives used in\n   * the template.\n   */\n  boundTemplate: BoundTarget<ComponentMeta>;\n\n  /** Metadata about the template */\n  templateMeta: {\n    /** Whether the component template is inline */\n    isInline: boolean;\n\n    /** Template file recorded by template parser */\n    file: ParseSourceFile;\n  };\n}\n\n/**\n * A context for storing indexing infromation about components of a program.\n *\n * An `IndexingContext` collects component and template analysis information from\n * `DecoratorHandler`s and exposes them to be indexed.\n */\nexport class IndexingContext {\n  readonly components = new Set<ComponentInfo>();\n\n  /**\n   * Adds a component to the context.\n   */\n  addComponent(info: ComponentInfo) {\n    this.components.add(info);\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}