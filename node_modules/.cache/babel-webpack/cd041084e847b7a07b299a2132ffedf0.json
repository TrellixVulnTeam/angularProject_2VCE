{"ast":null,"code":"var _regeneratorRuntime = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar debug = require('debug')('streamroller:moveAndMaybeCompressFile');\n\nvar fs = require('fs-extra');\n\nvar zlib = require('zlib');\n\nvar moveAndMaybeCompressFile = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(sourceFilePath, targetFilePath, needCompress) {\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!(sourceFilePath === targetFilePath)) {\n              _context.next = 3;\n              break;\n            }\n\n            debug(\"moveAndMaybeCompressFile: source and target are the same, not doing anything\");\n            return _context.abrupt(\"return\");\n\n          case 3:\n            _context.next = 5;\n            return fs.pathExists(sourceFilePath);\n\n          case 5:\n            if (!_context.sent) {\n              _context.next = 26;\n              break;\n            }\n\n            debug(\"moveAndMaybeCompressFile: moving file from \".concat(sourceFilePath, \" to \").concat(targetFilePath, \" \").concat(needCompress ? \"with\" : \"without\", \" compress\"));\n\n            if (!needCompress) {\n              _context.next = 12;\n              break;\n            }\n\n            _context.next = 10;\n            return new Promise(function (resolve, reject) {\n              fs.createReadStream(sourceFilePath).pipe(zlib.createGzip()).pipe(fs.createWriteStream(targetFilePath)).on(\"finish\", function () {\n                debug(\"moveAndMaybeCompressFile: finished compressing \".concat(targetFilePath, \", deleting \").concat(sourceFilePath));\n                fs.unlink(sourceFilePath).then(resolve).catch(function () {\n                  debug(\"Deleting \".concat(sourceFilePath, \" failed, truncating instead\"));\n                  fs.truncate(sourceFilePath).then(resolve).catch(reject);\n                });\n              });\n            });\n\n          case 10:\n            _context.next = 26;\n            break;\n\n          case 12:\n            debug(\"moveAndMaybeCompressFile: deleting file=\".concat(targetFilePath, \", renaming \").concat(sourceFilePath, \" to \").concat(targetFilePath));\n            _context.prev = 13;\n            _context.next = 16;\n            return fs.move(sourceFilePath, targetFilePath, {\n              overwrite: true\n            });\n\n          case 16:\n            _context.next = 26;\n            break;\n\n          case 18:\n            _context.prev = 18;\n            _context.t0 = _context[\"catch\"](13);\n            debug(\"moveAndMaybeCompressFile: error moving \".concat(sourceFilePath, \" to \").concat(targetFilePath), _context.t0);\n            debug(\"Trying copy+truncate instead\");\n            _context.next = 24;\n            return fs.copy(sourceFilePath, targetFilePath, {\n              overwrite: true\n            });\n\n          case 24:\n            _context.next = 26;\n            return fs.truncate(sourceFilePath);\n\n          case 26:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[13, 18]]);\n  }));\n\n  return function moveAndMaybeCompressFile(_x, _x2, _x3) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nmodule.exports = moveAndMaybeCompressFile;","map":{"version":3,"sources":["/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/streamroller/lib/moveAndMaybeCompressFile.js"],"names":["debug","require","fs","zlib","moveAndMaybeCompressFile","sourceFilePath","targetFilePath","needCompress","pathExists","Promise","resolve","reject","createReadStream","pipe","createGzip","createWriteStream","on","unlink","then","catch","truncate","move","overwrite","copy","module","exports"],"mappings":";;;;AAAA,IAAMA,KAAK,GAAGC,OAAO,CAAC,OAAD,CAAP,CAAiB,uCAAjB,CAAd;;AACA,IAAMC,EAAE,GAAGD,OAAO,CAAC,UAAD,CAAlB;;AACA,IAAME,IAAI,GAAGF,OAAO,CAAC,MAAD,CAApB;;AAEA,IAAMG,wBAAwB;AAAA,sEAAG,iBAC/BC,cAD+B,EAE/BC,cAF+B,EAG/BC,YAH+B;AAAA;AAAA;AAAA;AAAA;AAAA,kBAK3BF,cAAc,KAAKC,cALQ;AAAA;AAAA;AAAA;;AAM7BN,YAAAA,KAAK,gFAAL;AAN6B;;AAAA;AAAA;AAAA,mBAWnBE,EAAE,CAACM,UAAH,CAAcH,cAAd,CAXmB;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAa3BL,YAAAA,KAAK,sDAC2CK,cAD3C,iBACgEC,cADhE,cAEDC,YAAY,GAAG,MAAH,GAAY,SAFvB,eAAL;;AAb2B,iBAkBvBA,YAlBuB;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAmBnB,IAAIE,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACrCT,cAAAA,EAAE,CAACU,gBAAH,CAAoBP,cAApB,EACGQ,IADH,CACQV,IAAI,CAACW,UAAL,EADR,EAEGD,IAFH,CAEQX,EAAE,CAACa,iBAAH,CAAqBT,cAArB,CAFR,EAGGU,EAHH,CAGM,QAHN,EAGgB,YAAM;AAClBhB,gBAAAA,KAAK,0DAC+CM,cAD/C,wBAC2ED,cAD3E,EAAL;AAGAH,gBAAAA,EAAE,CAACe,MAAH,CAAUZ,cAAV,EACGa,IADH,CACQR,OADR,EAEGS,KAFH,CAES,YAAM;AACXnB,kBAAAA,KAAK,oBAAaK,cAAb,iCAAL;AACAH,kBAAAA,EAAE,CAACkB,QAAH,CAAYf,cAAZ,EAA4Ba,IAA5B,CAAiCR,OAAjC,EAA0CS,KAA1C,CAAgDR,MAAhD;AACD,iBALH;AAMD,eAbH;AAcD,aAfK,CAnBmB;;AAAA;AAAA;AAAA;;AAAA;AAoCzBX,YAAAA,KAAK,mDACwCM,cADxC,wBACoED,cADpE,iBACyFC,cADzF,EAAL;AApCyB;AAAA;AAAA,mBAwCjBJ,EAAE,CAACmB,IAAH,CAAQhB,cAAR,EAAwBC,cAAxB,EAAwC;AAAEgB,cAAAA,SAAS,EAAE;AAAb,aAAxC,CAxCiB;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AA0CvBtB,YAAAA,KAAK,kDACuCK,cADvC,iBAC4DC,cAD5D,eAAL;AAGAN,YAAAA,KAAK,gCAAL;AA7CuB;AAAA,mBA8CjBE,EAAE,CAACqB,IAAH,CAAQlB,cAAR,EAAwBC,cAAxB,EAAwC;AAAEgB,cAAAA,SAAS,EAAE;AAAb,aAAxC,CA9CiB;;AAAA;AAAA;AAAA,mBA+CjBpB,EAAE,CAACkB,QAAH,CAAYf,cAAZ,CA/CiB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAxBD,wBAAwB;AAAA;AAAA;AAAA,GAA9B;;AAqDAoB,MAAM,CAACC,OAAP,GAAiBrB,wBAAjB","sourcesContent":["const debug = require('debug')('streamroller:moveAndMaybeCompressFile');\nconst fs = require('fs-extra');\nconst zlib = require('zlib');\n\nconst moveAndMaybeCompressFile = async (\n  sourceFilePath,\n  targetFilePath,\n  needCompress\n) => {\n  if (sourceFilePath === targetFilePath) {\n    debug(\n      `moveAndMaybeCompressFile: source and target are the same, not doing anything`\n    );\n    return;\n  }\n    if (await fs.pathExists(sourceFilePath)) {\n\n      debug(\n        `moveAndMaybeCompressFile: moving file from ${sourceFilePath} to ${targetFilePath} ${\n          needCompress ? \"with\" : \"without\"\n        } compress`\n      );\n      if (needCompress) {\n        await new Promise((resolve, reject) => {\n          fs.createReadStream(sourceFilePath)\n            .pipe(zlib.createGzip())\n            .pipe(fs.createWriteStream(targetFilePath))\n            .on(\"finish\", () => {\n              debug(\n                `moveAndMaybeCompressFile: finished compressing ${targetFilePath}, deleting ${sourceFilePath}`\n              );\n              fs.unlink(sourceFilePath)\n                .then(resolve)\n                .catch(() => {\n                  debug(`Deleting ${sourceFilePath} failed, truncating instead`);\n                  fs.truncate(sourceFilePath).then(resolve).catch(reject)\n                });\n            });\n        });\n      } else {\n        debug(\n          `moveAndMaybeCompressFile: deleting file=${targetFilePath}, renaming ${sourceFilePath} to ${targetFilePath}`\n        );\n        try {\n          await fs.move(sourceFilePath, targetFilePath, { overwrite: true });\n        } catch (e) {\n          debug(\n            `moveAndMaybeCompressFile: error moving ${sourceFilePath} to ${targetFilePath}`, e\n          );\n          debug(`Trying copy+truncate instead`);\n          await fs.copy(sourceFilePath, targetFilePath, { overwrite: true });\n          await fs.truncate(sourceFilePath);\n        }\n      }\n    }\n};\n\nmodule.exports = moveAndMaybeCompressFile;\n"]},"metadata":{},"sourceType":"script"}