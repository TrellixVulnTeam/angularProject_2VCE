{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.JsonWorkspaceMetadata = exports.JsonWorkspaceSymbol = void 0;\nexports.JsonWorkspaceSymbol = Symbol.for('@angular/core:workspace-json');\n\nvar JsonWorkspaceMetadata = /*#__PURE__*/function () {\n  function JsonWorkspaceMetadata(filePath, ast, raw) {\n    _classCallCheck(this, JsonWorkspaceMetadata);\n\n    this.filePath = filePath;\n    this.ast = ast;\n    this.raw = raw;\n    this.changes = [];\n  }\n\n  _createClass(JsonWorkspaceMetadata, [{\n    key: \"hasChanges\",\n    get: function get() {\n      return this.changes.length > 0;\n    }\n  }, {\n    key: \"changeCount\",\n    get: function get() {\n      return this.changes.length;\n    }\n  }, {\n    key: \"findChangesForPath\",\n    value: function findChangesForPath(path) {\n      return this.changes.filter(function (c) {\n        return c.path === path;\n      });\n    }\n  }, {\n    key: \"addChange\",\n    value: function addChange(op, path, node, value, type) {\n      // Remove redundant operations\n      if (op === 'remove' || op === 'replace') {\n        for (var i = this.changes.length - 1; i >= 0; --i) {\n          var currentPath = this.changes[i].path;\n\n          if (currentPath === path || currentPath.startsWith(path + '/')) {\n            if (op === 'replace' && currentPath === path && this.changes[i].op === 'add') {\n              op = 'add';\n            }\n\n            this.changes.splice(i, 1);\n          }\n        }\n      }\n\n      this.changes.push({\n        op: op,\n        path: path,\n        node: node,\n        value: value,\n        type: op === 'remove' || !type ? 'json' : type\n      });\n    }\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      this.changes.length = 0;\n    }\n  }]);\n\n  return JsonWorkspaceMetadata;\n}();\n\nexports.JsonWorkspaceMetadata = JsonWorkspaceMetadata;","map":{"version":3,"sources":["/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@angular-devkit/build-angular/node_modules/@angular-devkit/core/src/workspace/json/metadata.js"],"names":["Object","defineProperty","exports","value","JsonWorkspaceMetadata","JsonWorkspaceSymbol","Symbol","for","filePath","ast","raw","changes","length","path","filter","c","op","node","type","i","currentPath","startsWith","splice","push"],"mappings":"AAAA;;;;;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,qBAAR,GAAgCF,OAAO,CAACG,mBAAR,GAA8B,KAAK,CAAnE;AACAH,OAAO,CAACG,mBAAR,GAA8BC,MAAM,CAACC,GAAP,CAAW,8BAAX,CAA9B;;IACMH,qB;AACF,iCAAYI,QAAZ,EAAsBC,GAAtB,EAA2BC,GAA3B,EAAgC;AAAA;;AAC5B,SAAKF,QAAL,GAAgBA,QAAhB;AACA,SAAKC,GAAL,GAAWA,GAAX;AACA,SAAKC,GAAL,GAAWA,GAAX;AACA,SAAKC,OAAL,GAAe,EAAf;AACH;;;;SACD,eAAiB;AACb,aAAO,KAAKA,OAAL,CAAaC,MAAb,GAAsB,CAA7B;AACH;;;SACD,eAAkB;AACd,aAAO,KAAKD,OAAL,CAAaC,MAApB;AACH;;;WACD,4BAAmBC,IAAnB,EAAyB;AACrB,aAAO,KAAKF,OAAL,CAAaG,MAAb,CAAoB,UAAAC,CAAC;AAAA,eAAIA,CAAC,CAACF,IAAF,KAAWA,IAAf;AAAA,OAArB,CAAP;AACH;;;WACD,mBAAUG,EAAV,EAAcH,IAAd,EAAoBI,IAApB,EAA0Bd,KAA1B,EAAiCe,IAAjC,EAAuC;AACnC;AACA,UAAIF,EAAE,KAAK,QAAP,IAAmBA,EAAE,KAAK,SAA9B,EAAyC;AACrC,aAAK,IAAIG,CAAC,GAAG,KAAKR,OAAL,CAAaC,MAAb,GAAsB,CAAnC,EAAsCO,CAAC,IAAI,CAA3C,EAA8C,EAAEA,CAAhD,EAAmD;AAC/C,cAAMC,WAAW,GAAG,KAAKT,OAAL,CAAaQ,CAAb,EAAgBN,IAApC;;AACA,cAAIO,WAAW,KAAKP,IAAhB,IAAwBO,WAAW,CAACC,UAAZ,CAAuBR,IAAI,GAAG,GAA9B,CAA5B,EAAgE;AAC5D,gBAAIG,EAAE,KAAK,SAAP,IAAoBI,WAAW,KAAKP,IAApC,IAA4C,KAAKF,OAAL,CAAaQ,CAAb,EAAgBH,EAAhB,KAAuB,KAAvE,EAA8E;AAC1EA,cAAAA,EAAE,GAAG,KAAL;AACH;;AACD,iBAAKL,OAAL,CAAaW,MAAb,CAAoBH,CAApB,EAAuB,CAAvB;AACH;AACJ;AACJ;;AACD,WAAKR,OAAL,CAAaY,IAAb,CAAkB;AAAEP,QAAAA,EAAE,EAAFA,EAAF;AAAMH,QAAAA,IAAI,EAAJA,IAAN;AAAYI,QAAAA,IAAI,EAAJA,IAAZ;AAAkBd,QAAAA,KAAK,EAALA,KAAlB;AAAyBe,QAAAA,IAAI,EAAEF,EAAE,KAAK,QAAP,IAAmB,CAACE,IAApB,GAA2B,MAA3B,GAAoCA;AAAnE,OAAlB;AACH;;;WACD,iBAAQ;AACJ,WAAKP,OAAL,CAAaC,MAAb,GAAsB,CAAtB;AACH;;;;;;AAELV,OAAO,CAACE,qBAAR,GAAgCA,qBAAhC","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.JsonWorkspaceMetadata = exports.JsonWorkspaceSymbol = void 0;\nexports.JsonWorkspaceSymbol = Symbol.for('@angular/core:workspace-json');\nclass JsonWorkspaceMetadata {\n    constructor(filePath, ast, raw) {\n        this.filePath = filePath;\n        this.ast = ast;\n        this.raw = raw;\n        this.changes = [];\n    }\n    get hasChanges() {\n        return this.changes.length > 0;\n    }\n    get changeCount() {\n        return this.changes.length;\n    }\n    findChangesForPath(path) {\n        return this.changes.filter(c => c.path === path);\n    }\n    addChange(op, path, node, value, type) {\n        // Remove redundant operations\n        if (op === 'remove' || op === 'replace') {\n            for (let i = this.changes.length - 1; i >= 0; --i) {\n                const currentPath = this.changes[i].path;\n                if (currentPath === path || currentPath.startsWith(path + '/')) {\n                    if (op === 'replace' && currentPath === path && this.changes[i].op === 'add') {\n                        op = 'add';\n                    }\n                    this.changes.splice(i, 1);\n                }\n            }\n        }\n        this.changes.push({ op, path, node, value, type: op === 'remove' || !type ? 'json' : type });\n    }\n    reset() {\n        this.changes.length = 0;\n    }\n}\nexports.JsonWorkspaceMetadata = JsonWorkspaceMetadata;\n"]},"metadata":{},"sourceType":"script"}