{"ast":null,"code":"/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n(function (factory) {\n  if (typeof module === \"object\" && typeof module.exports === \"object\") {\n    var v = factory(require, exports);\n    if (v !== undefined) module.exports = v;\n  } else if (typeof define === \"function\" && define.amd) {\n    define(\"@angular/compiler-cli/src/transformers/r3_transform\", [\"require\", \"exports\", \"tslib\", \"@angular/compiler-cli/src/transformers/node_emitter\"], factory);\n  }\n})(function (require, exports) {\n  \"use strict\";\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.getAngularClassTransformerFactory = void 0;\n\n  var tslib_1 = require(\"tslib\");\n\n  var node_emitter_1 = require(\"@angular/compiler-cli/src/transformers/node_emitter\");\n  /**\n   * Returns a transformer that adds the requested static methods specified by modules.\n   */\n\n\n  function getAngularClassTransformerFactory(modules, annotateForClosureCompiler) {\n    if (modules.length === 0) {\n      // If no modules are specified, just return an identity transform.\n      return function () {\n        return function (sf) {\n          return sf;\n        };\n      };\n    }\n\n    var moduleMap = new Map(modules.map(function (m) {\n      return [m.fileName, m];\n    }));\n    return function (context) {\n      return function (sourceFile) {\n        var module = moduleMap.get(sourceFile.fileName);\n\n        if (module && module.statements.length > 0) {\n          var _a = tslib_1.__read(node_emitter_1.updateSourceFile(sourceFile, module, annotateForClosureCompiler), 1),\n              newSourceFile = _a[0];\n\n          return newSourceFile;\n        }\n\n        return sourceFile;\n      };\n    };\n  }\n\n  exports.getAngularClassTransformerFactory = getAngularClassTransformerFactory;\n});","map":{"version":3,"sources":["../../../../../../../packages/compiler-cli/src/transformers/r3_transform.ts"],"names":[],"mappings":"AAAA;;;;;;AAMG;;;;;;;;;;;;;;;;;;AAKH,MAAA,cAAA,GAAA,OAAA,CAAA,qDAAA,CAAA;AAKA;;AAEG;;;AACH,WAAgB,iCAAhB,CACI,OADJ,EAC8B,0BAD9B,EACiE;AAC/D,QAAI,OAAO,CAAC,MAAR,KAAmB,CAAvB,EAA0B;AACxB;AACA,aAAO,YAAA;AAAM,eAAA,UAAA,EAAA,EAAE;AAAI,iBAAA,EAAA;AAAN,SAAA;AAAQ,OAArB;AACD;;AACD,QAAM,SAAS,GAAG,IAAI,GAAJ,CAAQ,OAAO,CAAC,GAAR,CAAqC,UAAA,CAAA,EAAC;AAAI,aAAA,CAAC,CAAC,CAAC,QAAH,EAAA,CAAA,CAAA;AAAe,KAAzD,CAAR,CAAlB;AACA,WAAO,UAAS,OAAT,EAA0C;AAC/C,aAAO,UAAS,UAAT,EAAkC;AACvC,YAAM,MAAM,GAAG,SAAS,CAAC,GAAV,CAAc,UAAU,CAAC,QAAzB,CAAf;;AACA,YAAI,MAAM,IAAI,MAAM,CAAC,UAAP,CAAkB,MAAlB,GAA2B,CAAzC,EAA4C;AACpC,cAAA,EAAA,GAAA,OAAA,CAAA,MAAA,CAAkB,cAAA,CAAA,gBAAA,CAAiB,UAAjB,EAA6B,MAA7B,EAAqC,0BAArC,CAAlB,EAAkF,CAAlF,CAAA;AAAA,cAAC,aAAa,GAAA,EAAA,CAAA,CAAA,CAAd;;AACN,iBAAO,aAAP;AACD;;AACD,eAAO,UAAP;AACD,OAPD;AAQD,KATD;AAUD;;AAjBD,EAAA,OAAA,CAAA,iCAAA,GAAA,iCAAA","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PartialModule, Statement, StaticSymbol} from '@angular/compiler';\nimport * as ts from 'typescript';\n\nimport {updateSourceFile} from './node_emitter';\n\nexport type Transformer = (sourceFile: ts.SourceFile) => ts.SourceFile;\nexport type TransformerFactory = (context: ts.TransformationContext) => Transformer;\n\n/**\n * Returns a transformer that adds the requested static methods specified by modules.\n */\nexport function getAngularClassTransformerFactory(\n    modules: PartialModule[], annotateForClosureCompiler: boolean): TransformerFactory {\n  if (modules.length === 0) {\n    // If no modules are specified, just return an identity transform.\n    return () => sf => sf;\n  }\n  const moduleMap = new Map(modules.map<[string, PartialModule]>(m => [m.fileName, m]));\n  return function(context: ts.TransformationContext) {\n    return function(sourceFile: ts.SourceFile): ts.SourceFile {\n      const module = moduleMap.get(sourceFile.fileName);\n      if (module && module.statements.length > 0) {\n        const [newSourceFile] = updateSourceFile(sourceFile, module, annotateForClosureCompiler);\n        return newSourceFile;\n      }\n      return sourceFile;\n    };\n  };\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}