{"ast":null,"code":"/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n(function (factory) {\n  if (typeof module === \"object\" && typeof module.exports === \"object\") {\n    var v = factory(require, exports);\n    if (v !== undefined) module.exports = v;\n  } else if (typeof define === \"function\" && define.amd) {\n    define(\"@angular/compiler/src/compile_reflector\", [\"require\", \"exports\"], factory);\n  }\n})(function (require, exports) {\n  \"use strict\";\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.CompileReflector = void 0;\n  /**\n   * Provides access to reflection data about symbols that the compiler needs.\n   */\n\n  var CompileReflector =\n  /** @class */\n  function () {\n    function CompileReflector() {}\n\n    return CompileReflector;\n  }();\n\n  exports.CompileReflector = CompileReflector;\n});","map":{"version":3,"sources":["../../../../../../packages/compiler/src/compile_reflector.ts"],"names":[],"mappings":"AAAA;;;;;;AAMG;;;;;;;;;;;;;;;AAKH;;AAEG;;AACH,MAAA,gBAAA;AAAA;AAAA,cAAA;AAAA,aAAA,gBAAA,GAAA,CAUC;;AAAD,WAAA,gBAAA;AAAC,GAVD,EAAA;;AAAsB,EAAA,OAAA,CAAA,gBAAA,GAAA,gBAAA","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component} from './core';\nimport * as o from './output/output_ast';\n\n/**\n * Provides access to reflection data about symbols that the compiler needs.\n */\nexport abstract class CompileReflector {\n  abstract parameters(typeOrFunc: /*Type*/ any): any[][];\n  abstract annotations(typeOrFunc: /*Type*/ any): any[];\n  abstract shallowAnnotations(typeOrFunc: /*Type*/ any): any[];\n  abstract tryAnnotations(typeOrFunc: /*Type*/ any): any[];\n  abstract propMetadata(typeOrFunc: /*Type*/ any): {[key: string]: any[]};\n  abstract hasLifecycleHook(type: any, lcProperty: string): boolean;\n  abstract guards(typeOrFunc: /* Type */ any): {[key: string]: any};\n  abstract componentModuleUrl(type: /*Type*/ any, cmpMetadata: Component): string;\n  abstract resolveExternalReference(ref: o.ExternalReference): any;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}