{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nvar _classCallCheck = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/createClass\");\n\nvar Template = require(\"../Template\");\n\nvar WasmMainTemplatePlugin = require(\"../wasm/WasmMainTemplatePlugin\");\n\nvar ReadFileCompileWasmTemplatePlugin = /*#__PURE__*/function () {\n  function ReadFileCompileWasmTemplatePlugin(options) {\n    _classCallCheck(this, ReadFileCompileWasmTemplatePlugin);\n\n    this.options = options || {};\n  }\n\n  _createClass(ReadFileCompileWasmTemplatePlugin, [{\n    key: \"apply\",\n    value: function apply(compiler) {\n      var _this = this;\n\n      compiler.hooks.thisCompilation.tap(\"ReadFileCompileWasmTemplatePlugin\", function (compilation) {\n        var generateLoadBinaryCode = function generateLoadBinaryCode(path) {\n          return Template.asString([\"new Promise(function (resolve, reject) {\", Template.indent([\"var { readFile } = require('fs');\", \"var { join } = require('path');\", \"\", \"try {\", Template.indent([\"readFile(join(__dirname, \".concat(path, \"), function(err, buffer){\"), Template.indent([\"if (err) return reject(err);\", \"\", \"// Fake fetch response\", \"resolve({\", Template.indent([\"arrayBuffer() { return Promise.resolve(buffer); }\"]), \"});\"]), \"});\"]), \"} catch (err) { reject(err); }\"]), \"})\"]);\n        };\n\n        var plugin = new WasmMainTemplatePlugin(Object.assign({\n          generateLoadBinaryCode: generateLoadBinaryCode,\n          supportsStreaming: false\n        }, _this.options));\n        plugin.apply(compilation.mainTemplate);\n      });\n    }\n  }]);\n\n  return ReadFileCompileWasmTemplatePlugin;\n}();\n\nmodule.exports = ReadFileCompileWasmTemplatePlugin;","map":{"version":3,"sources":["/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/webpack/lib/node/ReadFileCompileWasmTemplatePlugin.js"],"names":["Template","require","WasmMainTemplatePlugin","ReadFileCompileWasmTemplatePlugin","options","compiler","hooks","thisCompilation","tap","compilation","generateLoadBinaryCode","path","asString","indent","plugin","Object","assign","supportsStreaming","apply","mainTemplate","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;;;;;AAEA,IAAMA,QAAQ,GAAGC,OAAO,CAAC,aAAD,CAAxB;;AACA,IAAMC,sBAAsB,GAAGD,OAAO,CAAC,gCAAD,CAAtC;;IAEME,iC;AACL,6CAAYC,OAAZ,EAAqB;AAAA;;AACpB,SAAKA,OAAL,GAAeA,OAAO,IAAI,EAA1B;AACA;;;;WAED,eAAMC,QAAN,EAAgB;AAAA;;AACfA,MAAAA,QAAQ,CAACC,KAAT,CAAeC,eAAf,CAA+BC,GAA/B,CACC,mCADD,EAEC,UAAAC,WAAW,EAAI;AACd,YAAMC,sBAAsB,GAAG,SAAzBA,sBAAyB,CAAAC,IAAI;AAAA,iBAClCX,QAAQ,CAACY,QAAT,CAAkB,CACjB,0CADiB,EAEjBZ,QAAQ,CAACa,MAAT,CAAgB,CACf,mCADe,EAEf,iCAFe,EAGf,EAHe,EAIf,OAJe,EAKfb,QAAQ,CAACa,MAAT,CAAgB,oCACaF,IADb,gCAEfX,QAAQ,CAACa,MAAT,CAAgB,CACf,8BADe,EAEf,EAFe,EAGf,wBAHe,EAIf,WAJe,EAKfb,QAAQ,CAACa,MAAT,CAAgB,CACf,mDADe,CAAhB,CALe,EAQf,KARe,CAAhB,CAFe,EAYf,KAZe,CAAhB,CALe,EAmBf,gCAnBe,CAAhB,CAFiB,EAuBjB,IAvBiB,CAAlB,CADkC;AAAA,SAAnC;;AA2BA,YAAMC,MAAM,GAAG,IAAIZ,sBAAJ,CACda,MAAM,CAACC,MAAP,CACC;AACCN,UAAAA,sBAAsB,EAAtBA,sBADD;AAECO,UAAAA,iBAAiB,EAAE;AAFpB,SADD,EAKC,KAAI,CAACb,OALN,CADc,CAAf;AASAU,QAAAA,MAAM,CAACI,KAAP,CAAaT,WAAW,CAACU,YAAzB;AACA,OAxCF;AA0CA;;;;;;AAGFC,MAAM,CAACC,OAAP,GAAiBlB,iCAAjB","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst Template = require(\"../Template\");\nconst WasmMainTemplatePlugin = require(\"../wasm/WasmMainTemplatePlugin\");\n\nclass ReadFileCompileWasmTemplatePlugin {\n\tconstructor(options) {\n\t\tthis.options = options || {};\n\t}\n\n\tapply(compiler) {\n\t\tcompiler.hooks.thisCompilation.tap(\n\t\t\t\"ReadFileCompileWasmTemplatePlugin\",\n\t\t\tcompilation => {\n\t\t\t\tconst generateLoadBinaryCode = path =>\n\t\t\t\t\tTemplate.asString([\n\t\t\t\t\t\t\"new Promise(function (resolve, reject) {\",\n\t\t\t\t\t\tTemplate.indent([\n\t\t\t\t\t\t\t\"var { readFile } = require('fs');\",\n\t\t\t\t\t\t\t\"var { join } = require('path');\",\n\t\t\t\t\t\t\t\"\",\n\t\t\t\t\t\t\t\"try {\",\n\t\t\t\t\t\t\tTemplate.indent([\n\t\t\t\t\t\t\t\t`readFile(join(__dirname, ${path}), function(err, buffer){`,\n\t\t\t\t\t\t\t\tTemplate.indent([\n\t\t\t\t\t\t\t\t\t\"if (err) return reject(err);\",\n\t\t\t\t\t\t\t\t\t\"\",\n\t\t\t\t\t\t\t\t\t\"// Fake fetch response\",\n\t\t\t\t\t\t\t\t\t\"resolve({\",\n\t\t\t\t\t\t\t\t\tTemplate.indent([\n\t\t\t\t\t\t\t\t\t\t\"arrayBuffer() { return Promise.resolve(buffer); }\"\n\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\"});\"\n\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\"});\"\n\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\"} catch (err) { reject(err); }\"\n\t\t\t\t\t\t]),\n\t\t\t\t\t\t\"})\"\n\t\t\t\t\t]);\n\n\t\t\t\tconst plugin = new WasmMainTemplatePlugin(\n\t\t\t\t\tObject.assign(\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tgenerateLoadBinaryCode,\n\t\t\t\t\t\t\tsupportsStreaming: false\n\t\t\t\t\t\t},\n\t\t\t\t\t\tthis.options\n\t\t\t\t\t)\n\t\t\t\t);\n\t\t\t\tplugin.apply(compilation.mainTemplate);\n\t\t\t}\n\t\t);\n\t}\n}\n\nmodule.exports = ReadFileCompileWasmTemplatePlugin;\n"]},"metadata":{},"sourceType":"script"}