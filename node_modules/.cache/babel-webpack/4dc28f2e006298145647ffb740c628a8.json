{"ast":null,"code":"/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n(function (factory) {\n  if (typeof module === \"object\" && typeof module.exports === \"object\") {\n    var v = factory(require, exports);\n    if (v !== undefined) module.exports = v;\n  } else if (typeof define === \"function\" && define.amd) {\n    define(\"@angular/compiler-cli/ngcc/src/main\", [\"require\", \"exports\", \"tslib\", \"@angular/compiler-cli/ngcc/src/dependencies/commonjs_dependency_host\", \"@angular/compiler-cli/ngcc/src/dependencies/dependency_resolver\", \"@angular/compiler-cli/ngcc/src/dependencies/dts_dependency_host\", \"@angular/compiler-cli/ngcc/src/dependencies/esm_dependency_host\", \"@angular/compiler-cli/ngcc/src/dependencies/module_resolver\", \"@angular/compiler-cli/ngcc/src/dependencies/umd_dependency_host\", \"@angular/compiler-cli/ngcc/src/entry_point_finder/directory_walker_entry_point_finder\", \"@angular/compiler-cli/ngcc/src/entry_point_finder/entry_point_collector\", \"@angular/compiler-cli/ngcc/src/entry_point_finder/program_based_entry_point_finder\", \"@angular/compiler-cli/ngcc/src/entry_point_finder/targeted_entry_point_finder\", \"@angular/compiler-cli/ngcc/src/execution/analyze_entry_points\", \"@angular/compiler-cli/ngcc/src/execution/cluster/executor\", \"@angular/compiler-cli/ngcc/src/execution/create_compile_function\", \"@angular/compiler-cli/ngcc/src/execution/single_process_executor\", \"@angular/compiler-cli/ngcc/src/execution/tasks/completion\", \"@angular/compiler-cli/ngcc/src/locking/async_locker\", \"@angular/compiler-cli/ngcc/src/locking/lock_file_with_child_process/index\", \"@angular/compiler-cli/ngcc/src/locking/sync_locker\", \"@angular/compiler-cli/ngcc/src/ngcc_options\", \"@angular/compiler-cli/ngcc/src/packages/configuration\", \"@angular/compiler-cli/ngcc/src/packages/entry_point\", \"@angular/compiler-cli/ngcc/src/packages/entry_point_manifest\", \"@angular/compiler-cli/ngcc/src/writing/package_json_updater\"], factory);\n  }\n})(function (require, exports) {\n  \"use strict\";\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.mainNgcc = void 0;\n\n  var tslib_1 = require(\"tslib\");\n\n  var commonjs_dependency_host_1 = require(\"@angular/compiler-cli/ngcc/src/dependencies/commonjs_dependency_host\");\n\n  var dependency_resolver_1 = require(\"@angular/compiler-cli/ngcc/src/dependencies/dependency_resolver\");\n\n  var dts_dependency_host_1 = require(\"@angular/compiler-cli/ngcc/src/dependencies/dts_dependency_host\");\n\n  var esm_dependency_host_1 = require(\"@angular/compiler-cli/ngcc/src/dependencies/esm_dependency_host\");\n\n  var module_resolver_1 = require(\"@angular/compiler-cli/ngcc/src/dependencies/module_resolver\");\n\n  var umd_dependency_host_1 = require(\"@angular/compiler-cli/ngcc/src/dependencies/umd_dependency_host\");\n\n  var directory_walker_entry_point_finder_1 = require(\"@angular/compiler-cli/ngcc/src/entry_point_finder/directory_walker_entry_point_finder\");\n\n  var entry_point_collector_1 = require(\"@angular/compiler-cli/ngcc/src/entry_point_finder/entry_point_collector\");\n\n  var program_based_entry_point_finder_1 = require(\"@angular/compiler-cli/ngcc/src/entry_point_finder/program_based_entry_point_finder\");\n\n  var targeted_entry_point_finder_1 = require(\"@angular/compiler-cli/ngcc/src/entry_point_finder/targeted_entry_point_finder\");\n\n  var analyze_entry_points_1 = require(\"@angular/compiler-cli/ngcc/src/execution/analyze_entry_points\");\n\n  var executor_1 = require(\"@angular/compiler-cli/ngcc/src/execution/cluster/executor\");\n\n  var create_compile_function_1 = require(\"@angular/compiler-cli/ngcc/src/execution/create_compile_function\");\n\n  var single_process_executor_1 = require(\"@angular/compiler-cli/ngcc/src/execution/single_process_executor\");\n\n  var completion_1 = require(\"@angular/compiler-cli/ngcc/src/execution/tasks/completion\");\n\n  var async_locker_1 = require(\"@angular/compiler-cli/ngcc/src/locking/async_locker\");\n\n  var lock_file_with_child_process_1 = require(\"@angular/compiler-cli/ngcc/src/locking/lock_file_with_child_process/index\");\n\n  var sync_locker_1 = require(\"@angular/compiler-cli/ngcc/src/locking/sync_locker\");\n\n  var ngcc_options_1 = require(\"@angular/compiler-cli/ngcc/src/ngcc_options\");\n\n  var configuration_1 = require(\"@angular/compiler-cli/ngcc/src/packages/configuration\");\n\n  var entry_point_1 = require(\"@angular/compiler-cli/ngcc/src/packages/entry_point\");\n\n  var entry_point_manifest_1 = require(\"@angular/compiler-cli/ngcc/src/packages/entry_point_manifest\");\n\n  var package_json_updater_1 = require(\"@angular/compiler-cli/ngcc/src/writing/package_json_updater\");\n\n  function mainNgcc(options) {\n    var _a = ngcc_options_1.getSharedSetup(options),\n        basePath = _a.basePath,\n        targetEntryPointPath = _a.targetEntryPointPath,\n        propertiesToConsider = _a.propertiesToConsider,\n        typingsOnly = _a.typingsOnly,\n        compileAllFormats = _a.compileAllFormats,\n        logger = _a.logger,\n        pathMappings = _a.pathMappings,\n        async = _a.async,\n        errorOnFailedEntryPoint = _a.errorOnFailedEntryPoint,\n        enableI18nLegacyMessageIdFormat = _a.enableI18nLegacyMessageIdFormat,\n        invalidateEntryPointManifest = _a.invalidateEntryPointManifest,\n        fileSystem = _a.fileSystem,\n        absBasePath = _a.absBasePath,\n        projectPath = _a.projectPath,\n        tsConfig = _a.tsConfig,\n        getFileWriter = _a.getFileWriter;\n\n    var config = new configuration_1.NgccConfiguration(fileSystem, projectPath);\n    var dependencyResolver = getDependencyResolver(fileSystem, logger, config, pathMappings);\n    var entryPointManifest = invalidateEntryPointManifest ? new entry_point_manifest_1.InvalidatingEntryPointManifest(fileSystem, config, logger) : new entry_point_manifest_1.EntryPointManifest(fileSystem, config, logger); // Bail out early if the work is already done.\n\n    var supportedPropertiesToConsider = ensureSupportedProperties(propertiesToConsider);\n    var absoluteTargetEntryPointPath = targetEntryPointPath !== undefined ? fileSystem.resolve(basePath, targetEntryPointPath) : null;\n    var finder = getEntryPointFinder(fileSystem, logger, dependencyResolver, config, entryPointManifest, absBasePath, absoluteTargetEntryPointPath, pathMappings, options.findEntryPointsFromTsConfigProgram ? tsConfig : null, projectPath);\n\n    if (finder instanceof targeted_entry_point_finder_1.TargetedEntryPointFinder && !finder.targetNeedsProcessingOrCleaning(supportedPropertiesToConsider, compileAllFormats)) {\n      logger.debug('The target entry-point has already been processed');\n      return;\n    } // Determine the number of workers to use and whether ngcc should run in parallel.\n\n\n    var workerCount = async ? ngcc_options_1.getMaxNumberOfWorkers() : 1;\n    var inParallel = workerCount > 1;\n    var analyzeEntryPoints = analyze_entry_points_1.getAnalyzeEntryPointsFn(logger, finder, fileSystem, supportedPropertiesToConsider, typingsOnly, compileAllFormats, propertiesToConsider, inParallel); // Create an updater that will actually write to disk.\n\n    var pkgJsonUpdater = new package_json_updater_1.DirectPackageJsonUpdater(fileSystem);\n    var fileWriter = getFileWriter(pkgJsonUpdater); // The function for creating the `compile()` function.\n\n    var createCompileFn = create_compile_function_1.getCreateCompileFn(fileSystem, logger, fileWriter, enableI18nLegacyMessageIdFormat, tsConfig, pathMappings); // The executor for actually planning and getting the work done.\n\n    var createTaskCompletedCallback = getCreateTaskCompletedCallback(pkgJsonUpdater, errorOnFailedEntryPoint, logger, fileSystem);\n    var executor = getExecutor(async, workerCount, logger, fileWriter, pkgJsonUpdater, fileSystem, config, createTaskCompletedCallback);\n    return executor.execute(analyzeEntryPoints, createCompileFn);\n  }\n\n  exports.mainNgcc = mainNgcc;\n\n  function ensureSupportedProperties(properties) {\n    var e_1, _a; // Short-circuit the case where `properties` has fallen back to the default value:\n    // `SUPPORTED_FORMAT_PROPERTIES`\n\n\n    if (properties === entry_point_1.SUPPORTED_FORMAT_PROPERTIES) return entry_point_1.SUPPORTED_FORMAT_PROPERTIES;\n    var supportedProperties = [];\n\n    try {\n      for (var _b = tslib_1.__values(properties), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var prop = _c.value;\n\n        if (entry_point_1.SUPPORTED_FORMAT_PROPERTIES.indexOf(prop) !== -1) {\n          supportedProperties.push(prop);\n        }\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n\n    if (supportedProperties.length === 0) {\n      throw new Error(\"No supported format property to consider among [\" + properties.join(', ') + \"]. \" + (\"Supported properties: \" + entry_point_1.SUPPORTED_FORMAT_PROPERTIES.join(', ')));\n    }\n\n    return supportedProperties;\n  }\n\n  function getCreateTaskCompletedCallback(pkgJsonUpdater, errorOnFailedEntryPoint, logger, fileSystem) {\n    return function (taskQueue) {\n      var _a;\n\n      return completion_1.composeTaskCompletedCallbacks((_a = {}, _a[0\n      /* Processed */\n      ] = completion_1.createMarkAsProcessedHandler(fileSystem, pkgJsonUpdater), _a[1\n      /* Failed */\n      ] = errorOnFailedEntryPoint ? completion_1.createThrowErrorHandler(fileSystem) : completion_1.createLogErrorHandler(logger, fileSystem, taskQueue), _a));\n    };\n  }\n\n  function getExecutor(async, workerCount, logger, fileWriter, pkgJsonUpdater, fileSystem, config, createTaskCompletedCallback) {\n    var lockFile = new lock_file_with_child_process_1.LockFileWithChildProcess(fileSystem, logger);\n\n    if (async) {\n      // Execute asynchronously (either serially or in parallel)\n      var _a = config.getLockingConfig(),\n          retryAttempts = _a.retryAttempts,\n          retryDelay = _a.retryDelay;\n\n      var locker = new async_locker_1.AsyncLocker(lockFile, logger, retryDelay, retryAttempts);\n\n      if (workerCount > 1) {\n        // Execute in parallel.\n        return new executor_1.ClusterExecutor(workerCount, fileSystem, logger, fileWriter, pkgJsonUpdater, locker, createTaskCompletedCallback);\n      } else {\n        // Execute serially, on a single thread (async).\n        return new single_process_executor_1.SingleProcessExecutorAsync(logger, locker, createTaskCompletedCallback);\n      }\n    } else {\n      // Execute serially, on a single thread (sync).\n      return new single_process_executor_1.SingleProcessExecutorSync(logger, new sync_locker_1.SyncLocker(lockFile), createTaskCompletedCallback);\n    }\n  }\n\n  function getDependencyResolver(fileSystem, logger, config, pathMappings) {\n    var moduleResolver = new module_resolver_1.ModuleResolver(fileSystem, pathMappings);\n    var esmDependencyHost = new esm_dependency_host_1.EsmDependencyHost(fileSystem, moduleResolver);\n    var umdDependencyHost = new umd_dependency_host_1.UmdDependencyHost(fileSystem, moduleResolver);\n    var commonJsDependencyHost = new commonjs_dependency_host_1.CommonJsDependencyHost(fileSystem, moduleResolver);\n    var dtsDependencyHost = new dts_dependency_host_1.DtsDependencyHost(fileSystem, pathMappings);\n    return new dependency_resolver_1.DependencyResolver(fileSystem, logger, config, {\n      esm5: esmDependencyHost,\n      esm2015: esmDependencyHost,\n      umd: umdDependencyHost,\n      commonjs: commonJsDependencyHost\n    }, dtsDependencyHost);\n  }\n\n  function getEntryPointFinder(fs, logger, resolver, config, entryPointManifest, basePath, absoluteTargetEntryPointPath, pathMappings, tsConfig, projectPath) {\n    if (absoluteTargetEntryPointPath !== null) {\n      return new targeted_entry_point_finder_1.TargetedEntryPointFinder(fs, config, logger, resolver, basePath, pathMappings, absoluteTargetEntryPointPath);\n    } else {\n      var entryPointCollector = new entry_point_collector_1.EntryPointCollector(fs, config, logger, resolver);\n\n      if (tsConfig !== null) {\n        return new program_based_entry_point_finder_1.ProgramBasedEntryPointFinder(fs, config, logger, resolver, entryPointCollector, entryPointManifest, basePath, tsConfig, projectPath);\n      } else {\n        return new directory_walker_entry_point_finder_1.DirectoryWalkerEntryPointFinder(logger, resolver, entryPointCollector, entryPointManifest, basePath, pathMappings);\n      }\n    }\n  }\n});","map":{"version":3,"sources":["../../../../../../../packages/compiler-cli/ngcc/src/main.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/// <reference types=\"node\" />\n\nimport {AbsoluteFsPath, FileSystem, ReadonlyFileSystem} from '../../src/ngtsc/file_system';\nimport {Logger} from '../../src/ngtsc/logging';\nimport {ParsedConfiguration} from '../../src/perform_compile';\n\nimport {CommonJsDependencyHost} from './dependencies/commonjs_dependency_host';\nimport {DependencyResolver} from './dependencies/dependency_resolver';\nimport {DtsDependencyHost} from './dependencies/dts_dependency_host';\nimport {EsmDependencyHost} from './dependencies/esm_dependency_host';\nimport {ModuleResolver} from './dependencies/module_resolver';\nimport {UmdDependencyHost} from './dependencies/umd_dependency_host';\nimport {DirectoryWalkerEntryPointFinder} from './entry_point_finder/directory_walker_entry_point_finder';\nimport {EntryPointCollector} from './entry_point_finder/entry_point_collector';\nimport {EntryPointFinder} from './entry_point_finder/interface';\nimport {ProgramBasedEntryPointFinder} from './entry_point_finder/program_based_entry_point_finder';\nimport {TargetedEntryPointFinder} from './entry_point_finder/targeted_entry_point_finder';\nimport {getAnalyzeEntryPointsFn} from './execution/analyze_entry_points';\nimport {Executor} from './execution/api';\nimport {ClusterExecutor} from './execution/cluster/executor';\nimport {getCreateCompileFn} from './execution/create_compile_function';\nimport {SingleProcessExecutorAsync, SingleProcessExecutorSync} from './execution/single_process_executor';\nimport {CreateTaskCompletedCallback, TaskProcessingOutcome} from './execution/tasks/api';\nimport {composeTaskCompletedCallbacks, createLogErrorHandler, createMarkAsProcessedHandler, createThrowErrorHandler} from './execution/tasks/completion';\nimport {AsyncLocker} from './locking/async_locker';\nimport {LockFileWithChildProcess} from './locking/lock_file_with_child_process';\nimport {SyncLocker} from './locking/sync_locker';\nimport {AsyncNgccOptions, getMaxNumberOfWorkers, getSharedSetup, SyncNgccOptions} from './ngcc_options';\nimport {NgccConfiguration} from './packages/configuration';\nimport {EntryPointJsonProperty, SUPPORTED_FORMAT_PROPERTIES} from './packages/entry_point';\nimport {EntryPointManifest, InvalidatingEntryPointManifest} from './packages/entry_point_manifest';\nimport {PathMappings} from './path_mappings';\nimport {FileWriter} from './writing/file_writer';\nimport {DirectPackageJsonUpdater, PackageJsonUpdater} from './writing/package_json_updater';\n\n/**\n * This is the main entry-point into ngcc (aNGular Compatibility Compiler).\n *\n * You can call this function to process one or more npm packages, to ensure\n * that they are compatible with the ivy compiler (ngtsc).\n *\n * @param options The options telling ngcc what to compile and how.\n */\nexport function mainNgcc<T extends AsyncNgccOptions|SyncNgccOptions>(options: T):\n    T extends AsyncNgccOptions ? Promise<void>: void;\nexport function mainNgcc(options: AsyncNgccOptions|SyncNgccOptions): void|Promise<void> {\n  const {\n    basePath,\n    targetEntryPointPath,\n    propertiesToConsider,\n    typingsOnly,\n    compileAllFormats,\n    logger,\n    pathMappings,\n    async,\n    errorOnFailedEntryPoint,\n    enableI18nLegacyMessageIdFormat,\n    invalidateEntryPointManifest,\n    fileSystem,\n    absBasePath,\n    projectPath,\n    tsConfig,\n    getFileWriter,\n  } = getSharedSetup(options);\n\n  const config = new NgccConfiguration(fileSystem, projectPath);\n  const dependencyResolver = getDependencyResolver(fileSystem, logger, config, pathMappings);\n  const entryPointManifest = invalidateEntryPointManifest ?\n      new InvalidatingEntryPointManifest(fileSystem, config, logger) :\n      new EntryPointManifest(fileSystem, config, logger);\n\n  // Bail out early if the work is already done.\n  const supportedPropertiesToConsider = ensureSupportedProperties(propertiesToConsider);\n  const absoluteTargetEntryPointPath = targetEntryPointPath !== undefined ?\n      fileSystem.resolve(basePath, targetEntryPointPath) :\n      null;\n  const finder = getEntryPointFinder(\n      fileSystem, logger, dependencyResolver, config, entryPointManifest, absBasePath,\n      absoluteTargetEntryPointPath, pathMappings,\n      options.findEntryPointsFromTsConfigProgram ? tsConfig : null, projectPath);\n  if (finder instanceof TargetedEntryPointFinder &&\n      !finder.targetNeedsProcessingOrCleaning(supportedPropertiesToConsider, compileAllFormats)) {\n    logger.debug('The target entry-point has already been processed');\n    return;\n  }\n\n  // Determine the number of workers to use and whether ngcc should run in parallel.\n  const workerCount = async ? getMaxNumberOfWorkers() : 1;\n  const inParallel = workerCount > 1;\n\n  const analyzeEntryPoints = getAnalyzeEntryPointsFn(\n      logger, finder, fileSystem, supportedPropertiesToConsider, typingsOnly, compileAllFormats,\n      propertiesToConsider, inParallel);\n\n  // Create an updater that will actually write to disk.\n  const pkgJsonUpdater = new DirectPackageJsonUpdater(fileSystem);\n  const fileWriter = getFileWriter(pkgJsonUpdater);\n\n  // The function for creating the `compile()` function.\n  const createCompileFn = getCreateCompileFn(\n      fileSystem, logger, fileWriter, enableI18nLegacyMessageIdFormat, tsConfig, pathMappings);\n\n  // The executor for actually planning and getting the work done.\n  const createTaskCompletedCallback =\n      getCreateTaskCompletedCallback(pkgJsonUpdater, errorOnFailedEntryPoint, logger, fileSystem);\n  const executor = getExecutor(\n      async, workerCount, logger, fileWriter, pkgJsonUpdater, fileSystem, config,\n      createTaskCompletedCallback);\n\n  return executor.execute(analyzeEntryPoints, createCompileFn);\n}\n\nfunction ensureSupportedProperties(properties: string[]): EntryPointJsonProperty[] {\n  // Short-circuit the case where `properties` has fallen back to the default value:\n  // `SUPPORTED_FORMAT_PROPERTIES`\n  if (properties === SUPPORTED_FORMAT_PROPERTIES) return SUPPORTED_FORMAT_PROPERTIES;\n\n  const supportedProperties: EntryPointJsonProperty[] = [];\n\n  for (const prop of properties as EntryPointJsonProperty[]) {\n    if (SUPPORTED_FORMAT_PROPERTIES.indexOf(prop) !== -1) {\n      supportedProperties.push(prop);\n    }\n  }\n\n  if (supportedProperties.length === 0) {\n    throw new Error(\n        `No supported format property to consider among [${properties.join(', ')}]. ` +\n        `Supported properties: ${SUPPORTED_FORMAT_PROPERTIES.join(', ')}`);\n  }\n\n  return supportedProperties;\n}\n\nfunction getCreateTaskCompletedCallback(\n    pkgJsonUpdater: PackageJsonUpdater, errorOnFailedEntryPoint: boolean, logger: Logger,\n    fileSystem: ReadonlyFileSystem): CreateTaskCompletedCallback {\n  return taskQueue => composeTaskCompletedCallbacks({\n           [TaskProcessingOutcome.Processed]:\n               createMarkAsProcessedHandler(fileSystem, pkgJsonUpdater),\n           [TaskProcessingOutcome.Failed]:\n               errorOnFailedEntryPoint ? createThrowErrorHandler(fileSystem) :\n                                         createLogErrorHandler(logger, fileSystem, taskQueue),\n         });\n}\n\nfunction getExecutor(\n    async: boolean, workerCount: number, logger: Logger, fileWriter: FileWriter,\n    pkgJsonUpdater: PackageJsonUpdater, fileSystem: FileSystem, config: NgccConfiguration,\n    createTaskCompletedCallback: CreateTaskCompletedCallback): Executor {\n  const lockFile = new LockFileWithChildProcess(fileSystem, logger);\n  if (async) {\n    // Execute asynchronously (either serially or in parallel)\n    const {retryAttempts, retryDelay} = config.getLockingConfig();\n    const locker = new AsyncLocker(lockFile, logger, retryDelay, retryAttempts);\n    if (workerCount > 1) {\n      // Execute in parallel.\n      return new ClusterExecutor(\n          workerCount, fileSystem, logger, fileWriter, pkgJsonUpdater, locker,\n          createTaskCompletedCallback);\n    } else {\n      // Execute serially, on a single thread (async).\n      return new SingleProcessExecutorAsync(logger, locker, createTaskCompletedCallback);\n    }\n  } else {\n    // Execute serially, on a single thread (sync).\n    return new SingleProcessExecutorSync(\n        logger, new SyncLocker(lockFile), createTaskCompletedCallback);\n  }\n}\n\nfunction getDependencyResolver(\n    fileSystem: ReadonlyFileSystem, logger: Logger, config: NgccConfiguration,\n    pathMappings: PathMappings|undefined): DependencyResolver {\n  const moduleResolver = new ModuleResolver(fileSystem, pathMappings);\n  const esmDependencyHost = new EsmDependencyHost(fileSystem, moduleResolver);\n  const umdDependencyHost = new UmdDependencyHost(fileSystem, moduleResolver);\n  const commonJsDependencyHost = new CommonJsDependencyHost(fileSystem, moduleResolver);\n  const dtsDependencyHost = new DtsDependencyHost(fileSystem, pathMappings);\n  return new DependencyResolver(\n      fileSystem, logger, config, {\n        esm5: esmDependencyHost,\n        esm2015: esmDependencyHost,\n        umd: umdDependencyHost,\n        commonjs: commonJsDependencyHost\n      },\n      dtsDependencyHost);\n}\n\nfunction getEntryPointFinder(\n    fs: ReadonlyFileSystem, logger: Logger, resolver: DependencyResolver, config: NgccConfiguration,\n    entryPointManifest: EntryPointManifest, basePath: AbsoluteFsPath,\n    absoluteTargetEntryPointPath: AbsoluteFsPath|null, pathMappings: PathMappings|undefined,\n    tsConfig: ParsedConfiguration|null, projectPath: AbsoluteFsPath): EntryPointFinder {\n  if (absoluteTargetEntryPointPath !== null) {\n    return new TargetedEntryPointFinder(\n        fs, config, logger, resolver, basePath, pathMappings, absoluteTargetEntryPointPath);\n  } else {\n    const entryPointCollector = new EntryPointCollector(fs, config, logger, resolver);\n    if (tsConfig !== null) {\n      return new ProgramBasedEntryPointFinder(\n          fs, config, logger, resolver, entryPointCollector, entryPointManifest, basePath, tsConfig,\n          projectPath);\n    } else {\n      return new DirectoryWalkerEntryPointFinder(\n          logger, resolver, entryPointCollector, entryPointManifest, basePath, pathMappings);\n    }\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}