{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nvar _objectSpread = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/objectSpread2\");\n\nvar _classCallCheck = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/createClass\");\n\nvar DescriptionFileUtils = require(\"./DescriptionFileUtils\");\n/** @typedef {import(\"./Resolver\")} Resolver */\n\n/** @typedef {import(\"./Resolver\").ResolveStepHook} ResolveStepHook */\n\n\nmodule.exports = /*#__PURE__*/function () {\n  /**\n   * @param {string | ResolveStepHook} source source\n   * @param {string[]} filenames filenames\n   * @param {boolean} pathIsFile pathIsFile\n   * @param {string | ResolveStepHook} target target\n   */\n  function DescriptionFilePlugin(source, filenames, pathIsFile, target) {\n    _classCallCheck(this, DescriptionFilePlugin);\n\n    this.source = source;\n    this.filenames = filenames;\n    this.pathIsFile = pathIsFile;\n    this.target = target;\n  }\n  /**\n   * @param {Resolver} resolver the resolver\n   * @returns {void}\n   */\n\n\n  _createClass(DescriptionFilePlugin, [{\n    key: \"apply\",\n    value: function apply(resolver) {\n      var _this = this;\n\n      var target = resolver.ensureHook(this.target);\n      resolver.getHook(this.source).tapAsync(\"DescriptionFilePlugin\", function (request, resolveContext, callback) {\n        var path = request.path;\n        if (!path) return callback();\n        var directory = _this.pathIsFile ? DescriptionFileUtils.cdUp(path) : path;\n        if (!directory) return callback();\n        DescriptionFileUtils.loadDescriptionFile(resolver, directory, _this.filenames, request.descriptionFilePath ? {\n          path: request.descriptionFilePath,\n          content: request.descriptionFileData,\n          directory:\n          /** @type {string} */\n          request.descriptionFileRoot\n        } : undefined, resolveContext, function (err, result) {\n          if (err) return callback(err);\n\n          if (!result) {\n            if (resolveContext.log) resolveContext.log(\"No description file found in \".concat(directory, \" or above\"));\n            return callback();\n          }\n\n          var relativePath = \".\" + path.substr(result.directory.length).replace(/\\\\/g, \"/\");\n\n          var obj = _objectSpread(_objectSpread({}, request), {}, {\n            descriptionFilePath: result.path,\n            descriptionFileData: result.content,\n            descriptionFileRoot: result.directory,\n            relativePath: relativePath\n          });\n\n          resolver.doResolve(target, obj, \"using description file: \" + result.path + \" (relative path: \" + relativePath + \")\", resolveContext, function (err, result) {\n            if (err) return callback(err); // Don't allow other processing\n\n            if (result === undefined) return callback(null, null);\n            callback(null, result);\n          });\n        });\n      });\n    }\n  }]);\n\n  return DescriptionFilePlugin;\n}();","map":{"version":3,"sources":["/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/enhanced-resolve/lib/DescriptionFilePlugin.js"],"names":["DescriptionFileUtils","require","module","exports","source","filenames","pathIsFile","target","resolver","ensureHook","getHook","tapAsync","request","resolveContext","callback","path","directory","cdUp","loadDescriptionFile","descriptionFilePath","content","descriptionFileData","descriptionFileRoot","undefined","err","result","log","relativePath","substr","length","replace","obj","doResolve"],"mappings":"AAAA;AACA;AACA;AACA;AAEA;;;;;;;;AAEA,IAAMA,oBAAoB,GAAGC,OAAO,CAAC,wBAAD,CAApC;AAEA;;AACA;;;AAEAC,MAAM,CAACC,OAAP;AACC;AACD;AACA;AACA;AACA;AACA;AACC,iCAAYC,MAAZ,EAAoBC,SAApB,EAA+BC,UAA/B,EAA2CC,MAA3C,EAAmD;AAAA;;AAClD,SAAKH,MAAL,GAAcA,MAAd;AACA,SAAKC,SAAL,GAAiBA,SAAjB;AACA,SAAKC,UAAL,GAAkBA,UAAlB;AACA,SAAKC,MAAL,GAAcA,MAAd;AACA;AAED;AACD;AACA;AACA;;;AAjBA;AAAA;AAAA,WAkBC,eAAMC,QAAN,EAAgB;AAAA;;AACf,UAAMD,MAAM,GAAGC,QAAQ,CAACC,UAAT,CAAoB,KAAKF,MAAzB,CAAf;AACAC,MAAAA,QAAQ,CACNE,OADF,CACU,KAAKN,MADf,EAEEO,QAFF,CAGE,uBAHF,EAIE,UAACC,OAAD,EAAUC,cAAV,EAA0BC,QAA1B,EAAuC;AACtC,YAAMC,IAAI,GAAGH,OAAO,CAACG,IAArB;AACA,YAAI,CAACA,IAAL,EAAW,OAAOD,QAAQ,EAAf;AACX,YAAME,SAAS,GAAG,KAAI,CAACV,UAAL,GACfN,oBAAoB,CAACiB,IAArB,CAA0BF,IAA1B,CADe,GAEfA,IAFH;AAGA,YAAI,CAACC,SAAL,EAAgB,OAAOF,QAAQ,EAAf;AAChBd,QAAAA,oBAAoB,CAACkB,mBAArB,CACCV,QADD,EAECQ,SAFD,EAGC,KAAI,CAACX,SAHN,EAICO,OAAO,CAACO,mBAAR,GACG;AACAJ,UAAAA,IAAI,EAAEH,OAAO,CAACO,mBADd;AAEAC,UAAAA,OAAO,EAAER,OAAO,CAACS,mBAFjB;AAGAL,UAAAA,SAAS;AAAE;AAAuBJ,UAAAA,OAAO,CAACU;AAH1C,SADH,GAMGC,SAVJ,EAWCV,cAXD,EAYC,UAACW,GAAD,EAAMC,MAAN,EAAiB;AAChB,cAAID,GAAJ,EAAS,OAAOV,QAAQ,CAACU,GAAD,CAAf;;AACT,cAAI,CAACC,MAAL,EAAa;AACZ,gBAAIZ,cAAc,CAACa,GAAnB,EACCb,cAAc,CAACa,GAAf,wCACiCV,SADjC;AAGD,mBAAOF,QAAQ,EAAf;AACA;;AACD,cAAMa,YAAY,GACjB,MAAMZ,IAAI,CAACa,MAAL,CAAYH,MAAM,CAACT,SAAP,CAAiBa,MAA7B,EAAqCC,OAArC,CAA6C,KAA7C,EAAoD,GAApD,CADP;;AAEA,cAAMC,GAAG,mCACLnB,OADK;AAERO,YAAAA,mBAAmB,EAAEM,MAAM,CAACV,IAFpB;AAGRM,YAAAA,mBAAmB,EAAEI,MAAM,CAACL,OAHpB;AAIRE,YAAAA,mBAAmB,EAAEG,MAAM,CAACT,SAJpB;AAKRW,YAAAA,YAAY,EAAEA;AALN,YAAT;;AAOAnB,UAAAA,QAAQ,CAACwB,SAAT,CACCzB,MADD,EAECwB,GAFD,EAGC,6BACCN,MAAM,CAACV,IADR,GAEC,mBAFD,GAGCY,YAHD,GAIC,GAPF,EAQCd,cARD,EASC,UAACW,GAAD,EAAMC,MAAN,EAAiB;AAChB,gBAAID,GAAJ,EAAS,OAAOV,QAAQ,CAACU,GAAD,CAAf,CADO,CAGhB;;AACA,gBAAIC,MAAM,KAAKF,SAAf,EAA0B,OAAOT,QAAQ,CAAC,IAAD,EAAO,IAAP,CAAf;AAC1BA,YAAAA,QAAQ,CAAC,IAAD,EAAOW,MAAP,CAAR;AACA,WAfF;AAiBA,SA/CF;AAiDA,OA5DH;AA8DA;AAlFF;;AAAA;AAAA","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst DescriptionFileUtils = require(\"./DescriptionFileUtils\");\n\n/** @typedef {import(\"./Resolver\")} Resolver */\n/** @typedef {import(\"./Resolver\").ResolveStepHook} ResolveStepHook */\n\nmodule.exports = class DescriptionFilePlugin {\n\t/**\n\t * @param {string | ResolveStepHook} source source\n\t * @param {string[]} filenames filenames\n\t * @param {boolean} pathIsFile pathIsFile\n\t * @param {string | ResolveStepHook} target target\n\t */\n\tconstructor(source, filenames, pathIsFile, target) {\n\t\tthis.source = source;\n\t\tthis.filenames = filenames;\n\t\tthis.pathIsFile = pathIsFile;\n\t\tthis.target = target;\n\t}\n\n\t/**\n\t * @param {Resolver} resolver the resolver\n\t * @returns {void}\n\t */\n\tapply(resolver) {\n\t\tconst target = resolver.ensureHook(this.target);\n\t\tresolver\n\t\t\t.getHook(this.source)\n\t\t\t.tapAsync(\n\t\t\t\t\"DescriptionFilePlugin\",\n\t\t\t\t(request, resolveContext, callback) => {\n\t\t\t\t\tconst path = request.path;\n\t\t\t\t\tif (!path) return callback();\n\t\t\t\t\tconst directory = this.pathIsFile\n\t\t\t\t\t\t? DescriptionFileUtils.cdUp(path)\n\t\t\t\t\t\t: path;\n\t\t\t\t\tif (!directory) return callback();\n\t\t\t\t\tDescriptionFileUtils.loadDescriptionFile(\n\t\t\t\t\t\tresolver,\n\t\t\t\t\t\tdirectory,\n\t\t\t\t\t\tthis.filenames,\n\t\t\t\t\t\trequest.descriptionFilePath\n\t\t\t\t\t\t\t? {\n\t\t\t\t\t\t\t\t\tpath: request.descriptionFilePath,\n\t\t\t\t\t\t\t\t\tcontent: request.descriptionFileData,\n\t\t\t\t\t\t\t\t\tdirectory: /** @type {string} */ (request.descriptionFileRoot)\n\t\t\t\t\t\t\t  }\n\t\t\t\t\t\t\t: undefined,\n\t\t\t\t\t\tresolveContext,\n\t\t\t\t\t\t(err, result) => {\n\t\t\t\t\t\t\tif (err) return callback(err);\n\t\t\t\t\t\t\tif (!result) {\n\t\t\t\t\t\t\t\tif (resolveContext.log)\n\t\t\t\t\t\t\t\t\tresolveContext.log(\n\t\t\t\t\t\t\t\t\t\t`No description file found in ${directory} or above`\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\treturn callback();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tconst relativePath =\n\t\t\t\t\t\t\t\t\".\" + path.substr(result.directory.length).replace(/\\\\/g, \"/\");\n\t\t\t\t\t\t\tconst obj = {\n\t\t\t\t\t\t\t\t...request,\n\t\t\t\t\t\t\t\tdescriptionFilePath: result.path,\n\t\t\t\t\t\t\t\tdescriptionFileData: result.content,\n\t\t\t\t\t\t\t\tdescriptionFileRoot: result.directory,\n\t\t\t\t\t\t\t\trelativePath: relativePath\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\tresolver.doResolve(\n\t\t\t\t\t\t\t\ttarget,\n\t\t\t\t\t\t\t\tobj,\n\t\t\t\t\t\t\t\t\"using description file: \" +\n\t\t\t\t\t\t\t\t\tresult.path +\n\t\t\t\t\t\t\t\t\t\" (relative path: \" +\n\t\t\t\t\t\t\t\t\trelativePath +\n\t\t\t\t\t\t\t\t\t\")\",\n\t\t\t\t\t\t\t\tresolveContext,\n\t\t\t\t\t\t\t\t(err, result) => {\n\t\t\t\t\t\t\t\t\tif (err) return callback(err);\n\n\t\t\t\t\t\t\t\t\t// Don't allow other processing\n\t\t\t\t\t\t\t\t\tif (result === undefined) return callback(null, null);\n\t\t\t\t\t\t\t\t\tcallback(null, result);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t);\n\t}\n};\n"]},"metadata":{},"sourceType":"script"}