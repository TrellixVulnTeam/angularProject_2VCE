{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nvar _classCallCheck = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _get = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/get\");\n\nvar _getPrototypeOf = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar ChunkGroup = require(\"./ChunkGroup\");\n/** @typedef {import(\"./Chunk\")} Chunk */\n\n/**\n * Entrypoint serves as an encapsulation primitive for chunks that are\n * a part of a single ChunkGroup. They represent all bundles that need to be loaded for a\n * single instance of a page. Multi-page application architectures will typically yield multiple Entrypoint objects\n * inside of the compilation, whereas a Single Page App may only contain one with many lazy-loaded chunks.\n */\n\n\nvar Entrypoint = /*#__PURE__*/function (_ChunkGroup) {\n  _inherits(Entrypoint, _ChunkGroup);\n\n  var _super = _createSuper(Entrypoint);\n\n  /**\n   * Creates an instance of Entrypoint.\n   * @param {string} name the name of the entrypoint\n   */\n  function Entrypoint(name) {\n    var _this;\n\n    _classCallCheck(this, Entrypoint);\n\n    _this = _super.call(this, name);\n    /** @type {Chunk=} */\n\n    _this.runtimeChunk = undefined;\n    return _this;\n  }\n  /**\n   * isInitial will always return true for Entrypoint ChunkGroup.\n   * @returns {true} returns true as all entrypoints are initial ChunkGroups\n   */\n\n\n  _createClass(Entrypoint, [{\n    key: \"isInitial\",\n    value: function isInitial() {\n      return true;\n    }\n    /**\n     * Sets the runtimeChunk for an entrypoint.\n     * @param {Chunk} chunk the chunk being set as the runtime chunk.\n     * @returns {void}\n     */\n\n  }, {\n    key: \"setRuntimeChunk\",\n    value: function setRuntimeChunk(chunk) {\n      this.runtimeChunk = chunk;\n    }\n    /**\n     * Fetches the chunk reference containing the webpack bootstrap code\n     * @returns {Chunk} returns the runtime chunk or first chunk in `this.chunks`\n     */\n\n  }, {\n    key: \"getRuntimeChunk\",\n    value: function getRuntimeChunk() {\n      return this.runtimeChunk || this.chunks[0];\n    }\n    /**\n     * @param {Chunk} oldChunk chunk to be replaced\n     * @param {Chunk} newChunk New chunk that will be replaced with\n     * @returns {boolean} returns true if the replacement was successful\n     */\n\n  }, {\n    key: \"replaceChunk\",\n    value: function replaceChunk(oldChunk, newChunk) {\n      if (this.runtimeChunk === oldChunk) this.runtimeChunk = newChunk;\n      return _get(_getPrototypeOf(Entrypoint.prototype), \"replaceChunk\", this).call(this, oldChunk, newChunk);\n    }\n  }]);\n\n  return Entrypoint;\n}(ChunkGroup);\n\nmodule.exports = Entrypoint;","map":{"version":3,"sources":["/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/webpack/lib/Entrypoint.js"],"names":["ChunkGroup","require","Entrypoint","name","runtimeChunk","undefined","chunk","chunks","oldChunk","newChunk","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;AAEA,IAAMA,UAAU,GAAGC,OAAO,CAAC,cAAD,CAA1B;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;IACMC,U;;;;;AACL;AACD;AACA;AACA;AACC,sBAAYC,IAAZ,EAAkB;AAAA;;AAAA;;AACjB,8BAAMA,IAAN;AACA;;AACA,UAAKC,YAAL,GAAoBC,SAApB;AAHiB;AAIjB;AAED;AACD;AACA;AACA;;;;;WACC,qBAAY;AACX,aAAO,IAAP;AACA;AAED;AACD;AACA;AACA;AACA;;;;WACC,yBAAgBC,KAAhB,EAAuB;AACtB,WAAKF,YAAL,GAAoBE,KAApB;AACA;AAED;AACD;AACA;AACA;;;;WACC,2BAAkB;AACjB,aAAO,KAAKF,YAAL,IAAqB,KAAKG,MAAL,CAAY,CAAZ,CAA5B;AACA;AAED;AACD;AACA;AACA;AACA;;;;WACC,sBAAaC,QAAb,EAAuBC,QAAvB,EAAiC;AAChC,UAAI,KAAKL,YAAL,KAAsBI,QAA1B,EAAoC,KAAKJ,YAAL,GAAoBK,QAApB;AACpC,0FAA0BD,QAA1B,EAAoCC,QAApC;AACA;;;;EA5CuBT,U;;AA+CzBU,MAAM,CAACC,OAAP,GAAiBT,UAAjB","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst ChunkGroup = require(\"./ChunkGroup\");\n\n/** @typedef {import(\"./Chunk\")} Chunk */\n\n/**\n * Entrypoint serves as an encapsulation primitive for chunks that are\n * a part of a single ChunkGroup. They represent all bundles that need to be loaded for a\n * single instance of a page. Multi-page application architectures will typically yield multiple Entrypoint objects\n * inside of the compilation, whereas a Single Page App may only contain one with many lazy-loaded chunks.\n */\nclass Entrypoint extends ChunkGroup {\n\t/**\n\t * Creates an instance of Entrypoint.\n\t * @param {string} name the name of the entrypoint\n\t */\n\tconstructor(name) {\n\t\tsuper(name);\n\t\t/** @type {Chunk=} */\n\t\tthis.runtimeChunk = undefined;\n\t}\n\n\t/**\n\t * isInitial will always return true for Entrypoint ChunkGroup.\n\t * @returns {true} returns true as all entrypoints are initial ChunkGroups\n\t */\n\tisInitial() {\n\t\treturn true;\n\t}\n\n\t/**\n\t * Sets the runtimeChunk for an entrypoint.\n\t * @param {Chunk} chunk the chunk being set as the runtime chunk.\n\t * @returns {void}\n\t */\n\tsetRuntimeChunk(chunk) {\n\t\tthis.runtimeChunk = chunk;\n\t}\n\n\t/**\n\t * Fetches the chunk reference containing the webpack bootstrap code\n\t * @returns {Chunk} returns the runtime chunk or first chunk in `this.chunks`\n\t */\n\tgetRuntimeChunk() {\n\t\treturn this.runtimeChunk || this.chunks[0];\n\t}\n\n\t/**\n\t * @param {Chunk} oldChunk chunk to be replaced\n\t * @param {Chunk} newChunk New chunk that will be replaced with\n\t * @returns {boolean} returns true if the replacement was successful\n\t */\n\treplaceChunk(oldChunk, newChunk) {\n\t\tif (this.runtimeChunk === oldChunk) this.runtimeChunk = newChunk;\n\t\treturn super.replaceChunk(oldChunk, newChunk);\n\t}\n}\n\nmodule.exports = Entrypoint;\n"]},"metadata":{},"sourceType":"script"}