{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nvar _classCallCheck = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/@babel/runtime/helpers/createClass\");\n\nvar DllEntryDependency = require(\"./dependencies/DllEntryDependency\");\n\nvar SingleEntryDependency = require(\"./dependencies/SingleEntryDependency\");\n\nvar DllModuleFactory = require(\"./DllModuleFactory\");\n\nvar DllEntryPlugin = /*#__PURE__*/function () {\n  function DllEntryPlugin(context, entries, name) {\n    _classCallCheck(this, DllEntryPlugin);\n\n    this.context = context;\n    this.entries = entries;\n    this.name = name;\n  }\n\n  _createClass(DllEntryPlugin, [{\n    key: \"apply\",\n    value: function apply(compiler) {\n      var _this = this;\n\n      compiler.hooks.compilation.tap(\"DllEntryPlugin\", function (compilation, _ref) {\n        var normalModuleFactory = _ref.normalModuleFactory;\n        var dllModuleFactory = new DllModuleFactory();\n        compilation.dependencyFactories.set(DllEntryDependency, dllModuleFactory);\n        compilation.dependencyFactories.set(SingleEntryDependency, normalModuleFactory);\n      });\n      compiler.hooks.make.tapAsync(\"DllEntryPlugin\", function (compilation, callback) {\n        compilation.addEntry(_this.context, new DllEntryDependency(_this.entries.map(function (e, idx) {\n          var dep = new SingleEntryDependency(e);\n          dep.loc = {\n            name: _this.name,\n            index: idx\n          };\n          return dep;\n        }), _this.name), _this.name, callback);\n      });\n    }\n  }]);\n\n  return DllEntryPlugin;\n}();\n\nmodule.exports = DllEntryPlugin;","map":{"version":3,"sources":["/Users/abdillahihussein/Documents/GitHub/angularProject/node_modules/webpack/lib/DllEntryPlugin.js"],"names":["DllEntryDependency","require","SingleEntryDependency","DllModuleFactory","DllEntryPlugin","context","entries","name","compiler","hooks","compilation","tap","normalModuleFactory","dllModuleFactory","dependencyFactories","set","make","tapAsync","callback","addEntry","map","e","idx","dep","loc","index","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;;;;;AAEA,IAAMA,kBAAkB,GAAGC,OAAO,CAAC,mCAAD,CAAlC;;AACA,IAAMC,qBAAqB,GAAGD,OAAO,CAAC,sCAAD,CAArC;;AACA,IAAME,gBAAgB,GAAGF,OAAO,CAAC,oBAAD,CAAhC;;IAEMG,c;AACL,0BAAYC,OAAZ,EAAqBC,OAArB,EAA8BC,IAA9B,EAAoC;AAAA;;AACnC,SAAKF,OAAL,GAAeA,OAAf;AACA,SAAKC,OAAL,GAAeA,OAAf;AACA,SAAKC,IAAL,GAAYA,IAAZ;AACA;;;;WAED,eAAMC,QAAN,EAAgB;AAAA;;AACfA,MAAAA,QAAQ,CAACC,KAAT,CAAeC,WAAf,CAA2BC,GAA3B,CACC,gBADD,EAEC,UAACD,WAAD,QAA0C;AAAA,YAA1BE,mBAA0B,QAA1BA,mBAA0B;AACzC,YAAMC,gBAAgB,GAAG,IAAIV,gBAAJ,EAAzB;AACAO,QAAAA,WAAW,CAACI,mBAAZ,CAAgCC,GAAhC,CACCf,kBADD,EAECa,gBAFD;AAIAH,QAAAA,WAAW,CAACI,mBAAZ,CAAgCC,GAAhC,CACCb,qBADD,EAECU,mBAFD;AAIA,OAZF;AAcAJ,MAAAA,QAAQ,CAACC,KAAT,CAAeO,IAAf,CAAoBC,QAApB,CAA6B,gBAA7B,EAA+C,UAACP,WAAD,EAAcQ,QAAd,EAA2B;AACzER,QAAAA,WAAW,CAACS,QAAZ,CACC,KAAI,CAACd,OADN,EAEC,IAAIL,kBAAJ,CACC,KAAI,CAACM,OAAL,CAAac,GAAb,CAAiB,UAACC,CAAD,EAAIC,GAAJ,EAAY;AAC5B,cAAMC,GAAG,GAAG,IAAIrB,qBAAJ,CAA0BmB,CAA1B,CAAZ;AACAE,UAAAA,GAAG,CAACC,GAAJ,GAAU;AACTjB,YAAAA,IAAI,EAAE,KAAI,CAACA,IADF;AAETkB,YAAAA,KAAK,EAAEH;AAFE,WAAV;AAIA,iBAAOC,GAAP;AACA,SAPD,CADD,EASC,KAAI,CAAChB,IATN,CAFD,EAaC,KAAI,CAACA,IAbN,EAcCW,QAdD;AAgBA,OAjBD;AAkBA;;;;;;AAGFQ,MAAM,CAACC,OAAP,GAAiBvB,cAAjB","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst DllEntryDependency = require(\"./dependencies/DllEntryDependency\");\nconst SingleEntryDependency = require(\"./dependencies/SingleEntryDependency\");\nconst DllModuleFactory = require(\"./DllModuleFactory\");\n\nclass DllEntryPlugin {\n\tconstructor(context, entries, name) {\n\t\tthis.context = context;\n\t\tthis.entries = entries;\n\t\tthis.name = name;\n\t}\n\n\tapply(compiler) {\n\t\tcompiler.hooks.compilation.tap(\n\t\t\t\"DllEntryPlugin\",\n\t\t\t(compilation, { normalModuleFactory }) => {\n\t\t\t\tconst dllModuleFactory = new DllModuleFactory();\n\t\t\t\tcompilation.dependencyFactories.set(\n\t\t\t\t\tDllEntryDependency,\n\t\t\t\t\tdllModuleFactory\n\t\t\t\t);\n\t\t\t\tcompilation.dependencyFactories.set(\n\t\t\t\t\tSingleEntryDependency,\n\t\t\t\t\tnormalModuleFactory\n\t\t\t\t);\n\t\t\t}\n\t\t);\n\t\tcompiler.hooks.make.tapAsync(\"DllEntryPlugin\", (compilation, callback) => {\n\t\t\tcompilation.addEntry(\n\t\t\t\tthis.context,\n\t\t\t\tnew DllEntryDependency(\n\t\t\t\t\tthis.entries.map((e, idx) => {\n\t\t\t\t\t\tconst dep = new SingleEntryDependency(e);\n\t\t\t\t\t\tdep.loc = {\n\t\t\t\t\t\t\tname: this.name,\n\t\t\t\t\t\t\tindex: idx\n\t\t\t\t\t\t};\n\t\t\t\t\t\treturn dep;\n\t\t\t\t\t}),\n\t\t\t\t\tthis.name\n\t\t\t\t),\n\t\t\t\tthis.name,\n\t\t\t\tcallback\n\t\t\t);\n\t\t});\n\t}\n}\n\nmodule.exports = DllEntryPlugin;\n"]},"metadata":{},"sourceType":"script"}